(function() {var implementors = {};
implementors["competitive"] = [{"text":"impl&lt;T:&nbsp;Default + Clone + Ord + MinimumBounded&gt; Default for MaxOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + Clone + Ord + MaximumBounded&gt; Default for MinOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + Clone + PartialEq&gt; Default for FirstOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + Clone + PartialEq&gt; Default for LastOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + Copy + Zero + Add&lt;Output = T&gt;&gt; Default for AdditiveOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + Copy + One + Mul&lt;Output = T&gt;&gt; Default for MultiplicativeOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + Copy + PartialEq + Zero + Add&lt;Output = T&gt; + One + Mul&lt;Output = T&gt;&gt; Default for LinearOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + Copy + PartialEq + BitAndIdentity&gt; Default for BitAndOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + Copy + PartialEq + BitOrIdentity&gt; Default for BitOrOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default + Copy + PartialEq + BitXorIdentity&gt; Default for BitXorOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Default for CHTLine","synthetic":false,"types":[]},{"text":"impl Default for BitSet","synthetic":false,"types":[]},{"text":"impl Default for Adjacent","synthetic":false,"types":[]},{"text":"impl Default for Graph","synthetic":false,"types":[]},{"text":"impl Default for RevGraph","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default&gt; Default for Polynomial&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Default&gt; Default for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Modulus&gt; Default for MInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl Default for QuadDouble","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Eq + Hash&gt; Default for Counter&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Default for Xorshift","synthetic":false,"types":[]},{"text":"impl Default for EulerTourForEdge","synthetic":false,"types":[]},{"text":"impl Default for EulerTourForVertex","synthetic":false,"types":[]},{"text":"impl Default for EulerTourForRichVertex","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()