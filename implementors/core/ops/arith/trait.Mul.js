(function() {var implementors = {};
implementors["competitive"] = [{"text":"impl&lt;'a, T:&nbsp;Copy + Default + Add&lt;Output = T&gt; + Sub&lt;Output = T&gt; + Mul&lt;Output = T&gt;&gt; Mul&lt;&amp;'a Matrix&lt;T&gt;&gt; for &amp;'a Matrix&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'_, '_&gt; Mul&lt;&amp;'_ Polynomial&gt; for &amp;'_ Polynomial","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Add&lt;Output = T&gt; + Sub&lt;Output = T&gt; + Mul&lt;Output = T&gt;&gt; Mul&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Mul&lt;Output = T&gt;&gt; Mul&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Modulus&gt; Mul&lt;MInt&lt;M&gt;&gt; for MInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Modulus, '_&gt; Mul&lt;MInt&lt;M&gt;&gt; for &amp;'_ MInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Modulus, '_&gt; Mul&lt;&amp;'_ MInt&lt;M&gt;&gt; for MInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Modulus, '_, '_&gt; Mul&lt;&amp;'_ MInt&lt;M&gt;&gt; for &amp;'_ MInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;f64&gt; for QuadDouble","synthetic":false,"types":[]},{"text":"impl Mul&lt;QuadDouble&gt; for QuadDouble","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()