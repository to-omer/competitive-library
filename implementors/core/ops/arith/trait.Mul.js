(function() {var implementors = {};
implementors["competitive"] = [{"text":"impl&lt;T, Multiplier, '_&gt; Mul&lt;&amp;'_ T&gt; for FormalPowerSeries&lt;T, Multiplier&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: FormalPowerSeriesCoefficient,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, Multiplier&gt; Mul&lt;FormalPowerSeries&lt;T, Multiplier&gt;&gt; for FormalPowerSeries&lt;T, Multiplier&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Multiplier: FormalPowerSeriesMultiplier&lt;T = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, Multiplier, '_, '_&gt; Mul&lt;&amp;'_ FormalPowerSeries&lt;T, Multiplier&gt;&gt; for &amp;'_ FormalPowerSeries&lt;T, Multiplier&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Multiplier: FormalPowerSeriesMultiplier&lt;T = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy + Zero + Add&lt;Output = T&gt; + Mul&lt;Output = T&gt;&gt; Mul&lt;&amp;'a Matrix&lt;T&gt;&gt; for &amp;'a Matrix&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Zero + Add&lt;Output = T&gt; + Mul&lt;Output = T&gt;, '_, '_&gt; Mul&lt;&amp;'_ Polynomial&lt;T&gt;&gt; for &amp;'_ Polynomial&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Add&lt;Output = T&gt; + Sub&lt;Output = T&gt; + Mul&lt;Output = T&gt;&gt; Mul&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Mul&lt;Output = T&gt;&gt; Mul&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M&gt; Mul&lt;MInt&lt;M&gt;&gt; for MInt&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: MIntBase,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M, '_&gt; Mul&lt;MInt&lt;M&gt;&gt; for &amp;'_ MInt&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: MIntBase,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M, '_&gt; Mul&lt;&amp;'_ MInt&lt;M&gt;&gt; for MInt&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: MIntBase,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M, '_, '_&gt; Mul&lt;&amp;'_ MInt&lt;M&gt;&gt; for &amp;'_ MInt&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: MIntBase,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Mul&lt;f64&gt; for QuadDouble","synthetic":false,"types":[]},{"text":"impl Mul&lt;QuadDouble&gt; for QuadDouble","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()