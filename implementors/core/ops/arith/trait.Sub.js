(function() {var implementors = {};
implementors["competitive"] = [{"text":"impl&lt;'a, T:&nbsp;Copy + Zero + Sub&lt;Output = T&gt;&gt; Sub&lt;&amp;'a Matrix&lt;T&gt;&gt; for &amp;'a Matrix&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Sub&lt;Output = T&gt;, '_, '_&gt; Sub&lt;&amp;'_ Polynomial&lt;T&gt;&gt; for &amp;'_ Polynomial&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sub&lt;Output = T&gt;&gt; Sub&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Sub&lt;Output = T&gt;&gt; Sub&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Modulus&gt; Sub&lt;MInt&lt;M&gt;&gt; for MInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Modulus, '_&gt; Sub&lt;MInt&lt;M&gt;&gt; for &amp;'_ MInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Modulus, '_&gt; Sub&lt;&amp;'_ MInt&lt;M&gt;&gt; for MInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Modulus, '_, '_&gt; Sub&lt;&amp;'_ MInt&lt;M&gt;&gt; for &amp;'_ MInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl Sub&lt;QuadDouble&gt; for QuadDouble","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()