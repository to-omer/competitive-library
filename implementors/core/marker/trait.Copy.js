(function() {var implementors = {};
implementors["competitive"] = [{"text":"impl&lt;T:&nbsp;Copy + Clone + Ord + MinimumBounded&gt; Copy for MaxOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Clone + Ord + MaximumBounded&gt; Copy for MinOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Clone + PartialEq&gt; Copy for FirstOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Clone + PartialEq&gt; Copy for LastOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Zero + Add&lt;Output = T&gt;&gt; Copy for AdditiveOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + One + Mul&lt;Output = T&gt;&gt; Copy for MultiplicativeOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + PartialEq + Zero + Add&lt;Output = T&gt; + One + Mul&lt;Output = T&gt;&gt; Copy for LinearOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + PartialEq + BitAndIdentity&gt; Copy for BitAndOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + PartialEq + BitOrIdentity&gt; Copy for BitOrOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + PartialEq + BitXorIdentity&gt; Copy for BitXorOperation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Clone + Ord + MinimumBounded&gt; Copy for Top2Operation&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for PermutationOperation","synthetic":false,"types":[]},{"text":"impl Copy for CCW","synthetic":false,"types":[]},{"text":"impl Copy for Adjacency","synthetic":false,"types":[]},{"text":"impl Copy for GridGraph","synthetic":false,"types":[]},{"text":"impl Copy for DirectedEdge","synthetic":false,"types":[]},{"text":"impl Copy for UndirectedEdge","synthetic":false,"types":[]},{"text":"impl Copy for BidirectionalEdge","synthetic":false,"types":[]},{"text":"impl Copy for Adjacency","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M&gt; Copy for MInt&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: MIntBase,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for QuadDouble","synthetic":false,"types":[]},{"text":"impl Copy for Usize1","synthetic":false,"types":[]},{"text":"impl Copy for Chars","synthetic":false,"types":[]},{"text":"impl Copy for CharsWithBase","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + IterScan, B:&nbsp;Copy + FromIterator&lt;&lt;T as IterScan&gt;::Output&gt;&gt; Copy for Collect&lt;T, B&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()