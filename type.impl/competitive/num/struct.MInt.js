(function() {
    var type_impls = Object.fromEntries([["competitive",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#333\">Source</a><a href=\"#impl-Add%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#333\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#333\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;) -&gt; &lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&MInt<M>>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#182-191\">Source</a><a href=\"#impl-Add-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#186\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#188-190\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: Self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#374\">Source</a><a href=\"#impl-AddAssign%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#374\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&MInt<M>>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#374\">Source</a><a href=\"#impl-AddAssign-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#374\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#92-100\">Source</a><a href=\"#impl-Clone-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#97-99\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#102-109\">Source</a><a href=\"#impl-Debug-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#106-108\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#110-118\">Source</a><a href=\"#impl-Default-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#115-117\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#268-276\">Source</a><a href=\"#impl-Display-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,\n    M::<a class=\"associatedtype\" href=\"competitive/num/trait.MIntBase.html#associatedtype.Inner\" title=\"type competitive::num::MIntBase::Inner\">Inner</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#273-275\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#336\">Source</a><a href=\"#impl-Div%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#336\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#336\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;) -&gt; &lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&MInt<M>>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#212-221\">Source</a><a href=\"#impl-Div-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#216\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#218-220\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: Self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#377\">Source</a><a href=\"#impl-DivAssign%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#377\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&MInt<M>>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#377\">Source</a><a href=\"#impl-DivAssign-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#377\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FormalPowerSeriesCoefficientSqrt-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/mod.rs.html#62-69\">Source</a><a href=\"#impl-FormalPowerSeriesCoefficientSqrt-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficientSqrt.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficientSqrt\">FormalPowerSeriesCoefficientSqrt</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; + <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.sqrt_coefficient\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/mod.rs.html#66-68\">Source</a><a href=\"#method.sqrt_coefficient\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.FormalPowerSeriesCoefficientSqrt.html#tymethod.sqrt_coefficient\" class=\"fn\">sqrt_coefficient</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></div></details>","FormalPowerSeriesCoefficientSqrt","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci128%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Ci128%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i128.html\">i128</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i128>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Ci16%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i16.html\">i16</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i16>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci32%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Ci32%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i32>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci64%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Ci64%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i64>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Ci8%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i8.html\">i8</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<i8>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cisize%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Cisize%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.isize.html\">isize</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<isize>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu128%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Cu128%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u128.html\">u128</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u128>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Cu16%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u16>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu32%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Cu32%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u32>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu64%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Cu64%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u64>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Cu8%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<u8>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cusize%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#impl-From%3Cusize%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#160-162\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<usize>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#277-287\">Source</a><a href=\"#impl-FromStr-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>,\n    M::<a class=\"associatedtype\" href=\"competitive/num/trait.MIntBase.html#associatedtype.Inner\" title=\"type competitive::num::MIntBase::Inner\">Inner</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#282\">Source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = &lt;&lt;M as <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>&gt;::<a class=\"associatedtype\" href=\"competitive/num/trait.MIntBase.html#associatedtype.Inner\" title=\"type competitive::num::MIntBase::Inner\">Inner</a> as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#284-286\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#129-137\">Source</a><a href=\"#impl-Hash-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#134-136\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IterScan-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#288-298\">Source</a><a href=\"#impl-IterScan-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"competitive/tools/trait.IterScan.html\" title=\"trait competitive::tools::IterScan\">IterScan</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>,\n    M::<a class=\"associatedtype\" href=\"competitive/num/trait.MIntBase.html#associatedtype.Inner\" title=\"type competitive::num::MIntBase::Inner\">Inner</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#293\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/tools/trait.IterScan.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;</h4></section><section id=\"method.scan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#295-297\">Source</a><a href=\"#method.scan\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/tools/trait.IterScan.html#tymethod.scan\" class=\"fn\">scan</a>&lt;'a, I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;&gt;(iter: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut I</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"competitive/tools/trait.IterScan.html#associatedtype.Output\" title=\"type competitive::tools::IterScan::Output\">Output</a>&gt;</h4></section></div></details>","IterScan","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/mod_sqrt.rs.html#4-78\">Source</a><a href=\"#impl-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sqrt\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/mod_sqrt.rs.html#8-77\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/num/struct.MInt.html#tymethod.sqrt\" class=\"fn\">sqrt</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&#34;src/competitive/math/formal_power_series/mod.rs.html#67&#34;,&#34;line 67&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/mod.rs (<a href=\"src/competitive/math/formal_power_series/mod.rs.html#67\">line 67</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>66</span>    <span class=\"kw\">fn </span>sqrt_coefficient(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>67</span>        <span class=\"self\">self</span>.<span class=\"highlight focus\">sqrt</span>()\n<span data-nosnippet>68</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[6,6],&#34;src/library_checker/math/sqrt_mod.rs.html#12&#34;,&#34;line 12&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/sqrt_mod.rs (<a href=\"src/library_checker/math/sqrt_mod.rs.html#12\">line 12</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>sqrt_mod(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, q, yp: [(u32, u32)]);\n<span data-nosnippet>10</span>    <span class=\"kw\">for </span>(y, p) <span class=\"kw\">in </span>yp.take(q) {\n<span data-nosnippet>11</span>        DynMIntU32::set_mod(p);\n<span data-nosnippet>12</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = DynMIntU32::from(y).<span class=\"highlight focus\">sqrt</span>() {\n<span data-nosnippet>13</span>            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"{}\"</span>, x).ok();\n<span data-nosnippet>14</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>15</span>            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"-1\"</span>).ok();\n<span data-nosnippet>16</span>        }\n<span data-nosnippet>17</span>    }\n<span data-nosnippet>18</span>}</code></pre></div></div></div></details></div></details></div></details>",0,"competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#54-62\">Source</a><a href=\"#impl-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#59-61\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/num/struct.MInt.html#tymethod.new\" class=\"fn\">new</a>(x: M::<a class=\"associatedtype\" href=\"competitive/num/trait.MIntBase.html#associatedtype.Inner\" title=\"type competitive::num::MIntBase::Inner\">Inner</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[7,7],&#34;src/library_checker/math/sum_of_totient_function.rs.html#19&#34;,&#34;line 19&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/sum_of_totient_function.rs (<a href=\"src/library_checker/math/sum_of_totient_function.rs.html#19\">line 19</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>12</span><span class=\"kw\">pub fn </span>sum_of_totient_function(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>13</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>14</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>15</span>    <span class=\"macro\">scan!</span>(scanner, n: u64);\n<span data-nosnippet>16</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"number\">1</span>;\n<span data-nosnippet>17</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pp = <span class=\"number\">0</span>;\n<span data-nosnippet>18</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pc = <span class=\"number\">0</span>;\n<span data-nosnippet>19</span>    <span class=\"kw\">let </span>inv2 = <span class=\"highlight focus\">M::new</span>(<span class=\"number\">2</span>).inv();\n<span data-nosnippet>20</span>    <span class=\"kw\">let </span>qa = QuotientArray::from_fn(n, |i| [M::from(i), M::from(i) * M::from(i + <span class=\"number\">1</span>) * inv2])\n<span data-nosnippet>21</span>        .map(|[x, y]| [x - M::one(), y - M::one()])\n<span data-nosnippet>22</span>        .lucy_dp::&lt;ArrayOperation&lt;AdditiveOperation&lt;<span class=\"kw\">_</span>&gt;, <span class=\"number\">2</span>&gt;&gt;(|[x, y], p| [x, y * M::from(p)])\n<span data-nosnippet>23</span>        .map(|[x, y]| y - x)\n<span data-nosnippet>24</span>        .min_25_sieve::&lt;AddMulOperation&lt;<span class=\"kw\">_</span>&gt;&gt;(|p, c| {\n<span data-nosnippet>25</span>            <span class=\"kw\">if </span>pp != p || pc &gt; c {\n<span data-nosnippet>26</span>                pp = p;\n<span data-nosnippet>27</span>                pc = <span class=\"number\">1</span>;\n<span data-nosnippet>28</span>                s = p - <span class=\"number\">1</span>;\n<span data-nosnippet>29</span>            }\n<span data-nosnippet>30</span>            <span class=\"kw\">while </span>pc &lt; c {\n<span data-nosnippet>31</span>                pc += <span class=\"number\">1</span>;\n<span data-nosnippet>32</span>                s <span class=\"kw-2\">*</span>= p;\n<span data-nosnippet>33</span>            }\n<span data-nosnippet>34</span>            M::from(s)\n<span data-nosnippet>35</span>        });\n<span data-nosnippet>36</span>    <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"{}\"</span>, qa[n]).ok();\n<span data-nosnippet>37</span>}</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/math/number_theoretic_transform.rs.html#368&#34;,&#34;line 368&#34;],[[3,3],&#34;src/competitive/math/number_theoretic_transform.rs.html#370&#34;,&#34;line 370&#34;],[[4,4],&#34;src/competitive/math/number_theoretic_transform.rs.html#371&#34;,&#34;line 371&#34;],[[13,13],&#34;src/competitive/math/number_theoretic_transform.rs.html#380&#34;,&#34;line 380&#34;],[[13,13],&#34;src/competitive/math/number_theoretic_transform.rs.html#380&#34;,&#34;line 380&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/number_theoretic_transform.rs (<a href=\"src/competitive/math/number_theoretic_transform.rs.html#368\">line 368</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>367</span>    <span class=\"kw\">fn </span>inverse_transform(f: <span class=\"self\">Self</span>::F, len: usize) -&gt; <span class=\"self\">Self</span>::T {\n<span data-nosnippet>368</span>        <span class=\"kw\">let </span>t1 = <span class=\"highlight focus\">MInt::&lt;N2&gt;::new</span>(N1::get_mod()).inv();\n<span data-nosnippet>369</span>        <span class=\"kw\">let </span>m1 = MInt::&lt;M&gt;::from(N1::get_mod());\n<span data-nosnippet>370</span>        <span class=\"kw\">let </span>m1_3 = <span class=\"highlight\">MInt::&lt;N3&gt;::new</span>(N1::get_mod());\n<span data-nosnippet>371</span>        <span class=\"kw\">let </span>t2 = (m1_3 * <span class=\"highlight\">MInt::&lt;N3&gt;::new</span>(N2::get_mod())).inv();\n<span data-nosnippet>372</span>        <span class=\"kw\">let </span>m2 = m1 * MInt::&lt;M&gt;::from(N2::get_mod());\n<span data-nosnippet>373</span>        Convolve::&lt;N1&gt;::inverse_transform(f.<span class=\"number\">0</span>, len)\n<span data-nosnippet>374</span>            .into_iter()\n<span data-nosnippet>375</span>            .zip(Convolve::&lt;N2&gt;::inverse_transform(f.<span class=\"number\">1</span>, len))\n<span data-nosnippet>376</span>            .zip(Convolve::&lt;N3&gt;::inverse_transform(f.<span class=\"number\">2</span>, len))\n<span data-nosnippet>377</span>            .map(|((c1, c2), c3)| {\n<span data-nosnippet>378</span>                <span class=\"kw\">let </span>d1 = c1.inner();\n<span data-nosnippet>379</span>                <span class=\"kw\">let </span>d2 = ((c2 - MInt::&lt;N2&gt;::from(d1)) * t1).inner();\n<span data-nosnippet>380</span>                <span class=\"kw\">let </span>x = <span class=\"highlight\">MInt::&lt;N3&gt;::new</span>(d1) + <span class=\"highlight\">MInt::&lt;N3&gt;::new</span>(d2) * m1_3;\n<span data-nosnippet>381</span>                <span class=\"kw\">let </span>d3 = ((c3 - x) * t2).inner();\n<span data-nosnippet>382</span>                MInt::&lt;M&gt;::from(d1) + MInt::&lt;M&gt;::from(d2) * m1 + MInt::&lt;M&gt;::from(d3) * m2\n<span data-nosnippet>383</span>            })\n<span data-nosnippet>384</span>            .collect()\n<span data-nosnippet>385</span>    }</code></pre></div></div></div></details></div></details></div></details>",0,"competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#63-90\">Source</a><a href=\"#impl-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#68-73\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"competitive/num/struct.MInt.html#tymethod.new_unchecked\" class=\"fn\">new_unchecked</a>(x: M::<a class=\"associatedtype\" href=\"competitive/num/trait.MIntBase.html#associatedtype.Inner\" title=\"type competitive::num::MIntBase::Inner\">Inner</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/num/mint/mint_base.rs.html#60&#34;,&#34;line 60&#34;],[[21,21],&#34;src/competitive/num/mint/mint_base.rs.html#80&#34;,&#34;line 80&#34;],[[25,25],&#34;src/competitive/num/mint/mint_base.rs.html#84&#34;,&#34;line 84&#34;],[[110,110],&#34;src/competitive/num/mint/mint_base.rs.html#169&#34;,&#34;line 169&#34;],[[119,119],&#34;src/competitive/num/mint/mint_base.rs.html#178&#34;,&#34;line 178&#34;],[[130,130],&#34;src/competitive/num/mint/mint_base.rs.html#189&#34;,&#34;line 189&#34;],[[140,140],&#34;src/competitive/num/mint/mint_base.rs.html#199&#34;,&#34;line 199&#34;],[[150,150],&#34;src/competitive/num/mint/mint_base.rs.html#209&#34;,&#34;line 209&#34;],[[160,160],&#34;src/competitive/num/mint/mint_base.rs.html#219&#34;,&#34;line 219&#34;],[[170,170],&#34;src/competitive/num/mint/mint_base.rs.html#229&#34;,&#34;line 229&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/num/mint/mint_base.rs (<a href=\"src/competitive/num/mint/mint_base.rs.html#60\">line 60</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>59</span>    <span class=\"kw\">pub fn </span>new(x: M::Inner) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>60</span>        <span class=\"highlight focus\"><span class=\"self\">Self</span>::new_unchecked</span>(&lt;M <span class=\"kw\">as </span>MIntConvert&lt;M::Inner&gt;&gt;::from(x))\n<span data-nosnippet>61</span>    }\n<span data-nosnippet>62</span>}\n<span data-nosnippet>63</span><span class=\"kw\">impl</span>&lt;M&gt; MInt&lt;M&gt;\n<span data-nosnippet>64</span><span class=\"kw\">where\n<span data-nosnippet>65</span>    </span>M: MIntBase,\n<span data-nosnippet>66</span>{\n<span data-nosnippet>67</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>68</span>    </span><span class=\"kw\">pub const fn </span>new_unchecked(x: M::Inner) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>69</span>        <span class=\"self\">Self </span>{\n<span data-nosnippet>70</span>            x,\n<span data-nosnippet>71</span>            _marker: PhantomData,\n<span data-nosnippet>72</span>        }\n<span data-nosnippet>73</span>    }\n<span data-nosnippet>74</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>75</span>    </span><span class=\"kw\">pub fn </span>get_mod() -&gt; M::Inner {\n<span data-nosnippet>76</span>        M::get_mod()\n<span data-nosnippet>77</span>    }\n<span data-nosnippet>78</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>79</span>    </span><span class=\"kw\">pub fn </span>pow(<span class=\"self\">self</span>, y: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>80</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::new_unchecked</span>(M::mod_pow(<span class=\"self\">self</span>.x, y))\n<span data-nosnippet>81</span>    }\n<span data-nosnippet>82</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>83</span>    </span><span class=\"kw\">pub fn </span>inv(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>84</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::new_unchecked</span>(M::mod_inv(<span class=\"self\">self</span>.x))\n<span data-nosnippet>85</span>    }\n<span data-nosnippet>86</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>87</span>    </span><span class=\"kw\">pub fn </span>inner(<span class=\"self\">self</span>) -&gt; M::Inner {\n<span data-nosnippet>88</span>        M::mod_inner(<span class=\"self\">self</span>.x)\n<span data-nosnippet>89</span>    }\n<span data-nosnippet>90</span>}\n<span data-nosnippet>91</span>\n<span data-nosnippet>92</span><span class=\"kw\">impl</span>&lt;M&gt; Clone <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>93</span><span class=\"kw\">where\n<span data-nosnippet>94</span>    </span>M: MIntBase,\n<span data-nosnippet>95</span>{\n<span data-nosnippet>96</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>97</span>    </span><span class=\"kw\">fn </span>clone(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>98</span>        <span class=\"kw-2\">*</span><span class=\"self\">self\n<span data-nosnippet>99</span>    </span>}\n<span data-nosnippet>100</span>}\n<span data-nosnippet>101</span><span class=\"kw\">impl</span>&lt;M&gt; Copy <span class=\"kw\">for </span>MInt&lt;M&gt; <span class=\"kw\">where </span>M: MIntBase {}\n<span data-nosnippet>102</span><span class=\"kw\">impl</span>&lt;M&gt; Debug <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>103</span><span class=\"kw\">where\n<span data-nosnippet>104</span>    </span>M: MIntBase,\n<span data-nosnippet>105</span>{\n<span data-nosnippet>106</span>    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n<span data-nosnippet>107</span>        Debug::fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.inner(), f)\n<span data-nosnippet>108</span>    }\n<span data-nosnippet>109</span>}\n<span data-nosnippet>110</span><span class=\"kw\">impl</span>&lt;M&gt; Default <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>111</span><span class=\"kw\">where\n<span data-nosnippet>112</span>    </span>M: MIntBase,\n<span data-nosnippet>113</span>{\n<span data-nosnippet>114</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>115</span>    </span><span class=\"kw\">fn </span>default() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>116</span>        &lt;<span class=\"self\">Self </span><span class=\"kw\">as </span>Zero&gt;::zero()\n<span data-nosnippet>117</span>    }\n<span data-nosnippet>118</span>}\n<span data-nosnippet>119</span><span class=\"kw\">impl</span>&lt;M&gt; PartialEq <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>120</span><span class=\"kw\">where\n<span data-nosnippet>121</span>    </span>M: MIntBase,\n<span data-nosnippet>122</span>{\n<span data-nosnippet>123</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>124</span>    </span><span class=\"kw\">fn </span>eq(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; bool {\n<span data-nosnippet>125</span>        PartialEq::eq(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.x, <span class=\"kw-2\">&amp;</span>other.x)\n<span data-nosnippet>126</span>    }\n<span data-nosnippet>127</span>}\n<span data-nosnippet>128</span><span class=\"kw\">impl</span>&lt;M&gt; Eq <span class=\"kw\">for </span>MInt&lt;M&gt; <span class=\"kw\">where </span>M: MIntBase {}\n<span data-nosnippet>129</span><span class=\"kw\">impl</span>&lt;M&gt; Hash <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>130</span><span class=\"kw\">where\n<span data-nosnippet>131</span>    </span>M: MIntBase,\n<span data-nosnippet>132</span>{\n<span data-nosnippet>133</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>134</span>    </span><span class=\"kw\">fn </span>hash&lt;H: Hasher&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, state: <span class=\"kw-2\">&amp;mut </span>H) {\n<span data-nosnippet>135</span>        Hash::hash(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.x, state)\n<span data-nosnippet>136</span>    }\n<span data-nosnippet>137</span>}\n<span data-nosnippet>138</span><span class=\"macro\">macro_rules!</span> impl_mint_from {\n<span data-nosnippet>139</span>    ($(<span class=\"macro-nonterminal\">$t</span>:ty),<span class=\"kw-2\">*</span>) =&gt; {\n<span data-nosnippet>140</span>        $(<span class=\"kw\">impl</span>&lt;M&gt; From&lt;<span class=\"macro-nonterminal\">$t</span>&gt; <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>141</span>        <span class=\"kw\">where\n<span data-nosnippet>142</span>            </span>M: MIntConvert&lt;<span class=\"macro-nonterminal\">$t</span>&gt;,\n<span data-nosnippet>143</span>        {\n<span data-nosnippet>144</span>            <span class=\"attr\">#[inline]\n<span data-nosnippet>145</span>            </span><span class=\"kw\">fn </span>from(x: <span class=\"macro-nonterminal\">$t</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>146</span>                <span class=\"self\">Self</span>::new_unchecked(&lt;M <span class=\"kw\">as </span>MIntConvert&lt;<span class=\"macro-nonterminal\">$t</span>&gt;&gt;::from(x))\n<span data-nosnippet>147</span>            }\n<span data-nosnippet>148</span>        }\n<span data-nosnippet>149</span>        <span class=\"kw\">impl</span>&lt;M&gt; From&lt;MInt&lt;M&gt;&gt; <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$t\n<span data-nosnippet>150</span>        </span><span class=\"kw\">where\n<span data-nosnippet>151</span>            </span>M: MIntConvert&lt;<span class=\"macro-nonterminal\">$t</span>&gt;,\n<span data-nosnippet>152</span>        {\n<span data-nosnippet>153</span>            <span class=\"attr\">#[inline]\n<span data-nosnippet>154</span>            </span><span class=\"kw\">fn </span>from(x: MInt&lt;M&gt;) -&gt; <span class=\"macro-nonterminal\">$t </span>{\n<span data-nosnippet>155</span>                &lt;M <span class=\"kw\">as </span>MIntConvert&lt;<span class=\"macro-nonterminal\">$t</span>&gt;&gt;::into(x.x)\n<span data-nosnippet>156</span>            }\n<span data-nosnippet>157</span>        })*\n<span data-nosnippet>158</span>    };\n<span data-nosnippet>159</span>}\n<span data-nosnippet>160</span><span class=\"macro\">impl_mint_from!</span>(\n<span data-nosnippet>161</span>    u8, u16, u32, u64, u128, usize, i8, i16, i32, i64, i128, isize\n<span data-nosnippet>162</span>);\n<span data-nosnippet>163</span><span class=\"kw\">impl</span>&lt;M&gt; Zero <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>164</span><span class=\"kw\">where\n<span data-nosnippet>165</span>    </span>M: MIntBase,\n<span data-nosnippet>166</span>{\n<span data-nosnippet>167</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>168</span>    </span><span class=\"kw\">fn </span>zero() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>169</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::new_unchecked</span>(M::mod_zero())\n<span data-nosnippet>170</span>    }\n<span data-nosnippet>171</span>}\n<span data-nosnippet>172</span><span class=\"kw\">impl</span>&lt;M&gt; One <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>173</span><span class=\"kw\">where\n<span data-nosnippet>174</span>    </span>M: MIntBase,\n<span data-nosnippet>175</span>{\n<span data-nosnippet>176</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>177</span>    </span><span class=\"kw\">fn </span>one() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>178</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::new_unchecked</span>(M::mod_one())\n<span data-nosnippet>179</span>    }\n<span data-nosnippet>180</span>}\n<span data-nosnippet>181</span>\n<span data-nosnippet>182</span><span class=\"kw\">impl</span>&lt;M&gt; Add <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>183</span><span class=\"kw\">where\n<span data-nosnippet>184</span>    </span>M: MIntBase,\n<span data-nosnippet>185</span>{\n<span data-nosnippet>186</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>187</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>188</span>    </span><span class=\"kw\">fn </span>add(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>189</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::new_unchecked</span>(M::mod_add(<span class=\"self\">self</span>.x, rhs.x))\n<span data-nosnippet>190</span>    }\n<span data-nosnippet>191</span>}\n<span data-nosnippet>192</span><span class=\"kw\">impl</span>&lt;M&gt; Sub <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>193</span><span class=\"kw\">where\n<span data-nosnippet>194</span>    </span>M: MIntBase,\n<span data-nosnippet>195</span>{\n<span data-nosnippet>196</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>197</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>198</span>    </span><span class=\"kw\">fn </span>sub(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>199</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::new_unchecked</span>(M::mod_sub(<span class=\"self\">self</span>.x, rhs.x))\n<span data-nosnippet>200</span>    }\n<span data-nosnippet>201</span>}\n<span data-nosnippet>202</span><span class=\"kw\">impl</span>&lt;M&gt; Mul <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>203</span><span class=\"kw\">where\n<span data-nosnippet>204</span>    </span>M: MIntBase,\n<span data-nosnippet>205</span>{\n<span data-nosnippet>206</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>207</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>208</span>    </span><span class=\"kw\">fn </span>mul(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>209</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::new_unchecked</span>(M::mod_mul(<span class=\"self\">self</span>.x, rhs.x))\n<span data-nosnippet>210</span>    }\n<span data-nosnippet>211</span>}\n<span data-nosnippet>212</span><span class=\"kw\">impl</span>&lt;M&gt; Div <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>213</span><span class=\"kw\">where\n<span data-nosnippet>214</span>    </span>M: MIntBase,\n<span data-nosnippet>215</span>{\n<span data-nosnippet>216</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>217</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>218</span>    </span><span class=\"kw\">fn </span>div(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>219</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::new_unchecked</span>(M::mod_div(<span class=\"self\">self</span>.x, rhs.x))\n<span data-nosnippet>220</span>    }\n<span data-nosnippet>221</span>}\n<span data-nosnippet>222</span><span class=\"kw\">impl</span>&lt;M&gt; Neg <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>223</span><span class=\"kw\">where\n<span data-nosnippet>224</span>    </span>M: MIntBase,\n<span data-nosnippet>225</span>{\n<span data-nosnippet>226</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>227</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>228</span>    </span><span class=\"kw\">fn </span>neg(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>229</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::new_unchecked</span>(M::mod_neg(<span class=\"self\">self</span>.x))\n<span data-nosnippet>230</span>    }</code></pre></div></div></div></details><section id=\"method.get_mod\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#75-77\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/num/struct.MInt.html#tymethod.get_mod\" class=\"fn\">get_mod</a>() -&gt; M::<a class=\"associatedtype\" href=\"competitive/num/trait.MIntBase.html#associatedtype.Inner\" title=\"type competitive::num::MIntBase::Inner\">Inner</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#79-81\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/num/struct.MInt.html#tymethod.pow\" class=\"fn\">pow</a>(self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[4,4],&#34;src/competitive/algorithm/chromatic_number.rs.html#23&#34;,&#34;line 23&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/algorithm/chromatic_number.rs (<a href=\"src/competitive/algorithm/chromatic_number.rs.html#23\">line 23</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>19</span>    <span class=\"kw\">pub fn </span>k_colorable(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, k: usize) -&gt; bool {\n<span data-nosnippet>20</span>        !<span class=\"self\">self\n<span data-nosnippet>21</span>            </span>.ind\n<span data-nosnippet>22</span>            .iter()\n<span data-nosnippet>23</span>            .map(|d| d.<span class=\"highlight focus\">pow</span>(k))\n<span data-nosnippet>24</span>            .enumerate()\n<span data-nosnippet>25</span>            .map(|(s, d)| <span class=\"kw\">if </span>s.count_ones() % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>{ d } <span class=\"kw\">else </span>{ -d })\n<span data-nosnippet>26</span>            .sum::&lt;MInt&lt;M&gt;&gt;()\n<span data-nosnippet>27</span>            .is_zero()\n<span data-nosnippet>28</span>    }</code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inv\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#83-85\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/num/struct.MInt.html#tymethod.inv\" class=\"fn\">inv</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[3,3],&#34;src/competitive/math/number_theoretic_transform.rs.html#286&#34;,&#34;line 286&#34;],[[85,85],&#34;src/competitive/math/number_theoretic_transform.rs.html#368&#34;,&#34;line 368&#34;],[[88,88],&#34;src/competitive/math/number_theoretic_transform.rs.html#371&#34;,&#34;line 371&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/number_theoretic_transform.rs (<a href=\"src/competitive/math/number_theoretic_transform.rs.html#286\">line 286</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>283</span>    <span class=\"kw\">fn </span>inverse_transform(<span class=\"kw-2\">mut </span>f: <span class=\"self\">Self</span>::F, len: usize) -&gt; <span class=\"self\">Self</span>::T {\n<span data-nosnippet>284</span>        intt(<span class=\"kw-2\">&amp;mut </span>f);\n<span data-nosnippet>285</span>        f.truncate(len);\n<span data-nosnippet>286</span>        <span class=\"kw\">let </span>inv = MInt::from(len.max(<span class=\"number\">2</span>).next_power_of_two() <span class=\"kw\">as </span>u32).<span class=\"highlight focus\">inv</span>();\n<span data-nosnippet>287</span>        <span class=\"kw\">for </span>f <span class=\"kw\">in </span>f.iter_mut() {\n<span data-nosnippet>288</span>            <span class=\"kw-2\">*</span>f <span class=\"kw-2\">*</span>= inv;\n<span data-nosnippet>289</span>        }\n<span data-nosnippet>290</span>        f\n<span data-nosnippet>291</span>    }\n<span data-nosnippet>292</span>    <span class=\"kw\">fn </span>multiply(f: <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>::F, g: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::F) {\n<span data-nosnippet>293</span>        <span class=\"macro\">assert_eq!</span>(f.len(), g.len());\n<span data-nosnippet>294</span>        <span class=\"kw\">for </span>(f, g) <span class=\"kw\">in </span>f.iter_mut().zip(g.iter()) {\n<span data-nosnippet>295</span>            <span class=\"kw-2\">*</span>f <span class=\"kw-2\">*</span>= <span class=\"kw-2\">*</span>g;\n<span data-nosnippet>296</span>        }\n<span data-nosnippet>297</span>    }\n<span data-nosnippet>298</span>    <span class=\"kw\">fn </span>convolve(<span class=\"kw-2\">mut </span>a: <span class=\"self\">Self</span>::T, <span class=\"kw-2\">mut </span>b: <span class=\"self\">Self</span>::T) -&gt; <span class=\"self\">Self</span>::T {\n<span data-nosnippet>299</span>        <span class=\"kw\">if </span><span class=\"self\">Self</span>::length(<span class=\"kw-2\">&amp;</span>a).min(<span class=\"self\">Self</span>::length(<span class=\"kw-2\">&amp;</span>b)) &lt;= <span class=\"number\">60 </span>{\n<span data-nosnippet>300</span>            <span class=\"kw\">return </span>convolve_naive(<span class=\"kw-2\">&amp;</span>a, <span class=\"kw-2\">&amp;</span>b);\n<span data-nosnippet>301</span>        }\n<span data-nosnippet>302</span>        <span class=\"kw\">let </span>len = (<span class=\"self\">Self</span>::length(<span class=\"kw-2\">&amp;</span>a) + <span class=\"self\">Self</span>::length(<span class=\"kw-2\">&amp;</span>b)).saturating_sub(<span class=\"number\">1</span>);\n<span data-nosnippet>303</span>        <span class=\"kw\">let </span>size = len.max(<span class=\"number\">2</span>).next_power_of_two();\n<span data-nosnippet>304</span>        <span class=\"kw\">if </span>len &lt;= size / <span class=\"number\">2 </span>+ <span class=\"number\">2 </span>{\n<span data-nosnippet>305</span>            <span class=\"kw\">let </span>xa = a.pop().unwrap();\n<span data-nosnippet>306</span>            <span class=\"kw\">let </span>xb = b.pop().unwrap();\n<span data-nosnippet>307</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = <span class=\"macro\">vec!</span>[MInt::&lt;M&gt;::zero(); len];\n<span data-nosnippet>308</span>            <span class=\"kw-2\">*</span>c.last_mut().unwrap() = xa * xb;\n<span data-nosnippet>309</span>            <span class=\"kw\">for </span>(a, c) <span class=\"kw\">in </span>a.iter().zip(<span class=\"kw-2\">&amp;mut </span>c[b.len()..]) {\n<span data-nosnippet>310</span>                <span class=\"kw-2\">*</span>c += <span class=\"kw-2\">*</span>a * xb;\n<span data-nosnippet>311</span>            }\n<span data-nosnippet>312</span>            <span class=\"kw\">for </span>(b, c) <span class=\"kw\">in </span>b.iter().zip(<span class=\"kw-2\">&amp;mut </span>c[a.len()..]) {\n<span data-nosnippet>313</span>                <span class=\"kw-2\">*</span>c += <span class=\"kw-2\">*</span>b * xa;\n<span data-nosnippet>314</span>            }\n<span data-nosnippet>315</span>            <span class=\"kw\">let </span>d = <span class=\"self\">Self</span>::convolve(a, b);\n<span data-nosnippet>316</span>            <span class=\"kw\">for </span>(d, c) <span class=\"kw\">in </span>d.into_iter().zip(<span class=\"kw-2\">&amp;mut </span>c) {\n<span data-nosnippet>317</span>                <span class=\"kw-2\">*</span>c += d;\n<span data-nosnippet>318</span>            }\n<span data-nosnippet>319</span>            <span class=\"kw\">return </span>c;\n<span data-nosnippet>320</span>        }\n<span data-nosnippet>321</span>        <span class=\"kw\">let </span>same = a == b;\n<span data-nosnippet>322</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>a = <span class=\"self\">Self</span>::transform(a, len);\n<span data-nosnippet>323</span>        <span class=\"kw\">if </span>same {\n<span data-nosnippet>324</span>            <span class=\"kw\">for </span>a <span class=\"kw\">in </span>a.iter_mut() {\n<span data-nosnippet>325</span>                <span class=\"kw-2\">*</span>a <span class=\"kw-2\">*</span>= <span class=\"kw-2\">*</span>a;\n<span data-nosnippet>326</span>            }\n<span data-nosnippet>327</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>328</span>            <span class=\"kw\">let </span>b = <span class=\"self\">Self</span>::transform(b, len);\n<span data-nosnippet>329</span>            <span class=\"self\">Self</span>::multiply(<span class=\"kw-2\">&amp;mut </span>a, <span class=\"kw-2\">&amp;</span>b);\n<span data-nosnippet>330</span>        }\n<span data-nosnippet>331</span>        <span class=\"self\">Self</span>::inverse_transform(a, len)\n<span data-nosnippet>332</span>    }\n<span data-nosnippet>333</span>}\n<span data-nosnippet>334</span><span class=\"kw\">type </span>MVec&lt;M&gt; = Vec&lt;MInt&lt;M&gt;&gt;;\n<span data-nosnippet>335</span><span class=\"kw\">impl</span>&lt;M, N1, N2, N3&gt; ConvolveSteps <span class=\"kw\">for </span>Convolve&lt;(M, (N1, N2, N3))&gt;\n<span data-nosnippet>336</span><span class=\"kw\">where\n<span data-nosnippet>337</span>    </span>M: MIntConvert + MIntConvert&lt;u32&gt;,\n<span data-nosnippet>338</span>    N1: Montgomery32NttModulus,\n<span data-nosnippet>339</span>    N2: Montgomery32NttModulus,\n<span data-nosnippet>340</span>    N3: Montgomery32NttModulus,\n<span data-nosnippet>341</span>{\n<span data-nosnippet>342</span>    <span class=\"kw\">type </span>T = MVec&lt;M&gt;;\n<span data-nosnippet>343</span>    <span class=\"kw\">type </span>F = (MVec&lt;N1&gt;, MVec&lt;N2&gt;, MVec&lt;N3&gt;);\n<span data-nosnippet>344</span>    <span class=\"kw\">fn </span>length(t: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::T) -&gt; usize {\n<span data-nosnippet>345</span>        t.len()\n<span data-nosnippet>346</span>    }\n<span data-nosnippet>347</span>    <span class=\"kw\">fn </span>transform(t: <span class=\"self\">Self</span>::T, len: usize) -&gt; <span class=\"self\">Self</span>::F {\n<span data-nosnippet>348</span>        <span class=\"kw\">let </span>npot = len.max(<span class=\"number\">2</span>).next_power_of_two();\n<span data-nosnippet>349</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (\n<span data-nosnippet>350</span>            MVec::&lt;N1&gt;::with_capacity(npot),\n<span data-nosnippet>351</span>            MVec::&lt;N2&gt;::with_capacity(npot),\n<span data-nosnippet>352</span>            MVec::&lt;N3&gt;::with_capacity(npot),\n<span data-nosnippet>353</span>        );\n<span data-nosnippet>354</span>        <span class=\"kw\">for </span>t <span class=\"kw\">in </span>t {\n<span data-nosnippet>355</span>            f.<span class=\"number\">0</span>.push(&lt;M <span class=\"kw\">as </span>MIntConvert&lt;u32&gt;&gt;::into(t.inner()).into());\n<span data-nosnippet>356</span>            f.<span class=\"number\">1</span>.push(&lt;M <span class=\"kw\">as </span>MIntConvert&lt;u32&gt;&gt;::into(t.inner()).into());\n<span data-nosnippet>357</span>            f.<span class=\"number\">2</span>.push(&lt;M <span class=\"kw\">as </span>MIntConvert&lt;u32&gt;&gt;::into(t.inner()).into());\n<span data-nosnippet>358</span>        }\n<span data-nosnippet>359</span>        f.<span class=\"number\">0</span>.resize_with(npot, Zero::zero);\n<span data-nosnippet>360</span>        f.<span class=\"number\">1</span>.resize_with(npot, Zero::zero);\n<span data-nosnippet>361</span>        f.<span class=\"number\">2</span>.resize_with(npot, Zero::zero);\n<span data-nosnippet>362</span>        ntt(<span class=\"kw-2\">&amp;mut </span>f.<span class=\"number\">0</span>);\n<span data-nosnippet>363</span>        ntt(<span class=\"kw-2\">&amp;mut </span>f.<span class=\"number\">1</span>);\n<span data-nosnippet>364</span>        ntt(<span class=\"kw-2\">&amp;mut </span>f.<span class=\"number\">2</span>);\n<span data-nosnippet>365</span>        f\n<span data-nosnippet>366</span>    }\n<span data-nosnippet>367</span>    <span class=\"kw\">fn </span>inverse_transform(f: <span class=\"self\">Self</span>::F, len: usize) -&gt; <span class=\"self\">Self</span>::T {\n<span data-nosnippet>368</span>        <span class=\"kw\">let </span>t1 = MInt::&lt;N2&gt;::new(N1::get_mod()).<span class=\"highlight\">inv</span>();\n<span data-nosnippet>369</span>        <span class=\"kw\">let </span>m1 = MInt::&lt;M&gt;::from(N1::get_mod());\n<span data-nosnippet>370</span>        <span class=\"kw\">let </span>m1_3 = MInt::&lt;N3&gt;::new(N1::get_mod());\n<span data-nosnippet>371</span>        <span class=\"kw\">let </span>t2 = (m1_3 * MInt::&lt;N3&gt;::new(N2::get_mod())).<span class=\"highlight\">inv</span>();\n<span data-nosnippet>372</span>        <span class=\"kw\">let </span>m2 = m1 * MInt::&lt;M&gt;::from(N2::get_mod());\n<span data-nosnippet>373</span>        Convolve::&lt;N1&gt;::inverse_transform(f.<span class=\"number\">0</span>, len)\n<span data-nosnippet>374</span>            .into_iter()\n<span data-nosnippet>375</span>            .zip(Convolve::&lt;N2&gt;::inverse_transform(f.<span class=\"number\">1</span>, len))\n<span data-nosnippet>376</span>            .zip(Convolve::&lt;N3&gt;::inverse_transform(f.<span class=\"number\">2</span>, len))\n<span data-nosnippet>377</span>            .map(|((c1, c2), c3)| {\n<span data-nosnippet>378</span>                <span class=\"kw\">let </span>d1 = c1.inner();\n<span data-nosnippet>379</span>                <span class=\"kw\">let </span>d2 = ((c2 - MInt::&lt;N2&gt;::from(d1)) * t1).inner();\n<span data-nosnippet>380</span>                <span class=\"kw\">let </span>x = MInt::&lt;N3&gt;::new(d1) + MInt::&lt;N3&gt;::new(d2) * m1_3;\n<span data-nosnippet>381</span>                <span class=\"kw\">let </span>d3 = ((c3 - x) * t2).inner();\n<span data-nosnippet>382</span>                MInt::&lt;M&gt;::from(d1) + MInt::&lt;M&gt;::from(d2) * m1 + MInt::&lt;M&gt;::from(d3) * m2\n<span data-nosnippet>383</span>            })\n<span data-nosnippet>384</span>            .collect()\n<span data-nosnippet>385</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[6,6],&#34;src/competitive/math/factorial.rs.html#24&#34;,&#34;line 24&#34;],[[81,81],&#34;src/competitive/math/factorial.rs.html#99&#34;,&#34;line 99&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/factorial.rs (<a href=\"src/competitive/math/factorial.rs.html#24\">line 24</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>18</span>    <span class=\"kw\">pub fn </span>new(max_n: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>19</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fact = <span class=\"macro\">vec!</span>[MInt::one(); max_n + <span class=\"number\">1</span>];\n<span data-nosnippet>20</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>inv_fact = <span class=\"macro\">vec!</span>[MInt::one(); max_n + <span class=\"number\">1</span>];\n<span data-nosnippet>21</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">2</span>..=max_n {\n<span data-nosnippet>22</span>            fact[i] = fact[i - <span class=\"number\">1</span>] * MInt::from(i);\n<span data-nosnippet>23</span>        }\n<span data-nosnippet>24</span>        inv_fact[max_n] = fact[max_n].<span class=\"highlight focus\">inv</span>();\n<span data-nosnippet>25</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">3</span>..=max_n).rev() {\n<span data-nosnippet>26</span>            inv_fact[i - <span class=\"number\">1</span>] = inv_fact[i] * MInt::from(i);\n<span data-nosnippet>27</span>        }\n<span data-nosnippet>28</span>        <span class=\"self\">Self </span>{ fact, inv_fact }\n<span data-nosnippet>29</span>    }\n<span data-nosnippet>30</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>31</span>    </span><span class=\"kw\">pub fn </span>combination(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, n: usize, r: usize) -&gt; MInt&lt;M&gt; {\n<span data-nosnippet>32</span>        <span class=\"macro\">debug_assert!</span>(n &lt; <span class=\"self\">self</span>.fact.len());\n<span data-nosnippet>33</span>        <span class=\"kw\">if </span>r &lt;= n {\n<span data-nosnippet>34</span>            <span class=\"self\">self</span>.fact[n] * <span class=\"self\">self</span>.inv_fact[r] * <span class=\"self\">self</span>.inv_fact[n - r]\n<span data-nosnippet>35</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>36</span>            MInt::zero()\n<span data-nosnippet>37</span>        }\n<span data-nosnippet>38</span>    }\n<span data-nosnippet>39</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>40</span>    </span><span class=\"kw\">pub fn </span>permutation(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, n: usize, r: usize) -&gt; MInt&lt;M&gt; {\n<span data-nosnippet>41</span>        <span class=\"macro\">debug_assert!</span>(n &lt; <span class=\"self\">self</span>.fact.len());\n<span data-nosnippet>42</span>        <span class=\"kw\">if </span>r &lt;= n {\n<span data-nosnippet>43</span>            <span class=\"self\">self</span>.fact[n] * <span class=\"self\">self</span>.inv_fact[n - r]\n<span data-nosnippet>44</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>45</span>            MInt::zero()\n<span data-nosnippet>46</span>        }\n<span data-nosnippet>47</span>    }\n<span data-nosnippet>48</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>49</span>    </span><span class=\"kw\">pub fn </span>homogeneous_product(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, n: usize, r: usize) -&gt; MInt&lt;M&gt; {\n<span data-nosnippet>50</span>        <span class=\"macro\">debug_assert!</span>(n + r &lt; <span class=\"self\">self</span>.fact.len() + <span class=\"number\">1</span>);\n<span data-nosnippet>51</span>        <span class=\"kw\">if </span>n == <span class=\"number\">0 </span>&amp;&amp; r == <span class=\"number\">0 </span>{\n<span data-nosnippet>52</span>            MInt::one()\n<span data-nosnippet>53</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>54</span>            <span class=\"self\">self</span>.combination(n + r - <span class=\"number\">1</span>, r)\n<span data-nosnippet>55</span>        }\n<span data-nosnippet>56</span>    }\n<span data-nosnippet>57</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>58</span>    </span><span class=\"kw\">pub fn </span>inv(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, n: usize) -&gt; MInt&lt;M&gt; {\n<span data-nosnippet>59</span>        <span class=\"macro\">debug_assert!</span>(n &lt; <span class=\"self\">self</span>.fact.len());\n<span data-nosnippet>60</span>        <span class=\"macro\">debug_assert!</span>(n &gt; <span class=\"number\">0</span>);\n<span data-nosnippet>61</span>        <span class=\"self\">self</span>.inv_fact[n] * <span class=\"self\">self</span>.fact[n - <span class=\"number\">1</span>]\n<span data-nosnippet>62</span>    }\n<span data-nosnippet>63</span>}\n<span data-nosnippet>64</span>\n<span data-nosnippet>65</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"SmallModMemorizedFactorial\"</span>, include(<span class=\"string\">\"MIntBase\"</span>, <span class=\"string\">\"prime_factors\"</span>))]\n<span data-nosnippet>66</span>#[derive(Clone, Debug)]\n<span data-nosnippet>67</span></span><span class=\"kw\">pub struct </span>SmallModMemorizedFactorial&lt;M&gt;\n<span data-nosnippet>68</span><span class=\"kw\">where\n<span data-nosnippet>69</span>    </span>M: MIntConvert&lt;usize&gt;,\n<span data-nosnippet>70</span>{\n<span data-nosnippet>71</span>    p: u32,\n<span data-nosnippet>72</span>    c: u32,\n<span data-nosnippet>73</span>    fact: Vec&lt;MInt&lt;M&gt;&gt;,\n<span data-nosnippet>74</span>    inv_fact: Vec&lt;MInt&lt;M&gt;&gt;,\n<span data-nosnippet>75</span>    pow: Vec&lt;MInt&lt;M&gt;&gt;,\n<span data-nosnippet>76</span>}\n<span data-nosnippet>77</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"SmallModMemorizedFactorial\"</span>)]\n<span data-nosnippet>78</span></span><span class=\"kw\">impl</span>&lt;M&gt; Default <span class=\"kw\">for </span>SmallModMemorizedFactorial&lt;M&gt;\n<span data-nosnippet>79</span><span class=\"kw\">where\n<span data-nosnippet>80</span>    </span>M: MIntConvert&lt;usize&gt;,\n<span data-nosnippet>81</span>{\n<span data-nosnippet>82</span>    <span class=\"kw\">fn </span>default() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>83</span>        <span class=\"kw\">let </span>m = M::mod_into();\n<span data-nosnippet>84</span>        <span class=\"kw\">let </span>pf = prime_factors(m <span class=\"kw\">as _</span>);\n<span data-nosnippet>85</span>        <span class=\"macro\">assert!</span>(pf.len() &lt;= <span class=\"number\">1</span>);\n<span data-nosnippet>86</span>        <span class=\"kw\">let </span>p = pf[<span class=\"number\">0</span>].<span class=\"number\">0 </span><span class=\"kw\">as </span>u32;\n<span data-nosnippet>87</span>        <span class=\"kw\">let </span>c = pf[<span class=\"number\">0</span>].<span class=\"number\">1</span>;\n<span data-nosnippet>88</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fact = <span class=\"macro\">vec!</span>[MInt::one(); m];\n<span data-nosnippet>89</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>inv_fact = <span class=\"macro\">vec!</span>[MInt::one(); m];\n<span data-nosnippet>90</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pow = <span class=\"macro\">vec!</span>[MInt::one(); c <span class=\"kw\">as </span>usize];\n<span data-nosnippet>91</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">2</span>..m {\n<span data-nosnippet>92</span>            fact[i] = fact[i - <span class=\"number\">1</span>]\n<span data-nosnippet>93</span>                * <span class=\"kw\">if </span>i <span class=\"kw\">as </span>u32 % p != <span class=\"number\">0 </span>{\n<span data-nosnippet>94</span>                    MInt::from(i)\n<span data-nosnippet>95</span>                } <span class=\"kw\">else </span>{\n<span data-nosnippet>96</span>                    MInt::one()\n<span data-nosnippet>97</span>                };\n<span data-nosnippet>98</span>        }\n<span data-nosnippet>99</span>        inv_fact[m - <span class=\"number\">1</span>] = fact[m - <span class=\"number\">1</span>].<span class=\"highlight\">inv</span>();\n<span data-nosnippet>100</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">3</span>..m).rev() {\n<span data-nosnippet>101</span>            inv_fact[i - <span class=\"number\">1</span>] = inv_fact[i]\n<span data-nosnippet>102</span>                * <span class=\"kw\">if </span>i <span class=\"kw\">as </span>u32 % p != <span class=\"number\">0 </span>{\n<span data-nosnippet>103</span>                    MInt::from(i)\n<span data-nosnippet>104</span>                } <span class=\"kw\">else </span>{\n<span data-nosnippet>105</span>                    MInt::one()\n<span data-nosnippet>106</span>                };\n<span data-nosnippet>107</span>        }\n<span data-nosnippet>108</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..c <span class=\"kw\">as </span>usize {\n<span data-nosnippet>109</span>            pow[i] = pow[i - <span class=\"number\">1</span>] * MInt::from(p <span class=\"kw\">as </span>usize);\n<span data-nosnippet>110</span>        }\n<span data-nosnippet>111</span>        <span class=\"self\">Self </span>{\n<span data-nosnippet>112</span>            p,\n<span data-nosnippet>113</span>            c,\n<span data-nosnippet>114</span>            fact,\n<span data-nosnippet>115</span>            inv_fact,\n<span data-nosnippet>116</span>            pow,\n<span data-nosnippet>117</span>        }\n<span data-nosnippet>118</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[7,7],&#34;src/library_checker/math/sum_of_totient_function.rs.html#19&#34;,&#34;line 19&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/sum_of_totient_function.rs (<a href=\"src/library_checker/math/sum_of_totient_function.rs.html#19\">line 19</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>12</span><span class=\"kw\">pub fn </span>sum_of_totient_function(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>13</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>14</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>15</span>    <span class=\"macro\">scan!</span>(scanner, n: u64);\n<span data-nosnippet>16</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"number\">1</span>;\n<span data-nosnippet>17</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pp = <span class=\"number\">0</span>;\n<span data-nosnippet>18</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pc = <span class=\"number\">0</span>;\n<span data-nosnippet>19</span>    <span class=\"kw\">let </span>inv2 = M::new(<span class=\"number\">2</span>).<span class=\"highlight focus\">inv</span>();\n<span data-nosnippet>20</span>    <span class=\"kw\">let </span>qa = QuotientArray::from_fn(n, |i| [M::from(i), M::from(i) * M::from(i + <span class=\"number\">1</span>) * inv2])\n<span data-nosnippet>21</span>        .map(|[x, y]| [x - M::one(), y - M::one()])\n<span data-nosnippet>22</span>        .lucy_dp::&lt;ArrayOperation&lt;AdditiveOperation&lt;<span class=\"kw\">_</span>&gt;, <span class=\"number\">2</span>&gt;&gt;(|[x, y], p| [x, y * M::from(p)])\n<span data-nosnippet>23</span>        .map(|[x, y]| y - x)\n<span data-nosnippet>24</span>        .min_25_sieve::&lt;AddMulOperation&lt;<span class=\"kw\">_</span>&gt;&gt;(|p, c| {\n<span data-nosnippet>25</span>            <span class=\"kw\">if </span>pp != p || pc &gt; c {\n<span data-nosnippet>26</span>                pp = p;\n<span data-nosnippet>27</span>                pc = <span class=\"number\">1</span>;\n<span data-nosnippet>28</span>                s = p - <span class=\"number\">1</span>;\n<span data-nosnippet>29</span>            }\n<span data-nosnippet>30</span>            <span class=\"kw\">while </span>pc &lt; c {\n<span data-nosnippet>31</span>                pc += <span class=\"number\">1</span>;\n<span data-nosnippet>32</span>                s <span class=\"kw-2\">*</span>= p;\n<span data-nosnippet>33</span>            }\n<span data-nosnippet>34</span>            M::from(s)\n<span data-nosnippet>35</span>        });\n<span data-nosnippet>36</span>    <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"{}\"</span>, qa[n]).ok();\n<span data-nosnippet>37</span>}</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[28,28],&#34;src/competitive/math/lagrange_interpolation.rs.html#78&#34;,&#34;line 78&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/lagrange_interpolation.rs (<a href=\"src/competitive/math/lagrange_interpolation.rs.html#78\">line 78</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>50</span><span class=\"kw\">pub fn </span>lagrange_interpolation_polynomial&lt;M&gt;(x: <span class=\"kw-2\">&amp;</span>[MInt&lt;M&gt;], y: <span class=\"kw-2\">&amp;</span>[MInt&lt;M&gt;]) -&gt; Vec&lt;MInt&lt;M&gt;&gt;\n<span data-nosnippet>51</span><span class=\"kw\">where\n<span data-nosnippet>52</span>    </span>M: MIntBase,\n<span data-nosnippet>53</span>{\n<span data-nosnippet>54</span>    <span class=\"kw\">let </span>n = x.len() - <span class=\"number\">1</span>;\n<span data-nosnippet>55</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>dp = <span class=\"macro\">vec!</span>[MInt::zero(); n + <span class=\"number\">2</span>];\n<span data-nosnippet>56</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ndp = <span class=\"macro\">vec!</span>[MInt::zero(); n + <span class=\"number\">2</span>];\n<span data-nosnippet>57</span>    dp[<span class=\"number\">0</span>] = -x[<span class=\"number\">0</span>];\n<span data-nosnippet>58</span>    dp[<span class=\"number\">1</span>] = MInt::one();\n<span data-nosnippet>59</span>    <span class=\"kw\">for </span>x <span class=\"kw\">in </span>x.iter().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>60</span>        <span class=\"kw\">for </span>j <span class=\"kw\">in </span><span class=\"number\">0</span>..=n + <span class=\"number\">1 </span>{\n<span data-nosnippet>61</span>            ndp[j] = -dp[j] * x + <span class=\"kw\">if </span>j &gt;= <span class=\"number\">1 </span>{ dp[j - <span class=\"number\">1</span>] } <span class=\"kw\">else </span>{ MInt::zero() };\n<span data-nosnippet>62</span>        }\n<span data-nosnippet>63</span>        std::mem::swap(<span class=\"kw-2\">&amp;mut </span>dp, <span class=\"kw-2\">&amp;mut </span>ndp);\n<span data-nosnippet>64</span>    }\n<span data-nosnippet>65</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"macro\">vec!</span>[MInt::zero(); n + <span class=\"number\">1</span>];\n<span data-nosnippet>66</span>    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..=n {\n<span data-nosnippet>67</span>        <span class=\"kw\">let </span>t = y[i]\n<span data-nosnippet>68</span>            / (<span class=\"number\">0</span>..=n)\n<span data-nosnippet>69</span>                .map(|j| <span class=\"kw\">if </span>i != j { x[i] - x[j] } <span class=\"kw\">else </span>{ MInt::one() })\n<span data-nosnippet>70</span>                .product::&lt;MInt&lt;M&gt;&gt;();\n<span data-nosnippet>71</span>        <span class=\"kw\">if </span>t.is_zero() {\n<span data-nosnippet>72</span>            <span class=\"kw\">continue</span>;\n<span data-nosnippet>73</span>        } <span class=\"kw\">else if </span>x[i].is_zero() {\n<span data-nosnippet>74</span>            <span class=\"kw\">for </span>j <span class=\"kw\">in </span><span class=\"number\">0</span>..=n {\n<span data-nosnippet>75</span>                res[j] += dp[j + <span class=\"number\">1</span>] * t;\n<span data-nosnippet>76</span>            }\n<span data-nosnippet>77</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>78</span>            <span class=\"kw\">let </span>xinv = x[i].<span class=\"highlight focus\">inv</span>();\n<span data-nosnippet>79</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pre = MInt::zero();\n<span data-nosnippet>80</span>            <span class=\"kw\">for </span>j <span class=\"kw\">in </span><span class=\"number\">0</span>..=n {\n<span data-nosnippet>81</span>                <span class=\"kw\">let </span>d = -(dp[j] - pre) * xinv;\n<span data-nosnippet>82</span>                res[j] += d * t;\n<span data-nosnippet>83</span>                pre = d;\n<span data-nosnippet>84</span>            }\n<span data-nosnippet>85</span>        }\n<span data-nosnippet>86</span>    }\n<span data-nosnippet>87</span>    res\n<span data-nosnippet>88</span>}</code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inner\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#87-89\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/num/struct.MInt.html#tymethod.inner\" class=\"fn\">inner</a>(self) -&gt; M::<a class=\"associatedtype\" href=\"competitive/num/trait.MIntBase.html#associatedtype.Inner\" title=\"type competitive::num::MIntBase::Inner\">Inner</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-3\"><a href=\"#scraped-examples-3\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/num/mint/mint_base.rs.html#107&#34;,&#34;line 107&#34;],[[168,168],&#34;src/competitive/num/mint/mint_base.rs.html#274&#34;,&#34;line 274&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/num/mint/mint_base.rs (<a href=\"src/competitive/num/mint/mint_base.rs.html#107\">line 107</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>106</span>    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n<span data-nosnippet>107</span>        Debug::fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"highlight focus\">inner</span>(), f)\n<span data-nosnippet>108</span>    }\n<span data-nosnippet>109</span>}\n<span data-nosnippet>110</span><span class=\"kw\">impl</span>&lt;M&gt; Default <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>111</span><span class=\"kw\">where\n<span data-nosnippet>112</span>    </span>M: MIntBase,\n<span data-nosnippet>113</span>{\n<span data-nosnippet>114</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>115</span>    </span><span class=\"kw\">fn </span>default() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>116</span>        &lt;<span class=\"self\">Self </span><span class=\"kw\">as </span>Zero&gt;::zero()\n<span data-nosnippet>117</span>    }\n<span data-nosnippet>118</span>}\n<span data-nosnippet>119</span><span class=\"kw\">impl</span>&lt;M&gt; PartialEq <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>120</span><span class=\"kw\">where\n<span data-nosnippet>121</span>    </span>M: MIntBase,\n<span data-nosnippet>122</span>{\n<span data-nosnippet>123</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>124</span>    </span><span class=\"kw\">fn </span>eq(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; bool {\n<span data-nosnippet>125</span>        PartialEq::eq(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.x, <span class=\"kw-2\">&amp;</span>other.x)\n<span data-nosnippet>126</span>    }\n<span data-nosnippet>127</span>}\n<span data-nosnippet>128</span><span class=\"kw\">impl</span>&lt;M&gt; Eq <span class=\"kw\">for </span>MInt&lt;M&gt; <span class=\"kw\">where </span>M: MIntBase {}\n<span data-nosnippet>129</span><span class=\"kw\">impl</span>&lt;M&gt; Hash <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>130</span><span class=\"kw\">where\n<span data-nosnippet>131</span>    </span>M: MIntBase,\n<span data-nosnippet>132</span>{\n<span data-nosnippet>133</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>134</span>    </span><span class=\"kw\">fn </span>hash&lt;H: Hasher&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, state: <span class=\"kw-2\">&amp;mut </span>H) {\n<span data-nosnippet>135</span>        Hash::hash(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.x, state)\n<span data-nosnippet>136</span>    }\n<span data-nosnippet>137</span>}\n<span data-nosnippet>138</span><span class=\"macro\">macro_rules!</span> impl_mint_from {\n<span data-nosnippet>139</span>    ($(<span class=\"macro-nonterminal\">$t</span>:ty),<span class=\"kw-2\">*</span>) =&gt; {\n<span data-nosnippet>140</span>        $(<span class=\"kw\">impl</span>&lt;M&gt; From&lt;<span class=\"macro-nonterminal\">$t</span>&gt; <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>141</span>        <span class=\"kw\">where\n<span data-nosnippet>142</span>            </span>M: MIntConvert&lt;<span class=\"macro-nonterminal\">$t</span>&gt;,\n<span data-nosnippet>143</span>        {\n<span data-nosnippet>144</span>            <span class=\"attr\">#[inline]\n<span data-nosnippet>145</span>            </span><span class=\"kw\">fn </span>from(x: <span class=\"macro-nonterminal\">$t</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>146</span>                <span class=\"self\">Self</span>::new_unchecked(&lt;M <span class=\"kw\">as </span>MIntConvert&lt;<span class=\"macro-nonterminal\">$t</span>&gt;&gt;::from(x))\n<span data-nosnippet>147</span>            }\n<span data-nosnippet>148</span>        }\n<span data-nosnippet>149</span>        <span class=\"kw\">impl</span>&lt;M&gt; From&lt;MInt&lt;M&gt;&gt; <span class=\"kw\">for </span><span class=\"macro-nonterminal\">$t\n<span data-nosnippet>150</span>        </span><span class=\"kw\">where\n<span data-nosnippet>151</span>            </span>M: MIntConvert&lt;<span class=\"macro-nonterminal\">$t</span>&gt;,\n<span data-nosnippet>152</span>        {\n<span data-nosnippet>153</span>            <span class=\"attr\">#[inline]\n<span data-nosnippet>154</span>            </span><span class=\"kw\">fn </span>from(x: MInt&lt;M&gt;) -&gt; <span class=\"macro-nonterminal\">$t </span>{\n<span data-nosnippet>155</span>                &lt;M <span class=\"kw\">as </span>MIntConvert&lt;<span class=\"macro-nonterminal\">$t</span>&gt;&gt;::into(x.x)\n<span data-nosnippet>156</span>            }\n<span data-nosnippet>157</span>        })*\n<span data-nosnippet>158</span>    };\n<span data-nosnippet>159</span>}\n<span data-nosnippet>160</span><span class=\"macro\">impl_mint_from!</span>(\n<span data-nosnippet>161</span>    u8, u16, u32, u64, u128, usize, i8, i16, i32, i64, i128, isize\n<span data-nosnippet>162</span>);\n<span data-nosnippet>163</span><span class=\"kw\">impl</span>&lt;M&gt; Zero <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>164</span><span class=\"kw\">where\n<span data-nosnippet>165</span>    </span>M: MIntBase,\n<span data-nosnippet>166</span>{\n<span data-nosnippet>167</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>168</span>    </span><span class=\"kw\">fn </span>zero() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>169</span>        <span class=\"self\">Self</span>::new_unchecked(M::mod_zero())\n<span data-nosnippet>170</span>    }\n<span data-nosnippet>171</span>}\n<span data-nosnippet>172</span><span class=\"kw\">impl</span>&lt;M&gt; One <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>173</span><span class=\"kw\">where\n<span data-nosnippet>174</span>    </span>M: MIntBase,\n<span data-nosnippet>175</span>{\n<span data-nosnippet>176</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>177</span>    </span><span class=\"kw\">fn </span>one() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>178</span>        <span class=\"self\">Self</span>::new_unchecked(M::mod_one())\n<span data-nosnippet>179</span>    }\n<span data-nosnippet>180</span>}\n<span data-nosnippet>181</span>\n<span data-nosnippet>182</span><span class=\"kw\">impl</span>&lt;M&gt; Add <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>183</span><span class=\"kw\">where\n<span data-nosnippet>184</span>    </span>M: MIntBase,\n<span data-nosnippet>185</span>{\n<span data-nosnippet>186</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>187</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>188</span>    </span><span class=\"kw\">fn </span>add(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>189</span>        <span class=\"self\">Self</span>::new_unchecked(M::mod_add(<span class=\"self\">self</span>.x, rhs.x))\n<span data-nosnippet>190</span>    }\n<span data-nosnippet>191</span>}\n<span data-nosnippet>192</span><span class=\"kw\">impl</span>&lt;M&gt; Sub <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>193</span><span class=\"kw\">where\n<span data-nosnippet>194</span>    </span>M: MIntBase,\n<span data-nosnippet>195</span>{\n<span data-nosnippet>196</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>197</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>198</span>    </span><span class=\"kw\">fn </span>sub(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>199</span>        <span class=\"self\">Self</span>::new_unchecked(M::mod_sub(<span class=\"self\">self</span>.x, rhs.x))\n<span data-nosnippet>200</span>    }\n<span data-nosnippet>201</span>}\n<span data-nosnippet>202</span><span class=\"kw\">impl</span>&lt;M&gt; Mul <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>203</span><span class=\"kw\">where\n<span data-nosnippet>204</span>    </span>M: MIntBase,\n<span data-nosnippet>205</span>{\n<span data-nosnippet>206</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>207</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>208</span>    </span><span class=\"kw\">fn </span>mul(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>209</span>        <span class=\"self\">Self</span>::new_unchecked(M::mod_mul(<span class=\"self\">self</span>.x, rhs.x))\n<span data-nosnippet>210</span>    }\n<span data-nosnippet>211</span>}\n<span data-nosnippet>212</span><span class=\"kw\">impl</span>&lt;M&gt; Div <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>213</span><span class=\"kw\">where\n<span data-nosnippet>214</span>    </span>M: MIntBase,\n<span data-nosnippet>215</span>{\n<span data-nosnippet>216</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>217</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>218</span>    </span><span class=\"kw\">fn </span>div(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>219</span>        <span class=\"self\">Self</span>::new_unchecked(M::mod_div(<span class=\"self\">self</span>.x, rhs.x))\n<span data-nosnippet>220</span>    }\n<span data-nosnippet>221</span>}\n<span data-nosnippet>222</span><span class=\"kw\">impl</span>&lt;M&gt; Neg <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>223</span><span class=\"kw\">where\n<span data-nosnippet>224</span>    </span>M: MIntBase,\n<span data-nosnippet>225</span>{\n<span data-nosnippet>226</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>227</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>228</span>    </span><span class=\"kw\">fn </span>neg(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>229</span>        <span class=\"self\">Self</span>::new_unchecked(M::mod_neg(<span class=\"self\">self</span>.x))\n<span data-nosnippet>230</span>    }\n<span data-nosnippet>231</span>}\n<span data-nosnippet>232</span><span class=\"kw\">impl</span>&lt;M&gt; Sum <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>233</span><span class=\"kw\">where\n<span data-nosnippet>234</span>    </span>M: MIntBase,\n<span data-nosnippet>235</span>{\n<span data-nosnippet>236</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>237</span>    </span><span class=\"kw\">fn </span>sum&lt;I: Iterator&lt;Item = <span class=\"self\">Self</span>&gt;&gt;(iter: I) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>238</span>        iter.fold(&lt;<span class=\"self\">Self </span><span class=\"kw\">as </span>Zero&gt;::zero(), Add::add)\n<span data-nosnippet>239</span>    }\n<span data-nosnippet>240</span>}\n<span data-nosnippet>241</span><span class=\"kw\">impl</span>&lt;M&gt; Product <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>242</span><span class=\"kw\">where\n<span data-nosnippet>243</span>    </span>M: MIntBase,\n<span data-nosnippet>244</span>{\n<span data-nosnippet>245</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>246</span>    </span><span class=\"kw\">fn </span>product&lt;I: Iterator&lt;Item = <span class=\"self\">Self</span>&gt;&gt;(iter: I) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>247</span>        iter.fold(&lt;<span class=\"self\">Self </span><span class=\"kw\">as </span>One&gt;::one(), Mul::mul)\n<span data-nosnippet>248</span>    }\n<span data-nosnippet>249</span>}\n<span data-nosnippet>250</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, M: <span class=\"lifetime\">'a</span>&gt; Sum&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>MInt&lt;M&gt;&gt; <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>251</span><span class=\"kw\">where\n<span data-nosnippet>252</span>    </span>M: MIntBase,\n<span data-nosnippet>253</span>{\n<span data-nosnippet>254</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>255</span>    </span><span class=\"kw\">fn </span>sum&lt;I: Iterator&lt;Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">Self</span>&gt;&gt;(iter: I) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>256</span>        iter.fold(&lt;<span class=\"self\">Self </span><span class=\"kw\">as </span>Zero&gt;::zero(), Add::add)\n<span data-nosnippet>257</span>    }\n<span data-nosnippet>258</span>}\n<span data-nosnippet>259</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, M: <span class=\"lifetime\">'a</span>&gt; Product&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>MInt&lt;M&gt;&gt; <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>260</span><span class=\"kw\">where\n<span data-nosnippet>261</span>    </span>M: MIntBase,\n<span data-nosnippet>262</span>{\n<span data-nosnippet>263</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>264</span>    </span><span class=\"kw\">fn </span>product&lt;I: Iterator&lt;Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"self\">Self</span>&gt;&gt;(iter: I) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>265</span>        iter.fold(&lt;<span class=\"self\">Self </span><span class=\"kw\">as </span>One&gt;::one(), Mul::mul)\n<span data-nosnippet>266</span>    }\n<span data-nosnippet>267</span>}\n<span data-nosnippet>268</span><span class=\"kw\">impl</span>&lt;M&gt; Display <span class=\"kw\">for </span>MInt&lt;M&gt;\n<span data-nosnippet>269</span><span class=\"kw\">where\n<span data-nosnippet>270</span>    </span>M: MIntBase,\n<span data-nosnippet>271</span>    M::Inner: Display,\n<span data-nosnippet>272</span>{\n<span data-nosnippet>273</span>    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; <span class=\"prelude-ty\">Result</span>&lt;(), fmt::Error&gt; {\n<span data-nosnippet>274</span>        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"{}\"</span>, <span class=\"self\">self</span>.<span class=\"highlight\">inner</span>())\n<span data-nosnippet>275</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[8,8],&#34;src/competitive/math/number_theoretic_transform.rs.html#355&#34;,&#34;line 355&#34;],[[9,9],&#34;src/competitive/math/number_theoretic_transform.rs.html#356&#34;,&#34;line 356&#34;],[[10,10],&#34;src/competitive/math/number_theoretic_transform.rs.html#357&#34;,&#34;line 357&#34;],[[31,31],&#34;src/competitive/math/number_theoretic_transform.rs.html#378&#34;,&#34;line 378&#34;],[[32,32],&#34;src/competitive/math/number_theoretic_transform.rs.html#379&#34;,&#34;line 379&#34;],[[34,34],&#34;src/competitive/math/number_theoretic_transform.rs.html#381&#34;,&#34;line 381&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/number_theoretic_transform.rs (<a href=\"src/competitive/math/number_theoretic_transform.rs.html#355\">line 355</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>347</span>    <span class=\"kw\">fn </span>transform(t: <span class=\"self\">Self</span>::T, len: usize) -&gt; <span class=\"self\">Self</span>::F {\n<span data-nosnippet>348</span>        <span class=\"kw\">let </span>npot = len.max(<span class=\"number\">2</span>).next_power_of_two();\n<span data-nosnippet>349</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (\n<span data-nosnippet>350</span>            MVec::&lt;N1&gt;::with_capacity(npot),\n<span data-nosnippet>351</span>            MVec::&lt;N2&gt;::with_capacity(npot),\n<span data-nosnippet>352</span>            MVec::&lt;N3&gt;::with_capacity(npot),\n<span data-nosnippet>353</span>        );\n<span data-nosnippet>354</span>        <span class=\"kw\">for </span>t <span class=\"kw\">in </span>t {\n<span data-nosnippet>355</span>            f.<span class=\"number\">0</span>.push(&lt;M <span class=\"kw\">as </span>MIntConvert&lt;u32&gt;&gt;::into(t.<span class=\"highlight focus\">inner</span>()).into());\n<span data-nosnippet>356</span>            f.<span class=\"number\">1</span>.push(&lt;M <span class=\"kw\">as </span>MIntConvert&lt;u32&gt;&gt;::into(t.<span class=\"highlight\">inner</span>()).into());\n<span data-nosnippet>357</span>            f.<span class=\"number\">2</span>.push(&lt;M <span class=\"kw\">as </span>MIntConvert&lt;u32&gt;&gt;::into(t.<span class=\"highlight\">inner</span>()).into());\n<span data-nosnippet>358</span>        }\n<span data-nosnippet>359</span>        f.<span class=\"number\">0</span>.resize_with(npot, Zero::zero);\n<span data-nosnippet>360</span>        f.<span class=\"number\">1</span>.resize_with(npot, Zero::zero);\n<span data-nosnippet>361</span>        f.<span class=\"number\">2</span>.resize_with(npot, Zero::zero);\n<span data-nosnippet>362</span>        ntt(<span class=\"kw-2\">&amp;mut </span>f.<span class=\"number\">0</span>);\n<span data-nosnippet>363</span>        ntt(<span class=\"kw-2\">&amp;mut </span>f.<span class=\"number\">1</span>);\n<span data-nosnippet>364</span>        ntt(<span class=\"kw-2\">&amp;mut </span>f.<span class=\"number\">2</span>);\n<span data-nosnippet>365</span>        f\n<span data-nosnippet>366</span>    }\n<span data-nosnippet>367</span>    <span class=\"kw\">fn </span>inverse_transform(f: <span class=\"self\">Self</span>::F, len: usize) -&gt; <span class=\"self\">Self</span>::T {\n<span data-nosnippet>368</span>        <span class=\"kw\">let </span>t1 = MInt::&lt;N2&gt;::new(N1::get_mod()).inv();\n<span data-nosnippet>369</span>        <span class=\"kw\">let </span>m1 = MInt::&lt;M&gt;::from(N1::get_mod());\n<span data-nosnippet>370</span>        <span class=\"kw\">let </span>m1_3 = MInt::&lt;N3&gt;::new(N1::get_mod());\n<span data-nosnippet>371</span>        <span class=\"kw\">let </span>t2 = (m1_3 * MInt::&lt;N3&gt;::new(N2::get_mod())).inv();\n<span data-nosnippet>372</span>        <span class=\"kw\">let </span>m2 = m1 * MInt::&lt;M&gt;::from(N2::get_mod());\n<span data-nosnippet>373</span>        Convolve::&lt;N1&gt;::inverse_transform(f.<span class=\"number\">0</span>, len)\n<span data-nosnippet>374</span>            .into_iter()\n<span data-nosnippet>375</span>            .zip(Convolve::&lt;N2&gt;::inverse_transform(f.<span class=\"number\">1</span>, len))\n<span data-nosnippet>376</span>            .zip(Convolve::&lt;N3&gt;::inverse_transform(f.<span class=\"number\">2</span>, len))\n<span data-nosnippet>377</span>            .map(|((c1, c2), c3)| {\n<span data-nosnippet>378</span>                <span class=\"kw\">let </span>d1 = c1.<span class=\"highlight\">inner</span>();\n<span data-nosnippet>379</span>                <span class=\"kw\">let </span>d2 = ((c2 - MInt::&lt;N2&gt;::from(d1)) * t1).<span class=\"highlight\">inner</span>();\n<span data-nosnippet>380</span>                <span class=\"kw\">let </span>x = MInt::&lt;N3&gt;::new(d1) + MInt::&lt;N3&gt;::new(d2) * m1_3;\n<span data-nosnippet>381</span>                <span class=\"kw\">let </span>d3 = ((c3 - x) * t2).<span class=\"highlight\">inner</span>();\n<span data-nosnippet>382</span>                MInt::&lt;M&gt;::from(d1) + MInt::&lt;M&gt;::from(d2) * m1 + MInt::&lt;M&gt;::from(d3) * m2\n<span data-nosnippet>383</span>            })\n<span data-nosnippet>384</span>            .collect()\n<span data-nosnippet>385</span>    }</code></pre></div></div></div></details></div></details></div></details>",0,"competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#335\">Source</a><a href=\"#impl-Mul%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#335\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#335\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;) -&gt; &lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&MInt<M>>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#202-211\">Source</a><a href=\"#impl-Mul-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#206\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#208-210\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: Self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#376\">Source</a><a href=\"#impl-MulAssign%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#376\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&MInt<M>>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#376\">Source</a><a href=\"#impl-MulAssign-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#376\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#222-231\">Source</a><a href=\"#impl-Neg-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#226\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#228-230\">Source</a><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#associatedtype.Output\" title=\"type core::ops::arith::Neg::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-One-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#172-180\">Source</a><a href=\"#impl-One-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"competitive/num/trait.One.html\" title=\"trait competitive::num::One\">One</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#177-179\">Source</a><a href=\"#method.one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.One.html#tymethod.one\" class=\"fn\">one</a>() -&gt; Self</h4></section><section id=\"method.is_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/zero_one.rs.html#18-23\">Source</a><a href=\"#method.is_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.One.html#method.is_one\" class=\"fn\">is_one</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section><section id=\"method.set_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/zero_one.rs.html#25-27\">Source</a><a href=\"#method.set_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.One.html#method.set_one\" class=\"fn\">set_one</a>(&amp;mut self)</h4></section></div></details>","One","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#119-127\">Source</a><a href=\"#impl-PartialEq-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#124-126\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#259-267\">Source</a><a href=\"#impl-Product%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a>&lt;&amp;'a <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a> + 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#264-266\">Source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a Self&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by multiplying\nthe items.</div></details></div></details>","Product<&'a MInt<M>>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#241-249\">Source</a><a href=\"#impl-Product-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html\" title=\"trait core::iter::traits::accum::Product\">Product</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#246-248\">Source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = Self&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by multiplying\nthe items.</div></details></div></details>","Product","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#334\">Source</a><a href=\"#impl-Sub%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#334\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#334\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;) -&gt; &lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&MInt<M>>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#192-201\">Source</a><a href=\"#impl-Sub-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#196\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#198-200\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: Self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#375\">Source</a><a href=\"#impl-SubAssign%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#375\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<&MInt<M>>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#375\">Source</a><a href=\"#impl-SubAssign-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#375\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#250-258\">Source</a><a href=\"#impl-Sum%3C%26MInt%3CM%3E%3E-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;&amp;'a <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt; for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a> + 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#255-257\">Source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a Self&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by “summing up”\nthe items.</div></details></div></details>","Sum<&'a MInt<M>>","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#232-240\">Source</a><a href=\"#impl-Sum-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#237-239\">Source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = Self&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Takes an iterator and generates <code>Self</code> from the elements by “summing up”\nthe items.</div></details></div></details>","Sum","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zero-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#163-171\">Source</a><a href=\"#impl-Zero-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"competitive/num/trait.Zero.html\" title=\"trait competitive::num::Zero\">Zero</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#168-170\">Source</a><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.Zero.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; Self</h4></section><section id=\"method.is_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/zero_one.rs.html#4-9\">Source</a><a href=\"#method.is_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.Zero.html#method.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section><section id=\"method.set_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/zero_one.rs.html#11-13\">Source</a><a href=\"#method.set_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.Zero.html#method.set_zero\" class=\"fn\">set_zero</a>(&amp;mut self)</h4></section></div></details>","Zero","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<section id=\"impl-Copy-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#101\">Source</a><a href=\"#impl-Copy-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section>","Copy","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<section id=\"impl-Eq-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/num/mint/mint_base.rs.html#128\">Source</a><a href=\"#impl-Eq-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntBase.html\" title=\"trait competitive::num::MIntBase\">MIntBase</a>,</div></h3></section>","Eq","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"],["<section id=\"impl-FormalPowerSeriesCoefficient-for-MInt%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/mod.rs.html#56\">Source</a><a href=\"#impl-FormalPowerSeriesCoefficient-for-MInt%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a> for <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,</div></h3></section>","FormalPowerSeriesCoefficient","competitive::num::mint::mint_basic::MInt998244353","competitive::num::mint::mint_basic::MInt1000000007","competitive::num::mint::mint_basic::MInt1000000009","competitive::num::mint::mint_basic::DynMIntU32","competitive::num::mint::mint_basic::DynMIntU64","competitive::num::mint::mint_basic::MInt2","competitive::num::mint::montgomery::MInt998244353","competitive::num::mint::montgomery::MInt2113929217","competitive::num::mint::montgomery::MInt1811939329","competitive::num::mint::montgomery::MInt2013265921"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[202650]}