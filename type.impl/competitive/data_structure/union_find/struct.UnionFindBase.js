(function() {
    var type_impls = Object.fromEntries([["competitive",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-UnionFindBase%3CU,+F,+M,+P,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#23-42\">Source</a><a href=\"#impl-Clone-for-UnionFindBase%3CU,+F,+M,+P,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U, F, M, P, H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, M, P, H&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    M: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html\" title=\"trait competitive::data_structure::union_find::UfMergeSpec\">UfMergeSpec</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,\n    H: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UndoStrategy.html\" title=\"trait competitive::data_structure::union_find::UndoStrategy\">UndoStrategy</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UfCell.html\" title=\"enum competitive::data_structure::union_find::UfCell\">UfCell</a>&lt;U, M, P&gt;&gt;,\n    U::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html#associatedtype.Info\" title=\"type competitive::data_structure::union_find::UnionStrategy::Info\">Info</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    M::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::union_find::UfMergeSpec::Data\">Data</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    H::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UndoStrategy.html#associatedtype.History\" title=\"type competitive::data_structure::union_find::UndoStrategy::History\">History</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#34-41\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::MergingUnionFind","competitive::data_structure::union_find::PotentializedUnionFind","competitive::data_structure::union_find::UndoableUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-UnionFindBase%3CU,+F,+M,+P,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#44-62\">Source</a><a href=\"#impl-Debug-for-UnionFindBase%3CU,+F,+M,+P,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U, F, M, P, H&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, M, P, H&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    M: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html\" title=\"trait competitive::data_structure::union_find::UfMergeSpec\">UfMergeSpec</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,\n    H: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UndoStrategy.html\" title=\"trait competitive::data_structure::union_find::UndoStrategy\">UndoStrategy</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UfCell.html\" title=\"enum competitive::data_structure::union_find::UfCell\">UfCell</a>&lt;U, M, P&gt;&gt;,\n    U::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html#associatedtype.Info\" title=\"type competitive::data_structure::union_find::UnionStrategy::Info\">Info</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    M::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::union_find::UfMergeSpec::Data\">Data</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    P::<a class=\"associatedtype\" href=\"competitive/algebra/trait.Magma.html#associatedtype.T\" title=\"type competitive::algebra::Magma::T\">T</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    H::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UndoStrategy.html#associatedtype.History\" title=\"type competitive::data_structure::union_find::UndoStrategy::History\">History</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#56-61\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::MergingUnionFind","competitive::data_structure::union_find::PotentializedUnionFind","competitive::data_structure::union_find::UndoableUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnionFindBase%3CU,+(),+M,+P,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#491-501\">Source</a><a href=\"#impl-UnionFindBase%3CU,+(),+M,+P,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U, M, P, H&gt; <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, M, P, H&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    M: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html\" title=\"trait competitive::data_structure::union_find::UfMergeSpec\">UfMergeSpec</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,\n    H: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UndoStrategy.html\" title=\"trait competitive::data_structure::union_find::UndoStrategy\">UndoStrategy</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UfCell.html\" title=\"enum competitive::data_structure::union_find::UfCell\">UfCell</a>&lt;U, M, P&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.undo\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#498-500\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.undo\" class=\"fn\">undo</a>(&amp;mut self)</h4></section></div></details>",0,"competitive::data_structure::union_find::UndoableUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnionFindBase%3CU,+F,+(),+P,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#268-289\">Source</a><a href=\"#impl-UnionFindBase%3CU,+F,+(),+P,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U, F, P, H&gt; <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, P, H&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,\n    H: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UndoStrategy.html\" title=\"trait competitive::data_structure::union_find::UndoStrategy\">UndoStrategy</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UfCell.html\" title=\"enum competitive::data_structure::union_find::UfCell\">UfCell</a>&lt;U, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, P&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#275-285\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.new\" class=\"fn\">new</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[4,4],&#34;src/aizu_online_judge/dsl/dsl_1_a.rs.html#10&#34;,&#34;line 10&#34;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_a.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_a.rs.html#10\">line 10</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">dsl_1_a(reader: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Read, </a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">writer: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Write) {\n<span data-nosnippet>7</span>    </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">scanner = Scanner::new(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">s);\n<span data-nosnippet>9</span>    </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, n, q);\n<span data-nosnippet>10</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = </a><span class=\"highlight focus\">UnionFind::new</span><a href=\"tools/scanner.rs.html#391\">(n);\n<span data-nosnippet>11</span>    </a><span class=\"kw\">for _ in </span><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..q {\n<span data-nosnippet>12</span>        </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, ty, x, y);\n<span data-nosnippet>13</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">ty == </a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>14</span>            uf.unite(x, y);\n<span data-nosnippet>15</span>        } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>16</span>            <span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"{}\"</span><a href=\"tools/scanner.rs.html#391\">, (uf.same(x, y) </a><span class=\"kw\">as </span><a href=\"tools/scanner.rs.html#391\">usize)).ok();\n<span data-nosnippet>17</span>        }\n<span data-nosnippet>18</span>    }\n<span data-nosnippet>19</span>}</a></code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[4,4],&#34;src/library_checker/data_structure/unionfind.rs.html#10&#34;,&#34;line 10&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/data_structure/unionfind.rs (<a href=\"src/library_checker/data_structure/unionfind.rs.html#10\">line 10</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">unionfind(reader: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Read, </a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">writer: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Write) {\n<span data-nosnippet>7</span>    </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">scanner = Scanner::new(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">s);\n<span data-nosnippet>9</span>    </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, n, q);\n<span data-nosnippet>10</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = </a><span class=\"highlight focus\">UnionFind::new</span><a href=\"tools/scanner.rs.html#391\">(n);\n<span data-nosnippet>11</span>    </a><span class=\"kw\">for _ in </span><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..q {\n<span data-nosnippet>12</span>        </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, ty, u, v);\n<span data-nosnippet>13</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">ty == </a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>14</span>            uf.unite(u, v);\n<span data-nosnippet>15</span>        } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>16</span>            <span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"{}\"</span><a href=\"tools/scanner.rs.html#391\">, uf.same(u, v) </a><span class=\"kw\">as </span><a href=\"tools/scanner.rs.html#391\">usize).ok();\n<span data-nosnippet>17</span>        }\n<span data-nosnippet>18</span>    }\n<span data-nosnippet>19</span>}</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[6,6],&#34;src/competitive/graph/minimum_spanning_tree.rs.html#10&#34;,&#34;line 10&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_spanning_tree.rs (<a href=\"src/competitive/graph/minimum_spanning_tree.rs.html#10\">line 10</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>4</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">minimum_spanning_tree&lt;T&gt;(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, weight: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">usize) -&gt; T) -&gt; Vec&lt;bool&gt;\n<span data-nosnippet>5</span>    </a><span class=\"kw\">where\n<span data-nosnippet>6</span>        </span><a href=\"tools/scanner.rs.html#391\">T: Ord,\n<span data-nosnippet>7</span>    {\n<span data-nosnippet>8</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">idx: Vec&lt;</a><span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span>..<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()).collect();\n<span data-nosnippet>9</span>        idx.sort_by_key(weight);\n<span data-nosnippet>10</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = </a><span class=\"highlight focus\">UnionFind::new</span>(<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size());\n<span data-nosnippet>11</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">res = </a><span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()];\n<span data-nosnippet>12</span>        </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">eid </a><span class=\"kw\">in </span><a href=\"tools/scanner.rs.html#391\">idx.into_iter() {\n<span data-nosnippet>13</span>            </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(u, v) = </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">[eid];\n<span data-nosnippet>14</span>            res[eid] = uf.unite(u, v);\n<span data-nosnippet>15</span>        }\n<span data-nosnippet>16</span>        res\n<span data-nosnippet>17</span>    }</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[4,4],&#34;src/aizu_online_judge/dsl/dsl_1_b.rs.html#10&#34;,&#34;line 10&#34;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_b.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_b.rs.html#10\">line 10</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">dsl_1_b(reader: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Read, </a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">writer: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Write) {\n<span data-nosnippet>7</span>    </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">scanner = Scanner::new(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">s);\n<span data-nosnippet>9</span>    </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, n, q);\n<span data-nosnippet>10</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = </a><span class=\"highlight focus\"><a href=\"tools/scanner.rs.html#391\">PotentializedUnionFind::&lt;AdditiveOperation&lt;</a><span class=\"kw\">_</span>&gt;&gt;::new</span><a href=\"tools/scanner.rs.html#391\">(n);\n<span data-nosnippet>11</span>    </a><span class=\"kw\">for _ in </span><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..q {\n<span data-nosnippet>12</span>        </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, ty, x, y);\n<span data-nosnippet>13</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">ty == </a><span class=\"number\">0 </span>{\n<span data-nosnippet>14</span>            <span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, w: i64);\n<span data-nosnippet>15</span>            uf.unite_with(x, y, w);\n<span data-nosnippet>16</span>        } </a><span class=\"kw\">else if let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(w) = uf.difference(x, y) {\n<span data-nosnippet>17</span>            </a><span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"{}\"</span><a href=\"tools/scanner.rs.html#391\">, w).ok();\n<span data-nosnippet>18</span>        } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>19</span>            <span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"?\"</span><a href=\"tools/scanner.rs.html#391\">).ok();\n<span data-nosnippet>20</span>        }\n<span data-nosnippet>21</span>    }\n<span data-nosnippet>22</span>}</a></code></pre></div></div></div></details></div></details><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#286-288\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self)</h4></section></div></details>",0,"competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::PotentializedUnionFind","competitive::data_structure::union_find::UndoableUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnionFindBase%3CU,+F,+FnMerger%3CT,+Merge%3E,+P,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#291-313\">Source</a><a href=\"#impl-UnionFindBase%3CU,+F,+FnMerger%3CT,+Merge%3E,+P,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U, F, T, Merge, P, H&gt; <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.FnMerger.html\" title=\"struct competitive::data_structure::union_find::FnMerger\">FnMerger</a>&lt;T, Merge&gt;, P, H&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    Merge: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>),\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,\n    H: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UndoStrategy.html\" title=\"trait competitive::data_structure::union_find::UndoStrategy\">UndoStrategy</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UfCell.html\" title=\"enum competitive::data_structure::union_find::UfCell\">UfCell</a>&lt;U, <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.FnMerger.html\" title=\"struct competitive::data_structure::union_find::FnMerger\">FnMerger</a>&lt;T, Merge&gt;, P&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_with_merger\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#299-312\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.new_with_merger\" class=\"fn\">new_with_merger</a>(\n    n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    init: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T,\n    merge: Merge,\n) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[13,16],&#34;src/competitive/algorithm/solve_01_on_tree.rs.html#55-58&#34;,&#34;lines 55-58&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/algorithm/solve_01_on_tree.rs (<a href=\"src/competitive/algorithm/solve_01_on_tree.rs.html#55-58\">lines 55-58</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>42</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">solve_01_on_tree(\n<span data-nosnippet>43</span>    n: usize,\n<span data-nosnippet>44</span>    c01: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(usize) -&gt; (usize, usize),\n<span data-nosnippet>45</span>    root: usize,\n<span data-nosnippet>46</span>    parent: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(usize) -&gt; usize,\n<span data-nosnippet>47</span>) -&gt; (usize, Vec&lt;usize&gt;) {\n<span data-nosnippet>48</span>    </a><span class=\"kw\">pub type </span><a href=\"tools/scanner.rs.html#391\">UF&lt;T, M&gt; =\n<span data-nosnippet>49</span>        UnionFindBase&lt;(), union_find::PathCompression, union_find::FnMerger&lt;T, M&gt;, (), ()&gt;;\n<span data-nosnippet>50</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cost = </a><span class=\"number\">0usize</span>;\n<span data-nosnippet>51</span>    <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">c01 = |u| {\n<span data-nosnippet>52</span>        </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">c = c01(u);\n<span data-nosnippet>53</span>        Count01::new(c.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, c.</a><span class=\"number\">1</span>)\n<span data-nosnippet>54</span>    };\n<span data-nosnippet>55</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = </a><span class=\"highlight focus\">UF::new_with_merger</span><a href=\"tools/scanner.rs.html#391\">(n, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">c01, |x, y| {\n<span data-nosnippet>56</span>        cost += x.cnt1 * y.cnt0;\n<span data-nosnippet>57</span>        </a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">x += </a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">y;\n<span data-nosnippet>58</span>    });\n<span data-nosnippet>59</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">label = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">; n];\n<span data-nosnippet>60</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">heap = BinaryHeap::from_iter((</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..n).filter(|</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">u| u != root).map(|u| (c01(u), u, </a><span class=\"number\">0</span>)));\n<span data-nosnippet>61</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">next: Vec&lt;</a><span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..n).collect();\n<span data-nosnippet>62</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ord = Vec::with_capacity(n);\n<span data-nosnippet>63</span>    </a><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((_c, u, l)) = heap.pop() {\n<span data-nosnippet>64</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">label[u] != l {\n<span data-nosnippet>65</span>            </a><span class=\"kw\">continue</span>;\n<span data-nosnippet>66</span>        }\n<span data-nosnippet>67</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">p = uf.find_root(parent(u));\n<span data-nosnippet>68</span>        uf.unite(u, p);\n<span data-nosnippet>69</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!uf.same(p, root) {\n<span data-nosnippet>70</span>            label[p] += </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>71</span>            heap.push((</a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">uf.merge_data(p), p, label[p]));\n<span data-nosnippet>72</span>        }\n<span data-nosnippet>73</span>        next.swap(u, p);\n<span data-nosnippet>74</span>    }\n<span data-nosnippet>75</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">u = next[root];\n<span data-nosnippet>76</span>    ord.push(u);\n<span data-nosnippet>77</span>    </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">u != root {\n<span data-nosnippet>78</span>        u = next[u];\n<span data-nosnippet>79</span>        ord.push(u);\n<span data-nosnippet>80</span>    }\n<span data-nosnippet>81</span>    ord.reverse();\n<span data-nosnippet>82</span>    (cost, ord)\n<span data-nosnippet>83</span>}</a></code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[27,31],&#34;src/competitive/graph/minimum_spanning_arborescence.rs.html#32-36&#34;,&#34;lines 32-36&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_spanning_arborescence.rs (<a href=\"src/competitive/graph/minimum_spanning_arborescence.rs.html#32-36\">lines 32-36</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>5</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">minimum_spanning_arborescence&lt;G, F&gt;(\n<span data-nosnippet>6</span>        </a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">,\n<span data-nosnippet>7</span>        root: usize,\n<span data-nosnippet>8</span>        weight: F,\n<span data-nosnippet>9</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;(G::T, Vec&lt;usize&gt;)&gt;\n<span data-nosnippet>10</span>    </a><span class=\"kw\">where\n<span data-nosnippet>11</span>        </span><a href=\"tools/scanner.rs.html#391\">G: Group,\n<span data-nosnippet>12</span>        G::T: Ord,\n<span data-nosnippet>13</span>        F: Fn(usize) -&gt; G::T,\n<span data-nosnippet>14</span>    {\n<span data-nosnippet>15</span>        </a><span class=\"kw\">struct </span><a href=\"tools/scanner.rs.html#391\">WeightAct&lt;G&gt;(std::marker::PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"tools/scanner.rs.html#391\">() -&gt; G&gt;);\n<span data-nosnippet>16</span>        </a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;G&gt; MonoidAct </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">WeightAct&lt;G&gt;\n<span data-nosnippet>17</span>        </a><span class=\"kw\">where\n<span data-nosnippet>18</span>            </span><a href=\"tools/scanner.rs.html#391\">G: Group,\n<span data-nosnippet>19</span>        {\n<span data-nosnippet>20</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Key = (G::T, usize);\n<span data-nosnippet>21</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Act = G::T;\n<span data-nosnippet>22</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">ActMonoid = G;\n<span data-nosnippet>23</span>\n<span data-nosnippet>24</span>            </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">act(x: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Key, a: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Act) -&gt; <span class=\"self\">Self</span>::Key {\n<span data-nosnippet>25</span>                (G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">x.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, a), x.</a><span class=\"number\">1</span>)\n<span data-nosnippet>26</span>            }\n<span data-nosnippet>27</span>\n<span data-nosnippet>28</span>            <span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">act_assign(x: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Key, a: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Act) {\n<span data-nosnippet>29</span>                x.</a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">= G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">x.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, a);\n<span data-nosnippet>30</span>            }\n<span data-nosnippet>31</span>        }\n<span data-nosnippet>32</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = </a><span class=\"highlight focus\">MergingUnionFind::new_with_merger</span>(\n<span data-nosnippet>33</span>            <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size(),\n<span data-nosnippet>34</span>            |</a><span class=\"kw\">_</span><a href=\"tools/scanner.rs.html#391\">| PairingHeap::&lt;(G::T, usize), Less, WeightAct&lt;G&gt;&gt;::default(),\n<span data-nosnippet>35</span>            |x, y| x.append(y),\n<span data-nosnippet>36</span>        );\n<span data-nosnippet>37</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">state = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()]; </a><span class=\"comment\">// 0: unprocessed, 1: in process, 2: completed\n<span data-nosnippet>38</span>        </span><a href=\"tools/scanner.rs.html#391\">state[root] = </a><span class=\"number\">2</span>;\n<span data-nosnippet>39</span>        <span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">(id, </a><span class=\"kw-2\">&amp;</span>(<span class=\"kw\">_</span><a href=\"tools/scanner.rs.html#391\">, to)) </a><span class=\"kw\">in </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges().enumerate() {\n<span data-nosnippet>40</span>            uf.merge_data_mut(to).push((weight(id), id));\n<span data-nosnippet>41</span>        }\n<span data-nosnippet>42</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">paredge = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()];\n<span data-nosnippet>43</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ord = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>44</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">leaf = </a><span class=\"macro\">vec!</span>[<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size(); </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()];\n<span data-nosnippet>45</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cycle = </a><span class=\"number\">0usize</span>;\n<span data-nosnippet>46</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">acc = G::unit();\n<span data-nosnippet>47</span>        </a><span class=\"kw\">for </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cur </a><span class=\"kw\">in </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices() {\n<span data-nosnippet>48</span>            </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">state[cur] != </a><span class=\"number\">0 </span>{\n<span data-nosnippet>49</span>                <span class=\"kw\">continue</span>;\n<span data-nosnippet>50</span>            }\n<span data-nosnippet>51</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">path = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>52</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ch = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>53</span>            <span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">state[cur] != </a><span class=\"number\">2 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>54</span>                path.push(cur);\n<span data-nosnippet>55</span>                state[cur] = </a><span class=\"number\">1</span>;\n<span data-nosnippet>56</span>                <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(w, eid) = {\n<span data-nosnippet>57</span>                    </a><span class=\"kw\">match </span><a href=\"tools/scanner.rs.html#391\">uf.merge_data_mut(cur).pop() {\n<span data-nosnippet>58</span>                        </a><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((w, eid)) =&gt; (w, eid),\n<span data-nosnippet>59</span>                        </a><span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span><a href=\"tools/scanner.rs.html#391\">,\n<span data-nosnippet>60</span>                    }\n<span data-nosnippet>61</span>                };\n<span data-nosnippet>62</span>                uf.merge_data_mut(cur).apply_all(G::inverse(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">w));\n<span data-nosnippet>63</span>                acc = G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">acc, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">w);\n<span data-nosnippet>64</span>                ord.push(eid);\n<span data-nosnippet>65</span>                </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(u, v) = </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">[eid];\n<span data-nosnippet>66</span>                </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">leaf[v] &gt;= </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size() {\n<span data-nosnippet>67</span>                    leaf[v] = eid;\n<span data-nosnippet>68</span>                }\n<span data-nosnippet>69</span>                </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">cycle &gt; </a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>70</span>                    paredge[ch.pop().unwrap()] = eid;\n<span data-nosnippet>71</span>                    cycle -= </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>72</span>                }\n<span data-nosnippet>73</span>                ch.push(eid);\n<span data-nosnippet>74</span>                </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">state[uf.find_root(u)] == </a><span class=\"number\">1 </span>{\n<span data-nosnippet>75</span>                    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(t) = path.pop() {\n<span data-nosnippet>76</span>                        state[t] = </a><span class=\"number\">2</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>77</span>                        cycle += </a><span class=\"number\">1</span>;\n<span data-nosnippet>78</span>                        <span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!uf.unite(u, t) {\n<span data-nosnippet>79</span>                            </a><span class=\"kw\">break</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>80</span>                        }\n<span data-nosnippet>81</span>                    }\n<span data-nosnippet>82</span>                    state[uf.find_root(u)] = </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>83</span>                }\n<span data-nosnippet>84</span>                cur = uf.find_root(u);\n<span data-nosnippet>85</span>            }\n<span data-nosnippet>86</span>            </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">u </a><span class=\"kw\">in </span><a href=\"tools/scanner.rs.html#391\">path.into_iter() {\n<span data-nosnippet>87</span>                state[u] = </a><span class=\"number\">2</span>;\n<span data-nosnippet>88</span>            }\n<span data-nosnippet>89</span>        }\n<span data-nosnippet>90</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">tree = </a><span class=\"macro\">vec!</span><a href=\"tools/scanner.rs.html#391\">[root; </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()];\n<span data-nosnippet>91</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">used = </a><span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()];\n<span data-nosnippet>92</span>        </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">eid </a><span class=\"kw\">in </span><a href=\"tools/scanner.rs.html#391\">ord.into_iter().rev() {\n<span data-nosnippet>93</span>            </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!used[eid] {\n<span data-nosnippet>94</span>                </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(u, v) = </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">[eid];\n<span data-nosnippet>95</span>                tree[v] = u;\n<span data-nosnippet>96</span>                </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">x = leaf[v];\n<span data-nosnippet>97</span>                </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">x != eid {\n<span data-nosnippet>98</span>                    used[x] = </a><span class=\"bool-val\">true</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>99</span>                    x = paredge[x];\n<span data-nosnippet>100</span>                }\n<span data-nosnippet>101</span>            }\n<span data-nosnippet>102</span>        }\n<span data-nosnippet>103</span>        </a><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((acc, tree))\n<span data-nosnippet>104</span>    }</a></code></pre></div></div></div></details></div></details></div></details>",0,"competitive::data_structure::union_find::MergingUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnionFindBase%3CU,+F,+M,+P,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#328-436\">Source</a><a href=\"#impl-UnionFindBase%3CU,+F,+M,+P,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U, F, M, P, H&gt; <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, M, P, H&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    M: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html\" title=\"trait competitive::data_structure::union_find::UfMergeSpec\">UfMergeSpec</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,\n    H: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UndoStrategy.html\" title=\"trait competitive::data_structure::union_find::UndoStrategy\">UndoStrategy</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UfCell.html\" title=\"enum competitive::data_structure::union_find::UfCell\">UfCell</a>&lt;U, M, P&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.same\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#350-352\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.same\" class=\"fn\">same</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[10,10],&#34;src/aizu_online_judge/dsl/dsl_1_a.rs.html#16&#34;,&#34;line 16&#34;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_a.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_a.rs.html#16\">line 16</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">dsl_1_a(reader: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Read, </a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">writer: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Write) {\n<span data-nosnippet>7</span>    </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">scanner = Scanner::new(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">s);\n<span data-nosnippet>9</span>    </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, n, q);\n<span data-nosnippet>10</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = UnionFind::new(n);\n<span data-nosnippet>11</span>    </a><span class=\"kw\">for _ in </span><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..q {\n<span data-nosnippet>12</span>        </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, ty, x, y);\n<span data-nosnippet>13</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">ty == </a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>14</span>            uf.unite(x, y);\n<span data-nosnippet>15</span>        } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>16</span>            <span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"{}\"</span><a href=\"tools/scanner.rs.html#391\">, (uf.</a><span class=\"highlight focus\">same</span><a href=\"tools/scanner.rs.html#391\">(x, y) </a><span class=\"kw\">as </span><a href=\"tools/scanner.rs.html#391\">usize)).ok();\n<span data-nosnippet>17</span>        }\n<span data-nosnippet>18</span>    }\n<span data-nosnippet>19</span>}</a></code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[10,10],&#34;src/library_checker/data_structure/unionfind.rs.html#16&#34;,&#34;line 16&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/data_structure/unionfind.rs (<a href=\"src/library_checker/data_structure/unionfind.rs.html#16\">line 16</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">unionfind(reader: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Read, </a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">writer: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Write) {\n<span data-nosnippet>7</span>    </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">scanner = Scanner::new(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">s);\n<span data-nosnippet>9</span>    </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, n, q);\n<span data-nosnippet>10</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = UnionFind::new(n);\n<span data-nosnippet>11</span>    </a><span class=\"kw\">for _ in </span><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..q {\n<span data-nosnippet>12</span>        </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, ty, u, v);\n<span data-nosnippet>13</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">ty == </a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>14</span>            uf.unite(u, v);\n<span data-nosnippet>15</span>        } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>16</span>            <span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"{}\"</span><a href=\"tools/scanner.rs.html#391\">, uf.</a><span class=\"highlight focus\">same</span><a href=\"tools/scanner.rs.html#391\">(u, v) </a><span class=\"kw\">as </span><a href=\"tools/scanner.rs.html#391\">usize).ok();\n<span data-nosnippet>17</span>        }\n<span data-nosnippet>18</span>    }\n<span data-nosnippet>19</span>}</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[27,27],&#34;src/competitive/algorithm/solve_01_on_tree.rs.html#69&#34;,&#34;line 69&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/algorithm/solve_01_on_tree.rs (<a href=\"src/competitive/algorithm/solve_01_on_tree.rs.html#69\">line 69</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>42</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">solve_01_on_tree(\n<span data-nosnippet>43</span>    n: usize,\n<span data-nosnippet>44</span>    c01: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(usize) -&gt; (usize, usize),\n<span data-nosnippet>45</span>    root: usize,\n<span data-nosnippet>46</span>    parent: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(usize) -&gt; usize,\n<span data-nosnippet>47</span>) -&gt; (usize, Vec&lt;usize&gt;) {\n<span data-nosnippet>48</span>    </a><span class=\"kw\">pub type </span><a href=\"tools/scanner.rs.html#391\">UF&lt;T, M&gt; =\n<span data-nosnippet>49</span>        UnionFindBase&lt;(), union_find::PathCompression, union_find::FnMerger&lt;T, M&gt;, (), ()&gt;;\n<span data-nosnippet>50</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cost = </a><span class=\"number\">0usize</span>;\n<span data-nosnippet>51</span>    <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">c01 = |u| {\n<span data-nosnippet>52</span>        </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">c = c01(u);\n<span data-nosnippet>53</span>        Count01::new(c.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, c.</a><span class=\"number\">1</span>)\n<span data-nosnippet>54</span>    };\n<span data-nosnippet>55</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = UF::new_with_merger(n, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">c01, |x, y| {\n<span data-nosnippet>56</span>        cost += x.cnt1 * y.cnt0;\n<span data-nosnippet>57</span>        </a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">x += </a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">y;\n<span data-nosnippet>58</span>    });\n<span data-nosnippet>59</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">label = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">; n];\n<span data-nosnippet>60</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">heap = BinaryHeap::from_iter((</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..n).filter(|</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">u| u != root).map(|u| (c01(u), u, </a><span class=\"number\">0</span>)));\n<span data-nosnippet>61</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">next: Vec&lt;</a><span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..n).collect();\n<span data-nosnippet>62</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ord = Vec::with_capacity(n);\n<span data-nosnippet>63</span>    </a><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((_c, u, l)) = heap.pop() {\n<span data-nosnippet>64</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">label[u] != l {\n<span data-nosnippet>65</span>            </a><span class=\"kw\">continue</span>;\n<span data-nosnippet>66</span>        }\n<span data-nosnippet>67</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">p = uf.find_root(parent(u));\n<span data-nosnippet>68</span>        uf.unite(u, p);\n<span data-nosnippet>69</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!uf.</a><span class=\"highlight focus\">same</span><a href=\"tools/scanner.rs.html#391\">(p, root) {\n<span data-nosnippet>70</span>            label[p] += </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>71</span>            heap.push((</a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">uf.merge_data(p), p, label[p]));\n<span data-nosnippet>72</span>        }\n<span data-nosnippet>73</span>        next.swap(u, p);\n<span data-nosnippet>74</span>    }\n<span data-nosnippet>75</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">u = next[root];\n<span data-nosnippet>76</span>    ord.push(u);\n<span data-nosnippet>77</span>    </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">u != root {\n<span data-nosnippet>78</span>        u = next[u];\n<span data-nosnippet>79</span>        ord.push(u);\n<span data-nosnippet>80</span>    }\n<span data-nosnippet>81</span>    ord.reverse();\n<span data-nosnippet>82</span>    (cost, ord)\n<span data-nosnippet>83</span>}</a></code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge_data\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#354-360\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.merge_data\" class=\"fn\">merge_data</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &amp;M::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::union_find::UfMergeSpec::Data\">Data</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[29,29],&#34;src/competitive/algorithm/solve_01_on_tree.rs.html#71&#34;,&#34;line 71&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/algorithm/solve_01_on_tree.rs (<a href=\"src/competitive/algorithm/solve_01_on_tree.rs.html#71\">line 71</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>42</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">solve_01_on_tree(\n<span data-nosnippet>43</span>    n: usize,\n<span data-nosnippet>44</span>    c01: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(usize) -&gt; (usize, usize),\n<span data-nosnippet>45</span>    root: usize,\n<span data-nosnippet>46</span>    parent: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(usize) -&gt; usize,\n<span data-nosnippet>47</span>) -&gt; (usize, Vec&lt;usize&gt;) {\n<span data-nosnippet>48</span>    </a><span class=\"kw\">pub type </span><a href=\"tools/scanner.rs.html#391\">UF&lt;T, M&gt; =\n<span data-nosnippet>49</span>        UnionFindBase&lt;(), union_find::PathCompression, union_find::FnMerger&lt;T, M&gt;, (), ()&gt;;\n<span data-nosnippet>50</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cost = </a><span class=\"number\">0usize</span>;\n<span data-nosnippet>51</span>    <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">c01 = |u| {\n<span data-nosnippet>52</span>        </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">c = c01(u);\n<span data-nosnippet>53</span>        Count01::new(c.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, c.</a><span class=\"number\">1</span>)\n<span data-nosnippet>54</span>    };\n<span data-nosnippet>55</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = UF::new_with_merger(n, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">c01, |x, y| {\n<span data-nosnippet>56</span>        cost += x.cnt1 * y.cnt0;\n<span data-nosnippet>57</span>        </a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">x += </a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">y;\n<span data-nosnippet>58</span>    });\n<span data-nosnippet>59</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">label = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">; n];\n<span data-nosnippet>60</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">heap = BinaryHeap::from_iter((</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..n).filter(|</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">u| u != root).map(|u| (c01(u), u, </a><span class=\"number\">0</span>)));\n<span data-nosnippet>61</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">next: Vec&lt;</a><span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..n).collect();\n<span data-nosnippet>62</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ord = Vec::with_capacity(n);\n<span data-nosnippet>63</span>    </a><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((_c, u, l)) = heap.pop() {\n<span data-nosnippet>64</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">label[u] != l {\n<span data-nosnippet>65</span>            </a><span class=\"kw\">continue</span>;\n<span data-nosnippet>66</span>        }\n<span data-nosnippet>67</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">p = uf.find_root(parent(u));\n<span data-nosnippet>68</span>        uf.unite(u, p);\n<span data-nosnippet>69</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!uf.same(p, root) {\n<span data-nosnippet>70</span>            label[p] += </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>71</span>            heap.push((</a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">uf.</a><span class=\"highlight focus\">merge_data</span><a href=\"tools/scanner.rs.html#391\">(p), p, label[p]));\n<span data-nosnippet>72</span>        }\n<span data-nosnippet>73</span>        next.swap(u, p);\n<span data-nosnippet>74</span>    }\n<span data-nosnippet>75</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">u = next[root];\n<span data-nosnippet>76</span>    ord.push(u);\n<span data-nosnippet>77</span>    </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">u != root {\n<span data-nosnippet>78</span>        u = next[u];\n<span data-nosnippet>79</span>        ord.push(u);\n<span data-nosnippet>80</span>    }\n<span data-nosnippet>81</span>    ord.reverse();\n<span data-nosnippet>82</span>    (cost, ord)\n<span data-nosnippet>83</span>}</a></code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge_data_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#362-368\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.merge_data_mut\" class=\"fn\">merge_data_mut</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &amp;mut M::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::union_find::UfMergeSpec::Data\">Data</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[35,35],&#34;src/competitive/graph/minimum_spanning_arborescence.rs.html#40&#34;,&#34;line 40&#34;],[[52,52],&#34;src/competitive/graph/minimum_spanning_arborescence.rs.html#57&#34;,&#34;line 57&#34;],[[57,57],&#34;src/competitive/graph/minimum_spanning_arborescence.rs.html#62&#34;,&#34;line 62&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_spanning_arborescence.rs (<a href=\"src/competitive/graph/minimum_spanning_arborescence.rs.html#40\">line 40</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>5</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">minimum_spanning_arborescence&lt;G, F&gt;(\n<span data-nosnippet>6</span>        </a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">,\n<span data-nosnippet>7</span>        root: usize,\n<span data-nosnippet>8</span>        weight: F,\n<span data-nosnippet>9</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;(G::T, Vec&lt;usize&gt;)&gt;\n<span data-nosnippet>10</span>    </a><span class=\"kw\">where\n<span data-nosnippet>11</span>        </span><a href=\"tools/scanner.rs.html#391\">G: Group,\n<span data-nosnippet>12</span>        G::T: Ord,\n<span data-nosnippet>13</span>        F: Fn(usize) -&gt; G::T,\n<span data-nosnippet>14</span>    {\n<span data-nosnippet>15</span>        </a><span class=\"kw\">struct </span><a href=\"tools/scanner.rs.html#391\">WeightAct&lt;G&gt;(std::marker::PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"tools/scanner.rs.html#391\">() -&gt; G&gt;);\n<span data-nosnippet>16</span>        </a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;G&gt; MonoidAct </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">WeightAct&lt;G&gt;\n<span data-nosnippet>17</span>        </a><span class=\"kw\">where\n<span data-nosnippet>18</span>            </span><a href=\"tools/scanner.rs.html#391\">G: Group,\n<span data-nosnippet>19</span>        {\n<span data-nosnippet>20</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Key = (G::T, usize);\n<span data-nosnippet>21</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Act = G::T;\n<span data-nosnippet>22</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">ActMonoid = G;\n<span data-nosnippet>23</span>\n<span data-nosnippet>24</span>            </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">act(x: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Key, a: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Act) -&gt; <span class=\"self\">Self</span>::Key {\n<span data-nosnippet>25</span>                (G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">x.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, a), x.</a><span class=\"number\">1</span>)\n<span data-nosnippet>26</span>            }\n<span data-nosnippet>27</span>\n<span data-nosnippet>28</span>            <span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">act_assign(x: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Key, a: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Act) {\n<span data-nosnippet>29</span>                x.</a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">= G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">x.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, a);\n<span data-nosnippet>30</span>            }\n<span data-nosnippet>31</span>        }\n<span data-nosnippet>32</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = MergingUnionFind::new_with_merger(\n<span data-nosnippet>33</span>            </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size(),\n<span data-nosnippet>34</span>            |</a><span class=\"kw\">_</span><a href=\"tools/scanner.rs.html#391\">| PairingHeap::&lt;(G::T, usize), Less, WeightAct&lt;G&gt;&gt;::default(),\n<span data-nosnippet>35</span>            |x, y| x.append(y),\n<span data-nosnippet>36</span>        );\n<span data-nosnippet>37</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">state = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()]; </a><span class=\"comment\">// 0: unprocessed, 1: in process, 2: completed\n<span data-nosnippet>38</span>        </span><a href=\"tools/scanner.rs.html#391\">state[root] = </a><span class=\"number\">2</span>;\n<span data-nosnippet>39</span>        <span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">(id, </a><span class=\"kw-2\">&amp;</span>(<span class=\"kw\">_</span><a href=\"tools/scanner.rs.html#391\">, to)) </a><span class=\"kw\">in </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges().enumerate() {\n<span data-nosnippet>40</span>            uf.</a><span class=\"highlight focus\">merge_data_mut</span><a href=\"tools/scanner.rs.html#391\">(to).push((weight(id), id));\n<span data-nosnippet>41</span>        }\n<span data-nosnippet>42</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">paredge = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()];\n<span data-nosnippet>43</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ord = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>44</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">leaf = </a><span class=\"macro\">vec!</span>[<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size(); </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()];\n<span data-nosnippet>45</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cycle = </a><span class=\"number\">0usize</span>;\n<span data-nosnippet>46</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">acc = G::unit();\n<span data-nosnippet>47</span>        </a><span class=\"kw\">for </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cur </a><span class=\"kw\">in </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices() {\n<span data-nosnippet>48</span>            </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">state[cur] != </a><span class=\"number\">0 </span>{\n<span data-nosnippet>49</span>                <span class=\"kw\">continue</span>;\n<span data-nosnippet>50</span>            }\n<span data-nosnippet>51</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">path = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>52</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ch = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>53</span>            <span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">state[cur] != </a><span class=\"number\">2 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>54</span>                path.push(cur);\n<span data-nosnippet>55</span>                state[cur] = </a><span class=\"number\">1</span>;\n<span data-nosnippet>56</span>                <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(w, eid) = {\n<span data-nosnippet>57</span>                    </a><span class=\"kw\">match </span><a href=\"tools/scanner.rs.html#391\">uf.</a><span class=\"highlight\">merge_data_mut</span><a href=\"tools/scanner.rs.html#391\">(cur).pop() {\n<span data-nosnippet>58</span>                        </a><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((w, eid)) =&gt; (w, eid),\n<span data-nosnippet>59</span>                        </a><span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span><a href=\"tools/scanner.rs.html#391\">,\n<span data-nosnippet>60</span>                    }\n<span data-nosnippet>61</span>                };\n<span data-nosnippet>62</span>                uf.</a><span class=\"highlight\">merge_data_mut</span><a href=\"tools/scanner.rs.html#391\">(cur).apply_all(G::inverse(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">w));\n<span data-nosnippet>63</span>                acc = G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">acc, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">w);\n<span data-nosnippet>64</span>                ord.push(eid);\n<span data-nosnippet>65</span>                </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(u, v) = </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">[eid];\n<span data-nosnippet>66</span>                </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">leaf[v] &gt;= </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size() {\n<span data-nosnippet>67</span>                    leaf[v] = eid;\n<span data-nosnippet>68</span>                }\n<span data-nosnippet>69</span>                </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">cycle &gt; </a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>70</span>                    paredge[ch.pop().unwrap()] = eid;\n<span data-nosnippet>71</span>                    cycle -= </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>72</span>                }\n<span data-nosnippet>73</span>                ch.push(eid);\n<span data-nosnippet>74</span>                </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">state[uf.find_root(u)] == </a><span class=\"number\">1 </span>{\n<span data-nosnippet>75</span>                    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(t) = path.pop() {\n<span data-nosnippet>76</span>                        state[t] = </a><span class=\"number\">2</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>77</span>                        cycle += </a><span class=\"number\">1</span>;\n<span data-nosnippet>78</span>                        <span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!uf.unite(u, t) {\n<span data-nosnippet>79</span>                            </a><span class=\"kw\">break</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>80</span>                        }\n<span data-nosnippet>81</span>                    }\n<span data-nosnippet>82</span>                    state[uf.find_root(u)] = </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>83</span>                }\n<span data-nosnippet>84</span>                cur = uf.find_root(u);\n<span data-nosnippet>85</span>            }\n<span data-nosnippet>86</span>            </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">u </a><span class=\"kw\">in </span><a href=\"tools/scanner.rs.html#391\">path.into_iter() {\n<span data-nosnippet>87</span>                state[u] = </a><span class=\"number\">2</span>;\n<span data-nosnippet>88</span>            }\n<span data-nosnippet>89</span>        }\n<span data-nosnippet>90</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">tree = </a><span class=\"macro\">vec!</span><a href=\"tools/scanner.rs.html#391\">[root; </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()];\n<span data-nosnippet>91</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">used = </a><span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()];\n<span data-nosnippet>92</span>        </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">eid </a><span class=\"kw\">in </span><a href=\"tools/scanner.rs.html#391\">ord.into_iter().rev() {\n<span data-nosnippet>93</span>            </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!used[eid] {\n<span data-nosnippet>94</span>                </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(u, v) = </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">[eid];\n<span data-nosnippet>95</span>                tree[v] = u;\n<span data-nosnippet>96</span>                </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">x = leaf[v];\n<span data-nosnippet>97</span>                </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">x != eid {\n<span data-nosnippet>98</span>                    used[x] = </a><span class=\"bool-val\">true</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>99</span>                    x = paredge[x];\n<span data-nosnippet>100</span>                }\n<span data-nosnippet>101</span>            }\n<span data-nosnippet>102</span>        }\n<span data-nosnippet>103</span>        </a><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((acc, tree))\n<span data-nosnippet>104</span>    }</a></code></pre></div></div></div></details><section id=\"method.roots\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#370-372\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.roots\" class=\"fn\">roots</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; + '_</h4></section><section id=\"method.all_group_members\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#374-381\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.all_group_members\" class=\"fn\">all_group_members</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#383-397\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.find\" class=\"fn\">find</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, P::<a class=\"associatedtype\" href=\"competitive/algebra/trait.Magma.html#associatedtype.T\" title=\"type competitive::algebra::Magma::T\">T</a>)</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-3\"><a href=\"#scraped-examples-3\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[2,2],&#34;src/competitive/data_structure/union_find.rs.html#385&#34;,&#34;line 385&#34;],[[36,36],&#34;src/competitive/data_structure/union_find.rs.html#419&#34;,&#34;line 419&#34;],[[64,64],&#34;src/competitive/data_structure/union_find.rs.html#447&#34;,&#34;line 447&#34;],[[65,65],&#34;src/competitive/data_structure/union_find.rs.html#448&#34;,&#34;line 448&#34;],[[74,74],&#34;src/competitive/data_structure/union_find.rs.html#457&#34;,&#34;line 457&#34;],[[75,75],&#34;src/competitive/data_structure/union_find.rs.html#458&#34;,&#34;line 458&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/union_find.rs (<a href=\"src/competitive/data_structure/union_find.rs.html#385\">line 385</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>383</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">find(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize) -&gt; (usize, P::T) {\n<span data-nosnippet>384</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(parent_parent, parent_potential) = </a><span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[x] {\n<span data-nosnippet>385</span>            UfCell::Child((parent, </a><span class=\"kw\">_</span>)) =&gt; <span class=\"self\">self</span>.<span class=\"highlight focus\">find</span>(<span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">parent),\n<span data-nosnippet>386</span>            UfCell::Root(</a><span class=\"kw\">_</span>) =&gt; <span class=\"kw\">return </span><a href=\"../tools/scanner.rs.html#391\">(x, P::unit()),\n<span data-nosnippet>387</span>        };\n<span data-nosnippet>388</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(parent, potential) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[x].child_mut().unwrap();\n<span data-nosnippet>389</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">potential = </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">F::CHENGE_ROOT {\n<span data-nosnippet>390</span>            </a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">parent = parent_parent;\n<span data-nosnippet>391</span>            </a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">potential = P::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">parent_potential, potential);\n<span data-nosnippet>392</span>            potential.clone()\n<span data-nosnippet>393</span>        } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>394</span>            P::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">parent_potential, potential)\n<span data-nosnippet>395</span>        };\n<span data-nosnippet>396</span>        (parent_parent, potential)\n<span data-nosnippet>397</span>    }\n<span data-nosnippet>398</span>\n<span data-nosnippet>399</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">find_root(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize) -&gt; usize {\n<span data-nosnippet>400</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(parent, parent_parent) = </a><span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[x] {\n<span data-nosnippet>401</span>            UfCell::Child((parent, </a><span class=\"kw\">_</span>)) =&gt; (<span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">parent, </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.find_root(</a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">parent)),\n<span data-nosnippet>402</span>            UfCell::Root(</a><span class=\"kw\">_</span>) =&gt; <span class=\"kw\">return </span><a href=\"../tools/scanner.rs.html#391\">x,\n<span data-nosnippet>403</span>        };\n<span data-nosnippet>404</span>        </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">F::CHENGE_ROOT {\n<span data-nosnippet>405</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(cx, cp) = {\n<span data-nosnippet>406</span>                </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ptr = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells.as_mut_ptr();\n<span data-nosnippet>407</span>                </a><span class=\"kw\">unsafe </span>{ (<span class=\"kw-2\">&amp;mut *</span><a href=\"../tools/scanner.rs.html#391\">ptr.add(x), </a><span class=\"kw-2\">&amp;*</span><a href=\"../tools/scanner.rs.html#391\">ptr.add(parent)) }\n<span data-nosnippet>408</span>            };\n<span data-nosnippet>409</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(parent, potential) = cx.child_mut().unwrap();\n<span data-nosnippet>410</span>            </a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">parent = parent_parent;\n<span data-nosnippet>411</span>            </a><span class=\"kw\">if let </span><a href=\"../tools/scanner.rs.html#391\">UfCell::Child((</a><span class=\"kw\">_</span><a href=\"../tools/scanner.rs.html#391\">, ppot)) = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">cp {\n<span data-nosnippet>412</span>                </a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">potential = P::operate(ppot, potential);\n<span data-nosnippet>413</span>            }\n<span data-nosnippet>414</span>        }\n<span data-nosnippet>415</span>        parent_parent\n<span data-nosnippet>416</span>    }\n<span data-nosnippet>417</span>\n<span data-nosnippet>418</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">unite_noninv(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize, y: usize, potential: P::T) -&gt; bool {\n<span data-nosnippet>419</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(rx, potx) = </a><span class=\"self\">self</span>.<span class=\"highlight\">find</span><a href=\"../tools/scanner.rs.html#391\">(x);\n<span data-nosnippet>420</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ry = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.find_root(y);\n<span data-nosnippet>421</span>        </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">rx == ry || y != ry {\n<span data-nosnippet>422</span>            </a><span class=\"kw\">return </span><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">;\n<span data-nosnippet>423</span>        }\n<span data-nosnippet>424</span>        H::unite(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.history, rx, ry, </a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells);\n<span data-nosnippet>425</span>        {\n<span data-nosnippet>426</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ptr = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells.as_mut_ptr();\n<span data-nosnippet>427</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(cx, cy) = </a><span class=\"kw\">unsafe </span>{ (<span class=\"kw-2\">&amp;mut *</span><a href=\"../tools/scanner.rs.html#391\">ptr.add(rx), </a><span class=\"kw-2\">&amp;mut *</span><a href=\"../tools/scanner.rs.html#391\">ptr.add(ry)) };\n<span data-nosnippet>428</span>            </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.merger\n<span data-nosnippet>429</span>                .merge(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">cx.root_mut().unwrap().</a><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">cy.root_mut().unwrap().</a><span class=\"number\">1</span>);\n<span data-nosnippet>430</span>        }\n<span data-nosnippet>431</span>        <span class=\"kw-2\">*</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root_info_mut(rx).unwrap() =\n<span data-nosnippet>432</span>            U::unite(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root_info(rx).unwrap(), </a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root_info(ry).unwrap());\n<span data-nosnippet>433</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[ry] = UfCell::Child((rx, P::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">potx, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">potential)));\n<span data-nosnippet>434</span>        </a><span class=\"bool-val\">true\n<span data-nosnippet>435</span>    </span>}\n<span data-nosnippet>436</span>}\n<span data-nosnippet>437</span>\n<span data-nosnippet>438</span><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;U, F, M, P, H&gt; UnionFindBase&lt;U, F, M, P, H&gt;\n<span data-nosnippet>439</span></a><span class=\"kw\">where\n<span data-nosnippet>440</span>    </span><a href=\"../tools/scanner.rs.html#391\">U: UnionStrategy,\n<span data-nosnippet>441</span>    F: FindStrategy,\n<span data-nosnippet>442</span>    M: UfMergeSpec,\n<span data-nosnippet>443</span>    P: Group,\n<span data-nosnippet>444</span>    H: UndoStrategy&lt;UfCell&lt;U, M, P&gt;&gt;,\n<span data-nosnippet>445</span>{\n<span data-nosnippet>446</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">difference(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize, y: usize) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;P::T&gt; {\n<span data-nosnippet>447</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(rx, potx) = </a><span class=\"self\">self</span>.<span class=\"highlight\">find</span><a href=\"../tools/scanner.rs.html#391\">(x);\n<span data-nosnippet>448</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(ry, poty) = </a><span class=\"self\">self</span>.<span class=\"highlight\">find</span><a href=\"../tools/scanner.rs.html#391\">(y);\n<span data-nosnippet>449</span>        </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">rx == ry {\n<span data-nosnippet>450</span>            </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(P::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">P::inverse(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">potx), </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">poty))\n<span data-nosnippet>451</span>        } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>452</span>            <span class=\"prelude-val\">None\n<span data-nosnippet>453</span>        </span>}\n<span data-nosnippet>454</span>    }\n<span data-nosnippet>455</span>\n<span data-nosnippet>456</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">unite_with(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize, y: usize, potential: P::T) -&gt; bool {\n<span data-nosnippet>457</span>        </a><span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">rx, potx) = </a><span class=\"self\">self</span>.<span class=\"highlight\">find</span><a href=\"../tools/scanner.rs.html#391\">(x);\n<span data-nosnippet>458</span>        </a><span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">ry, poty) = </a><span class=\"self\">self</span>.<span class=\"highlight\">find</span><a href=\"../tools/scanner.rs.html#391\">(y);\n<span data-nosnippet>459</span>        </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">rx == ry {\n<span data-nosnippet>460</span>            </a><span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n<span data-nosnippet>461</span>        }\n<span data-nosnippet>462</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">xinfo = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root_info(rx).unwrap();\n<span data-nosnippet>463</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">yinfo = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root_info(ry).unwrap();\n<span data-nosnippet>464</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">inverse = !U::check_directoin(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">xinfo, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">yinfo);\n<span data-nosnippet>465</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">potential = </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">inverse {\n<span data-nosnippet>466</span>            P::rinv_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">poty, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">P::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">potx, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">potential))\n<span data-nosnippet>467</span>        } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>468</span>            P::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">potx, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">P::rinv_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">potential, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">poty))\n<span data-nosnippet>469</span>        };\n<span data-nosnippet>470</span>        </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">inverse {\n<span data-nosnippet>471</span>            swap(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">rx, </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">ry);\n<span data-nosnippet>472</span>            swap(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">xinfo, </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">yinfo);\n<span data-nosnippet>473</span>        }\n<span data-nosnippet>474</span>        H::unite(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.history, rx, ry, </a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells);\n<span data-nosnippet>475</span>        {\n<span data-nosnippet>476</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ptr = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells.as_mut_ptr();\n<span data-nosnippet>477</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(cx, cy) = </a><span class=\"kw\">unsafe </span>{ (<span class=\"kw-2\">&amp;mut *</span><a href=\"../tools/scanner.rs.html#391\">ptr.add(rx), </a><span class=\"kw-2\">&amp;mut *</span><a href=\"../tools/scanner.rs.html#391\">ptr.add(ry)) };\n<span data-nosnippet>478</span>            </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.merger\n<span data-nosnippet>479</span>                .merge(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">cx.root_mut().unwrap().</a><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">cy.root_mut().unwrap().</a><span class=\"number\">1</span>);\n<span data-nosnippet>480</span>        }\n<span data-nosnippet>481</span>        <span class=\"kw-2\">*</span><a class=\"self\" href=\"../num/zero_one.rs.html#1-14\">self</a><a href=\"../tools/scanner.rs.html#391\">.root_info_mut(rx).unwrap() = U::unite(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">xinfo, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">yinfo);\n<span data-nosnippet>482</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[ry] = UfCell::Child((rx, potential));\n<span data-nosnippet>483</span>        </a><span class=\"bool-val\">true\n<span data-nosnippet>484</span>    </span>}</code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_root\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#399-416\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.find_root\" class=\"fn\">find_root</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-4\"><a href=\"#scraped-examples-4\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/data_structure/union_find.rs.html#323&#34;,&#34;line 323&#34;],[[29,29],&#34;src/competitive/data_structure/union_find.rs.html#351&#34;,&#34;line 351&#34;],[[29,29],&#34;src/competitive/data_structure/union_find.rs.html#351&#34;,&#34;line 351&#34;],[[33,33],&#34;src/competitive/data_structure/union_find.rs.html#355&#34;,&#34;line 355&#34;],[[41,41],&#34;src/competitive/data_structure/union_find.rs.html#363&#34;,&#34;line 363&#34;],[[55,55],&#34;src/competitive/data_structure/union_find.rs.html#377&#34;,&#34;line 377&#34;],[[79,79],&#34;src/competitive/data_structure/union_find.rs.html#401&#34;,&#34;line 401&#34;],[[98,98],&#34;src/competitive/data_structure/union_find.rs.html#420&#34;,&#34;line 420&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/union_find.rs (<a href=\"src/competitive/data_structure/union_find.rs.html#323\">line 323</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>322</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">size(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize) -&gt; &lt;UnionBySize </a><span class=\"kw\">as </span><a href=\"../tools/scanner.rs.html#391\">UnionStrategy&gt;::Info {\n<span data-nosnippet>323</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">root = </a><span class=\"self\">self</span>.<span class=\"highlight focus\">find_root</span><a href=\"../tools/scanner.rs.html#391\">(x);\n<span data-nosnippet>324</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root_info(root).unwrap()\n<span data-nosnippet>325</span>    }\n<span data-nosnippet>326</span>}\n<span data-nosnippet>327</span>\n<span data-nosnippet>328</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;U, F, M, P, <a href=\"#126\">H</a>&gt; UnionFindBase&lt;U, F, M, P, H&gt;\n<span data-nosnippet>329</span></a><span class=\"kw\">where\n<span data-nosnippet>330</span>    </span><a href=\"../tools/scanner.rs.html#391\">U: UnionStrategy,\n<span data-nosnippet>331</span>    F: FindStrategy,\n<span data-nosnippet>332</span>    M: UfMergeSpec,\n<span data-nosnippet>333</span>    P: Monoid,\n<span data-nosnippet>334</span>    H: UndoStrategy&lt;UfCell&lt;U, M, P&gt;&gt;,\n<span data-nosnippet>335</span>{\n<span data-nosnippet>336</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">root_info(</a><span class=\"kw-2\">&amp;mut </span><a class=\"self\" href=\"../num/zero_one.rs.html#1-14\">self</a><a href=\"../tools/scanner.rs.html#391\">, x: usize) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;U::Info&gt; {\n<span data-nosnippet>337</span>        </a><span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[x] {\n<span data-nosnippet>338</span>            UfCell::Root((info, </a><span class=\"kw\">_</span>)) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(info.clone()),\n<span data-nosnippet>339</span>            UfCell::Child(</a><span class=\"kw\">_</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>340</span>        }\n<span data-nosnippet>341</span>    }\n<span data-nosnippet>342</span>\n<span data-nosnippet>343</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">root_info_mut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize) -&gt; </a><span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">U::Info&gt; {\n<span data-nosnippet>344</span>        </a><span class=\"kw\">match </span><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[x] {\n<span data-nosnippet>345</span>            UfCell::Root((info, </a><span class=\"kw\">_</span>)) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(info),\n<span data-nosnippet>346</span>            UfCell::Child(</a><span class=\"kw\">_</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>347</span>        }\n<span data-nosnippet>348</span>    }\n<span data-nosnippet>349</span>\n<span data-nosnippet>350</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">same(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize, y: usize) -&gt; bool {\n<span data-nosnippet>351</span>        </a><span class=\"self\">self</span>.<span class=\"highlight\">find_root</span><a href=\"../tools/scanner.rs.html#391\">(x) == </a><span class=\"self\">self</span>.<span class=\"highlight\">find_root</span><a href=\"../tools/scanner.rs.html#391\">(y)\n<span data-nosnippet>352</span>    }\n<span data-nosnippet>353</span>\n<span data-nosnippet>354</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">merge_data(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize) -&gt; </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">M::Data {\n<span data-nosnippet>355</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">root = </a><span class=\"self\">self</span>.<span class=\"highlight\">find_root</span><a href=\"../tools/scanner.rs.html#391\">(x);\n<span data-nosnippet>356</span>        </a><span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[root] {\n<span data-nosnippet>357</span>            UfCell::Root((</a><span class=\"kw\">_</span><a href=\"../tools/scanner.rs.html#391\">, data)) =&gt; data,\n<span data-nosnippet>358</span>            UfCell::Child(</a><span class=\"kw\">_</span>) =&gt; <span class=\"macro\">unreachable!</span>(),\n<span data-nosnippet>359</span>        }\n<span data-nosnippet>360</span>    }\n<span data-nosnippet>361</span>\n<span data-nosnippet>362</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">merge_data_mut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize) -&gt; </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">M::Data {\n<span data-nosnippet>363</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">root = </a><span class=\"self\">self</span>.<span class=\"highlight\">find_root</span><a href=\"../tools/scanner.rs.html#391\">(x);\n<span data-nosnippet>364</span>        </a><span class=\"kw\">match </span><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[root] {\n<span data-nosnippet>365</span>            UfCell::Root((</a><span class=\"kw\">_</span><a href=\"../tools/scanner.rs.html#391\">, data)) =&gt; data,\n<span data-nosnippet>366</span>            <a href=\"operations.rs.html#122-127\">UfCell::Child</a>(</a><span class=\"kw\">_</span>) =&gt; <span class=\"macro\">unreachable!</span>(),\n<span data-nosnippet>367</span>        }\n<span data-nosnippet>368</span>    }\n<span data-nosnippet>369</span>\n<span data-nosnippet>370</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">roots(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw\">impl </span><a href=\"../tools/scanner.rs.html#391\">Iterator&lt;Item = usize&gt; + </a><span class=\"lifetime\">'_ </span>{\n<span data-nosnippet>371</span>        (<span class=\"number\">0</span>..<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells.len()).filter(|</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">x| </a><span class=\"macro\">matches!</span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[x], UfCell::Root(</a><span class=\"kw\">_</span>)))\n<span data-nosnippet>372</span>    }\n<span data-nosnippet>373</span>\n<span data-nosnippet>374</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">all_group_members(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; HashMap&lt;usize, Vec&lt;usize&gt;&gt; {\n<span data-nosnippet>375</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">groups_map = HashMap::new();\n<span data-nosnippet>376</span>        </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">x </a><span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells.len() {\n<span data-nosnippet>377</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">r = </a><span class=\"self\">self</span>.<span class=\"highlight\">find_root</span><a href=\"../tools/scanner.rs.html#391\">(x);\n<span data-nosnippet>378</span>            groups_map.entry(r).or_insert_with(Vec::new).push(x);\n<span data-nosnippet>379</span>        }\n<span data-nosnippet>380</span>        groups_map\n<span data-nosnippet>381</span>    }\n<span data-nosnippet>382</span>\n<span data-nosnippet>383</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">find(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize) -&gt; (usize, P::T) {\n<span data-nosnippet>384</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(parent_parent, parent_potential) = </a><span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[x] {\n<span data-nosnippet>385</span>            UfCell::Child((parent, </a><span class=\"kw\">_</span>)) =&gt; <span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.find(</a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">parent),\n<span data-nosnippet>386</span>            UfCell::Root(</a><span class=\"kw\">_</span>) =&gt; <span class=\"kw\">return </span><a href=\"../tools/scanner.rs.html#391\">(x, P::unit()),\n<span data-nosnippet>387</span>        };\n<span data-nosnippet>388</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(parent, potential) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[x].child_mut().unwrap();\n<span data-nosnippet>389</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">potential = </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">F::CHENGE_ROOT {\n<span data-nosnippet>390</span>            </a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">parent = parent_parent;\n<span data-nosnippet>391</span>            </a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">potential = P::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">parent_potential, potential);\n<span data-nosnippet>392</span>            potential.clone()\n<span data-nosnippet>393</span>        } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>394</span>            P::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">parent_potential, potential)\n<span data-nosnippet>395</span>        };\n<span data-nosnippet>396</span>        (parent_parent, potential)\n<span data-nosnippet>397</span>    }\n<span data-nosnippet>398</span>\n<span data-nosnippet>399</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">find_root(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize) -&gt; usize {\n<span data-nosnippet>400</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(parent, parent_parent) = </a><span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[x] {\n<span data-nosnippet>401</span>            UfCell::Child((parent, </a><span class=\"kw\">_</span>)) =&gt; (<span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">parent, </a><span class=\"self\">self</span>.<span class=\"highlight\">find_root</span>(<span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">parent)),\n<span data-nosnippet>402</span>            UfCell::Root(</a><span class=\"kw\">_</span>) =&gt; <span class=\"kw\">return </span><a href=\"../tools/scanner.rs.html#391\">x,\n<span data-nosnippet>403</span>        };\n<span data-nosnippet>404</span>        </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">F::CHENGE_ROOT {\n<span data-nosnippet>405</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(cx, cp) = {\n<span data-nosnippet>406</span>                </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ptr = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells.as_mut_ptr();\n<span data-nosnippet>407</span>                </a><span class=\"kw\">unsafe </span>{ (<span class=\"kw-2\">&amp;mut *</span><a href=\"../tools/scanner.rs.html#391\">ptr.add(x), </a><span class=\"kw-2\">&amp;*</span><a href=\"../tools/scanner.rs.html#391\">ptr.add(parent)) }\n<span data-nosnippet>408</span>            };\n<span data-nosnippet>409</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(parent, potential) = cx.child_mut().unwrap();\n<span data-nosnippet>410</span>            </a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">parent = parent_parent;\n<span data-nosnippet>411</span>            </a><span class=\"kw\">if let </span><a href=\"../tools/scanner.rs.html#391\">UfCell::Child((</a><span class=\"kw\">_</span><a href=\"../tools/scanner.rs.html#391\">, ppot)) = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">cp {\n<span data-nosnippet>412</span>                </a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">potential = P::operate(ppot, potential);\n<span data-nosnippet>413</span>            }\n<span data-nosnippet>414</span>        }\n<span data-nosnippet>415</span>        parent_parent\n<span data-nosnippet>416</span>    }\n<span data-nosnippet>417</span>\n<span data-nosnippet>418</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">unite_noninv(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize, y: usize, potential: P::T) -&gt; bool {\n<span data-nosnippet>419</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(rx, potx) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.find(x);\n<span data-nosnippet>420</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ry = </a><span class=\"self\">self</span>.<span class=\"highlight\">find_root</span><a href=\"../tools/scanner.rs.html#391\">(y);\n<span data-nosnippet>421</span>        </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">rx == ry || y != ry {\n<span data-nosnippet>422</span>            </a><span class=\"kw\">return </span><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">;\n<span data-nosnippet>423</span>        }\n<span data-nosnippet>424</span>        H::unite(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.history, rx, ry, </a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells);\n<span data-nosnippet>425</span>        {\n<span data-nosnippet>426</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ptr = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells.as_mut_ptr();\n<span data-nosnippet>427</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(cx, cy) = </a><span class=\"kw\">unsafe </span>{ (<span class=\"kw-2\">&amp;mut *</span><a href=\"../tools/scanner.rs.html#391\">ptr.add(rx), </a><span class=\"kw-2\">&amp;mut *</span><a href=\"../tools/scanner.rs.html#391\">ptr.add(ry)) };\n<span data-nosnippet>428</span>            </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.merger\n<span data-nosnippet>429</span>                .merge(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">cx.root_mut().unwrap().</a><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">cy.root_mut().unwrap().</a><span class=\"number\">1</span>);\n<span data-nosnippet>430</span>        }\n<span data-nosnippet>431</span>        <span class=\"kw-2\">*</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root_info_mut(rx).unwrap() =\n<span data-nosnippet>432</span>            U::unite(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root_info(rx).unwrap(), </a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root_info(ry).unwrap());\n<span data-nosnippet>433</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.cells[ry] = UfCell::Child((rx, P::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">potx, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">potential)));\n<span data-nosnippet>434</span>        </a><span class=\"bool-val\">true\n<span data-nosnippet>435</span>    </span>}</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[25,25],&#34;src/competitive/algorithm/solve_01_on_tree.rs.html#67&#34;,&#34;line 67&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/algorithm/solve_01_on_tree.rs (<a href=\"src/competitive/algorithm/solve_01_on_tree.rs.html#67\">line 67</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>42</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">solve_01_on_tree(\n<span data-nosnippet>43</span>    n: usize,\n<span data-nosnippet>44</span>    c01: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(usize) -&gt; (usize, usize),\n<span data-nosnippet>45</span>    root: usize,\n<span data-nosnippet>46</span>    parent: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(usize) -&gt; usize,\n<span data-nosnippet>47</span>) -&gt; (usize, Vec&lt;usize&gt;) {\n<span data-nosnippet>48</span>    </a><span class=\"kw\">pub type </span><a href=\"tools/scanner.rs.html#391\">UF&lt;T, M&gt; =\n<span data-nosnippet>49</span>        UnionFindBase&lt;(), union_find::PathCompression, union_find::FnMerger&lt;T, M&gt;, (), ()&gt;;\n<span data-nosnippet>50</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cost = </a><span class=\"number\">0usize</span>;\n<span data-nosnippet>51</span>    <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">c01 = |u| {\n<span data-nosnippet>52</span>        </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">c = c01(u);\n<span data-nosnippet>53</span>        Count01::new(c.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, c.</a><span class=\"number\">1</span>)\n<span data-nosnippet>54</span>    };\n<span data-nosnippet>55</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = UF::new_with_merger(n, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">c01, |x, y| {\n<span data-nosnippet>56</span>        cost += x.cnt1 * y.cnt0;\n<span data-nosnippet>57</span>        </a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">x += </a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">y;\n<span data-nosnippet>58</span>    });\n<span data-nosnippet>59</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">label = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">; n];\n<span data-nosnippet>60</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">heap = BinaryHeap::from_iter((</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..n).filter(|</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">u| u != root).map(|u| (c01(u), u, </a><span class=\"number\">0</span>)));\n<span data-nosnippet>61</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">next: Vec&lt;</a><span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..n).collect();\n<span data-nosnippet>62</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ord = Vec::with_capacity(n);\n<span data-nosnippet>63</span>    </a><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((_c, u, l)) = heap.pop() {\n<span data-nosnippet>64</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">label[u] != l {\n<span data-nosnippet>65</span>            </a><span class=\"kw\">continue</span>;\n<span data-nosnippet>66</span>        }\n<span data-nosnippet>67</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">p = uf.</a><span class=\"highlight focus\">find_root</span><a href=\"tools/scanner.rs.html#391\">(parent(u));\n<span data-nosnippet>68</span>        uf.unite(u, p);\n<span data-nosnippet>69</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!uf.same(p, root) {\n<span data-nosnippet>70</span>            label[p] += </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>71</span>            heap.push((</a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">uf.merge_data(p), p, label[p]));\n<span data-nosnippet>72</span>        }\n<span data-nosnippet>73</span>        next.swap(u, p);\n<span data-nosnippet>74</span>    }\n<span data-nosnippet>75</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">u = next[root];\n<span data-nosnippet>76</span>    ord.push(u);\n<span data-nosnippet>77</span>    </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">u != root {\n<span data-nosnippet>78</span>        u = next[u];\n<span data-nosnippet>79</span>        ord.push(u);\n<span data-nosnippet>80</span>    }\n<span data-nosnippet>81</span>    ord.reverse();\n<span data-nosnippet>82</span>    (cost, ord)\n<span data-nosnippet>83</span>}</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[69,69],&#34;src/competitive/graph/minimum_spanning_arborescence.rs.html#74&#34;,&#34;line 74&#34;],[[77,77],&#34;src/competitive/graph/minimum_spanning_arborescence.rs.html#82&#34;,&#34;line 82&#34;],[[79,79],&#34;src/competitive/graph/minimum_spanning_arborescence.rs.html#84&#34;,&#34;line 84&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_spanning_arborescence.rs (<a href=\"src/competitive/graph/minimum_spanning_arborescence.rs.html#74\">line 74</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>5</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">minimum_spanning_arborescence&lt;G, F&gt;(\n<span data-nosnippet>6</span>        </a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">,\n<span data-nosnippet>7</span>        root: usize,\n<span data-nosnippet>8</span>        weight: F,\n<span data-nosnippet>9</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;(G::T, Vec&lt;usize&gt;)&gt;\n<span data-nosnippet>10</span>    </a><span class=\"kw\">where\n<span data-nosnippet>11</span>        </span><a href=\"tools/scanner.rs.html#391\">G: Group,\n<span data-nosnippet>12</span>        G::T: Ord,\n<span data-nosnippet>13</span>        F: Fn(usize) -&gt; G::T,\n<span data-nosnippet>14</span>    {\n<span data-nosnippet>15</span>        </a><span class=\"kw\">struct </span><a href=\"tools/scanner.rs.html#391\">WeightAct&lt;G&gt;(std::marker::PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"tools/scanner.rs.html#391\">() -&gt; G&gt;);\n<span data-nosnippet>16</span>        </a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;G&gt; MonoidAct </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">WeightAct&lt;G&gt;\n<span data-nosnippet>17</span>        </a><span class=\"kw\">where\n<span data-nosnippet>18</span>            </span><a href=\"tools/scanner.rs.html#391\">G: Group,\n<span data-nosnippet>19</span>        {\n<span data-nosnippet>20</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Key = (G::T, usize);\n<span data-nosnippet>21</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Act = G::T;\n<span data-nosnippet>22</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">ActMonoid = G;\n<span data-nosnippet>23</span>\n<span data-nosnippet>24</span>            </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">act(x: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Key, a: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Act) -&gt; <span class=\"self\">Self</span>::Key {\n<span data-nosnippet>25</span>                (G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">x.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, a), x.</a><span class=\"number\">1</span>)\n<span data-nosnippet>26</span>            }\n<span data-nosnippet>27</span>\n<span data-nosnippet>28</span>            <span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">act_assign(x: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Key, a: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Act) {\n<span data-nosnippet>29</span>                x.</a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">= G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">x.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, a);\n<span data-nosnippet>30</span>            }\n<span data-nosnippet>31</span>        }\n<span data-nosnippet>32</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = MergingUnionFind::new_with_merger(\n<span data-nosnippet>33</span>            </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size(),\n<span data-nosnippet>34</span>            |</a><span class=\"kw\">_</span><a href=\"tools/scanner.rs.html#391\">| PairingHeap::&lt;(G::T, usize), Less, WeightAct&lt;G&gt;&gt;::default(),\n<span data-nosnippet>35</span>            |x, y| x.append(y),\n<span data-nosnippet>36</span>        );\n<span data-nosnippet>37</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">state = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()]; </a><span class=\"comment\">// 0: unprocessed, 1: in process, 2: completed\n<span data-nosnippet>38</span>        </span><a href=\"tools/scanner.rs.html#391\">state[root] = </a><span class=\"number\">2</span>;\n<span data-nosnippet>39</span>        <span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">(id, </a><span class=\"kw-2\">&amp;</span>(<span class=\"kw\">_</span><a href=\"tools/scanner.rs.html#391\">, to)) </a><span class=\"kw\">in </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges().enumerate() {\n<span data-nosnippet>40</span>            uf.merge_data_mut(to).push((weight(id), id));\n<span data-nosnippet>41</span>        }\n<span data-nosnippet>42</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">paredge = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()];\n<span data-nosnippet>43</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ord = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>44</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">leaf = </a><span class=\"macro\">vec!</span>[<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size(); </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()];\n<span data-nosnippet>45</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cycle = </a><span class=\"number\">0usize</span>;\n<span data-nosnippet>46</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">acc = G::unit();\n<span data-nosnippet>47</span>        </a><span class=\"kw\">for </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cur </a><span class=\"kw\">in </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices() {\n<span data-nosnippet>48</span>            </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">state[cur] != </a><span class=\"number\">0 </span>{\n<span data-nosnippet>49</span>                <span class=\"kw\">continue</span>;\n<span data-nosnippet>50</span>            }\n<span data-nosnippet>51</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">path = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>52</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ch = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>53</span>            <span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">state[cur] != </a><span class=\"number\">2 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>54</span>                path.push(cur);\n<span data-nosnippet>55</span>                state[cur] = </a><span class=\"number\">1</span>;\n<span data-nosnippet>56</span>                <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(w, eid) = {\n<span data-nosnippet>57</span>                    </a><span class=\"kw\">match </span><a href=\"tools/scanner.rs.html#391\">uf.merge_data_mut(cur).pop() {\n<span data-nosnippet>58</span>                        </a><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((w, eid)) =&gt; (w, eid),\n<span data-nosnippet>59</span>                        </a><span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span><a href=\"tools/scanner.rs.html#391\">,\n<span data-nosnippet>60</span>                    }\n<span data-nosnippet>61</span>                };\n<span data-nosnippet>62</span>                uf.merge_data_mut(cur).apply_all(G::inverse(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">w));\n<span data-nosnippet>63</span>                acc = G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">acc, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">w);\n<span data-nosnippet>64</span>                ord.push(eid);\n<span data-nosnippet>65</span>                </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(u, v) = </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">[eid];\n<span data-nosnippet>66</span>                </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">leaf[v] &gt;= </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size() {\n<span data-nosnippet>67</span>                    leaf[v] = eid;\n<span data-nosnippet>68</span>                }\n<span data-nosnippet>69</span>                </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">cycle &gt; </a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>70</span>                    paredge[ch.pop().unwrap()] = eid;\n<span data-nosnippet>71</span>                    cycle -= </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>72</span>                }\n<span data-nosnippet>73</span>                ch.push(eid);\n<span data-nosnippet>74</span>                </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">state[uf.</a><span class=\"highlight focus\">find_root</span><a href=\"tools/scanner.rs.html#391\">(u)] == </a><span class=\"number\">1 </span>{\n<span data-nosnippet>75</span>                    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(t) = path.pop() {\n<span data-nosnippet>76</span>                        state[t] = </a><span class=\"number\">2</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>77</span>                        cycle += </a><span class=\"number\">1</span>;\n<span data-nosnippet>78</span>                        <span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!uf.unite(u, t) {\n<span data-nosnippet>79</span>                            </a><span class=\"kw\">break</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>80</span>                        }\n<span data-nosnippet>81</span>                    }\n<span data-nosnippet>82</span>                    state[uf.</a><span class=\"highlight\">find_root</span><a href=\"tools/scanner.rs.html#391\">(u)] = </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>83</span>                }\n<span data-nosnippet>84</span>                cur = uf.</a><span class=\"highlight\">find_root</span><a href=\"tools/scanner.rs.html#391\">(u);\n<span data-nosnippet>85</span>            }\n<span data-nosnippet>86</span>            </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">u </a><span class=\"kw\">in </span><a href=\"tools/scanner.rs.html#391\">path.into_iter() {\n<span data-nosnippet>87</span>                state[u] = </a><span class=\"number\">2</span>;\n<span data-nosnippet>88</span>            }\n<span data-nosnippet>89</span>        }\n<span data-nosnippet>90</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">tree = </a><span class=\"macro\">vec!</span><a href=\"tools/scanner.rs.html#391\">[root; </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()];\n<span data-nosnippet>91</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">used = </a><span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()];\n<span data-nosnippet>92</span>        </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">eid </a><span class=\"kw\">in </span><a href=\"tools/scanner.rs.html#391\">ord.into_iter().rev() {\n<span data-nosnippet>93</span>            </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!used[eid] {\n<span data-nosnippet>94</span>                </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(u, v) = </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">[eid];\n<span data-nosnippet>95</span>                tree[v] = u;\n<span data-nosnippet>96</span>                </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">x = leaf[v];\n<span data-nosnippet>97</span>                </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">x != eid {\n<span data-nosnippet>98</span>                    used[x] = </a><span class=\"bool-val\">true</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>99</span>                    x = paredge[x];\n<span data-nosnippet>100</span>                }\n<span data-nosnippet>101</span>            }\n<span data-nosnippet>102</span>        }\n<span data-nosnippet>103</span>        </a><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((acc, tree))\n<span data-nosnippet>104</span>    }</a></code></pre></div></div></div></details></div></details><section id=\"method.unite_noninv\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#418-435\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.unite_noninv\" class=\"fn\">unite_noninv</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, potential: P::<a class=\"associatedtype\" href=\"competitive/algebra/trait.Magma.html#associatedtype.T\" title=\"type competitive::algebra::Magma::T\">T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></div></details>",0,"competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::MergingUnionFind","competitive::data_structure::union_find::PotentializedUnionFind","competitive::data_structure::union_find::UndoableUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnionFindBase%3CU,+F,+M,+P,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#438-489\">Source</a><a href=\"#impl-UnionFindBase%3CU,+F,+M,+P,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;U, F, M, P, H&gt; <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, M, P, H&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    M: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html\" title=\"trait competitive::data_structure::union_find::UfMergeSpec\">UfMergeSpec</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Group.html\" title=\"trait competitive::algebra::Group\">Group</a>,\n    H: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UndoStrategy.html\" title=\"trait competitive::data_structure::union_find::UndoStrategy\">UndoStrategy</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UfCell.html\" title=\"enum competitive::data_structure::union_find::UfCell\">UfCell</a>&lt;U, M, P&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#446-454\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.difference\" class=\"fn\">difference</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;P::<a class=\"associatedtype\" href=\"competitive/algebra/trait.Magma.html#associatedtype.T\" title=\"type competitive::algebra::Magma::T\">T</a>&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[10,10],&#34;src/aizu_online_judge/dsl/dsl_1_b.rs.html#16&#34;,&#34;line 16&#34;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_b.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_b.rs.html#16\">line 16</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">dsl_1_b(reader: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Read, </a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">writer: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Write) {\n<span data-nosnippet>7</span>    </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">scanner = Scanner::new(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">s);\n<span data-nosnippet>9</span>    </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, n, q);\n<span data-nosnippet>10</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = PotentializedUnionFind::&lt;AdditiveOperation&lt;</a><span class=\"kw\">_</span><a href=\"tools/scanner.rs.html#391\">&gt;&gt;::new(n);\n<span data-nosnippet>11</span>    </a><span class=\"kw\">for _ in </span><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..q {\n<span data-nosnippet>12</span>        </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, ty, x, y);\n<span data-nosnippet>13</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">ty == </a><span class=\"number\">0 </span>{\n<span data-nosnippet>14</span>            <span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, w: i64);\n<span data-nosnippet>15</span>            uf.unite_with(x, y, w);\n<span data-nosnippet>16</span>        } </a><span class=\"kw\">else if let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(w) = uf.</a><span class=\"highlight focus\">difference</span><a href=\"tools/scanner.rs.html#391\">(x, y) {\n<span data-nosnippet>17</span>            </a><span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"{}\"</span><a href=\"tools/scanner.rs.html#391\">, w).ok();\n<span data-nosnippet>18</span>        } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>19</span>            <span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"?\"</span><a href=\"tools/scanner.rs.html#391\">).ok();\n<span data-nosnippet>20</span>        }\n<span data-nosnippet>21</span>    }\n<span data-nosnippet>22</span>}</a></code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unite_with\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#456-484\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.unite_with\" class=\"fn\">unite_with</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, potential: P::<a class=\"associatedtype\" href=\"competitive/algebra/trait.Magma.html#associatedtype.T\" title=\"type competitive::algebra::Magma::T\">T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&#34;src/competitive/data_structure/union_find.rs.html#487&#34;,&#34;line 487&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/union_find.rs (<a href=\"src/competitive/data_structure/union_find.rs.html#487\">line 487</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>486</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">unite(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, x: usize, y: usize) -&gt; bool {\n<span data-nosnippet>487</span>        </a><span class=\"self\">self</span>.<span class=\"highlight focus\">unite_with</span><a href=\"../tools/scanner.rs.html#391\">(x, y, P::unit())\n<span data-nosnippet>488</span>    }</a></code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[9,9],&#34;src/aizu_online_judge/dsl/dsl_1_b.rs.html#15&#34;,&#34;line 15&#34;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_b.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_b.rs.html#15\">line 15</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">dsl_1_b(reader: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Read, </a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">writer: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Write) {\n<span data-nosnippet>7</span>    </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">scanner = Scanner::new(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">s);\n<span data-nosnippet>9</span>    </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, n, q);\n<span data-nosnippet>10</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = PotentializedUnionFind::&lt;AdditiveOperation&lt;</a><span class=\"kw\">_</span><a href=\"tools/scanner.rs.html#391\">&gt;&gt;::new(n);\n<span data-nosnippet>11</span>    </a><span class=\"kw\">for _ in </span><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..q {\n<span data-nosnippet>12</span>        </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, ty, x, y);\n<span data-nosnippet>13</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">ty == </a><span class=\"number\">0 </span>{\n<span data-nosnippet>14</span>            <span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, w: i64);\n<span data-nosnippet>15</span>            uf.</a><span class=\"highlight focus\">unite_with</span><a href=\"tools/scanner.rs.html#391\">(x, y, w);\n<span data-nosnippet>16</span>        } </a><span class=\"kw\">else if let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(w) = uf.difference(x, y) {\n<span data-nosnippet>17</span>            </a><span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"{}\"</span><a href=\"tools/scanner.rs.html#391\">, w).ok();\n<span data-nosnippet>18</span>        } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>19</span>            <span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"?\"</span><a href=\"tools/scanner.rs.html#391\">).ok();\n<span data-nosnippet>20</span>        }\n<span data-nosnippet>21</span>    }\n<span data-nosnippet>22</span>}</a></code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unite\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#486-488\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.unite\" class=\"fn\">unite</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[8,8],&#34;src/aizu_online_judge/dsl/dsl_1_a.rs.html#14&#34;,&#34;line 14&#34;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_a.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_a.rs.html#14\">line 14</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">dsl_1_a(reader: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Read, </a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">writer: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Write) {\n<span data-nosnippet>7</span>    </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">scanner = Scanner::new(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">s);\n<span data-nosnippet>9</span>    </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, n, q);\n<span data-nosnippet>10</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = UnionFind::new(n);\n<span data-nosnippet>11</span>    </a><span class=\"kw\">for _ in </span><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..q {\n<span data-nosnippet>12</span>        </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, ty, x, y);\n<span data-nosnippet>13</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">ty == </a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>14</span>            uf.</a><span class=\"highlight focus\">unite</span><a href=\"tools/scanner.rs.html#391\">(x, y);\n<span data-nosnippet>15</span>        } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>16</span>            <span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"{}\"</span><a href=\"tools/scanner.rs.html#391\">, (uf.same(x, y) </a><span class=\"kw\">as </span><a href=\"tools/scanner.rs.html#391\">usize)).ok();\n<span data-nosnippet>17</span>        }\n<span data-nosnippet>18</span>    }\n<span data-nosnippet>19</span>}</a></code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[8,8],&#34;src/library_checker/data_structure/unionfind.rs.html#14&#34;,&#34;line 14&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/data_structure/unionfind.rs (<a href=\"src/library_checker/data_structure/unionfind.rs.html#14\">line 14</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">unionfind(reader: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Read, </a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">writer: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Write) {\n<span data-nosnippet>7</span>    </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">scanner = Scanner::new(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">s);\n<span data-nosnippet>9</span>    </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, n, q);\n<span data-nosnippet>10</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = UnionFind::new(n);\n<span data-nosnippet>11</span>    </a><span class=\"kw\">for _ in </span><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..q {\n<span data-nosnippet>12</span>        </a><span class=\"macro\">scan!</span><a href=\"tools/scanner.rs.html#391\">(scanner, ty, u, v);\n<span data-nosnippet>13</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">ty == </a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>14</span>            uf.</a><span class=\"highlight focus\">unite</span><a href=\"tools/scanner.rs.html#391\">(u, v);\n<span data-nosnippet>15</span>        } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>16</span>            <span class=\"macro\">writeln!</span><a href=\"tools/scanner.rs.html#391\">(writer, </a><span class=\"string\">\"{}\"</span><a href=\"tools/scanner.rs.html#391\">, uf.same(u, v) </a><span class=\"kw\">as </span><a href=\"tools/scanner.rs.html#391\">usize).ok();\n<span data-nosnippet>17</span>        }\n<span data-nosnippet>18</span>    }\n<span data-nosnippet>19</span>}</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[10,10],&#34;src/competitive/graph/minimum_spanning_tree.rs.html#14&#34;,&#34;line 14&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_spanning_tree.rs (<a href=\"src/competitive/graph/minimum_spanning_tree.rs.html#14\">line 14</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>4</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">minimum_spanning_tree&lt;T&gt;(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, weight: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">usize) -&gt; T) -&gt; Vec&lt;bool&gt;\n<span data-nosnippet>5</span>    </a><span class=\"kw\">where\n<span data-nosnippet>6</span>        </span><a href=\"tools/scanner.rs.html#391\">T: Ord,\n<span data-nosnippet>7</span>    {\n<span data-nosnippet>8</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">idx: Vec&lt;</a><span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span>..<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()).collect();\n<span data-nosnippet>9</span>        idx.sort_by_key(weight);\n<span data-nosnippet>10</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = UnionFind::new(</a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size());\n<span data-nosnippet>11</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">res = </a><span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()];\n<span data-nosnippet>12</span>        </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">eid </a><span class=\"kw\">in </span><a href=\"tools/scanner.rs.html#391\">idx.into_iter() {\n<span data-nosnippet>13</span>            </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(u, v) = </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">[eid];\n<span data-nosnippet>14</span>            res[eid] = uf.</a><span class=\"highlight focus\">unite</span><a href=\"tools/scanner.rs.html#391\">(u, v);\n<span data-nosnippet>15</span>        }\n<span data-nosnippet>16</span>        res\n<span data-nosnippet>17</span>    }</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[26,26],&#34;src/competitive/algorithm/solve_01_on_tree.rs.html#68&#34;,&#34;line 68&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/algorithm/solve_01_on_tree.rs (<a href=\"src/competitive/algorithm/solve_01_on_tree.rs.html#68\">line 68</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>42</span><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">solve_01_on_tree(\n<span data-nosnippet>43</span>    n: usize,\n<span data-nosnippet>44</span>    c01: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(usize) -&gt; (usize, usize),\n<span data-nosnippet>45</span>    root: usize,\n<span data-nosnippet>46</span>    parent: </a><span class=\"kw\">impl </span><a href=\"tools/scanner.rs.html#391\">Fn(usize) -&gt; usize,\n<span data-nosnippet>47</span>) -&gt; (usize, Vec&lt;usize&gt;) {\n<span data-nosnippet>48</span>    </a><span class=\"kw\">pub type </span><a href=\"tools/scanner.rs.html#391\">UF&lt;T, M&gt; =\n<span data-nosnippet>49</span>        UnionFindBase&lt;(), union_find::PathCompression, union_find::FnMerger&lt;T, M&gt;, (), ()&gt;;\n<span data-nosnippet>50</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cost = </a><span class=\"number\">0usize</span>;\n<span data-nosnippet>51</span>    <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">c01 = |u| {\n<span data-nosnippet>52</span>        </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">c = c01(u);\n<span data-nosnippet>53</span>        Count01::new(c.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, c.</a><span class=\"number\">1</span>)\n<span data-nosnippet>54</span>    };\n<span data-nosnippet>55</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = UF::new_with_merger(n, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">c01, |x, y| {\n<span data-nosnippet>56</span>        cost += x.cnt1 * y.cnt0;\n<span data-nosnippet>57</span>        </a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">x += </a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">y;\n<span data-nosnippet>58</span>    });\n<span data-nosnippet>59</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">label = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">; n];\n<span data-nosnippet>60</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">heap = BinaryHeap::from_iter((</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..n).filter(|</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">u| u != root).map(|u| (c01(u), u, </a><span class=\"number\">0</span>)));\n<span data-nosnippet>61</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">next: Vec&lt;</a><span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">..n).collect();\n<span data-nosnippet>62</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ord = Vec::with_capacity(n);\n<span data-nosnippet>63</span>    </a><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((_c, u, l)) = heap.pop() {\n<span data-nosnippet>64</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">label[u] != l {\n<span data-nosnippet>65</span>            </a><span class=\"kw\">continue</span>;\n<span data-nosnippet>66</span>        }\n<span data-nosnippet>67</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">p = uf.find_root(parent(u));\n<span data-nosnippet>68</span>        uf.</a><span class=\"highlight focus\">unite</span><a href=\"tools/scanner.rs.html#391\">(u, p);\n<span data-nosnippet>69</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!uf.same(p, root) {\n<span data-nosnippet>70</span>            label[p] += </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>71</span>            heap.push((</a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">uf.merge_data(p), p, label[p]));\n<span data-nosnippet>72</span>        }\n<span data-nosnippet>73</span>        next.swap(u, p);\n<span data-nosnippet>74</span>    }\n<span data-nosnippet>75</span>    </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">u = next[root];\n<span data-nosnippet>76</span>    ord.push(u);\n<span data-nosnippet>77</span>    </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">u != root {\n<span data-nosnippet>78</span>        u = next[u];\n<span data-nosnippet>79</span>        ord.push(u);\n<span data-nosnippet>80</span>    }\n<span data-nosnippet>81</span>    ord.reverse();\n<span data-nosnippet>82</span>    (cost, ord)\n<span data-nosnippet>83</span>}</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[73,73],&#34;src/competitive/graph/minimum_spanning_arborescence.rs.html#78&#34;,&#34;line 78&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_spanning_arborescence.rs (<a href=\"src/competitive/graph/minimum_spanning_arborescence.rs.html#78\">line 78</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>5</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">minimum_spanning_arborescence&lt;G, F&gt;(\n<span data-nosnippet>6</span>        </a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">,\n<span data-nosnippet>7</span>        root: usize,\n<span data-nosnippet>8</span>        weight: F,\n<span data-nosnippet>9</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;(G::T, Vec&lt;usize&gt;)&gt;\n<span data-nosnippet>10</span>    </a><span class=\"kw\">where\n<span data-nosnippet>11</span>        </span><a href=\"tools/scanner.rs.html#391\">G: Group,\n<span data-nosnippet>12</span>        G::T: Ord,\n<span data-nosnippet>13</span>        F: Fn(usize) -&gt; G::T,\n<span data-nosnippet>14</span>    {\n<span data-nosnippet>15</span>        </a><span class=\"kw\">struct </span><a href=\"tools/scanner.rs.html#391\">WeightAct&lt;G&gt;(std::marker::PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"tools/scanner.rs.html#391\">() -&gt; G&gt;);\n<span data-nosnippet>16</span>        </a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;G&gt; MonoidAct </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">WeightAct&lt;G&gt;\n<span data-nosnippet>17</span>        </a><span class=\"kw\">where\n<span data-nosnippet>18</span>            </span><a href=\"tools/scanner.rs.html#391\">G: Group,\n<span data-nosnippet>19</span>        {\n<span data-nosnippet>20</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Key = (G::T, usize);\n<span data-nosnippet>21</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Act = G::T;\n<span data-nosnippet>22</span>            </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">ActMonoid = G;\n<span data-nosnippet>23</span>\n<span data-nosnippet>24</span>            </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">act(x: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Key, a: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Act) -&gt; <span class=\"self\">Self</span>::Key {\n<span data-nosnippet>25</span>                (G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">x.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, a), x.</a><span class=\"number\">1</span>)\n<span data-nosnippet>26</span>            }\n<span data-nosnippet>27</span>\n<span data-nosnippet>28</span>            <span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">act_assign(x: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Key, a: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\"><span class=\"self\">Self</span>::Act) {\n<span data-nosnippet>29</span>                x.</a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">= G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">x.</a><span class=\"number\">0</span><a href=\"tools/scanner.rs.html#391\">, a);\n<span data-nosnippet>30</span>            }\n<span data-nosnippet>31</span>        }\n<span data-nosnippet>32</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">uf = MergingUnionFind::new_with_merger(\n<span data-nosnippet>33</span>            </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size(),\n<span data-nosnippet>34</span>            |</a><span class=\"kw\">_</span><a href=\"tools/scanner.rs.html#391\">| PairingHeap::&lt;(G::T, usize), Less, WeightAct&lt;G&gt;&gt;::default(),\n<span data-nosnippet>35</span>            |x, y| x.append(y),\n<span data-nosnippet>36</span>        );\n<span data-nosnippet>37</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">state = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()]; </a><span class=\"comment\">// 0: unprocessed, 1: in process, 2: completed\n<span data-nosnippet>38</span>        </span><a href=\"tools/scanner.rs.html#391\">state[root] = </a><span class=\"number\">2</span>;\n<span data-nosnippet>39</span>        <span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">(id, </a><span class=\"kw-2\">&amp;</span>(<span class=\"kw\">_</span><a href=\"tools/scanner.rs.html#391\">, to)) </a><span class=\"kw\">in </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges().enumerate() {\n<span data-nosnippet>40</span>            uf.merge_data_mut(to).push((weight(id), id));\n<span data-nosnippet>41</span>        }\n<span data-nosnippet>42</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">paredge = </a><span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()];\n<span data-nosnippet>43</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ord = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>44</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">leaf = </a><span class=\"macro\">vec!</span>[<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size(); </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()];\n<span data-nosnippet>45</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cycle = </a><span class=\"number\">0usize</span>;\n<span data-nosnippet>46</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">acc = G::unit();\n<span data-nosnippet>47</span>        </a><span class=\"kw\">for </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">cur </a><span class=\"kw\">in </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices() {\n<span data-nosnippet>48</span>            </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">state[cur] != </a><span class=\"number\">0 </span>{\n<span data-nosnippet>49</span>                <span class=\"kw\">continue</span>;\n<span data-nosnippet>50</span>            }\n<span data-nosnippet>51</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">path = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>52</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">ch = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>53</span>            <span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">state[cur] != </a><span class=\"number\">2 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>54</span>                path.push(cur);\n<span data-nosnippet>55</span>                state[cur] = </a><span class=\"number\">1</span>;\n<span data-nosnippet>56</span>                <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(w, eid) = {\n<span data-nosnippet>57</span>                    </a><span class=\"kw\">match </span><a href=\"tools/scanner.rs.html#391\">uf.merge_data_mut(cur).pop() {\n<span data-nosnippet>58</span>                        </a><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((w, eid)) =&gt; (w, eid),\n<span data-nosnippet>59</span>                        </a><span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span><a href=\"tools/scanner.rs.html#391\">,\n<span data-nosnippet>60</span>                    }\n<span data-nosnippet>61</span>                };\n<span data-nosnippet>62</span>                uf.merge_data_mut(cur).apply_all(G::inverse(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">w));\n<span data-nosnippet>63</span>                acc = G::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">acc, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">w);\n<span data-nosnippet>64</span>                ord.push(eid);\n<span data-nosnippet>65</span>                </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(u, v) = </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">[eid];\n<span data-nosnippet>66</span>                </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">leaf[v] &gt;= </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size() {\n<span data-nosnippet>67</span>                    leaf[v] = eid;\n<span data-nosnippet>68</span>                }\n<span data-nosnippet>69</span>                </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">cycle &gt; </a><span class=\"number\">0 </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>70</span>                    paredge[ch.pop().unwrap()] = eid;\n<span data-nosnippet>71</span>                    cycle -= </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>72</span>                }\n<span data-nosnippet>73</span>                ch.push(eid);\n<span data-nosnippet>74</span>                </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">state[uf.find_root(u)] == </a><span class=\"number\">1 </span>{\n<span data-nosnippet>75</span>                    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(t) = path.pop() {\n<span data-nosnippet>76</span>                        state[t] = </a><span class=\"number\">2</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>77</span>                        cycle += </a><span class=\"number\">1</span>;\n<span data-nosnippet>78</span>                        <span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!uf.</a><span class=\"highlight focus\">unite</span><a href=\"tools/scanner.rs.html#391\">(u, t) {\n<span data-nosnippet>79</span>                            </a><span class=\"kw\">break</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>80</span>                        }\n<span data-nosnippet>81</span>                    }\n<span data-nosnippet>82</span>                    state[uf.find_root(u)] = </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>83</span>                }\n<span data-nosnippet>84</span>                cur = uf.find_root(u);\n<span data-nosnippet>85</span>            }\n<span data-nosnippet>86</span>            </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">u </a><span class=\"kw\">in </span><a href=\"tools/scanner.rs.html#391\">path.into_iter() {\n<span data-nosnippet>87</span>                state[u] = </a><span class=\"number\">2</span>;\n<span data-nosnippet>88</span>            }\n<span data-nosnippet>89</span>        }\n<span data-nosnippet>90</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">tree = </a><span class=\"macro\">vec!</span><a href=\"tools/scanner.rs.html#391\">[root; </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.vertices_size()];\n<span data-nosnippet>91</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">used = </a><span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.edges_size()];\n<span data-nosnippet>92</span>        </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">eid </a><span class=\"kw\">in </span><a href=\"tools/scanner.rs.html#391\">ord.into_iter().rev() {\n<span data-nosnippet>93</span>            </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">!used[eid] {\n<span data-nosnippet>94</span>                </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(u, v) = </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">[eid];\n<span data-nosnippet>95</span>                tree[v] = u;\n<span data-nosnippet>96</span>                </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">x = leaf[v];\n<span data-nosnippet>97</span>                </a><span class=\"kw\">while </span><a href=\"tools/scanner.rs.html#391\">x != eid {\n<span data-nosnippet>98</span>                    used[x] = </a><span class=\"bool-val\">true</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>99</span>                    x = paredge[x];\n<span data-nosnippet>100</span>                }\n<span data-nosnippet>101</span>            }\n<span data-nosnippet>102</span>        }\n<span data-nosnippet>103</span>        </a><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">((acc, tree))\n<span data-nosnippet>104</span>    }</a></code></pre></div></div></div></details></div></details></div></details>",0,"competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::MergingUnionFind","competitive::data_structure::union_find::PotentializedUnionFind","competitive::data_structure::union_find::UndoableUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnionFindBase%3CUnionBySize,+F,+M,+P,+H%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#315-326\">Source</a><a href=\"#impl-UnionFindBase%3CUnionBySize,+F,+M,+P,+H%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, M, P, H&gt; <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UnionBySize.html\" title=\"enum competitive::data_structure::union_find::UnionBySize\">UnionBySize</a>, F, M, P, H&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    M: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html\" title=\"trait competitive::data_structure::union_find::UfMergeSpec\">UfMergeSpec</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,\n    H: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UndoStrategy.html\" title=\"trait competitive::data_structure::union_find::UndoStrategy\">UndoStrategy</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UfCell.html\" title=\"enum competitive::data_structure::union_find::UfCell\">UfCell</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UnionBySize.html\" title=\"enum competitive::data_structure::union_find::UnionBySize\">UnionBySize</a>, M, P&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.size\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#322-325\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.size\" class=\"fn\">size</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UnionBySize.html\" title=\"enum competitive::data_structure::union_find::UnionBySize\">UnionBySize</a> as <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>&gt;::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html#associatedtype.Info\" title=\"type competitive::data_structure::union_find::UnionStrategy::Info\">Info</a></h4></section></div></details>",0,"competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::MergingUnionFind","competitive::data_structure::union_find::PotentializedUnionFind","competitive::data_structure::union_find::UndoableUnionFind"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[187587]}