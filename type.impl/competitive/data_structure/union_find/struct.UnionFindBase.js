(function() {var type_impls = {
"competitive":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnionFindBase%3CU,+F,+(),+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#216-235\">source</a><a href=\"#impl-UnionFindBase%3CU,+F,+(),+P%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;U, F, P&gt; <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, P&gt;<span class=\"where fmt-newline\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#222-231\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.new\" class=\"fn\">new</a>(n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[4,4],&quot;src/aizu_online_judge/dsl/dsl_1_a.rs.html#10&quot;,&quot;line 10&quot;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_a.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_a.rs.html#10\">line 10</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">pub fn </span>dsl_1_a(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n    <span class=\"macro\">scan!</span>(scanner, n, q);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = <span class=\"highlight focus\">UnionFind::new</span>(n);\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..q {\n        <span class=\"macro\">scan!</span>(scanner, ty, x, y);\n        <span class=\"kw\">if </span>ty == <span class=\"number\">0 </span>{\n            uf.unite(x, y);\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;{}&quot;</span>, (uf.same(x, y) <span class=\"kw\">as </span>usize)).ok();\n        }\n    }\n}</code></pre></div></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example \" data-locs=\"[[[4,4],&quot;src/library_checker/datastructure/unionfind.rs.html#10&quot;,&quot;line 10&quot;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/datastructure/unionfind.rs (<a href=\"src/library_checker/datastructure/unionfind.rs.html#10\">line 10</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">pub fn </span>unionfind(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n    <span class=\"macro\">scan!</span>(scanner, n, q);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = <span class=\"highlight focus\">UnionFind::new</span>(n);\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..q {\n        <span class=\"macro\">scan!</span>(scanner, ty, u, v);\n        <span class=\"kw\">if </span>ty == <span class=\"number\">0 </span>{\n            uf.unite(u, v);\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;{}&quot;</span>, uf.same(u, v) <span class=\"kw\">as </span>usize).ok();\n        }\n    }\n}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[6,6],&quot;src/competitive/graph/minimum_spanning_tree.rs.html#13&quot;,&quot;line 13&quot;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_spanning_tree.rs (<a href=\"src/competitive/graph/minimum_spanning_tree.rs.html#13\">line 13</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button>    <span class=\"kw\">pub fn </span>minimum_spanning_tree&lt;T&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, weight: <span class=\"kw\">impl </span>Fn(<span class=\"kw-2\">&amp;</span>usize) -&gt; T) -&gt; Vec&lt;bool&gt;\n    <span class=\"kw\">where\n        </span>T: Ord,\n    {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>idx: Vec&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span>..<span class=\"self\">self</span>.edges_size()).collect();\n        idx.sort_by_key(weight);\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = <span class=\"highlight focus\">UnionFind::new</span>(<span class=\"self\">self</span>.vertices_size());\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span>.edges_size()];\n        <span class=\"kw\">for </span>eid <span class=\"kw\">in </span>idx.into_iter() {\n            <span class=\"kw\">let </span>(u, v) = <span class=\"self\">self</span>[eid];\n            res[eid] = uf.unite(u, v);\n        }\n        res\n    }</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[4,4],&quot;src/aizu_online_judge/dsl/dsl_1_b.rs.html#10&quot;,&quot;line 10&quot;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_b.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_b.rs.html#10\">line 10</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">pub fn </span>dsl_1_b(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n    <span class=\"macro\">scan!</span>(scanner, n, q);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = <span class=\"highlight focus\">PotentializedUnionFind::&lt;AdditiveOperation&lt;<span class=\"kw\">_</span>&gt;&gt;::new</span>(n);\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..q {\n        <span class=\"macro\">scan!</span>(scanner, ty, x, y);\n        <span class=\"kw\">if </span>ty == <span class=\"number\">0 </span>{\n            <span class=\"macro\">scan!</span>(scanner, w: i64);\n            uf.unite_with(x, y, w);\n        } <span class=\"kw\">else if let </span><span class=\"prelude-val\">Some</span>(w) = uf.difference(x, y) {\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;{}&quot;</span>, w).ok();\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;?&quot;</span>).ok();\n        }\n    }\n}</code></pre></div></div></div></div></details></div></details><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#232-234\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self)</h4></section></div></details>",0,"competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::PotentializedUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnionFindBase%3CU,+F,+FnMerger%3CT,+Merge%3E,+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#237-257\">source</a><a href=\"#impl-UnionFindBase%3CU,+F,+FnMerger%3CT,+Merge%3E,+P%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;U, F, T, Merge, P&gt; <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.FnMerger.html\" title=\"struct competitive::data_structure::union_find::FnMerger\">FnMerger</a>&lt;T, Merge&gt;, P&gt;<span class=\"where fmt-newline\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    Merge: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>),\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_with_merger\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#244-256\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.new_with_merger\" class=\"fn\">new_with_merger</a>(\n    n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    init: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T,\n    merge: Merge\n) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[11,22],&quot;src/competitive/graph/minimum_spanning_tree.rs.html#40-51&quot;,&quot;lines 40-51&quot;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_spanning_tree.rs (<a href=\"src/competitive/graph/minimum_spanning_tree.rs.html#40-51\">lines 40-51</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n<span>50</span>\n<span>51</span>\n<span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n<span>61</span>\n<span>62</span>\n<span>63</span>\n<span>64</span>\n<span>65</span>\n<span>66</span>\n<span>67</span>\n<span>68</span>\n<span>69</span>\n<span>70</span>\n<span>71</span>\n<span>72</span>\n<span>73</span>\n<span>74</span>\n<span>75</span>\n<span>76</span>\n<span>77</span>\n<span>78</span>\n<span>79</span>\n<span>80</span>\n<span>81</span>\n<span>82</span>\n<span>83</span>\n<span>84</span>\n<span>85</span>\n<span>86</span>\n<span>87</span>\n<span>88</span>\n<span>89</span>\n<span>90</span>\n<span>91</span>\n<span>92</span>\n<span>93</span>\n<span>94</span>\n<span>95</span>\n<span>96</span>\n<span>97</span>\n<span>98</span>\n<span>99</span>\n<span>100</span>\n<span>101</span>\n<span>102</span>\n<span>103</span>\n<span>104</span>\n<span>105</span>\n<span>106</span>\n<span>107</span>\n<span>108</span>\n<span>109</span>\n<span>110</span>\n<span>111</span>\n<span>112</span>\n<span>113</span>\n<span>114</span>\n<span>115</span>\n<span>116</span>\n<span>117</span>\n<span>118</span>\n<span>119</span>\n<span>120</span>\n<span>121</span>\n<span>122</span>\n<span>123</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button>    <span class=\"kw\">pub fn </span>minimum_spanning_arborescence&lt;G, F&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>,\n        root: usize,\n        weight: F,\n    ) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(G::T, Vec&lt;usize&gt;)&gt;\n    <span class=\"kw\">where\n        </span>G: Group,\n        G::T: Ord,\n        F: Fn(usize) -&gt; G::T,\n    {\n        <span class=\"kw\">use </span>std::{cmp::Reverse, collections::BinaryHeap};\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = <span class=\"highlight focus\">MergingUnionFind::new_with_merger</span>(\n            <span class=\"self\">self</span>.vertices_size(),\n            |<span class=\"kw\">_</span>| (BinaryHeap::new(), G::unit()),\n            |x, y| {\n                <span class=\"kw\">let </span>ny = G::rinv_operate(<span class=\"kw-2\">&amp;</span>y.<span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span>x.<span class=\"number\">1</span>);\n                x.<span class=\"number\">0</span>.extend(\n                    (y.<span class=\"number\">0</span>)\n                        .drain()\n                        .map(|(Reverse(<span class=\"kw-2\">ref </span>w), i)| (Reverse(G::operate(w, <span class=\"kw-2\">&amp;</span>ny)), i)),\n                )\n            },\n        );\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>state = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.vertices_size()]; <span class=\"comment\">// 0: unprocessed, 1: in process, 2: completed\n        </span>state[root] = <span class=\"number\">2</span>;\n        <span class=\"kw\">for </span>(id, <span class=\"kw-2\">&amp;</span>(<span class=\"kw\">_</span>, to)) <span class=\"kw\">in </span><span class=\"self\">self</span>.edges().enumerate() {\n            uf.merge_data_mut(to).<span class=\"number\">0</span>.push((Reverse(weight(id)), id));\n        }\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>paredge = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.edges_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ord = <span class=\"macro\">vec!</span>[];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>leaf = <span class=\"macro\">vec!</span>[<span class=\"self\">self</span>.edges_size(); <span class=\"self\">self</span>.vertices_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cycle = <span class=\"number\">0usize</span>;\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>acc = G::unit();\n        <span class=\"kw\">for </span><span class=\"kw-2\">mut </span>cur <span class=\"kw\">in </span><span class=\"self\">self</span>.vertices() {\n            <span class=\"kw\">if </span>state[cur] != <span class=\"number\">0 </span>{\n                <span class=\"kw\">continue</span>;\n            }\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = <span class=\"macro\">vec!</span>[];\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ch = <span class=\"macro\">vec!</span>[];\n            <span class=\"kw\">while </span>state[cur] != <span class=\"number\">2 </span>{\n                path.push(cur);\n                state[cur] = <span class=\"number\">1</span>;\n                <span class=\"kw\">let </span>(w, eid) = {\n                    <span class=\"kw\">let </span>(heap, lazy) = <span class=\"kw-2\">&amp;mut </span>uf.merge_data_mut(cur);\n                    <span class=\"kw\">match </span>heap.pop() {\n                        <span class=\"prelude-val\">Some</span>((Reverse(w), eid)) =&gt; (G::operate(<span class=\"kw-2\">&amp;</span>w, lazy), eid),\n                        <span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n                    }\n                };\n                {\n                    <span class=\"kw\">let </span>curw = <span class=\"kw-2\">&amp;mut </span>uf.merge_data_mut(cur).<span class=\"number\">1</span>;\n                    <span class=\"kw-2\">*</span>curw = G::rinv_operate(curw, <span class=\"kw-2\">&amp;</span>w);\n                }\n                acc = G::operate(<span class=\"kw-2\">&amp;</span>acc, <span class=\"kw-2\">&amp;</span>w);\n                ord.push(eid);\n                <span class=\"kw\">let </span>(u, v) = <span class=\"self\">self</span>[eid];\n                <span class=\"kw\">if </span>leaf[v] &gt;= <span class=\"self\">self</span>.edges_size() {\n                    leaf[v] = eid;\n                }\n                <span class=\"kw\">while </span>cycle &gt; <span class=\"number\">0 </span>{\n                    paredge[ch.pop().unwrap()] = eid;\n                    cycle -= <span class=\"number\">1</span>;\n                }\n                ch.push(eid);\n                <span class=\"kw\">if </span>state[uf.find_root(u)] == <span class=\"number\">1 </span>{\n                    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(t) = path.pop() {\n                        state[t] = <span class=\"number\">2</span>;\n                        cycle += <span class=\"number\">1</span>;\n                        <span class=\"kw\">if </span>!uf.unite(u, t) {\n                            <span class=\"kw\">break</span>;\n                        }\n                    }\n                    state[uf.find_root(u)] = <span class=\"number\">1</span>;\n                }\n                cur = uf.find_root(u);\n            }\n            <span class=\"kw\">for </span>u <span class=\"kw\">in </span>path.into_iter() {\n                state[u] = <span class=\"number\">2</span>;\n            }\n        }\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tree = <span class=\"macro\">vec!</span>[root; <span class=\"self\">self</span>.vertices_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>used = <span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span>.edges_size()];\n        <span class=\"kw\">for </span>eid <span class=\"kw\">in </span>ord.into_iter().rev() {\n            <span class=\"kw\">if </span>!used[eid] {\n                <span class=\"kw\">let </span>(u, v) = <span class=\"self\">self</span>[eid];\n                tree[v] = u;\n                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = leaf[v];\n                <span class=\"kw\">while </span>x != eid {\n                    used[x] = <span class=\"bool-val\">true</span>;\n                    x = paredge[x];\n                }\n            }\n        }\n        <span class=\"prelude-val\">Some</span>((acc, tree))\n    }</code></pre></div></div></div></div></details></div></details>",0,"competitive::data_structure::union_find::MergingUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnionFindBase%3CUnionBySize,+F,+M,+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#259-269\">source</a><a href=\"#impl-UnionFindBase%3CUnionBySize,+F,+M,+P%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;F, M, P&gt; <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UnionBySize.html\" title=\"enum competitive::data_structure::union_find::UnionBySize\">UnionBySize</a>, F, M, P&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    M: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html\" title=\"trait competitive::data_structure::union_find::UfMergeSpec\">UfMergeSpec</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,</span></h3></section></summary><div class=\"impl-items\"><section id=\"method.size\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#265-268\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.size\" class=\"fn\">size</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"enum\" href=\"competitive/data_structure/union_find/enum.UnionBySize.html\" title=\"enum competitive::data_structure::union_find::UnionBySize\">UnionBySize</a> as <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>&gt;::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html#associatedtype.Info\" title=\"type competitive::data_structure::union_find::UnionStrategy::Info\">Info</a></h4></section></div></details>",0,"competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::MergingUnionFind","competitive::data_structure::union_find::PotentializedUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnionFindBase%3CU,+F,+M,+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#271-377\">source</a><a href=\"#impl-UnionFindBase%3CU,+F,+M,+P%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;U, F, M, P&gt; <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, M, P&gt;<span class=\"where fmt-newline\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    M: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html\" title=\"trait competitive::data_structure::union_find::UfMergeSpec\">UfMergeSpec</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.same\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#292-294\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.same\" class=\"fn\">same</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[10,10],&quot;src/aizu_online_judge/dsl/dsl_1_a.rs.html#16&quot;,&quot;line 16&quot;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_a.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_a.rs.html#16\">line 16</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">pub fn </span>dsl_1_a(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n    <span class=\"macro\">scan!</span>(scanner, n, q);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = UnionFind::new(n);\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..q {\n        <span class=\"macro\">scan!</span>(scanner, ty, x, y);\n        <span class=\"kw\">if </span>ty == <span class=\"number\">0 </span>{\n            uf.unite(x, y);\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;{}&quot;</span>, (uf.<span class=\"highlight focus\">same</span>(x, y) <span class=\"kw\">as </span>usize)).ok();\n        }\n    }\n}</code></pre></div></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example \" data-locs=\"[[[10,10],&quot;src/library_checker/datastructure/unionfind.rs.html#16&quot;,&quot;line 16&quot;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/datastructure/unionfind.rs (<a href=\"src/library_checker/datastructure/unionfind.rs.html#16\">line 16</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">pub fn </span>unionfind(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n    <span class=\"macro\">scan!</span>(scanner, n, q);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = UnionFind::new(n);\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..q {\n        <span class=\"macro\">scan!</span>(scanner, ty, u, v);\n        <span class=\"kw\">if </span>ty == <span class=\"number\">0 </span>{\n            uf.unite(u, v);\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;{}&quot;</span>, uf.<span class=\"highlight focus\">same</span>(u, v) <span class=\"kw\">as </span>usize).ok();\n        }\n    }\n}</code></pre></div></div></div></div></details></div></details><section id=\"method.merge_data\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#296-302\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.merge_data\" class=\"fn\">merge_data</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &amp;M::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::union_find::UfMergeSpec::Data\">Data</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge_data_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#304-310\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.merge_data_mut\" class=\"fn\">merge_data_mut</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &amp;mut M::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::union_find::UfMergeSpec::Data\">Data</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[26,26],&quot;src/competitive/graph/minimum_spanning_tree.rs.html#55&quot;,&quot;line 55&quot;],[[43,43],&quot;src/competitive/graph/minimum_spanning_tree.rs.html#72&quot;,&quot;line 72&quot;],[[50,50],&quot;src/competitive/graph/minimum_spanning_tree.rs.html#79&quot;,&quot;line 79&quot;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_spanning_tree.rs (<a href=\"src/competitive/graph/minimum_spanning_tree.rs.html#55\">line 55</a>)</div><div class=\"code-wrapper\"><button class=\"prev\">&pr;</button> <button class=\"next\">&sc;</button><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n<span>50</span>\n<span>51</span>\n<span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n<span>61</span>\n<span>62</span>\n<span>63</span>\n<span>64</span>\n<span>65</span>\n<span>66</span>\n<span>67</span>\n<span>68</span>\n<span>69</span>\n<span>70</span>\n<span>71</span>\n<span>72</span>\n<span>73</span>\n<span>74</span>\n<span>75</span>\n<span>76</span>\n<span>77</span>\n<span>78</span>\n<span>79</span>\n<span>80</span>\n<span>81</span>\n<span>82</span>\n<span>83</span>\n<span>84</span>\n<span>85</span>\n<span>86</span>\n<span>87</span>\n<span>88</span>\n<span>89</span>\n<span>90</span>\n<span>91</span>\n<span>92</span>\n<span>93</span>\n<span>94</span>\n<span>95</span>\n<span>96</span>\n<span>97</span>\n<span>98</span>\n<span>99</span>\n<span>100</span>\n<span>101</span>\n<span>102</span>\n<span>103</span>\n<span>104</span>\n<span>105</span>\n<span>106</span>\n<span>107</span>\n<span>108</span>\n<span>109</span>\n<span>110</span>\n<span>111</span>\n<span>112</span>\n<span>113</span>\n<span>114</span>\n<span>115</span>\n<span>116</span>\n<span>117</span>\n<span>118</span>\n<span>119</span>\n<span>120</span>\n<span>121</span>\n<span>122</span>\n<span>123</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button>    <span class=\"kw\">pub fn </span>minimum_spanning_arborescence&lt;G, F&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>,\n        root: usize,\n        weight: F,\n    ) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(G::T, Vec&lt;usize&gt;)&gt;\n    <span class=\"kw\">where\n        </span>G: Group,\n        G::T: Ord,\n        F: Fn(usize) -&gt; G::T,\n    {\n        <span class=\"kw\">use </span>std::{cmp::Reverse, collections::BinaryHeap};\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = MergingUnionFind::new_with_merger(\n            <span class=\"self\">self</span>.vertices_size(),\n            |<span class=\"kw\">_</span>| (BinaryHeap::new(), G::unit()),\n            |x, y| {\n                <span class=\"kw\">let </span>ny = G::rinv_operate(<span class=\"kw-2\">&amp;</span>y.<span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span>x.<span class=\"number\">1</span>);\n                x.<span class=\"number\">0</span>.extend(\n                    (y.<span class=\"number\">0</span>)\n                        .drain()\n                        .map(|(Reverse(<span class=\"kw-2\">ref </span>w), i)| (Reverse(G::operate(w, <span class=\"kw-2\">&amp;</span>ny)), i)),\n                )\n            },\n        );\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>state = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.vertices_size()]; <span class=\"comment\">// 0: unprocessed, 1: in process, 2: completed\n        </span>state[root] = <span class=\"number\">2</span>;\n        <span class=\"kw\">for </span>(id, <span class=\"kw-2\">&amp;</span>(<span class=\"kw\">_</span>, to)) <span class=\"kw\">in </span><span class=\"self\">self</span>.edges().enumerate() {\n            uf.<span class=\"highlight focus\">merge_data_mut</span>(to).<span class=\"number\">0</span>.push((Reverse(weight(id)), id));\n        }\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>paredge = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.edges_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ord = <span class=\"macro\">vec!</span>[];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>leaf = <span class=\"macro\">vec!</span>[<span class=\"self\">self</span>.edges_size(); <span class=\"self\">self</span>.vertices_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cycle = <span class=\"number\">0usize</span>;\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>acc = G::unit();\n        <span class=\"kw\">for </span><span class=\"kw-2\">mut </span>cur <span class=\"kw\">in </span><span class=\"self\">self</span>.vertices() {\n            <span class=\"kw\">if </span>state[cur] != <span class=\"number\">0 </span>{\n                <span class=\"kw\">continue</span>;\n            }\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = <span class=\"macro\">vec!</span>[];\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ch = <span class=\"macro\">vec!</span>[];\n            <span class=\"kw\">while </span>state[cur] != <span class=\"number\">2 </span>{\n                path.push(cur);\n                state[cur] = <span class=\"number\">1</span>;\n                <span class=\"kw\">let </span>(w, eid) = {\n                    <span class=\"kw\">let </span>(heap, lazy) = <span class=\"kw-2\">&amp;mut </span>uf.<span class=\"highlight\">merge_data_mut</span>(cur);\n                    <span class=\"kw\">match </span>heap.pop() {\n                        <span class=\"prelude-val\">Some</span>((Reverse(w), eid)) =&gt; (G::operate(<span class=\"kw-2\">&amp;</span>w, lazy), eid),\n                        <span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n                    }\n                };\n                {\n                    <span class=\"kw\">let </span>curw = <span class=\"kw-2\">&amp;mut </span>uf.<span class=\"highlight\">merge_data_mut</span>(cur).<span class=\"number\">1</span>;\n                    <span class=\"kw-2\">*</span>curw = G::rinv_operate(curw, <span class=\"kw-2\">&amp;</span>w);\n                }\n                acc = G::operate(<span class=\"kw-2\">&amp;</span>acc, <span class=\"kw-2\">&amp;</span>w);\n                ord.push(eid);\n                <span class=\"kw\">let </span>(u, v) = <span class=\"self\">self</span>[eid];\n                <span class=\"kw\">if </span>leaf[v] &gt;= <span class=\"self\">self</span>.edges_size() {\n                    leaf[v] = eid;\n                }\n                <span class=\"kw\">while </span>cycle &gt; <span class=\"number\">0 </span>{\n                    paredge[ch.pop().unwrap()] = eid;\n                    cycle -= <span class=\"number\">1</span>;\n                }\n                ch.push(eid);\n                <span class=\"kw\">if </span>state[uf.find_root(u)] == <span class=\"number\">1 </span>{\n                    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(t) = path.pop() {\n                        state[t] = <span class=\"number\">2</span>;\n                        cycle += <span class=\"number\">1</span>;\n                        <span class=\"kw\">if </span>!uf.unite(u, t) {\n                            <span class=\"kw\">break</span>;\n                        }\n                    }\n                    state[uf.find_root(u)] = <span class=\"number\">1</span>;\n                }\n                cur = uf.find_root(u);\n            }\n            <span class=\"kw\">for </span>u <span class=\"kw\">in </span>path.into_iter() {\n                state[u] = <span class=\"number\">2</span>;\n            }\n        }\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tree = <span class=\"macro\">vec!</span>[root; <span class=\"self\">self</span>.vertices_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>used = <span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span>.edges_size()];\n        <span class=\"kw\">for </span>eid <span class=\"kw\">in </span>ord.into_iter().rev() {\n            <span class=\"kw\">if </span>!used[eid] {\n                <span class=\"kw\">let </span>(u, v) = <span class=\"self\">self</span>[eid];\n                tree[v] = u;\n                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = leaf[v];\n                <span class=\"kw\">while </span>x != eid {\n                    used[x] = <span class=\"bool-val\">true</span>;\n                    x = paredge[x];\n                }\n            }\n        }\n        <span class=\"prelude-val\">Some</span>((acc, tree))\n    }</code></pre></div></div></div></div></details><section id=\"method.roots\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#312-314\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.roots\" class=\"fn\">roots</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; + '_</h4></section><section id=\"method.all_group_members\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#316-323\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.all_group_members\" class=\"fn\">all_group_members</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.find\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#325-339\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.find\" class=\"fn\">find</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, P::<a class=\"associatedtype\" href=\"competitive/algebra/trait.Magma.html#associatedtype.T\" title=\"type competitive::algebra::Magma::T\">T</a>)</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[2,2],&quot;src/competitive/data_structure/union_find.rs.html#327&quot;,&quot;line 327&quot;],[[36,36],&quot;src/competitive/data_structure/union_find.rs.html#361&quot;,&quot;line 361&quot;],[[62,62],&quot;src/competitive/data_structure/union_find.rs.html#387&quot;,&quot;line 387&quot;],[[63,63],&quot;src/competitive/data_structure/union_find.rs.html#388&quot;,&quot;line 388&quot;],[[72,72],&quot;src/competitive/data_structure/union_find.rs.html#397&quot;,&quot;line 397&quot;],[[73,73],&quot;src/competitive/data_structure/union_find.rs.html#398&quot;,&quot;line 398&quot;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/union_find.rs (<a href=\"src/competitive/data_structure/union_find.rs.html#327\">line 327</a>)</div><div class=\"code-wrapper\"><button class=\"prev\">&pr;</button> <button class=\"next\">&sc;</button><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>325</span>\n<span>326</span>\n<span>327</span>\n<span>328</span>\n<span>329</span>\n<span>330</span>\n<span>331</span>\n<span>332</span>\n<span>333</span>\n<span>334</span>\n<span>335</span>\n<span>336</span>\n<span>337</span>\n<span>338</span>\n<span>339</span>\n<span>340</span>\n<span>341</span>\n<span>342</span>\n<span>343</span>\n<span>344</span>\n<span>345</span>\n<span>346</span>\n<span>347</span>\n<span>348</span>\n<span>349</span>\n<span>350</span>\n<span>351</span>\n<span>352</span>\n<span>353</span>\n<span>354</span>\n<span>355</span>\n<span>356</span>\n<span>357</span>\n<span>358</span>\n<span>359</span>\n<span>360</span>\n<span>361</span>\n<span>362</span>\n<span>363</span>\n<span>364</span>\n<span>365</span>\n<span>366</span>\n<span>367</span>\n<span>368</span>\n<span>369</span>\n<span>370</span>\n<span>371</span>\n<span>372</span>\n<span>373</span>\n<span>374</span>\n<span>375</span>\n<span>376</span>\n<span>377</span>\n<span>378</span>\n<span>379</span>\n<span>380</span>\n<span>381</span>\n<span>382</span>\n<span>383</span>\n<span>384</span>\n<span>385</span>\n<span>386</span>\n<span>387</span>\n<span>388</span>\n<span>389</span>\n<span>390</span>\n<span>391</span>\n<span>392</span>\n<span>393</span>\n<span>394</span>\n<span>395</span>\n<span>396</span>\n<span>397</span>\n<span>398</span>\n<span>399</span>\n<span>400</span>\n<span>401</span>\n<span>402</span>\n<span>403</span>\n<span>404</span>\n<span>405</span>\n<span>406</span>\n<span>407</span>\n<span>408</span>\n<span>409</span>\n<span>410</span>\n<span>411</span>\n<span>412</span>\n<span>413</span>\n<span>414</span>\n<span>415</span>\n<span>416</span>\n<span>417</span>\n<span>418</span>\n<span>419</span>\n<span>420</span>\n<span>421</span>\n<span>422</span>\n<span>423</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button>    <span class=\"kw\">pub fn </span>find(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize) -&gt; (usize, P::T) {\n        <span class=\"kw\">let </span>(parent_parent, parent_potential) = <span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.cells[x] {\n            UfCell::Child((parent, <span class=\"kw\">_</span>)) =&gt; <span class=\"self\">self</span>.<span class=\"highlight focus\">find</span>(<span class=\"kw-2\">*</span>parent),\n            UfCell::Root(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">return </span>(x, P::unit()),\n        };\n        <span class=\"kw\">let </span>(parent, potential) = <span class=\"self\">self</span>.cells[x].child_mut().unwrap();\n        <span class=\"kw\">let </span>potential = <span class=\"kw\">if </span>F::CHENGE_ROOT {\n            <span class=\"kw-2\">*</span>parent = parent_parent;\n            <span class=\"kw-2\">*</span>potential = P::operate(<span class=\"kw-2\">&amp;</span>parent_potential, potential);\n            potential.clone()\n        } <span class=\"kw\">else </span>{\n            P::operate(<span class=\"kw-2\">&amp;</span>parent_potential, potential)\n        };\n        (parent_parent, potential)\n    }\n\n    <span class=\"kw\">pub fn </span>find_root(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize) -&gt; usize {\n        <span class=\"kw\">let </span>(parent, parent_parent) = <span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.cells[x] {\n            UfCell::Child((parent, <span class=\"kw\">_</span>)) =&gt; (<span class=\"kw-2\">*</span>parent, <span class=\"self\">self</span>.find_root(<span class=\"kw-2\">*</span>parent)),\n            UfCell::Root(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">return </span>x,\n        };\n        <span class=\"kw\">if </span>F::CHENGE_ROOT {\n            <span class=\"kw\">let </span>(cx, cp) = {\n                <span class=\"kw\">let </span>ptr = <span class=\"self\">self</span>.cells.as_mut_ptr();\n                <span class=\"kw\">unsafe </span>{ (<span class=\"kw-2\">&amp;mut *</span>ptr.add(x), <span class=\"kw-2\">&amp;*</span>ptr.add(parent)) }\n            };\n            <span class=\"kw\">let </span>(parent, potential) = cx.child_mut().unwrap();\n            <span class=\"kw-2\">*</span>parent = parent_parent;\n            <span class=\"kw\">if let </span>UfCell::Child((<span class=\"kw\">_</span>, ppot)) = <span class=\"kw-2\">&amp;</span>cp {\n                <span class=\"kw-2\">*</span>potential = P::operate(ppot, potential);\n            }\n        }\n        parent_parent\n    }\n\n    <span class=\"kw\">pub fn </span>unite_noninv(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize, y: usize, potential: P::T) -&gt; bool {\n        <span class=\"kw\">let </span>(rx, potx) = <span class=\"self\">self</span>.<span class=\"highlight\">find</span>(x);\n        <span class=\"kw\">let </span>ry = <span class=\"self\">self</span>.find_root(y);\n        <span class=\"kw\">if </span>rx == ry || y != ry {\n            <span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n        }\n        {\n            <span class=\"kw\">let </span>ptr = <span class=\"self\">self</span>.cells.as_mut_ptr();\n            <span class=\"kw\">let </span>(cx, cy) = <span class=\"kw\">unsafe </span>{ (<span class=\"kw-2\">&amp;mut *</span>ptr.add(rx), <span class=\"kw-2\">&amp;mut *</span>ptr.add(ry)) };\n            <span class=\"self\">self</span>.merger\n                .merge(<span class=\"kw-2\">&amp;mut </span>cx.root_mut().unwrap().<span class=\"number\">1</span>, <span class=\"kw-2\">&amp;mut </span>cy.root_mut().unwrap().<span class=\"number\">1</span>);\n        }\n        <span class=\"kw-2\">*</span><span class=\"self\">self</span>.root_info_mut(rx).unwrap() =\n            U::unite(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.root_info(rx).unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.root_info(ry).unwrap());\n        <span class=\"self\">self</span>.cells[ry] = UfCell::Child((rx, P::operate(<span class=\"kw-2\">&amp;</span>potx, <span class=\"kw-2\">&amp;</span>potential)));\n        <span class=\"bool-val\">true\n    </span>}\n}\n\n<span class=\"kw\">impl</span>&lt;U, F, M, P&gt; UnionFindBase&lt;U, F, M, P&gt;\n<span class=\"kw\">where\n    </span>U: UnionStrategy,\n    F: FindStrategy,\n    M: UfMergeSpec,\n    P: Group,\n{\n    <span class=\"kw\">pub fn </span>difference(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize, y: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;P::T&gt; {\n        <span class=\"kw\">let </span>(rx, potx) = <span class=\"self\">self</span>.<span class=\"highlight\">find</span>(x);\n        <span class=\"kw\">let </span>(ry, poty) = <span class=\"self\">self</span>.<span class=\"highlight\">find</span>(y);\n        <span class=\"kw\">if </span>rx == ry {\n            <span class=\"prelude-val\">Some</span>(P::operate(<span class=\"kw-2\">&amp;</span>P::inverse(<span class=\"kw-2\">&amp;</span>potx), <span class=\"kw-2\">&amp;</span>poty))\n        } <span class=\"kw\">else </span>{\n            <span class=\"prelude-val\">None\n        </span>}\n    }\n\n    <span class=\"kw\">pub fn </span>unite_with(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize, y: usize, potential: P::T) -&gt; bool {\n        <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>rx, potx) = <span class=\"self\">self</span>.<span class=\"highlight\">find</span>(x);\n        <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>ry, poty) = <span class=\"self\">self</span>.<span class=\"highlight\">find</span>(y);\n        <span class=\"kw\">if </span>rx == ry {\n            <span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n        }\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>xinfo = <span class=\"self\">self</span>.root_info(rx).unwrap();\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>yinfo = <span class=\"self\">self</span>.root_info(ry).unwrap();\n        <span class=\"kw\">let </span>inverse = !U::check_directoin(<span class=\"kw-2\">&amp;</span>xinfo, <span class=\"kw-2\">&amp;</span>yinfo);\n        <span class=\"kw\">let </span>potential = <span class=\"kw\">if </span>inverse {\n            P::rinv_operate(<span class=\"kw-2\">&amp;</span>poty, <span class=\"kw-2\">&amp;</span>P::operate(<span class=\"kw-2\">&amp;</span>potx, <span class=\"kw-2\">&amp;</span>potential))\n        } <span class=\"kw\">else </span>{\n            P::operate(<span class=\"kw-2\">&amp;</span>potx, <span class=\"kw-2\">&amp;</span>P::rinv_operate(<span class=\"kw-2\">&amp;</span>potential, <span class=\"kw-2\">&amp;</span>poty))\n        };\n        <span class=\"kw\">if </span>inverse {\n            swap(<span class=\"kw-2\">&amp;mut </span>rx, <span class=\"kw-2\">&amp;mut </span>ry);\n            swap(<span class=\"kw-2\">&amp;mut </span>xinfo, <span class=\"kw-2\">&amp;mut </span>yinfo);\n        }\n        {\n            <span class=\"kw\">let </span>ptr = <span class=\"self\">self</span>.cells.as_mut_ptr();\n            <span class=\"kw\">let </span>(cx, cy) = <span class=\"kw\">unsafe </span>{ (<span class=\"kw-2\">&amp;mut *</span>ptr.add(rx), <span class=\"kw-2\">&amp;mut *</span>ptr.add(ry)) };\n            <span class=\"self\">self</span>.merger\n                .merge(<span class=\"kw-2\">&amp;mut </span>cx.root_mut().unwrap().<span class=\"number\">1</span>, <span class=\"kw-2\">&amp;mut </span>cy.root_mut().unwrap().<span class=\"number\">1</span>);\n        }\n        <span class=\"kw-2\">*</span><span class=\"self\">self</span>.root_info_mut(rx).unwrap() = U::unite(<span class=\"kw-2\">&amp;</span>xinfo, <span class=\"kw-2\">&amp;</span>yinfo);\n        <span class=\"self\">self</span>.cells[ry] = UfCell::Child((rx, potential));\n        <span class=\"bool-val\">true\n    </span>}</code></pre></div></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_root\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#341-358\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.find_root\" class=\"fn\">find_root</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-3\"><a href=\"#scraped-examples-3\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[1,1],&quot;src/competitive/data_structure/union_find.rs.html#266&quot;,&quot;line 266&quot;],[[28,28],&quot;src/competitive/data_structure/union_find.rs.html#293&quot;,&quot;line 293&quot;],[[28,28],&quot;src/competitive/data_structure/union_find.rs.html#293&quot;,&quot;line 293&quot;],[[32,32],&quot;src/competitive/data_structure/union_find.rs.html#297&quot;,&quot;line 297&quot;],[[40,40],&quot;src/competitive/data_structure/union_find.rs.html#305&quot;,&quot;line 305&quot;],[[54,54],&quot;src/competitive/data_structure/union_find.rs.html#319&quot;,&quot;line 319&quot;],[[78,78],&quot;src/competitive/data_structure/union_find.rs.html#343&quot;,&quot;line 343&quot;],[[97,97],&quot;src/competitive/data_structure/union_find.rs.html#362&quot;,&quot;line 362&quot;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/union_find.rs (<a href=\"src/competitive/data_structure/union_find.rs.html#266\">line 266</a>)</div><div class=\"code-wrapper\"><button class=\"prev\">&pr;</button> <button class=\"next\">&sc;</button><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>265</span>\n<span>266</span>\n<span>267</span>\n<span>268</span>\n<span>269</span>\n<span>270</span>\n<span>271</span>\n<span>272</span>\n<span>273</span>\n<span>274</span>\n<span>275</span>\n<span>276</span>\n<span>277</span>\n<span>278</span>\n<span>279</span>\n<span>280</span>\n<span>281</span>\n<span>282</span>\n<span>283</span>\n<span>284</span>\n<span>285</span>\n<span>286</span>\n<span>287</span>\n<span>288</span>\n<span>289</span>\n<span>290</span>\n<span>291</span>\n<span>292</span>\n<span>293</span>\n<span>294</span>\n<span>295</span>\n<span>296</span>\n<span>297</span>\n<span>298</span>\n<span>299</span>\n<span>300</span>\n<span>301</span>\n<span>302</span>\n<span>303</span>\n<span>304</span>\n<span>305</span>\n<span>306</span>\n<span>307</span>\n<span>308</span>\n<span>309</span>\n<span>310</span>\n<span>311</span>\n<span>312</span>\n<span>313</span>\n<span>314</span>\n<span>315</span>\n<span>316</span>\n<span>317</span>\n<span>318</span>\n<span>319</span>\n<span>320</span>\n<span>321</span>\n<span>322</span>\n<span>323</span>\n<span>324</span>\n<span>325</span>\n<span>326</span>\n<span>327</span>\n<span>328</span>\n<span>329</span>\n<span>330</span>\n<span>331</span>\n<span>332</span>\n<span>333</span>\n<span>334</span>\n<span>335</span>\n<span>336</span>\n<span>337</span>\n<span>338</span>\n<span>339</span>\n<span>340</span>\n<span>341</span>\n<span>342</span>\n<span>343</span>\n<span>344</span>\n<span>345</span>\n<span>346</span>\n<span>347</span>\n<span>348</span>\n<span>349</span>\n<span>350</span>\n<span>351</span>\n<span>352</span>\n<span>353</span>\n<span>354</span>\n<span>355</span>\n<span>356</span>\n<span>357</span>\n<span>358</span>\n<span>359</span>\n<span>360</span>\n<span>361</span>\n<span>362</span>\n<span>363</span>\n<span>364</span>\n<span>365</span>\n<span>366</span>\n<span>367</span>\n<span>368</span>\n<span>369</span>\n<span>370</span>\n<span>371</span>\n<span>372</span>\n<span>373</span>\n<span>374</span>\n<span>375</span>\n<span>376</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button>    <span class=\"kw\">pub fn </span>size(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize) -&gt; &lt;UnionBySize <span class=\"kw\">as </span>UnionStrategy&gt;::Info {\n        <span class=\"kw\">let </span>root = <span class=\"self\">self</span>.<span class=\"highlight focus\">find_root</span>(x);\n        <span class=\"self\">self</span>.root_info(root).unwrap()\n    }\n}\n\n<span class=\"kw\">impl</span>&lt;U, F, M, P&gt; UnionFindBase&lt;U, F, M, P&gt;\n<span class=\"kw\">where\n    </span>U: UnionStrategy,\n    F: FindStrategy,\n    M: UfMergeSpec,\n    P: Monoid,\n{\n    <span class=\"kw\">fn </span>root_info(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;U::Info&gt; {\n        <span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.cells[x] {\n            UfCell::Root((info, <span class=\"kw\">_</span>)) =&gt; <span class=\"prelude-val\">Some</span>(info.clone()),\n            UfCell::Child(<span class=\"kw\">_</span>) =&gt; <span class=\"prelude-val\">None</span>,\n        }\n    }\n\n    <span class=\"kw\">fn </span>root_info_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"kw-2\">&amp;mut </span>U::Info&gt; {\n        <span class=\"kw\">match </span><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.cells[x] {\n            UfCell::Root((info, <span class=\"kw\">_</span>)) =&gt; <span class=\"prelude-val\">Some</span>(info),\n            UfCell::Child(<span class=\"kw\">_</span>) =&gt; <span class=\"prelude-val\">None</span>,\n        }\n    }\n\n    <span class=\"kw\">pub fn </span>same(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize, y: usize) -&gt; bool {\n        <span class=\"self\">self</span>.<span class=\"highlight\">find_root</span>(x) == <span class=\"self\">self</span>.<span class=\"highlight\">find_root</span>(y)\n    }\n\n    <span class=\"kw\">pub fn </span>merge_data(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize) -&gt; <span class=\"kw-2\">&amp;</span>M::Data {\n        <span class=\"kw\">let </span>root = <span class=\"self\">self</span>.<span class=\"highlight\">find_root</span>(x);\n        <span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.cells[root] {\n            UfCell::Root((<span class=\"kw\">_</span>, data)) =&gt; data,\n            UfCell::Child(<span class=\"kw\">_</span>) =&gt; <span class=\"macro\">unreachable!</span>(),\n        }\n    }\n\n    <span class=\"kw\">pub fn </span>merge_data_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize) -&gt; <span class=\"kw-2\">&amp;mut </span>M::Data {\n        <span class=\"kw\">let </span>root = <span class=\"self\">self</span>.<span class=\"highlight\">find_root</span>(x);\n        <span class=\"kw\">match </span><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.cells[root] {\n            UfCell::Root((<span class=\"kw\">_</span>, data)) =&gt; data,\n            UfCell::Child(<span class=\"kw\">_</span>) =&gt; <span class=\"macro\">unreachable!</span>(),\n        }\n    }\n\n    <span class=\"kw\">pub fn </span>roots(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"kw\">impl </span>Iterator&lt;Item = usize&gt; + <span class=\"lifetime\">&#39;_ </span>{\n        (<span class=\"number\">0</span>..<span class=\"self\">self</span>.cells.len()).filter(|<span class=\"kw-2\">&amp;</span>x| <span class=\"macro\">matches!</span>(<span class=\"self\">self</span>.cells[x], UfCell::Root(<span class=\"kw\">_</span>)))\n    }\n\n    <span class=\"kw\">pub fn </span>all_group_members(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; HashMap&lt;usize, Vec&lt;usize&gt;&gt; {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>groups_map = HashMap::new();\n        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"self\">self</span>.cells.len() {\n            <span class=\"kw\">let </span>r = <span class=\"self\">self</span>.<span class=\"highlight\">find_root</span>(x);\n            groups_map.entry(r).or_insert_with(Vec::new).push(x);\n        }\n        groups_map\n    }\n\n    <span class=\"kw\">pub fn </span>find(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize) -&gt; (usize, P::T) {\n        <span class=\"kw\">let </span>(parent_parent, parent_potential) = <span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.cells[x] {\n            UfCell::Child((parent, <span class=\"kw\">_</span>)) =&gt; <span class=\"self\">self</span>.find(<span class=\"kw-2\">*</span>parent),\n            UfCell::Root(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">return </span>(x, P::unit()),\n        };\n        <span class=\"kw\">let </span>(parent, potential) = <span class=\"self\">self</span>.cells[x].child_mut().unwrap();\n        <span class=\"kw\">let </span>potential = <span class=\"kw\">if </span>F::CHENGE_ROOT {\n            <span class=\"kw-2\">*</span>parent = parent_parent;\n            <span class=\"kw-2\">*</span>potential = P::operate(<span class=\"kw-2\">&amp;</span>parent_potential, potential);\n            potential.clone()\n        } <span class=\"kw\">else </span>{\n            P::operate(<span class=\"kw-2\">&amp;</span>parent_potential, potential)\n        };\n        (parent_parent, potential)\n    }\n\n    <span class=\"kw\">pub fn </span>find_root(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize) -&gt; usize {\n        <span class=\"kw\">let </span>(parent, parent_parent) = <span class=\"kw\">match </span><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.cells[x] {\n            UfCell::Child((parent, <span class=\"kw\">_</span>)) =&gt; (<span class=\"kw-2\">*</span>parent, <span class=\"self\">self</span>.<span class=\"highlight\">find_root</span>(<span class=\"kw-2\">*</span>parent)),\n            UfCell::Root(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">return </span>x,\n        };\n        <span class=\"kw\">if </span>F::CHENGE_ROOT {\n            <span class=\"kw\">let </span>(cx, cp) = {\n                <span class=\"kw\">let </span>ptr = <span class=\"self\">self</span>.cells.as_mut_ptr();\n                <span class=\"kw\">unsafe </span>{ (<span class=\"kw-2\">&amp;mut *</span>ptr.add(x), <span class=\"kw-2\">&amp;*</span>ptr.add(parent)) }\n            };\n            <span class=\"kw\">let </span>(parent, potential) = cx.child_mut().unwrap();\n            <span class=\"kw-2\">*</span>parent = parent_parent;\n            <span class=\"kw\">if let </span>UfCell::Child((<span class=\"kw\">_</span>, ppot)) = <span class=\"kw-2\">&amp;</span>cp {\n                <span class=\"kw-2\">*</span>potential = P::operate(ppot, potential);\n            }\n        }\n        parent_parent\n    }\n\n    <span class=\"kw\">pub fn </span>unite_noninv(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize, y: usize, potential: P::T) -&gt; bool {\n        <span class=\"kw\">let </span>(rx, potx) = <span class=\"self\">self</span>.find(x);\n        <span class=\"kw\">let </span>ry = <span class=\"self\">self</span>.<span class=\"highlight\">find_root</span>(y);\n        <span class=\"kw\">if </span>rx == ry || y != ry {\n            <span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n        }\n        {\n            <span class=\"kw\">let </span>ptr = <span class=\"self\">self</span>.cells.as_mut_ptr();\n            <span class=\"kw\">let </span>(cx, cy) = <span class=\"kw\">unsafe </span>{ (<span class=\"kw-2\">&amp;mut *</span>ptr.add(rx), <span class=\"kw-2\">&amp;mut *</span>ptr.add(ry)) };\n            <span class=\"self\">self</span>.merger\n                .merge(<span class=\"kw-2\">&amp;mut </span>cx.root_mut().unwrap().<span class=\"number\">1</span>, <span class=\"kw-2\">&amp;mut </span>cy.root_mut().unwrap().<span class=\"number\">1</span>);\n        }\n        <span class=\"kw-2\">*</span><span class=\"self\">self</span>.root_info_mut(rx).unwrap() =\n            U::unite(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.root_info(rx).unwrap(), <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.root_info(ry).unwrap());\n        <span class=\"self\">self</span>.cells[ry] = UfCell::Child((rx, P::operate(<span class=\"kw-2\">&amp;</span>potx, <span class=\"kw-2\">&amp;</span>potential)));\n        <span class=\"bool-val\">true\n    </span>}</code></pre></div></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example \" data-locs=\"[[[64,64],&quot;src/competitive/graph/minimum_spanning_tree.rs.html#93&quot;,&quot;line 93&quot;],[[72,72],&quot;src/competitive/graph/minimum_spanning_tree.rs.html#101&quot;,&quot;line 101&quot;],[[74,74],&quot;src/competitive/graph/minimum_spanning_tree.rs.html#103&quot;,&quot;line 103&quot;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_spanning_tree.rs (<a href=\"src/competitive/graph/minimum_spanning_tree.rs.html#93\">line 93</a>)</div><div class=\"code-wrapper\"><button class=\"prev\">&pr;</button> <button class=\"next\">&sc;</button><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n<span>50</span>\n<span>51</span>\n<span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n<span>61</span>\n<span>62</span>\n<span>63</span>\n<span>64</span>\n<span>65</span>\n<span>66</span>\n<span>67</span>\n<span>68</span>\n<span>69</span>\n<span>70</span>\n<span>71</span>\n<span>72</span>\n<span>73</span>\n<span>74</span>\n<span>75</span>\n<span>76</span>\n<span>77</span>\n<span>78</span>\n<span>79</span>\n<span>80</span>\n<span>81</span>\n<span>82</span>\n<span>83</span>\n<span>84</span>\n<span>85</span>\n<span>86</span>\n<span>87</span>\n<span>88</span>\n<span>89</span>\n<span>90</span>\n<span>91</span>\n<span>92</span>\n<span>93</span>\n<span>94</span>\n<span>95</span>\n<span>96</span>\n<span>97</span>\n<span>98</span>\n<span>99</span>\n<span>100</span>\n<span>101</span>\n<span>102</span>\n<span>103</span>\n<span>104</span>\n<span>105</span>\n<span>106</span>\n<span>107</span>\n<span>108</span>\n<span>109</span>\n<span>110</span>\n<span>111</span>\n<span>112</span>\n<span>113</span>\n<span>114</span>\n<span>115</span>\n<span>116</span>\n<span>117</span>\n<span>118</span>\n<span>119</span>\n<span>120</span>\n<span>121</span>\n<span>122</span>\n<span>123</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button>    <span class=\"kw\">pub fn </span>minimum_spanning_arborescence&lt;G, F&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>,\n        root: usize,\n        weight: F,\n    ) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(G::T, Vec&lt;usize&gt;)&gt;\n    <span class=\"kw\">where\n        </span>G: Group,\n        G::T: Ord,\n        F: Fn(usize) -&gt; G::T,\n    {\n        <span class=\"kw\">use </span>std::{cmp::Reverse, collections::BinaryHeap};\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = MergingUnionFind::new_with_merger(\n            <span class=\"self\">self</span>.vertices_size(),\n            |<span class=\"kw\">_</span>| (BinaryHeap::new(), G::unit()),\n            |x, y| {\n                <span class=\"kw\">let </span>ny = G::rinv_operate(<span class=\"kw-2\">&amp;</span>y.<span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span>x.<span class=\"number\">1</span>);\n                x.<span class=\"number\">0</span>.extend(\n                    (y.<span class=\"number\">0</span>)\n                        .drain()\n                        .map(|(Reverse(<span class=\"kw-2\">ref </span>w), i)| (Reverse(G::operate(w, <span class=\"kw-2\">&amp;</span>ny)), i)),\n                )\n            },\n        );\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>state = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.vertices_size()]; <span class=\"comment\">// 0: unprocessed, 1: in process, 2: completed\n        </span>state[root] = <span class=\"number\">2</span>;\n        <span class=\"kw\">for </span>(id, <span class=\"kw-2\">&amp;</span>(<span class=\"kw\">_</span>, to)) <span class=\"kw\">in </span><span class=\"self\">self</span>.edges().enumerate() {\n            uf.merge_data_mut(to).<span class=\"number\">0</span>.push((Reverse(weight(id)), id));\n        }\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>paredge = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.edges_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ord = <span class=\"macro\">vec!</span>[];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>leaf = <span class=\"macro\">vec!</span>[<span class=\"self\">self</span>.edges_size(); <span class=\"self\">self</span>.vertices_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cycle = <span class=\"number\">0usize</span>;\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>acc = G::unit();\n        <span class=\"kw\">for </span><span class=\"kw-2\">mut </span>cur <span class=\"kw\">in </span><span class=\"self\">self</span>.vertices() {\n            <span class=\"kw\">if </span>state[cur] != <span class=\"number\">0 </span>{\n                <span class=\"kw\">continue</span>;\n            }\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = <span class=\"macro\">vec!</span>[];\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ch = <span class=\"macro\">vec!</span>[];\n            <span class=\"kw\">while </span>state[cur] != <span class=\"number\">2 </span>{\n                path.push(cur);\n                state[cur] = <span class=\"number\">1</span>;\n                <span class=\"kw\">let </span>(w, eid) = {\n                    <span class=\"kw\">let </span>(heap, lazy) = <span class=\"kw-2\">&amp;mut </span>uf.merge_data_mut(cur);\n                    <span class=\"kw\">match </span>heap.pop() {\n                        <span class=\"prelude-val\">Some</span>((Reverse(w), eid)) =&gt; (G::operate(<span class=\"kw-2\">&amp;</span>w, lazy), eid),\n                        <span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n                    }\n                };\n                {\n                    <span class=\"kw\">let </span>curw = <span class=\"kw-2\">&amp;mut </span>uf.merge_data_mut(cur).<span class=\"number\">1</span>;\n                    <span class=\"kw-2\">*</span>curw = G::rinv_operate(curw, <span class=\"kw-2\">&amp;</span>w);\n                }\n                acc = G::operate(<span class=\"kw-2\">&amp;</span>acc, <span class=\"kw-2\">&amp;</span>w);\n                ord.push(eid);\n                <span class=\"kw\">let </span>(u, v) = <span class=\"self\">self</span>[eid];\n                <span class=\"kw\">if </span>leaf[v] &gt;= <span class=\"self\">self</span>.edges_size() {\n                    leaf[v] = eid;\n                }\n                <span class=\"kw\">while </span>cycle &gt; <span class=\"number\">0 </span>{\n                    paredge[ch.pop().unwrap()] = eid;\n                    cycle -= <span class=\"number\">1</span>;\n                }\n                ch.push(eid);\n                <span class=\"kw\">if </span>state[uf.<span class=\"highlight focus\">find_root</span>(u)] == <span class=\"number\">1 </span>{\n                    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(t) = path.pop() {\n                        state[t] = <span class=\"number\">2</span>;\n                        cycle += <span class=\"number\">1</span>;\n                        <span class=\"kw\">if </span>!uf.unite(u, t) {\n                            <span class=\"kw\">break</span>;\n                        }\n                    }\n                    state[uf.<span class=\"highlight\">find_root</span>(u)] = <span class=\"number\">1</span>;\n                }\n                cur = uf.<span class=\"highlight\">find_root</span>(u);\n            }\n            <span class=\"kw\">for </span>u <span class=\"kw\">in </span>path.into_iter() {\n                state[u] = <span class=\"number\">2</span>;\n            }\n        }\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tree = <span class=\"macro\">vec!</span>[root; <span class=\"self\">self</span>.vertices_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>used = <span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span>.edges_size()];\n        <span class=\"kw\">for </span>eid <span class=\"kw\">in </span>ord.into_iter().rev() {\n            <span class=\"kw\">if </span>!used[eid] {\n                <span class=\"kw\">let </span>(u, v) = <span class=\"self\">self</span>[eid];\n                tree[v] = u;\n                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = leaf[v];\n                <span class=\"kw\">while </span>x != eid {\n                    used[x] = <span class=\"bool-val\">true</span>;\n                    x = paredge[x];\n                }\n            }\n        }\n        <span class=\"prelude-val\">Some</span>((acc, tree))\n    }</code></pre></div></div></div></div></details></div></details><section id=\"method.unite_noninv\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#360-376\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.unite_noninv\" class=\"fn\">unite_noninv</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, potential: P::<a class=\"associatedtype\" href=\"competitive/algebra/trait.Magma.html#associatedtype.T\" title=\"type competitive::algebra::Magma::T\">T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></div></details>",0,"competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::MergingUnionFind","competitive::data_structure::union_find::PotentializedUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UnionFindBase%3CU,+F,+M,+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#379-428\">source</a><a href=\"#impl-UnionFindBase%3CU,+F,+M,+P%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;U, F, M, P&gt; <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, M, P&gt;<span class=\"where fmt-newline\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    M: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html\" title=\"trait competitive::data_structure::union_find::UfMergeSpec\">UfMergeSpec</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Group.html\" title=\"trait competitive::algebra::Group\">Group</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.difference\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#386-394\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.difference\" class=\"fn\">difference</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;P::<a class=\"associatedtype\" href=\"competitive/algebra/trait.Magma.html#associatedtype.T\" title=\"type competitive::algebra::Magma::T\">T</a>&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[10,10],&quot;src/aizu_online_judge/dsl/dsl_1_b.rs.html#16&quot;,&quot;line 16&quot;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_b.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_b.rs.html#16\">line 16</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">pub fn </span>dsl_1_b(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n    <span class=\"macro\">scan!</span>(scanner, n, q);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = PotentializedUnionFind::&lt;AdditiveOperation&lt;<span class=\"kw\">_</span>&gt;&gt;::new(n);\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..q {\n        <span class=\"macro\">scan!</span>(scanner, ty, x, y);\n        <span class=\"kw\">if </span>ty == <span class=\"number\">0 </span>{\n            <span class=\"macro\">scan!</span>(scanner, w: i64);\n            uf.unite_with(x, y, w);\n        } <span class=\"kw\">else if let </span><span class=\"prelude-val\">Some</span>(w) = uf.<span class=\"highlight focus\">difference</span>(x, y) {\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;{}&quot;</span>, w).ok();\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;?&quot;</span>).ok();\n        }\n    }\n}</code></pre></div></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unite_with\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#396-423\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.unite_with\" class=\"fn\">unite_with</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, potential: P::<a class=\"associatedtype\" href=\"competitive/algebra/trait.Magma.html#associatedtype.T\" title=\"type competitive::algebra::Magma::T\">T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&quot;src/competitive/data_structure/union_find.rs.html#426&quot;,&quot;line 426&quot;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/union_find.rs (<a href=\"src/competitive/data_structure/union_find.rs.html#426\">line 426</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>425</span>\n<span>426</span>\n<span>427</span>\n</pre></div><pre class=\"rust\"><code>    <span class=\"kw\">pub fn </span>unite(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, x: usize, y: usize) -&gt; bool {\n        <span class=\"self\">self</span>.<span class=\"highlight focus\">unite_with</span>(x, y, P::unit())\n    }</code></pre></div></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example \" data-locs=\"[[[9,9],&quot;src/aizu_online_judge/dsl/dsl_1_b.rs.html#15&quot;,&quot;line 15&quot;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_b.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_b.rs.html#15\">line 15</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">pub fn </span>dsl_1_b(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n    <span class=\"macro\">scan!</span>(scanner, n, q);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = PotentializedUnionFind::&lt;AdditiveOperation&lt;<span class=\"kw\">_</span>&gt;&gt;::new(n);\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..q {\n        <span class=\"macro\">scan!</span>(scanner, ty, x, y);\n        <span class=\"kw\">if </span>ty == <span class=\"number\">0 </span>{\n            <span class=\"macro\">scan!</span>(scanner, w: i64);\n            uf.<span class=\"highlight focus\">unite_with</span>(x, y, w);\n        } <span class=\"kw\">else if let </span><span class=\"prelude-val\">Some</span>(w) = uf.difference(x, y) {\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;{}&quot;</span>, w).ok();\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;?&quot;</span>).ok();\n        }\n    }\n}</code></pre></div></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unite\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#425-427\">source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/union_find/struct.UnionFindBase.html#tymethod.unite\" class=\"fn\">unite</a>(&amp;mut self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example \" data-locs=\"[[[8,8],&quot;src/aizu_online_judge/dsl/dsl_1_a.rs.html#14&quot;,&quot;line 14&quot;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/dsl/dsl_1_a.rs (<a href=\"src/aizu_online_judge/dsl/dsl_1_a.rs.html#14\">line 14</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">pub fn </span>dsl_1_a(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n    <span class=\"macro\">scan!</span>(scanner, n, q);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = UnionFind::new(n);\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..q {\n        <span class=\"macro\">scan!</span>(scanner, ty, x, y);\n        <span class=\"kw\">if </span>ty == <span class=\"number\">0 </span>{\n            uf.<span class=\"highlight focus\">unite</span>(x, y);\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;{}&quot;</span>, (uf.same(x, y) <span class=\"kw\">as </span>usize)).ok();\n        }\n    }\n}</code></pre></div></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example \" data-locs=\"[[[8,8],&quot;src/library_checker/datastructure/unionfind.rs.html#14&quot;,&quot;line 14&quot;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/datastructure/unionfind.rs (<a href=\"src/library_checker/datastructure/unionfind.rs.html#14\">line 14</a>)</div><div class=\"code-wrapper\"><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>6</span>\n<span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button><span class=\"kw\">pub fn </span>unionfind(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n    <span class=\"macro\">scan!</span>(scanner, n, q);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = UnionFind::new(n);\n    <span class=\"kw\">for _ in </span><span class=\"number\">0</span>..q {\n        <span class=\"macro\">scan!</span>(scanner, ty, u, v);\n        <span class=\"kw\">if </span>ty == <span class=\"number\">0 </span>{\n            uf.<span class=\"highlight focus\">unite</span>(u, v);\n        } <span class=\"kw\">else </span>{\n            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">&quot;{}&quot;</span>, uf.same(u, v) <span class=\"kw\">as </span>usize).ok();\n        }\n    }\n}</code></pre></div></div></div><div class=\"scraped-example \" data-locs=\"[[[10,10],&quot;src/competitive/graph/minimum_spanning_tree.rs.html#17&quot;,&quot;line 17&quot;],[[90,90],&quot;src/competitive/graph/minimum_spanning_tree.rs.html#97&quot;,&quot;line 97&quot;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_spanning_tree.rs (<a href=\"src/competitive/graph/minimum_spanning_tree.rs.html#17\">line 17</a>)</div><div class=\"code-wrapper\"><button class=\"prev\">&pr;</button> <button class=\"next\">&sc;</button><div class=\"example-wrap\"><div data-nosnippet><pre class=\"src-line-numbers\"><span>7</span>\n<span>8</span>\n<span>9</span>\n<span>10</span>\n<span>11</span>\n<span>12</span>\n<span>13</span>\n<span>14</span>\n<span>15</span>\n<span>16</span>\n<span>17</span>\n<span>18</span>\n<span>19</span>\n<span>20</span>\n<span>21</span>\n<span>22</span>\n<span>23</span>\n<span>24</span>\n<span>25</span>\n<span>26</span>\n<span>27</span>\n<span>28</span>\n<span>29</span>\n<span>30</span>\n<span>31</span>\n<span>32</span>\n<span>33</span>\n<span>34</span>\n<span>35</span>\n<span>36</span>\n<span>37</span>\n<span>38</span>\n<span>39</span>\n<span>40</span>\n<span>41</span>\n<span>42</span>\n<span>43</span>\n<span>44</span>\n<span>45</span>\n<span>46</span>\n<span>47</span>\n<span>48</span>\n<span>49</span>\n<span>50</span>\n<span>51</span>\n<span>52</span>\n<span>53</span>\n<span>54</span>\n<span>55</span>\n<span>56</span>\n<span>57</span>\n<span>58</span>\n<span>59</span>\n<span>60</span>\n<span>61</span>\n<span>62</span>\n<span>63</span>\n<span>64</span>\n<span>65</span>\n<span>66</span>\n<span>67</span>\n<span>68</span>\n<span>69</span>\n<span>70</span>\n<span>71</span>\n<span>72</span>\n<span>73</span>\n<span>74</span>\n<span>75</span>\n<span>76</span>\n<span>77</span>\n<span>78</span>\n<span>79</span>\n<span>80</span>\n<span>81</span>\n<span>82</span>\n<span>83</span>\n<span>84</span>\n<span>85</span>\n<span>86</span>\n<span>87</span>\n<span>88</span>\n<span>89</span>\n<span>90</span>\n<span>91</span>\n<span>92</span>\n<span>93</span>\n<span>94</span>\n<span>95</span>\n<span>96</span>\n<span>97</span>\n<span>98</span>\n<span>99</span>\n<span>100</span>\n<span>101</span>\n<span>102</span>\n<span>103</span>\n<span>104</span>\n<span>105</span>\n<span>106</span>\n<span>107</span>\n<span>108</span>\n<span>109</span>\n<span>110</span>\n<span>111</span>\n<span>112</span>\n<span>113</span>\n<span>114</span>\n<span>115</span>\n<span>116</span>\n<span>117</span>\n<span>118</span>\n<span>119</span>\n<span>120</span>\n<span>121</span>\n<span>122</span>\n<span>123</span>\n</pre></div><pre class=\"rust\"><code><button class=\"expand\">&varr;</button>    <span class=\"kw\">pub fn </span>minimum_spanning_tree&lt;T&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, weight: <span class=\"kw\">impl </span>Fn(<span class=\"kw-2\">&amp;</span>usize) -&gt; T) -&gt; Vec&lt;bool&gt;\n    <span class=\"kw\">where\n        </span>T: Ord,\n    {\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>idx: Vec&lt;<span class=\"kw\">_</span>&gt; = (<span class=\"number\">0</span>..<span class=\"self\">self</span>.edges_size()).collect();\n        idx.sort_by_key(weight);\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = UnionFind::new(<span class=\"self\">self</span>.vertices_size());\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span>.edges_size()];\n        <span class=\"kw\">for </span>eid <span class=\"kw\">in </span>idx.into_iter() {\n            <span class=\"kw\">let </span>(u, v) = <span class=\"self\">self</span>[eid];\n            res[eid] = uf.<span class=\"highlight focus\">unite</span>(u, v);\n        }\n        res\n    }\n}\n\n<span class=\"attr\">#[codesnip::entry(\n    <span class=\"string\">&quot;minimum_spanning_arborescence&quot;</span>,\n    include(<span class=\"string\">&quot;algebra&quot;</span>, <span class=\"string\">&quot;EdgeListGraph&quot;</span>, <span class=\"string\">&quot;UnionFind&quot;</span>)\n)]\n</span><span class=\"kw\">impl </span>EdgeListGraph {\n    <span class=\"doccomment\">/// tarjan\n    </span><span class=\"kw\">pub fn </span>minimum_spanning_arborescence&lt;G, F&gt;(\n        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>,\n        root: usize,\n        weight: F,\n    ) -&gt; <span class=\"prelude-ty\">Option</span>&lt;(G::T, Vec&lt;usize&gt;)&gt;\n    <span class=\"kw\">where\n        </span>G: Group,\n        G::T: Ord,\n        F: Fn(usize) -&gt; G::T,\n    {\n        <span class=\"kw\">use </span>std::{cmp::Reverse, collections::BinaryHeap};\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uf = MergingUnionFind::new_with_merger(\n            <span class=\"self\">self</span>.vertices_size(),\n            |<span class=\"kw\">_</span>| (BinaryHeap::new(), G::unit()),\n            |x, y| {\n                <span class=\"kw\">let </span>ny = G::rinv_operate(<span class=\"kw-2\">&amp;</span>y.<span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span>x.<span class=\"number\">1</span>);\n                x.<span class=\"number\">0</span>.extend(\n                    (y.<span class=\"number\">0</span>)\n                        .drain()\n                        .map(|(Reverse(<span class=\"kw-2\">ref </span>w), i)| (Reverse(G::operate(w, <span class=\"kw-2\">&amp;</span>ny)), i)),\n                )\n            },\n        );\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>state = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.vertices_size()]; <span class=\"comment\">// 0: unprocessed, 1: in process, 2: completed\n        </span>state[root] = <span class=\"number\">2</span>;\n        <span class=\"kw\">for </span>(id, <span class=\"kw-2\">&amp;</span>(<span class=\"kw\">_</span>, to)) <span class=\"kw\">in </span><span class=\"self\">self</span>.edges().enumerate() {\n            uf.merge_data_mut(to).<span class=\"number\">0</span>.push((Reverse(weight(id)), id));\n        }\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>paredge = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.edges_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ord = <span class=\"macro\">vec!</span>[];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>leaf = <span class=\"macro\">vec!</span>[<span class=\"self\">self</span>.edges_size(); <span class=\"self\">self</span>.vertices_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cycle = <span class=\"number\">0usize</span>;\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>acc = G::unit();\n        <span class=\"kw\">for </span><span class=\"kw-2\">mut </span>cur <span class=\"kw\">in </span><span class=\"self\">self</span>.vertices() {\n            <span class=\"kw\">if </span>state[cur] != <span class=\"number\">0 </span>{\n                <span class=\"kw\">continue</span>;\n            }\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>path = <span class=\"macro\">vec!</span>[];\n            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ch = <span class=\"macro\">vec!</span>[];\n            <span class=\"kw\">while </span>state[cur] != <span class=\"number\">2 </span>{\n                path.push(cur);\n                state[cur] = <span class=\"number\">1</span>;\n                <span class=\"kw\">let </span>(w, eid) = {\n                    <span class=\"kw\">let </span>(heap, lazy) = <span class=\"kw-2\">&amp;mut </span>uf.merge_data_mut(cur);\n                    <span class=\"kw\">match </span>heap.pop() {\n                        <span class=\"prelude-val\">Some</span>((Reverse(w), eid)) =&gt; (G::operate(<span class=\"kw-2\">&amp;</span>w, lazy), eid),\n                        <span class=\"prelude-val\">None </span>=&gt; <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>,\n                    }\n                };\n                {\n                    <span class=\"kw\">let </span>curw = <span class=\"kw-2\">&amp;mut </span>uf.merge_data_mut(cur).<span class=\"number\">1</span>;\n                    <span class=\"kw-2\">*</span>curw = G::rinv_operate(curw, <span class=\"kw-2\">&amp;</span>w);\n                }\n                acc = G::operate(<span class=\"kw-2\">&amp;</span>acc, <span class=\"kw-2\">&amp;</span>w);\n                ord.push(eid);\n                <span class=\"kw\">let </span>(u, v) = <span class=\"self\">self</span>[eid];\n                <span class=\"kw\">if </span>leaf[v] &gt;= <span class=\"self\">self</span>.edges_size() {\n                    leaf[v] = eid;\n                }\n                <span class=\"kw\">while </span>cycle &gt; <span class=\"number\">0 </span>{\n                    paredge[ch.pop().unwrap()] = eid;\n                    cycle -= <span class=\"number\">1</span>;\n                }\n                ch.push(eid);\n                <span class=\"kw\">if </span>state[uf.find_root(u)] == <span class=\"number\">1 </span>{\n                    <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(t) = path.pop() {\n                        state[t] = <span class=\"number\">2</span>;\n                        cycle += <span class=\"number\">1</span>;\n                        <span class=\"kw\">if </span>!uf.<span class=\"highlight\">unite</span>(u, t) {\n                            <span class=\"kw\">break</span>;\n                        }\n                    }\n                    state[uf.find_root(u)] = <span class=\"number\">1</span>;\n                }\n                cur = uf.find_root(u);\n            }\n            <span class=\"kw\">for </span>u <span class=\"kw\">in </span>path.into_iter() {\n                state[u] = <span class=\"number\">2</span>;\n            }\n        }\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>tree = <span class=\"macro\">vec!</span>[root; <span class=\"self\">self</span>.vertices_size()];\n        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>used = <span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span>.edges_size()];\n        <span class=\"kw\">for </span>eid <span class=\"kw\">in </span>ord.into_iter().rev() {\n            <span class=\"kw\">if </span>!used[eid] {\n                <span class=\"kw\">let </span>(u, v) = <span class=\"self\">self</span>[eid];\n                tree[v] = u;\n                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = leaf[v];\n                <span class=\"kw\">while </span>x != eid {\n                    used[x] = <span class=\"bool-val\">true</span>;\n                    x = paredge[x];\n                }\n            }\n        }\n        <span class=\"prelude-val\">Some</span>((acc, tree))\n    }</code></pre></div></div></div></div></details></div></details></div></details>",0,"competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::MergingUnionFind","competitive::data_structure::union_find::PotentializedUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-UnionFindBase%3CU,+F,+M,+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#21-37\">source</a><a href=\"#impl-Clone-for-UnionFindBase%3CU,+F,+M,+P%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;U, F, M, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, M, P&gt;<span class=\"where fmt-newline\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    M: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html\" title=\"trait competitive::data_structure::union_find::UfMergeSpec\">UfMergeSpec</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,\n    U::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html#associatedtype.Info\" title=\"type competitive::data_structure::union_find::UnionStrategy::Info\">Info</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    M::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::union_find::UfMergeSpec::Data\">Data</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#30-36\">source</a><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::MergingUnionFind","competitive::data_structure::union_find::PotentializedUnionFind"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-UnionFindBase%3CU,+F,+M,+P%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#39-54\">source</a><a href=\"#impl-Debug-for-UnionFindBase%3CU,+F,+M,+P%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;U, F, M, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"competitive/data_structure/union_find/struct.UnionFindBase.html\" title=\"struct competitive::data_structure::union_find::UnionFindBase\">UnionFindBase</a>&lt;U, F, M, P&gt;<span class=\"where fmt-newline\">where\n    U: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html\" title=\"trait competitive::data_structure::union_find::UnionStrategy\">UnionStrategy</a>,\n    F: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.FindStrategy.html\" title=\"trait competitive::data_structure::union_find::FindStrategy\">FindStrategy</a>,\n    M: <a class=\"trait\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html\" title=\"trait competitive::data_structure::union_find::UfMergeSpec\">UfMergeSpec</a>,\n    P: <a class=\"trait\" href=\"competitive/algebra/trait.Monoid.html\" title=\"trait competitive::algebra::Monoid\">Monoid</a>,\n    U::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UnionStrategy.html#associatedtype.Info\" title=\"type competitive::data_structure::union_find::UnionStrategy::Info\">Info</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    M::<a class=\"associatedtype\" href=\"competitive/data_structure/union_find/trait.UfMergeSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::union_find::UfMergeSpec::Data\">Data</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    P::<a class=\"associatedtype\" href=\"competitive/algebra/trait.Magma.html#associatedtype.T\" title=\"type competitive::algebra::Magma::T\">T</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/union_find.rs.html#49-53\">source</a><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","competitive::data_structure::union_find::UnionFind","competitive::data_structure::union_find::MergingUnionFind","competitive::data_structure::union_find::PotentializedUnionFind"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()