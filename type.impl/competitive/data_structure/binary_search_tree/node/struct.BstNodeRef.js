(function() {
    var type_impls = Object.fromEntries([["competitive",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BstNodeRef%3CBorrowType,+Spec%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#179-208\">Source</a><a href=\"#impl-BstNodeRef%3CBorrowType,+Spec%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;BorrowType, Spec&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;BorrowType, Spec&gt;<div class=\"where\">where\n    Spec: <a class=\"trait\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html\" title=\"trait competitive::data_structure::binary_search_tree::node::BstSpec\">BstSpec</a>,\n    BorrowType: <a class=\"trait\" href=\"competitive/data_structure/binary_search_tree/node/marker/trait.BorrowType.html\" title=\"trait competitive::data_structure::binary_search_tree::node::marker::BorrowType\">BorrowType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#184-189\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.new_unchecked\" class=\"fn\">new_unchecked</a>(\n    node: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNode.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNode\">BstNode</a>&lt;Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a>, Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Parent\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Parent\">Parent</a>&gt;&gt;,\n) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[4,4],&#34;src/competitive/data_structure/binary_search_tree/node_id.rs.html#57&#34;,&#34;line 57&#34;],[[11,11],&#34;src/competitive/data_structure/binary_search_tree/node_id.rs.html#64&#34;,&#34;line 64&#34;],[[18,18],&#34;src/competitive/data_structure/binary_search_tree/node_id.rs.html#71&#34;,&#34;line 71&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/node_id.rs (<a href=\"src/competitive/data_structure/binary_search_tree/node_id.rs.html#57\">line 57</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>53</span>    <span class=\"kw\">pub unsafe fn </span><a href=\"tools/scanner.rs.html#391\">reborrow&lt;</a><span class=\"lifetime\">'a</span>&gt;(\n<span data-nosnippet>54</span>        <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">,\n<span data-nosnippet>55</span>        _root: </a><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>56</span>    ) -&gt; BstNodeRef&lt;node::marker::Immut&lt;</a><span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>57</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"highlight focus\">BstNodeRef::new_unchecked</span>(<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.node) }\n<span data-nosnippet>58</span>    }\n<span data-nosnippet>59</span>\n<span data-nosnippet>60</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"tools/scanner.rs.html#391\">reborrow_datamut&lt;</a><span class=\"lifetime\">'a</span>&gt;(\n<span data-nosnippet>61</span>        <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">,\n<span data-nosnippet>62</span>        _root: </a><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>63</span>    ) -&gt; BstNodeRef&lt;node::marker::DataMut&lt;</a><span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>64</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"highlight\">BstNodeRef::new_unchecked</span>(<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.node) }\n<span data-nosnippet>65</span>    }\n<span data-nosnippet>66</span>\n<span data-nosnippet>67</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"tools/scanner.rs.html#391\">reborrow_mut&lt;</a><span class=\"lifetime\">'a</span>&gt;(\n<span data-nosnippet>68</span>        <span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">,\n<span data-nosnippet>69</span>        _root: </a><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>70</span>    ) -&gt; BstNodeRef&lt;node::marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>71</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"highlight\">BstNodeRef::new_unchecked</span>(<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.node) }\n<span data-nosnippet>72</span>    }</a></code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reborrow\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#190-195\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.reborrow\" class=\"fn\">reborrow</a>(&amp;self) -&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/marker/struct.Immut.html\" title=\"struct competitive::data_structure::binary_search_tree::node::marker::Immut\">Immut</a>&lt;'_&gt;, Spec&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/data_structure/binary_search_tree/split.rs.html#37&#34;,&#34;line 37&#34;],[[5,5],&#34;src/competitive/data_structure/binary_search_tree/split.rs.html#41&#34;,&#34;line 41&#34;],[[68,68],&#34;src/competitive/data_structure/binary_search_tree/split.rs.html#104&#34;,&#34;line 104&#34;],[[72,72],&#34;src/competitive/data_structure/binary_search_tree/split.rs.html#108&#34;,&#34;line 108&#34;],[[76,76],&#34;src/competitive/data_structure/binary_search_tree/split.rs.html#112&#34;,&#34;line 112&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/split.rs (<a href=\"src/competitive/data_structure/binary_search_tree/split.rs.html#37\">line 37</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>36</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">left(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>37</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.left.as_ref().map(|node| node.</a><span class=\"highlight focus\">reborrow</span>())\n<span data-nosnippet>38</span>    }\n<span data-nosnippet>39</span>\n<span data-nosnippet>40</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">right(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>41</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.right.as_ref().map(|node| node.</a><span class=\"highlight\">reborrow</span>())\n<span data-nosnippet>42</span>    }\n<span data-nosnippet>43</span>\n<span data-nosnippet>44</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">left_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>45</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.left.as_mut().map(|node| node.borrow_datamut())\n<span data-nosnippet>46</span>    }\n<span data-nosnippet>47</span>\n<span data-nosnippet>48</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">right_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>49</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.right.as_mut().map(|node| node.borrow_datamut())\n<span data-nosnippet>50</span>    }\n<span data-nosnippet>51</span>}\n<span data-nosnippet>52</span>\n<span data-nosnippet>53</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt; Drop </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">Split&lt;</a><span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;\n<span data-nosnippet>54</span></a><span class=\"kw\">where\n<span data-nosnippet>55</span>    </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>56</span>{\n<span data-nosnippet>57</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">drop(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>58</span>        <span class=\"kw-2\">*</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.root = Spec::merge(</a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.left.take(), </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.right.take());\n<span data-nosnippet>59</span>    }\n<span data-nosnippet>60</span>}\n<span data-nosnippet>61</span>\n<span data-nosnippet>62</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">Split3&lt;</a><span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;\n<span data-nosnippet>63</span></a><span class=\"kw\">where\n<span data-nosnippet>64</span>    </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>65</span>{\n<span data-nosnippet>66</span>    left: </a><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>67</span>    mid: </a><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>68</span>    right: </a><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>69</span>    root: </a><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>70</span>}\n<span data-nosnippet>71</span>\n<span data-nosnippet>72</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt; Split3&lt;</a><span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;\n<span data-nosnippet>73</span></a><span class=\"kw\">where\n<span data-nosnippet>74</span>    </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>75</span>{\n<span data-nosnippet>76</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">new&lt;Seek1, Seek2&gt;(\n<span data-nosnippet>77</span>        node: </a><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>78</span>        start: Bound&lt;Seek1&gt;,\n<span data-nosnippet>79</span>        end: Bound&lt;Seek2&gt;,\n<span data-nosnippet>80</span>    ) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self\n<span data-nosnippet>81</span>    </a><span class=\"kw\">where\n<span data-nosnippet>82</span>        </span><a href=\"tools/scanner.rs.html#391\">Seek1: BstSeeker&lt;Spec = Spec&gt;,\n<span data-nosnippet>83</span>        Seek2: BstSeeker&lt;Spec = Spec&gt;,\n<span data-nosnippet>84</span>    {\n<span data-nosnippet>85</span>        </a><span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">rest, right) = </a><span class=\"kw\">match </span><a href=\"tools/scanner.rs.html#391\">end {\n<span data-nosnippet>86</span>            Bound::Included(seeker) =&gt; Spec::split(node.take(), seeker, </a><span class=\"bool-val\">true</span><a href=\"tools/scanner.rs.html#391\">),\n<span data-nosnippet>87</span>            Bound::Excluded(seeker) =&gt; Spec::split(node.take(), seeker, </a><span class=\"bool-val\">false</span><a href=\"tools/scanner.rs.html#391\">),\n<span data-nosnippet>88</span>            Bound::Unbounded =&gt; (node.take(), </a><span class=\"prelude-val\">None</span>),\n<span data-nosnippet>89</span>        };\n<span data-nosnippet>90</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(left, mid) = </a><span class=\"kw\">match </span><a href=\"tools/scanner.rs.html#391\">start {\n<span data-nosnippet>91</span>            Bound::Included(seeker) =&gt; Spec::split(rest.take(), seeker, </a><span class=\"bool-val\">false</span><a href=\"tools/scanner.rs.html#391\">),\n<span data-nosnippet>92</span>            Bound::Excluded(seeker) =&gt; Spec::split(rest.take(), seeker, </a><span class=\"bool-val\">true</span><a href=\"tools/scanner.rs.html#391\">),\n<span data-nosnippet>93</span>            Bound::Unbounded =&gt; (</a><span class=\"prelude-val\">None</span><a href=\"tools/scanner.rs.html#391\">, rest),\n<span data-nosnippet>94</span>        };\n<span data-nosnippet>95</span>        </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>96</span>            left,\n<span data-nosnippet>97</span>            mid,\n<span data-nosnippet>98</span>            right,\n<span data-nosnippet>99</span>            root: node,\n<span data-nosnippet>100</span>        }\n<span data-nosnippet>101</span>    }\n<span data-nosnippet>102</span>\n<span data-nosnippet>103</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">left(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>104</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.left.as_ref().map(|node| node.</a><span class=\"highlight\">reborrow</span>())\n<span data-nosnippet>105</span>    }\n<span data-nosnippet>106</span>\n<span data-nosnippet>107</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">mid(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>108</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.mid.as_ref().map(|node| node.</a><span class=\"highlight\">reborrow</span>())\n<span data-nosnippet>109</span>    }\n<span data-nosnippet>110</span>\n<span data-nosnippet>111</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">right(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>112</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.right.as_ref().map(|node| node.</a><span class=\"highlight\">reborrow</span>())\n<span data-nosnippet>113</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#29&#34;,&#34;line 29&#34;],[[27,27],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#55&#34;,&#34;line 55&#34;],[[65,65],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#93&#34;,&#34;line 93&#34;],[[96,96],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#124&#34;,&#34;line 124&#34;],[[142,142],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#170&#34;,&#34;line 170&#34;],[[150,150],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#178&#34;,&#34;line 178&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/seeker.rs (<a href=\"src/competitive/data_structure/binary_search_tree/seeker.rs.html#29\">line 29</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>28</span>    <span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>29</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">node.</a><span class=\"highlight focus\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().right().descend().is_ok() {\n<span data-nosnippet>30</span>            Ordering::Greater\n<span data-nosnippet>31</span>        } </a><span class=\"kw\">else </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>32</span>            Ordering::Equal\n<span data-nosnippet>33</span>        }\n<span data-nosnippet>34</span>    }\n<span data-nosnippet>35</span>}\n<span data-nosnippet>36</span>\n<span data-nosnippet>37</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">SeekRight&lt;Spec&gt; {\n<span data-nosnippet>38</span>    _marker: PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"tools/scanner.rs.html#391\">() -&gt; Spec&gt;,\n<span data-nosnippet>39</span>}\n<span data-nosnippet>40</span>\n<span data-nosnippet>41</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;S&gt; Default </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">SeekRight&lt;S&gt; {\n<span data-nosnippet>42</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">default() -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>43</span>        <a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>44</span>            _marker: PhantomData,\n<span data-nosnippet>45</span>        }\n<span data-nosnippet>46</span>    }\n<span data-nosnippet>47</span>}\n<span data-nosnippet>48</span>\n<span data-nosnippet>49</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;Spec&gt; BstSeeker </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">SeekRight&lt;Spec&gt;\n<span data-nosnippet>50</span></a><span class=\"kw\">where\n<span data-nosnippet>51</span>    </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>52</span>{\n<span data-nosnippet>53</span>    </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Spec = Spec;\n<span data-nosnippet>54</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>55</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">node.</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().left().descend().is_ok() {\n<span data-nosnippet>56</span>            Ordering::Less\n<span data-nosnippet>57</span>        } </a><span class=\"kw\">else </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>58</span>            Ordering::Equal\n<span data-nosnippet>59</span>        }\n<span data-nosnippet>60</span>    }\n<span data-nosnippet>61</span>}\n<span data-nosnippet>62</span>\n<span data-nosnippet>63</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">SeekByKey&lt;</a><span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec, K, Q&gt;\n<span data-nosnippet>64</span></a><span class=\"kw\">where\n<span data-nosnippet>65</span>    </span><a href=\"tools/scanner.rs.html#391\">Q: </a><span class=\"question-mark\">?</span><a href=\"tools/scanner.rs.html#391\">Sized,\n<span data-nosnippet>66</span>{\n<span data-nosnippet>67</span>    key: </a><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><a href=\"tools/scanner.rs.html#391\">Q,\n<span data-nosnippet>68</span>    _marker: PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"tools/scanner.rs.html#391\">() -&gt; (Spec, K)&gt;,\n<span data-nosnippet>69</span>}\n<span data-nosnippet>70</span>\n<span data-nosnippet>71</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec, K, Q&gt; SeekByKey&lt;</a><span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec, K, Q&gt;\n<span data-nosnippet>72</span></a><span class=\"kw\">where\n<span data-nosnippet>73</span>    </span><a href=\"tools/scanner.rs.html#391\">Q: </a><span class=\"question-mark\">?</span><a href=\"tools/scanner.rs.html#391\">Sized,\n<span data-nosnippet>74</span>{\n<span data-nosnippet>75</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">new(key: </a><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><a href=\"tools/scanner.rs.html#391\">Q) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>76</span>        <a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>77</span>            key,\n<span data-nosnippet>78</span>            _marker: PhantomData,\n<span data-nosnippet>79</span>        }\n<span data-nosnippet>80</span>    }\n<span data-nosnippet>81</span>}\n<span data-nosnippet>82</span>\n<span data-nosnippet>83</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;Spec, K, Q&gt; BstSeeker </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">SeekByKey&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec, K, Q&gt;\n<span data-nosnippet>84</span></a><span class=\"kw\">where\n<span data-nosnippet>85</span>    </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>86</span>    Spec::Data: BstDataAccess&lt;data::marker::Key, Value = K&gt;,\n<span data-nosnippet>87</span>    K: Borrow&lt;Q&gt;,\n<span data-nosnippet>88</span>    Q: Ord + </a><span class=\"question-mark\">?</span><a href=\"tools/scanner.rs.html#391\">Sized,\n<span data-nosnippet>89</span>{\n<span data-nosnippet>90</span>    </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Spec = Spec;\n<span data-nosnippet>91</span>\n<span data-nosnippet>92</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>93</span>        node.</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">()\n<span data-nosnippet>94</span>            .into_data()\n<span data-nosnippet>95</span>            .bst_data()\n<span data-nosnippet>96</span>            .borrow()\n<span data-nosnippet>97</span>            .cmp(</a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>98</span>    }\n<span data-nosnippet>99</span>}\n<span data-nosnippet>100</span>\n<span data-nosnippet>101</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">SeekBySize&lt;Spec&gt; {\n<span data-nosnippet>102</span>    index: usize,\n<span data-nosnippet>103</span>    _marker: PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"tools/scanner.rs.html#391\">() -&gt; Spec&gt;,\n<span data-nosnippet>104</span>}\n<span data-nosnippet>105</span>\n<span data-nosnippet>106</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;Spec&gt; SeekBySize&lt;Spec&gt; {\n<span data-nosnippet>107</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">new(index: usize) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>108</span>        <a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>109</span>            index,\n<span data-nosnippet>110</span>            _marker: PhantomData,\n<span data-nosnippet>111</span>        }\n<span data-nosnippet>112</span>    }\n<span data-nosnippet>113</span>}\n<span data-nosnippet>114</span>\n<span data-nosnippet>115</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;Spec&gt; BstSeeker </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">SeekBySize&lt;Spec&gt;\n<span data-nosnippet>116</span></a><span class=\"kw\">where\n<span data-nosnippet>117</span>    </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>118</span>    Spec::Data: BstDataAccess&lt;data::marker::Size, Value = usize&gt;,\n<span data-nosnippet>119</span>{\n<span data-nosnippet>120</span>    </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Spec = Spec;\n<span data-nosnippet>121</span>\n<span data-nosnippet>122</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>123</span>        </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">lsize = node\n<span data-nosnippet>124</span>            .</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">()\n<span data-nosnippet>125</span>            .left()\n<span data-nosnippet>126</span>            .descend()\n<span data-nosnippet>127</span>            .map(|l| </a><span class=\"kw-2\">*</span><a href=\"tools/scanner.rs.html#391\">l.into_data().bst_data())\n<span data-nosnippet>128</span>            .unwrap_or_default();\n<span data-nosnippet>129</span>        </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">ord = lsize.cmp(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.index);\n<span data-nosnippet>130</span>        </a><span class=\"kw\">if </span><span class=\"macro\">matches!</span><a href=\"tools/scanner.rs.html#391\">(ord, Ordering::Less) {\n<span data-nosnippet>131</span>            </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.index -= lsize + </a><span class=\"number\">1</span><a href=\"tools/scanner.rs.html#391\">;\n<span data-nosnippet>132</span>        }\n<span data-nosnippet>133</span>        ord\n<span data-nosnippet>134</span>    }\n<span data-nosnippet>135</span>}\n<span data-nosnippet>136</span>\n<span data-nosnippet>137</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">SeekByAccCond&lt;Spec, F, L&gt;\n<span data-nosnippet>138</span></a><span class=\"kw\">where\n<span data-nosnippet>139</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>140</span>{\n<span data-nosnippet>141</span>    acc: L::Agg,\n<span data-nosnippet>142</span>    f: F,\n<span data-nosnippet>143</span>    _marker: PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"tools/scanner.rs.html#391\">() -&gt; (Spec, L)&gt;,\n<span data-nosnippet>144</span>}\n<span data-nosnippet>145</span>\n<span data-nosnippet>146</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;Spec, F, L&gt; SeekByAccCond&lt;Spec, F, L&gt;\n<span data-nosnippet>147</span></a><span class=\"kw\">where\n<span data-nosnippet>148</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>149</span>    F: FnMut(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">L::Agg) -&gt; bool,\n<span data-nosnippet>150</span>{\n<span data-nosnippet>151</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">new(f: F) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>152</span>        <a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>153</span>            acc: L::agg_unit(),\n<span data-nosnippet>154</span>            f,\n<span data-nosnippet>155</span>            _marker: PhantomData,\n<span data-nosnippet>156</span>        }\n<span data-nosnippet>157</span>    }\n<span data-nosnippet>158</span>}\n<span data-nosnippet>159</span>\n<span data-nosnippet>160</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;Spec, F, L&gt; BstSeeker </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">SeekByAccCond&lt;Spec, F, L&gt;\n<span data-nosnippet>161</span></a><span class=\"kw\">where\n<span data-nosnippet>162</span>    </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>163</span>    Spec::Data: BstDataAccess&lt;data::marker::LazyMap, <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\">Value</a> = LazyMapElement&lt;L&gt;&gt;,\n<span data-nosnippet>164</span>    L: LazyMapMonoid,\n<span data-nosnippet>165</span>    F: FnMut(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">L::Agg) -&gt; bool,\n<span data-nosnippet>166</span>{\n<span data-nosnippet>167</span>    </a><span class=\"kw\">type </span><a href=\"tools/scanner.rs.html#391\">Spec = Spec;\n<span data-nosnippet>168</span>\n<span data-nosnippet>169</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>170</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().left().descend() {\n<span data-nosnippet>171</span>            </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">left_agg = </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">left.into_data().bst_data().agg;\n<span data-nosnippet>172</span>            </a><span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">nagg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.acc, left_agg);\n<span data-nosnippet>173</span>            </a><span class=\"kw\">if </span>(<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.f)(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">nagg) {\n<span data-nosnippet>174</span>                </a><span class=\"kw\">return </span><a href=\"tools/scanner.rs.html#391\">Ordering::Greater;\n<span data-nosnippet>175</span>            }\n<span data-nosnippet>176</span>            </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.acc = nagg;\n<span data-nosnippet>177</span>        }\n<span data-nosnippet>178</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.acc = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.acc, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().into_data().bst_data().agg);\n<span data-nosnippet>179</span>        </a><span class=\"kw\">if </span>(<span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.f)(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.acc) {\n<span data-nosnippet>180</span>            Ordering::Equal\n<span data-nosnippet>181</span>        } </a><span class=\"kw\">else </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>182</span>            Ordering::Less\n<span data-nosnippet>183</span>        }\n<span data-nosnippet>184</span>    }</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[5,5],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#47&#34;,&#34;line 47&#34;],[[6,6],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#48&#34;,&#34;line 48&#34;],[[9,9],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#51&#34;,&#34;line 51&#34;],[[118,118],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#160&#34;,&#34;line 160&#34;],[[119,119],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#161&#34;,&#34;line 161&#34;],[[146,146],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#188&#34;,&#34;line 188&#34;],[[147,147],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#189&#34;,&#34;line 189&#34;],[[150,150],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#192&#34;,&#34;line 192&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/data.rs (<a href=\"src/competitive/data_structure/binary_search_tree/data.rs.html#47\">line 47</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>42</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>43</span>    </a><span class=\"kw\">where\n<span data-nosnippet>44</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>45</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAgg, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>46</span>    {\n<span data-nosnippet>47</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">agg = node.</a><span class=\"highlight focus\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().into_data().bst_data().agg.clone();\n<span data-nosnippet>48</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().left().descend() {\n<span data-nosnippet>49</span>            agg = M::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">left.into_data().bst_data().agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg);\n<span data-nosnippet>50</span>        }\n<span data-nosnippet>51</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().right().descend() {\n<span data-nosnippet>52</span>            agg = M::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">right.into_data().bst_data().agg);\n<span data-nosnippet>53</span>        }\n<span data-nosnippet>54</span>        node.data_mut().bst_data_mut().agg = agg;\n<span data-nosnippet>55</span>    }\n<span data-nosnippet>56</span>}\n<span data-nosnippet>57</span>\n<span data-nosnippet>58</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">MonoidActElement&lt;M&gt;\n<span data-nosnippet>59</span></a><span class=\"kw\">where\n<span data-nosnippet>60</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>61</span>{\n<span data-nosnippet>62</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">key: M::Key,\n<span data-nosnippet>63</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">act: M::Act,\n<span data-nosnippet>64</span>}\n<span data-nosnippet>65</span>\n<span data-nosnippet>66</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;M&gt; Debug </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">MonoidActElement&lt;M&gt;\n<span data-nosnippet>67</span></a><span class=\"kw\">where\n<span data-nosnippet>68</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>69</span>    M::Key: Debug,\n<span data-nosnippet>70</span>    M::Act: Debug,\n<span data-nosnippet>71</span>{\n<span data-nosnippet>72</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">fmt(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">fmt::Formatter&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">&gt;) -&gt; fmt::Result {\n<span data-nosnippet>73</span>        f.debug_struct(</a><span class=\"string\">\"MonoidActElement\"</span><a href=\"tools/scanner.rs.html#391\">)\n<span data-nosnippet>74</span>            .field(</a><span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>75</span>            .field(</a><span class=\"string\">\"act\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.act)\n<span data-nosnippet>76</span>            .finish()\n<span data-nosnippet>77</span>    }\n<span data-nosnippet>78</span>}\n<span data-nosnippet>79</span>\n<span data-nosnippet>80</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;M&gt; MonoidActElement&lt;M&gt;\n<span data-nosnippet>81</span></a><span class=\"kw\">where\n<span data-nosnippet>82</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>83</span>{\n<span data-nosnippet>84</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">from_key(key: M::Key) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>85</span>        <a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>86</span>            key,\n<span data-nosnippet>87</span>            act: M::unit(),\n<span data-nosnippet>88</span>        }\n<span data-nosnippet>89</span>    }\n<span data-nosnippet>90</span>\n<span data-nosnippet>91</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">update_act&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;, act: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">M::Act)\n<span data-nosnippet>92</span>    </a><span class=\"kw\">where\n<span data-nosnippet>93</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>94</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAct, Value = </a><span class=\"self\">Self</span><a href=\"tools/scanner.rs.html#391\">&gt;,\n<span data-nosnippet>95</span>    {\n<span data-nosnippet>96</span>        M::operate_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, act);\n<span data-nosnippet>97</span>        M::act_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().key, act);\n<span data-nosnippet>98</span>    }\n<span data-nosnippet>99</span>\n<span data-nosnippet>100</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>101</span>    </a><span class=\"kw\">where\n<span data-nosnippet>102</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>103</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAct, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>104</span>    {\n<span data-nosnippet>105</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, M::unit());\n<span data-nosnippet>106</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow_datamut().left().descend() {\n<span data-nosnippet>107</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>108</span>        }\n<span data-nosnippet>109</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow_datamut().right().descend() {\n<span data-nosnippet>110</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>111</span>        }\n<span data-nosnippet>112</span>    }\n<span data-nosnippet>113</span>}\n<span data-nosnippet>114</span>\n<span data-nosnippet>115</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>116</span></a><span class=\"kw\">where\n<span data-nosnippet>117</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>118</span>{\n<span data-nosnippet>119</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">key: L::Key,\n<span data-nosnippet>120</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">agg: L::Agg,\n<span data-nosnippet>121</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">act: L::Act,\n<span data-nosnippet>122</span>}\n<span data-nosnippet>123</span>\n<span data-nosnippet>124</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;L&gt; Debug </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>125</span></a><span class=\"kw\">where\n<span data-nosnippet>126</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>127</span>    L::Key: Debug,\n<span data-nosnippet>128</span>    L::Agg: Debug,\n<span data-nosnippet>129</span>    L::Act: Debug,\n<span data-nosnippet>130</span>{\n<span data-nosnippet>131</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">fmt(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">fmt::Formatter&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">&gt;) -&gt; fmt::Result {\n<span data-nosnippet>132</span>        f.debug_struct(</a><span class=\"string\">\"LazyMapElement\"</span><a href=\"tools/scanner.rs.html#391\">)\n<span data-nosnippet>133</span>            .field(</a><span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>134</span>            .field(</a><span class=\"string\">\"agg\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.agg)\n<span data-nosnippet>135</span>            .field(</a><span class=\"string\">\"act\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.act)\n<span data-nosnippet>136</span>            .finish()\n<span data-nosnippet>137</span>    }\n<span data-nosnippet>138</span>}\n<span data-nosnippet>139</span>\n<span data-nosnippet>140</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;L&gt; LazyMapElement&lt;L&gt;\n<span data-nosnippet>141</span></a><span class=\"kw\">where\n<span data-nosnippet>142</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>143</span>{\n<span data-nosnippet>144</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">from_key(<a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\">key</a>: L::Key) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>145</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">agg = L::single_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">key);\n<span data-nosnippet>146</span>        </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>147</span>            key,\n<span data-nosnippet>148</span>            agg,\n<span data-nosnippet>149</span>            act: L::act_unit(),\n<span data-nosnippet>150</span>        }\n<span data-nosnippet>151</span>    }\n<span data-nosnippet>152</span>\n<span data-nosnippet>153</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">update_act&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;, act: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">L::Act)\n<span data-nosnippet>154</span>    </a><span class=\"kw\">where\n<span data-nosnippet>155</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>156</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span><a href=\"tools/scanner.rs.html#391\">&gt;,\n<span data-nosnippet>157</span>    {\n<span data-nosnippet>158</span>        L::act_operate_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, act);\n<span data-nosnippet>159</span>        node.data_mut().bst_data_mut().key =\n<span data-nosnippet>160</span>            L::act_key(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().into_data().bst_data().key, act);\n<span data-nosnippet>161</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(nxlazy) = L::act_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().into_data().bst_data().agg, act) {\n<span data-nosnippet>162</span>            node.data_mut().bst_data_mut().agg = nxlazy;\n<span data-nosnippet>163</span>        } </a><span class=\"kw\">else </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>164</span>            <span class=\"self\">Self</span>::top_down(node.reborrow_datamut());\n<span data-nosnippet>165</span>            <span class=\"self\">Self</span>::bottom_up(node.reborrow_datamut());\n<span data-nosnippet>166</span>        }\n<span data-nosnippet>167</span>    }\n<span data-nosnippet>168</span>\n<span data-nosnippet>169</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>170</span>    </a><span class=\"kw\">where\n<span data-nosnippet>171</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>172</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>173</span>    {\n<span data-nosnippet>174</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, L::act_unit());\n<span data-nosnippet>175</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow_datamut().left().descend() {\n<span data-nosnippet>176</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>177</span>        }\n<span data-nosnippet>178</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow_datamut().right().descend() {\n<span data-nosnippet>179</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>180</span>        }\n<span data-nosnippet>181</span>    }\n<span data-nosnippet>182</span>\n<span data-nosnippet>183</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>184</span>    </a><span class=\"kw\">where\n<span data-nosnippet>185</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>186</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>187</span>    {\n<span data-nosnippet>188</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">agg = L::single_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().into_data().bst_data().key);\n<span data-nosnippet>189</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().left().descend() {\n<span data-nosnippet>190</span>            agg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">left.into_data().bst_data().agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg);\n<span data-nosnippet>191</span>        }\n<span data-nosnippet>192</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.</a><span class=\"highlight\">reborrow</span><a href=\"tools/scanner.rs.html#391\">().right().descend() {\n<span data-nosnippet>193</span>            agg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">right.into_data().bst_data().agg);\n<span data-nosnippet>194</span>        }\n<span data-nosnippet>195</span>        node.data_mut().bst_data_mut().agg = agg;\n<span data-nosnippet>196</span>    }</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[9,9],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#235&#34;,&#34;line 235&#34;],[[173,173],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#399&#34;,&#34;line 399&#34;],[[174,174],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#400&#34;,&#34;line 400&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/node.rs (<a href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#235\">line 235</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>226</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">root_path(</a><span class=\"self\">self</span>) -&gt; (<span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">, Vec&lt;bool&gt;) {\n<span data-nosnippet>227</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>228</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">nn = node.node;\n<span data-nosnippet>229</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">stack = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>230</span>        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">root = </a><span class=\"kw\">loop </span>{\n<span data-nosnippet>231</span>            <span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node.ascend() {\n<span data-nosnippet>232</span>                </a><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(parent) =&gt; {\n<span data-nosnippet>233</span>                    node = parent;\n<span data-nosnippet>234</span>                    stack.push(\n<span data-nosnippet>235</span>                        node.</a><span class=\"highlight focus\">reborrow</span><a href=\"../tools/scanner.rs.html#391\">()\n<span data-nosnippet>236</span>                            .left()\n<span data-nosnippet>237</span>                            .descend()\n<span data-nosnippet>238</span>                            .map_or(</a><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">, |node| node.node == nn),\n<span data-nosnippet>239</span>                    );\n<span data-nosnippet>240</span>                    nn = node.node;\n<span data-nosnippet>241</span>                }\n<span data-nosnippet>242</span>                </a><span class=\"prelude-val\">Err</span><a href=\"../tools/scanner.rs.html#391\">(node) =&gt; {\n<span data-nosnippet>243</span>                    </a><span class=\"kw\">break </span><a href=\"../tools/scanner.rs.html#391\">node;\n<span data-nosnippet>244</span>                }\n<span data-nosnippet>245</span>            }\n<span data-nosnippet>246</span>        };\n<span data-nosnippet>247</span>        (root, stack)\n<span data-nosnippet>248</span>    }\n<span data-nosnippet>249</span>}\n<span data-nosnippet>250</span>\n<span data-nosnippet>251</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstNodeRef&lt;marker::Owned, Spec&gt;\n<span data-nosnippet>252</span></a><span class=\"kw\">where\n<span data-nosnippet>253</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>254</span>{\n<span data-nosnippet>255</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">new(node: NonNull&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>256</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>257</span>            node,\n<span data-nosnippet>258</span>            _marker: PhantomData,\n<span data-nosnippet>259</span>        }\n<span data-nosnippet>260</span>    }\n<span data-nosnippet>261</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">from_data&lt;<a href=\"#105\">A</a>&gt;(data: Spec::Data, allocator: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">A) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self\n<span data-nosnippet>262</span>    </a><span class=\"kw\">where\n<span data-nosnippet>263</span>        </span><a href=\"../tools/scanner.rs.html#391\">A: Allocator&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>264</span>    {\n<span data-nosnippet>265</span>        <span class=\"self\">Self</span>::new(allocator.allocate(BstNode::new(data)))\n<span data-nosnippet>266</span>    }\n<span data-nosnippet>267</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">borrow_mut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>268</span>        BstNodeRef {\n<span data-nosnippet>269</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>270</span>            _marker: PhantomData,\n<span data-nosnippet>271</span>        }\n<span data-nosnippet>272</span>    }\n<span data-nosnippet>273</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">borrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>274</span>        BstNodeRef {\n<span data-nosnippet>275</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>276</span>            _marker: PhantomData,\n<span data-nosnippet>277</span>        }\n<span data-nosnippet>278</span>    }\n<span data-nosnippet>279</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_dying(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Dying, Spec&gt; {\n<span data-nosnippet>280</span>        BstNodeRef {\n<span data-nosnippet>281</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>282</span>            _marker: PhantomData,\n<span data-nosnippet>283</span>        }\n<span data-nosnippet>284</span>    }\n<span data-nosnippet>285</span>}\n<span data-nosnippet>286</span>\n<span data-nosnippet>287</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>288</span></a><span class=\"kw\">where\n<span data-nosnippet>289</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>290</span>    Spec::Parent: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>291</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>292</span>{\n<span data-nosnippet>293</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_data(</a><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>294</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_ref().data }\n<span data-nosnippet>295</span>    }\n<span data-nosnippet>296</span>\n<span data-nosnippet>297</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">traverse&lt;F&gt;(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">F)\n<span data-nosnippet>298</span>    </a><span class=\"kw\">where\n<span data-nosnippet>299</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>300</span>        F: FnMut(</a><span class=\"self\">Self</span>),\n<span data-nosnippet>301</span>    {\n<span data-nosnippet>302</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.left().descend() {\n<span data-nosnippet>303</span>            left.traverse(f);\n<span data-nosnippet>304</span>        }\n<span data-nosnippet>305</span>        f(</a><span class=\"self\">self</span>);\n<span data-nosnippet>306</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(right) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.right().descend() {\n<span data-nosnippet>307</span>            right.traverse(f);\n<span data-nosnippet>308</span>        }\n<span data-nosnippet>309</span>    }\n<span data-nosnippet>310</span>\n<span data-nosnippet>311</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">leftmost(</a><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>312</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>313</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = node.left().descend() {\n<span data-nosnippet>314</span>            node = left;\n<span data-nosnippet>315</span>        }\n<span data-nosnippet>316</span>        </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)\n<span data-nosnippet>317</span>    }\n<span data-nosnippet>318</span>\n<span data-nosnippet>319</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">rightmost(</a><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>320</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>321</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(right) = node.right().descend() {\n<span data-nosnippet>322</span>            node = right;\n<span data-nosnippet>323</span>        }\n<span data-nosnippet>324</span>        </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)\n<span data-nosnippet>325</span>    }\n<span data-nosnippet>326</span>}\n<span data-nosnippet>327</span>\n<span data-nosnippet>328</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>329</span></a><span class=\"kw\">where\n<span data-nosnippet>330</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>331</span>{\n<span data-nosnippet>332</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>333</span>        BstNodeRef {\n<span data-nosnippet>334</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>335</span>            _marker: PhantomData,\n<span data-nosnippet>336</span>        }\n<span data-nosnippet>337</span>    }\n<span data-nosnippet>338</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">data_mut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>339</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_mut().data }\n<span data-nosnippet>340</span>    }\n<span data-nosnippet>341</span>}\n<span data-nosnippet>342</span>\n<span data-nosnippet>343</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>344</span></a><span class=\"kw\">where\n<span data-nosnippet>345</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>346</span>    Spec::Data: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>347</span>    Spec::Parent: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>348</span>{\n<span data-nosnippet>349</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_data_mut(</a><span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>350</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_mut().data }\n<span data-nosnippet>351</span>    }\n<span data-nosnippet>352</span>}\n<span data-nosnippet>353</span>\n<span data-nosnippet>354</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>355</span></a><span class=\"kw\">where\n<span data-nosnippet>356</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>357</span>{\n<span data-nosnippet>358</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>359</span>        BstNodeRef {\n<span data-nosnippet>360</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>361</span>            _marker: PhantomData,\n<span data-nosnippet>362</span>        }\n<span data-nosnippet>363</span>    }\n<span data-nosnippet>364</span>}\n<span data-nosnippet>365</span>\n<span data-nosnippet>366</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>367</span></a><span class=\"kw\">where\n<span data-nosnippet>368</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>369</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>370</span>{\n<span data-nosnippet>371</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">dormant(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DormantMut, Spec&gt; {\n<span data-nosnippet>372</span>        BstNodeRef {\n<span data-nosnippet>373</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>374</span>            _marker: PhantomData,\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>    }\n<span data-nosnippet>377</span>}\n<span data-nosnippet>378</span>\n<span data-nosnippet>379</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstNodeRef&lt;marker::DormantMut, Spec&gt;\n<span data-nosnippet>380</span></a><span class=\"kw\">where\n<span data-nosnippet>381</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>382</span>{\n<span data-nosnippet>383</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">awaken&lt;</a><span class=\"lifetime\">'a</span>&gt;(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>384</span>        BstNodeRef {\n<span data-nosnippet>385</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>386</span>            _marker: PhantomData,\n<span data-nosnippet>387</span>        }\n<span data-nosnippet>388</span>    }\n<span data-nosnippet>389</span>}\n<span data-nosnippet>390</span>\n<span data-nosnippet>391</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstNodeRef&lt;marker::Dying, Spec&gt;\n<span data-nosnippet>392</span></a><span class=\"kw\">where\n<span data-nosnippet>393</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>394</span>{\n<span data-nosnippet>395</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">into_data&lt;A&gt;(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, allocator: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">A) -&gt; Spec::Data\n<span data-nosnippet>396</span>    </a><span class=\"kw\">where\n<span data-nosnippet>397</span>        </span><a href=\"../tools/scanner.rs.html#391\">A: Allocator&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>398</span>    {\n<span data-nosnippet>399</span>        </a><span class=\"macro\">assert!</span>(<span class=\"self\">self</span>.<span class=\"highlight\">reborrow</span><a href=\"../tools/scanner.rs.html#391\">().left().descend().is_err());\n<span data-nosnippet>400</span>        </a><span class=\"macro\">assert!</span>(<span class=\"self\">self</span>.<span class=\"highlight\">reborrow</span><a href=\"../tools/scanner.rs.html#391\">().right().descend().is_err());\n<span data-nosnippet>401</span>        allocator.deallocate(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node).data\n<span data-nosnippet>402</span>    }</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[8,8],&#34;src/competitive/data_structure/treap.rs.html#135&#34;,&#34;line 135&#34;],[[8,8],&#34;src/competitive/data_structure/treap.rs.html#135&#34;,&#34;line 135&#34;],[[39,39],&#34;src/competitive/data_structure/treap.rs.html#166&#34;,&#34;line 166&#34;],[[84,84],&#34;src/competitive/data_structure/treap.rs.html#211&#34;,&#34;line 211&#34;],[[84,84],&#34;src/competitive/data_structure/treap.rs.html#211&#34;,&#34;line 211&#34;],[[86,86],&#34;src/competitive/data_structure/treap.rs.html#213&#34;,&#34;line 213&#34;],[[100,100],&#34;src/competitive/data_structure/treap.rs.html#227&#34;,&#34;line 227&#34;],[[256,256],&#34;src/competitive/data_structure/treap.rs.html#383&#34;,&#34;line 383&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/treap.rs (<a href=\"src/competitive/data_structure/treap.rs.html#135\">line 135</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>127</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">merge(\n<span data-nosnippet>128</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>129</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>130</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>131</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>132</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>133</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>134</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>135</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.</a><span class=\"highlight focus\">reborrow</span><a href=\"../tools/scanner.rs.html#391\">().into_data().priority &gt; right.</a><span class=\"highlight\">reborrow</span><a href=\"../tools/scanner.rs.html#391\">().into_data().priority {\n<span data-nosnippet>136</span>                    TreapSpec::top_down(left.borrow_datamut());\n<span data-nosnippet>137</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.borrow_mut().right().take();\n<span data-nosnippet>138</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = <span class=\"self\">Self</span>::merge(lr, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)).unwrap_unchecked();\n<span data-nosnippet>139</span>                    left.borrow_mut().right().set(lr);\n<span data-nosnippet>140</span>                    TreapSpec::bottom_up(left.borrow_datamut());\n<span data-nosnippet>141</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>142</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>143</span>                    TreapSpec::top_down(right.borrow_datamut());\n<span data-nosnippet>144</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.borrow_mut().left().take();\n<span data-nosnippet>145</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = <span class=\"self\">Self</span>::merge(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), rl).unwrap_unchecked();\n<span data-nosnippet>146</span>                    right.borrow_mut().left().set(rl);\n<span data-nosnippet>147</span>                    TreapSpec::bottom_up(right.borrow_datamut());\n<span data-nosnippet>148</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>149</span>                }\n<span data-nosnippet>150</span>            },\n<span data-nosnippet>151</span>        }\n<span data-nosnippet>152</span>    }\n<span data-nosnippet>153</span>\n<span data-nosnippet>154</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">split&lt;Seeker&gt;(\n<span data-nosnippet>155</span>        node: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>156</span>        </a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">seeker: Seeker,\n<span data-nosnippet>157</span>        eq_left: bool,\n<span data-nosnippet>158</span>    ) -&gt; (</a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;, </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;)\n<span data-nosnippet>159</span>    </a><span class=\"kw\">where\n<span data-nosnippet>160</span>        </span><a href=\"../tools/scanner.rs.html#391\">Seeker: BstSeeker&lt;Spec = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>161</span>    {\n<span data-nosnippet>162</span>        <span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node {\n<span data-nosnippet>163</span>            </a><span class=\"prelude-val\">None </span>=&gt; (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>),\n<span data-nosnippet>164</span>            <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node) =&gt; {\n<span data-nosnippet>165</span>                <span class=\"self\">Self</span>::top_down(node.borrow_datamut());\n<span data-nosnippet>166</span>                </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">seek_left = </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">seeker.bst_seek(node.</a><span class=\"highlight\">reborrow</span><a href=\"../tools/scanner.rs.html#391\">()) {\n<span data-nosnippet>167</span>                    Ordering::Less =&gt; </a><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>168</span>                    Ordering::Equal =&gt; !eq_left,\n<span data-nosnippet>169</span>                    Ordering::Greater =&gt; </a><span class=\"bool-val\">true</span>,\n<span data-nosnippet>170</span>                };\n<span data-nosnippet>171</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">seek_left {\n<span data-nosnippet>172</span>                    </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>173</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">left = node.borrow_mut().left().take();\n<span data-nosnippet>174</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(left, seeker, eq_left);\n<span data-nosnippet>175</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = r {\n<span data-nosnippet>176</span>                            node.borrow_mut().left().set(r);\n<span data-nosnippet>177</span>                        }\n<span data-nosnippet>178</span>                        <span class=\"self\">Self</span>::bottom_up(node.borrow_datamut());\n<span data-nosnippet>179</span>                        (l, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node))\n<span data-nosnippet>180</span>                    }\n<span data-nosnippet>181</span>                } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>182</span>                    <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>183</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">right = node.borrow_mut().right().take();\n<span data-nosnippet>184</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(right, seeker, eq_left);\n<span data-nosnippet>185</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = l {\n<span data-nosnippet>186</span>                            node.borrow_mut().right().set(l);\n<span data-nosnippet>187</span>                        }\n<span data-nosnippet>188</span>                        <span class=\"self\">Self</span>::bottom_up(node.borrow_datamut());\n<span data-nosnippet>189</span>                        (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), r)\n<span data-nosnippet>190</span>                    }\n<span data-nosnippet>191</span>                }\n<span data-nosnippet>192</span>            }\n<span data-nosnippet>193</span>        }\n<span data-nosnippet>194</span>    }\n<span data-nosnippet>195</span>}\n<span data-nosnippet>196</span>\n<span data-nosnippet>197</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L&gt; TreapSpec&lt;M, L&gt;\n<span data-nosnippet>198</span></a><span class=\"kw\">where\n<span data-nosnippet>199</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>200</span>    M::Key: Ord,\n<span data-nosnippet>201</span>    L: LazyMapMonoid,\n<span data-nosnippet>202</span>{\n<span data-nosnippet>203</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">merge_ordered(\n<span data-nosnippet>204</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>205</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>206</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>207</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>208</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>209</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>210</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>211</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.</a><span class=\"highlight\">reborrow</span><a href=\"../tools/scanner.rs.html#391\">().into_data().priority &gt; right.</a><span class=\"highlight\">reborrow</span><a href=\"../tools/scanner.rs.html#391\">().into_data().priority {\n<span data-nosnippet>212</span>                    <span class=\"self\">Self</span>::top_down(left.borrow_datamut());\n<span data-nosnippet>213</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">left.</a><span class=\"highlight\">reborrow</span><a href=\"../tools/scanner.rs.html#391\">().into_data().key.key;\n<span data-nosnippet>214</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(rl, rr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>215</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ll = left.borrow_mut().left().take();\n<span data-nosnippet>216</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.borrow_mut().right().take();\n<span data-nosnippet>217</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>218</span>                        left.borrow_mut().left().set(l);\n<span data-nosnippet>219</span>                    }\n<span data-nosnippet>220</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>221</span>                        left.borrow_mut().right().set(r);\n<span data-nosnippet>222</span>                    }\n<span data-nosnippet>223</span>                    <span class=\"self\">Self</span>::bottom_up(left.borrow_datamut());\n<span data-nosnippet>224</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>225</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>226</span>                    <span class=\"self\">Self</span>::top_down(right.borrow_datamut());\n<span data-nosnippet>227</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">right.</a><span class=\"highlight\">reborrow</span><a href=\"../tools/scanner.rs.html#391\">().into_data().key.key;\n<span data-nosnippet>228</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(ll, lr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>229</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.borrow_mut().left().take();\n<span data-nosnippet>230</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rr = right.borrow_mut().right().take();\n<span data-nosnippet>231</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>232</span>                        right.borrow_mut().left().set(l);\n<span data-nosnippet>233</span>                    }\n<span data-nosnippet>234</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>235</span>                        right.borrow_mut().right().set(r);\n<span data-nosnippet>236</span>                    }\n<span data-nosnippet>237</span>                    <span class=\"self\">Self</span>::bottom_up(right.borrow_datamut());\n<span data-nosnippet>238</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>239</span>                }\n<span data-nosnippet>240</span>            },\n<span data-nosnippet>241</span>        }\n<span data-nosnippet>242</span>    }\n<span data-nosnippet>243</span>}\n<span data-nosnippet>244</span>\n<span data-nosnippet>245</span></a><span class=\"kw\">pub struct </span><a href=\"../tools/scanner.rs.html#391\">Treap&lt;M, L, A = BoxAllocator&lt;TreapNode&lt;M, L&gt;&gt;&gt;\n<span data-nosnippet>246</span></a><span class=\"kw\">where\n<span data-nosnippet>247</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>248</span>    M::Key: Ord,\n<span data-nosnippet>249</span>    L: LazyMapMonoid,\n<span data-nosnippet>250</span>    A: Allocator&lt;TreapNode&lt;M, L&gt;&gt;,\n<span data-nosnippet>251</span>{\n<span data-nosnippet>252</span>    root: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>253</span>    node_id_manager: BstNodeIdManager&lt;TreapSpec&lt;M, L&gt;&gt;,\n<span data-nosnippet>254</span>    rng: Xorshift,\n<span data-nosnippet>255</span>    allocator: ManuallyDrop&lt;A&gt;,\n<span data-nosnippet>256</span>    _marker: PhantomData&lt;(M, L)&gt;,\n<span data-nosnippet>257</span>}\n<span data-nosnippet>258</span>\n<span data-nosnippet>259</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L, A&gt; Default </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">Treap&lt;M, <a href=\"lazy_map.rs.html#151\">L</a>, <a href=\"lazy_map.rs.html#151\">A</a>&gt;\n<span data-nosnippet>260</span></a><span class=\"kw\">where\n<span data-nosnippet>261</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>262</span>    M::Key: Ord,\n<span data-nosnippet>263</span>    L: LazyMapMonoid,\n<span data-nosnippet>264</span>    <a href=\"lazy_map.rs.html#151\">A</a>: Allocator&lt;TreapNode&lt;M, L&gt;&gt; + Default,\n<span data-nosnippet>265</span>{\n<span data-nosnippet>266</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">default() -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>267</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>268</span>            root: </a><span class=\"prelude-val\">None</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>269</span>            node_id_manager: Default::default(),\n<span data-nosnippet>270</span>            rng: Xorshift::new(),\n<span data-nosnippet>271</span>            allocator: ManuallyDrop::new(A::default()),\n<span data-nosnippet>272</span>            _marker: PhantomData,\n<span data-nosnippet>273</span>        }\n<span data-nosnippet>274</span>    }\n<span data-nosnippet>275</span>}\n<span data-nosnippet>276</span>\n<span data-nosnippet>277</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L, A&gt; Drop </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">Treap&lt;M, L, A&gt;\n<span data-nosnippet>278</span></a><span class=\"kw\">where\n<span data-nosnippet>279</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>280</span>    M::Key: Ord,\n<span data-nosnippet>281</span>    L: LazyMapMonoid,\n<span data-nosnippet>282</span>    A: Allocator&lt;TreapNode&lt;M, L&gt;&gt;,\n<span data-nosnippet>283</span>{\n<span data-nosnippet>284</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">drop(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>285</span>        <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>286</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(root) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root.take() {\n<span data-nosnippet>287</span>                root.into_dying().drop_all(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator.deref_mut());\n<span data-nosnippet>288</span>            }\n<span data-nosnippet>289</span>            ManuallyDrop::drop(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator);\n<span data-nosnippet>290</span>        }\n<span data-nosnippet>291</span>    }\n<span data-nosnippet>292</span>}\n<span data-nosnippet>293</span>\n<span data-nosnippet>294</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L&gt; Treap&lt;M, L&gt;\n<span data-nosnippet>295</span></a><span class=\"kw\">where\n<span data-nosnippet>296</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>297</span>    M::Key: Ord,\n<span data-nosnippet>298</span>    L: LazyMapMonoid,\n<span data-nosnippet>299</span>{\n<span data-nosnippet>300</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">new() -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>301</span>        <span class=\"self\">Self</span>::default()\n<span data-nosnippet>302</span>    }\n<span data-nosnippet>303</span>}\n<span data-nosnippet>304</span>\n<span data-nosnippet>305</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L, A&gt; Treap&lt;M, L, A&gt;\n<span data-nosnippet>306</span></a><span class=\"kw\">where\n<span data-nosnippet>307</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>308</span>    M::Key: Ord,\n<span data-nosnippet>309</span>    L: LazyMapMonoid,\n<span data-nosnippet>310</span>    A: Allocator&lt;TreapNode&lt;M, L&gt;&gt;,\n<span data-nosnippet>311</span>{\n<span data-nosnippet>312</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">len(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; usize {\n<span data-nosnippet>313</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.len()\n<span data-nosnippet>314</span>    }\n<span data-nosnippet>315</span>\n<span data-nosnippet>316</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">is_empty(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; bool {\n<span data-nosnippet>317</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.is_empty()\n<span data-nosnippet>318</span>    }\n<span data-nosnippet>319</span>\n<span data-nosnippet>320</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">clear(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>321</span>        <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>322</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(root) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root.take() {\n<span data-nosnippet>323</span>                root.into_dying().drop_all(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator.deref_mut());\n<span data-nosnippet>324</span>            }\n<span data-nosnippet>325</span>            </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.clear();\n<span data-nosnippet>326</span>        }\n<span data-nosnippet>327</span>    }\n<span data-nosnippet>328</span>\n<span data-nosnippet>329</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">get(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, node_id: BstNodeId&lt;TreapSpec&lt;M, L&gt;&gt;) -&gt; </a><span class=\"prelude-ty\">Option</span>&lt;(<span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">M::Key, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">L::Key)&gt; {\n<span data-nosnippet>330</span>        </a><span class=\"kw\">if </span>!<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.contains(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node_id) {\n<span data-nosnippet>331</span>            </a><span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>332</span>        }\n<span data-nosnippet>333</span>        <span class=\"kw\">unsafe </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>334</span>            WithParent::resolve_top_down::&lt;TreapSpec&lt;M, L&gt;&gt;(\n<span data-nosnippet>335</span>                node_id.reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root),\n<span data-nosnippet>336</span>            );\n<span data-nosnippet>337</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">data = node_id.reborrow(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root).into_data();\n<span data-nosnippet>338</span>            </a><span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">data.key.key, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">data.value.key))\n<span data-nosnippet>339</span>        }\n<span data-nosnippet>340</span>    }\n<span data-nosnippet>341</span>\n<span data-nosnippet>342</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">change(\n<span data-nosnippet>343</span>        </a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>344</span>        node_id: BstNodeId&lt;TreapSpec&lt;M, L&gt;&gt;,\n<span data-nosnippet>345</span>        f: </a><span class=\"kw\">impl </span><a href=\"../tools/scanner.rs.html#391\">FnOnce(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">L::Key),\n<span data-nosnippet>346</span>    ) -&gt; bool {\n<span data-nosnippet>347</span>        </a><span class=\"kw\">if </span>!<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.contains(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node_id) {\n<span data-nosnippet>348</span>            </a><span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n<span data-nosnippet>349</span>        }\n<span data-nosnippet>350</span>        <span class=\"kw\">unsafe </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>351</span>            WithParent::resolve_top_down::&lt;TreapSpec&lt;M, L&gt;&gt;(\n<span data-nosnippet>352</span>                node_id.reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root),\n<span data-nosnippet>353</span>            );\n<span data-nosnippet>354</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">data = node_id.reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root).into_data_mut();\n<span data-nosnippet>355</span>            f(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">data.value.key);\n<span data-nosnippet>356</span>            WithParent::resolve_bottom_up::&lt;TreapSpec&lt;M, L&gt;&gt;(\n<span data-nosnippet>357</span>                node_id.reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root),\n<span data-nosnippet>358</span>            );\n<span data-nosnippet>359</span>        }\n<span data-nosnippet>360</span>        </a><span class=\"bool-val\">true\n<span data-nosnippet>361</span>    </span>}\n<span data-nosnippet>362</span>\n<span data-nosnippet>363</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">insert(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, key: M::Key, value: L::Key) -&gt; BstNodeId&lt;TreapSpec&lt;M, L&gt;&gt; {\n<span data-nosnippet>364</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(left, right) = TreapSpec::split(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root.take(), SeekByKey::new(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>365</span>        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">data = TreapData {\n<span data-nosnippet>366</span>            priority: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.rng.rand64(),\n<span data-nosnippet>367</span>            key: MonoidActElement::from_key(key),\n<span data-nosnippet>368</span>            value: LazyMapElement::from_key(value),\n<span data-nosnippet>369</span>        };\n<span data-nosnippet>370</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">node = BstRoot::from_data(data, </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator.deref_mut());\n<span data-nosnippet>371</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">node_id = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.register(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node);\n<span data-nosnippet>372</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root = TreapSpec::merge(TreapSpec::merge(left, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)), right);\n<span data-nosnippet>373</span>        node_id\n<span data-nosnippet>374</span>    }\n<span data-nosnippet>375</span>\n<span data-nosnippet>376</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">fold&lt;Q, R&gt;(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, range: R) -&gt; L::Agg\n<span data-nosnippet>377</span>    </a><span class=\"kw\">where\n<span data-nosnippet>378</span>        </span><a href=\"../tools/scanner.rs.html#391\">M::Key: Borrow&lt;Q&gt;,\n<span data-nosnippet>379</span>        Q: Ord + </a><span class=\"question-mark\">?</span><a href=\"../tools/scanner.rs.html#391\">Sized,\n<span data-nosnippet>380</span>        R: RangeBounds&lt;Q&gt;,\n<span data-nosnippet>381</span>    {\n<span data-nosnippet>382</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node) = Split3::seek_by_key(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root, range).mid() {\n<span data-nosnippet>383</span>            node.</a><span class=\"highlight\">reborrow</span><a href=\"../tools/scanner.rs.html#391\">().into_data().value.agg.clone()\n<span data-nosnippet>384</span>        } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>385</span>            L::agg_unit()\n<span data-nosnippet>386</span>        }\n<span data-nosnippet>387</span>    }</a></code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.left\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#196-201\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.left\" class=\"fn\">left</a>(self) -&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstEdgeHandle.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstEdgeHandle\">BstEdgeHandle</a>&lt;Self, <a class=\"enum\" href=\"competitive/data_structure/binary_search_tree/node/marker/enum.Left.html\" title=\"enum competitive::data_structure::binary_search_tree::node::marker::Left\">Left</a>&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#55&#34;,&#34;line 55&#34;],[[71,71],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#125&#34;,&#34;line 125&#34;],[[116,116],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#170&#34;,&#34;line 170&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/seeker.rs (<a href=\"src/competitive/data_structure/binary_search_tree/seeker.rs.html#55\">line 55</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>54</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>55</span>        </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">node.reborrow().</a><span class=\"highlight focus\">left</span><a href=\"../tools/scanner.rs.html#391\">().descend().is_ok() {\n<span data-nosnippet>56</span>            Ordering::Less\n<span data-nosnippet>57</span>        } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>58</span>            Ordering::Equal\n<span data-nosnippet>59</span>        }\n<span data-nosnippet>60</span>    }\n<span data-nosnippet>61</span>}\n<span data-nosnippet>62</span>\n<span data-nosnippet>63</span></a><span class=\"kw\">pub struct </span><a href=\"../tools/scanner.rs.html#391\">SeekByKey&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec, K, Q&gt;\n<span data-nosnippet>64</span></a><span class=\"kw\">where\n<span data-nosnippet>65</span>    </span><a href=\"../tools/scanner.rs.html#391\">Q: </a><span class=\"question-mark\">?</span><a href=\"../tools/scanner.rs.html#391\">Sized,\n<span data-nosnippet>66</span>{\n<span data-nosnippet>67</span>    key: </a><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><a href=\"../tools/scanner.rs.html#391\">Q,\n<span data-nosnippet>68</span>    _marker: PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"../tools/scanner.rs.html#391\">() -&gt; (Spec, K)&gt;,\n<span data-nosnippet>69</span>}\n<span data-nosnippet>70</span>\n<span data-nosnippet>71</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec, K, Q&gt; SeekByKey&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec, K, Q&gt;\n<span data-nosnippet>72</span></a><span class=\"kw\">where\n<span data-nosnippet>73</span>    </span><a href=\"../tools/scanner.rs.html#391\">Q: </a><span class=\"question-mark\">?</span><a href=\"../tools/scanner.rs.html#391\">Sized,\n<span data-nosnippet>74</span>{\n<span data-nosnippet>75</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">new(key: </a><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><a href=\"../tools/scanner.rs.html#391\">Q) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>76</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>77</span>            key,\n<span data-nosnippet>78</span>            _marker: PhantomData,\n<span data-nosnippet>79</span>        }\n<span data-nosnippet>80</span>    }\n<span data-nosnippet>81</span>}\n<span data-nosnippet>82</span>\n<span data-nosnippet>83</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec, K, Q&gt; BstSeeker </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">SeekByKey&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">, Spec, K, Q&gt;\n<span data-nosnippet>84</span></a><span class=\"kw\">where\n<span data-nosnippet>85</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>86</span>    Spec::Data: BstDataAccess&lt;data::marker::Key, Value = K&gt;,\n<span data-nosnippet>87</span>    K: Borrow&lt;Q&gt;,\n<span data-nosnippet>88</span>    Q: Ord + </a><span class=\"question-mark\">?</span><a href=\"../tools/scanner.rs.html#391\">Sized,\n<span data-nosnippet>89</span>{\n<span data-nosnippet>90</span>    </a><span class=\"kw\">type </span><a href=\"../tools/scanner.rs.html#391\">Spec = Spec;\n<span data-nosnippet>91</span>\n<span data-nosnippet>92</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>93</span>        node.reborrow()\n<span data-nosnippet>94</span>            .into_data()\n<span data-nosnippet>95</span>            .bst_data()\n<span data-nosnippet>96</span>            .borrow()\n<span data-nosnippet>97</span>            .cmp(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>98</span>    }\n<span data-nosnippet>99</span>}\n<span data-nosnippet>100</span>\n<span data-nosnippet>101</span></a><span class=\"kw\">pub struct </span><a href=\"../tools/scanner.rs.html#391\">SeekBySize&lt;Spec&gt; {\n<span data-nosnippet>102</span>    index: usize,\n<span data-nosnippet>103</span>    _marker: PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"../tools/scanner.rs.html#391\">() -&gt; Spec&gt;,\n<span data-nosnippet>104</span>}\n<span data-nosnippet>105</span>\n<span data-nosnippet>106</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; SeekBySize&lt;Spec&gt; {\n<span data-nosnippet>107</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">new(index: usize) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>108</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>109</span>            index,\n<span data-nosnippet>110</span>            _marker: PhantomData,\n<span data-nosnippet>111</span>        }\n<span data-nosnippet>112</span>    }\n<span data-nosnippet>113</span>}\n<span data-nosnippet>114</span>\n<span data-nosnippet>115</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstSeeker </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">SeekBySize&lt;Spec&gt;\n<span data-nosnippet>116</span></a><span class=\"kw\">where\n<span data-nosnippet>117</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>118</span>    Spec::Data: BstDataAccess&lt;data::marker::Size, Value = usize&gt;,\n<span data-nosnippet>119</span>{\n<span data-nosnippet>120</span>    </a><span class=\"kw\">type </span><a href=\"../tools/scanner.rs.html#391\">Spec = Spec;\n<span data-nosnippet>121</span>\n<span data-nosnippet>122</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>123</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lsize = node\n<span data-nosnippet>124</span>            .reborrow()\n<span data-nosnippet>125</span>            .</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">()\n<span data-nosnippet>126</span>            .descend()\n<span data-nosnippet>127</span>            .map(|l| </a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">l.into_data().bst_data())\n<span data-nosnippet>128</span>            .unwrap_or_default();\n<span data-nosnippet>129</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ord = lsize.cmp(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.index);\n<span data-nosnippet>130</span>        </a><span class=\"kw\">if </span><span class=\"macro\">matches!</span><a href=\"../tools/scanner.rs.html#391\">(ord, Ordering::Less) {\n<span data-nosnippet>131</span>            </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.index -= lsize + </a><span class=\"number\">1</span><a href=\"../tools/scanner.rs.html#391\">;\n<span data-nosnippet>132</span>        }\n<span data-nosnippet>133</span>        ord\n<span data-nosnippet>134</span>    }\n<span data-nosnippet>135</span>}\n<span data-nosnippet>136</span>\n<span data-nosnippet>137</span></a><span class=\"kw\">pub struct </span><a href=\"../tools/scanner.rs.html#391\">SeekByAccCond&lt;Spec, F, L&gt;\n<span data-nosnippet>138</span></a><span class=\"kw\">where\n<span data-nosnippet>139</span>    </span><a href=\"../tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>140</span>{\n<span data-nosnippet>141</span>    acc: L::Agg,\n<span data-nosnippet>142</span>    f: F,\n<span data-nosnippet>143</span>    _marker: PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"../tools/scanner.rs.html#391\">() -&gt; (Spec, L)&gt;,\n<span data-nosnippet>144</span>}\n<span data-nosnippet>145</span>\n<span data-nosnippet>146</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec, F, L&gt; SeekByAccCond&lt;Spec, F, L&gt;\n<span data-nosnippet>147</span></a><span class=\"kw\">where\n<span data-nosnippet>148</span>    </span><a href=\"../tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>149</span>    F: FnMut(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">L::Agg) -&gt; bool,\n<span data-nosnippet>150</span>{\n<span data-nosnippet>151</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">new(f: F) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>152</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>153</span>            acc: L::agg_unit(),\n<span data-nosnippet>154</span>            f,\n<span data-nosnippet>155</span>            _marker: PhantomData,\n<span data-nosnippet>156</span>        }\n<span data-nosnippet>157</span>    }\n<span data-nosnippet>158</span>}\n<span data-nosnippet>159</span>\n<span data-nosnippet>160</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec, F, L&gt; BstSeeker </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">SeekByAccCond&lt;Spec, F, L&gt;\n<span data-nosnippet>161</span></a><span class=\"kw\">where\n<span data-nosnippet>162</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>163</span>    Spec::Data: BstDataAccess&lt;data::marker::LazyMap, <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\">Value</a> = LazyMapElement&lt;L&gt;&gt;,\n<span data-nosnippet>164</span>    L: LazyMapMonoid,\n<span data-nosnippet>165</span>    F: FnMut(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">L::Agg) -&gt; bool,\n<span data-nosnippet>166</span>{\n<span data-nosnippet>167</span>    </a><span class=\"kw\">type </span><a href=\"../tools/scanner.rs.html#391\">Spec = Spec;\n<span data-nosnippet>168</span>\n<span data-nosnippet>169</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>170</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = node.reborrow().</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>171</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">left_agg = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">left.into_data().bst_data().agg;\n<span data-nosnippet>172</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">nagg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.acc, left_agg);\n<span data-nosnippet>173</span>            </a><span class=\"kw\">if </span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.f)(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">nagg) {\n<span data-nosnippet>174</span>                </a><span class=\"kw\">return </span><a href=\"../tools/scanner.rs.html#391\">Ordering::Greater;\n<span data-nosnippet>175</span>            }\n<span data-nosnippet>176</span>            </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.acc = nagg;\n<span data-nosnippet>177</span>        }\n<span data-nosnippet>178</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.acc = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.acc, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().agg);\n<span data-nosnippet>179</span>        </a><span class=\"kw\">if </span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.f)(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.acc) {\n<span data-nosnippet>180</span>            Ordering::Equal\n<span data-nosnippet>181</span>        } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>182</span>            Ordering::Less\n<span data-nosnippet>183</span>        }\n<span data-nosnippet>184</span>    }</a></code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[6,6],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#48&#34;,&#34;line 48&#34;],[[64,64],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#106&#34;,&#34;line 106&#34;],[[133,133],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#175&#34;,&#34;line 175&#34;],[[147,147],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#189&#34;,&#34;line 189&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/data.rs (<a href=\"src/competitive/data_structure/binary_search_tree/data.rs.html#48\">line 48</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>42</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>43</span>    </a><span class=\"kw\">where\n<span data-nosnippet>44</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>45</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAgg, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>46</span>    {\n<span data-nosnippet>47</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">agg = node.reborrow().into_data().bst_data().agg.clone();\n<span data-nosnippet>48</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow().</a><span class=\"highlight focus\">left</span><a href=\"tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>49</span>            agg = M::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">left.into_data().bst_data().agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg);\n<span data-nosnippet>50</span>        }\n<span data-nosnippet>51</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow().right().descend() {\n<span data-nosnippet>52</span>            agg = M::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">right.into_data().bst_data().agg);\n<span data-nosnippet>53</span>        }\n<span data-nosnippet>54</span>        node.data_mut().bst_data_mut().agg = agg;\n<span data-nosnippet>55</span>    }\n<span data-nosnippet>56</span>}\n<span data-nosnippet>57</span>\n<span data-nosnippet>58</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">MonoidActElement&lt;M&gt;\n<span data-nosnippet>59</span></a><span class=\"kw\">where\n<span data-nosnippet>60</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>61</span>{\n<span data-nosnippet>62</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">key: M::Key,\n<span data-nosnippet>63</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">act: M::Act,\n<span data-nosnippet>64</span>}\n<span data-nosnippet>65</span>\n<span data-nosnippet>66</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;M&gt; Debug </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">MonoidActElement&lt;M&gt;\n<span data-nosnippet>67</span></a><span class=\"kw\">where\n<span data-nosnippet>68</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>69</span>    M::Key: Debug,\n<span data-nosnippet>70</span>    M::Act: Debug,\n<span data-nosnippet>71</span>{\n<span data-nosnippet>72</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">fmt(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">fmt::Formatter&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">&gt;) -&gt; fmt::Result {\n<span data-nosnippet>73</span>        f.debug_struct(</a><span class=\"string\">\"MonoidActElement\"</span><a href=\"tools/scanner.rs.html#391\">)\n<span data-nosnippet>74</span>            .field(</a><span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>75</span>            .field(</a><span class=\"string\">\"act\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.act)\n<span data-nosnippet>76</span>            .finish()\n<span data-nosnippet>77</span>    }\n<span data-nosnippet>78</span>}\n<span data-nosnippet>79</span>\n<span data-nosnippet>80</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;M&gt; MonoidActElement&lt;M&gt;\n<span data-nosnippet>81</span></a><span class=\"kw\">where\n<span data-nosnippet>82</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>83</span>{\n<span data-nosnippet>84</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">from_key(key: M::Key) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>85</span>        <a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>86</span>            key,\n<span data-nosnippet>87</span>            act: M::unit(),\n<span data-nosnippet>88</span>        }\n<span data-nosnippet>89</span>    }\n<span data-nosnippet>90</span>\n<span data-nosnippet>91</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">update_act&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;, act: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">M::Act)\n<span data-nosnippet>92</span>    </a><span class=\"kw\">where\n<span data-nosnippet>93</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>94</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAct, Value = </a><span class=\"self\">Self</span><a href=\"tools/scanner.rs.html#391\">&gt;,\n<span data-nosnippet>95</span>    {\n<span data-nosnippet>96</span>        M::operate_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, act);\n<span data-nosnippet>97</span>        M::act_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().key, act);\n<span data-nosnippet>98</span>    }\n<span data-nosnippet>99</span>\n<span data-nosnippet>100</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>101</span>    </a><span class=\"kw\">where\n<span data-nosnippet>102</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>103</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAct, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>104</span>    {\n<span data-nosnippet>105</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, M::unit());\n<span data-nosnippet>106</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow_datamut().</a><span class=\"highlight\">left</span><a href=\"tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>107</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>108</span>        }\n<span data-nosnippet>109</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow_datamut().right().descend() {\n<span data-nosnippet>110</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>111</span>        }\n<span data-nosnippet>112</span>    }\n<span data-nosnippet>113</span>}\n<span data-nosnippet>114</span>\n<span data-nosnippet>115</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>116</span></a><span class=\"kw\">where\n<span data-nosnippet>117</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>118</span>{\n<span data-nosnippet>119</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">key: L::Key,\n<span data-nosnippet>120</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">agg: L::Agg,\n<span data-nosnippet>121</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">act: L::Act,\n<span data-nosnippet>122</span>}\n<span data-nosnippet>123</span>\n<span data-nosnippet>124</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;L&gt; Debug </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>125</span></a><span class=\"kw\">where\n<span data-nosnippet>126</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>127</span>    L::Key: Debug,\n<span data-nosnippet>128</span>    L::Agg: Debug,\n<span data-nosnippet>129</span>    L::Act: Debug,\n<span data-nosnippet>130</span>{\n<span data-nosnippet>131</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">fmt(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">fmt::Formatter&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">&gt;) -&gt; fmt::Result {\n<span data-nosnippet>132</span>        f.debug_struct(</a><span class=\"string\">\"LazyMapElement\"</span><a href=\"tools/scanner.rs.html#391\">)\n<span data-nosnippet>133</span>            .field(</a><span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>134</span>            .field(</a><span class=\"string\">\"agg\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.agg)\n<span data-nosnippet>135</span>            .field(</a><span class=\"string\">\"act\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.act)\n<span data-nosnippet>136</span>            .finish()\n<span data-nosnippet>137</span>    }\n<span data-nosnippet>138</span>}\n<span data-nosnippet>139</span>\n<span data-nosnippet>140</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;L&gt; LazyMapElement&lt;L&gt;\n<span data-nosnippet>141</span></a><span class=\"kw\">where\n<span data-nosnippet>142</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>143</span>{\n<span data-nosnippet>144</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">from_key(<a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\">key</a>: L::Key) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>145</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">agg = L::single_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">key);\n<span data-nosnippet>146</span>        </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>147</span>            key,\n<span data-nosnippet>148</span>            agg,\n<span data-nosnippet>149</span>            act: L::act_unit(),\n<span data-nosnippet>150</span>        }\n<span data-nosnippet>151</span>    }\n<span data-nosnippet>152</span>\n<span data-nosnippet>153</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">update_act&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;, act: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">L::Act)\n<span data-nosnippet>154</span>    </a><span class=\"kw\">where\n<span data-nosnippet>155</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>156</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span><a href=\"tools/scanner.rs.html#391\">&gt;,\n<span data-nosnippet>157</span>    {\n<span data-nosnippet>158</span>        L::act_operate_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, act);\n<span data-nosnippet>159</span>        node.data_mut().bst_data_mut().key =\n<span data-nosnippet>160</span>            L::act_key(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().key, act);\n<span data-nosnippet>161</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(nxlazy) = L::act_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().agg, act) {\n<span data-nosnippet>162</span>            node.data_mut().bst_data_mut().agg = nxlazy;\n<span data-nosnippet>163</span>        } </a><span class=\"kw\">else </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>164</span>            <span class=\"self\">Self</span>::top_down(node.reborrow_datamut());\n<span data-nosnippet>165</span>            <span class=\"self\">Self</span>::bottom_up(node.reborrow_datamut());\n<span data-nosnippet>166</span>        }\n<span data-nosnippet>167</span>    }\n<span data-nosnippet>168</span>\n<span data-nosnippet>169</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>170</span>    </a><span class=\"kw\">where\n<span data-nosnippet>171</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>172</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>173</span>    {\n<span data-nosnippet>174</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, L::act_unit());\n<span data-nosnippet>175</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow_datamut().</a><span class=\"highlight\">left</span><a href=\"tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>176</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>177</span>        }\n<span data-nosnippet>178</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow_datamut().right().descend() {\n<span data-nosnippet>179</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>180</span>        }\n<span data-nosnippet>181</span>    }\n<span data-nosnippet>182</span>\n<span data-nosnippet>183</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>184</span>    </a><span class=\"kw\">where\n<span data-nosnippet>185</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>186</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>187</span>    {\n<span data-nosnippet>188</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">agg = L::single_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().key);\n<span data-nosnippet>189</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow().</a><span class=\"highlight\">left</span><a href=\"tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>190</span>            agg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">left.into_data().bst_data().agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg);\n<span data-nosnippet>191</span>        }\n<span data-nosnippet>192</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow().right().descend() {\n<span data-nosnippet>193</span>            agg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">right.into_data().bst_data().agg);\n<span data-nosnippet>194</span>        }\n<span data-nosnippet>195</span>        node.data_mut().bst_data_mut().agg = agg;\n<span data-nosnippet>196</span>    }</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[9,9],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#132&#34;,&#34;line 132&#34;],[[113,113],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#236&#34;,&#34;line 236&#34;],[[179,179],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#302&#34;,&#34;line 302&#34;],[[190,190],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#313&#34;,&#34;line 313&#34;],[[276,276],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#399&#34;,&#34;line 399&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/node.rs (<a href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#132\">line 132</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>123</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">resolve_top_down&lt;Spec&gt;(node: BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;)\n<span data-nosnippet>124</span>    </a><span class=\"kw\">where\n<span data-nosnippet>125</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec&lt;Data = Data, Parent = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>126</span>    {\n<span data-nosnippet>127</span>        <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>128</span>            <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node, </a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">stack) = node.root_path();\n<span data-nosnippet>129</span>            </a><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(is_left) = stack.pop() {\n<span data-nosnippet>130</span>                Spec::top_down(node.reborrow_datamut());\n<span data-nosnippet>131</span>                </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">is_left {\n<span data-nosnippet>132</span>                    node = node.</a><span class=\"highlight focus\">left</span><a href=\"../tools/scanner.rs.html#391\">().descend().unwrap_unchecked();\n<span data-nosnippet>133</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>134</span>                    node = node.right().descend().unwrap_unchecked();\n<span data-nosnippet>135</span>                }\n<span data-nosnippet>136</span>            }\n<span data-nosnippet>137</span>            Spec::top_down(node.reborrow_datamut());\n<span data-nosnippet>138</span>        }\n<span data-nosnippet>139</span>    }\n<span data-nosnippet>140</span>\n<span data-nosnippet>141</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">resolve_bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node: BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;)\n<span data-nosnippet>142</span>    </a><span class=\"kw\">where\n<span data-nosnippet>143</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec&lt;Data = Data, Parent = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>144</span>    {\n<span data-nosnippet>145</span>        <span class=\"kw\">loop </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>146</span>            Spec::bottom_up(node.reborrow_datamut());\n<span data-nosnippet>147</span>            </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node.ascend() {\n<span data-nosnippet>148</span>                </a><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(parent) =&gt; node = parent,\n<span data-nosnippet>149</span>                </a><span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">break</span>,\n<span data-nosnippet>150</span>            }\n<span data-nosnippet>151</span>        }\n<span data-nosnippet>152</span>    }\n<span data-nosnippet>153</span>}\n<span data-nosnippet>154</span>\n<span data-nosnippet>155</span><span class=\"kw\">pub struct </span><a href=\"../tools/scanner.rs.html#391\">BstNodeRef&lt;BorrowType, Spec&gt;\n<span data-nosnippet>156</span></a><span class=\"kw\">where\n<span data-nosnippet>157</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>158</span>{\n<span data-nosnippet>159</span>    </a><span class=\"kw\">pub </span><a href=\"../tools/scanner.rs.html#391\">node: NonNull&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>160</span>    _marker: PhantomData&lt;BorrowType&gt;,\n<span data-nosnippet>161</span>}\n<span data-nosnippet>162</span>\n<span data-nosnippet>163</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; Copy </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>164</span></a><span class=\"kw\">where\n<span data-nosnippet>165</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>166</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>167</span>{\n<span data-nosnippet>168</span>}\n<span data-nosnippet>169</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; Clone </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>170</span></a><span class=\"kw\">where\n<span data-nosnippet>171</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>172</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>173</span>{\n<span data-nosnippet>174</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">clone(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>175</span>        <span class=\"kw-2\">*</span><a class=\"self\" href=\"../tools/scanner.rs.html#391\">self\n<span data-nosnippet>176</span>    </a>}\n<span data-nosnippet>177</span>}\n<span data-nosnippet>178</span>\n<span data-nosnippet>179</span><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;BorrowType, Spec&gt; BstNodeRef&lt;BorrowType, Spec&gt;\n<span data-nosnippet>180</span></a><span class=\"kw\">where\n<span data-nosnippet>181</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>182</span>    BorrowType: marker::BorrowType,\n<span data-nosnippet>183</span>{\n<span data-nosnippet>184</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">new_unchecked(node: NonNull&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>185</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>186</span>            node,\n<span data-nosnippet>187</span>            _marker: PhantomData,\n<span data-nosnippet>188</span>        }\n<span data-nosnippet>189</span>    }\n<span data-nosnippet>190</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">reborrow(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>191</span>        BstNodeRef {\n<span data-nosnippet>192</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>193</span>            _marker: PhantomData,\n<span data-nosnippet>194</span>        }\n<span data-nosnippet>195</span>    }\n<span data-nosnippet>196</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">left(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstEdgeHandle&lt;</a><span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">, marker::Left&gt; {\n<span data-nosnippet>197</span>        BstEdgeHandle {\n<span data-nosnippet>198</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>199</span>            _marker: PhantomData,\n<span data-nosnippet>200</span>        }\n<span data-nosnippet>201</span>    }\n<span data-nosnippet>202</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">right(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstEdgeHandle&lt;</a><span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">, marker::Right&gt; {\n<span data-nosnippet>203</span>        BstEdgeHandle {\n<span data-nosnippet>204</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>205</span>            _marker: PhantomData,\n<span data-nosnippet>206</span>        }\n<span data-nosnippet>207</span>    }\n<span data-nosnippet>208</span>}\n<span data-nosnippet>209</span>\n<span data-nosnippet>210</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;BorrowType, Spec, Data&gt; BstNodeRef&lt;BorrowType, Spec&gt;\n<span data-nosnippet>211</span></a><span class=\"kw\">where\n<span data-nosnippet>212</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec&lt;Data = Data, Parent = WithParent&lt;Data&gt;&gt;,\n<span data-nosnippet>213</span>    BorrowType: marker::BorrowType,\n<span data-nosnippet>214</span>{\n<span data-nosnippet>215</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">ascend(</a><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span><a href=\"../tools/scanner.rs.html#391\">&lt;BstNodeRef&lt;BorrowType, Spec&gt;, </a><span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>216</span>        <span class=\"comment\">// const { [()][!BorrowType::TRAVERSAL_PERMIT as usize] };\n<span data-nosnippet>217</span>        </span><span class=\"macro\">assert!</span><a href=\"../tools/scanner.rs.html#391\">(BorrowType::TRAVERSAL_PERMIT);\n<span data-nosnippet>218</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">parent = </a><span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_ref().parent.parent };\n<span data-nosnippet>219</span>        parent\n<span data-nosnippet>220</span>            .map(|node| BstNodeRef {\n<span data-nosnippet>221</span>                node,\n<span data-nosnippet>222</span>                _marker: PhantomData,\n<span data-nosnippet>223</span>            })\n<span data-nosnippet>224</span>            .ok_or(</a><span class=\"self\">self</span>)\n<span data-nosnippet>225</span>    }\n<span data-nosnippet>226</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">root_path(</a><span class=\"self\">self</span>) -&gt; (<span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">, Vec&lt;bool&gt;) {\n<span data-nosnippet>227</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>228</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">nn = node.node;\n<span data-nosnippet>229</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">stack = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>230</span>        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">root = </a><span class=\"kw\">loop </span>{\n<span data-nosnippet>231</span>            <span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node.ascend() {\n<span data-nosnippet>232</span>                </a><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(parent) =&gt; {\n<span data-nosnippet>233</span>                    node = parent;\n<span data-nosnippet>234</span>                    stack.push(\n<span data-nosnippet>235</span>                        node.reborrow()\n<span data-nosnippet>236</span>                            .</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">()\n<span data-nosnippet>237</span>                            .descend()\n<span data-nosnippet>238</span>                            .map_or(</a><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">, |node| node.node == nn),\n<span data-nosnippet>239</span>                    );\n<span data-nosnippet>240</span>                    nn = node.node;\n<span data-nosnippet>241</span>                }\n<span data-nosnippet>242</span>                </a><span class=\"prelude-val\">Err</span><a href=\"../tools/scanner.rs.html#391\">(node) =&gt; {\n<span data-nosnippet>243</span>                    </a><span class=\"kw\">break </span><a href=\"../tools/scanner.rs.html#391\">node;\n<span data-nosnippet>244</span>                }\n<span data-nosnippet>245</span>            }\n<span data-nosnippet>246</span>        };\n<span data-nosnippet>247</span>        (root, stack)\n<span data-nosnippet>248</span>    }\n<span data-nosnippet>249</span>}\n<span data-nosnippet>250</span>\n<span data-nosnippet>251</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstNodeRef&lt;marker::Owned, Spec&gt;\n<span data-nosnippet>252</span></a><span class=\"kw\">where\n<span data-nosnippet>253</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>254</span>{\n<span data-nosnippet>255</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">new(node: NonNull&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>256</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>257</span>            node,\n<span data-nosnippet>258</span>            _marker: PhantomData,\n<span data-nosnippet>259</span>        }\n<span data-nosnippet>260</span>    }\n<span data-nosnippet>261</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">from_data&lt;<a href=\"lazy_map.rs.html#105\">A</a>&gt;(data: Spec::Data, allocator: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">A) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self\n<span data-nosnippet>262</span>    </a><span class=\"kw\">where\n<span data-nosnippet>263</span>        </span><a href=\"../tools/scanner.rs.html#391\">A: Allocator&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>264</span>    {\n<span data-nosnippet>265</span>        <span class=\"self\">Self</span>::new(allocator.allocate(BstNode::new(data)))\n<span data-nosnippet>266</span>    }\n<span data-nosnippet>267</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">borrow_mut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>268</span>        BstNodeRef {\n<span data-nosnippet>269</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>270</span>            _marker: PhantomData,\n<span data-nosnippet>271</span>        }\n<span data-nosnippet>272</span>    }\n<span data-nosnippet>273</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">borrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>274</span>        BstNodeRef {\n<span data-nosnippet>275</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>276</span>            _marker: PhantomData,\n<span data-nosnippet>277</span>        }\n<span data-nosnippet>278</span>    }\n<span data-nosnippet>279</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_dying(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Dying, Spec&gt; {\n<span data-nosnippet>280</span>        BstNodeRef {\n<span data-nosnippet>281</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>282</span>            _marker: PhantomData,\n<span data-nosnippet>283</span>        }\n<span data-nosnippet>284</span>    }\n<span data-nosnippet>285</span>}\n<span data-nosnippet>286</span>\n<span data-nosnippet>287</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>288</span></a><span class=\"kw\">where\n<span data-nosnippet>289</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>290</span>    Spec::Parent: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>291</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>292</span>{\n<span data-nosnippet>293</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_data(</a><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>294</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_ref().data }\n<span data-nosnippet>295</span>    }\n<span data-nosnippet>296</span>\n<span data-nosnippet>297</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">traverse&lt;F&gt;(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">F)\n<span data-nosnippet>298</span>    </a><span class=\"kw\">where\n<span data-nosnippet>299</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>300</span>        F: FnMut(</a><span class=\"self\">Self</span>),\n<span data-nosnippet>301</span>    {\n<span data-nosnippet>302</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = </a><span class=\"self\">self</span>.<span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>303</span>            left.traverse(f);\n<span data-nosnippet>304</span>        }\n<span data-nosnippet>305</span>        f(</a><span class=\"self\">self</span>);\n<span data-nosnippet>306</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(right) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.right().descend() {\n<span data-nosnippet>307</span>            right.traverse(f);\n<span data-nosnippet>308</span>        }\n<span data-nosnippet>309</span>    }\n<span data-nosnippet>310</span>\n<span data-nosnippet>311</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">leftmost(</a><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>312</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>313</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = node.</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>314</span>            node = left;\n<span data-nosnippet>315</span>        }\n<span data-nosnippet>316</span>        </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)\n<span data-nosnippet>317</span>    }\n<span data-nosnippet>318</span>\n<span data-nosnippet>319</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">rightmost(</a><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>320</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>321</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(right) = node.right().descend() {\n<span data-nosnippet>322</span>            node = right;\n<span data-nosnippet>323</span>        }\n<span data-nosnippet>324</span>        </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)\n<span data-nosnippet>325</span>    }\n<span data-nosnippet>326</span>}\n<span data-nosnippet>327</span>\n<span data-nosnippet>328</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>329</span></a><span class=\"kw\">where\n<span data-nosnippet>330</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>331</span>{\n<span data-nosnippet>332</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>333</span>        BstNodeRef {\n<span data-nosnippet>334</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>335</span>            _marker: PhantomData,\n<span data-nosnippet>336</span>        }\n<span data-nosnippet>337</span>    }\n<span data-nosnippet>338</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">data_mut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>339</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_mut().data }\n<span data-nosnippet>340</span>    }\n<span data-nosnippet>341</span>}\n<span data-nosnippet>342</span>\n<span data-nosnippet>343</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>344</span></a><span class=\"kw\">where\n<span data-nosnippet>345</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>346</span>    Spec::Data: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>347</span>    Spec::Parent: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>348</span>{\n<span data-nosnippet>349</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_data_mut(</a><span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>350</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_mut().data }\n<span data-nosnippet>351</span>    }\n<span data-nosnippet>352</span>}\n<span data-nosnippet>353</span>\n<span data-nosnippet>354</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>355</span></a><span class=\"kw\">where\n<span data-nosnippet>356</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>357</span>{\n<span data-nosnippet>358</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>359</span>        BstNodeRef {\n<span data-nosnippet>360</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>361</span>            _marker: PhantomData,\n<span data-nosnippet>362</span>        }\n<span data-nosnippet>363</span>    }\n<span data-nosnippet>364</span>}\n<span data-nosnippet>365</span>\n<span data-nosnippet>366</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>367</span></a><span class=\"kw\">where\n<span data-nosnippet>368</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>369</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>370</span>{\n<span data-nosnippet>371</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">dormant(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DormantMut, Spec&gt; {\n<span data-nosnippet>372</span>        BstNodeRef {\n<span data-nosnippet>373</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>374</span>            _marker: PhantomData,\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>    }\n<span data-nosnippet>377</span>}\n<span data-nosnippet>378</span>\n<span data-nosnippet>379</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstNodeRef&lt;marker::DormantMut, Spec&gt;\n<span data-nosnippet>380</span></a><span class=\"kw\">where\n<span data-nosnippet>381</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>382</span>{\n<span data-nosnippet>383</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">awaken&lt;</a><span class=\"lifetime\">'a</span>&gt;(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>384</span>        BstNodeRef {\n<span data-nosnippet>385</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>386</span>            _marker: PhantomData,\n<span data-nosnippet>387</span>        }\n<span data-nosnippet>388</span>    }\n<span data-nosnippet>389</span>}\n<span data-nosnippet>390</span>\n<span data-nosnippet>391</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstNodeRef&lt;marker::Dying, Spec&gt;\n<span data-nosnippet>392</span></a><span class=\"kw\">where\n<span data-nosnippet>393</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>394</span>{\n<span data-nosnippet>395</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">into_data&lt;A&gt;(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, allocator: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">A) -&gt; Spec::Data\n<span data-nosnippet>396</span>    </a><span class=\"kw\">where\n<span data-nosnippet>397</span>        </span><a href=\"../tools/scanner.rs.html#391\">A: Allocator&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>398</span>    {\n<span data-nosnippet>399</span>        </a><span class=\"macro\">assert!</span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.reborrow().</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">().descend().is_err());\n<span data-nosnippet>400</span>        </a><span class=\"macro\">assert!</span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.reborrow().right().descend().is_err());\n<span data-nosnippet>401</span>        allocator.deallocate(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node).data\n<span data-nosnippet>402</span>    }</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[17,17],&#34;src/competitive/data_structure/treap.rs.html#144&#34;,&#34;line 144&#34;],[[19,19],&#34;src/competitive/data_structure/treap.rs.html#146&#34;,&#34;line 146&#34;],[[46,46],&#34;src/competitive/data_structure/treap.rs.html#173&#34;,&#34;line 173&#34;],[[49,49],&#34;src/competitive/data_structure/treap.rs.html#176&#34;,&#34;line 176&#34;],[[88,88],&#34;src/competitive/data_structure/treap.rs.html#215&#34;,&#34;line 215&#34;],[[91,91],&#34;src/competitive/data_structure/treap.rs.html#218&#34;,&#34;line 218&#34;],[[102,102],&#34;src/competitive/data_structure/treap.rs.html#229&#34;,&#34;line 229&#34;],[[105,105],&#34;src/competitive/data_structure/treap.rs.html#232&#34;,&#34;line 232&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/treap.rs (<a href=\"src/competitive/data_structure/treap.rs.html#144\">line 144</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>127</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">merge(\n<span data-nosnippet>128</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>129</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>130</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>131</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>132</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>133</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>134</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>135</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().priority &gt; right.reborrow().into_data().priority {\n<span data-nosnippet>136</span>                    TreapSpec::top_down(left.borrow_datamut());\n<span data-nosnippet>137</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.borrow_mut().right().take();\n<span data-nosnippet>138</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = <span class=\"self\">Self</span>::merge(lr, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)).unwrap_unchecked();\n<span data-nosnippet>139</span>                    left.borrow_mut().right().set(lr);\n<span data-nosnippet>140</span>                    TreapSpec::bottom_up(left.borrow_datamut());\n<span data-nosnippet>141</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>142</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>143</span>                    TreapSpec::top_down(right.borrow_datamut());\n<span data-nosnippet>144</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.borrow_mut().</a><span class=\"highlight focus\">left</span><a href=\"../tools/scanner.rs.html#391\">().take();\n<span data-nosnippet>145</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = <span class=\"self\">Self</span>::merge(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), rl).unwrap_unchecked();\n<span data-nosnippet>146</span>                    right.borrow_mut().</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">().set(rl);\n<span data-nosnippet>147</span>                    TreapSpec::bottom_up(right.borrow_datamut());\n<span data-nosnippet>148</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>149</span>                }\n<span data-nosnippet>150</span>            },\n<span data-nosnippet>151</span>        }\n<span data-nosnippet>152</span>    }\n<span data-nosnippet>153</span>\n<span data-nosnippet>154</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">split&lt;Seeker&gt;(\n<span data-nosnippet>155</span>        node: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>156</span>        </a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">seeker: Seeker,\n<span data-nosnippet>157</span>        eq_left: bool,\n<span data-nosnippet>158</span>    ) -&gt; (</a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;, </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;)\n<span data-nosnippet>159</span>    </a><span class=\"kw\">where\n<span data-nosnippet>160</span>        </span><a href=\"../tools/scanner.rs.html#391\">Seeker: BstSeeker&lt;Spec = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>161</span>    {\n<span data-nosnippet>162</span>        <span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node {\n<span data-nosnippet>163</span>            </a><span class=\"prelude-val\">None </span>=&gt; (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>),\n<span data-nosnippet>164</span>            <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node) =&gt; {\n<span data-nosnippet>165</span>                <span class=\"self\">Self</span>::top_down(node.borrow_datamut());\n<span data-nosnippet>166</span>                </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">seek_left = </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">seeker.bst_seek(node.reborrow()) {\n<span data-nosnippet>167</span>                    Ordering::Less =&gt; </a><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>168</span>                    Ordering::Equal =&gt; !eq_left,\n<span data-nosnippet>169</span>                    Ordering::Greater =&gt; </a><span class=\"bool-val\">true</span>,\n<span data-nosnippet>170</span>                };\n<span data-nosnippet>171</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">seek_left {\n<span data-nosnippet>172</span>                    </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>173</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">left = node.borrow_mut().</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">().take();\n<span data-nosnippet>174</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(left, seeker, eq_left);\n<span data-nosnippet>175</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = r {\n<span data-nosnippet>176</span>                            node.borrow_mut().</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">().set(r);\n<span data-nosnippet>177</span>                        }\n<span data-nosnippet>178</span>                        <span class=\"self\">Self</span>::bottom_up(node.borrow_datamut());\n<span data-nosnippet>179</span>                        (l, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node))\n<span data-nosnippet>180</span>                    }\n<span data-nosnippet>181</span>                } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>182</span>                    <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>183</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">right = node.borrow_mut().right().take();\n<span data-nosnippet>184</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(right, seeker, eq_left);\n<span data-nosnippet>185</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = l {\n<span data-nosnippet>186</span>                            node.borrow_mut().right().set(l);\n<span data-nosnippet>187</span>                        }\n<span data-nosnippet>188</span>                        <span class=\"self\">Self</span>::bottom_up(node.borrow_datamut());\n<span data-nosnippet>189</span>                        (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), r)\n<span data-nosnippet>190</span>                    }\n<span data-nosnippet>191</span>                }\n<span data-nosnippet>192</span>            }\n<span data-nosnippet>193</span>        }\n<span data-nosnippet>194</span>    }\n<span data-nosnippet>195</span>}\n<span data-nosnippet>196</span>\n<span data-nosnippet>197</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L&gt; TreapSpec&lt;M, L&gt;\n<span data-nosnippet>198</span></a><span class=\"kw\">where\n<span data-nosnippet>199</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>200</span>    M::Key: Ord,\n<span data-nosnippet>201</span>    L: LazyMapMonoid,\n<span data-nosnippet>202</span>{\n<span data-nosnippet>203</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">merge_ordered(\n<span data-nosnippet>204</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>205</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>206</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>207</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>208</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>209</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>210</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>211</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().priority &gt; right.reborrow().into_data().priority {\n<span data-nosnippet>212</span>                    <span class=\"self\">Self</span>::top_down(left.borrow_datamut());\n<span data-nosnippet>213</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().key.key;\n<span data-nosnippet>214</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(rl, rr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>215</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ll = left.borrow_mut().</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">().take();\n<span data-nosnippet>216</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.borrow_mut().right().take();\n<span data-nosnippet>217</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>218</span>                        left.borrow_mut().</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">().set(l);\n<span data-nosnippet>219</span>                    }\n<span data-nosnippet>220</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>221</span>                        left.borrow_mut().right().set(r);\n<span data-nosnippet>222</span>                    }\n<span data-nosnippet>223</span>                    <span class=\"self\">Self</span>::bottom_up(left.borrow_datamut());\n<span data-nosnippet>224</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>225</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>226</span>                    <span class=\"self\">Self</span>::top_down(right.borrow_datamut());\n<span data-nosnippet>227</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">right.reborrow().into_data().key.key;\n<span data-nosnippet>228</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(ll, lr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>229</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.borrow_mut().</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">().take();\n<span data-nosnippet>230</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rr = right.borrow_mut().right().take();\n<span data-nosnippet>231</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>232</span>                        right.borrow_mut().</a><span class=\"highlight\">left</span><a href=\"../tools/scanner.rs.html#391\">().set(l);\n<span data-nosnippet>233</span>                    }\n<span data-nosnippet>234</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>235</span>                        right.borrow_mut().right().set(r);\n<span data-nosnippet>236</span>                    }\n<span data-nosnippet>237</span>                    <span class=\"self\">Self</span>::bottom_up(right.borrow_datamut());\n<span data-nosnippet>238</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>239</span>                }\n<span data-nosnippet>240</span>            },\n<span data-nosnippet>241</span>        }\n<span data-nosnippet>242</span>    }</a></code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.right\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#202-207\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.right\" class=\"fn\">right</a>(self) -&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstEdgeHandle.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstEdgeHandle\">BstEdgeHandle</a>&lt;Self, <a class=\"enum\" href=\"competitive/data_structure/binary_search_tree/node/marker/enum.Right.html\" title=\"enum competitive::data_structure::binary_search_tree::node::marker::Right\">Right</a>&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-3\"><a href=\"#scraped-examples-3\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#29&#34;,&#34;line 29&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/seeker.rs (<a href=\"src/competitive/data_structure/binary_search_tree/seeker.rs.html#29\">line 29</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>28</span>    <span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>29</span>        </a><span class=\"kw\">if </span><a href=\"tools/scanner.rs.html#391\">node.reborrow().</a><span class=\"highlight focus\">right</span><a href=\"tools/scanner.rs.html#391\">().descend().is_ok() {\n<span data-nosnippet>30</span>            Ordering::Greater\n<span data-nosnippet>31</span>        } </a><span class=\"kw\">else </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>32</span>            Ordering::Equal\n<span data-nosnippet>33</span>        }\n<span data-nosnippet>34</span>    }</a></code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[9,9],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#51&#34;,&#34;line 51&#34;],[[67,67],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#109&#34;,&#34;line 109&#34;],[[136,136],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#178&#34;,&#34;line 178&#34;],[[150,150],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#192&#34;,&#34;line 192&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/data.rs (<a href=\"src/competitive/data_structure/binary_search_tree/data.rs.html#51\">line 51</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>42</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>43</span>    </a><span class=\"kw\">where\n<span data-nosnippet>44</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>45</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAgg, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>46</span>    {\n<span data-nosnippet>47</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">agg = node.reborrow().into_data().bst_data().agg.clone();\n<span data-nosnippet>48</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow().left().descend() {\n<span data-nosnippet>49</span>            agg = M::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">left.into_data().bst_data().agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg);\n<span data-nosnippet>50</span>        }\n<span data-nosnippet>51</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow().</a><span class=\"highlight focus\">right</span><a href=\"tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>52</span>            agg = M::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">right.into_data().bst_data().agg);\n<span data-nosnippet>53</span>        }\n<span data-nosnippet>54</span>        node.data_mut().bst_data_mut().agg = agg;\n<span data-nosnippet>55</span>    }\n<span data-nosnippet>56</span>}\n<span data-nosnippet>57</span>\n<span data-nosnippet>58</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">MonoidActElement&lt;M&gt;\n<span data-nosnippet>59</span></a><span class=\"kw\">where\n<span data-nosnippet>60</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>61</span>{\n<span data-nosnippet>62</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">key: M::Key,\n<span data-nosnippet>63</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">act: M::Act,\n<span data-nosnippet>64</span>}\n<span data-nosnippet>65</span>\n<span data-nosnippet>66</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;M&gt; Debug </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">MonoidActElement&lt;M&gt;\n<span data-nosnippet>67</span></a><span class=\"kw\">where\n<span data-nosnippet>68</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>69</span>    M::Key: Debug,\n<span data-nosnippet>70</span>    M::Act: Debug,\n<span data-nosnippet>71</span>{\n<span data-nosnippet>72</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">fmt(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">fmt::Formatter&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">&gt;) -&gt; fmt::Result {\n<span data-nosnippet>73</span>        f.debug_struct(</a><span class=\"string\">\"MonoidActElement\"</span><a href=\"tools/scanner.rs.html#391\">)\n<span data-nosnippet>74</span>            .field(</a><span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>75</span>            .field(</a><span class=\"string\">\"act\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.act)\n<span data-nosnippet>76</span>            .finish()\n<span data-nosnippet>77</span>    }\n<span data-nosnippet>78</span>}\n<span data-nosnippet>79</span>\n<span data-nosnippet>80</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;M&gt; MonoidActElement&lt;M&gt;\n<span data-nosnippet>81</span></a><span class=\"kw\">where\n<span data-nosnippet>82</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>83</span>{\n<span data-nosnippet>84</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">from_key(key: M::Key) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>85</span>        <a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>86</span>            key,\n<span data-nosnippet>87</span>            act: M::unit(),\n<span data-nosnippet>88</span>        }\n<span data-nosnippet>89</span>    }\n<span data-nosnippet>90</span>\n<span data-nosnippet>91</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">update_act&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;, act: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">M::Act)\n<span data-nosnippet>92</span>    </a><span class=\"kw\">where\n<span data-nosnippet>93</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>94</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAct, Value = </a><span class=\"self\">Self</span><a href=\"tools/scanner.rs.html#391\">&gt;,\n<span data-nosnippet>95</span>    {\n<span data-nosnippet>96</span>        M::operate_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, act);\n<span data-nosnippet>97</span>        M::act_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().key, act);\n<span data-nosnippet>98</span>    }\n<span data-nosnippet>99</span>\n<span data-nosnippet>100</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>101</span>    </a><span class=\"kw\">where\n<span data-nosnippet>102</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>103</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAct, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>104</span>    {\n<span data-nosnippet>105</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, M::unit());\n<span data-nosnippet>106</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow_datamut().left().descend() {\n<span data-nosnippet>107</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>108</span>        }\n<span data-nosnippet>109</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow_datamut().</a><span class=\"highlight\">right</span><a href=\"tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>110</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>111</span>        }\n<span data-nosnippet>112</span>    }\n<span data-nosnippet>113</span>}\n<span data-nosnippet>114</span>\n<span data-nosnippet>115</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>116</span></a><span class=\"kw\">where\n<span data-nosnippet>117</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>118</span>{\n<span data-nosnippet>119</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">key: L::Key,\n<span data-nosnippet>120</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">agg: L::Agg,\n<span data-nosnippet>121</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">act: L::Act,\n<span data-nosnippet>122</span>}\n<span data-nosnippet>123</span>\n<span data-nosnippet>124</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;L&gt; Debug </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>125</span></a><span class=\"kw\">where\n<span data-nosnippet>126</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>127</span>    L::Key: Debug,\n<span data-nosnippet>128</span>    L::Agg: Debug,\n<span data-nosnippet>129</span>    L::Act: Debug,\n<span data-nosnippet>130</span>{\n<span data-nosnippet>131</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">fmt(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">fmt::Formatter&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">&gt;) -&gt; fmt::Result {\n<span data-nosnippet>132</span>        f.debug_struct(</a><span class=\"string\">\"LazyMapElement\"</span><a href=\"tools/scanner.rs.html#391\">)\n<span data-nosnippet>133</span>            .field(</a><span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>134</span>            .field(</a><span class=\"string\">\"agg\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.agg)\n<span data-nosnippet>135</span>            .field(</a><span class=\"string\">\"act\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.act)\n<span data-nosnippet>136</span>            .finish()\n<span data-nosnippet>137</span>    }\n<span data-nosnippet>138</span>}\n<span data-nosnippet>139</span>\n<span data-nosnippet>140</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;L&gt; LazyMapElement&lt;L&gt;\n<span data-nosnippet>141</span></a><span class=\"kw\">where\n<span data-nosnippet>142</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>143</span>{\n<span data-nosnippet>144</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">from_key(<a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\">key</a>: L::Key) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>145</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">agg = L::single_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">key);\n<span data-nosnippet>146</span>        </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>147</span>            key,\n<span data-nosnippet>148</span>            agg,\n<span data-nosnippet>149</span>            act: L::act_unit(),\n<span data-nosnippet>150</span>        }\n<span data-nosnippet>151</span>    }\n<span data-nosnippet>152</span>\n<span data-nosnippet>153</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">update_act&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;, act: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">L::Act)\n<span data-nosnippet>154</span>    </a><span class=\"kw\">where\n<span data-nosnippet>155</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>156</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span><a href=\"tools/scanner.rs.html#391\">&gt;,\n<span data-nosnippet>157</span>    {\n<span data-nosnippet>158</span>        L::act_operate_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, act);\n<span data-nosnippet>159</span>        node.data_mut().bst_data_mut().key =\n<span data-nosnippet>160</span>            L::act_key(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().key, act);\n<span data-nosnippet>161</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(nxlazy) = L::act_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().agg, act) {\n<span data-nosnippet>162</span>            node.data_mut().bst_data_mut().agg = nxlazy;\n<span data-nosnippet>163</span>        } </a><span class=\"kw\">else </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>164</span>            <span class=\"self\">Self</span>::top_down(node.reborrow_datamut());\n<span data-nosnippet>165</span>            <span class=\"self\">Self</span>::bottom_up(node.reborrow_datamut());\n<span data-nosnippet>166</span>        }\n<span data-nosnippet>167</span>    }\n<span data-nosnippet>168</span>\n<span data-nosnippet>169</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>170</span>    </a><span class=\"kw\">where\n<span data-nosnippet>171</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>172</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>173</span>    {\n<span data-nosnippet>174</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, L::act_unit());\n<span data-nosnippet>175</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow_datamut().left().descend() {\n<span data-nosnippet>176</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>177</span>        }\n<span data-nosnippet>178</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow_datamut().</a><span class=\"highlight\">right</span><a href=\"tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>179</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>180</span>        }\n<span data-nosnippet>181</span>    }\n<span data-nosnippet>182</span>\n<span data-nosnippet>183</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>184</span>    </a><span class=\"kw\">where\n<span data-nosnippet>185</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>186</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>187</span>    {\n<span data-nosnippet>188</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">agg = L::single_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().key);\n<span data-nosnippet>189</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow().left().descend() {\n<span data-nosnippet>190</span>            agg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">left.into_data().bst_data().agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg);\n<span data-nosnippet>191</span>        }\n<span data-nosnippet>192</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow().</a><span class=\"highlight\">right</span><a href=\"tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>193</span>            agg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">right.into_data().bst_data().agg);\n<span data-nosnippet>194</span>        }\n<span data-nosnippet>195</span>        node.data_mut().bst_data_mut().agg = agg;\n<span data-nosnippet>196</span>    }</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[11,11],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#134&#34;,&#34;line 134&#34;],[[183,183],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#306&#34;,&#34;line 306&#34;],[[198,198],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#321&#34;,&#34;line 321&#34;],[[277,277],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#400&#34;,&#34;line 400&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/node.rs (<a href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#134\">line 134</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>123</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">resolve_top_down&lt;Spec&gt;(node: BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;)\n<span data-nosnippet>124</span>    </a><span class=\"kw\">where\n<span data-nosnippet>125</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec&lt;Data = Data, Parent = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>126</span>    {\n<span data-nosnippet>127</span>        <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>128</span>            <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node, </a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">stack) = node.root_path();\n<span data-nosnippet>129</span>            </a><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(is_left) = stack.pop() {\n<span data-nosnippet>130</span>                Spec::top_down(node.reborrow_datamut());\n<span data-nosnippet>131</span>                </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">is_left {\n<span data-nosnippet>132</span>                    node = node.left().descend().unwrap_unchecked();\n<span data-nosnippet>133</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>134</span>                    node = node.</a><span class=\"highlight focus\">right</span><a href=\"../tools/scanner.rs.html#391\">().descend().unwrap_unchecked();\n<span data-nosnippet>135</span>                }\n<span data-nosnippet>136</span>            }\n<span data-nosnippet>137</span>            Spec::top_down(node.reborrow_datamut());\n<span data-nosnippet>138</span>        }\n<span data-nosnippet>139</span>    }\n<span data-nosnippet>140</span>\n<span data-nosnippet>141</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">resolve_bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node: BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;)\n<span data-nosnippet>142</span>    </a><span class=\"kw\">where\n<span data-nosnippet>143</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec&lt;Data = Data, Parent = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>144</span>    {\n<span data-nosnippet>145</span>        <span class=\"kw\">loop </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>146</span>            Spec::bottom_up(node.reborrow_datamut());\n<span data-nosnippet>147</span>            </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node.ascend() {\n<span data-nosnippet>148</span>                </a><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(parent) =&gt; node = parent,\n<span data-nosnippet>149</span>                </a><span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">break</span>,\n<span data-nosnippet>150</span>            }\n<span data-nosnippet>151</span>        }\n<span data-nosnippet>152</span>    }\n<span data-nosnippet>153</span>}\n<span data-nosnippet>154</span>\n<span data-nosnippet>155</span><span class=\"kw\">pub struct </span><a href=\"../tools/scanner.rs.html#391\">BstNodeRef&lt;BorrowType, Spec&gt;\n<span data-nosnippet>156</span></a><span class=\"kw\">where\n<span data-nosnippet>157</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>158</span>{\n<span data-nosnippet>159</span>    </a><span class=\"kw\">pub </span><a href=\"../tools/scanner.rs.html#391\">node: NonNull&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>160</span>    _marker: PhantomData&lt;BorrowType&gt;,\n<span data-nosnippet>161</span>}\n<span data-nosnippet>162</span>\n<span data-nosnippet>163</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; Copy </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>164</span></a><span class=\"kw\">where\n<span data-nosnippet>165</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>166</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>167</span>{\n<span data-nosnippet>168</span>}\n<span data-nosnippet>169</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; Clone </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>170</span></a><span class=\"kw\">where\n<span data-nosnippet>171</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>172</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>173</span>{\n<span data-nosnippet>174</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">clone(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>175</span>        <span class=\"kw-2\">*</span><a class=\"self\" href=\"../tools/scanner.rs.html#391\">self\n<span data-nosnippet>176</span>    </a>}\n<span data-nosnippet>177</span>}\n<span data-nosnippet>178</span>\n<span data-nosnippet>179</span><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;BorrowType, Spec&gt; BstNodeRef&lt;BorrowType, Spec&gt;\n<span data-nosnippet>180</span></a><span class=\"kw\">where\n<span data-nosnippet>181</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>182</span>    BorrowType: marker::BorrowType,\n<span data-nosnippet>183</span>{\n<span data-nosnippet>184</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">new_unchecked(node: NonNull&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>185</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>186</span>            node,\n<span data-nosnippet>187</span>            _marker: PhantomData,\n<span data-nosnippet>188</span>        }\n<span data-nosnippet>189</span>    }\n<span data-nosnippet>190</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">reborrow(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>191</span>        BstNodeRef {\n<span data-nosnippet>192</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>193</span>            _marker: PhantomData,\n<span data-nosnippet>194</span>        }\n<span data-nosnippet>195</span>    }\n<span data-nosnippet>196</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">left(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstEdgeHandle&lt;</a><span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">, marker::Left&gt; {\n<span data-nosnippet>197</span>        BstEdgeHandle {\n<span data-nosnippet>198</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>199</span>            _marker: PhantomData,\n<span data-nosnippet>200</span>        }\n<span data-nosnippet>201</span>    }\n<span data-nosnippet>202</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">right(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstEdgeHandle&lt;</a><span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">, marker::Right&gt; {\n<span data-nosnippet>203</span>        BstEdgeHandle {\n<span data-nosnippet>204</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>205</span>            _marker: PhantomData,\n<span data-nosnippet>206</span>        }\n<span data-nosnippet>207</span>    }\n<span data-nosnippet>208</span>}\n<span data-nosnippet>209</span>\n<span data-nosnippet>210</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;BorrowType, Spec, Data&gt; BstNodeRef&lt;BorrowType, Spec&gt;\n<span data-nosnippet>211</span></a><span class=\"kw\">where\n<span data-nosnippet>212</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec&lt;Data = Data, Parent = WithParent&lt;Data&gt;&gt;,\n<span data-nosnippet>213</span>    BorrowType: marker::BorrowType,\n<span data-nosnippet>214</span>{\n<span data-nosnippet>215</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">ascend(</a><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span><a href=\"../tools/scanner.rs.html#391\">&lt;BstNodeRef&lt;BorrowType, Spec&gt;, </a><span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>216</span>        <span class=\"comment\">// const { [()][!BorrowType::TRAVERSAL_PERMIT as usize] };\n<span data-nosnippet>217</span>        </span><span class=\"macro\">assert!</span><a href=\"../tools/scanner.rs.html#391\">(BorrowType::TRAVERSAL_PERMIT);\n<span data-nosnippet>218</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">parent = </a><span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_ref().parent.parent };\n<span data-nosnippet>219</span>        parent\n<span data-nosnippet>220</span>            .map(|node| BstNodeRef {\n<span data-nosnippet>221</span>                node,\n<span data-nosnippet>222</span>                _marker: PhantomData,\n<span data-nosnippet>223</span>            })\n<span data-nosnippet>224</span>            .ok_or(</a><span class=\"self\">self</span>)\n<span data-nosnippet>225</span>    }\n<span data-nosnippet>226</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">root_path(</a><span class=\"self\">self</span>) -&gt; (<span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">, Vec&lt;bool&gt;) {\n<span data-nosnippet>227</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>228</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">nn = node.node;\n<span data-nosnippet>229</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">stack = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>230</span>        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">root = </a><span class=\"kw\">loop </span>{\n<span data-nosnippet>231</span>            <span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node.ascend() {\n<span data-nosnippet>232</span>                </a><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(parent) =&gt; {\n<span data-nosnippet>233</span>                    node = parent;\n<span data-nosnippet>234</span>                    stack.push(\n<span data-nosnippet>235</span>                        node.reborrow()\n<span data-nosnippet>236</span>                            .left()\n<span data-nosnippet>237</span>                            .descend()\n<span data-nosnippet>238</span>                            .map_or(</a><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">, |node| node.node == nn),\n<span data-nosnippet>239</span>                    );\n<span data-nosnippet>240</span>                    nn = node.node;\n<span data-nosnippet>241</span>                }\n<span data-nosnippet>242</span>                </a><span class=\"prelude-val\">Err</span><a href=\"../tools/scanner.rs.html#391\">(node) =&gt; {\n<span data-nosnippet>243</span>                    </a><span class=\"kw\">break </span><a href=\"../tools/scanner.rs.html#391\">node;\n<span data-nosnippet>244</span>                }\n<span data-nosnippet>245</span>            }\n<span data-nosnippet>246</span>        };\n<span data-nosnippet>247</span>        (root, stack)\n<span data-nosnippet>248</span>    }\n<span data-nosnippet>249</span>}\n<span data-nosnippet>250</span>\n<span data-nosnippet>251</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstNodeRef&lt;marker::Owned, Spec&gt;\n<span data-nosnippet>252</span></a><span class=\"kw\">where\n<span data-nosnippet>253</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>254</span>{\n<span data-nosnippet>255</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">new(node: NonNull&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>256</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>257</span>            node,\n<span data-nosnippet>258</span>            _marker: PhantomData,\n<span data-nosnippet>259</span>        }\n<span data-nosnippet>260</span>    }\n<span data-nosnippet>261</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">from_data&lt;<a href=\"lazy_map.rs.html#105\">A</a>&gt;(data: Spec::Data, allocator: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">A) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self\n<span data-nosnippet>262</span>    </a><span class=\"kw\">where\n<span data-nosnippet>263</span>        </span><a href=\"../tools/scanner.rs.html#391\">A: Allocator&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>264</span>    {\n<span data-nosnippet>265</span>        <span class=\"self\">Self</span>::new(allocator.allocate(BstNode::new(data)))\n<span data-nosnippet>266</span>    }\n<span data-nosnippet>267</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">borrow_mut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>268</span>        BstNodeRef {\n<span data-nosnippet>269</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>270</span>            _marker: PhantomData,\n<span data-nosnippet>271</span>        }\n<span data-nosnippet>272</span>    }\n<span data-nosnippet>273</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">borrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>274</span>        BstNodeRef {\n<span data-nosnippet>275</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>276</span>            _marker: PhantomData,\n<span data-nosnippet>277</span>        }\n<span data-nosnippet>278</span>    }\n<span data-nosnippet>279</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_dying(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Dying, Spec&gt; {\n<span data-nosnippet>280</span>        BstNodeRef {\n<span data-nosnippet>281</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>282</span>            _marker: PhantomData,\n<span data-nosnippet>283</span>        }\n<span data-nosnippet>284</span>    }\n<span data-nosnippet>285</span>}\n<span data-nosnippet>286</span>\n<span data-nosnippet>287</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>288</span></a><span class=\"kw\">where\n<span data-nosnippet>289</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>290</span>    Spec::Parent: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>291</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>292</span>{\n<span data-nosnippet>293</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_data(</a><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>294</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_ref().data }\n<span data-nosnippet>295</span>    }\n<span data-nosnippet>296</span>\n<span data-nosnippet>297</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">traverse&lt;F&gt;(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">F)\n<span data-nosnippet>298</span>    </a><span class=\"kw\">where\n<span data-nosnippet>299</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>300</span>        F: FnMut(</a><span class=\"self\">Self</span>),\n<span data-nosnippet>301</span>    {\n<span data-nosnippet>302</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.left().descend() {\n<span data-nosnippet>303</span>            left.traverse(f);\n<span data-nosnippet>304</span>        }\n<span data-nosnippet>305</span>        f(</a><span class=\"self\">self</span>);\n<span data-nosnippet>306</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(right) = </a><span class=\"self\">self</span>.<span class=\"highlight\">right</span><a href=\"../tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>307</span>            right.traverse(f);\n<span data-nosnippet>308</span>        }\n<span data-nosnippet>309</span>    }\n<span data-nosnippet>310</span>\n<span data-nosnippet>311</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">leftmost(</a><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>312</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>313</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = node.left().descend() {\n<span data-nosnippet>314</span>            node = left;\n<span data-nosnippet>315</span>        }\n<span data-nosnippet>316</span>        </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)\n<span data-nosnippet>317</span>    }\n<span data-nosnippet>318</span>\n<span data-nosnippet>319</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">rightmost(</a><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>320</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>321</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(right) = node.</a><span class=\"highlight\">right</span><a href=\"../tools/scanner.rs.html#391\">().descend() {\n<span data-nosnippet>322</span>            node = right;\n<span data-nosnippet>323</span>        }\n<span data-nosnippet>324</span>        </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)\n<span data-nosnippet>325</span>    }\n<span data-nosnippet>326</span>}\n<span data-nosnippet>327</span>\n<span data-nosnippet>328</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>329</span></a><span class=\"kw\">where\n<span data-nosnippet>330</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>331</span>{\n<span data-nosnippet>332</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>333</span>        BstNodeRef {\n<span data-nosnippet>334</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>335</span>            _marker: PhantomData,\n<span data-nosnippet>336</span>        }\n<span data-nosnippet>337</span>    }\n<span data-nosnippet>338</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">data_mut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>339</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_mut().data }\n<span data-nosnippet>340</span>    }\n<span data-nosnippet>341</span>}\n<span data-nosnippet>342</span>\n<span data-nosnippet>343</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>344</span></a><span class=\"kw\">where\n<span data-nosnippet>345</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>346</span>    Spec::Data: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>347</span>    Spec::Parent: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>348</span>{\n<span data-nosnippet>349</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_data_mut(</a><span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>350</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_mut().data }\n<span data-nosnippet>351</span>    }\n<span data-nosnippet>352</span>}\n<span data-nosnippet>353</span>\n<span data-nosnippet>354</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>355</span></a><span class=\"kw\">where\n<span data-nosnippet>356</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>357</span>{\n<span data-nosnippet>358</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>359</span>        BstNodeRef {\n<span data-nosnippet>360</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>361</span>            _marker: PhantomData,\n<span data-nosnippet>362</span>        }\n<span data-nosnippet>363</span>    }\n<span data-nosnippet>364</span>}\n<span data-nosnippet>365</span>\n<span data-nosnippet>366</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>367</span></a><span class=\"kw\">where\n<span data-nosnippet>368</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>369</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>370</span>{\n<span data-nosnippet>371</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">dormant(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DormantMut, Spec&gt; {\n<span data-nosnippet>372</span>        BstNodeRef {\n<span data-nosnippet>373</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>374</span>            _marker: PhantomData,\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>    }\n<span data-nosnippet>377</span>}\n<span data-nosnippet>378</span>\n<span data-nosnippet>379</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstNodeRef&lt;marker::DormantMut, Spec&gt;\n<span data-nosnippet>380</span></a><span class=\"kw\">where\n<span data-nosnippet>381</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>382</span>{\n<span data-nosnippet>383</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">awaken&lt;</a><span class=\"lifetime\">'a</span>&gt;(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>384</span>        BstNodeRef {\n<span data-nosnippet>385</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>386</span>            _marker: PhantomData,\n<span data-nosnippet>387</span>        }\n<span data-nosnippet>388</span>    }\n<span data-nosnippet>389</span>}\n<span data-nosnippet>390</span>\n<span data-nosnippet>391</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstNodeRef&lt;marker::Dying, Spec&gt;\n<span data-nosnippet>392</span></a><span class=\"kw\">where\n<span data-nosnippet>393</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>394</span>{\n<span data-nosnippet>395</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">into_data&lt;A&gt;(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, allocator: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">A) -&gt; Spec::Data\n<span data-nosnippet>396</span>    </a><span class=\"kw\">where\n<span data-nosnippet>397</span>        </span><a href=\"../tools/scanner.rs.html#391\">A: Allocator&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>398</span>    {\n<span data-nosnippet>399</span>        </a><span class=\"macro\">assert!</span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.reborrow().left().descend().is_err());\n<span data-nosnippet>400</span>        </a><span class=\"macro\">assert!</span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.reborrow().</a><span class=\"highlight\">right</span><a href=\"../tools/scanner.rs.html#391\">().descend().is_err());\n<span data-nosnippet>401</span>        allocator.deallocate(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node).data\n<span data-nosnippet>402</span>    }</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[10,10],&#34;src/competitive/data_structure/treap.rs.html#137&#34;,&#34;line 137&#34;],[[12,12],&#34;src/competitive/data_structure/treap.rs.html#139&#34;,&#34;line 139&#34;],[[56,56],&#34;src/competitive/data_structure/treap.rs.html#183&#34;,&#34;line 183&#34;],[[59,59],&#34;src/competitive/data_structure/treap.rs.html#186&#34;,&#34;line 186&#34;],[[89,89],&#34;src/competitive/data_structure/treap.rs.html#216&#34;,&#34;line 216&#34;],[[94,94],&#34;src/competitive/data_structure/treap.rs.html#221&#34;,&#34;line 221&#34;],[[103,103],&#34;src/competitive/data_structure/treap.rs.html#230&#34;,&#34;line 230&#34;],[[108,108],&#34;src/competitive/data_structure/treap.rs.html#235&#34;,&#34;line 235&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/treap.rs (<a href=\"src/competitive/data_structure/treap.rs.html#137\">line 137</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>127</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">merge(\n<span data-nosnippet>128</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>129</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>130</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>131</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>132</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>133</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>134</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>135</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().priority &gt; right.reborrow().into_data().priority {\n<span data-nosnippet>136</span>                    TreapSpec::top_down(left.borrow_datamut());\n<span data-nosnippet>137</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.borrow_mut().</a><span class=\"highlight focus\">right</span><a href=\"../tools/scanner.rs.html#391\">().take();\n<span data-nosnippet>138</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = <span class=\"self\">Self</span>::merge(lr, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)).unwrap_unchecked();\n<span data-nosnippet>139</span>                    left.borrow_mut().</a><span class=\"highlight\">right</span><a href=\"../tools/scanner.rs.html#391\">().set(lr);\n<span data-nosnippet>140</span>                    TreapSpec::bottom_up(left.borrow_datamut());\n<span data-nosnippet>141</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>142</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>143</span>                    TreapSpec::top_down(right.borrow_datamut());\n<span data-nosnippet>144</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.borrow_mut().left().take();\n<span data-nosnippet>145</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = <span class=\"self\">Self</span>::merge(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), rl).unwrap_unchecked();\n<span data-nosnippet>146</span>                    right.borrow_mut().left().set(rl);\n<span data-nosnippet>147</span>                    TreapSpec::bottom_up(right.borrow_datamut());\n<span data-nosnippet>148</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>149</span>                }\n<span data-nosnippet>150</span>            },\n<span data-nosnippet>151</span>        }\n<span data-nosnippet>152</span>    }\n<span data-nosnippet>153</span>\n<span data-nosnippet>154</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">split&lt;Seeker&gt;(\n<span data-nosnippet>155</span>        node: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>156</span>        </a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">seeker: Seeker,\n<span data-nosnippet>157</span>        eq_left: bool,\n<span data-nosnippet>158</span>    ) -&gt; (</a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;, </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;)\n<span data-nosnippet>159</span>    </a><span class=\"kw\">where\n<span data-nosnippet>160</span>        </span><a href=\"../tools/scanner.rs.html#391\">Seeker: BstSeeker&lt;Spec = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>161</span>    {\n<span data-nosnippet>162</span>        <span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node {\n<span data-nosnippet>163</span>            </a><span class=\"prelude-val\">None </span>=&gt; (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>),\n<span data-nosnippet>164</span>            <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node) =&gt; {\n<span data-nosnippet>165</span>                <span class=\"self\">Self</span>::top_down(node.borrow_datamut());\n<span data-nosnippet>166</span>                </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">seek_left = </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">seeker.bst_seek(node.reborrow()) {\n<span data-nosnippet>167</span>                    Ordering::Less =&gt; </a><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>168</span>                    Ordering::Equal =&gt; !eq_left,\n<span data-nosnippet>169</span>                    Ordering::Greater =&gt; </a><span class=\"bool-val\">true</span>,\n<span data-nosnippet>170</span>                };\n<span data-nosnippet>171</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">seek_left {\n<span data-nosnippet>172</span>                    </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>173</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">left = node.borrow_mut().left().take();\n<span data-nosnippet>174</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(left, seeker, eq_left);\n<span data-nosnippet>175</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = r {\n<span data-nosnippet>176</span>                            node.borrow_mut().left().set(r);\n<span data-nosnippet>177</span>                        }\n<span data-nosnippet>178</span>                        <span class=\"self\">Self</span>::bottom_up(node.borrow_datamut());\n<span data-nosnippet>179</span>                        (l, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node))\n<span data-nosnippet>180</span>                    }\n<span data-nosnippet>181</span>                } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>182</span>                    <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>183</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">right = node.borrow_mut().</a><span class=\"highlight\">right</span><a href=\"../tools/scanner.rs.html#391\">().take();\n<span data-nosnippet>184</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(right, seeker, eq_left);\n<span data-nosnippet>185</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = l {\n<span data-nosnippet>186</span>                            node.borrow_mut().</a><span class=\"highlight\">right</span><a href=\"../tools/scanner.rs.html#391\">().set(l);\n<span data-nosnippet>187</span>                        }\n<span data-nosnippet>188</span>                        <span class=\"self\">Self</span>::bottom_up(node.borrow_datamut());\n<span data-nosnippet>189</span>                        (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), r)\n<span data-nosnippet>190</span>                    }\n<span data-nosnippet>191</span>                }\n<span data-nosnippet>192</span>            }\n<span data-nosnippet>193</span>        }\n<span data-nosnippet>194</span>    }\n<span data-nosnippet>195</span>}\n<span data-nosnippet>196</span>\n<span data-nosnippet>197</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L&gt; TreapSpec&lt;M, L&gt;\n<span data-nosnippet>198</span></a><span class=\"kw\">where\n<span data-nosnippet>199</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>200</span>    M::Key: Ord,\n<span data-nosnippet>201</span>    L: LazyMapMonoid,\n<span data-nosnippet>202</span>{\n<span data-nosnippet>203</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">merge_ordered(\n<span data-nosnippet>204</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>205</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>206</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>207</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>208</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>209</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>210</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>211</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().priority &gt; right.reborrow().into_data().priority {\n<span data-nosnippet>212</span>                    <span class=\"self\">Self</span>::top_down(left.borrow_datamut());\n<span data-nosnippet>213</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().key.key;\n<span data-nosnippet>214</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(rl, rr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>215</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ll = left.borrow_mut().left().take();\n<span data-nosnippet>216</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.borrow_mut().</a><span class=\"highlight\">right</span><a href=\"../tools/scanner.rs.html#391\">().take();\n<span data-nosnippet>217</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>218</span>                        left.borrow_mut().left().set(l);\n<span data-nosnippet>219</span>                    }\n<span data-nosnippet>220</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>221</span>                        left.borrow_mut().</a><span class=\"highlight\">right</span><a href=\"../tools/scanner.rs.html#391\">().set(r);\n<span data-nosnippet>222</span>                    }\n<span data-nosnippet>223</span>                    <span class=\"self\">Self</span>::bottom_up(left.borrow_datamut());\n<span data-nosnippet>224</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>225</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>226</span>                    <span class=\"self\">Self</span>::top_down(right.borrow_datamut());\n<span data-nosnippet>227</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">right.reborrow().into_data().key.key;\n<span data-nosnippet>228</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(ll, lr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>229</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.borrow_mut().left().take();\n<span data-nosnippet>230</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rr = right.borrow_mut().</a><span class=\"highlight\">right</span><a href=\"../tools/scanner.rs.html#391\">().take();\n<span data-nosnippet>231</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>232</span>                        right.borrow_mut().left().set(l);\n<span data-nosnippet>233</span>                    }\n<span data-nosnippet>234</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>235</span>                        right.borrow_mut().</a><span class=\"highlight\">right</span><a href=\"../tools/scanner.rs.html#391\">().set(r);\n<span data-nosnippet>236</span>                    }\n<span data-nosnippet>237</span>                    <span class=\"self\">Self</span>::bottom_up(right.borrow_datamut());\n<span data-nosnippet>238</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>239</span>                }\n<span data-nosnippet>240</span>            },\n<span data-nosnippet>241</span>        }\n<span data-nosnippet>242</span>    }</a></code></pre></div></div></div></details></div></details></div></details>",0,"competitive::data_structure::binary_search_tree::node::BstRoot","competitive::data_structure::binary_search_tree::node::BstDataMutRef","competitive::data_structure::binary_search_tree::node::BstImmutRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BstNodeRef%3CBorrowType,+Spec%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#210-249\">Source</a><a href=\"#impl-BstNodeRef%3CBorrowType,+Spec%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;BorrowType, Spec, Data&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;BorrowType, Spec&gt;<div class=\"where\">where\n    Spec: <a class=\"trait\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html\" title=\"trait competitive::data_structure::binary_search_tree::node::BstSpec\">BstSpec</a>&lt;Data = Data, Parent = <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.WithParent.html\" title=\"struct competitive::data_structure::binary_search_tree::node::WithParent\">WithParent</a>&lt;Data&gt;&gt;,\n    BorrowType: <a class=\"trait\" href=\"competitive/data_structure/binary_search_tree/node/marker/trait.BorrowType.html\" title=\"trait competitive::data_structure::binary_search_tree::node::marker::BorrowType\">BorrowType</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ascend\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#215-225\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.ascend\" class=\"fn\">ascend</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;BorrowType, Spec&gt;, Self&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[6,6],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#147&#34;,&#34;line 147&#34;],[[90,90],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#231&#34;,&#34;line 231&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/node.rs (<a href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#147\">line 147</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>141</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">resolve_bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node: BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;)\n<span data-nosnippet>142</span>    </a><span class=\"kw\">where\n<span data-nosnippet>143</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec&lt;Data = Data, Parent = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>144</span>    {\n<span data-nosnippet>145</span>        <span class=\"kw\">loop </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>146</span>            Spec::bottom_up(node.reborrow_datamut());\n<span data-nosnippet>147</span>            </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node.</a><span class=\"highlight focus\">ascend</span>() {\n<span data-nosnippet>148</span>                <span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(parent) =&gt; node = parent,\n<span data-nosnippet>149</span>                </a><span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">break</span>,\n<span data-nosnippet>150</span>            }\n<span data-nosnippet>151</span>        }\n<span data-nosnippet>152</span>    }\n<span data-nosnippet>153</span>}\n<span data-nosnippet>154</span>\n<span data-nosnippet>155</span><span class=\"kw\">pub struct </span><a href=\"../tools/scanner.rs.html#391\">BstNodeRef&lt;BorrowType, Spec&gt;\n<span data-nosnippet>156</span></a><span class=\"kw\">where\n<span data-nosnippet>157</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>158</span>{\n<span data-nosnippet>159</span>    </a><span class=\"kw\">pub </span><a href=\"../tools/scanner.rs.html#391\">node: NonNull&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>160</span>    _marker: PhantomData&lt;BorrowType&gt;,\n<span data-nosnippet>161</span>}\n<span data-nosnippet>162</span>\n<span data-nosnippet>163</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; Copy </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>164</span></a><span class=\"kw\">where\n<span data-nosnippet>165</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>166</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>167</span>{\n<span data-nosnippet>168</span>}\n<span data-nosnippet>169</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; Clone </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>170</span></a><span class=\"kw\">where\n<span data-nosnippet>171</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>172</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>173</span>{\n<span data-nosnippet>174</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">clone(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>175</span>        <span class=\"kw-2\">*</span><a class=\"self\" href=\"../tools/scanner.rs.html#391\">self\n<span data-nosnippet>176</span>    </a>}\n<span data-nosnippet>177</span>}\n<span data-nosnippet>178</span>\n<span data-nosnippet>179</span><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;BorrowType, Spec&gt; BstNodeRef&lt;BorrowType, Spec&gt;\n<span data-nosnippet>180</span></a><span class=\"kw\">where\n<span data-nosnippet>181</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>182</span>    BorrowType: marker::BorrowType,\n<span data-nosnippet>183</span>{\n<span data-nosnippet>184</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">new_unchecked(node: NonNull&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>185</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>186</span>            node,\n<span data-nosnippet>187</span>            _marker: PhantomData,\n<span data-nosnippet>188</span>        }\n<span data-nosnippet>189</span>    }\n<span data-nosnippet>190</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">reborrow(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>191</span>        BstNodeRef {\n<span data-nosnippet>192</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>193</span>            _marker: PhantomData,\n<span data-nosnippet>194</span>        }\n<span data-nosnippet>195</span>    }\n<span data-nosnippet>196</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">left(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstEdgeHandle&lt;</a><span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">, marker::Left&gt; {\n<span data-nosnippet>197</span>        BstEdgeHandle {\n<span data-nosnippet>198</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>199</span>            _marker: PhantomData,\n<span data-nosnippet>200</span>        }\n<span data-nosnippet>201</span>    }\n<span data-nosnippet>202</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">right(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstEdgeHandle&lt;</a><span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">, marker::Right&gt; {\n<span data-nosnippet>203</span>        BstEdgeHandle {\n<span data-nosnippet>204</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>205</span>            _marker: PhantomData,\n<span data-nosnippet>206</span>        }\n<span data-nosnippet>207</span>    }\n<span data-nosnippet>208</span>}\n<span data-nosnippet>209</span>\n<span data-nosnippet>210</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;BorrowType, Spec, Data&gt; BstNodeRef&lt;BorrowType, Spec&gt;\n<span data-nosnippet>211</span></a><span class=\"kw\">where\n<span data-nosnippet>212</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec&lt;Data = Data, Parent = WithParent&lt;Data&gt;&gt;,\n<span data-nosnippet>213</span>    BorrowType: marker::BorrowType,\n<span data-nosnippet>214</span>{\n<span data-nosnippet>215</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">ascend(</a><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Result</span><a href=\"../tools/scanner.rs.html#391\">&lt;BstNodeRef&lt;BorrowType, Spec&gt;, </a><span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>216</span>        <span class=\"comment\">// const { [()][!BorrowType::TRAVERSAL_PERMIT as usize] };\n<span data-nosnippet>217</span>        </span><span class=\"macro\">assert!</span><a href=\"../tools/scanner.rs.html#391\">(BorrowType::TRAVERSAL_PERMIT);\n<span data-nosnippet>218</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">parent = </a><span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_ref().parent.parent };\n<span data-nosnippet>219</span>        parent\n<span data-nosnippet>220</span>            .map(|node| BstNodeRef {\n<span data-nosnippet>221</span>                node,\n<span data-nosnippet>222</span>                _marker: PhantomData,\n<span data-nosnippet>223</span>            })\n<span data-nosnippet>224</span>            .ok_or(</a><span class=\"self\">self</span>)\n<span data-nosnippet>225</span>    }\n<span data-nosnippet>226</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">root_path(</a><span class=\"self\">self</span>) -&gt; (<span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">, Vec&lt;bool&gt;) {\n<span data-nosnippet>227</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>228</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">nn = node.node;\n<span data-nosnippet>229</span>        </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">stack = </a><span class=\"macro\">vec!</span>[];\n<span data-nosnippet>230</span>        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">root = </a><span class=\"kw\">loop </span>{\n<span data-nosnippet>231</span>            <span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node.</a><span class=\"highlight\">ascend</span>() {\n<span data-nosnippet>232</span>                <span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(parent) =&gt; {\n<span data-nosnippet>233</span>                    node = parent;\n<span data-nosnippet>234</span>                    stack.push(\n<span data-nosnippet>235</span>                        node.reborrow()\n<span data-nosnippet>236</span>                            .left()\n<span data-nosnippet>237</span>                            .descend()\n<span data-nosnippet>238</span>                            .map_or(</a><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">, |node| node.node == nn),\n<span data-nosnippet>239</span>                    );\n<span data-nosnippet>240</span>                    nn = node.node;\n<span data-nosnippet>241</span>                }\n<span data-nosnippet>242</span>                </a><span class=\"prelude-val\">Err</span><a href=\"../tools/scanner.rs.html#391\">(node) =&gt; {\n<span data-nosnippet>243</span>                    </a><span class=\"kw\">break </span><a href=\"../tools/scanner.rs.html#391\">node;\n<span data-nosnippet>244</span>                }\n<span data-nosnippet>245</span>            }\n<span data-nosnippet>246</span>        };\n<span data-nosnippet>247</span>        (root, stack)\n<span data-nosnippet>248</span>    }</a></code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.root_path\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#226-248\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.root_path\" class=\"fn\">root_path</a>(self) -&gt; (Self, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;)</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[5,5],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#128&#34;,&#34;line 128&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/node.rs (<a href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#128\">line 128</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>123</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">resolve_top_down&lt;Spec&gt;(node: BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;)\n<span data-nosnippet>124</span>    </a><span class=\"kw\">where\n<span data-nosnippet>125</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec&lt;Data = Data, Parent = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>126</span>    {\n<span data-nosnippet>127</span>        <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>128</span>            <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node, </a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">stack) = node.</a><span class=\"highlight focus\">root_path</span>();\n<span data-nosnippet>129</span>            <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(is_left) = stack.pop() {\n<span data-nosnippet>130</span>                Spec::top_down(node.reborrow_datamut());\n<span data-nosnippet>131</span>                </a><span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">is_left {\n<span data-nosnippet>132</span>                    node = node.left().descend().unwrap_unchecked();\n<span data-nosnippet>133</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>134</span>                    node = node.right().descend().unwrap_unchecked();\n<span data-nosnippet>135</span>                }\n<span data-nosnippet>136</span>            }\n<span data-nosnippet>137</span>            Spec::top_down(node.reborrow_datamut());\n<span data-nosnippet>138</span>        }\n<span data-nosnippet>139</span>    }</a></code></pre></div></div></div></details></div></details>",0,"competitive::data_structure::binary_search_tree::node::BstRoot","competitive::data_structure::binary_search_tree::node::BstDataMutRef","competitive::data_structure::binary_search_tree::node::BstImmutRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BstNodeRef%3CDataMut%3C'a%3E,+Spec%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#328-341\">Source</a><a href=\"#impl-BstNodeRef%3CDataMut%3C'a%3E,+Spec%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, Spec&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/marker/struct.DataMut.html\" title=\"struct competitive::data_structure::binary_search_tree::node::marker::DataMut\">DataMut</a>&lt;'a&gt;, Spec&gt;<div class=\"where\">where\n    Spec: <a class=\"trait\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html\" title=\"trait competitive::data_structure::binary_search_tree::node::BstSpec\">BstSpec</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.reborrow_datamut\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#332-337\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.reborrow_datamut\" class=\"fn\">reborrow_datamut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/marker/struct.DataMut.html\" title=\"struct competitive::data_structure::binary_search_tree::node::marker::DataMut\">DataMut</a>&lt;'_&gt;, Spec&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&#34;src/competitive/data_structure/treap.rs.html#119&#34;,&#34;line 119&#34;],[[2,2],&#34;src/competitive/data_structure/treap.rs.html#120&#34;,&#34;line 120&#34;],[[6,6],&#34;src/competitive/data_structure/treap.rs.html#124&#34;,&#34;line 124&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/treap.rs (<a href=\"src/competitive/data_structure/treap.rs.html#119\">line 119</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>118</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">top_down(</a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span>, <span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">&gt;) {\n<span data-nosnippet>119</span>        MonoidActElement::&lt;M&gt;::top_down(node.</a><span class=\"highlight focus\">reborrow_datamut</span><a href=\"../tools/scanner.rs.html#391\">());\n<span data-nosnippet>120</span>        LazyMapElement::&lt;L&gt;::top_down(node.</a><span class=\"highlight\">reborrow_datamut</span>());\n<span data-nosnippet>121</span>    }\n<span data-nosnippet>122</span>\n<span data-nosnippet>123</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">bottom_up(</a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span>, <span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">&gt;) {\n<span data-nosnippet>124</span>        LazyMapElement::&lt;L&gt;::bottom_up(node.</a><span class=\"highlight\">reborrow_datamut</span>());\n<span data-nosnippet>125</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[6,6],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#106&#34;,&#34;line 106&#34;],[[9,9],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#109&#34;,&#34;line 109&#34;],[[64,64],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#164&#34;,&#34;line 164&#34;],[[65,65],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#165&#34;,&#34;line 165&#34;],[[75,75],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#175&#34;,&#34;line 175&#34;],[[78,78],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#178&#34;,&#34;line 178&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/data.rs (<a href=\"src/competitive/data_structure/binary_search_tree/data.rs.html#106\">line 106</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>100</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>101</span>    </a><span class=\"kw\">where\n<span data-nosnippet>102</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>103</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAct, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>104</span>    {\n<span data-nosnippet>105</span>        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, M::unit());\n<span data-nosnippet>106</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = node.</a><span class=\"highlight focus\">reborrow_datamut</span><a href=\"../tools/scanner.rs.html#391\">().left().descend() {\n<span data-nosnippet>107</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">act);\n<span data-nosnippet>108</span>        }\n<span data-nosnippet>109</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(right) = node.</a><span class=\"highlight\">reborrow_datamut</span><a href=\"../tools/scanner.rs.html#391\">().right().descend() {\n<span data-nosnippet>110</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">act);\n<span data-nosnippet>111</span>        }\n<span data-nosnippet>112</span>    }\n<span data-nosnippet>113</span>}\n<span data-nosnippet>114</span>\n<span data-nosnippet>115</span></a><span class=\"kw\">pub struct </span><a href=\"../tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>116</span></a><span class=\"kw\">where\n<span data-nosnippet>117</span>    </span><a href=\"../tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>118</span>{\n<span data-nosnippet>119</span>    </a><span class=\"kw\">pub </span><a href=\"../tools/scanner.rs.html#391\">key: L::Key,\n<span data-nosnippet>120</span>    </a><span class=\"kw\">pub </span><a href=\"../tools/scanner.rs.html#391\">agg: L::Agg,\n<span data-nosnippet>121</span>    </a><span class=\"kw\">pub </span><a href=\"../tools/scanner.rs.html#391\">act: L::Act,\n<span data-nosnippet>122</span>}\n<span data-nosnippet>123</span>\n<span data-nosnippet>124</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;L&gt; Debug </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>125</span></a><span class=\"kw\">where\n<span data-nosnippet>126</span>    </span><a href=\"../tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>127</span>    L::Key: Debug,\n<span data-nosnippet>128</span>    L::Agg: Debug,\n<span data-nosnippet>129</span>    L::Act: Debug,\n<span data-nosnippet>130</span>{\n<span data-nosnippet>131</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">fmt(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">fmt::Formatter&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;) -&gt; fmt::Result {\n<span data-nosnippet>132</span>        f.debug_struct(</a><span class=\"string\">\"LazyMapElement\"</span><a href=\"../tools/scanner.rs.html#391\">)\n<span data-nosnippet>133</span>            .field(</a><span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>134</span>            .field(</a><span class=\"string\">\"agg\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.agg)\n<span data-nosnippet>135</span>            .field(</a><span class=\"string\">\"act\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.act)\n<span data-nosnippet>136</span>            .finish()\n<span data-nosnippet>137</span>    }\n<span data-nosnippet>138</span>}\n<span data-nosnippet>139</span>\n<span data-nosnippet>140</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;L&gt; LazyMapElement&lt;L&gt;\n<span data-nosnippet>141</span></a><span class=\"kw\">where\n<span data-nosnippet>142</span>    </span><a href=\"../tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>143</span>{\n<span data-nosnippet>144</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">from_key(<a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\">key</a>: L::Key) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>145</span>        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">agg = L::single_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">key);\n<span data-nosnippet>146</span>        </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>147</span>            key,\n<span data-nosnippet>148</span>            agg,\n<span data-nosnippet>149</span>            act: L::act_unit(),\n<span data-nosnippet>150</span>        }\n<span data-nosnippet>151</span>    }\n<span data-nosnippet>152</span>\n<span data-nosnippet>153</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">update_act&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt;, act: </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">L::Act)\n<span data-nosnippet>154</span>    </a><span class=\"kw\">where\n<span data-nosnippet>155</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>156</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span><a href=\"../tools/scanner.rs.html#391\">&gt;,\n<span data-nosnippet>157</span>    {\n<span data-nosnippet>158</span>        L::act_operate_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, act);\n<span data-nosnippet>159</span>        node.data_mut().bst_data_mut().key =\n<span data-nosnippet>160</span>            L::act_key(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().key, act);\n<span data-nosnippet>161</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(nxlazy) = L::act_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().agg, act) {\n<span data-nosnippet>162</span>            node.data_mut().bst_data_mut().agg = nxlazy;\n<span data-nosnippet>163</span>        } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>164</span>            <span class=\"self\">Self</span>::top_down(node.</a><span class=\"highlight\">reborrow_datamut</span><a href=\"../tools/scanner.rs.html#391\">());\n<span data-nosnippet>165</span>            <span class=\"self\">Self</span>::bottom_up(node.</a><span class=\"highlight\">reborrow_datamut</span>());\n<span data-nosnippet>166</span>        }\n<span data-nosnippet>167</span>    }\n<span data-nosnippet>168</span>\n<span data-nosnippet>169</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>170</span>    </a><span class=\"kw\">where\n<span data-nosnippet>171</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>172</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>173</span>    {\n<span data-nosnippet>174</span>        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, L::act_unit());\n<span data-nosnippet>175</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = node.</a><span class=\"highlight\">reborrow_datamut</span><a href=\"../tools/scanner.rs.html#391\">().left().descend() {\n<span data-nosnippet>176</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">act);\n<span data-nosnippet>177</span>        }\n<span data-nosnippet>178</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(right) = node.</a><span class=\"highlight\">reborrow_datamut</span><a href=\"../tools/scanner.rs.html#391\">().right().descend() {\n<span data-nosnippet>179</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">act);\n<span data-nosnippet>180</span>        }\n<span data-nosnippet>181</span>    }</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[7,7],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#130&#34;,&#34;line 130&#34;],[[14,14],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#137&#34;,&#34;line 137&#34;],[[23,23],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#146&#34;,&#34;line 146&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/node.rs (<a href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#130\">line 130</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>123</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">resolve_top_down&lt;Spec&gt;(node: BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;)\n<span data-nosnippet>124</span>    </a><span class=\"kw\">where\n<span data-nosnippet>125</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec&lt;Data = Data, Parent = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>126</span>    {\n<span data-nosnippet>127</span>        <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>128</span>            <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node, </a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">stack) = node.root_path();\n<span data-nosnippet>129</span>            </a><span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(is_left) = stack.pop() {\n<span data-nosnippet>130</span>                Spec::top_down(node.</a><span class=\"highlight focus\">reborrow_datamut</span>());\n<span data-nosnippet>131</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">is_left {\n<span data-nosnippet>132</span>                    node = node.left().descend().unwrap_unchecked();\n<span data-nosnippet>133</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>134</span>                    node = node.right().descend().unwrap_unchecked();\n<span data-nosnippet>135</span>                }\n<span data-nosnippet>136</span>            }\n<span data-nosnippet>137</span>            Spec::top_down(node.</a><span class=\"highlight\">reborrow_datamut</span>());\n<span data-nosnippet>138</span>        }\n<span data-nosnippet>139</span>    }\n<span data-nosnippet>140</span>\n<span data-nosnippet>141</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">resolve_bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node: BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;)\n<span data-nosnippet>142</span>    </a><span class=\"kw\">where\n<span data-nosnippet>143</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec&lt;Data = Data, Parent = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>144</span>    {\n<span data-nosnippet>145</span>        <span class=\"kw\">loop </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>146</span>            Spec::bottom_up(node.</a><span class=\"highlight\">reborrow_datamut</span>());\n<span data-nosnippet>147</span>            <span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node.ascend() {\n<span data-nosnippet>148</span>                </a><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(parent) =&gt; node = parent,\n<span data-nosnippet>149</span>                </a><span class=\"prelude-val\">Err</span>(<span class=\"kw\">_</span>) =&gt; <span class=\"kw\">break</span>,\n<span data-nosnippet>150</span>            }\n<span data-nosnippet>151</span>        }\n<span data-nosnippet>152</span>    }</code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.data_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#338-340\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.data_mut\" class=\"fn\">data_mut</a>(&amp;mut self) -&gt; &amp;mut Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[12,12],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#54&#34;,&#34;line 54&#34;],[[54,54],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#96&#34;,&#34;line 96&#34;],[[55,55],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#97&#34;,&#34;line 97&#34;],[[63,63],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#105&#34;,&#34;line 105&#34;],[[116,116],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#158&#34;,&#34;line 158&#34;],[[117,117],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#159&#34;,&#34;line 159&#34;],[[120,120],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#162&#34;,&#34;line 162&#34;],[[132,132],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#174&#34;,&#34;line 174&#34;],[[153,153],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#195&#34;,&#34;line 195&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/data.rs (<a href=\"src/competitive/data_structure/binary_search_tree/data.rs.html#54\">line 54</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>42</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>43</span>    </a><span class=\"kw\">where\n<span data-nosnippet>44</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>45</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAgg, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>46</span>    {\n<span data-nosnippet>47</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">agg = node.reborrow().into_data().bst_data().agg.clone();\n<span data-nosnippet>48</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow().left().descend() {\n<span data-nosnippet>49</span>            agg = M::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">left.into_data().bst_data().agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg);\n<span data-nosnippet>50</span>        }\n<span data-nosnippet>51</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow().right().descend() {\n<span data-nosnippet>52</span>            agg = M::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">right.into_data().bst_data().agg);\n<span data-nosnippet>53</span>        }\n<span data-nosnippet>54</span>        node.</a><span class=\"highlight focus\">data_mut</span><a href=\"tools/scanner.rs.html#391\">().bst_data_mut().agg = agg;\n<span data-nosnippet>55</span>    }\n<span data-nosnippet>56</span>}\n<span data-nosnippet>57</span>\n<span data-nosnippet>58</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">MonoidActElement&lt;M&gt;\n<span data-nosnippet>59</span></a><span class=\"kw\">where\n<span data-nosnippet>60</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>61</span>{\n<span data-nosnippet>62</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">key: M::Key,\n<span data-nosnippet>63</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">act: M::Act,\n<span data-nosnippet>64</span>}\n<span data-nosnippet>65</span>\n<span data-nosnippet>66</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;M&gt; Debug </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">MonoidActElement&lt;M&gt;\n<span data-nosnippet>67</span></a><span class=\"kw\">where\n<span data-nosnippet>68</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>69</span>    M::Key: Debug,\n<span data-nosnippet>70</span>    M::Act: Debug,\n<span data-nosnippet>71</span>{\n<span data-nosnippet>72</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">fmt(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">fmt::Formatter&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">&gt;) -&gt; fmt::Result {\n<span data-nosnippet>73</span>        f.debug_struct(</a><span class=\"string\">\"MonoidActElement\"</span><a href=\"tools/scanner.rs.html#391\">)\n<span data-nosnippet>74</span>            .field(</a><span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>75</span>            .field(</a><span class=\"string\">\"act\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.act)\n<span data-nosnippet>76</span>            .finish()\n<span data-nosnippet>77</span>    }\n<span data-nosnippet>78</span>}\n<span data-nosnippet>79</span>\n<span data-nosnippet>80</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;M&gt; MonoidActElement&lt;M&gt;\n<span data-nosnippet>81</span></a><span class=\"kw\">where\n<span data-nosnippet>82</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>83</span>{\n<span data-nosnippet>84</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">from_key(key: M::Key) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>85</span>        <a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>86</span>            key,\n<span data-nosnippet>87</span>            act: M::unit(),\n<span data-nosnippet>88</span>        }\n<span data-nosnippet>89</span>    }\n<span data-nosnippet>90</span>\n<span data-nosnippet>91</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">update_act&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;, act: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">M::Act)\n<span data-nosnippet>92</span>    </a><span class=\"kw\">where\n<span data-nosnippet>93</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>94</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAct, Value = </a><span class=\"self\">Self</span><a href=\"tools/scanner.rs.html#391\">&gt;,\n<span data-nosnippet>95</span>    {\n<span data-nosnippet>96</span>        M::operate_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.</a><span class=\"highlight\">data_mut</span><a href=\"tools/scanner.rs.html#391\">().bst_data_mut().act, act);\n<span data-nosnippet>97</span>        M::act_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.</a><span class=\"highlight\">data_mut</span><a href=\"tools/scanner.rs.html#391\">().bst_data_mut().key, act);\n<span data-nosnippet>98</span>    }\n<span data-nosnippet>99</span>\n<span data-nosnippet>100</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>101</span>    </a><span class=\"kw\">where\n<span data-nosnippet>102</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>103</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAct, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>104</span>    {\n<span data-nosnippet>105</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.</a><span class=\"highlight\">data_mut</span><a href=\"tools/scanner.rs.html#391\">().bst_data_mut().act, M::unit());\n<span data-nosnippet>106</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow_datamut().left().descend() {\n<span data-nosnippet>107</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>108</span>        }\n<span data-nosnippet>109</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow_datamut().right().descend() {\n<span data-nosnippet>110</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>111</span>        }\n<span data-nosnippet>112</span>    }\n<span data-nosnippet>113</span>}\n<span data-nosnippet>114</span>\n<span data-nosnippet>115</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>116</span></a><span class=\"kw\">where\n<span data-nosnippet>117</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>118</span>{\n<span data-nosnippet>119</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">key: L::Key,\n<span data-nosnippet>120</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">agg: L::Agg,\n<span data-nosnippet>121</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">act: L::Act,\n<span data-nosnippet>122</span>}\n<span data-nosnippet>123</span>\n<span data-nosnippet>124</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;L&gt; Debug </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>125</span></a><span class=\"kw\">where\n<span data-nosnippet>126</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>127</span>    L::Key: Debug,\n<span data-nosnippet>128</span>    L::Agg: Debug,\n<span data-nosnippet>129</span>    L::Act: Debug,\n<span data-nosnippet>130</span>{\n<span data-nosnippet>131</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">fmt(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">fmt::Formatter&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">&gt;) -&gt; fmt::Result {\n<span data-nosnippet>132</span>        f.debug_struct(</a><span class=\"string\">\"LazyMapElement\"</span><a href=\"tools/scanner.rs.html#391\">)\n<span data-nosnippet>133</span>            .field(</a><span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>134</span>            .field(</a><span class=\"string\">\"agg\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.agg)\n<span data-nosnippet>135</span>            .field(</a><span class=\"string\">\"act\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.act)\n<span data-nosnippet>136</span>            .finish()\n<span data-nosnippet>137</span>    }\n<span data-nosnippet>138</span>}\n<span data-nosnippet>139</span>\n<span data-nosnippet>140</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;L&gt; LazyMapElement&lt;L&gt;\n<span data-nosnippet>141</span></a><span class=\"kw\">where\n<span data-nosnippet>142</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>143</span>{\n<span data-nosnippet>144</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">from_key(<a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\">key</a>: L::Key) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>145</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">agg = L::single_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">key);\n<span data-nosnippet>146</span>        </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>147</span>            key,\n<span data-nosnippet>148</span>            agg,\n<span data-nosnippet>149</span>            act: L::act_unit(),\n<span data-nosnippet>150</span>        }\n<span data-nosnippet>151</span>    }\n<span data-nosnippet>152</span>\n<span data-nosnippet>153</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">update_act&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;, act: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">L::Act)\n<span data-nosnippet>154</span>    </a><span class=\"kw\">where\n<span data-nosnippet>155</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>156</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span><a href=\"tools/scanner.rs.html#391\">&gt;,\n<span data-nosnippet>157</span>    {\n<span data-nosnippet>158</span>        L::act_operate_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.</a><span class=\"highlight\">data_mut</span><a href=\"tools/scanner.rs.html#391\">().bst_data_mut().act, act);\n<span data-nosnippet>159</span>        node.</a><span class=\"highlight\">data_mut</span><a href=\"tools/scanner.rs.html#391\">().bst_data_mut().key =\n<span data-nosnippet>160</span>            L::act_key(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().key, act);\n<span data-nosnippet>161</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(nxlazy) = L::act_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().agg, act) {\n<span data-nosnippet>162</span>            node.</a><span class=\"highlight\">data_mut</span><a href=\"tools/scanner.rs.html#391\">().bst_data_mut().agg = nxlazy;\n<span data-nosnippet>163</span>        } </a><span class=\"kw\">else </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>164</span>            <span class=\"self\">Self</span>::top_down(node.reborrow_datamut());\n<span data-nosnippet>165</span>            <span class=\"self\">Self</span>::bottom_up(node.reborrow_datamut());\n<span data-nosnippet>166</span>        }\n<span data-nosnippet>167</span>    }\n<span data-nosnippet>168</span>\n<span data-nosnippet>169</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>170</span>    </a><span class=\"kw\">where\n<span data-nosnippet>171</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>172</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>173</span>    {\n<span data-nosnippet>174</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.</a><span class=\"highlight\">data_mut</span><a href=\"tools/scanner.rs.html#391\">().bst_data_mut().act, L::act_unit());\n<span data-nosnippet>175</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow_datamut().left().descend() {\n<span data-nosnippet>176</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>177</span>        }\n<span data-nosnippet>178</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow_datamut().right().descend() {\n<span data-nosnippet>179</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>180</span>        }\n<span data-nosnippet>181</span>    }\n<span data-nosnippet>182</span>\n<span data-nosnippet>183</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>184</span>    </a><span class=\"kw\">where\n<span data-nosnippet>185</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>186</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>187</span>    {\n<span data-nosnippet>188</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">agg = L::single_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().into_data().bst_data().key);\n<span data-nosnippet>189</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow().left().descend() {\n<span data-nosnippet>190</span>            agg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">left.into_data().bst_data().agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg);\n<span data-nosnippet>191</span>        }\n<span data-nosnippet>192</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow().right().descend() {\n<span data-nosnippet>193</span>            agg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">right.into_data().bst_data().agg);\n<span data-nosnippet>194</span>        }\n<span data-nosnippet>195</span>        node.</a><span class=\"highlight\">data_mut</span><a href=\"tools/scanner.rs.html#391\">().bst_data_mut().agg = agg;\n<span data-nosnippet>196</span>    }</a></code></pre></div></div></div></details></div></details>",0,"competitive::data_structure::binary_search_tree::node::BstDataMutRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BstNodeRef%3CDataMut%3C'a%3E,+Spec%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#343-352\">Source</a><a href=\"#impl-BstNodeRef%3CDataMut%3C'a%3E,+Spec%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, Spec&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/marker/struct.DataMut.html\" title=\"struct competitive::data_structure::binary_search_tree::node::marker::DataMut\">DataMut</a>&lt;'a&gt;, Spec&gt;<div class=\"where\">where\n    Spec: <a class=\"trait\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html\" title=\"trait competitive::data_structure::binary_search_tree::node::BstSpec\">BstSpec</a>,\n    Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a>: 'a,\n    Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Parent\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Parent\">Parent</a>: 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_data_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#349-351\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.into_data_mut\" class=\"fn\">into_data_mut</a>(self) -&gt; &amp;'a mut Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[12,12],&#34;src/competitive/data_structure/treap.rs.html#354&#34;,&#34;line 354&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/treap.rs (<a href=\"src/competitive/data_structure/treap.rs.html#354\">line 354</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>342</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">change(\n<span data-nosnippet>343</span>        </a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>344</span>        node_id: BstNodeId&lt;TreapSpec&lt;M, L&gt;&gt;,\n<span data-nosnippet>345</span>        f: </a><span class=\"kw\">impl </span><a href=\"../tools/scanner.rs.html#391\">FnOnce(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">L::Key),\n<span data-nosnippet>346</span>    ) -&gt; bool {\n<span data-nosnippet>347</span>        </a><span class=\"kw\">if </span>!<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.contains(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node_id) {\n<span data-nosnippet>348</span>            </a><span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n<span data-nosnippet>349</span>        }\n<span data-nosnippet>350</span>        <span class=\"kw\">unsafe </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>351</span>            WithParent::resolve_top_down::&lt;TreapSpec&lt;M, L&gt;&gt;(\n<span data-nosnippet>352</span>                node_id.reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root),\n<span data-nosnippet>353</span>            );\n<span data-nosnippet>354</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">data = node_id.reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root).</a><span class=\"highlight focus\">into_data_mut</span><a href=\"../tools/scanner.rs.html#391\">();\n<span data-nosnippet>355</span>            f(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">data.value.key);\n<span data-nosnippet>356</span>            WithParent::resolve_bottom_up::&lt;TreapSpec&lt;M, L&gt;&gt;(\n<span data-nosnippet>357</span>                node_id.reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root),\n<span data-nosnippet>358</span>            );\n<span data-nosnippet>359</span>        }\n<span data-nosnippet>360</span>        </a><span class=\"bool-val\">true\n<span data-nosnippet>361</span>    </span>}</code></pre></div></div></div></details></div></details>",0,"competitive::data_structure::binary_search_tree::node::BstDataMutRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BstNodeRef%3CImmut%3C'a%3E,+Spec%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#287-326\">Source</a><a href=\"#impl-BstNodeRef%3CImmut%3C'a%3E,+Spec%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, Spec&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/marker/struct.Immut.html\" title=\"struct competitive::data_structure::binary_search_tree::node::marker::Immut\">Immut</a>&lt;'a&gt;, Spec&gt;<div class=\"where\">where\n    Spec: <a class=\"trait\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html\" title=\"trait competitive::data_structure::binary_search_tree::node::BstSpec\">BstSpec</a>,\n    Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Parent\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Parent\">Parent</a>: 'a,\n    Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a>: 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_data\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#293-295\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.into_data\" class=\"fn\">into_data</a>(self) -&gt; &amp;'a Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[2,2],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#94&#34;,&#34;line 94&#34;],[[35,35],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#127&#34;,&#34;line 127&#34;],[[79,79],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#171&#34;,&#34;line 171&#34;],[[86,86],&#34;src/competitive/data_structure/binary_search_tree/seeker.rs.html#178&#34;,&#34;line 178&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/seeker.rs (<a href=\"src/competitive/data_structure/binary_search_tree/seeker.rs.html#94\">line 94</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>92</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>93</span>        node.reborrow()\n<span data-nosnippet>94</span>            .</a><span class=\"highlight focus\">into_data</span><a href=\"../tools/scanner.rs.html#391\">()\n<span data-nosnippet>95</span>            .bst_data()\n<span data-nosnippet>96</span>            .borrow()\n<span data-nosnippet>97</span>            .cmp(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>98</span>    }\n<span data-nosnippet>99</span>}\n<span data-nosnippet>100</span>\n<span data-nosnippet>101</span></a><span class=\"kw\">pub struct </span><a href=\"../tools/scanner.rs.html#391\">SeekBySize&lt;Spec&gt; {\n<span data-nosnippet>102</span>    index: usize,\n<span data-nosnippet>103</span>    _marker: PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"../tools/scanner.rs.html#391\">() -&gt; Spec&gt;,\n<span data-nosnippet>104</span>}\n<span data-nosnippet>105</span>\n<span data-nosnippet>106</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; SeekBySize&lt;Spec&gt; {\n<span data-nosnippet>107</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">new(index: usize) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>108</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>109</span>            index,\n<span data-nosnippet>110</span>            _marker: PhantomData,\n<span data-nosnippet>111</span>        }\n<span data-nosnippet>112</span>    }\n<span data-nosnippet>113</span>}\n<span data-nosnippet>114</span>\n<span data-nosnippet>115</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstSeeker </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">SeekBySize&lt;Spec&gt;\n<span data-nosnippet>116</span></a><span class=\"kw\">where\n<span data-nosnippet>117</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>118</span>    Spec::Data: BstDataAccess&lt;data::marker::Size, Value = usize&gt;,\n<span data-nosnippet>119</span>{\n<span data-nosnippet>120</span>    </a><span class=\"kw\">type </span><a href=\"../tools/scanner.rs.html#391\">Spec = Spec;\n<span data-nosnippet>121</span>\n<span data-nosnippet>122</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>123</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lsize = node\n<span data-nosnippet>124</span>            .reborrow()\n<span data-nosnippet>125</span>            .left()\n<span data-nosnippet>126</span>            .descend()\n<span data-nosnippet>127</span>            .map(|l| </a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">l.</a><span class=\"highlight\">into_data</span><a href=\"../tools/scanner.rs.html#391\">().bst_data())\n<span data-nosnippet>128</span>            .unwrap_or_default();\n<span data-nosnippet>129</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ord = lsize.cmp(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.index);\n<span data-nosnippet>130</span>        </a><span class=\"kw\">if </span><span class=\"macro\">matches!</span><a href=\"../tools/scanner.rs.html#391\">(ord, Ordering::Less) {\n<span data-nosnippet>131</span>            </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.index -= lsize + </a><span class=\"number\">1</span><a href=\"../tools/scanner.rs.html#391\">;\n<span data-nosnippet>132</span>        }\n<span data-nosnippet>133</span>        ord\n<span data-nosnippet>134</span>    }\n<span data-nosnippet>135</span>}\n<span data-nosnippet>136</span>\n<span data-nosnippet>137</span></a><span class=\"kw\">pub struct </span><a href=\"../tools/scanner.rs.html#391\">SeekByAccCond&lt;Spec, F, L&gt;\n<span data-nosnippet>138</span></a><span class=\"kw\">where\n<span data-nosnippet>139</span>    </span><a href=\"../tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>140</span>{\n<span data-nosnippet>141</span>    acc: L::Agg,\n<span data-nosnippet>142</span>    f: F,\n<span data-nosnippet>143</span>    _marker: PhantomData&lt;</a><span class=\"kw\">fn</span><a href=\"../tools/scanner.rs.html#391\">() -&gt; (Spec, L)&gt;,\n<span data-nosnippet>144</span>}\n<span data-nosnippet>145</span>\n<span data-nosnippet>146</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec, F, L&gt; SeekByAccCond&lt;Spec, F, L&gt;\n<span data-nosnippet>147</span></a><span class=\"kw\">where\n<span data-nosnippet>148</span>    </span><a href=\"../tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>149</span>    F: FnMut(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">L::Agg) -&gt; bool,\n<span data-nosnippet>150</span>{\n<span data-nosnippet>151</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">new(f: F) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>152</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>153</span>            acc: L::agg_unit(),\n<span data-nosnippet>154</span>            f,\n<span data-nosnippet>155</span>            _marker: PhantomData,\n<span data-nosnippet>156</span>        }\n<span data-nosnippet>157</span>    }\n<span data-nosnippet>158</span>}\n<span data-nosnippet>159</span>\n<span data-nosnippet>160</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec, F, L&gt; BstSeeker </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">SeekByAccCond&lt;Spec, F, L&gt;\n<span data-nosnippet>161</span></a><span class=\"kw\">where\n<span data-nosnippet>162</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>163</span>    Spec::Data: BstDataAccess&lt;data::marker::LazyMap, <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\">Value</a> = LazyMapElement&lt;L&gt;&gt;,\n<span data-nosnippet>164</span>    L: LazyMapMonoid,\n<span data-nosnippet>165</span>    F: FnMut(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">L::Agg) -&gt; bool,\n<span data-nosnippet>166</span>{\n<span data-nosnippet>167</span>    </a><span class=\"kw\">type </span><a href=\"../tools/scanner.rs.html#391\">Spec = Spec;\n<span data-nosnippet>168</span>\n<span data-nosnippet>169</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">bst_seek(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, node: BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">, <span class=\"self\">Self</span>::Spec&gt;) -&gt; Ordering {\n<span data-nosnippet>170</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = node.reborrow().left().descend() {\n<span data-nosnippet>171</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">left_agg = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">left.</a><span class=\"highlight\">into_data</span><a href=\"../tools/scanner.rs.html#391\">().bst_data().agg;\n<span data-nosnippet>172</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">nagg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.acc, left_agg);\n<span data-nosnippet>173</span>            </a><span class=\"kw\">if </span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.f)(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">nagg) {\n<span data-nosnippet>174</span>                </a><span class=\"kw\">return </span><a href=\"../tools/scanner.rs.html#391\">Ordering::Greater;\n<span data-nosnippet>175</span>            }\n<span data-nosnippet>176</span>            </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.acc = nagg;\n<span data-nosnippet>177</span>        }\n<span data-nosnippet>178</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.acc = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.acc, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node.reborrow().</a><span class=\"highlight\">into_data</span><a href=\"../tools/scanner.rs.html#391\">().bst_data().agg);\n<span data-nosnippet>179</span>        </a><span class=\"kw\">if </span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.f)(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.acc) {\n<span data-nosnippet>180</span>            Ordering::Equal\n<span data-nosnippet>181</span>        } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>182</span>            Ordering::Less\n<span data-nosnippet>183</span>        }\n<span data-nosnippet>184</span>    }</a></code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[5,5],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#47&#34;,&#34;line 47&#34;],[[7,7],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#49&#34;,&#34;line 49&#34;],[[10,10],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#52&#34;,&#34;line 52&#34;],[[118,118],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#160&#34;,&#34;line 160&#34;],[[119,119],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#161&#34;,&#34;line 161&#34;],[[146,146],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#188&#34;,&#34;line 188&#34;],[[148,148],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#190&#34;,&#34;line 190&#34;],[[151,151],&#34;src/competitive/data_structure/binary_search_tree/data.rs.html#193&#34;,&#34;line 193&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/data.rs (<a href=\"src/competitive/data_structure/binary_search_tree/data.rs.html#47\">line 47</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>42</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>43</span>    </a><span class=\"kw\">where\n<span data-nosnippet>44</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>45</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAgg, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>46</span>    {\n<span data-nosnippet>47</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">agg = node.reborrow().</a><span class=\"highlight focus\">into_data</span><a href=\"tools/scanner.rs.html#391\">().bst_data().agg.clone();\n<span data-nosnippet>48</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow().left().descend() {\n<span data-nosnippet>49</span>            agg = M::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">left.</a><span class=\"highlight\">into_data</span><a href=\"tools/scanner.rs.html#391\">().bst_data().agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg);\n<span data-nosnippet>50</span>        }\n<span data-nosnippet>51</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow().right().descend() {\n<span data-nosnippet>52</span>            agg = M::operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">right.</a><span class=\"highlight\">into_data</span><a href=\"tools/scanner.rs.html#391\">().bst_data().agg);\n<span data-nosnippet>53</span>        }\n<span data-nosnippet>54</span>        node.data_mut().bst_data_mut().agg = agg;\n<span data-nosnippet>55</span>    }\n<span data-nosnippet>56</span>}\n<span data-nosnippet>57</span>\n<span data-nosnippet>58</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">MonoidActElement&lt;M&gt;\n<span data-nosnippet>59</span></a><span class=\"kw\">where\n<span data-nosnippet>60</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>61</span>{\n<span data-nosnippet>62</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">key: M::Key,\n<span data-nosnippet>63</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">act: M::Act,\n<span data-nosnippet>64</span>}\n<span data-nosnippet>65</span>\n<span data-nosnippet>66</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;M&gt; Debug </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">MonoidActElement&lt;M&gt;\n<span data-nosnippet>67</span></a><span class=\"kw\">where\n<span data-nosnippet>68</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>69</span>    M::Key: Debug,\n<span data-nosnippet>70</span>    M::Act: Debug,\n<span data-nosnippet>71</span>{\n<span data-nosnippet>72</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">fmt(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">fmt::Formatter&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">&gt;) -&gt; fmt::Result {\n<span data-nosnippet>73</span>        f.debug_struct(</a><span class=\"string\">\"MonoidActElement\"</span><a href=\"tools/scanner.rs.html#391\">)\n<span data-nosnippet>74</span>            .field(</a><span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>75</span>            .field(</a><span class=\"string\">\"act\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.act)\n<span data-nosnippet>76</span>            .finish()\n<span data-nosnippet>77</span>    }\n<span data-nosnippet>78</span>}\n<span data-nosnippet>79</span>\n<span data-nosnippet>80</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;M&gt; MonoidActElement&lt;M&gt;\n<span data-nosnippet>81</span></a><span class=\"kw\">where\n<span data-nosnippet>82</span>    </span><a href=\"tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>83</span>{\n<span data-nosnippet>84</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">from_key(key: M::Key) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>85</span>        <a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>86</span>            key,\n<span data-nosnippet>87</span>            act: M::unit(),\n<span data-nosnippet>88</span>        }\n<span data-nosnippet>89</span>    }\n<span data-nosnippet>90</span>\n<span data-nosnippet>91</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">update_act&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;, act: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">M::Act)\n<span data-nosnippet>92</span>    </a><span class=\"kw\">where\n<span data-nosnippet>93</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>94</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAct, Value = </a><span class=\"self\">Self</span><a href=\"tools/scanner.rs.html#391\">&gt;,\n<span data-nosnippet>95</span>    {\n<span data-nosnippet>96</span>        M::operate_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, act);\n<span data-nosnippet>97</span>        M::act_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().key, act);\n<span data-nosnippet>98</span>    }\n<span data-nosnippet>99</span>\n<span data-nosnippet>100</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>101</span>    </a><span class=\"kw\">where\n<span data-nosnippet>102</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>103</span>        Spec::Data: BstDataAccess&lt;marker::MonoidAct, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>104</span>    {\n<span data-nosnippet>105</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, M::unit());\n<span data-nosnippet>106</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow_datamut().left().descend() {\n<span data-nosnippet>107</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>108</span>        }\n<span data-nosnippet>109</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow_datamut().right().descend() {\n<span data-nosnippet>110</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>111</span>        }\n<span data-nosnippet>112</span>    }\n<span data-nosnippet>113</span>}\n<span data-nosnippet>114</span>\n<span data-nosnippet>115</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>116</span></a><span class=\"kw\">where\n<span data-nosnippet>117</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>118</span>{\n<span data-nosnippet>119</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">key: L::Key,\n<span data-nosnippet>120</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">agg: L::Agg,\n<span data-nosnippet>121</span>    </a><span class=\"kw\">pub </span><a href=\"tools/scanner.rs.html#391\">act: L::Act,\n<span data-nosnippet>122</span>}\n<span data-nosnippet>123</span>\n<span data-nosnippet>124</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;L&gt; Debug </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">LazyMapElement&lt;L&gt;\n<span data-nosnippet>125</span></a><span class=\"kw\">where\n<span data-nosnippet>126</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>127</span>    L::Key: Debug,\n<span data-nosnippet>128</span>    L::Agg: Debug,\n<span data-nosnippet>129</span>    L::Act: Debug,\n<span data-nosnippet>130</span>{\n<span data-nosnippet>131</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">fmt(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">fmt::Formatter&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">&gt;) -&gt; fmt::Result {\n<span data-nosnippet>132</span>        f.debug_struct(</a><span class=\"string\">\"LazyMapElement\"</span><a href=\"tools/scanner.rs.html#391\">)\n<span data-nosnippet>133</span>            .field(</a><span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.key)\n<span data-nosnippet>134</span>            .field(</a><span class=\"string\">\"agg\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.agg)\n<span data-nosnippet>135</span>            .field(</a><span class=\"string\">\"act\"</span>, <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.act)\n<span data-nosnippet>136</span>            .finish()\n<span data-nosnippet>137</span>    }\n<span data-nosnippet>138</span>}\n<span data-nosnippet>139</span>\n<span data-nosnippet>140</span></a><span class=\"kw\">impl</span><a href=\"tools/scanner.rs.html#391\">&lt;L&gt; LazyMapElement&lt;L&gt;\n<span data-nosnippet>141</span></a><span class=\"kw\">where\n<span data-nosnippet>142</span>    </span><a href=\"tools/scanner.rs.html#391\">L: LazyMapMonoid,\n<span data-nosnippet>143</span>{\n<span data-nosnippet>144</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">from_key(<a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\">key</a>: L::Key) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>145</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">agg = L::single_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">key);\n<span data-nosnippet>146</span>        </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>147</span>            key,\n<span data-nosnippet>148</span>            agg,\n<span data-nosnippet>149</span>            act: L::act_unit(),\n<span data-nosnippet>150</span>        }\n<span data-nosnippet>151</span>    }\n<span data-nosnippet>152</span>\n<span data-nosnippet>153</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">update_act&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;, act: </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">L::Act)\n<span data-nosnippet>154</span>    </a><span class=\"kw\">where\n<span data-nosnippet>155</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>156</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span><a href=\"tools/scanner.rs.html#391\">&gt;,\n<span data-nosnippet>157</span>    {\n<span data-nosnippet>158</span>        L::act_operate_assign(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, act);\n<span data-nosnippet>159</span>        node.data_mut().bst_data_mut().key =\n<span data-nosnippet>160</span>            L::act_key(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().</a><span class=\"highlight\">into_data</span><a href=\"tools/scanner.rs.html#391\">().bst_data().key, act);\n<span data-nosnippet>161</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"tools/scanner.rs.html#391\">(nxlazy) = L::act_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().</a><span class=\"highlight\">into_data</span><a href=\"tools/scanner.rs.html#391\">().bst_data().agg, act) {\n<span data-nosnippet>162</span>            node.data_mut().bst_data_mut().agg = nxlazy;\n<span data-nosnippet>163</span>        } </a><span class=\"kw\">else </span><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>164</span>            <span class=\"self\">Self</span>::top_down(node.reborrow_datamut());\n<span data-nosnippet>165</span>            <span class=\"self\">Self</span>::bottom_up(node.reborrow_datamut());\n<span data-nosnippet>166</span>        }\n<span data-nosnippet>167</span>    }\n<span data-nosnippet>168</span>\n<span data-nosnippet>169</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">top_down&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>170</span>    </a><span class=\"kw\">where\n<span data-nosnippet>171</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>172</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>173</span>    {\n<span data-nosnippet>174</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">act = replace(</a><span class=\"kw-2\">&amp;mut </span><a href=\"tools/scanner.rs.html#391\">node.data_mut().bst_data_mut().act, L::act_unit());\n<span data-nosnippet>175</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow_datamut().left().descend() {\n<span data-nosnippet>176</span>            <span class=\"self\">Self</span>::update_act(left, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>177</span>        }\n<span data-nosnippet>178</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow_datamut().right().descend() {\n<span data-nosnippet>179</span>            <span class=\"self\">Self</span>::update_act(right, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">act);\n<span data-nosnippet>180</span>        }\n<span data-nosnippet>181</span>    }\n<span data-nosnippet>182</span>\n<span data-nosnippet>183</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">bottom_up&lt;Spec&gt;(</a><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">node: BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;)\n<span data-nosnippet>184</span>    </a><span class=\"kw\">where\n<span data-nosnippet>185</span>        </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>186</span>        Spec::Data: BstDataAccess&lt;marker::LazyMap, Value = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>187</span>    {\n<span data-nosnippet>188</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">agg = L::single_agg(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">node.reborrow().</a><span class=\"highlight\">into_data</span><a href=\"tools/scanner.rs.html#391\">().bst_data().key);\n<span data-nosnippet>189</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(left) = node.reborrow().left().descend() {\n<span data-nosnippet>190</span>            agg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">left.</a><span class=\"highlight\">into_data</span><a href=\"tools/scanner.rs.html#391\">().bst_data().agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg);\n<span data-nosnippet>191</span>        }\n<span data-nosnippet>192</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"tools/scanner.rs.html#391\">(right) = node.reborrow().right().descend() {\n<span data-nosnippet>193</span>            agg = L::agg_operate(</a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">agg, </a><span class=\"kw-2\">&amp;</span><a href=\"tools/scanner.rs.html#391\">right.</a><span class=\"highlight\">into_data</span><a href=\"tools/scanner.rs.html#391\">().bst_data().agg);\n<span data-nosnippet>194</span>        }\n<span data-nosnippet>195</span>        node.data_mut().bst_data_mut().agg = agg;\n<span data-nosnippet>196</span>    }</a></code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[8,8],&#34;src/competitive/data_structure/treap.rs.html#135&#34;,&#34;line 135&#34;],[[8,8],&#34;src/competitive/data_structure/treap.rs.html#135&#34;,&#34;line 135&#34;],[[84,84],&#34;src/competitive/data_structure/treap.rs.html#211&#34;,&#34;line 211&#34;],[[84,84],&#34;src/competitive/data_structure/treap.rs.html#211&#34;,&#34;line 211&#34;],[[86,86],&#34;src/competitive/data_structure/treap.rs.html#213&#34;,&#34;line 213&#34;],[[100,100],&#34;src/competitive/data_structure/treap.rs.html#227&#34;,&#34;line 227&#34;],[[210,210],&#34;src/competitive/data_structure/treap.rs.html#337&#34;,&#34;line 337&#34;],[[256,256],&#34;src/competitive/data_structure/treap.rs.html#383&#34;,&#34;line 383&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/treap.rs (<a href=\"src/competitive/data_structure/treap.rs.html#135\">line 135</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>127</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">merge(\n<span data-nosnippet>128</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>129</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>130</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>131</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>132</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>133</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>134</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>135</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().</a><span class=\"highlight focus\">into_data</span><a href=\"../tools/scanner.rs.html#391\">().priority &gt; right.reborrow().</a><span class=\"highlight\">into_data</span><a href=\"../tools/scanner.rs.html#391\">().priority {\n<span data-nosnippet>136</span>                    TreapSpec::top_down(left.borrow_datamut());\n<span data-nosnippet>137</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.borrow_mut().right().take();\n<span data-nosnippet>138</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = <span class=\"self\">Self</span>::merge(lr, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)).unwrap_unchecked();\n<span data-nosnippet>139</span>                    left.borrow_mut().right().set(lr);\n<span data-nosnippet>140</span>                    TreapSpec::bottom_up(left.borrow_datamut());\n<span data-nosnippet>141</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>142</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>143</span>                    TreapSpec::top_down(right.borrow_datamut());\n<span data-nosnippet>144</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.borrow_mut().left().take();\n<span data-nosnippet>145</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = <span class=\"self\">Self</span>::merge(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), rl).unwrap_unchecked();\n<span data-nosnippet>146</span>                    right.borrow_mut().left().set(rl);\n<span data-nosnippet>147</span>                    TreapSpec::bottom_up(right.borrow_datamut());\n<span data-nosnippet>148</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>149</span>                }\n<span data-nosnippet>150</span>            },\n<span data-nosnippet>151</span>        }\n<span data-nosnippet>152</span>    }\n<span data-nosnippet>153</span>\n<span data-nosnippet>154</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">split&lt;Seeker&gt;(\n<span data-nosnippet>155</span>        node: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>156</span>        </a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">seeker: Seeker,\n<span data-nosnippet>157</span>        eq_left: bool,\n<span data-nosnippet>158</span>    ) -&gt; (</a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;, </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;)\n<span data-nosnippet>159</span>    </a><span class=\"kw\">where\n<span data-nosnippet>160</span>        </span><a href=\"../tools/scanner.rs.html#391\">Seeker: BstSeeker&lt;Spec = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>161</span>    {\n<span data-nosnippet>162</span>        <span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node {\n<span data-nosnippet>163</span>            </a><span class=\"prelude-val\">None </span>=&gt; (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>),\n<span data-nosnippet>164</span>            <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node) =&gt; {\n<span data-nosnippet>165</span>                <span class=\"self\">Self</span>::top_down(node.borrow_datamut());\n<span data-nosnippet>166</span>                </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">seek_left = </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">seeker.bst_seek(node.reborrow()) {\n<span data-nosnippet>167</span>                    Ordering::Less =&gt; </a><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>168</span>                    Ordering::Equal =&gt; !eq_left,\n<span data-nosnippet>169</span>                    Ordering::Greater =&gt; </a><span class=\"bool-val\">true</span>,\n<span data-nosnippet>170</span>                };\n<span data-nosnippet>171</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">seek_left {\n<span data-nosnippet>172</span>                    </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>173</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">left = node.borrow_mut().left().take();\n<span data-nosnippet>174</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(left, seeker, eq_left);\n<span data-nosnippet>175</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = r {\n<span data-nosnippet>176</span>                            node.borrow_mut().left().set(r);\n<span data-nosnippet>177</span>                        }\n<span data-nosnippet>178</span>                        <span class=\"self\">Self</span>::bottom_up(node.borrow_datamut());\n<span data-nosnippet>179</span>                        (l, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node))\n<span data-nosnippet>180</span>                    }\n<span data-nosnippet>181</span>                } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>182</span>                    <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>183</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">right = node.borrow_mut().right().take();\n<span data-nosnippet>184</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(right, seeker, eq_left);\n<span data-nosnippet>185</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = l {\n<span data-nosnippet>186</span>                            node.borrow_mut().right().set(l);\n<span data-nosnippet>187</span>                        }\n<span data-nosnippet>188</span>                        <span class=\"self\">Self</span>::bottom_up(node.borrow_datamut());\n<span data-nosnippet>189</span>                        (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), r)\n<span data-nosnippet>190</span>                    }\n<span data-nosnippet>191</span>                }\n<span data-nosnippet>192</span>            }\n<span data-nosnippet>193</span>        }\n<span data-nosnippet>194</span>    }\n<span data-nosnippet>195</span>}\n<span data-nosnippet>196</span>\n<span data-nosnippet>197</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L&gt; TreapSpec&lt;M, L&gt;\n<span data-nosnippet>198</span></a><span class=\"kw\">where\n<span data-nosnippet>199</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>200</span>    M::Key: Ord,\n<span data-nosnippet>201</span>    L: LazyMapMonoid,\n<span data-nosnippet>202</span>{\n<span data-nosnippet>203</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">merge_ordered(\n<span data-nosnippet>204</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>205</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>206</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>207</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>208</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>209</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>210</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>211</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().</a><span class=\"highlight\">into_data</span><a href=\"../tools/scanner.rs.html#391\">().priority &gt; right.reborrow().</a><span class=\"highlight\">into_data</span><a href=\"../tools/scanner.rs.html#391\">().priority {\n<span data-nosnippet>212</span>                    <span class=\"self\">Self</span>::top_down(left.borrow_datamut());\n<span data-nosnippet>213</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().</a><span class=\"highlight\">into_data</span><a href=\"../tools/scanner.rs.html#391\">().key.key;\n<span data-nosnippet>214</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(rl, rr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>215</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ll = left.borrow_mut().left().take();\n<span data-nosnippet>216</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.borrow_mut().right().take();\n<span data-nosnippet>217</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>218</span>                        left.borrow_mut().left().set(l);\n<span data-nosnippet>219</span>                    }\n<span data-nosnippet>220</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>221</span>                        left.borrow_mut().right().set(r);\n<span data-nosnippet>222</span>                    }\n<span data-nosnippet>223</span>                    <span class=\"self\">Self</span>::bottom_up(left.borrow_datamut());\n<span data-nosnippet>224</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>225</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>226</span>                    <span class=\"self\">Self</span>::top_down(right.borrow_datamut());\n<span data-nosnippet>227</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">right.reborrow().</a><span class=\"highlight\">into_data</span><a href=\"../tools/scanner.rs.html#391\">().key.key;\n<span data-nosnippet>228</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(ll, lr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>229</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.borrow_mut().left().take();\n<span data-nosnippet>230</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rr = right.borrow_mut().right().take();\n<span data-nosnippet>231</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>232</span>                        right.borrow_mut().left().set(l);\n<span data-nosnippet>233</span>                    }\n<span data-nosnippet>234</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>235</span>                        right.borrow_mut().right().set(r);\n<span data-nosnippet>236</span>                    }\n<span data-nosnippet>237</span>                    <span class=\"self\">Self</span>::bottom_up(right.borrow_datamut());\n<span data-nosnippet>238</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>239</span>                }\n<span data-nosnippet>240</span>            },\n<span data-nosnippet>241</span>        }\n<span data-nosnippet>242</span>    }\n<span data-nosnippet>243</span>}\n<span data-nosnippet>244</span>\n<span data-nosnippet>245</span></a><span class=\"kw\">pub struct </span><a href=\"../tools/scanner.rs.html#391\">Treap&lt;M, L, A = BoxAllocator&lt;TreapNode&lt;M, L&gt;&gt;&gt;\n<span data-nosnippet>246</span></a><span class=\"kw\">where\n<span data-nosnippet>247</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>248</span>    M::Key: Ord,\n<span data-nosnippet>249</span>    L: LazyMapMonoid,\n<span data-nosnippet>250</span>    A: Allocator&lt;TreapNode&lt;M, L&gt;&gt;,\n<span data-nosnippet>251</span>{\n<span data-nosnippet>252</span>    root: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>253</span>    node_id_manager: BstNodeIdManager&lt;TreapSpec&lt;M, L&gt;&gt;,\n<span data-nosnippet>254</span>    rng: Xorshift,\n<span data-nosnippet>255</span>    allocator: ManuallyDrop&lt;A&gt;,\n<span data-nosnippet>256</span>    _marker: PhantomData&lt;(M, L)&gt;,\n<span data-nosnippet>257</span>}\n<span data-nosnippet>258</span>\n<span data-nosnippet>259</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L, A&gt; Default </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">Treap&lt;M, <a href=\"lazy_map.rs.html#151\">L</a>, <a href=\"lazy_map.rs.html#151\">A</a>&gt;\n<span data-nosnippet>260</span></a><span class=\"kw\">where\n<span data-nosnippet>261</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>262</span>    M::Key: Ord,\n<span data-nosnippet>263</span>    L: LazyMapMonoid,\n<span data-nosnippet>264</span>    <a href=\"lazy_map.rs.html#151\">A</a>: Allocator&lt;TreapNode&lt;M, L&gt;&gt; + Default,\n<span data-nosnippet>265</span>{\n<span data-nosnippet>266</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">default() -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a>{\n<span data-nosnippet>267</span>        <a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>268</span>            root: </a><span class=\"prelude-val\">None</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>269</span>            node_id_manager: Default::default(),\n<span data-nosnippet>270</span>            rng: Xorshift::new(),\n<span data-nosnippet>271</span>            allocator: ManuallyDrop::new(A::default()),\n<span data-nosnippet>272</span>            _marker: PhantomData,\n<span data-nosnippet>273</span>        }\n<span data-nosnippet>274</span>    }\n<span data-nosnippet>275</span>}\n<span data-nosnippet>276</span>\n<span data-nosnippet>277</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L, A&gt; Drop </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">Treap&lt;M, L, A&gt;\n<span data-nosnippet>278</span></a><span class=\"kw\">where\n<span data-nosnippet>279</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>280</span>    M::Key: Ord,\n<span data-nosnippet>281</span>    L: LazyMapMonoid,\n<span data-nosnippet>282</span>    A: Allocator&lt;TreapNode&lt;M, L&gt;&gt;,\n<span data-nosnippet>283</span>{\n<span data-nosnippet>284</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">drop(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>285</span>        <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>286</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(root) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root.take() {\n<span data-nosnippet>287</span>                root.into_dying().drop_all(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator.deref_mut());\n<span data-nosnippet>288</span>            }\n<span data-nosnippet>289</span>            ManuallyDrop::drop(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator);\n<span data-nosnippet>290</span>        }\n<span data-nosnippet>291</span>    }\n<span data-nosnippet>292</span>}\n<span data-nosnippet>293</span>\n<span data-nosnippet>294</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L&gt; Treap&lt;M, L&gt;\n<span data-nosnippet>295</span></a><span class=\"kw\">where\n<span data-nosnippet>296</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>297</span>    M::Key: Ord,\n<span data-nosnippet>298</span>    L: LazyMapMonoid,\n<span data-nosnippet>299</span>{\n<span data-nosnippet>300</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">new() -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>301</span>        <span class=\"self\">Self</span>::default()\n<span data-nosnippet>302</span>    }\n<span data-nosnippet>303</span>}\n<span data-nosnippet>304</span>\n<span data-nosnippet>305</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L, A&gt; Treap&lt;M, L, A&gt;\n<span data-nosnippet>306</span></a><span class=\"kw\">where\n<span data-nosnippet>307</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>308</span>    M::Key: Ord,\n<span data-nosnippet>309</span>    L: LazyMapMonoid,\n<span data-nosnippet>310</span>    A: Allocator&lt;TreapNode&lt;M, L&gt;&gt;,\n<span data-nosnippet>311</span>{\n<span data-nosnippet>312</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">len(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; usize {\n<span data-nosnippet>313</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.len()\n<span data-nosnippet>314</span>    }\n<span data-nosnippet>315</span>\n<span data-nosnippet>316</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">is_empty(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; bool {\n<span data-nosnippet>317</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.is_empty()\n<span data-nosnippet>318</span>    }\n<span data-nosnippet>319</span>\n<span data-nosnippet>320</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">clear(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>321</span>        <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>322</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(root) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root.take() {\n<span data-nosnippet>323</span>                root.into_dying().drop_all(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator.deref_mut());\n<span data-nosnippet>324</span>            }\n<span data-nosnippet>325</span>            </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.clear();\n<span data-nosnippet>326</span>        }\n<span data-nosnippet>327</span>    }\n<span data-nosnippet>328</span>\n<span data-nosnippet>329</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">get(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, node_id: BstNodeId&lt;TreapSpec&lt;M, L&gt;&gt;) -&gt; </a><span class=\"prelude-ty\">Option</span>&lt;(<span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">M::Key, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">L::Key)&gt; {\n<span data-nosnippet>330</span>        </a><span class=\"kw\">if </span>!<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.contains(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node_id) {\n<span data-nosnippet>331</span>            </a><span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>332</span>        }\n<span data-nosnippet>333</span>        <span class=\"kw\">unsafe </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>334</span>            WithParent::resolve_top_down::&lt;TreapSpec&lt;M, L&gt;&gt;(\n<span data-nosnippet>335</span>                node_id.reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root),\n<span data-nosnippet>336</span>            );\n<span data-nosnippet>337</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">data = node_id.reborrow(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root).</a><span class=\"highlight\">into_data</span>();\n<span data-nosnippet>338</span>            <span class=\"prelude-val\">Some</span>((<span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">data.key.key, </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">data.value.key))\n<span data-nosnippet>339</span>        }\n<span data-nosnippet>340</span>    }\n<span data-nosnippet>341</span>\n<span data-nosnippet>342</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">change(\n<span data-nosnippet>343</span>        </a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>344</span>        node_id: BstNodeId&lt;TreapSpec&lt;M, L&gt;&gt;,\n<span data-nosnippet>345</span>        f: </a><span class=\"kw\">impl </span><a href=\"../tools/scanner.rs.html#391\">FnOnce(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">L::Key),\n<span data-nosnippet>346</span>    ) -&gt; bool {\n<span data-nosnippet>347</span>        </a><span class=\"kw\">if </span>!<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.contains(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node_id) {\n<span data-nosnippet>348</span>            </a><span class=\"kw\">return </span><span class=\"bool-val\">false</span>;\n<span data-nosnippet>349</span>        }\n<span data-nosnippet>350</span>        <span class=\"kw\">unsafe </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>351</span>            WithParent::resolve_top_down::&lt;TreapSpec&lt;M, L&gt;&gt;(\n<span data-nosnippet>352</span>                node_id.reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root),\n<span data-nosnippet>353</span>            );\n<span data-nosnippet>354</span>            </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">data = node_id.reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root).into_data_mut();\n<span data-nosnippet>355</span>            f(</a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">data.value.key);\n<span data-nosnippet>356</span>            WithParent::resolve_bottom_up::&lt;TreapSpec&lt;M, L&gt;&gt;(\n<span data-nosnippet>357</span>                node_id.reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root),\n<span data-nosnippet>358</span>            );\n<span data-nosnippet>359</span>        }\n<span data-nosnippet>360</span>        </a><span class=\"bool-val\">true\n<span data-nosnippet>361</span>    </span>}\n<span data-nosnippet>362</span>\n<span data-nosnippet>363</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">insert(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, key: M::Key, value: L::Key) -&gt; BstNodeId&lt;TreapSpec&lt;M, L&gt;&gt; {\n<span data-nosnippet>364</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(left, right) = TreapSpec::split(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root.take(), SeekByKey::new(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>365</span>        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">data = TreapData {\n<span data-nosnippet>366</span>            priority: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.rng.rand64(),\n<span data-nosnippet>367</span>            key: MonoidActElement::from_key(key),\n<span data-nosnippet>368</span>            value: LazyMapElement::from_key(value),\n<span data-nosnippet>369</span>        };\n<span data-nosnippet>370</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">node = BstRoot::from_data(data, </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator.deref_mut());\n<span data-nosnippet>371</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">node_id = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.register(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node);\n<span data-nosnippet>372</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root = TreapSpec::merge(TreapSpec::merge(left, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)), right);\n<span data-nosnippet>373</span>        node_id\n<span data-nosnippet>374</span>    }\n<span data-nosnippet>375</span>\n<span data-nosnippet>376</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">fold&lt;Q, R&gt;(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, range: R) -&gt; L::Agg\n<span data-nosnippet>377</span>    </a><span class=\"kw\">where\n<span data-nosnippet>378</span>        </span><a href=\"../tools/scanner.rs.html#391\">M::Key: Borrow&lt;Q&gt;,\n<span data-nosnippet>379</span>        Q: Ord + </a><span class=\"question-mark\">?</span><a href=\"../tools/scanner.rs.html#391\">Sized,\n<span data-nosnippet>380</span>        R: RangeBounds&lt;Q&gt;,\n<span data-nosnippet>381</span>    {\n<span data-nosnippet>382</span>        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node) = Split3::seek_by_key(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root, range).mid() {\n<span data-nosnippet>383</span>            node.reborrow().</a><span class=\"highlight\">into_data</span><a href=\"../tools/scanner.rs.html#391\">().value.agg.clone()\n<span data-nosnippet>384</span>        } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>385</span>            L::agg_unit()\n<span data-nosnippet>386</span>        }\n<span data-nosnippet>387</span>    }</a></code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.traverse\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#297-309\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.traverse\" class=\"fn\">traverse</a>&lt;F&gt;(self, f: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut F</a>)<div class=\"where\">where\n    Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a>: 'a,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(Self),</div></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[6,6],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#303&#34;,&#34;line 303&#34;],[[10,10],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#307&#34;,&#34;line 307&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/node.rs (<a href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#303\">line 303</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>297</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">traverse&lt;F&gt;(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">F)\n<span data-nosnippet>298</span>    </a><span class=\"kw\">where\n<span data-nosnippet>299</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>300</span>        F: FnMut(</a><span class=\"self\">Self</span>),\n<span data-nosnippet>301</span>    {\n<span data-nosnippet>302</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.left().descend() {\n<span data-nosnippet>303</span>            left.</a><span class=\"highlight focus\">traverse</span><a href=\"../tools/scanner.rs.html#391\">(f);\n<span data-nosnippet>304</span>        }\n<span data-nosnippet>305</span>        f(</a><span class=\"self\">self</span>);\n<span data-nosnippet>306</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(right) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.right().descend() {\n<span data-nosnippet>307</span>            right.</a><span class=\"highlight\">traverse</span><a href=\"../tools/scanner.rs.html#391\">(f);\n<span data-nosnippet>308</span>        }\n<span data-nosnippet>309</span>    }</a></code></pre></div></div></div></details><section id=\"method.leftmost\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#311-317\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.leftmost\" class=\"fn\">leftmost</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section><section id=\"method.rightmost\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#319-325\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.rightmost\" class=\"fn\">rightmost</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></div></details>",0,"competitive::data_structure::binary_search_tree::node::BstImmutRef"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BstNodeRef%3COwned,+Spec%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#251-285\">Source</a><a href=\"#impl-BstNodeRef%3COwned,+Spec%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;Spec&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/binary_search_tree/node/marker/enum.Owned.html\" title=\"enum competitive::data_structure::binary_search_tree::node::marker::Owned\">Owned</a>, Spec&gt;<div class=\"where\">where\n    Spec: <a class=\"trait\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html\" title=\"trait competitive::data_structure::binary_search_tree::node::BstSpec\">BstSpec</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#255-260\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.new\" class=\"fn\">new</a>(node: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNode.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNode\">BstNode</a>&lt;Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a>, Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Parent\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Parent\">Parent</a>&gt;&gt;) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[4,4],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#265&#34;,&#34;line 265&#34;],[[150,150],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#411&#34;,&#34;line 411&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/node.rs (<a href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#265\">line 265</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>261</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">from_data&lt;<a href=\"#105\">A</a>&gt;(data: Spec::Data, allocator: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">A) -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self\n<span data-nosnippet>262</span>    </a><span class=\"kw\">where\n<span data-nosnippet>263</span>        </span><a href=\"../tools/scanner.rs.html#391\">A: Allocator&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>264</span>    {\n<span data-nosnippet>265</span>        </a><span class=\"highlight focus\"><span class=\"self\">Self</span>::new</span><a href=\"../tools/scanner.rs.html#391\">(allocator.allocate(BstNode::new(data)))\n<span data-nosnippet>266</span>    }\n<span data-nosnippet>267</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">borrow_mut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>268</span>        BstNodeRef {\n<span data-nosnippet>269</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>270</span>            _marker: PhantomData,\n<span data-nosnippet>271</span>        }\n<span data-nosnippet>272</span>    }\n<span data-nosnippet>273</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">borrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>274</span>        BstNodeRef {\n<span data-nosnippet>275</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>276</span>            _marker: PhantomData,\n<span data-nosnippet>277</span>        }\n<span data-nosnippet>278</span>    }\n<span data-nosnippet>279</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_dying(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Dying, Spec&gt; {\n<span data-nosnippet>280</span>        BstNodeRef {\n<span data-nosnippet>281</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>282</span>            _marker: PhantomData,\n<span data-nosnippet>283</span>        }\n<span data-nosnippet>284</span>    }\n<span data-nosnippet>285</span>}\n<span data-nosnippet>286</span>\n<span data-nosnippet>287</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Immut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>288</span></a><span class=\"kw\">where\n<span data-nosnippet>289</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>290</span>    Spec::Parent: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>291</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>292</span>{\n<span data-nosnippet>293</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_data(</a><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>294</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_ref().data }\n<span data-nosnippet>295</span>    }\n<span data-nosnippet>296</span>\n<span data-nosnippet>297</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">traverse&lt;F&gt;(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, f: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">F)\n<span data-nosnippet>298</span>    </a><span class=\"kw\">where\n<span data-nosnippet>299</span>        </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>300</span>        F: FnMut(</a><span class=\"self\">Self</span>),\n<span data-nosnippet>301</span>    {\n<span data-nosnippet>302</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.left().descend() {\n<span data-nosnippet>303</span>            left.traverse(f);\n<span data-nosnippet>304</span>        }\n<span data-nosnippet>305</span>        f(</a><span class=\"self\">self</span>);\n<span data-nosnippet>306</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(right) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.right().descend() {\n<span data-nosnippet>307</span>            right.traverse(f);\n<span data-nosnippet>308</span>        }\n<span data-nosnippet>309</span>    }\n<span data-nosnippet>310</span>\n<span data-nosnippet>311</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">leftmost(</a><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>312</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>313</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(left) = node.left().descend() {\n<span data-nosnippet>314</span>            node = left;\n<span data-nosnippet>315</span>        }\n<span data-nosnippet>316</span>        </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)\n<span data-nosnippet>317</span>    }\n<span data-nosnippet>318</span>\n<span data-nosnippet>319</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">rightmost(</a><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>320</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"self\">self</span>;\n<span data-nosnippet>321</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Ok</span><a href=\"../tools/scanner.rs.html#391\">(right) = node.right().descend() {\n<span data-nosnippet>322</span>            node = right;\n<span data-nosnippet>323</span>        }\n<span data-nosnippet>324</span>        </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)\n<span data-nosnippet>325</span>    }\n<span data-nosnippet>326</span>}\n<span data-nosnippet>327</span>\n<span data-nosnippet>328</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>329</span></a><span class=\"kw\">where\n<span data-nosnippet>330</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>331</span>{\n<span data-nosnippet>332</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>333</span>        BstNodeRef {\n<span data-nosnippet>334</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>335</span>            _marker: PhantomData,\n<span data-nosnippet>336</span>        }\n<span data-nosnippet>337</span>    }\n<span data-nosnippet>338</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">data_mut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>339</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_mut().data }\n<span data-nosnippet>340</span>    }\n<span data-nosnippet>341</span>}\n<span data-nosnippet>342</span>\n<span data-nosnippet>343</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>344</span></a><span class=\"kw\">where\n<span data-nosnippet>345</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>346</span>    Spec::Data: </a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>347</span>    Spec::Parent: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>348</span>{\n<span data-nosnippet>349</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">into_data_mut(</a><span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">Spec::Data {\n<span data-nosnippet>350</span>        </a><span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.as_mut().data }\n<span data-nosnippet>351</span>    }\n<span data-nosnippet>352</span>}\n<span data-nosnippet>353</span>\n<span data-nosnippet>354</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>355</span></a><span class=\"kw\">where\n<span data-nosnippet>356</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>357</span>{\n<span data-nosnippet>358</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">reborrow_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DataMut&lt;</a><span class=\"lifetime\">'_</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>359</span>        BstNodeRef {\n<span data-nosnippet>360</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>361</span>            _marker: PhantomData,\n<span data-nosnippet>362</span>        }\n<span data-nosnippet>363</span>    }\n<span data-nosnippet>364</span>}\n<span data-nosnippet>365</span>\n<span data-nosnippet>366</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">, Spec&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt;\n<span data-nosnippet>367</span></a><span class=\"kw\">where\n<span data-nosnippet>368</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>369</span>    Spec::Data: </a><span class=\"lifetime\">'a</span>,\n<span data-nosnippet>370</span>{\n<span data-nosnippet>371</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">dormant(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::DormantMut, Spec&gt; {\n<span data-nosnippet>372</span>        BstNodeRef {\n<span data-nosnippet>373</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>374</span>            _marker: PhantomData,\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>    }\n<span data-nosnippet>377</span>}\n<span data-nosnippet>378</span>\n<span data-nosnippet>379</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstNodeRef&lt;marker::DormantMut, Spec&gt;\n<span data-nosnippet>380</span></a><span class=\"kw\">where\n<span data-nosnippet>381</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>382</span>{\n<span data-nosnippet>383</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">awaken&lt;</a><span class=\"lifetime\">'a</span>&gt;(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; BstNodeRef&lt;marker::Mut&lt;</a><span class=\"lifetime\">'a</span><a href=\"../tools/scanner.rs.html#391\">&gt;, Spec&gt; {\n<span data-nosnippet>384</span>        BstNodeRef {\n<span data-nosnippet>385</span>            node: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node,\n<span data-nosnippet>386</span>            _marker: PhantomData,\n<span data-nosnippet>387</span>        }\n<span data-nosnippet>388</span>    }\n<span data-nosnippet>389</span>}\n<span data-nosnippet>390</span>\n<span data-nosnippet>391</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;Spec&gt; BstNodeRef&lt;marker::Dying, Spec&gt;\n<span data-nosnippet>392</span></a><span class=\"kw\">where\n<span data-nosnippet>393</span>    </span><a href=\"../tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>394</span>{\n<span data-nosnippet>395</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">into_data&lt;A&gt;(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, allocator: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">A) -&gt; Spec::Data\n<span data-nosnippet>396</span>    </a><span class=\"kw\">where\n<span data-nosnippet>397</span>        </span><a href=\"../tools/scanner.rs.html#391\">A: Allocator&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>398</span>    {\n<span data-nosnippet>399</span>        </a><span class=\"macro\">assert!</span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.reborrow().left().descend().is_err());\n<span data-nosnippet>400</span>        </a><span class=\"macro\">assert!</span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.reborrow().right().descend().is_err());\n<span data-nosnippet>401</span>        allocator.deallocate(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node).data\n<span data-nosnippet>402</span>    }\n<span data-nosnippet>403</span>\n<span data-nosnippet>404</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">drop_all&lt;A&gt;(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, allocator: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">A)\n<span data-nosnippet>405</span>    </a><span class=\"kw\">where\n<span data-nosnippet>406</span>        </span><a href=\"../tools/scanner.rs.html#391\">A: Allocator&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>407</span>    {\n<span data-nosnippet>408</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">BstNode { child, .. } = allocator.deallocate(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node);\n<span data-nosnippet>409</span>        </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">node </a><span class=\"kw\">in </span><a href=\"../tools/scanner.rs.html#391\">child.into_iter().flatten() {\n<span data-nosnippet>410</span>            </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>411</span>                <span class=\"highlight\">BstNodeRef::&lt;marker::Owned, Spec&gt;::new</span><a href=\"../tools/scanner.rs.html#391\">(node)\n<span data-nosnippet>412</span>                    .into_dying()\n<span data-nosnippet>413</span>                    .drop_all(allocator)\n<span data-nosnippet>414</span>            }\n<span data-nosnippet>415</span>        }\n<span data-nosnippet>416</span>    }</a></code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_data\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#261-266\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.from_data\" class=\"fn\">from_data</a>&lt;A&gt;(data: Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a>, allocator: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut A</a>) -&gt; Self<div class=\"where\">where\n    A: <a class=\"trait\" href=\"competitive/data_structure/trait.Allocator.html\" title=\"trait competitive::data_structure::Allocator\">Allocator</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNode.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNode\">BstNode</a>&lt;Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a>, Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Parent\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Parent\">Parent</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[7,7],&#34;src/competitive/data_structure/treap.rs.html#370&#34;,&#34;line 370&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/treap.rs (<a href=\"src/competitive/data_structure/treap.rs.html#370\">line 370</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>363</span>    <span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">insert(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, key: M::Key, value: L::Key) -&gt; BstNodeId&lt;TreapSpec&lt;M, L&gt;&gt; {\n<span data-nosnippet>364</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(left, right) = TreapSpec::split(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root.take(), SeekByKey::new(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>365</span>        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">data = TreapData {\n<span data-nosnippet>366</span>            priority: </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.rng.rand64(),\n<span data-nosnippet>367</span>            key: MonoidActElement::from_key(key),\n<span data-nosnippet>368</span>            value: LazyMapElement::from_key(value),\n<span data-nosnippet>369</span>        };\n<span data-nosnippet>370</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">node = </a><span class=\"highlight focus\">BstRoot::from_data</span><a href=\"../tools/scanner.rs.html#391\">(data, </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator.deref_mut());\n<span data-nosnippet>371</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">node_id = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.register(</a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">node);\n<span data-nosnippet>372</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root = TreapSpec::merge(TreapSpec::merge(left, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)), right);\n<span data-nosnippet>373</span>        node_id\n<span data-nosnippet>374</span>    }</a></code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#267-272\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/marker/struct.Mut.html\" title=\"struct competitive::data_structure::binary_search_tree::node::marker::Mut\">Mut</a>&lt;'_&gt;, Spec&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[7,7],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#455&#34;,&#34;line 455&#34;],[[16,16],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#464&#34;,&#34;line 464&#34;],[[22,22],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#470&#34;,&#34;line 470&#34;],[[28,28],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#476&#34;,&#34;line 476&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/node.rs (<a href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#455\">line 455</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>448</span>    <span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">take(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;BstNodeRef&lt;marker::Owned, Spec&gt;&gt; {\n<span data-nosnippet>449</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">child = </a><span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.node.as_mut().child.get_unchecked_mut(Dir::IDX) };\n<span data-nosnippet>450</span>        child.take().map(|node| {\n<span data-nosnippet>451</span>            </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = BstNodeRef {\n<span data-nosnippet>452</span>                node,\n<span data-nosnippet>453</span>                _marker: PhantomData,\n<span data-nosnippet>454</span>            };\n<span data-nosnippet>455</span>            Spec::Parent::take_parent(node.</a><span class=\"highlight focus\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">());\n<span data-nosnippet>456</span>            node\n<span data-nosnippet>457</span>        })\n<span data-nosnippet>458</span>    }\n<span data-nosnippet>459</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">replace(\n<span data-nosnippet>460</span>        </a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>,\n<span data-nosnippet>461</span>        <span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">other: BstNodeRef&lt;marker::Owned, Spec&gt;,\n<span data-nosnippet>462</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;BstNodeRef&lt;marker::Owned, Spec&gt;&gt; {\n<span data-nosnippet>463</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">child = </a><span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.node.as_mut().child.get_unchecked_mut(Dir::IDX) };\n<span data-nosnippet>464</span>        Spec::Parent::set_parent(other.</a><span class=\"highlight\">borrow_mut</span>(), <span class=\"prelude-val\">Some</span>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.node));\n<span data-nosnippet>465</span>        child.replace(other.node).map(|node| {\n<span data-nosnippet>466</span>            </a><span class=\"kw\">let </span><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node = BstNodeRef {\n<span data-nosnippet>467</span>                node,\n<span data-nosnippet>468</span>                _marker: PhantomData,\n<span data-nosnippet>469</span>            };\n<span data-nosnippet>470</span>            Spec::Parent::take_parent(node.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">());\n<span data-nosnippet>471</span>            node\n<span data-nosnippet>472</span>        })\n<span data-nosnippet>473</span>    }\n<span data-nosnippet>474</span>    </a><span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">set(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">other: BstNodeRef&lt;marker::Owned, Spec&gt;) {\n<span data-nosnippet>475</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">child = </a><span class=\"kw\">unsafe </span>{ <span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.node.as_mut().child.get_unchecked_mut(Dir::IDX) };\n<span data-nosnippet>476</span>        Spec::Parent::set_parent(other.</a><span class=\"highlight\">borrow_mut</span>(), <a class=\"prelude-val\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\">Some</a>(<span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node.<a href=\"../num/zero_one.rs.html#1-14\">node</a>));\n<span data-nosnippet>477</span>        </a><span class=\"kw-2\">*</span><a href=\"../tools/scanner.rs.html#391\">child = </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(other.node);\n<span data-nosnippet>478</span>    }</a></code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[10,10],&#34;src/competitive/data_structure/treap.rs.html#137&#34;,&#34;line 137&#34;],[[12,12],&#34;src/competitive/data_structure/treap.rs.html#139&#34;,&#34;line 139&#34;],[[17,17],&#34;src/competitive/data_structure/treap.rs.html#144&#34;,&#34;line 144&#34;],[[19,19],&#34;src/competitive/data_structure/treap.rs.html#146&#34;,&#34;line 146&#34;],[[46,46],&#34;src/competitive/data_structure/treap.rs.html#173&#34;,&#34;line 173&#34;],[[49,49],&#34;src/competitive/data_structure/treap.rs.html#176&#34;,&#34;line 176&#34;],[[56,56],&#34;src/competitive/data_structure/treap.rs.html#183&#34;,&#34;line 183&#34;],[[59,59],&#34;src/competitive/data_structure/treap.rs.html#186&#34;,&#34;line 186&#34;],[[88,88],&#34;src/competitive/data_structure/treap.rs.html#215&#34;,&#34;line 215&#34;],[[89,89],&#34;src/competitive/data_structure/treap.rs.html#216&#34;,&#34;line 216&#34;],[[91,91],&#34;src/competitive/data_structure/treap.rs.html#218&#34;,&#34;line 218&#34;],[[94,94],&#34;src/competitive/data_structure/treap.rs.html#221&#34;,&#34;line 221&#34;],[[102,102],&#34;src/competitive/data_structure/treap.rs.html#229&#34;,&#34;line 229&#34;],[[103,103],&#34;src/competitive/data_structure/treap.rs.html#230&#34;,&#34;line 230&#34;],[[105,105],&#34;src/competitive/data_structure/treap.rs.html#232&#34;,&#34;line 232&#34;],[[108,108],&#34;src/competitive/data_structure/treap.rs.html#235&#34;,&#34;line 235&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/treap.rs (<a href=\"src/competitive/data_structure/treap.rs.html#137\">line 137</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>127</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">merge(\n<span data-nosnippet>128</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>129</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>130</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>131</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>132</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>133</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>134</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>135</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().priority &gt; right.reborrow().into_data().priority {\n<span data-nosnippet>136</span>                    TreapSpec::top_down(left.borrow_datamut());\n<span data-nosnippet>137</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.</a><span class=\"highlight focus\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().right().take();\n<span data-nosnippet>138</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = <span class=\"self\">Self</span>::merge(lr, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)).unwrap_unchecked();\n<span data-nosnippet>139</span>                    left.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().right().set(lr);\n<span data-nosnippet>140</span>                    TreapSpec::bottom_up(left.borrow_datamut());\n<span data-nosnippet>141</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>142</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>143</span>                    TreapSpec::top_down(right.borrow_datamut());\n<span data-nosnippet>144</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().left().take();\n<span data-nosnippet>145</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = <span class=\"self\">Self</span>::merge(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), rl).unwrap_unchecked();\n<span data-nosnippet>146</span>                    right.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().left().set(rl);\n<span data-nosnippet>147</span>                    TreapSpec::bottom_up(right.borrow_datamut());\n<span data-nosnippet>148</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>149</span>                }\n<span data-nosnippet>150</span>            },\n<span data-nosnippet>151</span>        }\n<span data-nosnippet>152</span>    }\n<span data-nosnippet>153</span>\n<span data-nosnippet>154</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">split&lt;Seeker&gt;(\n<span data-nosnippet>155</span>        node: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>156</span>        </a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">seeker: Seeker,\n<span data-nosnippet>157</span>        eq_left: bool,\n<span data-nosnippet>158</span>    ) -&gt; (</a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;, </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;)\n<span data-nosnippet>159</span>    </a><span class=\"kw\">where\n<span data-nosnippet>160</span>        </span><a href=\"../tools/scanner.rs.html#391\">Seeker: BstSeeker&lt;Spec = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>161</span>    {\n<span data-nosnippet>162</span>        <span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node {\n<span data-nosnippet>163</span>            </a><span class=\"prelude-val\">None </span>=&gt; (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>),\n<span data-nosnippet>164</span>            <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node) =&gt; {\n<span data-nosnippet>165</span>                <span class=\"self\">Self</span>::top_down(node.borrow_datamut());\n<span data-nosnippet>166</span>                </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">seek_left = </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">seeker.bst_seek(node.reborrow()) {\n<span data-nosnippet>167</span>                    Ordering::Less =&gt; </a><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>168</span>                    Ordering::Equal =&gt; !eq_left,\n<span data-nosnippet>169</span>                    Ordering::Greater =&gt; </a><span class=\"bool-val\">true</span>,\n<span data-nosnippet>170</span>                };\n<span data-nosnippet>171</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">seek_left {\n<span data-nosnippet>172</span>                    </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>173</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">left = node.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().left().take();\n<span data-nosnippet>174</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(left, seeker, eq_left);\n<span data-nosnippet>175</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = r {\n<span data-nosnippet>176</span>                            node.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().left().set(r);\n<span data-nosnippet>177</span>                        }\n<span data-nosnippet>178</span>                        <span class=\"self\">Self</span>::bottom_up(node.borrow_datamut());\n<span data-nosnippet>179</span>                        (l, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node))\n<span data-nosnippet>180</span>                    }\n<span data-nosnippet>181</span>                } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>182</span>                    <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>183</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">right = node.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().right().take();\n<span data-nosnippet>184</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(right, seeker, eq_left);\n<span data-nosnippet>185</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = l {\n<span data-nosnippet>186</span>                            node.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().right().set(l);\n<span data-nosnippet>187</span>                        }\n<span data-nosnippet>188</span>                        <span class=\"self\">Self</span>::bottom_up(node.borrow_datamut());\n<span data-nosnippet>189</span>                        (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), r)\n<span data-nosnippet>190</span>                    }\n<span data-nosnippet>191</span>                }\n<span data-nosnippet>192</span>            }\n<span data-nosnippet>193</span>        }\n<span data-nosnippet>194</span>    }\n<span data-nosnippet>195</span>}\n<span data-nosnippet>196</span>\n<span data-nosnippet>197</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L&gt; TreapSpec&lt;M, L&gt;\n<span data-nosnippet>198</span></a><span class=\"kw\">where\n<span data-nosnippet>199</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>200</span>    M::Key: Ord,\n<span data-nosnippet>201</span>    L: LazyMapMonoid,\n<span data-nosnippet>202</span>{\n<span data-nosnippet>203</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">merge_ordered(\n<span data-nosnippet>204</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>205</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>206</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>207</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>208</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>209</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>210</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>211</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().priority &gt; right.reborrow().into_data().priority {\n<span data-nosnippet>212</span>                    <span class=\"self\">Self</span>::top_down(left.borrow_datamut());\n<span data-nosnippet>213</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().key.key;\n<span data-nosnippet>214</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(rl, rr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>215</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ll = left.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().left().take();\n<span data-nosnippet>216</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().right().take();\n<span data-nosnippet>217</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>218</span>                        left.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().left().set(l);\n<span data-nosnippet>219</span>                    }\n<span data-nosnippet>220</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>221</span>                        left.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().right().set(r);\n<span data-nosnippet>222</span>                    }\n<span data-nosnippet>223</span>                    <span class=\"self\">Self</span>::bottom_up(left.borrow_datamut());\n<span data-nosnippet>224</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>225</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>226</span>                    <span class=\"self\">Self</span>::top_down(right.borrow_datamut());\n<span data-nosnippet>227</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">right.reborrow().into_data().key.key;\n<span data-nosnippet>228</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(ll, lr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>229</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().left().take();\n<span data-nosnippet>230</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rr = right.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().right().take();\n<span data-nosnippet>231</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>232</span>                        right.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().left().set(l);\n<span data-nosnippet>233</span>                    }\n<span data-nosnippet>234</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>235</span>                        right.</a><span class=\"highlight\">borrow_mut</span><a href=\"../tools/scanner.rs.html#391\">().right().set(r);\n<span data-nosnippet>236</span>                    }\n<span data-nosnippet>237</span>                    <span class=\"self\">Self</span>::bottom_up(right.borrow_datamut());\n<span data-nosnippet>238</span>                    </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>239</span>                }\n<span data-nosnippet>240</span>            },\n<span data-nosnippet>241</span>        }\n<span data-nosnippet>242</span>    }</a></code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_datamut\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#273-278\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.borrow_datamut\" class=\"fn\">borrow_datamut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/marker/struct.DataMut.html\" title=\"struct competitive::data_structure::binary_search_tree::node::marker::DataMut\">DataMut</a>&lt;'_&gt;, Spec&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-3\"><a href=\"#scraped-examples-3\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/data_structure/binary_search_tree/split.rs.html#45&#34;,&#34;line 45&#34;],[[5,5],&#34;src/competitive/data_structure/binary_search_tree/split.rs.html#49&#34;,&#34;line 49&#34;],[[72,72],&#34;src/competitive/data_structure/binary_search_tree/split.rs.html#116&#34;,&#34;line 116&#34;],[[76,76],&#34;src/competitive/data_structure/binary_search_tree/split.rs.html#120&#34;,&#34;line 120&#34;],[[80,80],&#34;src/competitive/data_structure/binary_search_tree/split.rs.html#124&#34;,&#34;line 124&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/split.rs (<a href=\"src/competitive/data_structure/binary_search_tree/split.rs.html#45\">line 45</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>44</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">left_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>45</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.left.as_mut().map(|node| node.</a><span class=\"highlight focus\">borrow_datamut</span>())\n<span data-nosnippet>46</span>    }\n<span data-nosnippet>47</span>\n<span data-nosnippet>48</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">right_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>49</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.right.as_mut().map(|node| node.</a><span class=\"highlight\">borrow_datamut</span>())\n<span data-nosnippet>50</span>    }\n<span data-nosnippet>51</span>}\n<span data-nosnippet>52</span>\n<span data-nosnippet>53</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt; Drop </a><span class=\"kw\">for </span><a href=\"tools/scanner.rs.html#391\">Split&lt;</a><span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;\n<span data-nosnippet>54</span></a><span class=\"kw\">where\n<span data-nosnippet>55</span>    </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>56</span>{\n<span data-nosnippet>57</span>    </a><span class=\"kw\">fn </span><a href=\"tools/scanner.rs.html#391\">drop(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>58</span>        <span class=\"kw-2\">*</span><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.root = Spec::merge(</a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.left.take(), </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.right.take());\n<span data-nosnippet>59</span>    }\n<span data-nosnippet>60</span>}\n<span data-nosnippet>61</span>\n<span data-nosnippet>62</span></a><span class=\"kw\">pub struct </span><a href=\"tools/scanner.rs.html#391\">Split3&lt;</a><span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;\n<span data-nosnippet>63</span></a><span class=\"kw\">where\n<span data-nosnippet>64</span>    </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>65</span>{\n<span data-nosnippet>66</span>    left: </a><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>67</span>    mid: </a><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>68</span>    right: </a><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>69</span>    root: </a><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>70</span>}\n<span data-nosnippet>71</span>\n<span data-nosnippet>72</span></a><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt; Split3&lt;</a><span class=\"lifetime\">'a</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;\n<span data-nosnippet>73</span></a><span class=\"kw\">where\n<span data-nosnippet>74</span>    </span><a href=\"tools/scanner.rs.html#391\">Spec: BstSpec,\n<span data-nosnippet>75</span>{\n<span data-nosnippet>76</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">new&lt;Seek1, Seek2&gt;(\n<span data-nosnippet>77</span>        node: </a><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span><span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstRoot&lt;Spec&gt;&gt;,\n<span data-nosnippet>78</span>        start: Bound&lt;Seek1&gt;,\n<span data-nosnippet>79</span>        end: Bound&lt;Seek2&gt;,\n<span data-nosnippet>80</span>    ) -&gt; </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self\n<span data-nosnippet>81</span>    </a><span class=\"kw\">where\n<span data-nosnippet>82</span>        </span><a href=\"tools/scanner.rs.html#391\">Seek1: BstSeeker&lt;Spec = Spec&gt;,\n<span data-nosnippet>83</span>        Seek2: BstSeeker&lt;Spec = Spec&gt;,\n<span data-nosnippet>84</span>    {\n<span data-nosnippet>85</span>        </a><span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span><a href=\"tools/scanner.rs.html#391\">rest, right) = </a><span class=\"kw\">match </span><a href=\"tools/scanner.rs.html#391\">end {\n<span data-nosnippet>86</span>            Bound::Included(seeker) =&gt; Spec::split(node.take(), seeker, </a><span class=\"bool-val\">true</span><a href=\"tools/scanner.rs.html#391\">),\n<span data-nosnippet>87</span>            Bound::Excluded(seeker) =&gt; Spec::split(node.take(), seeker, </a><span class=\"bool-val\">false</span><a href=\"tools/scanner.rs.html#391\">),\n<span data-nosnippet>88</span>            Bound::Unbounded =&gt; (node.take(), </a><span class=\"prelude-val\">None</span>),\n<span data-nosnippet>89</span>        };\n<span data-nosnippet>90</span>        <span class=\"kw\">let </span><a href=\"tools/scanner.rs.html#391\">(left, mid) = </a><span class=\"kw\">match </span><a href=\"tools/scanner.rs.html#391\">start {\n<span data-nosnippet>91</span>            Bound::Included(seeker) =&gt; Spec::split(rest.take(), seeker, </a><span class=\"bool-val\">false</span><a href=\"tools/scanner.rs.html#391\">),\n<span data-nosnippet>92</span>            Bound::Excluded(seeker) =&gt; Spec::split(rest.take(), seeker, </a><span class=\"bool-val\">true</span><a href=\"tools/scanner.rs.html#391\">),\n<span data-nosnippet>93</span>            Bound::Unbounded =&gt; (</a><span class=\"prelude-val\">None</span><a href=\"tools/scanner.rs.html#391\">, rest),\n<span data-nosnippet>94</span>        };\n<span data-nosnippet>95</span>        </a><a class=\"self\" href=\"tools/scanner.rs.html#391\">Self </a><a href=\"tools/scanner.rs.html#391\">{\n<span data-nosnippet>96</span>            left,\n<span data-nosnippet>97</span>            mid,\n<span data-nosnippet>98</span>            right,\n<span data-nosnippet>99</span>            root: node,\n<span data-nosnippet>100</span>        }\n<span data-nosnippet>101</span>    }\n<span data-nosnippet>102</span>\n<span data-nosnippet>103</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">left(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>104</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.left.as_ref().map(|node| node.reborrow())\n<span data-nosnippet>105</span>    }\n<span data-nosnippet>106</span>\n<span data-nosnippet>107</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">mid(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>108</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.mid.as_ref().map(|node| node.reborrow())\n<span data-nosnippet>109</span>    }\n<span data-nosnippet>110</span>\n<span data-nosnippet>111</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">right(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstImmutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>112</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.right.as_ref().map(|node| node.reborrow())\n<span data-nosnippet>113</span>    }\n<span data-nosnippet>114</span>\n<span data-nosnippet>115</span>    </a><span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">left_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>116</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.left.as_mut().map(|node| node.</a><span class=\"highlight\">borrow_datamut</span>())\n<span data-nosnippet>117</span>    }\n<span data-nosnippet>118</span>\n<span data-nosnippet>119</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">mid_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>120</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.mid.as_mut().map(|node| node.</a><span class=\"highlight\">borrow_datamut</span>())\n<span data-nosnippet>121</span>    }\n<span data-nosnippet>122</span>\n<span data-nosnippet>123</span>    <span class=\"kw\">pub fn </span><a href=\"tools/scanner.rs.html#391\">right_datamut(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span><a href=\"tools/scanner.rs.html#391\">&lt;BstDataMutRef&lt;</a><span class=\"lifetime\">'_</span><a href=\"tools/scanner.rs.html#391\">, Spec&gt;&gt; {\n<span data-nosnippet>124</span>        </a><span class=\"self\">self</span><a href=\"tools/scanner.rs.html#391\">.right.as_mut().map(|node| node.</a><span class=\"highlight\">borrow_datamut</span>())\n<span data-nosnippet>125</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[9,9],&#34;src/competitive/data_structure/treap.rs.html#136&#34;,&#34;line 136&#34;],[[13,13],&#34;src/competitive/data_structure/treap.rs.html#140&#34;,&#34;line 140&#34;],[[16,16],&#34;src/competitive/data_structure/treap.rs.html#143&#34;,&#34;line 143&#34;],[[20,20],&#34;src/competitive/data_structure/treap.rs.html#147&#34;,&#34;line 147&#34;],[[38,38],&#34;src/competitive/data_structure/treap.rs.html#165&#34;,&#34;line 165&#34;],[[51,51],&#34;src/competitive/data_structure/treap.rs.html#178&#34;,&#34;line 178&#34;],[[61,61],&#34;src/competitive/data_structure/treap.rs.html#188&#34;,&#34;line 188&#34;],[[85,85],&#34;src/competitive/data_structure/treap.rs.html#212&#34;,&#34;line 212&#34;],[[96,96],&#34;src/competitive/data_structure/treap.rs.html#223&#34;,&#34;line 223&#34;],[[99,99],&#34;src/competitive/data_structure/treap.rs.html#226&#34;,&#34;line 226&#34;],[[110,110],&#34;src/competitive/data_structure/treap.rs.html#237&#34;,&#34;line 237&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/treap.rs (<a href=\"src/competitive/data_structure/treap.rs.html#136\">line 136</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>127</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">merge(\n<span data-nosnippet>128</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>129</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>130</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>131</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>132</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>133</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>134</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>135</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().priority &gt; right.reborrow().into_data().priority {\n<span data-nosnippet>136</span>                    TreapSpec::top_down(left.</a><span class=\"highlight focus\">borrow_datamut</span>());\n<span data-nosnippet>137</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.borrow_mut().right().take();\n<span data-nosnippet>138</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = <span class=\"self\">Self</span>::merge(lr, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)).unwrap_unchecked();\n<span data-nosnippet>139</span>                    left.borrow_mut().right().set(lr);\n<span data-nosnippet>140</span>                    TreapSpec::bottom_up(left.</a><span class=\"highlight\">borrow_datamut</span>());\n<span data-nosnippet>141</span>                    <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>142</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>143</span>                    TreapSpec::top_down(right.</a><span class=\"highlight\">borrow_datamut</span>());\n<span data-nosnippet>144</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.borrow_mut().left().take();\n<span data-nosnippet>145</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = <span class=\"self\">Self</span>::merge(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), rl).unwrap_unchecked();\n<span data-nosnippet>146</span>                    right.borrow_mut().left().set(rl);\n<span data-nosnippet>147</span>                    TreapSpec::bottom_up(right.</a><span class=\"highlight\">borrow_datamut</span>());\n<span data-nosnippet>148</span>                    <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>149</span>                }\n<span data-nosnippet>150</span>            },\n<span data-nosnippet>151</span>        }\n<span data-nosnippet>152</span>    }\n<span data-nosnippet>153</span>\n<span data-nosnippet>154</span>    </a><span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">split&lt;Seeker&gt;(\n<span data-nosnippet>155</span>        node: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>156</span>        </a><span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">seeker: Seeker,\n<span data-nosnippet>157</span>        eq_left: bool,\n<span data-nosnippet>158</span>    ) -&gt; (</a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;, </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;)\n<span data-nosnippet>159</span>    </a><span class=\"kw\">where\n<span data-nosnippet>160</span>        </span><a href=\"../tools/scanner.rs.html#391\">Seeker: BstSeeker&lt;Spec = </a><span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>161</span>    {\n<span data-nosnippet>162</span>        <span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">node {\n<span data-nosnippet>163</span>            </a><span class=\"prelude-val\">None </span>=&gt; (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>),\n<span data-nosnippet>164</span>            <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">node) =&gt; {\n<span data-nosnippet>165</span>                <span class=\"self\">Self</span>::top_down(node.</a><span class=\"highlight\">borrow_datamut</span>());\n<span data-nosnippet>166</span>                <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">seek_left = </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">seeker.bst_seek(node.reborrow()) {\n<span data-nosnippet>167</span>                    Ordering::Less =&gt; </a><span class=\"bool-val\">false</span><a href=\"../tools/scanner.rs.html#391\">,\n<span data-nosnippet>168</span>                    Ordering::Equal =&gt; !eq_left,\n<span data-nosnippet>169</span>                    Ordering::Greater =&gt; </a><span class=\"bool-val\">true</span>,\n<span data-nosnippet>170</span>                };\n<span data-nosnippet>171</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">seek_left {\n<span data-nosnippet>172</span>                    </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>173</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">left = node.borrow_mut().left().take();\n<span data-nosnippet>174</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(left, seeker, eq_left);\n<span data-nosnippet>175</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = r {\n<span data-nosnippet>176</span>                            node.borrow_mut().left().set(r);\n<span data-nosnippet>177</span>                        }\n<span data-nosnippet>178</span>                        <span class=\"self\">Self</span>::bottom_up(node.</a><span class=\"highlight\">borrow_datamut</span><a href=\"../tools/scanner.rs.html#391\">());\n<span data-nosnippet>179</span>                        (l, </a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node))\n<span data-nosnippet>180</span>                    }\n<span data-nosnippet>181</span>                } </a><span class=\"kw\">else </span>{\n<span data-nosnippet>182</span>                    <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>183</span>                        <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">right = node.borrow_mut().right().take();\n<span data-nosnippet>184</span>                        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(l, r) = <span class=\"self\">Self</span>::split(right, seeker, eq_left);\n<span data-nosnippet>185</span>                        </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = l {\n<span data-nosnippet>186</span>                            node.borrow_mut().right().set(l);\n<span data-nosnippet>187</span>                        }\n<span data-nosnippet>188</span>                        <span class=\"self\">Self</span>::bottom_up(node.</a><span class=\"highlight\">borrow_datamut</span>());\n<span data-nosnippet>189</span>                        (<span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), r)\n<span data-nosnippet>190</span>                    }\n<span data-nosnippet>191</span>                }\n<span data-nosnippet>192</span>            }\n<span data-nosnippet>193</span>        }\n<span data-nosnippet>194</span>    }\n<span data-nosnippet>195</span>}\n<span data-nosnippet>196</span>\n<span data-nosnippet>197</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L&gt; TreapSpec&lt;M, L&gt;\n<span data-nosnippet>198</span></a><span class=\"kw\">where\n<span data-nosnippet>199</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>200</span>    M::Key: Ord,\n<span data-nosnippet>201</span>    L: LazyMapMonoid,\n<span data-nosnippet>202</span>{\n<span data-nosnippet>203</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">merge_ordered(\n<span data-nosnippet>204</span>        left: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>205</span>        right: </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt;,\n<span data-nosnippet>206</span>    ) -&gt; </a><span class=\"prelude-ty\">Option</span><a href=\"../tools/scanner.rs.html#391\">&lt;TreapRoot&lt;M, L&gt;&gt; {\n<span data-nosnippet>207</span>        </a><span class=\"kw\">match </span><a href=\"../tools/scanner.rs.html#391\">(left, right) {\n<span data-nosnippet>208</span>            (</a><span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">None</span>,\n<span data-nosnippet>209</span>            (<span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node)) | (</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node), </a><span class=\"prelude-val\">None</span>) =&gt; <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(node),\n<span data-nosnippet>210</span>            (</a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">left), </a><span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">mut </span><a href=\"../tools/scanner.rs.html#391\">right)) =&gt; </a><span class=\"kw\">unsafe </span>{\n<span data-nosnippet>211</span>                <span class=\"kw\">if </span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().priority &gt; right.reborrow().into_data().priority {\n<span data-nosnippet>212</span>                    <span class=\"self\">Self</span>::top_down(left.</a><span class=\"highlight\">borrow_datamut</span>());\n<span data-nosnippet>213</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">left.reborrow().into_data().key.key;\n<span data-nosnippet>214</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(rl, rr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>215</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">ll = left.borrow_mut().left().take();\n<span data-nosnippet>216</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">lr = left.borrow_mut().right().take();\n<span data-nosnippet>217</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>218</span>                        left.borrow_mut().left().set(l);\n<span data-nosnippet>219</span>                    }\n<span data-nosnippet>220</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>221</span>                        left.borrow_mut().right().set(r);\n<span data-nosnippet>222</span>                    }\n<span data-nosnippet>223</span>                    <span class=\"self\">Self</span>::bottom_up(left.</a><span class=\"highlight\">borrow_datamut</span>());\n<span data-nosnippet>224</span>                    <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left)\n<span data-nosnippet>225</span>                } </a><span class=\"kw\">else </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>226</span>                    <span class=\"self\">Self</span>::top_down(right.</a><span class=\"highlight\">borrow_datamut</span>());\n<span data-nosnippet>227</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">key = </a><span class=\"kw-2\">&amp;</span><a href=\"../tools/scanner.rs.html#391\">right.reborrow().into_data().key.key;\n<span data-nosnippet>228</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">(ll, lr) = <span class=\"self\">Self</span>::split(</a><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(left), SeekByKey::new(key), </a><span class=\"bool-val\">false</span>);\n<span data-nosnippet>229</span>                    <span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rl = right.borrow_mut().left().take();\n<span data-nosnippet>230</span>                    </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">rr = right.borrow_mut().right().take();\n<span data-nosnippet>231</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(l) = <span class=\"self\">Self</span>::merge_ordered(ll, rl) {\n<span data-nosnippet>232</span>                        right.borrow_mut().left().set(l);\n<span data-nosnippet>233</span>                    }\n<span data-nosnippet>234</span>                    </a><span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(r) = <span class=\"self\">Self</span>::merge_ordered(lr, rr) {\n<span data-nosnippet>235</span>                        right.borrow_mut().right().set(r);\n<span data-nosnippet>236</span>                    }\n<span data-nosnippet>237</span>                    <span class=\"self\">Self</span>::bottom_up(right.</a><span class=\"highlight\">borrow_datamut</span>());\n<span data-nosnippet>238</span>                    <span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(right)\n<span data-nosnippet>239</span>                }\n<span data-nosnippet>240</span>            },\n<span data-nosnippet>241</span>        }\n<span data-nosnippet>242</span>    }</a></code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_dying\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#279-284\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html#tymethod.into_dying\" class=\"fn\">into_dying</a>(self) -&gt; <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;<a class=\"enum\" href=\"competitive/data_structure/binary_search_tree/node/marker/enum.Dying.html\" title=\"enum competitive::data_structure::binary_search_tree::node::marker::Dying\">Dying</a>, Spec&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-4\"><a href=\"#scraped-examples-4\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[3,3],&#34;src/competitive/data_structure/treap.rs.html#287&#34;,&#34;line 287&#34;],[[39,39],&#34;src/competitive/data_structure/treap.rs.html#323&#34;,&#34;line 323&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/treap.rs (<a href=\"src/competitive/data_structure/treap.rs.html#287\">line 287</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>284</span>    <span class=\"kw\">fn </span><a href=\"../tools/scanner.rs.html#391\">drop(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>285</span>        <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>286</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(root) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root.take() {\n<span data-nosnippet>287</span>                root.</a><span class=\"highlight focus\">into_dying</span><a href=\"../tools/scanner.rs.html#391\">().drop_all(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator.deref_mut());\n<span data-nosnippet>288</span>            }\n<span data-nosnippet>289</span>            ManuallyDrop::drop(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator);\n<span data-nosnippet>290</span>        }\n<span data-nosnippet>291</span>    }\n<span data-nosnippet>292</span>}\n<span data-nosnippet>293</span>\n<span data-nosnippet>294</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L&gt; Treap&lt;M, L&gt;\n<span data-nosnippet>295</span></a><span class=\"kw\">where\n<span data-nosnippet>296</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>297</span>    M::Key: Ord,\n<span data-nosnippet>298</span>    L: LazyMapMonoid,\n<span data-nosnippet>299</span>{\n<span data-nosnippet>300</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">new() -&gt; </a><a class=\"self\" href=\"../tools/scanner.rs.html#391\">Self </a><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>301</span>        <span class=\"self\">Self</span>::default()\n<span data-nosnippet>302</span>    }\n<span data-nosnippet>303</span>}\n<span data-nosnippet>304</span>\n<span data-nosnippet>305</span></a><span class=\"kw\">impl</span><a href=\"../tools/scanner.rs.html#391\">&lt;M, L, A&gt; Treap&lt;M, L, A&gt;\n<span data-nosnippet>306</span></a><span class=\"kw\">where\n<span data-nosnippet>307</span>    </span><a href=\"../tools/scanner.rs.html#391\">M: MonoidAct,\n<span data-nosnippet>308</span>    M::Key: Ord,\n<span data-nosnippet>309</span>    L: LazyMapMonoid,\n<span data-nosnippet>310</span>    A: Allocator&lt;TreapNode&lt;M, L&gt;&gt;,\n<span data-nosnippet>311</span>{\n<span data-nosnippet>312</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">len(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; usize {\n<span data-nosnippet>313</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.len()\n<span data-nosnippet>314</span>    }\n<span data-nosnippet>315</span>\n<span data-nosnippet>316</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">is_empty(</a><span class=\"kw-2\">&amp;</span><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">) -&gt; bool {\n<span data-nosnippet>317</span>        </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.is_empty()\n<span data-nosnippet>318</span>    }\n<span data-nosnippet>319</span>\n<span data-nosnippet>320</span>    </a><span class=\"kw\">pub fn </span><a href=\"../tools/scanner.rs.html#391\">clear(</a><span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>321</span>        <span class=\"kw\">unsafe </span>{\n<span data-nosnippet>322</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span><a href=\"../tools/scanner.rs.html#391\">(root) = </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.root.take() {\n<span data-nosnippet>323</span>                root.</a><span class=\"highlight\">into_dying</span><a href=\"../tools/scanner.rs.html#391\">().drop_all(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.allocator.deref_mut());\n<span data-nosnippet>324</span>            }\n<span data-nosnippet>325</span>            </a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node_id_manager.clear();\n<span data-nosnippet>326</span>        }\n<span data-nosnippet>327</span>    }</a></code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[8,8],&#34;src/competitive/data_structure/binary_search_tree/node.rs.html#412&#34;,&#34;line 412&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/data_structure/binary_search_tree/node.rs (<a href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#412\">line 412</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>404</span>    <span class=\"kw\">pub unsafe fn </span><a href=\"../tools/scanner.rs.html#391\">drop_all&lt;A&gt;(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">, allocator: </a><span class=\"kw-2\">&amp;mut </span><a href=\"../tools/scanner.rs.html#391\">A)\n<span data-nosnippet>405</span>    </a><span class=\"kw\">where\n<span data-nosnippet>406</span>        </span><a href=\"../tools/scanner.rs.html#391\">A: Allocator&lt;BstNode&lt;Spec::Data, Spec::Parent&gt;&gt;,\n<span data-nosnippet>407</span>    {\n<span data-nosnippet>408</span>        </a><span class=\"kw\">let </span><a href=\"../tools/scanner.rs.html#391\">BstNode { child, .. } = allocator.deallocate(</a><span class=\"self\">self</span><a href=\"../tools/scanner.rs.html#391\">.node);\n<span data-nosnippet>409</span>        </a><span class=\"kw\">for </span><a href=\"../tools/scanner.rs.html#391\">node </a><span class=\"kw\">in </span><a href=\"../tools/scanner.rs.html#391\">child.into_iter().flatten() {\n<span data-nosnippet>410</span>            </a><span class=\"kw\">unsafe </span><a href=\"../tools/scanner.rs.html#391\">{\n<span data-nosnippet>411</span>                BstNodeRef::&lt;marker::Owned, Spec&gt;::new(node)\n<span data-nosnippet>412</span>                    .</a><span class=\"highlight focus\">into_dying</span><a href=\"../tools/scanner.rs.html#391\">()\n<span data-nosnippet>413</span>                    .drop_all(allocator)\n<span data-nosnippet>414</span>            }\n<span data-nosnippet>415</span>        }\n<span data-nosnippet>416</span>    }</a></code></pre></div></div></div></details></div></details></div></details>",0,"competitive::data_structure::binary_search_tree::node::BstRoot"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BstNodeRef%3CImmut%3C'a%3E,+Spec%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#169-177\">Source</a><a href=\"#impl-Clone-for-BstNodeRef%3CImmut%3C'a%3E,+Spec%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, Spec&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/marker/struct.Immut.html\" title=\"struct competitive::data_structure::binary_search_tree::node::marker::Immut\">Immut</a>&lt;'a&gt;, Spec&gt;<div class=\"where\">where\n    Spec: <a class=\"trait\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html\" title=\"trait competitive::data_structure::binary_search_tree::node::BstSpec\">BstSpec</a>,\n    Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a>: 'a,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#174-176\">Source</a><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","competitive::data_structure::binary_search_tree::node::BstImmutRef"],["<section id=\"impl-Copy-for-BstNodeRef%3CImmut%3C'a%3E,+Spec%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/data_structure/binary_search_tree/node.rs.html#163-168\">Source</a><a href=\"#impl-Copy-for-BstNodeRef%3CImmut%3C'a%3E,+Spec%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;'a, Spec&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/struct.BstNodeRef.html\" title=\"struct competitive::data_structure::binary_search_tree::node::BstNodeRef\">BstNodeRef</a>&lt;<a class=\"struct\" href=\"competitive/data_structure/binary_search_tree/node/marker/struct.Immut.html\" title=\"struct competitive::data_structure::binary_search_tree::node::marker::Immut\">Immut</a>&lt;'a&gt;, Spec&gt;<div class=\"where\">where\n    Spec: <a class=\"trait\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html\" title=\"trait competitive::data_structure::binary_search_tree::node::BstSpec\">BstSpec</a>,\n    Spec::<a class=\"associatedtype\" href=\"competitive/data_structure/binary_search_tree/node/trait.BstSpec.html#associatedtype.Data\" title=\"type competitive::data_structure::binary_search_tree::node::BstSpec::Data\">Data</a>: 'a,</div></h3></section>","Copy","competitive::data_structure::binary_search_tree::node::BstImmutRef"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[492286]}