(function() {
    var type_impls = Object.fromEntries([["competitive",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MarkedIterScan-for-SparseGraphScanner%3CU,+T,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#226-240\">Source</a><a href=\"#impl-MarkedIterScan-for-SparseGraphScanner%3CU,+T,+D%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;U, T, D&gt; <a class=\"trait\" href=\"competitive/tools/trait.MarkedIterScan.html\" title=\"trait competitive::tools::MarkedIterScan\">MarkedIterScan</a> for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraphScanner.html\" title=\"struct competitive::graph::SparseGraphScanner\">SparseGraphScanner</a>&lt;U, T, D&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"competitive/tools/trait.IterScan.html\" title=\"trait competitive::tools::IterScan\">IterScan</a>&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    T: <a class=\"trait\" href=\"competitive/tools/trait.IterScan.html\" title=\"trait competitive::tools::IterScan\">IterScan</a>,\n    D: <a class=\"trait\" href=\"competitive/graph/trait.SparseGraphConstruction.html\" title=\"trait competitive::graph::SparseGraphConstruction\">SparseGraphConstruction</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#232\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"competitive/tools/trait.MarkedIterScan.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = (<a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;&lt;T as <a class=\"trait\" href=\"competitive/tools/trait.IterScan.html\" title=\"trait competitive::tools::IterScan\">IterScan</a>&gt;::<a class=\"associatedtype\" href=\"competitive/tools/trait.IterScan.html#associatedtype.Output\" title=\"type competitive::tools::IterScan::Output\">Output</a>&gt;)</h4></section><section id=\"method.mscan\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#233-239\">Source</a><a href=\"#method.mscan\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"competitive/tools/trait.MarkedIterScan.html#tymethod.mscan\" class=\"fn\">mscan</a>&lt;'a, I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;&gt;(\n    self,\n    iter: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut I</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self::<a class=\"associatedtype\" href=\"competitive/tools/trait.MarkedIterScan.html#associatedtype.Output\" title=\"type competitive::tools::MarkedIterScan::Output\">Output</a>&gt;</h4></section></div></details>","MarkedIterScan","competitive::graph::sparse_graph::DirectedGraphScanner","competitive::graph::sparse_graph::UndirectedGraphScanner","competitive::graph::sparse_graph::BidirectionalGraphScanner"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseGraphScanner%3CU,+T,+D%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#212-224\">Source</a><a href=\"#impl-SparseGraphScanner%3CU,+T,+D%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;U, T, D&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraphScanner.html\" title=\"struct competitive::graph::SparseGraphScanner\">SparseGraphScanner</a>&lt;U, T, D&gt;<div class=\"where\">where\n    U: <a class=\"trait\" href=\"competitive/tools/trait.IterScan.html\" title=\"trait competitive::tools::IterScan\">IterScan</a>&lt;Output = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    T: <a class=\"trait\" href=\"competitive/tools/trait.IterScan.html\" title=\"trait competitive::tools::IterScan\">IterScan</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#217-223\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraphScanner.html#tymethod.new\" class=\"fn\">new</a>(vsize: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, esize: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></div></details>",0,"competitive::graph::sparse_graph::DirectedGraphScanner","competitive::graph::sparse_graph::UndirectedGraphScanner","competitive::graph::sparse_graph::BidirectionalGraphScanner"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[5353]}