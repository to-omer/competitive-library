(function() {
    var type_impls = Object.fromEntries([["competitive",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Adjacencies-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#304-315\">Source</a><a href=\"#impl-Adjacencies-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"competitive/graph/trait.Adjacencies.html\" title=\"trait competitive::graph::Adjacencies\">Adjacencies</a> for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.AIndex\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#305\">Source</a><a href=\"#associatedtype.AIndex\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/graph/trait.Adjacencies.html#associatedtype.AIndex\" class=\"associatedtype\">AIndex</a> = <a class=\"struct\" href=\"competitive/graph/struct.Adjacency.html\" title=\"struct competitive::graph::Adjacency\">Adjacency</a></h4></section><section id=\"associatedtype.AIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#306-309\">Source</a><a href=\"#associatedtype.AIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/graph/trait.Adjacencies.html#associatedtype.AIter\" class=\"associatedtype\">AIter</a>&lt;'g&gt; = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/iter/adapters/cloned/struct.Cloned.html\" title=\"struct core::iter::adapters::cloned::Cloned\">Cloned</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'g, <a class=\"struct\" href=\"competitive/graph/struct.Adjacency.html\" title=\"struct competitive::graph::Adjacency\">Adjacency</a>&gt;&gt;\n<span class=\"where\">where\n    D: 'g</span></h4></section><section id=\"method.adjacencies\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#310-314\">Source</a><a href=\"#method.adjacencies\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.Adjacencies.html#tymethod.adjacencies\" class=\"fn\">adjacencies</a>(&amp;self, vid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.GraphBase.html#associatedtype.VIndex\" title=\"type competitive::graph::GraphBase::VIndex\">VIndex</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.Adjacencies.html#associatedtype.AIter\" title=\"type competitive::graph::Adjacencies::AIter\">AIter</a>&lt;'_&gt;</h4></section></div></details>","Adjacencies","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AdjacenciesWithEindex-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#316-327\">Source</a><a href=\"#impl-AdjacenciesWithEindex-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"competitive/graph/trait.AdjacenciesWithEindex.html\" title=\"trait competitive::graph::AdjacenciesWithEindex\">AdjacenciesWithEindex</a> for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.AIndex\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#317\">Source</a><a href=\"#associatedtype.AIndex\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/graph/trait.AdjacenciesWithEindex.html#associatedtype.AIndex\" class=\"associatedtype\">AIndex</a> = <a class=\"struct\" href=\"competitive/graph/struct.Adjacency.html\" title=\"struct competitive::graph::Adjacency\">Adjacency</a></h4></section><section id=\"associatedtype.AIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#318-321\">Source</a><a href=\"#associatedtype.AIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/graph/trait.AdjacenciesWithEindex.html#associatedtype.AIter\" class=\"associatedtype\">AIter</a>&lt;'g&gt; = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/iter/adapters/cloned/struct.Cloned.html\" title=\"struct core::iter::adapters::cloned::Cloned\">Cloned</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'g, <a class=\"struct\" href=\"competitive/graph/struct.Adjacency.html\" title=\"struct competitive::graph::Adjacency\">Adjacency</a>&gt;&gt;\n<span class=\"where\">where\n    D: 'g</span></h4></section><section id=\"method.adjacencies_with_eindex\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#322-326\">Source</a><a href=\"#method.adjacencies_with_eindex\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.AdjacenciesWithEindex.html#tymethod.adjacencies_with_eindex\" class=\"fn\">adjacencies_with_eindex</a>(&amp;self, vid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.GraphBase.html#associatedtype.VIndex\" title=\"type competitive::graph::GraphBase::VIndex\">VIndex</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.AdjacenciesWithEindex.html#associatedtype.AIter\" title=\"type competitive::graph::AdjacenciesWithEindex::AIter\">AIter</a>&lt;'_&gt;</h4></section></div></details>","AdjacenciesWithEindex","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AdjacencyView%3C'a,+M,+T%3E-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#420-433\">Source</a><a href=\"#impl-AdjacencyView%3C'a,+M,+T%3E-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, D, M, T&gt; <a class=\"trait\" href=\"competitive/graph/trait.AdjacencyView.html\" title=\"trait competitive::graph::AdjacencyView\">AdjacencyView</a>&lt;'a, M, T&gt; for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"competitive/graph/trait.AdjacenciesWithEindex.html\" title=\"trait competitive::graph::AdjacenciesWithEindex\">AdjacenciesWithEindex</a> + <a class=\"trait\" href=\"competitive/graph/trait.EdgeView.html\" title=\"trait competitive::graph::EdgeView\">EdgeView</a>&lt;M, T&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    M: 'a,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.AViewIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#426-429\">Source</a><a href=\"#associatedtype.AViewIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/graph/trait.AdjacencyView.html#associatedtype.AViewIter\" class=\"associatedtype\">AViewIter</a>&lt;'g&gt; = <a class=\"struct\" href=\"competitive/graph/struct.AdjacencyViewIterFromEindex.html\" title=\"struct competitive::graph::AdjacencyViewIterFromEindex\">AdjacencyViewIterFromEindex</a>&lt;'g, 'a, <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;, M, T&gt;\n<span class=\"where\">where\n    D: 'g</span></h4></section><section id=\"method.aviews\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#430-432\">Source</a><a href=\"#method.aviews\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.AdjacencyView.html#tymethod.aviews\" class=\"fn\">aviews</a>&lt;'g&gt;(&amp;'g self, map: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a M</a>, vid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.GraphBase.html#associatedtype.VIndex\" title=\"type competitive::graph::GraphBase::VIndex\">VIndex</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.AdjacencyView.html#associatedtype.AViewIter\" title=\"type competitive::graph::AdjacencyView::AViewIter\">AViewIter</a>&lt;'g&gt;</h4></section></div></details>","AdjacencyView<'a, M, T>","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#28\">Source</a><a href=\"#impl-Clone-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#28\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">const fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#28\">Source</a><a href=\"#impl-Debug-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#28\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EIndexedGraph-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#280-282\">Source</a><a href=\"#impl-EIndexedGraph-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"competitive/graph/trait.EIndexedGraph.html\" title=\"trait competitive::graph::EIndexedGraph\">EIndexedGraph</a> for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.EIndex\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#281\">Source</a><a href=\"#associatedtype.EIndex\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/graph/trait.EIndexedGraph.html#associatedtype.EIndex\" class=\"associatedtype\">EIndex</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","EIndexedGraph","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EdgeMap%3CT%3E-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#379-399\">Source</a><a href=\"#impl-EdgeMap%3CT%3E-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D, T&gt; <a class=\"trait\" href=\"competitive/graph/trait.EdgeMap.html\" title=\"trait competitive::graph::EdgeMap\">EdgeMap</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Emap\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#380\">Source</a><a href=\"#associatedtype.Emap\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/graph/trait.EdgeMap.html#associatedtype.Emap\" class=\"associatedtype\">Emap</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section><section id=\"method.construct_emap\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#381-388\">Source</a><a href=\"#method.construct_emap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.EdgeMap.html#tymethod.construct_emap\" class=\"fn\">construct_emap</a>&lt;F&gt;(&amp;self, f: F) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.EdgeMap.html#associatedtype.Emap\" title=\"type competitive::graph::EdgeMap::Emap\">Emap</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; T,</div></h4></section><section id=\"method.emap_get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#389-393\">Source</a><a href=\"#method.emap_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.EdgeMap.html#tymethod.emap_get\" class=\"fn\">emap_get</a>&lt;'a&gt;(&amp;self, map: &amp;'a Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.EdgeMap.html#associatedtype.Emap\" title=\"type competitive::graph::EdgeMap::Emap\">Emap</a>, eid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.EIndexedGraph.html#associatedtype.EIndex\" title=\"type competitive::graph::EIndexedGraph::EIndex\">EIndex</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a></h4></section><section id=\"method.emap_get_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#394-398\">Source</a><a href=\"#method.emap_get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.EdgeMap.html#tymethod.emap_get_mut\" class=\"fn\">emap_get_mut</a>&lt;'a&gt;(\n    &amp;self,\n    map: &amp;'a mut Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.EdgeMap.html#associatedtype.Emap\" title=\"type competitive::graph::EdgeMap::Emap\">Emap</a>,\n    eid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.EIndexedGraph.html#associatedtype.EIndex\" title=\"type competitive::graph::EIndexedGraph::EIndex\">EIndex</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a mut T</a></h4></section><section id=\"method.emap_set\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/graph_base.rs.html#242-244\">Source</a><a href=\"#method.emap_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.EdgeMap.html#method.emap_set\" class=\"fn\">emap_set</a>(&amp;self, map: &amp;mut Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.EdgeMap.html#associatedtype.Emap\" title=\"type competitive::graph::EdgeMap::Emap\">Emap</a>, eid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.EIndexedGraph.html#associatedtype.EIndex\" title=\"type competitive::graph::EIndexedGraph::EIndex\">EIndex</a>, x: T)</h4></section></div></details>","EdgeMap<T>","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EdgeSize-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#289-293\">Source</a><a href=\"#impl-EdgeSize-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"competitive/graph/trait.EdgeSize.html\" title=\"trait competitive::graph::EdgeSize\">EdgeSize</a> for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.esize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#290-292\">Source</a><a href=\"#method.esize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.EdgeSize.html#tymethod.esize\" class=\"fn\">esize</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","EdgeSize","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EdgeView%3C%5BT%5D,+T%3E-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#409-418\">Source</a><a href=\"#impl-EdgeView%3C%5BT%5D,+T%3E-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D, T&gt; <a class=\"trait\" href=\"competitive/graph/trait.EdgeView.html\" title=\"trait competitive::graph::EdgeView\">EdgeView</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, T&gt; for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.eview\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#413-417\">Source</a><a href=\"#method.eview\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.EdgeView.html#tymethod.eview\" class=\"fn\">eview</a>(&amp;self, map: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, eid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.EIndexedGraph.html#associatedtype.EIndex\" title=\"type competitive::graph::EIndexedGraph::EIndex\">EIndex</a>) -&gt; T</h4></section></div></details>","EdgeView<[T], T>","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-EdgeView%3CVec%3CT%3E,+T%3E-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#400-407\">Source</a><a href=\"#impl-EdgeView%3CVec%3CT%3E,+T%3E-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D, T&gt; <a class=\"trait\" href=\"competitive/graph/trait.EdgeView.html\" title=\"trait competitive::graph::EdgeView\">EdgeView</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, T&gt; for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.eview\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#404-406\">Source</a><a href=\"#method.eview\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.EdgeView.html#tymethod.eview\" class=\"fn\">eview</a>(&amp;self, map: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, eid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.EIndexedGraph.html#associatedtype.EIndex\" title=\"type competitive::graph::EIndexedGraph::EIndex\">EIndex</a>) -&gt; T</h4></section></div></details>","EdgeView<Vec<T>, T>","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GraphBase-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#277-279\">Source</a><a href=\"#impl-GraphBase-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"competitive/graph/trait.GraphBase.html\" title=\"trait competitive::graph::GraphBase\">GraphBase</a> for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.VIndex\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#278\">Source</a><a href=\"#associatedtype.VIndex\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/graph/trait.GraphBase.html#associatedtype.VIndex\" class=\"associatedtype\">VIndex</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","GraphBase","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/order.rs.html#25-42\">Source</a><a href=\"#impl-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.dfs_order\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/order.rs.html#26-41\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.dfs_order\" class=\"fn\">dfs_order</a>(&amp;self, root: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></div></details>",0,"competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/order.rs.html#4-22\">Source</a><a href=\"#impl-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.bfs_order\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/order.rs.html#5-21\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.bfs_order\" class=\"fn\">bfs_order</a>(&amp;self, root: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></div></details>",0,"competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/order.rs.html#45-62\">Source</a><a href=\"#impl-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.dfs_tree\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/order.rs.html#46-61\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.dfs_tree\" class=\"fn\">dfs_tree</a>(&amp;self, root: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></div></details>",0,"competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/order.rs.html#65-93\">Source</a><a href=\"#impl-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.for_each_connected_components\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/order.rs.html#67-92\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.for_each_connected_components\" class=\"fn\">for_each_connected_components</a>&lt;F&gt;(&amp;self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;Self, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, &amp;[(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)]),</div></h4></section></summary><div class=\"docblock\"><p>f: |g, root, ord: [vertex, parent]| {}</p>\n</div></details></div></details>",0,"competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#37-60\">Source</a><a href=\"#impl-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.vertices_size\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#39-41\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.vertices_size\" class=\"fn\">vertices_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of vertices.</p>\n</div><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&#34;src/competitive/graph/sparse_graph.rs.html#48&#34;,&#34;line 48&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/sparse_graph.rs (<a href=\"src/competitive/graph/sparse_graph.rs.html#48\">line 48</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>47</span>    <span class=\"kw\">pub fn </span>vertices(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; ops::Range&lt;usize&gt; {\n<span data-nosnippet>48</span>        <span class=\"number\">0</span>..<span class=\"self\">self</span>.<span class=\"highlight focus\">vertices_size</span>()\n<span data-nosnippet>49</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/tree/depth.rs.html#13&#34;,&#34;line 13&#34;],[[2,2],&#34;src/competitive/tree/depth.rs.html#14&#34;,&#34;line 14&#34;],[[31,31],&#34;src/competitive/tree/depth.rs.html#43&#34;,&#34;line 43&#34;],[[47,47],&#34;src/competitive/tree/depth.rs.html#59&#34;,&#34;line 59&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/depth.rs (<a href=\"src/competitive/tree/depth.rs.html#13\">line 13</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>12</span>    <span class=\"kw\">pub fn </span>tree_depth(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, root: usize) -&gt; Vec&lt;u64&gt; {\n<span data-nosnippet>13</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>depth = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.<span class=\"highlight focus\">vertices_size</span>()];\n<span data-nosnippet>14</span>        <span class=\"self\">self</span>.depth_dfs(root, <span class=\"self\">self</span>.<span class=\"highlight\">vertices_size</span>(), <span class=\"number\">0</span>, <span class=\"kw-2\">&amp;mut </span>depth);\n<span data-nosnippet>15</span>        depth\n<span data-nosnippet>16</span>    }\n<span data-nosnippet>17</span>}\n<span data-nosnippet>18</span>\n<span data-nosnippet>19</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"weighted_tree_depth\"</span>, include(<span class=\"string\">\"algebra\"</span>, <span class=\"string\">\"SparseGraph\"</span>))]\n<span data-nosnippet>20</span></span><span class=\"kw\">impl </span>UndirectedSparseGraph {\n<span data-nosnippet>21</span>    <span class=\"kw\">fn </span>weighted_depth_dfs&lt;M, F&gt;(\n<span data-nosnippet>22</span>        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>,\n<span data-nosnippet>23</span>        u: usize,\n<span data-nosnippet>24</span>        p: usize,\n<span data-nosnippet>25</span>        d: M::T,\n<span data-nosnippet>26</span>        depth: <span class=\"kw-2\">&amp;mut </span>Vec&lt;M::T&gt;,\n<span data-nosnippet>27</span>        weight: <span class=\"kw-2\">&amp;</span>F,\n<span data-nosnippet>28</span>    ) <span class=\"kw\">where\n<span data-nosnippet>29</span>        </span>M: Monoid,\n<span data-nosnippet>30</span>        F: Fn(usize) -&gt; M::T,\n<span data-nosnippet>31</span>    {\n<span data-nosnippet>32</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.adjacencies(u).filter(|a| a.to != p) {\n<span data-nosnippet>33</span>            <span class=\"kw\">let </span>nd = M::operate(<span class=\"kw-2\">&amp;</span>d, <span class=\"kw-2\">&amp;</span>weight(a.id));\n<span data-nosnippet>34</span>            <span class=\"self\">self</span>.weighted_depth_dfs::&lt;M, <span class=\"kw\">_</span>&gt;(a.to, u, nd, depth, weight);\n<span data-nosnippet>35</span>        }\n<span data-nosnippet>36</span>        depth[u] = d;\n<span data-nosnippet>37</span>    }\n<span data-nosnippet>38</span>    <span class=\"kw\">pub fn </span>weighted_tree_depth&lt;M: Monoid, F: Fn(usize) -&gt; M::T&gt;(\n<span data-nosnippet>39</span>        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>,\n<span data-nosnippet>40</span>        root: usize,\n<span data-nosnippet>41</span>        weight: F,\n<span data-nosnippet>42</span>    ) -&gt; Vec&lt;M::T&gt; {\n<span data-nosnippet>43</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>depth = <span class=\"macro\">vec!</span>[M::unit(); <span class=\"self\">self</span>.<span class=\"highlight\">vertices_size</span>()];\n<span data-nosnippet>44</span>        <span class=\"self\">self</span>.weighted_depth_dfs::&lt;M, <span class=\"kw\">_</span>&gt;(root, usize::MAX, M::unit(), <span class=\"kw-2\">&amp;mut </span>depth, <span class=\"kw-2\">&amp;</span>weight);\n<span data-nosnippet>45</span>        depth\n<span data-nosnippet>46</span>    }\n<span data-nosnippet>47</span>}\n<span data-nosnippet>48</span>\n<span data-nosnippet>49</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"tree_size\"</span>, include(<span class=\"string\">\"SparseGraph\"</span>))]\n<span data-nosnippet>50</span></span><span class=\"kw\">impl </span>UndirectedSparseGraph {\n<span data-nosnippet>51</span>    <span class=\"kw\">fn </span>size_dfs(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, p: usize, size: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u64&gt;) {\n<span data-nosnippet>52</span>        size[u] = <span class=\"number\">1</span>;\n<span data-nosnippet>53</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.adjacencies(u).filter(|a| a.to != p) {\n<span data-nosnippet>54</span>            <span class=\"self\">self</span>.size_dfs(a.to, u, size);\n<span data-nosnippet>55</span>            size[u] += size[a.to];\n<span data-nosnippet>56</span>        }\n<span data-nosnippet>57</span>    }\n<span data-nosnippet>58</span>    <span class=\"kw\">pub fn </span>tree_size(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, root: usize) -&gt; Vec&lt;u64&gt; {\n<span data-nosnippet>59</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>size = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.<span class=\"highlight\">vertices_size</span>()];\n<span data-nosnippet>60</span>        <span class=\"self\">self</span>.size_dfs(root, usize::MAX, <span class=\"kw-2\">&amp;mut </span>size);\n<span data-nosnippet>61</span>        size\n<span data-nosnippet>62</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[3,3],&#34;src/competitive/tree/euler_tour.rs.html#18&#34;,&#34;line 18&#34;],[[4,4],&#34;src/competitive/tree/euler_tour.rs.html#19&#34;,&#34;line 19&#34;],[[37,37],&#34;src/competitive/tree/euler_tour.rs.html#52&#34;,&#34;line 52&#34;],[[97,97],&#34;src/competitive/tree/euler_tour.rs.html#112&#34;,&#34;line 112&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/euler_tour.rs (<a href=\"src/competitive/tree/euler_tour.rs.html#18\">line 18</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>15</span>    <span class=\"kw\">pub fn </span>new(root: usize, graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>16</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">Self </span>{\n<span data-nosnippet>17</span>            graph,\n<span data-nosnippet>18</span>            eidx: <span class=\"macro\">vec!</span>[(<span class=\"number\">0</span>, <span class=\"number\">0</span>); graph.<span class=\"highlight focus\">vertices_size</span>() - <span class=\"number\">1</span>],\n<span data-nosnippet>19</span>            par: <span class=\"macro\">vec!</span>[usize::MAX; graph.<span class=\"highlight\">vertices_size</span>()],\n<span data-nosnippet>20</span>            epos: <span class=\"number\">0</span>,\n<span data-nosnippet>21</span>        };\n<span data-nosnippet>22</span>        self_.edge_tour(root, usize::MAX);\n<span data-nosnippet>23</span>        self_\n<span data-nosnippet>24</span>    }\n<span data-nosnippet>25</span>    <span class=\"kw\">pub fn </span>length(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; usize {\n<span data-nosnippet>26</span>        <span class=\"self\">self</span>.epos\n<span data-nosnippet>27</span>    }\n<span data-nosnippet>28</span>    <span class=\"kw\">fn </span>edge_tour(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, p: usize) {\n<span data-nosnippet>29</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.adjacencies(u).filter(|a| a.to != p) {\n<span data-nosnippet>30</span>            <span class=\"self\">self</span>.par[a.to] = a.id;\n<span data-nosnippet>31</span>            <span class=\"self\">self</span>.eidx[a.id].<span class=\"number\">0 </span>= <span class=\"self\">self</span>.epos;\n<span data-nosnippet>32</span>            <span class=\"self\">self</span>.epos += <span class=\"number\">1</span>;\n<span data-nosnippet>33</span>            <span class=\"self\">self</span>.edge_tour(a.to, u);\n<span data-nosnippet>34</span>            <span class=\"self\">self</span>.eidx[a.id].<span class=\"number\">1 </span>= <span class=\"self\">self</span>.epos;\n<span data-nosnippet>35</span>            <span class=\"self\">self</span>.epos += <span class=\"number\">1</span>;\n<span data-nosnippet>36</span>        }\n<span data-nosnippet>37</span>    }\n<span data-nosnippet>38</span>}\n<span data-nosnippet>39</span>\n<span data-nosnippet>40</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"EulerTourForVertex\"</span>, include(<span class=\"string\">\"SparseGraph\"</span>))]\n<span data-nosnippet>41</span>#[derive(Clone, Debug)]\n<span data-nosnippet>42</span></span><span class=\"kw\">pub struct </span>EulerTourForVertex&lt;<span class=\"lifetime\">'a</span>&gt; {\n<span data-nosnippet>43</span>    graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph,\n<span data-nosnippet>44</span>    <span class=\"kw\">pub </span>vidx: Vec&lt;(usize, usize)&gt;,\n<span data-nosnippet>45</span>    vpos: usize,\n<span data-nosnippet>46</span>}\n<span data-nosnippet>47</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"EulerTourForVertex\"</span>)]\n<span data-nosnippet>48</span></span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; EulerTourForVertex&lt;<span class=\"lifetime\">'a</span>&gt; {\n<span data-nosnippet>49</span>    <span class=\"kw\">pub fn </span>new(graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>50</span>        <span class=\"self\">Self </span>{\n<span data-nosnippet>51</span>            graph,\n<span data-nosnippet>52</span>            vidx: <span class=\"macro\">vec!</span>[(<span class=\"number\">0</span>, <span class=\"number\">0</span>); graph.<span class=\"highlight\">vertices_size</span>()],\n<span data-nosnippet>53</span>            vpos: <span class=\"number\">0</span>,\n<span data-nosnippet>54</span>        }\n<span data-nosnippet>55</span>    }\n<span data-nosnippet>56</span>    <span class=\"kw\">pub fn </span>length(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; usize {\n<span data-nosnippet>57</span>        <span class=\"self\">self</span>.vpos\n<span data-nosnippet>58</span>    }\n<span data-nosnippet>59</span>    <span class=\"kw\">pub fn </span>subtree_vertex_tour(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, p: usize) {\n<span data-nosnippet>60</span>        <span class=\"self\">self</span>.vidx[u].<span class=\"number\">0 </span>= <span class=\"self\">self</span>.vpos;\n<span data-nosnippet>61</span>        <span class=\"self\">self</span>.vpos += <span class=\"number\">1</span>;\n<span data-nosnippet>62</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.adjacencies(u).filter(|a| a.to != p) {\n<span data-nosnippet>63</span>            <span class=\"self\">self</span>.subtree_vertex_tour(a.to, u);\n<span data-nosnippet>64</span>        }\n<span data-nosnippet>65</span>        <span class=\"self\">self</span>.vidx[u].<span class=\"number\">1 </span>= <span class=\"self\">self</span>.vpos;\n<span data-nosnippet>66</span>    }\n<span data-nosnippet>67</span>    <span class=\"kw\">pub fn </span>path_vertex_tour(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, p: usize) {\n<span data-nosnippet>68</span>        <span class=\"self\">self</span>.vidx[u].<span class=\"number\">0 </span>= <span class=\"self\">self</span>.vpos;\n<span data-nosnippet>69</span>        <span class=\"self\">self</span>.vpos += <span class=\"number\">1</span>;\n<span data-nosnippet>70</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.adjacencies(u).filter(|a| a.to != p) {\n<span data-nosnippet>71</span>            <span class=\"self\">self</span>.path_vertex_tour(a.to, u);\n<span data-nosnippet>72</span>        }\n<span data-nosnippet>73</span>        <span class=\"self\">self</span>.vidx[u].<span class=\"number\">1 </span>= <span class=\"self\">self</span>.vpos;\n<span data-nosnippet>74</span>        <span class=\"self\">self</span>.vpos += <span class=\"number\">1</span>;\n<span data-nosnippet>75</span>    }\n<span data-nosnippet>76</span>    <span class=\"kw\">pub fn </span>subtree_query&lt;T, F: FnMut(usize, usize) -&gt; T&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, <span class=\"kw-2\">mut </span>f: F) -&gt; T {\n<span data-nosnippet>77</span>        <span class=\"kw\">let </span>(l, r) = <span class=\"self\">self</span>.vidx[u];\n<span data-nosnippet>78</span>        f(l, r)\n<span data-nosnippet>79</span>    }\n<span data-nosnippet>80</span>    <span class=\"kw\">pub fn </span>subtree_update&lt;T, F: FnMut(usize, T)&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, x: T, <span class=\"kw-2\">mut </span>f: F) {\n<span data-nosnippet>81</span>        <span class=\"kw\">let </span>(l, _r) = <span class=\"self\">self</span>.vidx[u];\n<span data-nosnippet>82</span>        f(l, x);\n<span data-nosnippet>83</span>    }\n<span data-nosnippet>84</span>    <span class=\"kw\">pub fn </span>path_query&lt;T, F: FnMut(usize, usize) -&gt; T&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, v: usize, <span class=\"kw-2\">mut </span>f: F) -&gt; T {\n<span data-nosnippet>85</span>        <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>l, <span class=\"kw-2\">mut </span>r) = (<span class=\"self\">self</span>.vidx[u].<span class=\"number\">0</span>, <span class=\"self\">self</span>.vidx[v].<span class=\"number\">0</span>);\n<span data-nosnippet>86</span>        <span class=\"kw\">if </span>l &gt; r {\n<span data-nosnippet>87</span>            std::mem::swap(<span class=\"kw-2\">&amp;mut </span>l, <span class=\"kw-2\">&amp;mut </span>r);\n<span data-nosnippet>88</span>        }\n<span data-nosnippet>89</span>        f(l, r + <span class=\"number\">1</span>)\n<span data-nosnippet>90</span>    }\n<span data-nosnippet>91</span>    <span class=\"kw\">pub fn </span>path_update&lt;T, F: FnMut(usize, T)&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, x: T, invx: T, <span class=\"kw-2\">mut </span>f: F) {\n<span data-nosnippet>92</span>        <span class=\"kw\">let </span>(l, r) = <span class=\"self\">self</span>.vidx[u];\n<span data-nosnippet>93</span>        f(l, x);\n<span data-nosnippet>94</span>        f(r, invx);\n<span data-nosnippet>95</span>    }\n<span data-nosnippet>96</span>}\n<span data-nosnippet>97</span>\n<span data-nosnippet>98</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"EulerTourForRichVertex\"</span>, include(<span class=\"string\">\"SparseGraph\"</span>))]\n<span data-nosnippet>99</span>#[derive(Clone, Debug)]\n<span data-nosnippet>100</span></span><span class=\"kw\">pub struct </span>EulerTourForRichVertex&lt;<span class=\"lifetime\">'a</span>&gt; {\n<span data-nosnippet>101</span>    graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph,\n<span data-nosnippet>102</span>    <span class=\"kw\">pub </span>root: usize,\n<span data-nosnippet>103</span>    <span class=\"kw\">pub </span>vidx: Vec&lt;(usize, usize)&gt;,\n<span data-nosnippet>104</span>    vtrace: Vec&lt;usize&gt;,\n<span data-nosnippet>105</span>}\n<span data-nosnippet>106</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"EulerTourForRichVertex\"</span>)]\n<span data-nosnippet>107</span></span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; EulerTourForRichVertex&lt;<span class=\"lifetime\">'a</span>&gt; {\n<span data-nosnippet>108</span>    <span class=\"kw\">pub fn </span>new(root: usize, graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>109</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">Self </span>{\n<span data-nosnippet>110</span>            graph,\n<span data-nosnippet>111</span>            root,\n<span data-nosnippet>112</span>            vidx: <span class=\"macro\">vec!</span>[(<span class=\"number\">0</span>, <span class=\"number\">0</span>); graph.<span class=\"highlight\">vertices_size</span>()],\n<span data-nosnippet>113</span>            vtrace: <span class=\"macro\">vec!</span>[],\n<span data-nosnippet>114</span>        };\n<span data-nosnippet>115</span>        self_.vertex_tour(root, usize::MAX);\n<span data-nosnippet>116</span>        self_\n<span data-nosnippet>117</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/tree/rerooting.rs.html#28&#34;,&#34;line 28&#34;],[[2,2],&#34;src/competitive/tree/rerooting.rs.html#29&#34;,&#34;line 29&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/rerooting.rs (<a href=\"src/competitive/tree/rerooting.rs.html#28\">line 28</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>27</span>    <span class=\"kw\">pub fn </span>new(graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph, rooting: F) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>28</span>        <span class=\"kw\">let </span>dp = <span class=\"macro\">vec!</span>[M::unit(); graph.<span class=\"highlight focus\">vertices_size</span>()];\n<span data-nosnippet>29</span>        <span class=\"kw\">let </span>ep = <span class=\"macro\">vec!</span>[M::unit(); graph.<span class=\"highlight\">vertices_size</span>() * <span class=\"number\">2</span>];\n<span data-nosnippet>30</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">Self </span>{\n<span data-nosnippet>31</span>            graph,\n<span data-nosnippet>32</span>            dp,\n<span data-nosnippet>33</span>            ep,\n<span data-nosnippet>34</span>            rooting,\n<span data-nosnippet>35</span>        };\n<span data-nosnippet>36</span>        self_.rerooting();\n<span data-nosnippet>37</span>        self_\n<span data-nosnippet>38</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[2,2],&#34;src/competitive/tree/heavy_light_decomposition.rs.html#13&#34;,&#34;line 13&#34;],[[3,3],&#34;src/competitive/tree/heavy_light_decomposition.rs.html#14&#34;,&#34;line 14&#34;],[[4,4],&#34;src/competitive/tree/heavy_light_decomposition.rs.html#15&#34;,&#34;line 15&#34;],[[5,5],&#34;src/competitive/tree/heavy_light_decomposition.rs.html#16&#34;,&#34;line 16&#34;],[[46,46],&#34;src/competitive/tree/heavy_light_decomposition.rs.html#57&#34;,&#34;line 57&#34;],[[48,48],&#34;src/competitive/tree/heavy_light_decomposition.rs.html#59&#34;,&#34;line 59&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/heavy_light_decomposition.rs (<a href=\"src/competitive/tree/heavy_light_decomposition.rs.html#13\">line 13</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>11</span>    <span class=\"kw\">pub fn </span>new(root: usize, graph: <span class=\"kw-2\">&amp;mut </span>UndirectedSparseGraph) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>12</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">Self </span>{\n<span data-nosnippet>13</span>            par: <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; graph.<span class=\"highlight focus\">vertices_size</span>()],\n<span data-nosnippet>14</span>            size: <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; graph.<span class=\"highlight\">vertices_size</span>()],\n<span data-nosnippet>15</span>            head: <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; graph.<span class=\"highlight\">vertices_size</span>()],\n<span data-nosnippet>16</span>            vidx: <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; graph.<span class=\"highlight\">vertices_size</span>()],\n<span data-nosnippet>17</span>        };\n<span data-nosnippet>18</span>        self_.build(root, graph);\n<span data-nosnippet>19</span>        self_\n<span data-nosnippet>20</span>    }\n<span data-nosnippet>21</span>\n<span data-nosnippet>22</span>    <span class=\"kw\">fn </span>dfs_size(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, p: usize, graph: <span class=\"kw-2\">&amp;mut </span>UndirectedSparseGraph) {\n<span data-nosnippet>23</span>        <span class=\"self\">self</span>.par[u] = p;\n<span data-nosnippet>24</span>        <span class=\"self\">self</span>.size[u] = <span class=\"number\">1</span>;\n<span data-nosnippet>25</span>        <span class=\"kw\">let </span>base = graph.start[u];\n<span data-nosnippet>26</span>        <span class=\"kw\">if </span>graph.adjacencies(u).len() &gt; <span class=\"number\">1 </span>&amp;&amp; graph.adjacencies(u).next().unwrap().to == p {\n<span data-nosnippet>27</span>            graph.elist.swap(base, base + <span class=\"number\">1</span>);\n<span data-nosnippet>28</span>        }\n<span data-nosnippet>29</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>base..graph.start[u + <span class=\"number\">1</span>] {\n<span data-nosnippet>30</span>            <span class=\"kw\">let </span>a = graph.elist[i];\n<span data-nosnippet>31</span>            <span class=\"kw\">if </span>a.to != p {\n<span data-nosnippet>32</span>                <span class=\"self\">self</span>.dfs_size(a.to, u, graph);\n<span data-nosnippet>33</span>                <span class=\"self\">self</span>.size[u] += <span class=\"self\">self</span>.size[a.to];\n<span data-nosnippet>34</span>                <span class=\"kw\">if </span><span class=\"self\">self</span>.size[graph.elist[base].to] &lt; <span class=\"self\">self</span>.size[a.to] {\n<span data-nosnippet>35</span>                    graph.elist.swap(base, i);\n<span data-nosnippet>36</span>                }\n<span data-nosnippet>37</span>            }\n<span data-nosnippet>38</span>        }\n<span data-nosnippet>39</span>    }\n<span data-nosnippet>40</span>\n<span data-nosnippet>41</span>    <span class=\"kw\">fn </span>dfs_hld(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, p: usize, t: <span class=\"kw-2\">&amp;mut </span>usize, graph: <span class=\"kw-2\">&amp;</span>UndirectedSparseGraph) {\n<span data-nosnippet>42</span>        <span class=\"self\">self</span>.vidx[u] = <span class=\"kw-2\">*</span>t;\n<span data-nosnippet>43</span>        <span class=\"kw-2\">*</span>t += <span class=\"number\">1</span>;\n<span data-nosnippet>44</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>adjacencies = graph.adjacencies(u).filter(|a| a.to != p);\n<span data-nosnippet>45</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(a) = adjacencies.next() {\n<span data-nosnippet>46</span>            <span class=\"self\">self</span>.head[a.to] = <span class=\"self\">self</span>.head[u];\n<span data-nosnippet>47</span>            <span class=\"self\">self</span>.dfs_hld(a.to, u, t, graph);\n<span data-nosnippet>48</span>        }\n<span data-nosnippet>49</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span>adjacencies {\n<span data-nosnippet>50</span>            <span class=\"self\">self</span>.head[a.to] = a.to;\n<span data-nosnippet>51</span>            <span class=\"self\">self</span>.dfs_hld(a.to, u, t, graph);\n<span data-nosnippet>52</span>        }\n<span data-nosnippet>53</span>    }\n<span data-nosnippet>54</span>\n<span data-nosnippet>55</span>    <span class=\"kw\">fn </span>build(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, root: usize, graph: <span class=\"kw-2\">&amp;mut </span>UndirectedSparseGraph) {\n<span data-nosnippet>56</span>        <span class=\"self\">self</span>.head[root] = root;\n<span data-nosnippet>57</span>        <span class=\"self\">self</span>.dfs_size(root, graph.<span class=\"highlight\">vertices_size</span>(), graph);\n<span data-nosnippet>58</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>t = <span class=\"number\">0</span>;\n<span data-nosnippet>59</span>        <span class=\"self\">self</span>.dfs_hld(root, graph.<span class=\"highlight\">vertices_size</span>(), <span class=\"kw-2\">&amp;mut </span>t, graph);\n<span data-nosnippet>60</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[3,3],&#34;src/competitive/graph/low_link.rs.html#14&#34;,&#34;line 14&#34;],[[4,4],&#34;src/competitive/graph/low_link.rs.html#15&#34;,&#34;line 15&#34;],[[10,10],&#34;src/competitive/graph/low_link.rs.html#21&#34;,&#34;line 21&#34;],[[26,26],&#34;src/competitive/graph/low_link.rs.html#37&#34;,&#34;line 37&#34;],[[34,34],&#34;src/competitive/graph/low_link.rs.html#45&#34;,&#34;line 45&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/low_link.rs (<a href=\"src/competitive/graph/low_link.rs.html#14\">line 14</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>11</span>    <span class=\"kw\">pub fn </span>new(graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>12</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">Self </span>{\n<span data-nosnippet>13</span>            graph,\n<span data-nosnippet>14</span>            low: <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; graph.<span class=\"highlight focus\">vertices_size</span>()],\n<span data-nosnippet>15</span>            ord: <span class=\"macro\">vec!</span>[usize::MAX; graph.<span class=\"highlight\">vertices_size</span>()],\n<span data-nosnippet>16</span>            articulation: <span class=\"macro\">vec!</span>[],\n<span data-nosnippet>17</span>            bridge: <span class=\"macro\">vec!</span>[],\n<span data-nosnippet>18</span>        };\n<span data-nosnippet>19</span>        <span class=\"kw\">for </span>u <span class=\"kw\">in </span>graph.vertices() {\n<span data-nosnippet>20</span>            <span class=\"kw\">if </span>self_.ord[u] == usize::MAX {\n<span data-nosnippet>21</span>                self_.dfs(u, graph.<span class=\"highlight\">vertices_size</span>(), <span class=\"kw-2\">&amp;mut </span><span class=\"number\">0</span>);\n<span data-nosnippet>22</span>            }\n<span data-nosnippet>23</span>        }\n<span data-nosnippet>24</span>        self_\n<span data-nosnippet>25</span>    }\n<span data-nosnippet>26</span>    <span class=\"kw\">fn </span>dfs(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, p: usize, now_ord: <span class=\"kw-2\">&amp;mut </span>usize) {\n<span data-nosnippet>27</span>        <span class=\"self\">self</span>.low[u] = <span class=\"kw-2\">*</span>now_ord;\n<span data-nosnippet>28</span>        <span class=\"self\">self</span>.ord[u] = <span class=\"kw-2\">*</span>now_ord;\n<span data-nosnippet>29</span>        <span class=\"kw-2\">*</span>now_ord += <span class=\"number\">1</span>;\n<span data-nosnippet>30</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>is_articulation = <span class=\"bool-val\">false</span>;\n<span data-nosnippet>31</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>cnt = <span class=\"number\">0</span>;\n<span data-nosnippet>32</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.adjacencies(u) {\n<span data-nosnippet>33</span>            <span class=\"kw\">if </span><span class=\"self\">self</span>.ord[a.to] == usize::MAX {\n<span data-nosnippet>34</span>                cnt += <span class=\"number\">1</span>;\n<span data-nosnippet>35</span>                <span class=\"self\">self</span>.dfs(a.to, u, now_ord);\n<span data-nosnippet>36</span>                <span class=\"self\">self</span>.low[u] = <span class=\"self\">self</span>.low[u].min(<span class=\"self\">self</span>.low[a.to]);\n<span data-nosnippet>37</span>                is_articulation |= p &lt; <span class=\"self\">self</span>.graph.<span class=\"highlight\">vertices_size</span>() &amp;&amp; <span class=\"self\">self</span>.ord[u] &lt;= <span class=\"self\">self</span>.low[a.to];\n<span data-nosnippet>38</span>                <span class=\"kw\">if </span><span class=\"self\">self</span>.ord[u] &lt; <span class=\"self\">self</span>.low[a.to] {\n<span data-nosnippet>39</span>                    <span class=\"self\">self</span>.bridge.push((u.min(a.to), u.max(a.to)));\n<span data-nosnippet>40</span>                }\n<span data-nosnippet>41</span>            } <span class=\"kw\">else if </span>a.to != p {\n<span data-nosnippet>42</span>                <span class=\"self\">self</span>.low[u] = <span class=\"self\">self</span>.low[u].min(<span class=\"self\">self</span>.ord[a.to]);\n<span data-nosnippet>43</span>            }\n<span data-nosnippet>44</span>        }\n<span data-nosnippet>45</span>        is_articulation |= p == <span class=\"self\">self</span>.graph.<span class=\"highlight\">vertices_size</span>() &amp;&amp; cnt &gt; <span class=\"number\">1</span>;\n<span data-nosnippet>46</span>        <span class=\"kw\">if </span>is_articulation {\n<span data-nosnippet>47</span>            <span class=\"self\">self</span>.articulation.push(u);\n<span data-nosnippet>48</span>        }\n<span data-nosnippet>49</span>    }</code></pre></div></div><div class=\"example-links\">Additional examples can be found in:<br><ul><li><a href=\"src/competitive/tree/tree_order.rs.html#7\">crates/competitive/src/tree/tree_order.rs</a></li><li><a href=\"src/competitive/tree/tree_centroid.rs.html#6\">crates/competitive/src/tree/tree_centroid.rs</a></li><li><a href=\"src/competitive/graph/order.rs.html#6\">crates/competitive/src/graph/order.rs</a></li><li><a href=\"src/competitive/graph/strongly_connected_component.rs.html#24\">crates/competitive/src/graph/strongly_connected_component.rs</a></li><li><a href=\"src/competitive/graph/topological_sort.rs.html#5\">crates/competitive/src/graph/topological_sort.rs</a></li><li><a href=\"src/competitive/graph/maximum_flow.rs.html#62\">crates/competitive/src/graph/maximum_flow.rs</a></li><li><a href=\"src/competitive/graph/minimum_cost_flow.rs.html#78\">crates/competitive/src/graph/minimum_cost_flow.rs</a></li><li><a href=\"src/competitive/tree/tree_center.rs.html#13\">crates/competitive/src/tree/tree_center.rs</a></li></ul></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.edges_size\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#43-45\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.edges_size\" class=\"fn\">edges_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the number of edges.</p>\n</div><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&#34;src/competitive/tree/rerooting.rs.html#41&#34;,&#34;line 41&#34;],[[5,5],&#34;src/competitive/tree/rerooting.rs.html#45&#34;,&#34;line 45&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/rerooting.rs (<a href=\"src/competitive/tree/rerooting.rs.html#41\">line 41</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>40</span>    <span class=\"kw\">fn </span>eidx(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, a: <span class=\"kw-2\">&amp;</span>Adjacency) -&gt; usize {\n<span data-nosnippet>41</span>        a.id + <span class=\"self\">self</span>.graph.<span class=\"highlight focus\">edges_size</span>() * (u &gt; a.to) <span class=\"kw\">as </span>usize\n<span data-nosnippet>42</span>    }\n<span data-nosnippet>43</span>    <span class=\"attr\">#[inline]\n<span data-nosnippet>44</span>    </span><span class=\"kw\">fn </span>reidx(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, a: <span class=\"kw-2\">&amp;</span>Adjacency) -&gt; usize {\n<span data-nosnippet>45</span>        a.id + <span class=\"self\">self</span>.graph.<span class=\"highlight\">edges_size</span>() * (u &lt; a.to) <span class=\"kw\">as </span>usize\n<span data-nosnippet>46</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[2,2],&#34;src/competitive/graph/order.rs.html#48&#34;,&#34;line 48&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/order.rs (<a href=\"src/competitive/graph/order.rs.html#48\">line 48</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>46</span>    <span class=\"kw\">pub fn </span>dfs_tree(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, root: usize) -&gt; Vec&lt;bool&gt; {\n<span data-nosnippet>47</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>visited = <span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span>.vertices_size()];\n<span data-nosnippet>48</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>used = <span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span>.<span class=\"highlight focus\">edges_size</span>()];\n<span data-nosnippet>49</span>        visited[root] = <span class=\"bool-val\">true</span>;\n<span data-nosnippet>50</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stack = <span class=\"macro\">vec!</span>[root];\n<span data-nosnippet>51</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(u) = stack.pop() {\n<span data-nosnippet>52</span>            <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.adjacencies(u).rev() {\n<span data-nosnippet>53</span>                <span class=\"kw\">if </span>!visited[a.to] {\n<span data-nosnippet>54</span>                    visited[a.to] = <span class=\"bool-val\">true</span>;\n<span data-nosnippet>55</span>                    used[a.id] = <span class=\"bool-val\">true</span>;\n<span data-nosnippet>56</span>                    stack.push(a.to);\n<span data-nosnippet>57</span>                }\n<span data-nosnippet>58</span>            }\n<span data-nosnippet>59</span>        }\n<span data-nosnippet>60</span>        used\n<span data-nosnippet>61</span>    }</code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.vertices\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#47-49\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.vertices\" class=\"fn\">vertices</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return an iterator over graph vertices.</p>\n</div><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[8,8],&#34;src/competitive/graph/low_link.rs.html#19&#34;,&#34;line 19&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/low_link.rs (<a href=\"src/competitive/graph/low_link.rs.html#19\">line 19</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>11</span>    <span class=\"kw\">pub fn </span>new(graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>12</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">Self </span>{\n<span data-nosnippet>13</span>            graph,\n<span data-nosnippet>14</span>            low: <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; graph.vertices_size()],\n<span data-nosnippet>15</span>            ord: <span class=\"macro\">vec!</span>[usize::MAX; graph.vertices_size()],\n<span data-nosnippet>16</span>            articulation: <span class=\"macro\">vec!</span>[],\n<span data-nosnippet>17</span>            bridge: <span class=\"macro\">vec!</span>[],\n<span data-nosnippet>18</span>        };\n<span data-nosnippet>19</span>        <span class=\"kw\">for </span>u <span class=\"kw\">in </span>graph.<span class=\"highlight focus\">vertices</span>() {\n<span data-nosnippet>20</span>            <span class=\"kw\">if </span>self_.ord[u] == usize::MAX {\n<span data-nosnippet>21</span>                self_.dfs(u, graph.vertices_size(), <span class=\"kw-2\">&amp;mut </span><span class=\"number\">0</span>);\n<span data-nosnippet>22</span>            }\n<span data-nosnippet>23</span>        }\n<span data-nosnippet>24</span>        self_\n<span data-nosnippet>25</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[5,5],&#34;src/aizu_online_judge/grl/grl_1_a.rs.html#15&#34;,&#34;line 15&#34;],[[20,20],&#34;src/aizu_online_judge/grl/grl_1_a.rs.html#30&#34;,&#34;line 30&#34;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/grl/grl_1_a.rs (<a href=\"src/aizu_online_judge/grl/grl_1_a.rs.html#15\">line 15</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>10</span><span class=\"kw\">pub fn </span>grl_1_a(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>12</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>13</span>    <span class=\"macro\">scan!</span>(scanner, vs, es, r, (graph, d): @DirectedGraphScanner::&lt;usize, u64&gt;::new(vs, es));\n<span data-nosnippet>14</span>    <span class=\"kw\">let </span>cost = graph.dijkstra_ss::&lt;StandardSp&lt;AdditiveOperation&lt;<span class=\"kw\">_</span>&gt;&gt;, <span class=\"kw\">_</span>&gt;(r, <span class=\"kw-2\">&amp;</span>d);\n<span data-nosnippet>15</span>    <span class=\"kw\">for </span>u <span class=\"kw\">in </span>graph.<span class=\"highlight focus\">vertices</span>() {\n<span data-nosnippet>16</span>        <span class=\"kw\">if </span>cost[u].is_maximum() {\n<span data-nosnippet>17</span>            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"INF\"</span>).ok();\n<span data-nosnippet>18</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>19</span>            <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"{}\"</span>, cost[u]).ok();\n<span data-nosnippet>20</span>        }\n<span data-nosnippet>21</span>    }\n<span data-nosnippet>22</span>}\n<span data-nosnippet>23</span>\n<span data-nosnippet>24</span><span class=\"attr\">#[verify::aizu_online_judge(<span class=\"string\">\"GRL_1_A\"</span>)]\n<span data-nosnippet>25</span></span><span class=\"kw\">pub fn </span>grl_1_a_option(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>26</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>27</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>28</span>    <span class=\"macro\">scan!</span>(scanner, vs, es, r, (graph, d): @DirectedGraphScanner::&lt;usize, u64&gt;::new(vs, es));\n<span data-nosnippet>29</span>    <span class=\"kw\">let </span>cost = graph.dijkstra_ss::&lt;OptionSp&lt;AdditiveOperation&lt;<span class=\"kw\">_</span>&gt;&gt;, <span class=\"kw\">_</span>&gt;(r, <span class=\"kw-2\">&amp;</span>|eid| <span class=\"prelude-val\">Some</span>(d[eid]));\n<span data-nosnippet>30</span>    <span class=\"kw\">for </span>u <span class=\"kw\">in </span>graph.<span class=\"highlight\">vertices</span>() {\n<span data-nosnippet>31</span>        <span class=\"kw\">match </span>cost[u] {\n<span data-nosnippet>32</span>            <span class=\"prelude-val\">Some</span>(d) =&gt; <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"{}\"</span>, d).ok(),\n<span data-nosnippet>33</span>            <span class=\"prelude-val\">None </span>=&gt; <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"INF\"</span>).ok(),\n<span data-nosnippet>34</span>        };\n<span data-nosnippet>35</span>    }\n<span data-nosnippet>36</span>}</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[9,9],&#34;src/competitive/graph/graphvis.rs.html#14&#34;,&#34;line 14&#34;],[[12,12],&#34;src/competitive/graph/graphvis.rs.html#17&#34;,&#34;line 17&#34;],[[32,32],&#34;src/competitive/graph/graphvis.rs.html#37&#34;,&#34;line 37&#34;],[[53,53],&#34;src/competitive/graph/graphvis.rs.html#58&#34;,&#34;line 58&#34;],[[56,56],&#34;src/competitive/graph/graphvis.rs.html#61&#34;,&#34;line 61&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/graphvis.rs (<a href=\"src/competitive/graph/graphvis.rs.html#14\">line 14</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>5</span>    <span class=\"kw\">pub fn </span>to_graphvis&lt;N, NA, E, EA&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, node_attr: N, edge_attr: E) -&gt; String\n<span data-nosnippet>6</span>    <span class=\"kw\">where\n<span data-nosnippet>7</span>        </span>N: Fn(usize) -&gt; NA,\n<span data-nosnippet>8</span>        E: Fn(usize) -&gt; EA,\n<span data-nosnippet>9</span>        NA: Display,\n<span data-nosnippet>10</span>        EA: Display,\n<span data-nosnippet>11</span>    {\n<span data-nosnippet>12</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::new();\n<span data-nosnippet>13</span>        s.push_str(<span class=\"string\">\"digraph G {\\n    graph [ splines=false, layout=neato ];\\n\"</span>);\n<span data-nosnippet>14</span>        <span class=\"kw\">for </span>u <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight focus\">vertices</span>() {\n<span data-nosnippet>15</span>            <span class=\"macro\">writeln!</span>(s, <span class=\"string\">\"    {} [{}];\"</span>, u, node_attr(u)).ok();\n<span data-nosnippet>16</span>        }\n<span data-nosnippet>17</span>        <span class=\"kw\">for </span>u <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">vertices</span>() {\n<span data-nosnippet>18</span>            <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.adjacencies(u) {\n<span data-nosnippet>19</span>                <span class=\"macro\">writeln!</span>(s, <span class=\"string\">\"    {} -&gt; {} [{}];\"</span>, u, a.to, edge_attr(a.id)).ok();\n<span data-nosnippet>20</span>            }\n<span data-nosnippet>21</span>        }\n<span data-nosnippet>22</span>        s.push(<span class=\"string\">'}'</span>);\n<span data-nosnippet>23</span>        s\n<span data-nosnippet>24</span>    }\n<span data-nosnippet>25</span>}\n<span data-nosnippet>26</span>\n<span data-nosnippet>27</span><span class=\"kw\">impl </span>UndirectedSparseGraph {\n<span data-nosnippet>28</span>    <span class=\"kw\">pub fn </span>to_graphvis&lt;N, NA, E, EA&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, node_attr: N, edge_attr: E) -&gt; String\n<span data-nosnippet>29</span>    <span class=\"kw\">where\n<span data-nosnippet>30</span>        </span>N: Fn(usize) -&gt; NA,\n<span data-nosnippet>31</span>        E: Fn(usize) -&gt; EA,\n<span data-nosnippet>32</span>        NA: Display,\n<span data-nosnippet>33</span>        EA: Display,\n<span data-nosnippet>34</span>    {\n<span data-nosnippet>35</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::new();\n<span data-nosnippet>36</span>        s.push_str(<span class=\"string\">\"graph G {\\n    graph [ splines=false, layout=neato ];\\n\"</span>);\n<span data-nosnippet>37</span>        <span class=\"kw\">for </span>u <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">vertices</span>() {\n<span data-nosnippet>38</span>            <span class=\"macro\">writeln!</span>(s, <span class=\"string\">\"    {} [{}];\"</span>, u, node_attr(u)).ok();\n<span data-nosnippet>39</span>        }\n<span data-nosnippet>40</span>        <span class=\"kw\">for </span>(i, (u, v)) <span class=\"kw\">in </span><span class=\"self\">self</span>.edges.iter().cloned().enumerate() {\n<span data-nosnippet>41</span>            <span class=\"macro\">writeln!</span>(s, <span class=\"string\">\"    {} -- {} [{}];\"</span>, u, v, edge_attr(i)).ok();\n<span data-nosnippet>42</span>        }\n<span data-nosnippet>43</span>        s.push(<span class=\"string\">'}'</span>);\n<span data-nosnippet>44</span>        s\n<span data-nosnippet>45</span>    }\n<span data-nosnippet>46</span>}\n<span data-nosnippet>47</span>\n<span data-nosnippet>48</span><span class=\"kw\">impl </span>BidirectionalSparseGraph {\n<span data-nosnippet>49</span>    <span class=\"kw\">pub fn </span>to_graphvis&lt;N, NA, E, EA&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, node_attr: N, edge_attr: E) -&gt; String\n<span data-nosnippet>50</span>    <span class=\"kw\">where\n<span data-nosnippet>51</span>        </span>N: Fn(usize) -&gt; NA,\n<span data-nosnippet>52</span>        E: Fn(usize) -&gt; EA,\n<span data-nosnippet>53</span>        NA: Display,\n<span data-nosnippet>54</span>        EA: Display,\n<span data-nosnippet>55</span>    {\n<span data-nosnippet>56</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = String::new();\n<span data-nosnippet>57</span>        s.push_str(<span class=\"string\">\"digraph G {\\n    graph [ splines=false, layout=neato ];\\n\"</span>);\n<span data-nosnippet>58</span>        <span class=\"kw\">for </span>u <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">vertices</span>() {\n<span data-nosnippet>59</span>            <span class=\"macro\">writeln!</span>(s, <span class=\"string\">\"    {} [{}];\"</span>, u, node_attr(u)).ok();\n<span data-nosnippet>60</span>        }\n<span data-nosnippet>61</span>        <span class=\"kw\">for </span>u <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">vertices</span>() {\n<span data-nosnippet>62</span>            <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.adjacencies(u) {\n<span data-nosnippet>63</span>                <span class=\"macro\">writeln!</span>(s, <span class=\"string\">\"    {} -&gt; {} [{}];\"</span>, u, a.to, edge_attr(a.id)).ok();\n<span data-nosnippet>64</span>            }\n<span data-nosnippet>65</span>        }\n<span data-nosnippet>66</span>        s.push(<span class=\"string\">'}'</span>);\n<span data-nosnippet>67</span>        s\n<span data-nosnippet>68</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[10,10],&#34;src/competitive/graph/strongly_connected_component.rs.html#29&#34;,&#34;line 29&#34;],[[49,49],&#34;src/competitive/graph/strongly_connected_component.rs.html#68&#34;,&#34;line 68&#34;],[[71,71],&#34;src/competitive/graph/strongly_connected_component.rs.html#90&#34;,&#34;line 90&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/strongly_connected_component.rs (<a href=\"src/competitive/graph/strongly_connected_component.rs.html#29\">line 29</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>19</span>    <span class=\"kw\">pub fn </span>new(graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>DirectedSparseGraph) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>20</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>now_ord = <span class=\"number\">0</span>;\n<span data-nosnippet>21</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">Self </span>{\n<span data-nosnippet>22</span>            graph,\n<span data-nosnippet>23</span>            csize: <span class=\"number\">0</span>,\n<span data-nosnippet>24</span>            visited: Vec::with_capacity(graph.vertices_size()),\n<span data-nosnippet>25</span>            low: <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; graph.vertices_size()],\n<span data-nosnippet>26</span>            ord: <span class=\"macro\">vec!</span>[usize::MAX; graph.vertices_size()],\n<span data-nosnippet>27</span>            comp: <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; graph.vertices_size()],\n<span data-nosnippet>28</span>        };\n<span data-nosnippet>29</span>        <span class=\"kw\">for </span>u <span class=\"kw\">in </span>graph.<span class=\"highlight focus\">vertices</span>() {\n<span data-nosnippet>30</span>            <span class=\"kw\">if </span>self_.ord[u] == usize::MAX {\n<span data-nosnippet>31</span>                self_.dfs(u, <span class=\"kw-2\">&amp;mut </span>now_ord);\n<span data-nosnippet>32</span>            }\n<span data-nosnippet>33</span>        }\n<span data-nosnippet>34</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span>self_.comp.iter_mut() {\n<span data-nosnippet>35</span>            <span class=\"kw-2\">*</span>x = self_.csize - <span class=\"number\">1 </span>- <span class=\"kw-2\">*</span>x;\n<span data-nosnippet>36</span>        }\n<span data-nosnippet>37</span>        self_\n<span data-nosnippet>38</span>    }\n<span data-nosnippet>39</span>}\n<span data-nosnippet>40</span><span class=\"kw\">impl </span>StronglyConnectedComponent&lt;<span class=\"lifetime\">'_</span>&gt; {\n<span data-nosnippet>41</span>    <span class=\"kw\">fn </span>dfs(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, now_ord: <span class=\"kw-2\">&amp;mut </span>usize) {\n<span data-nosnippet>42</span>        <span class=\"self\">self</span>.low[u] = <span class=\"kw-2\">*</span>now_ord;\n<span data-nosnippet>43</span>        <span class=\"self\">self</span>.ord[u] = <span class=\"kw-2\">*</span>now_ord;\n<span data-nosnippet>44</span>        <span class=\"kw-2\">*</span>now_ord += <span class=\"number\">1</span>;\n<span data-nosnippet>45</span>        <span class=\"self\">self</span>.visited.push(u);\n<span data-nosnippet>46</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.adjacencies(u) {\n<span data-nosnippet>47</span>            <span class=\"kw\">if </span><span class=\"self\">self</span>.ord[a.to] == usize::MAX {\n<span data-nosnippet>48</span>                <span class=\"self\">self</span>.dfs(a.to, now_ord);\n<span data-nosnippet>49</span>                <span class=\"self\">self</span>.low[u] = <span class=\"self\">self</span>.low[u].min(<span class=\"self\">self</span>.low[a.to]);\n<span data-nosnippet>50</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>51</span>                <span class=\"self\">self</span>.low[u] = <span class=\"self\">self</span>.low[u].min(<span class=\"self\">self</span>.ord[a.to]);\n<span data-nosnippet>52</span>            }\n<span data-nosnippet>53</span>        }\n<span data-nosnippet>54</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.low[u] == <span class=\"self\">self</span>.ord[u] {\n<span data-nosnippet>55</span>            <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(v) = <span class=\"self\">self</span>.visited.pop() {\n<span data-nosnippet>56</span>                <span class=\"self\">self</span>.ord[v] = <span class=\"self\">self</span>.graph.vertices_size();\n<span data-nosnippet>57</span>                <span class=\"self\">self</span>.comp[v] = <span class=\"self\">self</span>.csize;\n<span data-nosnippet>58</span>                <span class=\"kw\">if </span>v == u {\n<span data-nosnippet>59</span>                    <span class=\"kw\">break</span>;\n<span data-nosnippet>60</span>                }\n<span data-nosnippet>61</span>            }\n<span data-nosnippet>62</span>            <span class=\"self\">self</span>.csize += <span class=\"number\">1</span>;\n<span data-nosnippet>63</span>        }\n<span data-nosnippet>64</span>    }\n<span data-nosnippet>65</span>    <span class=\"kw\">pub fn </span>gen_cgraph(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; DirectedSparseGraph {\n<span data-nosnippet>66</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>used = std::collections::HashSet::new();\n<span data-nosnippet>67</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>edges = <span class=\"macro\">vec!</span>[];\n<span data-nosnippet>68</span>        <span class=\"kw\">for </span>u <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.<span class=\"highlight\">vertices</span>() {\n<span data-nosnippet>69</span>            <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.adjacencies(u) {\n<span data-nosnippet>70</span>                <span class=\"kw\">if </span><span class=\"self\">self</span>.comp[u] != <span class=\"self\">self</span>.comp[a.to] {\n<span data-nosnippet>71</span>                    <span class=\"kw\">let </span>(x, y) = (<span class=\"self\">self</span>.comp[u], <span class=\"self\">self</span>.comp[a.to]);\n<span data-nosnippet>72</span>                    <span class=\"kw\">if </span>!used.contains(<span class=\"kw-2\">&amp;</span>(x, y)) {\n<span data-nosnippet>73</span>                        used.insert((x, y));\n<span data-nosnippet>74</span>                        edges.push((x, y));\n<span data-nosnippet>75</span>                    }\n<span data-nosnippet>76</span>                }\n<span data-nosnippet>77</span>            }\n<span data-nosnippet>78</span>        }\n<span data-nosnippet>79</span>        DirectedSparseGraph::from_edges(<span class=\"self\">self</span>.size(), edges)\n<span data-nosnippet>80</span>    }\n<span data-nosnippet>81</span>    <span class=\"kw\">pub fn </span>components(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; Vec&lt;Vec&lt;usize&gt;&gt; {\n<span data-nosnippet>82</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>counts = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.size()];\n<span data-nosnippet>83</span>        <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.comp.iter() {\n<span data-nosnippet>84</span>            counts[x] += <span class=\"number\">1</span>;\n<span data-nosnippet>85</span>        }\n<span data-nosnippet>86</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>groups = <span class=\"macro\">vec!</span>[<span class=\"macro\">vec!</span>[]; <span class=\"self\">self</span>.size()];\n<span data-nosnippet>87</span>        <span class=\"kw\">for </span>(g, c) <span class=\"kw\">in </span>groups.iter_mut().zip(counts.into_iter()) {\n<span data-nosnippet>88</span>            g.reserve(c);\n<span data-nosnippet>89</span>        }\n<span data-nosnippet>90</span>        <span class=\"kw\">for </span>u <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.<span class=\"highlight\">vertices</span>() {\n<span data-nosnippet>91</span>            groups[<span class=\"self\">self</span>[u]].push(u);\n<span data-nosnippet>92</span>        }\n<span data-nosnippet>93</span>        groups\n<span data-nosnippet>94</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[7,7],&#34;src/aizu_online_judge/grl/grl_1_b.rs.html#16&#34;,&#34;line 16&#34;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/grl/grl_1_b.rs (<a href=\"src/aizu_online_judge/grl/grl_1_b.rs.html#16\">line 16</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>9</span><span class=\"kw\">pub fn </span>grl_1_b(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>12</span>    <span class=\"macro\">scan!</span>(scanner, vs, es, r, (graph, d): @DirectedGraphScanner::&lt;usize, i64&gt;::new(vs, es));\n<span data-nosnippet>13</span>    <span class=\"kw\">let </span>cost =\n<span data-nosnippet>14</span>        graph.bellman_ford_ss::&lt;OptionSp&lt;AdditiveOperation&lt;<span class=\"kw\">_</span>&gt;&gt;, <span class=\"kw\">_</span>&gt;(r, <span class=\"kw-2\">&amp;</span>|eid| <span class=\"prelude-val\">Some</span>(d[eid]), <span class=\"bool-val\">true</span>);\n<span data-nosnippet>15</span>    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(cost) = cost {\n<span data-nosnippet>16</span>        <span class=\"kw\">for </span>u <span class=\"kw\">in </span>graph.<span class=\"highlight focus\">vertices</span>() {\n<span data-nosnippet>17</span>            <span class=\"kw\">match </span>cost[u] {\n<span data-nosnippet>18</span>                <span class=\"prelude-val\">Some</span>(d) =&gt; <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"{}\"</span>, d).ok(),\n<span data-nosnippet>19</span>                <span class=\"prelude-val\">None </span>=&gt; <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"INF\"</span>).ok(),\n<span data-nosnippet>20</span>            };\n<span data-nosnippet>21</span>        }\n<span data-nosnippet>22</span>    } <span class=\"kw\">else </span>{\n<span data-nosnippet>23</span>        <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"NEGATIVE CYCLE\"</span>).ok();\n<span data-nosnippet>24</span>    }\n<span data-nosnippet>25</span>}</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[3,3],&#34;src/competitive/graph/topological_sort.rs.html#7&#34;,&#34;line 7&#34;],[[7,7],&#34;src/competitive/graph/topological_sort.rs.html#11&#34;,&#34;line 11&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/topological_sort.rs (<a href=\"src/competitive/graph/topological_sort.rs.html#7\">line 7</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>4</span>    <span class=\"kw\">pub fn </span>topological_sort(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; Vec&lt;usize&gt; {\n<span data-nosnippet>5</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>indeg = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.vertices_size()];\n<span data-nosnippet>6</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"macro\">vec!</span>[];\n<span data-nosnippet>7</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight focus\">vertices</span>().flat_map(|u| <span class=\"self\">self</span>.adjacencies(u)) {\n<span data-nosnippet>8</span>            indeg[a.to] += <span class=\"number\">1</span>;\n<span data-nosnippet>9</span>        }\n<span data-nosnippet>10</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stack = <span class=\"self\">self\n<span data-nosnippet>11</span>            </span>.<span class=\"highlight\">vertices</span>()\n<span data-nosnippet>12</span>            .filter(|<span class=\"kw-2\">&amp;</span>u| indeg[u] == <span class=\"number\">0</span>)\n<span data-nosnippet>13</span>            .collect::&lt;Vec&lt;<span class=\"kw\">_</span>&gt;&gt;();\n<span data-nosnippet>14</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(u) = stack.pop() {\n<span data-nosnippet>15</span>            res.push(u);\n<span data-nosnippet>16</span>            <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.adjacencies(u) {\n<span data-nosnippet>17</span>                indeg[a.to] -= <span class=\"number\">1</span>;\n<span data-nosnippet>18</span>                <span class=\"kw\">if </span>indeg[a.to] == <span class=\"number\">0 </span>{\n<span data-nosnippet>19</span>                    stack.push(a.to);\n<span data-nosnippet>20</span>                }\n<span data-nosnippet>21</span>            }\n<span data-nosnippet>22</span>        }\n<span data-nosnippet>23</span>        res\n<span data-nosnippet>24</span>    }</code></pre></div></div><div class=\"example-links\">Additional examples can be found in:<br><ul><li><a href=\"src/competitive/graph/minimum_cost_flow.rs.html#82\">crates/competitive/src/graph/minimum_cost_flow.rs</a></li><li><a href=\"src/aizu_online_judge/grl/grl_1_c.rs.html#16\">crates/aizu_online_judge/src/grl/grl_1_c.rs</a></li><li><a href=\"src/competitive/graph/order.rs.html#73\">crates/competitive/src/graph/order.rs</a></li><li><a href=\"src/competitive/tree/tree_center.rs.html#16\">crates/competitive/src/tree/tree_center.rs</a></li></ul></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.adjacencies\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#51-53\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.adjacencies\" class=\"fn\">adjacencies</a>(&amp;self, v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'_, <a class=\"struct\" href=\"competitive/graph/struct.Adjacency.html\" title=\"struct competitive::graph::Adjacency\">Adjacency</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return a slice of adjacency vertices.</p>\n</div><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-3\"><a href=\"#scraped-examples-3\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[2,2],&#34;src/competitive/tree/depth.rs.html#8&#34;,&#34;line 8&#34;],[[26,26],&#34;src/competitive/tree/depth.rs.html#32&#34;,&#34;line 32&#34;],[[47,47],&#34;src/competitive/tree/depth.rs.html#53&#34;,&#34;line 53&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/depth.rs (<a href=\"src/competitive/tree/depth.rs.html#8\">line 8</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span>    <span class=\"kw\">fn </span>depth_dfs(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, p: usize, d: u64, depth: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u64&gt;) {\n<span data-nosnippet>7</span>        depth[u] = d;\n<span data-nosnippet>8</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight focus\">adjacencies</span>(u).filter(|a| a.to != p) {\n<span data-nosnippet>9</span>            <span class=\"self\">self</span>.depth_dfs(a.to, u, d + <span class=\"number\">1</span>, depth);\n<span data-nosnippet>10</span>        }\n<span data-nosnippet>11</span>    }\n<span data-nosnippet>12</span>    <span class=\"kw\">pub fn </span>tree_depth(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, root: usize) -&gt; Vec&lt;u64&gt; {\n<span data-nosnippet>13</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>depth = <span class=\"macro\">vec!</span>[<span class=\"number\">0</span>; <span class=\"self\">self</span>.vertices_size()];\n<span data-nosnippet>14</span>        <span class=\"self\">self</span>.depth_dfs(root, <span class=\"self\">self</span>.vertices_size(), <span class=\"number\">0</span>, <span class=\"kw-2\">&amp;mut </span>depth);\n<span data-nosnippet>15</span>        depth\n<span data-nosnippet>16</span>    }\n<span data-nosnippet>17</span>}\n<span data-nosnippet>18</span>\n<span data-nosnippet>19</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"weighted_tree_depth\"</span>, include(<span class=\"string\">\"algebra\"</span>, <span class=\"string\">\"SparseGraph\"</span>))]\n<span data-nosnippet>20</span></span><span class=\"kw\">impl </span>UndirectedSparseGraph {\n<span data-nosnippet>21</span>    <span class=\"kw\">fn </span>weighted_depth_dfs&lt;M, F&gt;(\n<span data-nosnippet>22</span>        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>,\n<span data-nosnippet>23</span>        u: usize,\n<span data-nosnippet>24</span>        p: usize,\n<span data-nosnippet>25</span>        d: M::T,\n<span data-nosnippet>26</span>        depth: <span class=\"kw-2\">&amp;mut </span>Vec&lt;M::T&gt;,\n<span data-nosnippet>27</span>        weight: <span class=\"kw-2\">&amp;</span>F,\n<span data-nosnippet>28</span>    ) <span class=\"kw\">where\n<span data-nosnippet>29</span>        </span>M: Monoid,\n<span data-nosnippet>30</span>        F: Fn(usize) -&gt; M::T,\n<span data-nosnippet>31</span>    {\n<span data-nosnippet>32</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">adjacencies</span>(u).filter(|a| a.to != p) {\n<span data-nosnippet>33</span>            <span class=\"kw\">let </span>nd = M::operate(<span class=\"kw-2\">&amp;</span>d, <span class=\"kw-2\">&amp;</span>weight(a.id));\n<span data-nosnippet>34</span>            <span class=\"self\">self</span>.weighted_depth_dfs::&lt;M, <span class=\"kw\">_</span>&gt;(a.to, u, nd, depth, weight);\n<span data-nosnippet>35</span>        }\n<span data-nosnippet>36</span>        depth[u] = d;\n<span data-nosnippet>37</span>    }\n<span data-nosnippet>38</span>    <span class=\"kw\">pub fn </span>weighted_tree_depth&lt;M: Monoid, F: Fn(usize) -&gt; M::T&gt;(\n<span data-nosnippet>39</span>        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>,\n<span data-nosnippet>40</span>        root: usize,\n<span data-nosnippet>41</span>        weight: F,\n<span data-nosnippet>42</span>    ) -&gt; Vec&lt;M::T&gt; {\n<span data-nosnippet>43</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>depth = <span class=\"macro\">vec!</span>[M::unit(); <span class=\"self\">self</span>.vertices_size()];\n<span data-nosnippet>44</span>        <span class=\"self\">self</span>.weighted_depth_dfs::&lt;M, <span class=\"kw\">_</span>&gt;(root, usize::MAX, M::unit(), <span class=\"kw-2\">&amp;mut </span>depth, <span class=\"kw-2\">&amp;</span>weight);\n<span data-nosnippet>45</span>        depth\n<span data-nosnippet>46</span>    }\n<span data-nosnippet>47</span>}\n<span data-nosnippet>48</span>\n<span data-nosnippet>49</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"tree_size\"</span>, include(<span class=\"string\">\"SparseGraph\"</span>))]\n<span data-nosnippet>50</span></span><span class=\"kw\">impl </span>UndirectedSparseGraph {\n<span data-nosnippet>51</span>    <span class=\"kw\">fn </span>size_dfs(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, p: usize, size: <span class=\"kw-2\">&amp;mut </span>Vec&lt;u64&gt;) {\n<span data-nosnippet>52</span>        size[u] = <span class=\"number\">1</span>;\n<span data-nosnippet>53</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">adjacencies</span>(u).filter(|a| a.to != p) {\n<span data-nosnippet>54</span>            <span class=\"self\">self</span>.size_dfs(a.to, u, size);\n<span data-nosnippet>55</span>            size[u] += size[a.to];\n<span data-nosnippet>56</span>        }\n<span data-nosnippet>57</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/tree/euler_tour.rs.html#29&#34;,&#34;line 29&#34;],[[34,34],&#34;src/competitive/tree/euler_tour.rs.html#62&#34;,&#34;line 62&#34;],[[42,42],&#34;src/competitive/tree/euler_tour.rs.html#70&#34;,&#34;line 70&#34;],[[96,96],&#34;src/competitive/tree/euler_tour.rs.html#124&#34;,&#34;line 124&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/euler_tour.rs (<a href=\"src/competitive/tree/euler_tour.rs.html#29\">line 29</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>28</span>    <span class=\"kw\">fn </span>edge_tour(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, p: usize) {\n<span data-nosnippet>29</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.<span class=\"highlight focus\">adjacencies</span>(u).filter(|a| a.to != p) {\n<span data-nosnippet>30</span>            <span class=\"self\">self</span>.par[a.to] = a.id;\n<span data-nosnippet>31</span>            <span class=\"self\">self</span>.eidx[a.id].<span class=\"number\">0 </span>= <span class=\"self\">self</span>.epos;\n<span data-nosnippet>32</span>            <span class=\"self\">self</span>.epos += <span class=\"number\">1</span>;\n<span data-nosnippet>33</span>            <span class=\"self\">self</span>.edge_tour(a.to, u);\n<span data-nosnippet>34</span>            <span class=\"self\">self</span>.eidx[a.id].<span class=\"number\">1 </span>= <span class=\"self\">self</span>.epos;\n<span data-nosnippet>35</span>            <span class=\"self\">self</span>.epos += <span class=\"number\">1</span>;\n<span data-nosnippet>36</span>        }\n<span data-nosnippet>37</span>    }\n<span data-nosnippet>38</span>}\n<span data-nosnippet>39</span>\n<span data-nosnippet>40</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"EulerTourForVertex\"</span>, include(<span class=\"string\">\"SparseGraph\"</span>))]\n<span data-nosnippet>41</span>#[derive(Clone, Debug)]\n<span data-nosnippet>42</span></span><span class=\"kw\">pub struct </span>EulerTourForVertex&lt;<span class=\"lifetime\">'a</span>&gt; {\n<span data-nosnippet>43</span>    graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph,\n<span data-nosnippet>44</span>    <span class=\"kw\">pub </span>vidx: Vec&lt;(usize, usize)&gt;,\n<span data-nosnippet>45</span>    vpos: usize,\n<span data-nosnippet>46</span>}\n<span data-nosnippet>47</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"EulerTourForVertex\"</span>)]\n<span data-nosnippet>48</span></span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; EulerTourForVertex&lt;<span class=\"lifetime\">'a</span>&gt; {\n<span data-nosnippet>49</span>    <span class=\"kw\">pub fn </span>new(graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>50</span>        <span class=\"self\">Self </span>{\n<span data-nosnippet>51</span>            graph,\n<span data-nosnippet>52</span>            vidx: <span class=\"macro\">vec!</span>[(<span class=\"number\">0</span>, <span class=\"number\">0</span>); graph.vertices_size()],\n<span data-nosnippet>53</span>            vpos: <span class=\"number\">0</span>,\n<span data-nosnippet>54</span>        }\n<span data-nosnippet>55</span>    }\n<span data-nosnippet>56</span>    <span class=\"kw\">pub fn </span>length(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; usize {\n<span data-nosnippet>57</span>        <span class=\"self\">self</span>.vpos\n<span data-nosnippet>58</span>    }\n<span data-nosnippet>59</span>    <span class=\"kw\">pub fn </span>subtree_vertex_tour(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, p: usize) {\n<span data-nosnippet>60</span>        <span class=\"self\">self</span>.vidx[u].<span class=\"number\">0 </span>= <span class=\"self\">self</span>.vpos;\n<span data-nosnippet>61</span>        <span class=\"self\">self</span>.vpos += <span class=\"number\">1</span>;\n<span data-nosnippet>62</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.<span class=\"highlight\">adjacencies</span>(u).filter(|a| a.to != p) {\n<span data-nosnippet>63</span>            <span class=\"self\">self</span>.subtree_vertex_tour(a.to, u);\n<span data-nosnippet>64</span>        }\n<span data-nosnippet>65</span>        <span class=\"self\">self</span>.vidx[u].<span class=\"number\">1 </span>= <span class=\"self\">self</span>.vpos;\n<span data-nosnippet>66</span>    }\n<span data-nosnippet>67</span>    <span class=\"kw\">pub fn </span>path_vertex_tour(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, p: usize) {\n<span data-nosnippet>68</span>        <span class=\"self\">self</span>.vidx[u].<span class=\"number\">0 </span>= <span class=\"self\">self</span>.vpos;\n<span data-nosnippet>69</span>        <span class=\"self\">self</span>.vpos += <span class=\"number\">1</span>;\n<span data-nosnippet>70</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.<span class=\"highlight\">adjacencies</span>(u).filter(|a| a.to != p) {\n<span data-nosnippet>71</span>            <span class=\"self\">self</span>.path_vertex_tour(a.to, u);\n<span data-nosnippet>72</span>        }\n<span data-nosnippet>73</span>        <span class=\"self\">self</span>.vidx[u].<span class=\"number\">1 </span>= <span class=\"self\">self</span>.vpos;\n<span data-nosnippet>74</span>        <span class=\"self\">self</span>.vpos += <span class=\"number\">1</span>;\n<span data-nosnippet>75</span>    }\n<span data-nosnippet>76</span>    <span class=\"kw\">pub fn </span>subtree_query&lt;T, F: FnMut(usize, usize) -&gt; T&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, <span class=\"kw-2\">mut </span>f: F) -&gt; T {\n<span data-nosnippet>77</span>        <span class=\"kw\">let </span>(l, r) = <span class=\"self\">self</span>.vidx[u];\n<span data-nosnippet>78</span>        f(l, r)\n<span data-nosnippet>79</span>    }\n<span data-nosnippet>80</span>    <span class=\"kw\">pub fn </span>subtree_update&lt;T, F: FnMut(usize, T)&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, x: T, <span class=\"kw-2\">mut </span>f: F) {\n<span data-nosnippet>81</span>        <span class=\"kw\">let </span>(l, _r) = <span class=\"self\">self</span>.vidx[u];\n<span data-nosnippet>82</span>        f(l, x);\n<span data-nosnippet>83</span>    }\n<span data-nosnippet>84</span>    <span class=\"kw\">pub fn </span>path_query&lt;T, F: FnMut(usize, usize) -&gt; T&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, v: usize, <span class=\"kw-2\">mut </span>f: F) -&gt; T {\n<span data-nosnippet>85</span>        <span class=\"kw\">let </span>(<span class=\"kw-2\">mut </span>l, <span class=\"kw-2\">mut </span>r) = (<span class=\"self\">self</span>.vidx[u].<span class=\"number\">0</span>, <span class=\"self\">self</span>.vidx[v].<span class=\"number\">0</span>);\n<span data-nosnippet>86</span>        <span class=\"kw\">if </span>l &gt; r {\n<span data-nosnippet>87</span>            std::mem::swap(<span class=\"kw-2\">&amp;mut </span>l, <span class=\"kw-2\">&amp;mut </span>r);\n<span data-nosnippet>88</span>        }\n<span data-nosnippet>89</span>        f(l, r + <span class=\"number\">1</span>)\n<span data-nosnippet>90</span>    }\n<span data-nosnippet>91</span>    <span class=\"kw\">pub fn </span>path_update&lt;T, F: FnMut(usize, T)&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, u: usize, x: T, invx: T, <span class=\"kw-2\">mut </span>f: F) {\n<span data-nosnippet>92</span>        <span class=\"kw\">let </span>(l, r) = <span class=\"self\">self</span>.vidx[u];\n<span data-nosnippet>93</span>        f(l, x);\n<span data-nosnippet>94</span>        f(r, invx);\n<span data-nosnippet>95</span>    }\n<span data-nosnippet>96</span>}\n<span data-nosnippet>97</span>\n<span data-nosnippet>98</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"EulerTourForRichVertex\"</span>, include(<span class=\"string\">\"SparseGraph\"</span>))]\n<span data-nosnippet>99</span>#[derive(Clone, Debug)]\n<span data-nosnippet>100</span></span><span class=\"kw\">pub struct </span>EulerTourForRichVertex&lt;<span class=\"lifetime\">'a</span>&gt; {\n<span data-nosnippet>101</span>    graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph,\n<span data-nosnippet>102</span>    <span class=\"kw\">pub </span>root: usize,\n<span data-nosnippet>103</span>    <span class=\"kw\">pub </span>vidx: Vec&lt;(usize, usize)&gt;,\n<span data-nosnippet>104</span>    vtrace: Vec&lt;usize&gt;,\n<span data-nosnippet>105</span>}\n<span data-nosnippet>106</span><span class=\"attr\">#[codesnip::entry(<span class=\"string\">\"EulerTourForRichVertex\"</span>)]\n<span data-nosnippet>107</span></span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>&gt; EulerTourForRichVertex&lt;<span class=\"lifetime\">'a</span>&gt; {\n<span data-nosnippet>108</span>    <span class=\"kw\">pub fn </span>new(root: usize, graph: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>UndirectedSparseGraph) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>109</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">Self </span>{\n<span data-nosnippet>110</span>            graph,\n<span data-nosnippet>111</span>            root,\n<span data-nosnippet>112</span>            vidx: <span class=\"macro\">vec!</span>[(<span class=\"number\">0</span>, <span class=\"number\">0</span>); graph.vertices_size()],\n<span data-nosnippet>113</span>            vtrace: <span class=\"macro\">vec!</span>[],\n<span data-nosnippet>114</span>        };\n<span data-nosnippet>115</span>        self_.vertex_tour(root, usize::MAX);\n<span data-nosnippet>116</span>        self_\n<span data-nosnippet>117</span>    }\n<span data-nosnippet>118</span>    <span class=\"kw\">pub fn </span>length(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; usize {\n<span data-nosnippet>119</span>        <span class=\"self\">self</span>.vtrace.len()\n<span data-nosnippet>120</span>    }\n<span data-nosnippet>121</span>    <span class=\"kw\">fn </span>vertex_tour(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, p: usize) {\n<span data-nosnippet>122</span>        <span class=\"self\">self</span>.vidx[u].<span class=\"number\">0 </span>= <span class=\"self\">self</span>.vtrace.len();\n<span data-nosnippet>123</span>        <span class=\"self\">self</span>.vtrace.push(u);\n<span data-nosnippet>124</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.<span class=\"highlight\">adjacencies</span>(u).filter(|a| a.to != p) {\n<span data-nosnippet>125</span>            <span class=\"self\">self</span>.vertex_tour(a.to, u);\n<span data-nosnippet>126</span>            <span class=\"self\">self</span>.vtrace.push(u);\n<span data-nosnippet>127</span>        }\n<span data-nosnippet>128</span>        <span class=\"self\">self</span>.vidx[u].<span class=\"number\">1 </span>= <span class=\"self\">self</span>.vtrace.len() - <span class=\"number\">1</span>;\n<span data-nosnippet>129</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[3,3],&#34;src/competitive/tree/rerooting.rs.html#62&#34;,&#34;line 62&#34;],[[11,11],&#34;src/competitive/tree/rerooting.rs.html#70&#34;,&#34;line 70&#34;],[[14,14],&#34;src/competitive/tree/rerooting.rs.html#73&#34;,&#34;line 73&#34;],[[18,18],&#34;src/competitive/tree/rerooting.rs.html#77&#34;,&#34;line 77&#34;],[[23,23],&#34;src/competitive/tree/rerooting.rs.html#82&#34;,&#34;line 82&#34;],[[33,33],&#34;src/competitive/tree/rerooting.rs.html#92&#34;,&#34;line 92&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/rerooting.rs (<a href=\"src/competitive/tree/rerooting.rs.html#62\">line 62</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>59</span>    <span class=\"kw\">fn </span>dfs(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, pa: <span class=\"kw-2\">&amp;</span>Adjacency, p: usize) {\n<span data-nosnippet>60</span>        <span class=\"kw\">let </span>u = pa.to;\n<span data-nosnippet>61</span>        <span class=\"kw\">let </span>pi = <span class=\"self\">self</span>.eidx(p, pa);\n<span data-nosnippet>62</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.<span class=\"highlight focus\">adjacencies</span>(u).filter(|a| a.to != p) {\n<span data-nosnippet>63</span>            <span class=\"kw\">let </span>i = <span class=\"self\">self</span>.eidx(u, a);\n<span data-nosnippet>64</span>            <span class=\"self\">self</span>.dfs(a, u);\n<span data-nosnippet>65</span>            <span class=\"self\">self</span>.ep[pi] = <span class=\"self\">self</span>.merge(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.ep[pi], <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.ep[i]);\n<span data-nosnippet>66</span>        }\n<span data-nosnippet>67</span>        <span class=\"self\">self</span>.ep[pi] = <span class=\"self\">self</span>.add_subroot(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.ep[pi], u, pa.id);\n<span data-nosnippet>68</span>    }\n<span data-nosnippet>69</span>    <span class=\"kw\">fn </span>efs(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, u: usize, p: usize) {\n<span data-nosnippet>70</span>        <span class=\"kw\">let </span>m = <span class=\"self\">self</span>.graph.<span class=\"highlight\">adjacencies</span>(u).len();\n<span data-nosnippet>71</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>left = <span class=\"macro\">vec!</span>[M::unit(); m + <span class=\"number\">1</span>];\n<span data-nosnippet>72</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>right = <span class=\"macro\">vec!</span>[M::unit(); m + <span class=\"number\">1</span>];\n<span data-nosnippet>73</span>        <span class=\"kw\">for </span>(k, a) <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.<span class=\"highlight\">adjacencies</span>(u).enumerate() {\n<span data-nosnippet>74</span>            <span class=\"kw\">let </span>i = <span class=\"self\">self</span>.eidx(u, a);\n<span data-nosnippet>75</span>            left[k + <span class=\"number\">1</span>] = <span class=\"self\">self</span>.merge(<span class=\"kw-2\">&amp;</span>left[k], <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.ep[i]);\n<span data-nosnippet>76</span>        }\n<span data-nosnippet>77</span>        <span class=\"kw\">for </span>(k, a) <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.<span class=\"highlight\">adjacencies</span>(u).enumerate().rev() {\n<span data-nosnippet>78</span>            <span class=\"kw\">let </span>i = <span class=\"self\">self</span>.eidx(u, a);\n<span data-nosnippet>79</span>            right[k] = <span class=\"self\">self</span>.merge(<span class=\"kw-2\">&amp;</span>right[k + <span class=\"number\">1</span>], <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.ep[i]);\n<span data-nosnippet>80</span>        }\n<span data-nosnippet>81</span>        <span class=\"self\">self</span>.dp[u] = <span class=\"self\">self</span>.add_root(<span class=\"kw-2\">&amp;</span>left[m], u);\n<span data-nosnippet>82</span>        <span class=\"kw\">for </span>(k, a) <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.<span class=\"highlight\">adjacencies</span>(u).enumerate() {\n<span data-nosnippet>83</span>            <span class=\"kw\">if </span>a.to != p {\n<span data-nosnippet>84</span>                <span class=\"kw\">let </span>i = <span class=\"self\">self</span>.reidx(u, a);\n<span data-nosnippet>85</span>                <span class=\"self\">self</span>.ep[i] = <span class=\"self\">self</span>.merge(<span class=\"kw-2\">&amp;</span>left[k], <span class=\"kw-2\">&amp;</span>right[k + <span class=\"number\">1</span>]);\n<span data-nosnippet>86</span>                <span class=\"self\">self</span>.ep[i] = <span class=\"self\">self</span>.add_subroot(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.ep[i], u, a.id);\n<span data-nosnippet>87</span>                <span class=\"self\">self</span>.efs(a.to, u);\n<span data-nosnippet>88</span>            }\n<span data-nosnippet>89</span>        }\n<span data-nosnippet>90</span>    }\n<span data-nosnippet>91</span>    <span class=\"kw\">fn </span>rerooting(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>92</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.graph.<span class=\"highlight\">adjacencies</span>(<span class=\"number\">0</span>) {\n<span data-nosnippet>93</span>            <span class=\"self\">self</span>.dfs(a, <span class=\"number\">0</span>);\n<span data-nosnippet>94</span>        }\n<span data-nosnippet>95</span>        <span class=\"self\">self</span>.efs(<span class=\"number\">0</span>, usize::MAX);\n<span data-nosnippet>96</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[4,4],&#34;src/competitive/tree/tree_dp.rs.html#13&#34;,&#34;line 13&#34;],[[23,23],&#34;src/competitive/tree/tree_dp.rs.html#32&#34;,&#34;line 32&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/tree_dp.rs (<a href=\"src/competitive/tree/tree_dp.rs.html#13\">line 13</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>9</span>        <span class=\"kw\">fn </span>dfs&lt;T, F&gt;(g: <span class=\"kw-2\">&amp;</span>UndirectedSparseGraph, u: usize, p: usize, dp: <span class=\"kw-2\">&amp;mut </span>[T], f: <span class=\"kw-2\">&amp;mut </span>F)\n<span data-nosnippet>10</span>        <span class=\"kw\">where\n<span data-nosnippet>11</span>            </span>F: FnMut(<span class=\"kw-2\">&amp;mut </span>T, <span class=\"kw-2\">&amp;</span>T),\n<span data-nosnippet>12</span>        {\n<span data-nosnippet>13</span>            <span class=\"kw\">for </span>a <span class=\"kw\">in </span>g.<span class=\"highlight focus\">adjacencies</span>(u) {\n<span data-nosnippet>14</span>                <span class=\"kw\">if </span>a.to != p {\n<span data-nosnippet>15</span>                    dfs(g, a.to, u, dp, f);\n<span data-nosnippet>16</span>                    <span class=\"macro\">assert_ne!</span>(u, a.to);\n<span data-nosnippet>17</span>                    <span class=\"kw\">let </span>ptr = dp.as_mut_ptr();\n<span data-nosnippet>18</span>                    <span class=\"kw\">unsafe </span>{ f(<span class=\"kw-2\">&amp;mut *</span>ptr.add(u), <span class=\"kw-2\">&amp;*</span>ptr.add(a.to)) };\n<span data-nosnippet>19</span>                }\n<span data-nosnippet>20</span>            }\n<span data-nosnippet>21</span>        }\n<span data-nosnippet>22</span>        dfs(<span class=\"self\">self</span>, root, !<span class=\"number\">0</span>, dp, <span class=\"kw-2\">&amp;mut </span>f);\n<span data-nosnippet>23</span>    }\n<span data-nosnippet>24</span>    <span class=\"kw\">pub fn </span>tree_dp_top_down&lt;T, F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, root: usize, dp: <span class=\"kw-2\">&amp;mut </span>[T], <span class=\"kw-2\">mut </span>f: F)\n<span data-nosnippet>25</span>    <span class=\"kw\">where\n<span data-nosnippet>26</span>        </span>F: FnMut(<span class=\"kw-2\">&amp;mut </span>T, <span class=\"kw-2\">&amp;</span>T),\n<span data-nosnippet>27</span>    {\n<span data-nosnippet>28</span>        <span class=\"kw\">fn </span>dfs&lt;T, F&gt;(g: <span class=\"kw-2\">&amp;</span>UndirectedSparseGraph, u: usize, p: usize, dp: <span class=\"kw-2\">&amp;mut </span>[T], f: <span class=\"kw-2\">&amp;mut </span>F)\n<span data-nosnippet>29</span>        <span class=\"kw\">where\n<span data-nosnippet>30</span>            </span>F: FnMut(<span class=\"kw-2\">&amp;mut </span>T, <span class=\"kw-2\">&amp;</span>T),\n<span data-nosnippet>31</span>        {\n<span data-nosnippet>32</span>            <span class=\"kw\">for </span>a <span class=\"kw\">in </span>g.<span class=\"highlight\">adjacencies</span>(u) {\n<span data-nosnippet>33</span>                <span class=\"kw\">if </span>a.to != p {\n<span data-nosnippet>34</span>                    <span class=\"macro\">assert_ne!</span>(u, a.to);\n<span data-nosnippet>35</span>                    <span class=\"kw\">let </span>ptr = dp.as_mut_ptr();\n<span data-nosnippet>36</span>                    <span class=\"kw\">unsafe </span>{ f(<span class=\"kw-2\">&amp;mut *</span>ptr.add(a.to), <span class=\"kw-2\">&amp;*</span>ptr.add(u)) };\n<span data-nosnippet>37</span>                    dfs(g, a.to, u, dp, f);\n<span data-nosnippet>38</span>                }\n<span data-nosnippet>39</span>            }\n<span data-nosnippet>40</span>        }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[5,5],&#34;src/competitive/tree/tree_hash.rs.html#66&#34;,&#34;line 66&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/tree_hash.rs (<a href=\"src/competitive/tree/tree_hash.rs.html#66\">line 66</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>61</span>    <span class=\"kw\">fn </span>hash_rec(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, g: <span class=\"kw-2\">&amp;</span>UndirectedSparseGraph, u: usize, p: usize, d: usize) -&gt; u64 {\n<span data-nosnippet>62</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = <span class=\"number\">1u64</span>;\n<span data-nosnippet>63</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.rv.len() &lt;= d {\n<span data-nosnippet>64</span>            <span class=\"self\">self</span>.rv.push(<span class=\"self\">Self</span>::mersenne_mod(<span class=\"self\">self</span>.rng.rand64()));\n<span data-nosnippet>65</span>        }\n<span data-nosnippet>66</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span>g.<span class=\"highlight focus\">adjacencies</span>(u) {\n<span data-nosnippet>67</span>            <span class=\"kw\">if </span>a.to != p {\n<span data-nosnippet>68</span>                s = <span class=\"self\">Self</span>::mersenne_mul_mod(s, <span class=\"self\">self</span>.hash_rec(g, a.to, u, d + <span class=\"number\">1</span>));\n<span data-nosnippet>69</span>            }\n<span data-nosnippet>70</span>        }\n<span data-nosnippet>71</span>        s += <span class=\"self\">self</span>.rv[d];\n<span data-nosnippet>72</span>        <span class=\"kw\">if </span>s &gt;= <span class=\"self\">Self</span>::MOD {\n<span data-nosnippet>73</span>            s -= <span class=\"self\">Self</span>::MOD;\n<span data-nosnippet>74</span>        }\n<span data-nosnippet>75</span>        s\n<span data-nosnippet>76</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[8,8],&#34;src/competitive/tree/tree_order.rs.html#14&#34;,&#34;line 14&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/tree_order.rs (<a href=\"src/competitive/tree/tree_order.rs.html#14\">line 14</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span>    <span class=\"kw\">pub fn </span>tree_order(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, root: usize) -&gt; (Vec&lt;usize&gt;, Vec&lt;usize&gt;) {\n<span data-nosnippet>7</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.vertices_size();\n<span data-nosnippet>8</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>order = Vec::with_capacity(n);\n<span data-nosnippet>9</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>parents = <span class=\"macro\">vec!</span>[!<span class=\"number\">0usize</span>; n];\n<span data-nosnippet>10</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>stack = Vec::with_capacity(n);\n<span data-nosnippet>11</span>        stack.push(root);\n<span data-nosnippet>12</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(u) = stack.pop() {\n<span data-nosnippet>13</span>            order.push(u);\n<span data-nosnippet>14</span>            <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight focus\">adjacencies</span>(u).rev() {\n<span data-nosnippet>15</span>                <span class=\"kw\">if </span>a.to != parents[u] {\n<span data-nosnippet>16</span>                    parents[a.to] = u;\n<span data-nosnippet>17</span>                    stack.push(a.to);\n<span data-nosnippet>18</span>                }\n<span data-nosnippet>19</span>            }\n<span data-nosnippet>20</span>        }\n<span data-nosnippet>21</span>        (order, parents)\n<span data-nosnippet>22</span>    }</code></pre></div></div><div class=\"example-links\">Additional examples can be found in:<br><ul><li><a href=\"src/competitive/tree/tree_centroid.rs.html#9\">crates/competitive/src/tree/tree_centroid.rs</a></li><li><a href=\"src/competitive/graph/order.rs.html#13\">crates/competitive/src/graph/order.rs</a></li><li><a href=\"src/competitive/graph/graphvis.rs.html#18\">crates/competitive/src/graph/graphvis.rs</a></li><li><a href=\"src/competitive/graph/topological_sort.rs.html#7\">crates/competitive/src/graph/topological_sort.rs</a></li><li><a href=\"src/competitive/tree/heavy_light_decomposition.rs.html#26\">crates/competitive/src/tree/heavy_light_decomposition.rs</a></li><li><a href=\"src/competitive/graph/maximum_flow.rs.html#67\">crates/competitive/src/graph/maximum_flow.rs</a></li><li><a href=\"src/competitive/graph/minimum_cost_flow.rs.html#83\">crates/competitive/src/graph/minimum_cost_flow.rs</a></li><li><a href=\"src/competitive/graph/strongly_connected_component.rs.html#46\">crates/competitive/src/graph/strongly_connected_component.rs</a></li><li><a href=\"src/competitive/graph/low_link.rs.html#32\">crates/competitive/src/graph/low_link.rs</a></li><li><a href=\"src/competitive/tree/tree_center.rs.html#16\">crates/competitive/src/tree/tree_center.rs</a></li><li><a href=\"src/competitive/graph/dulmage_mendelsohn_decomposition.rs.html#31\">crates/competitive/src/graph/dulmage_mendelsohn_decomposition.rs</a></li></ul></div></div></details></div></details><section id=\"method.builder\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#54-56\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.builder\" class=\"fn\">builder</a>&lt;T&gt;(vsize: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraphBuilder.html\" title=\"struct competitive::graph::SparseGraphBuilder\">SparseGraphBuilder</a>&lt;T, D&gt;</h4></section><section id=\"method.builder_with_esize\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#57-59\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.builder_with_esize\" class=\"fn\">builder_with_esize</a>&lt;T&gt;(\n    vsize: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    esize: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraphBuilder.html\" title=\"struct competitive::graph::SparseGraphBuilder\">SparseGraphBuilder</a>&lt;T, D&gt;</h4></section></div></details>",0,"competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#66-74\">Source</a><a href=\"#impl-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"competitive/graph/trait.SparseGraphConstruction.html\" title=\"trait competitive::graph::SparseGraphConstruction\">SparseGraphConstruction</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_edges\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#71-73\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.from_edges\" class=\"fn\">from_edges</a>(vsize: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, edges: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Construct graph from edges.</p>\n</div><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&#34;src/competitive/graph/sparse_graph.rs.html#197&#34;,&#34;line 197&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/sparse_graph.rs (<a href=\"src/competitive/graph/sparse_graph.rs.html#197\">line 197</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>196</span>    <span class=\"kw\">pub fn </span>build(<span class=\"self\">self</span>) -&gt; (SparseGraph&lt;D&gt;, Vec&lt;T&gt;) {\n<span data-nosnippet>197</span>        <span class=\"kw\">let </span>graph = <span class=\"highlight focus\">SparseGraph::from_edges</span>(<span class=\"self\">self</span>.vsize, <span class=\"self\">self</span>.edges);\n<span data-nosnippet>198</span>        (graph, <span class=\"self\">self</span>.rest)\n<span data-nosnippet>199</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example expanded\" data-locs=\"[[[2,2],&#34;src/competitive/graph/maximum_flow.rs.html#25&#34;,&#34;line 25&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/maximum_flow.rs (<a href=\"src/competitive/graph/maximum_flow.rs.html#25\">line 25</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>23</span>    <span class=\"kw\">pub fn </span>gen_graph(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; BidirectionalSparseGraph {\n<span data-nosnippet>24</span>        <span class=\"kw\">let </span>edges = std::mem::take(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.edges);\n<span data-nosnippet>25</span>        <span class=\"highlight focus\">BidirectionalSparseGraph::from_edges</span>(<span class=\"self\">self</span>.vsize, edges)\n<span data-nosnippet>26</span>    }</code></pre></div></div><div class=\"scraped-example expanded\" data-locs=\"[[[2,2],&#34;src/competitive/graph/minimum_cost_flow.rs.html#31&#34;,&#34;line 31&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/minimum_cost_flow.rs (<a href=\"src/competitive/graph/minimum_cost_flow.rs.html#31\">line 31</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>29</span>    <span class=\"kw\">pub fn </span>gen_graph(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) -&gt; BidirectionalSparseGraph {\n<span data-nosnippet>30</span>        <span class=\"kw\">let </span>edges = std::mem::take(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.edges);\n<span data-nosnippet>31</span>        <span class=\"highlight focus\">BidirectionalSparseGraph::from_edges</span>(<span class=\"self\">self</span>.vsize, edges)\n<span data-nosnippet>32</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[8,8],&#34;src/competitive/tree/generator.rs.html#15&#34;,&#34;line 15&#34;],[[18,18],&#34;src/competitive/tree/generator.rs.html#25&#34;,&#34;line 25&#34;],[[28,28],&#34;src/competitive/tree/generator.rs.html#35&#34;,&#34;line 35&#34;],[[64,64],&#34;src/competitive/tree/generator.rs.html#71&#34;,&#34;line 71&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/tree/generator.rs (<a href=\"src/competitive/tree/generator.rs.html#15\">line 15</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>7</span>    <span class=\"kw\">fn </span>rand(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rng: <span class=\"kw-2\">&amp;mut </span>Xorshift) -&gt; UndirectedSparseGraph {\n<span data-nosnippet>8</span>        <span class=\"kw\">let </span>n = rng.random(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>);\n<span data-nosnippet>9</span>        <span class=\"kw\">let </span>edges = from_prufer_sequence(\n<span data-nosnippet>10</span>            n,\n<span data-nosnippet>11</span>            <span class=\"kw-2\">&amp;</span>rng.random_iter(<span class=\"number\">0</span>..n)\n<span data-nosnippet>12</span>                .take(n.saturating_sub(<span class=\"number\">2</span>))\n<span data-nosnippet>13</span>                .collect::&lt;Vec&lt;usize&gt;&gt;(),\n<span data-nosnippet>14</span>        );\n<span data-nosnippet>15</span>        <span class=\"highlight focus\">UndirectedSparseGraph::from_edges</span>(n, edges)\n<span data-nosnippet>16</span>    }\n<span data-nosnippet>17</span>}\n<span data-nosnippet>18</span>\n<span data-nosnippet>19</span><span class=\"kw\">pub struct </span>PathTree&lt;T&gt;(<span class=\"kw\">pub </span>T);\n<span data-nosnippet>20</span>\n<span data-nosnippet>21</span><span class=\"kw\">impl</span>&lt;T: RandomSpec&lt;usize&gt;&gt; RandomSpec&lt;UndirectedSparseGraph&gt; <span class=\"kw\">for </span>PathTree&lt;T&gt; {\n<span data-nosnippet>22</span>    <span class=\"kw\">fn </span>rand(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rng: <span class=\"kw-2\">&amp;mut </span>Xorshift) -&gt; UndirectedSparseGraph {\n<span data-nosnippet>23</span>        <span class=\"kw\">let </span>n = rng.random(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>);\n<span data-nosnippet>24</span>        <span class=\"kw\">let </span>edges = (<span class=\"number\">1</span>..n).map(|u| (u - <span class=\"number\">1</span>, u)).collect();\n<span data-nosnippet>25</span>        <span class=\"highlight\">UndirectedSparseGraph::from_edges</span>(n, edges)\n<span data-nosnippet>26</span>    }\n<span data-nosnippet>27</span>}\n<span data-nosnippet>28</span>\n<span data-nosnippet>29</span><span class=\"kw\">pub struct </span>StarTree&lt;T&gt;(<span class=\"kw\">pub </span>T);\n<span data-nosnippet>30</span>\n<span data-nosnippet>31</span><span class=\"kw\">impl</span>&lt;T: RandomSpec&lt;usize&gt;&gt; RandomSpec&lt;UndirectedSparseGraph&gt; <span class=\"kw\">for </span>StarTree&lt;T&gt; {\n<span data-nosnippet>32</span>    <span class=\"kw\">fn </span>rand(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rng: <span class=\"kw-2\">&amp;mut </span>Xorshift) -&gt; UndirectedSparseGraph {\n<span data-nosnippet>33</span>        <span class=\"kw\">let </span>n = rng.random(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>);\n<span data-nosnippet>34</span>        <span class=\"kw\">let </span>edges = (<span class=\"number\">1</span>..n).map(|u| (<span class=\"number\">0</span>, u)).collect();\n<span data-nosnippet>35</span>        <span class=\"highlight\">UndirectedSparseGraph::from_edges</span>(n, edges)\n<span data-nosnippet>36</span>    }\n<span data-nosnippet>37</span>}\n<span data-nosnippet>38</span>\n<span data-nosnippet>39</span><span class=\"kw\">pub struct </span>MixedTree&lt;T&gt;(<span class=\"kw\">pub </span>T);\n<span data-nosnippet>40</span>\n<span data-nosnippet>41</span><span class=\"kw\">impl</span>&lt;T: RandomSpec&lt;usize&gt;&gt; RandomSpec&lt;UndirectedSparseGraph&gt; <span class=\"kw\">for </span>MixedTree&lt;T&gt; {\n<span data-nosnippet>42</span>    <span class=\"kw\">fn </span>rand(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rng: <span class=\"kw-2\">&amp;mut </span>Xorshift) -&gt; UndirectedSparseGraph {\n<span data-nosnippet>43</span>        <span class=\"kw\">fn </span>rand_inner(n: usize, rng: <span class=\"kw-2\">&amp;mut </span>Xorshift) -&gt; Vec&lt;(usize, usize)&gt; {\n<span data-nosnippet>44</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>edges = Vec::with_capacity(n.saturating_sub(<span class=\"number\">1</span>));\n<span data-nosnippet>45</span>            <span class=\"kw\">if </span>n &gt;= <span class=\"number\">2 </span>{\n<span data-nosnippet>46</span>                <span class=\"kw\">let </span>k = rng.random(<span class=\"number\">1</span>..n);\n<span data-nosnippet>47</span>                <span class=\"kw\">for </span>n <span class=\"kw\">in </span>[k, n - k].iter().cloned() {\n<span data-nosnippet>48</span>                    <span class=\"kw\">let </span>ty = rng.rand(<span class=\"number\">6</span>);\n<span data-nosnippet>49</span>                    edges.extend(<span class=\"kw\">match </span>ty {\n<span data-nosnippet>50</span>                        <span class=\"number\">0 </span>=&gt; from_prufer_sequence(\n<span data-nosnippet>51</span>                            n,\n<span data-nosnippet>52</span>                            <span class=\"kw-2\">&amp;</span>rng.random_iter(<span class=\"number\">0</span>..n)\n<span data-nosnippet>53</span>                                .take(n.saturating_sub(<span class=\"number\">2</span>))\n<span data-nosnippet>54</span>                                .collect::&lt;Vec&lt;usize&gt;&gt;(),\n<span data-nosnippet>55</span>                        ),\n<span data-nosnippet>56</span>                        <span class=\"number\">1 </span>=&gt; (<span class=\"number\">1</span>..n).map(|u| (u - <span class=\"number\">1</span>, u)).collect(),\n<span data-nosnippet>57</span>                        <span class=\"number\">2 </span>=&gt; (<span class=\"number\">1</span>..n).map(|u| (<span class=\"number\">0</span>, u)).collect(),\n<span data-nosnippet>58</span>                        <span class=\"kw\">_ </span>=&gt; rand_inner(n, rng),\n<span data-nosnippet>59</span>                    });\n<span data-nosnippet>60</span>                }\n<span data-nosnippet>61</span>                <span class=\"kw\">for </span>(u, v) <span class=\"kw\">in </span>edges[k - <span class=\"number\">1</span>..].iter_mut() {\n<span data-nosnippet>62</span>                    <span class=\"kw-2\">*</span>u += k;\n<span data-nosnippet>63</span>                    <span class=\"kw-2\">*</span>v += k;\n<span data-nosnippet>64</span>                }\n<span data-nosnippet>65</span>                edges.push((rng.random(<span class=\"number\">0</span>..k), rng.random(k..n)));\n<span data-nosnippet>66</span>            }\n<span data-nosnippet>67</span>            edges\n<span data-nosnippet>68</span>        }\n<span data-nosnippet>69</span>        <span class=\"kw\">let </span>n = rng.random(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.<span class=\"number\">0</span>);\n<span data-nosnippet>70</span>        <span class=\"kw\">let </span>edges = rand_inner(n, rng);\n<span data-nosnippet>71</span>        <span class=\"highlight\">UndirectedSparseGraph::from_edges</span>(n, edges)\n<span data-nosnippet>72</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/graph/two_satisfiability.rs.html#34&#34;,&#34;line 34&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/graph/two_satisfiability.rs (<a href=\"src/competitive/graph/two_satisfiability.rs.html#34\">line 34</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>33</span>    <span class=\"kw\">pub fn </span>two_satisfiability(<span class=\"self\">self</span>) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;bool&gt;&gt; {\n<span data-nosnippet>34</span>        <span class=\"kw\">let </span>graph = <span class=\"highlight focus\">DirectedSparseGraph::from_edges</span>(<span class=\"self\">self</span>.vsize * <span class=\"number\">2</span>, <span class=\"self\">self</span>.edges);\n<span data-nosnippet>35</span>        <span class=\"kw\">let </span>scc = StronglyConnectedComponent::new(<span class=\"kw-2\">&amp;</span>graph);\n<span data-nosnippet>36</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"macro\">vec!</span>[<span class=\"bool-val\">false</span>; <span class=\"self\">self</span>.vsize];\n<span data-nosnippet>37</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..<span class=\"self\">self</span>.vsize {\n<span data-nosnippet>38</span>            <span class=\"kw\">if </span>scc[i * <span class=\"number\">2</span>] == scc[i * <span class=\"number\">2 </span>+ <span class=\"number\">1</span>] {\n<span data-nosnippet>39</span>                <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>40</span>            }\n<span data-nosnippet>41</span>            res[i] = scc[i * <span class=\"number\">2</span>] &gt; scc[i * <span class=\"number\">2 </span>+ <span class=\"number\">1</span>];\n<span data-nosnippet>42</span>        }\n<span data-nosnippet>43</span>        <span class=\"prelude-val\">Some</span>(res)\n<span data-nosnippet>44</span>    }</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[4,4],&#34;src/library_checker/graph/scc.rs.html#10&#34;,&#34;line 10&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/graph/scc.rs (<a href=\"src/library_checker/graph/scc.rs.html#10\">line 10</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>scc(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, vs, es, edges: [(usize, usize); es]);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>graph = <span class=\"highlight focus\">DirectedSparseGraph::from_edges</span>(vs, edges);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span>scc = StronglyConnectedComponent::new(<span class=\"kw-2\">&amp;</span>graph);\n<span data-nosnippet>12</span>    <span class=\"kw\">let </span>comp = scc.components();\n<span data-nosnippet>13</span>    <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"{}\"</span>, comp.len()).ok();\n<span data-nosnippet>14</span>    <span class=\"kw\">for </span>vs <span class=\"kw\">in </span>comp.into_iter() {\n<span data-nosnippet>15</span>        <span class=\"macro\">iter_print!</span>(writer, vs.len(), @it vs);\n<span data-nosnippet>16</span>    }\n<span data-nosnippet>17</span>}</code></pre></div></div><div class=\"example-links\">Additional examples can be found in:<br><ul><li><a href=\"src/library_checker/graph/lca.rs.html#14\">crates/library_checker/src/graph/lca.rs</a></li><li><a href=\"src/competitive/graph/strongly_connected_component.rs.html#79\">crates/competitive/src/graph/strongly_connected_component.rs</a></li><li><a href=\"src/aizu_online_judge/grl/grl_5_c.rs.html#19\">crates/aizu_online_judge/src/grl/grl_5_c.rs</a></li><li><a href=\"src/library_checker/datastructure/vertex_add_subtree_sum.rs.html#14\">crates/library_checker/src/datastructure/vertex_add_subtree_sum.rs</a></li><li><a href=\"src/aizu_online_judge/grl/grl_5_e.rs.html#21\">crates/aizu_online_judge/src/grl/grl_5_e.rs</a></li><li><a href=\"src/aizu_online_judge/grl/grl_5_d.rs.html#18\">crates/aizu_online_judge/src/grl/grl_5_d.rs</a></li><li><a href=\"src/competitive/graph/dulmage_mendelsohn_decomposition.rs.html#17\">crates/competitive/src/graph/dulmage_mendelsohn_decomposition.rs</a></li></ul></div></div></details></div></details></div></details>",0,"competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/topological_sort.rs.html#3-25\">Source</a><a href=\"#impl-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.topological_sort\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/graph/topological_sort.rs.html#4-24\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.topological_sort\" class=\"fn\">topological_sort</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[4,4],&#34;src/aizu_online_judge/grl/grl_4_a.rs.html#10&#34;,&#34;line 10&#34;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/grl/grl_4_a.rs (<a href=\"src/aizu_online_judge/grl/grl_4_a.rs.html#10\">line 10</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>grl_4_a(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, vs, es, (graph, <span class=\"kw\">_</span>): @DirectedGraphScanner::&lt;usize, ()&gt;::new(vs, es));\n<span data-nosnippet>10</span>    <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"{}\"</span>, (graph.<span class=\"highlight focus\">topological_sort</span>().len() != vs) <span class=\"kw\">as </span>u32).ok();\n<span data-nosnippet>11</span>}</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example expanded\" data-locs=\"[[[4,4],&#34;src/aizu_online_judge/grl/grl_4_b.rs.html#10&#34;,&#34;line 10&#34;]]\"><div class=\"scraped-example-title\">crates/aizu_online_judge/src/grl/grl_4_b.rs (<a href=\"src/aizu_online_judge/grl/grl_4_b.rs.html#10\">line 10</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>grl_4_b(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, vs, es, (graph, <span class=\"kw\">_</span>): @DirectedGraphScanner::&lt;usize, ()&gt;::new(vs, es));\n<span data-nosnippet>10</span>    <span class=\"kw\">for </span>u <span class=\"kw\">in </span>graph.<span class=\"highlight focus\">topological_sort</span>().into_iter() {\n<span data-nosnippet>11</span>        <span class=\"macro\">writeln!</span>(writer, <span class=\"string\">\"{}\"</span>, u).ok();\n<span data-nosnippet>12</span>    }\n<span data-nosnippet>13</span>}</code></pre></div></div></div></details></div></details></div></details>",0,"competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/tree/tree_order.rs.html#4-23\">Source</a><a href=\"#impl-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.tree_order\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/tree/tree_order.rs.html#6-22\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/graph/struct.SparseGraph.html#tymethod.tree_order\" class=\"fn\">tree_order</a>(&amp;self, root: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;)</h4></section></summary><div class=\"docblock\"><p>(order, parents)</p>\n</div></details></div></details>",0,"competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VertexMap%3CT%3E-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#342-360\">Source</a><a href=\"#impl-VertexMap%3CT%3E-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D, T&gt; <a class=\"trait\" href=\"competitive/graph/trait.VertexMap.html\" title=\"trait competitive::graph::VertexMap\">VertexMap</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.Vmap\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#343\">Source</a><a href=\"#associatedtype.Vmap\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/graph/trait.VertexMap.html#associatedtype.Vmap\" class=\"associatedtype\">Vmap</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section><section id=\"method.construct_vmap\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#344-351\">Source</a><a href=\"#method.construct_vmap\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.VertexMap.html#tymethod.construct_vmap\" class=\"fn\">construct_vmap</a>&lt;F&gt;(&amp;self, f: F) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.VertexMap.html#associatedtype.Vmap\" title=\"type competitive::graph::VertexMap::Vmap\">Vmap</a><div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>() -&gt; T,</div></h4></section><section id=\"method.vmap_get\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#352-355\">Source</a><a href=\"#method.vmap_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.VertexMap.html#tymethod.vmap_get\" class=\"fn\">vmap_get</a>&lt;'a&gt;(&amp;self, map: &amp;'a Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.VertexMap.html#associatedtype.Vmap\" title=\"type competitive::graph::VertexMap::Vmap\">Vmap</a>, vid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.GraphBase.html#associatedtype.VIndex\" title=\"type competitive::graph::GraphBase::VIndex\">VIndex</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a T</a></h4></section><section id=\"method.vmap_get_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#356-359\">Source</a><a href=\"#method.vmap_get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.VertexMap.html#tymethod.vmap_get_mut\" class=\"fn\">vmap_get_mut</a>&lt;'a&gt;(\n    &amp;self,\n    map: &amp;'a mut Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.VertexMap.html#associatedtype.Vmap\" title=\"type competitive::graph::VertexMap::Vmap\">Vmap</a>,\n    vid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.GraphBase.html#associatedtype.VIndex\" title=\"type competitive::graph::GraphBase::VIndex\">VIndex</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;'a mut T</a></h4></section><section id=\"method.vmap_set\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/graph_base.rs.html#225-227\">Source</a><a href=\"#method.vmap_set\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.VertexMap.html#method.vmap_set\" class=\"fn\">vmap_set</a>(&amp;self, map: &amp;mut Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.VertexMap.html#associatedtype.Vmap\" title=\"type competitive::graph::VertexMap::Vmap\">Vmap</a>, vid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.GraphBase.html#associatedtype.VIndex\" title=\"type competitive::graph::GraphBase::VIndex\">VIndex</a>, x: T)</h4></section></div></details>","VertexMap<T>","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VertexSize-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#284-288\">Source</a><a href=\"#impl-VertexSize-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"competitive/graph/trait.VertexSize.html\" title=\"trait competitive::graph::VertexSize\">VertexSize</a> for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.vsize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#285-287\">Source</a><a href=\"#method.vsize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.VertexSize.html#tymethod.vsize\" class=\"fn\">vsize</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></div></details>","VertexSize","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VertexView%3C%5BT%5D,+T%3E-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#369-377\">Source</a><a href=\"#impl-VertexView%3C%5BT%5D,+T%3E-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D, T&gt; <a class=\"trait\" href=\"competitive/graph/trait.VertexView.html\" title=\"trait competitive::graph::VertexView\">VertexView</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, T&gt; for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.vview\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#373-376\">Source</a><a href=\"#method.vview\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.VertexView.html#tymethod.vview\" class=\"fn\">vview</a>(&amp;self, map: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>, vid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.GraphBase.html#associatedtype.VIndex\" title=\"type competitive::graph::GraphBase::VIndex\">VIndex</a>) -&gt; T</h4></section></div></details>","VertexView<[T], T>","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-VertexView%3CVec%3CT%3E,+T%3E-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#361-368\">Source</a><a href=\"#impl-VertexView%3CVec%3CT%3E,+T%3E-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D, T&gt; <a class=\"trait\" href=\"competitive/graph/trait.VertexView.html\" title=\"trait competitive::graph::VertexView\">VertexView</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, T&gt; for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.vview\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#365-367\">Source</a><a href=\"#method.vview\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.VertexView.html#tymethod.vview\" class=\"fn\">vview</a>(&amp;self, map: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, vid: Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.GraphBase.html#associatedtype.VIndex\" title=\"type competitive::graph::GraphBase::VIndex\">VIndex</a>) -&gt; T</h4></section></div></details>","VertexView<Vec<T>, T>","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Vertices-for-SparseGraph%3CD%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#295-303\">Source</a><a href=\"#impl-Vertices-for-SparseGraph%3CD%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;D&gt; <a class=\"trait\" href=\"competitive/graph/trait.Vertices.html\" title=\"trait competitive::graph::Vertices\">Vertices</a> for <a class=\"struct\" href=\"competitive/graph/struct.SparseGraph.html\" title=\"struct competitive::graph::SparseGraph\">SparseGraph</a>&lt;D&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.VIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#296-299\">Source</a><a href=\"#associatedtype.VIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/graph/trait.Vertices.html#associatedtype.VIter\" class=\"associatedtype\">VIter</a>&lt;'g&gt; = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/ops/range/struct.Range.html\" title=\"struct core::ops::range::Range\">Range</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;\n<span class=\"where\">where\n    D: 'g</span></h4></section><section id=\"method.vertices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/graph/sparse_graph.rs.html#300-302\">Source</a><a href=\"#method.vertices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/graph/trait.Vertices.html#tymethod.vertices\" class=\"fn\">vertices</a>(&amp;self) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/graph/trait.Vertices.html#associatedtype.VIter\" title=\"type competitive::graph::Vertices::VIter\">VIter</a>&lt;'_&gt;</h4></section></div></details>","Vertices","competitive::graph::sparse_graph::DirectedSparseGraph","competitive::graph::sparse_graph::UndirectedSparseGraph","competitive::graph::sparse_graph::BidirectionalSparseGraph"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[169895]}