(function() {
    var type_impls = Object.fromEntries([["competitive",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#193\">Source</a><a href=\"#impl-Add%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;&amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#193\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#193\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: &amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&FormalPowerSeries<T, C>>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#106\">Source</a><a href=\"#impl-Add%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#106\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#106\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#106\">Source</a><a href=\"#impl-Add%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#106\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#106\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: T) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#193\">Source</a><a href=\"#impl-Add-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#193\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#193\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, rhs: Self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" title=\"type core::ops::arith::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#111-123\">Source</a><a href=\"#impl-AddAssign%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#115-122\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: &amp;Self)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&FormalPowerSeries<T, C>>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#106\">Source</a><a href=\"#impl-AddAssign%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#106\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#12-22\">Source</a><a href=\"#impl-AddAssign%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#16-21\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: T)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#193\">Source</a><a href=\"#impl-AddAssign-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#193\">Source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, rhs: Self)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#33-40\">Source</a><a href=\"#impl-Clone-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#37-39\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#245-247\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/mod.rs.html#17-24\">Source</a><a href=\"#impl-Debug-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/mod.rs.html#21-23\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/mod.rs.html#11\">Source</a><a href=\"#impl-Default-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>, C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/mod.rs.html#11\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#305\">Source</a><a href=\"#impl-Div%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;&amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#305\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#305\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: &amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&FormalPowerSeries<T, C>>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#109\">Source</a><a href=\"#impl-Div%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#109\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#109\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#109\">Source</a><a href=\"#impl-Div%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#109\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#109\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: T) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#205-225\">Source</a><a href=\"#impl-Div-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html\" title=\"trait core::ops::arith::Div\">Div</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#210\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#211-224\">Source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, rhs: Self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#associatedtype.Output\" title=\"type core::ops::arith::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#305\">Source</a><a href=\"#impl-DivAssign%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#305\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: &amp;Self)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&FormalPowerSeries<T, C>>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#109\">Source</a><a href=\"#impl-DivAssign%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#109\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#45-55\">Source</a><a href=\"#impl-DivAssign%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#49-54\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: T)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#305\">Source</a><a href=\"#impl-DivAssign-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html\" title=\"trait core::ops::arith::DivAssign\">DivAssign</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#305\">Source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, rhs: Self)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FormalPowerSeries%3CMInt%3CM%3E,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#507-533\">Source</a><a href=\"#impl-FormalPowerSeries%3CMInt%3CM%3E,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M, C&gt; <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;, C&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.taylor_shift\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#513-532\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.taylor_shift\" class=\"fn\">taylor_shift</a>(self, a: <a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;, f: &amp;<a class=\"struct\" href=\"competitive/math/struct.MemorizedFactorial.html\" title=\"struct competitive::math::MemorizedFactorial\">MemorizedFactorial</a>&lt;M&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>f(x) &lt;- f(x + a)</p>\n</div><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[6,6],&#34;src/library_checker/math/polynomial_taylor_shift.rs.html#14&#34;,&#34;line 14&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/polynomial_taylor_shift.rs (<a href=\"src/library_checker/math/polynomial_taylor_shift.rs.html#14\">line 14</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>8</span><span class=\"kw\">pub fn </span>polynomial_taylor_shift(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>9</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>11</span>    <span class=\"macro\">scan!</span>(scanner, n, c: MInt998244353, a: [MInt998244353; n]);\n<span data-nosnippet>12</span>    <span class=\"kw\">let </span>f = MemorizedFactorial::new(n);\n<span data-nosnippet>13</span>    <span class=\"kw\">let </span>a = Fps998244353::from_vec(a);\n<span data-nosnippet>14</span>    <span class=\"kw\">let </span>res = a.<span class=\"highlight focus\">taylor_shift</span>(c, <span class=\"kw-2\">&amp;</span>f);\n<span data-nosnippet>15</span>    <span class=\"macro\">iter_print!</span>(writer, @it res);\n<span data-nosnippet>16</span>}</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[12,12],&#34;src/competitive/math/determinant_linear.rs.html#18&#34;,&#34;line 18&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/determinant_linear.rs (<a href=\"src/competitive/math/determinant_linear.rs.html#18\">line 18</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>determinant_linear(<span class=\"kw-2\">mut </span>m0: Vec&lt;Vec&lt;M&gt;&gt;, m1: Vec&lt;Vec&lt;M&gt;&gt;) -&gt; <span class=\"prelude-ty\">Option</span>&lt;Vec&lt;M&gt;&gt; {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rng = Xorshift::new();\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span>a = M::new_unchecked(rng.rand(M::get_mod() <span class=\"kw\">as _</span>) <span class=\"kw\">as _</span>);\n<span data-nosnippet>9</span>    <span class=\"kw\">let </span>n = m0.len();\n<span data-nosnippet>10</span>    <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..n {\n<span data-nosnippet>11</span>        <span class=\"kw\">for </span>j <span class=\"kw\">in </span><span class=\"number\">0</span>..n {\n<span data-nosnippet>12</span>            m0[i][j] += m1[i][j] * a;\n<span data-nosnippet>13</span>        }\n<span data-nosnippet>14</span>    }\n<span data-nosnippet>15</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = determinant_linear_non_singular(m1, m0)<span class=\"question-mark\">?</span>;\n<span data-nosnippet>16</span>    f.reverse();\n<span data-nosnippet>17</span>    <span class=\"kw\">let </span>mf = MemorizedFactorial::new(n + <span class=\"number\">1</span>);\n<span data-nosnippet>18</span>    <span class=\"prelude-val\">Some</span>(Fps998244353::from_vec(f).<span class=\"highlight focus\">taylor_shift</span>(-a, <span class=\"kw-2\">&amp;</span>mf).data)\n<span data-nosnippet>19</span>}</code></pre></div></div></div></details></div></details></div></details>",0,"competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#12-31\">Source</a><a href=\"#impl-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#13-18\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.from_vec\" class=\"fn\">from_vec</a>(data: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#38&#34;,&#34;line 38&#34;],[[56,56],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#93&#34;,&#34;line 93&#34;],[[92,92],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#129&#34;,&#34;line 129&#34;],[[115,115],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#152&#34;,&#34;line 152&#34;],[[125,125],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#162&#34;,&#34;line 162&#34;],[[205,205],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#242&#34;,&#34;line 242&#34;],[[209,209],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#246&#34;,&#34;line 246&#34;],[[236,241],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#273-278&#34;,&#34;lines 273-278&#34;],[[361,361],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#398&#34;,&#34;line 398&#34;],[[371,371],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#408&#34;,&#34;line 408&#34;],[[442,442],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#479&#34;,&#34;line 479&#34;],[[449,449],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#486&#34;,&#34;line 486&#34;],[[459,459],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#496&#34;,&#34;line 496&#34;],[[459,459],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#496&#34;,&#34;line 496&#34;],[[483,483],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#520&#34;,&#34;line 520&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#38\">line 38</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>37</span>    <span class=\"kw\">fn </span>clone(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>38</span>        <span class=\"highlight focus\"><span class=\"self\">Self</span>::from_vec</span>(<span class=\"self\">self</span>.data.clone())\n<span data-nosnippet>39</span>    }\n<span data-nosnippet>40</span>}\n<span data-nosnippet>41</span><span class=\"kw\">impl</span>&lt;T, C&gt; PartialEq <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>42</span><span class=\"kw\">where\n<span data-nosnippet>43</span>    </span>T: PartialEq,\n<span data-nosnippet>44</span>{\n<span data-nosnippet>45</span>    <span class=\"kw\">fn </span>eq(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) -&gt; bool {\n<span data-nosnippet>46</span>        <span class=\"self\">self</span>.data.eq(<span class=\"kw-2\">&amp;</span>other.data)\n<span data-nosnippet>47</span>    }\n<span data-nosnippet>48</span>}\n<span data-nosnippet>49</span><span class=\"kw\">impl</span>&lt;T, C&gt; Eq <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; <span class=\"kw\">where </span>T: PartialEq {}\n<span data-nosnippet>50</span>\n<span data-nosnippet>51</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>52</span><span class=\"kw\">where\n<span data-nosnippet>53</span>    </span>T: Zero,\n<span data-nosnippet>54</span>{\n<span data-nosnippet>55</span>    <span class=\"kw\">pub fn </span>zeros(deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>56</span>        repeat_with(T::zero).take(deg).collect()\n<span data-nosnippet>57</span>    }\n<span data-nosnippet>58</span>    <span class=\"kw\">pub fn </span>resize(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, deg: usize) {\n<span data-nosnippet>59</span>        <span class=\"self\">self</span>.data.resize_with(deg, Zero::zero)\n<span data-nosnippet>60</span>    }\n<span data-nosnippet>61</span>    <span class=\"kw\">pub fn </span>resized(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>62</span>        <span class=\"self\">self</span>.resize(deg);\n<span data-nosnippet>63</span>        <span class=\"self\">self\n<span data-nosnippet>64</span>    </span>}\n<span data-nosnippet>65</span>    <span class=\"kw\">pub fn </span>reversed(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>66</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>67</span>        <span class=\"self\">self\n<span data-nosnippet>68</span>    </span>}\n<span data-nosnippet>69</span>}\n<span data-nosnippet>70</span>\n<span data-nosnippet>71</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>72</span><span class=\"kw\">where\n<span data-nosnippet>73</span>    </span>T: Zero + PartialEq,\n<span data-nosnippet>74</span>{\n<span data-nosnippet>75</span>    <span class=\"kw\">pub fn </span>trim_tail_zeros(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>76</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>len = <span class=\"self\">self</span>.length();\n<span data-nosnippet>77</span>        <span class=\"kw\">while </span>len &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>78</span>            <span class=\"kw\">if </span><span class=\"self\">self</span>.data[len - <span class=\"number\">1</span>].is_zero() {\n<span data-nosnippet>79</span>                len -= <span class=\"number\">1</span>;\n<span data-nosnippet>80</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>81</span>                <span class=\"kw\">break</span>;\n<span data-nosnippet>82</span>            }\n<span data-nosnippet>83</span>        }\n<span data-nosnippet>84</span>        <span class=\"self\">self</span>.truncate(len);\n<span data-nosnippet>85</span>    }\n<span data-nosnippet>86</span>}\n<span data-nosnippet>87</span>\n<span data-nosnippet>88</span><span class=\"kw\">impl</span>&lt;T, C&gt; Zero <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>89</span><span class=\"kw\">where\n<span data-nosnippet>90</span>    </span>T: PartialEq,\n<span data-nosnippet>91</span>{\n<span data-nosnippet>92</span>    <span class=\"kw\">fn </span>zero() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>93</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(Vec::new())\n<span data-nosnippet>94</span>    }\n<span data-nosnippet>95</span>}\n<span data-nosnippet>96</span><span class=\"kw\">impl</span>&lt;T, C&gt; One <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>97</span><span class=\"kw\">where\n<span data-nosnippet>98</span>    </span>T: PartialEq + One,\n<span data-nosnippet>99</span>{\n<span data-nosnippet>100</span>    <span class=\"kw\">fn </span>one() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>101</span>        <span class=\"self\">Self</span>::from(T::one())\n<span data-nosnippet>102</span>    }\n<span data-nosnippet>103</span>}\n<span data-nosnippet>104</span>\n<span data-nosnippet>105</span><span class=\"kw\">impl</span>&lt;T, C&gt; IntoIterator <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>106</span>    <span class=\"kw\">type </span>Item = T;\n<span data-nosnippet>107</span>    <span class=\"kw\">type </span>IntoIter = std::vec::IntoIter&lt;T&gt;;\n<span data-nosnippet>108</span>    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n<span data-nosnippet>109</span>        <span class=\"self\">self</span>.data.into_iter()\n<span data-nosnippet>110</span>    }\n<span data-nosnippet>111</span>}\n<span data-nosnippet>112</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T, C&gt; IntoIterator <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>113</span>    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T;\n<span data-nosnippet>114</span>    <span class=\"kw\">type </span>IntoIter = Iter&lt;<span class=\"lifetime\">'a</span>, T&gt;;\n<span data-nosnippet>115</span>    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n<span data-nosnippet>116</span>        <span class=\"self\">self</span>.data.iter()\n<span data-nosnippet>117</span>    }\n<span data-nosnippet>118</span>}\n<span data-nosnippet>119</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T, C&gt; IntoIterator <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>120</span>    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>T;\n<span data-nosnippet>121</span>    <span class=\"kw\">type </span>IntoIter = IterMut&lt;<span class=\"lifetime\">'a</span>, T&gt;;\n<span data-nosnippet>122</span>    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n<span data-nosnippet>123</span>        <a class=\"self\" href=\"/competitive/algebra/struct.Bits.html\">self</a>.data.iter_mut()\n<span data-nosnippet>124</span>    }\n<span data-nosnippet>125</span>}\n<span data-nosnippet>126</span>\n<span data-nosnippet>127</span><span class=\"kw\">impl</span>&lt;T, C&gt; FromIterator&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>128</span>    <span class=\"kw\">fn </span>from_iter&lt;I: IntoIterator&lt;Item = T&gt;&gt;(iter: I) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>129</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(iter.into_iter().collect())\n<span data-nosnippet>130</span>    }\n<span data-nosnippet>131</span>}\n<span data-nosnippet>132</span>\n<span data-nosnippet>133</span><span class=\"kw\">impl</span>&lt;T, C&gt; Index&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>134</span>    <span class=\"kw\">type </span>Output = T;\n<span data-nosnippet>135</span>    <span class=\"kw\">fn </span>index(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, index: usize) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Output {\n<span data-nosnippet>136</span>        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.data[index]\n<span data-nosnippet>137</span>    }\n<span data-nosnippet>138</span>}\n<span data-nosnippet>139</span><span class=\"kw\">impl</span>&lt;T, C&gt; IndexMut&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>140</span>    <span class=\"kw\">fn </span>index_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, index: usize) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>::Output {\n<span data-nosnippet>141</span>        <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.data[index]\n<span data-nosnippet>142</span>    }\n<span data-nosnippet>143</span>}\n<span data-nosnippet>144</span>\n<span data-nosnippet>145</span><span class=\"kw\">impl</span>&lt;T, C&gt; From&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>146</span>    <span class=\"kw\">fn </span>from(x: T) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>147</span>        once(x).collect()\n<span data-nosnippet>148</span>    }\n<span data-nosnippet>149</span>}\n<span data-nosnippet>150</span><span class=\"kw\">impl</span>&lt;T, C&gt; From&lt;Vec&lt;T&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>151</span>    <span class=\"kw\">fn </span>from(data: Vec&lt;T&gt;) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>152</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(data)\n<span data-nosnippet>153</span>    }\n<span data-nosnippet>154</span>}\n<span data-nosnippet>155</span>\n<span data-nosnippet>156</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>157</span><span class=\"kw\">where\n<span data-nosnippet>158</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>159</span>{\n<span data-nosnippet>160</span>    <span class=\"kw\">pub fn </span>prefix_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>161</span>        <span class=\"kw\">if </span>deg &lt; <span class=\"self\">self</span>.length() {\n<span data-nosnippet>162</span>            <span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(<span class=\"self\">self</span>.data[..deg].to_vec())\n<span data-nosnippet>163</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>164</span>            <span class=\"self\">self</span>.clone()\n<span data-nosnippet>165</span>        }\n<span data-nosnippet>166</span>    }\n<span data-nosnippet>167</span>    <span class=\"kw\">pub fn </span>prefix(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>168</span>        <span class=\"self\">self</span>.data.truncate(deg);\n<span data-nosnippet>169</span>        <span class=\"self\">self\n<span data-nosnippet>170</span>    </span>}\n<span data-nosnippet>171</span>    <span class=\"kw\">pub fn </span>even(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>172</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>keep = <span class=\"bool-val\">false</span>;\n<span data-nosnippet>173</span>        <span class=\"self\">self</span>.data.retain(|<span class=\"kw\">_</span>| {\n<span data-nosnippet>174</span>            keep = !keep;\n<span data-nosnippet>175</span>            keep\n<span data-nosnippet>176</span>        });\n<span data-nosnippet>177</span>        <span class=\"self\">self\n<span data-nosnippet>178</span>    </span>}\n<span data-nosnippet>179</span>    <span class=\"kw\">pub fn </span>odd(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>180</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>keep = <span class=\"bool-val\">true</span>;\n<span data-nosnippet>181</span>        <span class=\"self\">self</span>.data.retain(|<span class=\"kw\">_</span>| {\n<span data-nosnippet>182</span>            keep = !keep;\n<span data-nosnippet>183</span>            keep\n<span data-nosnippet>184</span>        });\n<span data-nosnippet>185</span>        <span class=\"self\">self\n<span data-nosnippet>186</span>    </span>}\n<span data-nosnippet>187</span>    <span class=\"kw\">pub fn </span>diff(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>188</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = T::one();\n<span data-nosnippet>189</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>190</span>            <span class=\"kw-2\">*</span>x <span class=\"kw-2\">*</span>= <span class=\"kw-2\">&amp;</span>c;\n<span data-nosnippet>191</span>            c += T::one();\n<span data-nosnippet>192</span>        }\n<span data-nosnippet>193</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>194</span>            <span class=\"self\">self</span>.data.remove(<span class=\"number\">0</span>);\n<span data-nosnippet>195</span>        }\n<span data-nosnippet>196</span>        <span class=\"self\">self\n<span data-nosnippet>197</span>    </span>}\n<span data-nosnippet>198</span>    <span class=\"kw\">pub fn </span>integral(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>199</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>200</span>        <span class=\"self\">self</span>.data.insert(<span class=\"number\">0</span>, Zero::zero());\n<span data-nosnippet>201</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fact = Vec::with_capacity(n + <span class=\"number\">1</span>);\n<span data-nosnippet>202</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = T::one();\n<span data-nosnippet>203</span>        fact.push(c.clone());\n<span data-nosnippet>204</span>        <span class=\"kw\">for _ in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>205</span>            fact.push(fact.last().cloned().unwrap() * c.clone());\n<span data-nosnippet>206</span>            c += T::one();\n<span data-nosnippet>207</span>        }\n<span data-nosnippet>208</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>invf = T::one() / (fact.last().cloned().unwrap() * c.clone());\n<span data-nosnippet>209</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().skip(<span class=\"number\">1</span>).rev() {\n<span data-nosnippet>210</span>            <span class=\"kw-2\">*</span>x <span class=\"kw-2\">*</span>= invf.clone() * fact.pop().unwrap();\n<span data-nosnippet>211</span>            invf <span class=\"kw-2\">*</span>= c.clone();\n<span data-nosnippet>212</span>            c -= T::one();\n<span data-nosnippet>213</span>        }\n<span data-nosnippet>214</span>        <span class=\"self\">self\n<span data-nosnippet>215</span>    </span>}\n<span data-nosnippet>216</span>    <span class=\"kw\">pub fn </span>eval(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, x: T) -&gt; T {\n<span data-nosnippet>217</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>base = T::one();\n<span data-nosnippet>218</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = T::zero();\n<span data-nosnippet>219</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.iter() {\n<span data-nosnippet>220</span>            res += base.clone() * a.clone();\n<span data-nosnippet>221</span>            base <span class=\"kw-2\">*</span>= x.clone();\n<span data-nosnippet>222</span>        }\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }\n<span data-nosnippet>225</span>}\n<span data-nosnippet>226</span>\n<span data-nosnippet>227</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>228</span><span class=\"kw\">where\n<span data-nosnippet>229</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>230</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>231</span>{\n<span data-nosnippet>232</span>    <span class=\"kw\">pub fn </span>inv(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>233</span>        <span class=\"macro\">debug_assert!</span>(!<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>234</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(T::one() / <span class=\"self\">self</span>[<span class=\"number\">0</span>].clone());\n<span data-nosnippet>235</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>236</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>237</span>            <span class=\"kw\">let </span>g = <span class=\"self\">self</span>.prefix_ref((i * <span class=\"number\">2</span>).min(deg));\n<span data-nosnippet>238</span>            <span class=\"kw\">let </span>h = f.clone();\n<span data-nosnippet>239</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>240</span>            <span class=\"kw\">let </span>h = C::transform(h.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>241</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>242</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = <span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>243</span>            g &gt;&gt;= i;\n<span data-nosnippet>244</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>245</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>246</span>            <span class=\"kw\">let </span>g = <span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>247</span>            f.data.extend((-g).into_iter().take(i));\n<span data-nosnippet>248</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>249</span>        }\n<span data-nosnippet>250</span>        f.truncate(deg);\n<span data-nosnippet>251</span>        f\n<span data-nosnippet>252</span>    }\n<span data-nosnippet>253</span>    <span class=\"kw\">pub fn </span>exp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>254</span>        <span class=\"macro\">debug_assert!</span>(<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>255</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::one();\n<span data-nosnippet>256</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>257</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>258</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = -f.log(i * <span class=\"number\">2</span>);\n<span data-nosnippet>259</span>            g[<span class=\"number\">0</span>] += T::one();\n<span data-nosnippet>260</span>            <span class=\"kw\">for </span>(g, x) <span class=\"kw\">in </span>g.iter_mut().zip(<span class=\"self\">self</span>.iter().take(i * <span class=\"number\">2</span>)) {\n<span data-nosnippet>261</span>                <span class=\"kw-2\">*</span>g += x.clone();\n<span data-nosnippet>262</span>            }\n<span data-nosnippet>263</span>            f = (f * g).prefix(i * <span class=\"number\">2</span>);\n<span data-nosnippet>264</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>265</span>        }\n<span data-nosnippet>266</span>        f.prefix(deg)\n<span data-nosnippet>267</span>    }\n<span data-nosnippet>268</span>    <span class=\"kw\">pub fn </span>log(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>269</span>        (<span class=\"self\">self</span>.inv(deg) * <span class=\"self\">self</span>.clone().diff()).integral().prefix(deg)\n<span data-nosnippet>270</span>    }\n<span data-nosnippet>271</span>    <span class=\"kw\">pub fn </span>pow(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: usize, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>272</span>        <span class=\"kw\">if </span>rhs == <span class=\"number\">0 </span>{\n<span data-nosnippet>273</span>            <span class=\"kw\">return </span><span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(\n<span data-nosnippet>274</span>                once(T::one())\n<span data-nosnippet>275</span>                    .chain(repeat_with(T::zero))\n<span data-nosnippet>276</span>                    .take(deg)\n<span data-nosnippet>277</span>                    .collect(),\n<span data-nosnippet>278</span>            );\n<span data-nosnippet>279</span>        }\n<span data-nosnippet>280</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>281</span>            <span class=\"kw\">if </span>k &gt;= (deg + rhs - <span class=\"number\">1</span>) / rhs {\n<span data-nosnippet>282</span>                <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>283</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>284</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x0 = <span class=\"self\">self</span>[k].clone();\n<span data-nosnippet>285</span>                <span class=\"kw\">let </span>rev = T::one() / x0.clone();\n<span data-nosnippet>286</span>                <span class=\"kw\">let </span>x = {\n<span data-nosnippet>287</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = T::one();\n<span data-nosnippet>288</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = rhs;\n<span data-nosnippet>289</span>                    <span class=\"kw\">while </span>y &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>290</span>                        <span class=\"kw\">if </span>y &amp; <span class=\"number\">1 </span>== <span class=\"number\">1 </span>{\n<span data-nosnippet>291</span>                            x <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>292</span>                        }\n<span data-nosnippet>293</span>                        x0 <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>294</span>                        y &gt;&gt;= <span class=\"number\">1</span>;\n<span data-nosnippet>295</span>                    }\n<span data-nosnippet>296</span>                    x\n<span data-nosnippet>297</span>                };\n<span data-nosnippet>298</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (<span class=\"self\">self</span>.clone() * <span class=\"kw-2\">&amp;</span>rev) &gt;&gt; k;\n<span data-nosnippet>299</span>                f = (f.log(deg) * <span class=\"kw-2\">&amp;</span>T::from(rhs)).exp(deg) * <span class=\"kw-2\">&amp;</span>x;\n<span data-nosnippet>300</span>                f.truncate(deg - k * rhs);\n<span data-nosnippet>301</span>                f &lt;&lt;= k * rhs;\n<span data-nosnippet>302</span>                f\n<span data-nosnippet>303</span>            }\n<span data-nosnippet>304</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>305</span>            <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>306</span>        }\n<span data-nosnippet>307</span>    }\n<span data-nosnippet>308</span>}\n<span data-nosnippet>309</span>\n<span data-nosnippet>310</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>311</span><span class=\"kw\">where\n<span data-nosnippet>312</span>    </span>T: FormalPowerSeriesCoefficientSqrt,\n<span data-nosnippet>313</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>314</span>{\n<span data-nosnippet>315</span>    <span class=\"kw\">pub fn </span>sqrt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>316</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero() {\n<span data-nosnippet>317</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>318</span>                <span class=\"kw\">if </span>k % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>319</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>320</span>                } <span class=\"kw\">else if </span>deg &gt; k / <span class=\"number\">2 </span>{\n<span data-nosnippet>321</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self </span>&gt;&gt; k).sqrt(deg - k / <span class=\"number\">2</span>)<span class=\"question-mark\">? </span>&lt;&lt; (k / <span class=\"number\">2</span>));\n<span data-nosnippet>322</span>                }\n<span data-nosnippet>323</span>            }\n<span data-nosnippet>324</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>325</span>            <span class=\"kw\">let </span>inv2 = T::one() / (T::one() + T::one());\n<span data-nosnippet>326</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(<span class=\"self\">self</span>[<span class=\"number\">0</span>].sqrt_coefficient()<span class=\"question-mark\">?</span>);\n<span data-nosnippet>327</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>328</span>            <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>329</span>                f = (<span class=\"kw-2\">&amp;</span>f + <span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.prefix_ref(i * <span class=\"number\">2</span>) * f.inv(i * <span class=\"number\">2</span>))).prefix(i * <span class=\"number\">2</span>) * <span class=\"kw-2\">&amp;</span>inv2;\n<span data-nosnippet>330</span>                i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>331</span>            }\n<span data-nosnippet>332</span>            f.truncate(deg);\n<span data-nosnippet>333</span>            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(f);\n<span data-nosnippet>334</span>        }\n<span data-nosnippet>335</span>        <span class=\"prelude-val\">Some</span>(<span class=\"self\">Self</span>::zeros(deg))\n<span data-nosnippet>336</span>    }\n<span data-nosnippet>337</span>}\n<span data-nosnippet>338</span>\n<span data-nosnippet>339</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>340</span><span class=\"kw\">where\n<span data-nosnippet>341</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>342</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>343</span>{\n<span data-nosnippet>344</span>    <span class=\"kw\">pub fn </span>count_subset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>345</span>    </span><span class=\"kw\">where\n<span data-nosnippet>346</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>347</span>    {\n<span data-nosnippet>348</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>349</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>350</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>351</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>352</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>353</span>                    <span class=\"kw\">if </span>j &amp; <span class=\"number\">1 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>354</span>                        f[d] += <span class=\"self\">self</span>[i].<a href=\"algebra/mod.rs.html#15\">clone</a>() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>355</span>                    } <span class=\"kw\">else </span>{\n<span data-nosnippet>356</span>                        f[d] -= <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>357</span>                    }\n<span data-nosnippet>358</span>                }\n<span data-nosnippet>359</span>            }\n<span data-nosnippet>360</span>        }\n<span data-nosnippet>361</span>        f.exp(deg)\n<span data-nosnippet>362</span>    }\n<span data-nosnippet>363</span>    <span class=\"kw\">pub fn </span>count_multiset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>364</span>    </span><span class=\"kw\">where\n<span data-nosnippet>365</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>366</span>    {\n<span data-nosnippet>367</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>368</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>369</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>370</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>371</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>372</span>                    f[d] += <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>373</span>                }\n<span data-nosnippet>374</span>            }\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>        f.exp(deg)\n<span data-nosnippet>377</span>    }\n<span data-nosnippet>378</span>    <span class=\"kw\">pub fn </span>bostan_mori(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>, <span class=\"kw-2\">mut </span>n: usize) -&gt; T {\n<span data-nosnippet>379</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"self\">self</span>;\n<span data-nosnippet>380</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = rhs;\n<span data-nosnippet>381</span>        <span class=\"kw\">while </span>n &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>382</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mq = q.clone();\n<span data-nosnippet>383</span>            mq.iter_mut()\n<span data-nosnippet>384</span>                .skip(<span class=\"number\">1</span>)\n<span data-nosnippet>385</span>                .step_by(<span class=\"number\">2</span>)\n<span data-nosnippet>386</span>                .for_each(|x| <span class=\"kw-2\">*</span>x = -x.clone());\n<span data-nosnippet>387</span>            <span class=\"kw\">let </span>u = p * mq.clone();\n<span data-nosnippet>388</span>            p = <span class=\"kw\">if </span>n % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>{ u.even() } <span class=\"kw\">else </span>{ u.odd() };\n<span data-nosnippet>389</span>            q = (q * mq).even();\n<span data-nosnippet>390</span>            n /= <span class=\"number\">2</span>;\n<span data-nosnippet>391</span>        }\n<span data-nosnippet>392</span>        p[<span class=\"number\">0</span>].clone() / q[<span class=\"number\">0</span>].clone()\n<span data-nosnippet>393</span>    }\n<span data-nosnippet>394</span>    <span class=\"kw\">fn </span>middle_product(<span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>C::F, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>395</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>396</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = C::transform(<span class=\"self\">self</span>.reversed().data, deg);\n<span data-nosnippet>397</span>        C::multiply(<span class=\"kw-2\">&amp;mut </span>s, other);\n<span data-nosnippet>398</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>((C::inverse_transform(s, deg))[n - <span class=\"number\">1</span>..].to_vec())\n<span data-nosnippet>399</span>    }\n<span data-nosnippet>400</span>    <span class=\"kw\">pub fn </span>multipoint_evaluation(<span class=\"self\">self</span>, points: <span class=\"kw-2\">&amp;</span>[T]) -&gt; Vec&lt;T&gt; {\n<span data-nosnippet>401</span>        <span class=\"kw\">let </span>n = points.len();\n<span data-nosnippet>402</span>        <span class=\"kw\">if </span>n &lt;= <span class=\"number\">32 </span>{\n<span data-nosnippet>403</span>            <span class=\"kw\">return </span>points.iter().map(|p| <span class=\"self\">self</span>.eval(p.clone())).collect();\n<span data-nosnippet>404</span>        }\n<span data-nosnippet>405</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>subproduct_tree = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>406</span>        subproduct_tree.resize_with(n, Zero::zero);\n<span data-nosnippet>407</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span>points {\n<span data-nosnippet>408</span>            subproduct_tree.push(<span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(<span class=\"macro\">vec!</span>[-x.clone(), T::one()]));\n<span data-nosnippet>409</span>        }\n<span data-nosnippet>410</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">1</span>..n).rev() {\n<span data-nosnippet>411</span>            subproduct_tree[i] = <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2</span>] * <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2 </span>+ <span class=\"number\">1</span>];\n<span data-nosnippet>412</span>        }\n<span data-nosnippet>413</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uptree_t = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>414</span>        uptree_t.resize_with(<span class=\"number\">1</span>, Zero::zero);\n<span data-nosnippet>415</span>        subproduct_tree.reverse();\n<span data-nosnippet>416</span>        subproduct_tree.pop();\n<span data-nosnippet>417</span>        <span class=\"kw\">let </span>m = <span class=\"self\">self</span>.length();\n<span data-nosnippet>418</span>        <span class=\"kw\">let </span>v = subproduct_tree.pop().unwrap().reversed().resized(m);\n<span data-nosnippet>419</span>        <span class=\"kw\">let </span>s = C::transform(<span class=\"self\">self</span>.data, m * <span class=\"number\">2</span>);\n<span data-nosnippet>420</span>        uptree_t.push(v.inv(m).middle_product(<span class=\"kw-2\">&amp;</span>s, m * <span class=\"number\">2</span>).resized(n).reversed());\n<span data-nosnippet>421</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>422</span>            <span class=\"kw\">let </span>subl = subproduct_tree.pop().unwrap();\n<span data-nosnippet>423</span>            <span class=\"kw\">let </span>subr = subproduct_tree.pop().unwrap();\n<span data-nosnippet>424</span>            <span class=\"kw\">let </span>(dl, dr) = (subl.length(), subr.length());\n<span data-nosnippet>425</span>            <span class=\"kw\">let </span>len = dl.max(dr) + uptree_t[i].length();\n<span data-nosnippet>426</span>            <span class=\"kw\">let </span>s = C::transform(uptree_t[i].data.to_vec(), len);\n<span data-nosnippet>427</span>            uptree_t.push(subr.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dl));\n<span data-nosnippet>428</span>            uptree_t.push(subl.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dr));\n<span data-nosnippet>429</span>        }\n<span data-nosnippet>430</span>        uptree_t[n..]\n<span data-nosnippet>431</span>            .iter()\n<span data-nosnippet>432</span>            .map(|u| u.data.first().cloned().unwrap_or_else(Zero::zero))\n<span data-nosnippet>433</span>            .collect()\n<span data-nosnippet>434</span>    }\n<span data-nosnippet>435</span>    <span class=\"kw\">pub fn </span>product_all&lt;I&gt;(iter: I, deg: usize) -&gt; <span class=\"self\">Self\n<span data-nosnippet>436</span>    </span><span class=\"kw\">where\n<span data-nosnippet>437</span>        </span>I: IntoIterator&lt;Item = <span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>438</span>    {\n<span data-nosnippet>439</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>&gt; = iter\n<span data-nosnippet>440</span>            .into_iter()\n<span data-nosnippet>441</span>            .map(|f| PartialIgnoredOrd(Reverse(f.length()), f))\n<span data-nosnippet>442</span>            .collect();\n<span data-nosnippet>443</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, x)) = heap.pop() {\n<span data-nosnippet>444</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, y)) = heap.pop() {\n<span data-nosnippet>445</span>                <span class=\"kw\">let </span>z = (x * y).prefix(deg);\n<span data-nosnippet>446</span>                heap.push(PartialIgnoredOrd(Reverse(z.length()), z));\n<span data-nosnippet>447</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>448</span>                <span class=\"kw\">return </span>x;\n<span data-nosnippet>449</span>            }\n<span data-nosnippet>450</span>        }\n<span data-nosnippet>451</span>        <span class=\"self\">Self</span>::one()\n<span data-nosnippet>452</span>    }\n<span data-nosnippet>453</span>    <span class=\"kw\">pub fn </span>sum_all_rational&lt;I&gt;(iter: I, deg: usize) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>)\n<span data-nosnippet>454</span>    <span class=\"kw\">where\n<span data-nosnippet>455</span>        </span>I: IntoIterator&lt;Item = (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>)&gt;,\n<span data-nosnippet>456</span>    {\n<span data-nosnippet>457</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>&gt; = iter\n<span data-nosnippet>458</span>            .into_iter()\n<span data-nosnippet>459</span>            .map(|(f, g)| PartialIgnoredOrd(Reverse(f.length().max(g.length())), (f, g)))\n<span data-nosnippet>460</span>            .collect();\n<span data-nosnippet>461</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, (xa, xb))) = heap.pop() {\n<span data-nosnippet>462</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, (ya, yb))) = heap.pop() {\n<span data-nosnippet>463</span>                <span class=\"kw\">let </span>zb = (<span class=\"kw-2\">&amp;</span>xb * <span class=\"kw-2\">&amp;</span>yb).prefix(deg);\n<span data-nosnippet>464</span>                <span class=\"kw\">let </span>za = (xa * yb + ya * xb).prefix(deg);\n<span data-nosnippet>465</span>                heap.push(PartialIgnoredOrd(\n<span data-nosnippet>466</span>                    Reverse(za.length().max(zb.length())),\n<span data-nosnippet>467</span>                    (za, zb),\n<span data-nosnippet>468</span>                ));\n<span data-nosnippet>469</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>470</span>                <span class=\"kw\">return </span>(xa, xb);\n<span data-nosnippet>471</span>            }\n<span data-nosnippet>472</span>        }\n<span data-nosnippet>473</span>        (<span class=\"self\">Self</span>::zero(), <span class=\"self\">Self</span>::one())\n<span data-nosnippet>474</span>    }\n<span data-nosnippet>475</span>    <span class=\"kw\">pub fn </span>kth_term_of_linearly_recurrence(<span class=\"self\">self</span>, a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>476</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>477</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>478</span>        }\n<span data-nosnippet>479</span>        <span class=\"kw\">let </span>p = (<span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(a).prefix(<span class=\"self\">self</span>.length() - <span class=\"number\">1</span>) * <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>).prefix(<span class=\"self\">self</span>.length() - <span class=\"number\">1</span>);\n<span data-nosnippet>480</span>        p.bostan_mori(<span class=\"self\">self</span>, k)\n<span data-nosnippet>481</span>    }\n<span data-nosnippet>482</span>    <span class=\"kw\">pub fn </span>kth_term(a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>483</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>484</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>485</span>        }\n<span data-nosnippet>486</span>        <span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(berlekamp_massey(<span class=\"kw-2\">&amp;</span>a)).kth_term_of_linearly_recurrence(a, k)\n<span data-nosnippet>487</span>    }\n<span data-nosnippet>488</span>    <span class=\"doccomment\">/// sum_i a_i exp(b_i x)\n<span data-nosnippet>489</span>    </span><span class=\"kw\">pub fn </span>linear_sum_of_exp&lt;I, F&gt;(iter: I, deg: usize, <span class=\"kw-2\">mut </span>inv_fact: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>490</span>    </span><span class=\"kw\">where\n<span data-nosnippet>491</span>        </span>I: IntoIterator&lt;Item = (T, T)&gt;,\n<span data-nosnippet>492</span>        F: FnMut(usize) -&gt; T,\n<span data-nosnippet>493</span>    {\n<span data-nosnippet>494</span>        <span class=\"kw\">let </span>(p, q) = <span class=\"self\">Self</span>::sum_all_rational(\n<span data-nosnippet>495</span>            iter.into_iter()\n<span data-nosnippet>496</span>                .map(|(a, b)| (<span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(<span class=\"macro\">vec!</span>[a]), <span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(<span class=\"macro\">vec!</span>[T::one(), -b]))),\n<span data-nosnippet>497</span>            deg,\n<span data-nosnippet>498</span>        );\n<span data-nosnippet>499</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (p * q.inv(deg)).prefix(deg);\n<span data-nosnippet>500</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..f.length() {\n<span data-nosnippet>501</span>            f[i] <span class=\"kw-2\">*</span>= inv_fact(i);\n<span data-nosnippet>502</span>        }\n<span data-nosnippet>503</span>        f\n<span data-nosnippet>504</span>    }\n<span data-nosnippet>505</span>}\n<span data-nosnippet>506</span>\n<span data-nosnippet>507</span><span class=\"kw\">impl</span>&lt;M, C&gt; FormalPowerSeries&lt;MInt&lt;M&gt;, C&gt;\n<span data-nosnippet>508</span><span class=\"kw\">where\n<span data-nosnippet>509</span>    </span>M: MIntConvert&lt;usize&gt;,\n<span data-nosnippet>510</span>    C: ConvolveSteps&lt;T = Vec&lt;MInt&lt;M&gt;&gt;&gt;,\n<span data-nosnippet>511</span>{\n<span data-nosnippet>512</span>    <span class=\"doccomment\">/// f(x) &lt;- f(x + a)\n<span data-nosnippet>513</span>    </span><span class=\"kw\">pub fn </span>taylor_shift(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, a: MInt&lt;M&gt;, f: <span class=\"kw-2\">&amp;</span>MemorizedFactorial&lt;M&gt;) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>514</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>515</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..n {\n<span data-nosnippet>516</span>            <span class=\"self\">self</span>.data[i] <span class=\"kw-2\">*</span>= f.fact[i];\n<span data-nosnippet>517</span>        }\n<span data-nosnippet>518</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>519</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = a;\n<span data-nosnippet>520</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = <span class=\"highlight\"><span class=\"self\">Self</span>::from_vec</span>(f.inv_fact[..n].to_vec());\n<span data-nosnippet>521</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>522</span>            g[i] <span class=\"kw-2\">*</span>= b;\n<span data-nosnippet>523</span>            b <span class=\"kw-2\">*</span>= a;\n<span data-nosnippet>524</span>        }\n<span data-nosnippet>525</span>        <span class=\"self\">self </span><span class=\"kw-2\">*</span>= g;\n<span data-nosnippet>526</span>        <span class=\"self\">self</span>.truncate(n);\n<span data-nosnippet>527</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>528</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..n {\n<span data-nosnippet>529</span>            <span class=\"self\">self</span>.data[i] <span class=\"kw-2\">*</span>= f.inv_fact[i];\n<span data-nosnippet>530</span>        }\n<span data-nosnippet>531</span>        <span class=\"self\">self\n<span data-nosnippet>532</span>    </span>}</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#202&#34;,&#34;line 202&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_nums.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#202\">line 202</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>201</span>    <span class=\"kw\">fn </span>mul(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>202</span>        <span class=\"highlight focus\"><span class=\"self\">Self</span>::from_vec</span>(C::convolve(<span class=\"self\">self</span>.data, rhs.data))\n<span data-nosnippet>203</span>    }</code></pre></div></div><div class=\"scraped-example expanded\" data-locs=\"[[[4,4],&#34;src/library_checker/math/exp_of_formal_power_series.rs.html#10&#34;,&#34;line 10&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/exp_of_formal_power_series.rs (<a href=\"src/library_checker/math/exp_of_formal_power_series.rs.html#10\">line 10</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>exp_of_formal_power_series(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, n, a: [MInt998244353; n]);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>f = <span class=\"highlight focus\">Fps998244353::from_vec</span>(a);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span>g = f.exp(n);\n<span data-nosnippet>12</span>    <span class=\"macro\">iter_print!</span>(writer, @it g.data);\n<span data-nosnippet>13</span>}</code></pre></div></div><div class=\"scraped-example expanded\" data-locs=\"[[[4,4],&#34;src/library_checker/math/inv_of_formal_power_series.rs.html#10&#34;,&#34;line 10&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/inv_of_formal_power_series.rs (<a href=\"src/library_checker/math/inv_of_formal_power_series.rs.html#10\">line 10</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>inv_of_formal_power_series(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, n, a: [MInt998244353; n]);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>f = <span class=\"highlight focus\">Fps998244353::from_vec</span>(a);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span>g = f.inv(n);\n<span data-nosnippet>12</span>    <span class=\"macro\">iter_print!</span>(writer, @it g.data);\n<span data-nosnippet>13</span>}</code></pre></div></div><div class=\"scraped-example expanded\" data-locs=\"[[[4,4],&#34;src/library_checker/math/log_of_formal_power_series.rs.html#10&#34;,&#34;line 10&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/log_of_formal_power_series.rs (<a href=\"src/library_checker/math/log_of_formal_power_series.rs.html#10\">line 10</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>log_of_formal_power_series(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, n, a: [MInt998244353; n]);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>f = <span class=\"highlight focus\">Fps998244353::from_vec</span>(a);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span>g = f.log(n);\n<span data-nosnippet>12</span>    <span class=\"macro\">iter_print!</span>(writer, @it g.data);\n<span data-nosnippet>13</span>}</code></pre></div></div><div class=\"scraped-example expanded\" data-locs=\"[[[4,4],&#34;src/library_checker/math/pow_of_formal_power_series.rs.html#10&#34;,&#34;line 10&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/pow_of_formal_power_series.rs (<a href=\"src/library_checker/math/pow_of_formal_power_series.rs.html#10\">line 10</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>pow_of_formal_power_series(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, n, m, a: [MInt998244353; n]);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>f = <span class=\"highlight focus\">Fps998244353::from_vec</span>(a);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span>g = f.pow(m, n);\n<span data-nosnippet>12</span>    <span class=\"macro\">iter_print!</span>(writer, @it g.data);\n<span data-nosnippet>13</span>}</code></pre></div></div><div class=\"example-links\">Additional examples can be found in:<br><ul><li><a href=\"src/library_checker/math/multipoint_evaluation.rs.html#10\">crates/library_checker/src/math/multipoint_evaluation.rs</a></li><li><a href=\"src/library_checker/math/polynomial_taylor_shift.rs.html#13\">crates/library_checker/src/math/polynomial_taylor_shift.rs</a></li><li><a href=\"src/library_checker/math/sqrt_of_formal_power_series.rs.html#10\">crates/library_checker/src/math/sqrt_of_formal_power_series.rs</a></li><li><a href=\"src/library_checker/math/kth_term_of_linearly_recurrent_sequence.rs.html#13\">crates/library_checker/src/math/kth_term_of_linearly_recurrent_sequence.rs</a></li><li><a href=\"src/library_checker/math/sharp_p_subset_sum.rs.html#18\">crates/library_checker/src/math/sharp_p_subset_sum.rs</a></li><li><a href=\"src/competitive/math/determinant_linear.rs.html#18\">crates/competitive/src/math/determinant_linear.rs</a></li></ul></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.length\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#19-21\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.length\" class=\"fn\">length</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#17&#34;,&#34;line 17&#34;],[[12,12],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#28&#34;,&#34;line 28&#34;],[[100,100],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#116&#34;,&#34;line 116&#34;],[[100,100],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#116&#34;,&#34;line 116&#34;],[[101,101],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#117&#34;,&#34;line 117&#34;],[[113,113],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#129&#34;,&#34;line 129&#34;],[[113,113],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#129&#34;,&#34;line 129&#34;],[[114,114],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#130&#34;,&#34;line 130&#34;],[[198,198],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#214&#34;,&#34;line 214&#34;],[[198,198],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#214&#34;,&#34;line 214&#34;],[[203,203],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#219&#34;,&#34;line 219&#34;],[[203,203],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#219&#34;,&#34;line 219&#34;],[[319,319],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#335&#34;,&#34;line 335&#34;],[[322,322],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#338&#34;,&#34;line 338&#34;],[[325,325],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#341&#34;,&#34;line 341&#34;],[[334,334],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#350&#34;,&#34;line 350&#34;],[[371,371],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#387&#34;,&#34;line 387&#34;],[[374,374],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#390&#34;,&#34;line 390&#34;],[[375,375],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#391&#34;,&#34;line 391&#34;],[[388,388],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#404&#34;,&#34;line 404&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_nums.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#17\">line 17</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>16</span>    <span class=\"kw\">fn </span>add_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: T) {\n<span data-nosnippet>17</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.<span class=\"highlight focus\">length</span>() == <span class=\"number\">0 </span>{\n<span data-nosnippet>18</span>            <span class=\"self\">self</span>.data.push(T::zero());\n<span data-nosnippet>19</span>        }\n<span data-nosnippet>20</span>        <span class=\"self\">self</span>.data[<span class=\"number\">0</span>].add_assign(rhs);\n<span data-nosnippet>21</span>    }\n<span data-nosnippet>22</span>}\n<span data-nosnippet>23</span><span class=\"kw\">impl</span>&lt;T, C&gt; SubAssign&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>24</span><span class=\"kw\">where\n<span data-nosnippet>25</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>26</span>{\n<span data-nosnippet>27</span>    <span class=\"kw\">fn </span>sub_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: T) {\n<span data-nosnippet>28</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.<span class=\"highlight\">length</span>() == <span class=\"number\">0 </span>{\n<span data-nosnippet>29</span>            <span class=\"self\">self</span>.data.push(T::zero());\n<span data-nosnippet>30</span>        }\n<span data-nosnippet>31</span>        <span class=\"self\">self</span>.data[<span class=\"number\">0</span>].sub_assign(rhs);\n<span data-nosnippet>32</span>        <span class=\"self\">self</span>.trim_tail_zeros();\n<span data-nosnippet>33</span>    }\n<span data-nosnippet>34</span>}\n<span data-nosnippet>35</span><span class=\"kw\">impl</span>&lt;T, C&gt; MulAssign&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>36</span><span class=\"kw\">where\n<span data-nosnippet>37</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>38</span>{\n<span data-nosnippet>39</span>    <span class=\"kw\">fn </span>mul_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: T) {\n<span data-nosnippet>40</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut() {\n<span data-nosnippet>41</span>            x.mul_assign(<span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>42</span>        }\n<span data-nosnippet>43</span>    }\n<span data-nosnippet>44</span>}\n<span data-nosnippet>45</span><span class=\"kw\">impl</span>&lt;T, C&gt; DivAssign&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>46</span><span class=\"kw\">where\n<span data-nosnippet>47</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>48</span>{\n<span data-nosnippet>49</span>    <span class=\"kw\">fn </span>div_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: T) {\n<span data-nosnippet>50</span>        <span class=\"kw\">let </span>rinv = T::one() / rhs;\n<span data-nosnippet>51</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut() {\n<span data-nosnippet>52</span>            x.mul_assign(<span class=\"kw-2\">&amp;</span>rinv);\n<span data-nosnippet>53</span>        }\n<span data-nosnippet>54</span>    }\n<span data-nosnippet>55</span>}\n<span data-nosnippet>56</span><span class=\"macro\">macro_rules!</span> impl_fps_single_binop {\n<span data-nosnippet>57</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>58</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign</span>&lt;<span class=\"kw-2\">&amp;</span>T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>59</span>        <span class=\"kw\">where\n<span data-nosnippet>60</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>61</span>        {\n<span data-nosnippet>62</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>T) {\n<span data-nosnippet>63</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, rhs.clone());\n<span data-nosnippet>64</span>            }\n<span data-nosnippet>65</span>        }\n<span data-nosnippet>66</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>67</span>        <span class=\"kw\">where\n<span data-nosnippet>68</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>69</span>        {\n<span data-nosnippet>70</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>71</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>72</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs);\n<span data-nosnippet>73</span>                <span class=\"self\">self\n<span data-nosnippet>74</span>            </span>}\n<span data-nosnippet>75</span>        }\n<span data-nosnippet>76</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>77</span>        <span class=\"kw\">where\n<span data-nosnippet>78</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>79</span>        {\n<span data-nosnippet>80</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>81</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>82</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs);\n<span data-nosnippet>83</span>                <span class=\"self\">self\n<span data-nosnippet>84</span>            </span>}\n<span data-nosnippet>85</span>        }\n<span data-nosnippet>86</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;T&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>87</span>        <span class=\"kw\">where\n<span data-nosnippet>88</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>89</span>        {\n<span data-nosnippet>90</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>91</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>92</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs)\n<span data-nosnippet>93</span>            }\n<span data-nosnippet>94</span>        }\n<span data-nosnippet>95</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>T&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>96</span>        <span class=\"kw\">where\n<span data-nosnippet>97</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>98</span>        {\n<span data-nosnippet>99</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>100</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>101</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs)\n<span data-nosnippet>102</span>            }\n<span data-nosnippet>103</span>        }\n<span data-nosnippet>104</span>    };\n<span data-nosnippet>105</span>}\n<span data-nosnippet>106</span><span class=\"macro\">impl_fps_single_binop!</span>(Add, add, AddAssign, add_assign);\n<span data-nosnippet>107</span><span class=\"macro\">impl_fps_single_binop!</span>(Sub, sub, SubAssign, sub_assign);\n<span data-nosnippet>108</span><span class=\"macro\">impl_fps_single_binop!</span>(Mul, mul, MulAssign, mul_assign);\n<span data-nosnippet>109</span><span class=\"macro\">impl_fps_single_binop!</span>(Div, div, DivAssign, div_assign);\n<span data-nosnippet>110</span>\n<span data-nosnippet>111</span><span class=\"kw\">impl</span>&lt;T, C&gt; AddAssign&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>112</span><span class=\"kw\">where\n<span data-nosnippet>113</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>114</span>{\n<span data-nosnippet>115</span>    <span class=\"kw\">fn </span>add_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>116</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.<span class=\"highlight\">length</span>() &lt; rhs.<span class=\"highlight\">length</span>() {\n<span data-nosnippet>117</span>            <span class=\"self\">self</span>.resize(rhs.<span class=\"highlight\">length</span>());\n<span data-nosnippet>118</span>        }\n<span data-nosnippet>119</span>        <span class=\"kw\">for </span>(x, y) <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().zip(rhs.iter()) {\n<span data-nosnippet>120</span>            x.add_assign(y);\n<span data-nosnippet>121</span>        }\n<span data-nosnippet>122</span>    }\n<span data-nosnippet>123</span>}\n<span data-nosnippet>124</span><span class=\"kw\">impl</span>&lt;T, C&gt; SubAssign&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>125</span><span class=\"kw\">where\n<span data-nosnippet>126</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>127</span>{\n<span data-nosnippet>128</span>    <span class=\"kw\">fn </span>sub_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>129</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.<span class=\"highlight\">length</span>() &lt; rhs.<span class=\"highlight\">length</span>() {\n<span data-nosnippet>130</span>            <span class=\"self\">self</span>.resize(rhs.<span class=\"highlight\">length</span>());\n<span data-nosnippet>131</span>        }\n<span data-nosnippet>132</span>        <span class=\"kw\">for </span>(x, y) <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().zip(rhs.iter()) {\n<span data-nosnippet>133</span>            x.sub_assign(y);\n<span data-nosnippet>134</span>        }\n<span data-nosnippet>135</span>        <span class=\"self\">self</span>.trim_tail_zeros();\n<span data-nosnippet>136</span>    }\n<span data-nosnippet>137</span>}\n<span data-nosnippet>138</span>\n<span data-nosnippet>139</span><span class=\"macro\">macro_rules!</span> impl_fps_binop_addsub {\n<span data-nosnippet>140</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>141</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>142</span>        <span class=\"kw\">where\n<span data-nosnippet>143</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>144</span>        {\n<span data-nosnippet>145</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) {\n<span data-nosnippet>146</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>147</span>            }\n<span data-nosnippet>148</span>        }\n<span data-nosnippet>149</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>150</span>        <span class=\"kw\">where\n<span data-nosnippet>151</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>152</span>        {\n<span data-nosnippet>153</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>154</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>155</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>156</span>                <span class=\"self\">self\n<span data-nosnippet>157</span>            </span>}\n<span data-nosnippet>158</span>        }\n<span data-nosnippet>159</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>160</span>        <span class=\"kw\">where\n<span data-nosnippet>161</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>162</span>        {\n<span data-nosnippet>163</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>164</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>165</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs);\n<span data-nosnippet>166</span>                <span class=\"self\">self\n<span data-nosnippet>167</span>            </span>}\n<span data-nosnippet>168</span>        }\n<span data-nosnippet>169</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>170</span>        <span class=\"kw\">where\n<span data-nosnippet>171</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>172</span>        {\n<span data-nosnippet>173</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>174</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>175</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">self</span>.clone();\n<span data-nosnippet>176</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span>self_, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>177</span>                self_\n<span data-nosnippet>178</span>            }\n<span data-nosnippet>179</span>        }\n<span data-nosnippet>180</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>181</span>        <span class=\"kw\">where\n<span data-nosnippet>182</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>183</span>        {\n<span data-nosnippet>184</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>185</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>186</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">self</span>.clone();\n<span data-nosnippet>187</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span>self_, rhs);\n<span data-nosnippet>188</span>                self_\n<span data-nosnippet>189</span>            }\n<span data-nosnippet>190</span>        }\n<span data-nosnippet>191</span>    };\n<span data-nosnippet>192</span>}\n<span data-nosnippet>193</span><span class=\"macro\">impl_fps_binop_addsub!</span>(Add, add, AddAssign, add_assign);\n<span data-nosnippet>194</span><span class=\"macro\">impl_fps_binop_addsub!</span>(Sub, sub, SubAssign, sub_assign);\n<span data-nosnippet>195</span>\n<span data-nosnippet>196</span><span class=\"kw\">impl</span>&lt;T, C&gt; Mul <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>197</span><span class=\"kw\">where\n<span data-nosnippet>198</span>    </span>C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>199</span>{\n<span data-nosnippet>200</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>201</span>    <span class=\"kw\">fn </span>mul(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>202</span>        <span class=\"self\">Self</span>::from_vec(C::convolve(<span class=\"self\">self</span>.data, rhs.data))\n<span data-nosnippet>203</span>    }\n<span data-nosnippet>204</span>}\n<span data-nosnippet>205</span><span class=\"kw\">impl</span>&lt;T, C&gt; Div <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>206</span><span class=\"kw\">where\n<span data-nosnippet>207</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>208</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>209</span>{\n<span data-nosnippet>210</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>211</span>    <span class=\"kw\">fn </span>div(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>212</span>        <span class=\"self\">self</span>.trim_tail_zeros();\n<span data-nosnippet>213</span>        rhs.trim_tail_zeros();\n<span data-nosnippet>214</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.<span class=\"highlight\">length</span>() &lt; rhs.<span class=\"highlight\">length</span>() {\n<span data-nosnippet>215</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::zero();\n<span data-nosnippet>216</span>        }\n<span data-nosnippet>217</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>218</span>        rhs.data.reverse();\n<span data-nosnippet>219</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.<span class=\"highlight\">length</span>() - rhs.<span class=\"highlight\">length</span>() + <span class=\"number\">1</span>;\n<span data-nosnippet>220</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"self\">self </span>* rhs.inv(n);\n<span data-nosnippet>221</span>        res.truncate(n);\n<span data-nosnippet>222</span>        res.data.reverse();\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }\n<span data-nosnippet>225</span>}\n<span data-nosnippet>226</span><span class=\"kw\">impl</span>&lt;T, C&gt; Rem <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>227</span><span class=\"kw\">where\n<span data-nosnippet>228</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>229</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>230</span>{\n<span data-nosnippet>231</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>232</span>    <span class=\"kw\">fn </span>rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>233</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self</span>.clone() - <span class=\"self\">self </span>/ rhs.clone() * rhs;\n<span data-nosnippet>234</span>        rem.trim_tail_zeros();\n<span data-nosnippet>235</span>        rem\n<span data-nosnippet>236</span>    }\n<span data-nosnippet>237</span>}\n<span data-nosnippet>238</span>\n<span data-nosnippet>239</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>240</span><span class=\"kw\">where\n<span data-nosnippet>241</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>242</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>243</span>{\n<span data-nosnippet>244</span>    <span class=\"kw\">pub fn </span>div_rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>) {\n<span data-nosnippet>245</span>        <span class=\"kw\">let </span>div = <span class=\"self\">self</span>.clone() / rhs.clone();\n<span data-nosnippet>246</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self </span>- div.clone() * rhs;\n<span data-nosnippet>247</span>        rem.trim_tail_zeros();\n<span data-nosnippet>248</span>        (div, rem)\n<span data-nosnippet>249</span>    }\n<span data-nosnippet>250</span>}\n<span data-nosnippet>251</span>\n<span data-nosnippet>252</span><span class=\"macro\">macro_rules!</span> impl_fps_binop_conv {\n<span data-nosnippet>253</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>254</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>255</span>        <span class=\"kw\">where\n<span data-nosnippet>256</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>257</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>258</span>        {\n<span data-nosnippet>259</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) {\n<span data-nosnippet>260</span>                <span class=\"kw-2\">*</span><span class=\"self\">self </span>= <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">Self</span>::from_vec(take(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.data)), rhs);\n<span data-nosnippet>261</span>            }\n<span data-nosnippet>262</span>        }\n<span data-nosnippet>263</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>264</span>        <span class=\"kw\">where\n<span data-nosnippet>265</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>266</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>267</span>        {\n<span data-nosnippet>268</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>269</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, rhs.clone());\n<span data-nosnippet>270</span>            }\n<span data-nosnippet>271</span>        }\n<span data-nosnippet>272</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>273</span>        <span class=\"kw\">where\n<span data-nosnippet>274</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>275</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>276</span>        {\n<span data-nosnippet>277</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>278</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>279</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs.clone())\n<span data-nosnippet>280</span>            }\n<span data-nosnippet>281</span>        }\n<span data-nosnippet>282</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>283</span>        <span class=\"kw\">where\n<span data-nosnippet>284</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>285</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>286</span>        {\n<span data-nosnippet>287</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>288</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>289</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs)\n<span data-nosnippet>290</span>            }\n<span data-nosnippet>291</span>        }\n<span data-nosnippet>292</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>293</span>        <span class=\"kw\">where\n<span data-nosnippet>294</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>295</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>296</span>        {\n<span data-nosnippet>297</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>298</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>299</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs.clone())\n<span data-nosnippet>300</span>            }\n<span data-nosnippet>301</span>        }\n<span data-nosnippet>302</span>    };\n<span data-nosnippet>303</span>}\n<span data-nosnippet>304</span><span class=\"macro\">impl_fps_binop_conv!</span>(Mul, mul, MulAssign, mul_assign);\n<span data-nosnippet>305</span><span class=\"macro\">impl_fps_binop_conv!</span>(Div, div, DivAssign, div_assign);\n<span data-nosnippet>306</span><span class=\"macro\">impl_fps_binop_conv!</span>(Rem, rem, RemAssign, rem_assign);\n<span data-nosnippet>307</span>\n<span data-nosnippet>308</span><span class=\"kw\">impl</span>&lt;T, C&gt; Neg <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>309</span><span class=\"kw\">where\n<span data-nosnippet>310</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>311</span>{\n<span data-nosnippet>312</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>313</span>    <span class=\"kw\">fn </span>neg(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>314</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut() {\n<span data-nosnippet>315</span>            <span class=\"kw-2\">*</span>x = -x.clone();\n<span data-nosnippet>316</span>        }\n<span data-nosnippet>317</span>        <span class=\"self\">self\n<span data-nosnippet>318</span>    </span>}\n<span data-nosnippet>319</span>}\n<span data-nosnippet>320</span><span class=\"kw\">impl</span>&lt;T, C&gt; Neg <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>321</span><span class=\"kw\">where\n<span data-nosnippet>322</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>323</span>{\n<span data-nosnippet>324</span>    <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>325</span>    <span class=\"kw\">fn </span>neg(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>326</span>        <span class=\"self\">self</span>.clone().neg()\n<span data-nosnippet>327</span>    }\n<span data-nosnippet>328</span>}\n<span data-nosnippet>329</span>\n<span data-nosnippet>330</span><span class=\"kw\">impl</span>&lt;T, C&gt; ShrAssign&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;<a href=\"algebra/monoid_action.rs.html#83\">T</a>, C&gt;\n<span data-nosnippet>331</span><span class=\"kw\">where\n<span data-nosnippet>332</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>333</span>{\n<span data-nosnippet>334</span>    <span class=\"kw\">fn </span>shr_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: usize) {\n<span data-nosnippet>335</span>        <span class=\"kw\">if </span><a class=\"self\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\">self</a>.<span class=\"highlight\">length</span>() &lt;= rhs {\n<span data-nosnippet>336</span>            <span class=\"kw-2\">*</span><span class=\"self\">self </span>= <span class=\"self\">Self</span>::zero();\n<span data-nosnippet>337</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>338</span>            <span class=\"kw\">for </span>i <span class=\"kw\">in </span>rhs..<span class=\"self\">self</span>.<span class=\"highlight\">length</span>() {\n<span data-nosnippet>339</span>                <span class=\"self\">self</span>[i - rhs] = <span class=\"self\">self</span>[i].clone();\n<span data-nosnippet>340</span>            }\n<span data-nosnippet>341</span>            <span class=\"self\">self</span>.truncate(<span class=\"self\">self</span>.<span class=\"highlight\">length</span>() - rhs);\n<span data-nosnippet>342</span>        }\n<span data-nosnippet>343</span>    }\n<span data-nosnippet>344</span>}\n<span data-nosnippet>345</span><span class=\"kw\">impl</span>&lt;T, C&gt; ShlAssign&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>346</span><span class=\"kw\">where\n<span data-nosnippet>347</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>348</span>{\n<span data-nosnippet>349</span>    <span class=\"kw\">fn </span>shl_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: usize) {\n<span data-nosnippet>350</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.<span class=\"highlight\">length</span>();\n<span data-nosnippet>351</span>        <span class=\"self\">self</span>.resize(n + rhs);\n<span data-nosnippet>352</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).rev() {\n<span data-nosnippet>353</span>            <span class=\"self\">self</span>[i + rhs] = <span class=\"self\">self</span>[i].clone();\n<span data-nosnippet>354</span>        }\n<span data-nosnippet>355</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..rhs {\n<span data-nosnippet>356</span>            <span class=\"self\">self</span>[i] = T::zero();\n<span data-nosnippet>357</span>        }\n<span data-nosnippet>358</span>    }\n<span data-nosnippet>359</span>}\n<span data-nosnippet>360</span>\n<span data-nosnippet>361</span><span class=\"kw\">impl</span>&lt;T, C&gt; Shr&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>362</span><span class=\"kw\">where\n<span data-nosnippet>363</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>364</span>{\n<span data-nosnippet>365</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>366</span>    <span class=\"kw\">fn </span>shr(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: usize) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>367</span>        <span class=\"self\">self</span>.shr_assign(rhs);\n<span data-nosnippet>368</span>        <span class=\"self\">self\n<span data-nosnippet>369</span>    </span>}\n<span data-nosnippet>370</span>}\n<span data-nosnippet>371</span><span class=\"kw\">impl</span>&lt;T, C&gt; Shl&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>372</span><span class=\"kw\">where\n<span data-nosnippet>373</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>374</span>{\n<span data-nosnippet>375</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>376</span>    <span class=\"kw\">fn </span>shl(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: usize) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>377</span>        <span class=\"self\">self</span>.shl_assign(rhs);\n<span data-nosnippet>378</span>        <span class=\"self\">self\n<span data-nosnippet>379</span>    </span>}\n<span data-nosnippet>380</span>}\n<span data-nosnippet>381</span><span class=\"kw\">impl</span>&lt;T, C&gt; Shr&lt;usize&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>382</span><span class=\"kw\">where\n<span data-nosnippet>383</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>384</span>{\n<span data-nosnippet>385</span>    <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>386</span>    <span class=\"kw\">fn </span>shr(<span class=\"self\">self</span>, rhs: usize) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>387</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.<span class=\"highlight\">length</span>() &lt;= rhs {\n<span data-nosnippet>388</span>            <span class=\"self\">Self</span>::Output::zero()\n<span data-nosnippet>389</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>390</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::Output::zeros(<span class=\"self\">self</span>.<span class=\"highlight\">length</span>() - rhs);\n<span data-nosnippet>391</span>            <span class=\"kw\">for </span>i <span class=\"kw\">in </span>rhs..<span class=\"self\">self</span>.<span class=\"highlight\">length</span>() {\n<span data-nosnippet>392</span>                f[i - rhs] = <span class=\"self\">self</span>[i].clone();\n<span data-nosnippet>393</span>            }\n<span data-nosnippet>394</span>            f\n<span data-nosnippet>395</span>        }\n<span data-nosnippet>396</span>    }\n<span data-nosnippet>397</span>}\n<span data-nosnippet>398</span><span class=\"kw\">impl</span>&lt;T, C&gt; Shl&lt;usize&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>399</span><span class=\"kw\">where\n<span data-nosnippet>400</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>401</span>{\n<span data-nosnippet>402</span>    <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>403</span>    <span class=\"kw\">fn </span>shl(<span class=\"self\">self</span>, rhs: usize) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>404</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::Output::zeros(<span class=\"self\">self</span>.<span class=\"highlight\">length</span>() + rhs);\n<span data-nosnippet>405</span>        <span class=\"kw\">for </span>(i, x) <span class=\"kw\">in </span><span class=\"self\">self</span>.iter().cloned().enumerate().rev() {\n<span data-nosnippet>406</span>            f[i + rhs] = x;\n<span data-nosnippet>407</span>        }\n<span data-nosnippet>408</span>        f\n<span data-nosnippet>409</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#76&#34;,&#34;line 76&#34;],[[86,86],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#161&#34;,&#34;line 161&#34;],[[118,118],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#193&#34;,&#34;line 193&#34;],[[124,124],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#199&#34;,&#34;line 199&#34;],[[273,273],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#348&#34;,&#34;line 348&#34;],[[292,292],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#367&#34;,&#34;line 367&#34;],[[320,320],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#395&#34;,&#34;line 395&#34;],[[342,342],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#417&#34;,&#34;line 417&#34;],[[349,349],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#424&#34;,&#34;line 424&#34;],[[349,349],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#424&#34;,&#34;line 424&#34;],[[350,350],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#425&#34;,&#34;line 425&#34;],[[366,366],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#441&#34;,&#34;line 441&#34;],[[371,371],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#446&#34;,&#34;line 446&#34;],[[384,384],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#459&#34;,&#34;line 459&#34;],[[384,384],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#459&#34;,&#34;line 459&#34;],[[391,391],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#466&#34;,&#34;line 466&#34;],[[391,391],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#466&#34;,&#34;line 466&#34;],[[404,404],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#479&#34;,&#34;line 479&#34;],[[404,404],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#479&#34;,&#34;line 479&#34;],[[425,425],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#500&#34;,&#34;line 500&#34;],[[439,439],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#514&#34;,&#34;line 514&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#76\">line 76</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>75</span>    <span class=\"kw\">pub fn </span>trim_tail_zeros(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>76</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>len = <span class=\"self\">self</span>.<span class=\"highlight focus\">length</span>();\n<span data-nosnippet>77</span>        <span class=\"kw\">while </span>len &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>78</span>            <span class=\"kw\">if </span><span class=\"self\">self</span>.data[len - <span class=\"number\">1</span>].is_zero() {\n<span data-nosnippet>79</span>                len -= <span class=\"number\">1</span>;\n<span data-nosnippet>80</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>81</span>                <span class=\"kw\">break</span>;\n<span data-nosnippet>82</span>            }\n<span data-nosnippet>83</span>        }\n<span data-nosnippet>84</span>        <span class=\"self\">self</span>.truncate(len);\n<span data-nosnippet>85</span>    }\n<span data-nosnippet>86</span>}\n<span data-nosnippet>87</span>\n<span data-nosnippet>88</span><span class=\"kw\">impl</span>&lt;T, C&gt; Zero <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>89</span><span class=\"kw\">where\n<span data-nosnippet>90</span>    </span>T: PartialEq,\n<span data-nosnippet>91</span>{\n<span data-nosnippet>92</span>    <span class=\"kw\">fn </span>zero() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>93</span>        <span class=\"self\">Self</span>::from_vec(Vec::new())\n<span data-nosnippet>94</span>    }\n<span data-nosnippet>95</span>}\n<span data-nosnippet>96</span><span class=\"kw\">impl</span>&lt;T, C&gt; One <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>97</span><span class=\"kw\">where\n<span data-nosnippet>98</span>    </span>T: PartialEq + One,\n<span data-nosnippet>99</span>{\n<span data-nosnippet>100</span>    <span class=\"kw\">fn </span>one() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>101</span>        <span class=\"self\">Self</span>::from(T::one())\n<span data-nosnippet>102</span>    }\n<span data-nosnippet>103</span>}\n<span data-nosnippet>104</span>\n<span data-nosnippet>105</span><span class=\"kw\">impl</span>&lt;T, C&gt; IntoIterator <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>106</span>    <span class=\"kw\">type </span>Item = T;\n<span data-nosnippet>107</span>    <span class=\"kw\">type </span>IntoIter = std::vec::IntoIter&lt;T&gt;;\n<span data-nosnippet>108</span>    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n<span data-nosnippet>109</span>        <span class=\"self\">self</span>.data.into_iter()\n<span data-nosnippet>110</span>    }\n<span data-nosnippet>111</span>}\n<span data-nosnippet>112</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T, C&gt; IntoIterator <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>113</span>    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T;\n<span data-nosnippet>114</span>    <span class=\"kw\">type </span>IntoIter = Iter&lt;<span class=\"lifetime\">'a</span>, T&gt;;\n<span data-nosnippet>115</span>    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n<span data-nosnippet>116</span>        <span class=\"self\">self</span>.data.iter()\n<span data-nosnippet>117</span>    }\n<span data-nosnippet>118</span>}\n<span data-nosnippet>119</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T, C&gt; IntoIterator <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>120</span>    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>T;\n<span data-nosnippet>121</span>    <span class=\"kw\">type </span>IntoIter = IterMut&lt;<span class=\"lifetime\">'a</span>, T&gt;;\n<span data-nosnippet>122</span>    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n<span data-nosnippet>123</span>        <a class=\"self\" href=\"/competitive/algebra/struct.Bits.html\">self</a>.data.iter_mut()\n<span data-nosnippet>124</span>    }\n<span data-nosnippet>125</span>}\n<span data-nosnippet>126</span>\n<span data-nosnippet>127</span><span class=\"kw\">impl</span>&lt;T, C&gt; FromIterator&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>128</span>    <span class=\"kw\">fn </span>from_iter&lt;I: IntoIterator&lt;Item = T&gt;&gt;(iter: I) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>129</span>        <span class=\"self\">Self</span>::from_vec(iter.into_iter().collect())\n<span data-nosnippet>130</span>    }\n<span data-nosnippet>131</span>}\n<span data-nosnippet>132</span>\n<span data-nosnippet>133</span><span class=\"kw\">impl</span>&lt;T, C&gt; Index&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>134</span>    <span class=\"kw\">type </span>Output = T;\n<span data-nosnippet>135</span>    <span class=\"kw\">fn </span>index(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, index: usize) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Output {\n<span data-nosnippet>136</span>        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.data[index]\n<span data-nosnippet>137</span>    }\n<span data-nosnippet>138</span>}\n<span data-nosnippet>139</span><span class=\"kw\">impl</span>&lt;T, C&gt; IndexMut&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>140</span>    <span class=\"kw\">fn </span>index_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, index: usize) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>::Output {\n<span data-nosnippet>141</span>        <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.data[index]\n<span data-nosnippet>142</span>    }\n<span data-nosnippet>143</span>}\n<span data-nosnippet>144</span>\n<span data-nosnippet>145</span><span class=\"kw\">impl</span>&lt;T, C&gt; From&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>146</span>    <span class=\"kw\">fn </span>from(x: T) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>147</span>        once(x).collect()\n<span data-nosnippet>148</span>    }\n<span data-nosnippet>149</span>}\n<span data-nosnippet>150</span><span class=\"kw\">impl</span>&lt;T, C&gt; From&lt;Vec&lt;T&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>151</span>    <span class=\"kw\">fn </span>from(data: Vec&lt;T&gt;) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>152</span>        <span class=\"self\">Self</span>::from_vec(data)\n<span data-nosnippet>153</span>    }\n<span data-nosnippet>154</span>}\n<span data-nosnippet>155</span>\n<span data-nosnippet>156</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>157</span><span class=\"kw\">where\n<span data-nosnippet>158</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>159</span>{\n<span data-nosnippet>160</span>    <span class=\"kw\">pub fn </span>prefix_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>161</span>        <span class=\"kw\">if </span>deg &lt; <span class=\"self\">self</span>.<span class=\"highlight\">length</span>() {\n<span data-nosnippet>162</span>            <span class=\"self\">Self</span>::from_vec(<span class=\"self\">self</span>.data[..deg].to_vec())\n<span data-nosnippet>163</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>164</span>            <span class=\"self\">self</span>.clone()\n<span data-nosnippet>165</span>        }\n<span data-nosnippet>166</span>    }\n<span data-nosnippet>167</span>    <span class=\"kw\">pub fn </span>prefix(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>168</span>        <span class=\"self\">self</span>.data.truncate(deg);\n<span data-nosnippet>169</span>        <span class=\"self\">self\n<span data-nosnippet>170</span>    </span>}\n<span data-nosnippet>171</span>    <span class=\"kw\">pub fn </span>even(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>172</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>keep = <span class=\"bool-val\">false</span>;\n<span data-nosnippet>173</span>        <span class=\"self\">self</span>.data.retain(|<span class=\"kw\">_</span>| {\n<span data-nosnippet>174</span>            keep = !keep;\n<span data-nosnippet>175</span>            keep\n<span data-nosnippet>176</span>        });\n<span data-nosnippet>177</span>        <span class=\"self\">self\n<span data-nosnippet>178</span>    </span>}\n<span data-nosnippet>179</span>    <span class=\"kw\">pub fn </span>odd(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>180</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>keep = <span class=\"bool-val\">true</span>;\n<span data-nosnippet>181</span>        <span class=\"self\">self</span>.data.retain(|<span class=\"kw\">_</span>| {\n<span data-nosnippet>182</span>            keep = !keep;\n<span data-nosnippet>183</span>            keep\n<span data-nosnippet>184</span>        });\n<span data-nosnippet>185</span>        <span class=\"self\">self\n<span data-nosnippet>186</span>    </span>}\n<span data-nosnippet>187</span>    <span class=\"kw\">pub fn </span>diff(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>188</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = T::one();\n<span data-nosnippet>189</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>190</span>            <span class=\"kw-2\">*</span>x <span class=\"kw-2\">*</span>= <span class=\"kw-2\">&amp;</span>c;\n<span data-nosnippet>191</span>            c += T::one();\n<span data-nosnippet>192</span>        }\n<span data-nosnippet>193</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.<span class=\"highlight\">length</span>() &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>194</span>            <span class=\"self\">self</span>.data.remove(<span class=\"number\">0</span>);\n<span data-nosnippet>195</span>        }\n<span data-nosnippet>196</span>        <span class=\"self\">self\n<span data-nosnippet>197</span>    </span>}\n<span data-nosnippet>198</span>    <span class=\"kw\">pub fn </span>integral(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>199</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.<span class=\"highlight\">length</span>();\n<span data-nosnippet>200</span>        <span class=\"self\">self</span>.data.insert(<span class=\"number\">0</span>, Zero::zero());\n<span data-nosnippet>201</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fact = Vec::with_capacity(n + <span class=\"number\">1</span>);\n<span data-nosnippet>202</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = T::one();\n<span data-nosnippet>203</span>        fact.push(c.clone());\n<span data-nosnippet>204</span>        <span class=\"kw\">for _ in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>205</span>            fact.push(fact.last().cloned().unwrap() * c.clone());\n<span data-nosnippet>206</span>            c += T::one();\n<span data-nosnippet>207</span>        }\n<span data-nosnippet>208</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>invf = T::one() / (fact.last().cloned().unwrap() * c.clone());\n<span data-nosnippet>209</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().skip(<span class=\"number\">1</span>).rev() {\n<span data-nosnippet>210</span>            <span class=\"kw-2\">*</span>x <span class=\"kw-2\">*</span>= invf.clone() * fact.pop().unwrap();\n<span data-nosnippet>211</span>            invf <span class=\"kw-2\">*</span>= c.clone();\n<span data-nosnippet>212</span>            c -= T::one();\n<span data-nosnippet>213</span>        }\n<span data-nosnippet>214</span>        <span class=\"self\">self\n<span data-nosnippet>215</span>    </span>}\n<span data-nosnippet>216</span>    <span class=\"kw\">pub fn </span>eval(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, x: T) -&gt; T {\n<span data-nosnippet>217</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>base = T::one();\n<span data-nosnippet>218</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = T::zero();\n<span data-nosnippet>219</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.iter() {\n<span data-nosnippet>220</span>            res += base.clone() * a.clone();\n<span data-nosnippet>221</span>            base <span class=\"kw-2\">*</span>= x.clone();\n<span data-nosnippet>222</span>        }\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }\n<span data-nosnippet>225</span>}\n<span data-nosnippet>226</span>\n<span data-nosnippet>227</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>228</span><span class=\"kw\">where\n<span data-nosnippet>229</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>230</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>231</span>{\n<span data-nosnippet>232</span>    <span class=\"kw\">pub fn </span>inv(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>233</span>        <span class=\"macro\">debug_assert!</span>(!<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>234</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(T::one() / <span class=\"self\">self</span>[<span class=\"number\">0</span>].clone());\n<span data-nosnippet>235</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>236</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>237</span>            <span class=\"kw\">let </span>g = <span class=\"self\">self</span>.prefix_ref((i * <span class=\"number\">2</span>).min(deg));\n<span data-nosnippet>238</span>            <span class=\"kw\">let </span>h = f.clone();\n<span data-nosnippet>239</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>240</span>            <span class=\"kw\">let </span>h = C::transform(h.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>241</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>242</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = <span class=\"self\">Self</span>::from_vec(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>243</span>            g &gt;&gt;= i;\n<span data-nosnippet>244</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>245</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>246</span>            <span class=\"kw\">let </span>g = <span class=\"self\">Self</span>::from_vec(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>247</span>            f.data.extend((-g).into_iter().take(i));\n<span data-nosnippet>248</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>249</span>        }\n<span data-nosnippet>250</span>        f.truncate(deg);\n<span data-nosnippet>251</span>        f\n<span data-nosnippet>252</span>    }\n<span data-nosnippet>253</span>    <span class=\"kw\">pub fn </span>exp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>254</span>        <span class=\"macro\">debug_assert!</span>(<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>255</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::one();\n<span data-nosnippet>256</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>257</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>258</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = -f.log(i * <span class=\"number\">2</span>);\n<span data-nosnippet>259</span>            g[<span class=\"number\">0</span>] += T::one();\n<span data-nosnippet>260</span>            <span class=\"kw\">for </span>(g, x) <span class=\"kw\">in </span>g.iter_mut().zip(<span class=\"self\">self</span>.iter().take(i * <span class=\"number\">2</span>)) {\n<span data-nosnippet>261</span>                <span class=\"kw-2\">*</span>g += x.clone();\n<span data-nosnippet>262</span>            }\n<span data-nosnippet>263</span>            f = (f * g).prefix(i * <span class=\"number\">2</span>);\n<span data-nosnippet>264</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>265</span>        }\n<span data-nosnippet>266</span>        f.prefix(deg)\n<span data-nosnippet>267</span>    }\n<span data-nosnippet>268</span>    <span class=\"kw\">pub fn </span>log(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>269</span>        (<span class=\"self\">self</span>.inv(deg) * <span class=\"self\">self</span>.clone().diff()).integral().prefix(deg)\n<span data-nosnippet>270</span>    }\n<span data-nosnippet>271</span>    <span class=\"kw\">pub fn </span>pow(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: usize, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>272</span>        <span class=\"kw\">if </span>rhs == <span class=\"number\">0 </span>{\n<span data-nosnippet>273</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::from_vec(\n<span data-nosnippet>274</span>                once(T::one())\n<span data-nosnippet>275</span>                    .chain(repeat_with(T::zero))\n<span data-nosnippet>276</span>                    .take(deg)\n<span data-nosnippet>277</span>                    .collect(),\n<span data-nosnippet>278</span>            );\n<span data-nosnippet>279</span>        }\n<span data-nosnippet>280</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>281</span>            <span class=\"kw\">if </span>k &gt;= (deg + rhs - <span class=\"number\">1</span>) / rhs {\n<span data-nosnippet>282</span>                <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>283</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>284</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x0 = <span class=\"self\">self</span>[k].clone();\n<span data-nosnippet>285</span>                <span class=\"kw\">let </span>rev = T::one() / x0.clone();\n<span data-nosnippet>286</span>                <span class=\"kw\">let </span>x = {\n<span data-nosnippet>287</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = T::one();\n<span data-nosnippet>288</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = rhs;\n<span data-nosnippet>289</span>                    <span class=\"kw\">while </span>y &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>290</span>                        <span class=\"kw\">if </span>y &amp; <span class=\"number\">1 </span>== <span class=\"number\">1 </span>{\n<span data-nosnippet>291</span>                            x <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>292</span>                        }\n<span data-nosnippet>293</span>                        x0 <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>294</span>                        y &gt;&gt;= <span class=\"number\">1</span>;\n<span data-nosnippet>295</span>                    }\n<span data-nosnippet>296</span>                    x\n<span data-nosnippet>297</span>                };\n<span data-nosnippet>298</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (<span class=\"self\">self</span>.clone() * <span class=\"kw-2\">&amp;</span>rev) &gt;&gt; k;\n<span data-nosnippet>299</span>                f = (f.log(deg) * <span class=\"kw-2\">&amp;</span>T::from(rhs)).exp(deg) * <span class=\"kw-2\">&amp;</span>x;\n<span data-nosnippet>300</span>                f.truncate(deg - k * rhs);\n<span data-nosnippet>301</span>                f &lt;&lt;= k * rhs;\n<span data-nosnippet>302</span>                f\n<span data-nosnippet>303</span>            }\n<span data-nosnippet>304</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>305</span>            <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>306</span>        }\n<span data-nosnippet>307</span>    }\n<span data-nosnippet>308</span>}\n<span data-nosnippet>309</span>\n<span data-nosnippet>310</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>311</span><span class=\"kw\">where\n<span data-nosnippet>312</span>    </span>T: FormalPowerSeriesCoefficientSqrt,\n<span data-nosnippet>313</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>314</span>{\n<span data-nosnippet>315</span>    <span class=\"kw\">pub fn </span>sqrt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>316</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero() {\n<span data-nosnippet>317</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>318</span>                <span class=\"kw\">if </span>k % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>319</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>320</span>                } <span class=\"kw\">else if </span>deg &gt; k / <span class=\"number\">2 </span>{\n<span data-nosnippet>321</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self </span>&gt;&gt; k).sqrt(deg - k / <span class=\"number\">2</span>)<span class=\"question-mark\">? </span>&lt;&lt; (k / <span class=\"number\">2</span>));\n<span data-nosnippet>322</span>                }\n<span data-nosnippet>323</span>            }\n<span data-nosnippet>324</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>325</span>            <span class=\"kw\">let </span>inv2 = T::one() / (T::one() + T::one());\n<span data-nosnippet>326</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(<span class=\"self\">self</span>[<span class=\"number\">0</span>].sqrt_coefficient()<span class=\"question-mark\">?</span>);\n<span data-nosnippet>327</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>328</span>            <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>329</span>                f = (<span class=\"kw-2\">&amp;</span>f + <span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.prefix_ref(i * <span class=\"number\">2</span>) * f.inv(i * <span class=\"number\">2</span>))).prefix(i * <span class=\"number\">2</span>) * <span class=\"kw-2\">&amp;</span>inv2;\n<span data-nosnippet>330</span>                i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>331</span>            }\n<span data-nosnippet>332</span>            f.truncate(deg);\n<span data-nosnippet>333</span>            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(f);\n<span data-nosnippet>334</span>        }\n<span data-nosnippet>335</span>        <span class=\"prelude-val\">Some</span>(<span class=\"self\">Self</span>::zeros(deg))\n<span data-nosnippet>336</span>    }\n<span data-nosnippet>337</span>}\n<span data-nosnippet>338</span>\n<span data-nosnippet>339</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>340</span><span class=\"kw\">where\n<span data-nosnippet>341</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>342</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>343</span>{\n<span data-nosnippet>344</span>    <span class=\"kw\">pub fn </span>count_subset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>345</span>    </span><span class=\"kw\">where\n<span data-nosnippet>346</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>347</span>    {\n<span data-nosnippet>348</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.<span class=\"highlight\">length</span>();\n<span data-nosnippet>349</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>350</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>351</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>352</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>353</span>                    <span class=\"kw\">if </span>j &amp; <span class=\"number\">1 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>354</span>                        f[d] += <span class=\"self\">self</span>[i].<a href=\"mod.rs.html#15\">clone</a>() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>355</span>                    } <span class=\"kw\">else </span>{\n<span data-nosnippet>356</span>                        f[d] -= <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>357</span>                    }\n<span data-nosnippet>358</span>                }\n<span data-nosnippet>359</span>            }\n<span data-nosnippet>360</span>        }\n<span data-nosnippet>361</span>        f.exp(deg)\n<span data-nosnippet>362</span>    }\n<span data-nosnippet>363</span>    <span class=\"kw\">pub fn </span>count_multiset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>364</span>    </span><span class=\"kw\">where\n<span data-nosnippet>365</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>366</span>    {\n<span data-nosnippet>367</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.<span class=\"highlight\">length</span>();\n<span data-nosnippet>368</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>369</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>370</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>371</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>372</span>                    f[d] += <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>373</span>                }\n<span data-nosnippet>374</span>            }\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>        f.exp(deg)\n<span data-nosnippet>377</span>    }\n<span data-nosnippet>378</span>    <span class=\"kw\">pub fn </span>bostan_mori(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>, <span class=\"kw-2\">mut </span>n: usize) -&gt; T {\n<span data-nosnippet>379</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"self\">self</span>;\n<span data-nosnippet>380</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = rhs;\n<span data-nosnippet>381</span>        <span class=\"kw\">while </span>n &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>382</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mq = q.clone();\n<span data-nosnippet>383</span>            mq.iter_mut()\n<span data-nosnippet>384</span>                .skip(<span class=\"number\">1</span>)\n<span data-nosnippet>385</span>                .step_by(<span class=\"number\">2</span>)\n<span data-nosnippet>386</span>                .for_each(|x| <span class=\"kw-2\">*</span>x = -x.clone());\n<span data-nosnippet>387</span>            <span class=\"kw\">let </span>u = p * mq.clone();\n<span data-nosnippet>388</span>            p = <span class=\"kw\">if </span>n % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>{ u.even() } <span class=\"kw\">else </span>{ u.odd() };\n<span data-nosnippet>389</span>            q = (q * mq).even();\n<span data-nosnippet>390</span>            n /= <span class=\"number\">2</span>;\n<span data-nosnippet>391</span>        }\n<span data-nosnippet>392</span>        p[<span class=\"number\">0</span>].clone() / q[<span class=\"number\">0</span>].clone()\n<span data-nosnippet>393</span>    }\n<span data-nosnippet>394</span>    <span class=\"kw\">fn </span>middle_product(<span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>C::F, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>395</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.<span class=\"highlight\">length</span>();\n<span data-nosnippet>396</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = C::transform(<span class=\"self\">self</span>.reversed().data, deg);\n<span data-nosnippet>397</span>        C::multiply(<span class=\"kw-2\">&amp;mut </span>s, other);\n<span data-nosnippet>398</span>        <span class=\"self\">Self</span>::from_vec((C::inverse_transform(s, deg))[n - <span class=\"number\">1</span>..].to_vec())\n<span data-nosnippet>399</span>    }\n<span data-nosnippet>400</span>    <span class=\"kw\">pub fn </span>multipoint_evaluation(<span class=\"self\">self</span>, points: <span class=\"kw-2\">&amp;</span>[T]) -&gt; Vec&lt;T&gt; {\n<span data-nosnippet>401</span>        <span class=\"kw\">let </span>n = points.len();\n<span data-nosnippet>402</span>        <span class=\"kw\">if </span>n &lt;= <span class=\"number\">32 </span>{\n<span data-nosnippet>403</span>            <span class=\"kw\">return </span>points.iter().map(|p| <span class=\"self\">self</span>.eval(p.clone())).collect();\n<span data-nosnippet>404</span>        }\n<span data-nosnippet>405</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>subproduct_tree = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>406</span>        subproduct_tree.resize_with(n, Zero::zero);\n<span data-nosnippet>407</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span>points {\n<span data-nosnippet>408</span>            subproduct_tree.push(<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[-x.clone(), T::one()]));\n<span data-nosnippet>409</span>        }\n<span data-nosnippet>410</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">1</span>..n).rev() {\n<span data-nosnippet>411</span>            subproduct_tree[i] = <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2</span>] * <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2 </span>+ <span class=\"number\">1</span>];\n<span data-nosnippet>412</span>        }\n<span data-nosnippet>413</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uptree_t = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>414</span>        uptree_t.resize_with(<span class=\"number\">1</span>, Zero::zero);\n<span data-nosnippet>415</span>        subproduct_tree.reverse();\n<span data-nosnippet>416</span>        subproduct_tree.pop();\n<span data-nosnippet>417</span>        <span class=\"kw\">let </span>m = <span class=\"self\">self</span>.<span class=\"highlight\">length</span>();\n<span data-nosnippet>418</span>        <span class=\"kw\">let </span>v = subproduct_tree.pop().unwrap().reversed().resized(m);\n<span data-nosnippet>419</span>        <span class=\"kw\">let </span>s = C::transform(<span class=\"self\">self</span>.data, m * <span class=\"number\">2</span>);\n<span data-nosnippet>420</span>        uptree_t.push(v.inv(m).middle_product(<span class=\"kw-2\">&amp;</span>s, m * <span class=\"number\">2</span>).resized(n).reversed());\n<span data-nosnippet>421</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>422</span>            <span class=\"kw\">let </span>subl = subproduct_tree.pop().unwrap();\n<span data-nosnippet>423</span>            <span class=\"kw\">let </span>subr = subproduct_tree.pop().unwrap();\n<span data-nosnippet>424</span>            <span class=\"kw\">let </span>(dl, dr) = (subl.<span class=\"highlight\">length</span>(), subr.<span class=\"highlight\">length</span>());\n<span data-nosnippet>425</span>            <span class=\"kw\">let </span>len = dl.max(dr) + uptree_t[i].<span class=\"highlight\">length</span>();\n<span data-nosnippet>426</span>            <span class=\"kw\">let </span>s = C::transform(uptree_t[i].data.to_vec(), len);\n<span data-nosnippet>427</span>            uptree_t.push(subr.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dl));\n<span data-nosnippet>428</span>            uptree_t.push(subl.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dr));\n<span data-nosnippet>429</span>        }\n<span data-nosnippet>430</span>        uptree_t[n..]\n<span data-nosnippet>431</span>            .iter()\n<span data-nosnippet>432</span>            .map(|u| u.data.first().cloned().unwrap_or_else(Zero::zero))\n<span data-nosnippet>433</span>            .collect()\n<span data-nosnippet>434</span>    }\n<span data-nosnippet>435</span>    <span class=\"kw\">pub fn </span>product_all&lt;I&gt;(iter: I, deg: usize) -&gt; <span class=\"self\">Self\n<span data-nosnippet>436</span>    </span><span class=\"kw\">where\n<span data-nosnippet>437</span>        </span>I: IntoIterator&lt;Item = <span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>438</span>    {\n<span data-nosnippet>439</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>&gt; = iter\n<span data-nosnippet>440</span>            .into_iter()\n<span data-nosnippet>441</span>            .map(|f| PartialIgnoredOrd(Reverse(f.<span class=\"highlight\">length</span>()), f))\n<span data-nosnippet>442</span>            .collect();\n<span data-nosnippet>443</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, x)) = heap.pop() {\n<span data-nosnippet>444</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, y)) = heap.pop() {\n<span data-nosnippet>445</span>                <span class=\"kw\">let </span>z = (x * y).prefix(deg);\n<span data-nosnippet>446</span>                heap.push(PartialIgnoredOrd(Reverse(z.<span class=\"highlight\">length</span>()), z));\n<span data-nosnippet>447</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>448</span>                <span class=\"kw\">return </span>x;\n<span data-nosnippet>449</span>            }\n<span data-nosnippet>450</span>        }\n<span data-nosnippet>451</span>        <span class=\"self\">Self</span>::one()\n<span data-nosnippet>452</span>    }\n<span data-nosnippet>453</span>    <span class=\"kw\">pub fn </span>sum_all_rational&lt;I&gt;(iter: I, deg: usize) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>)\n<span data-nosnippet>454</span>    <span class=\"kw\">where\n<span data-nosnippet>455</span>        </span>I: IntoIterator&lt;Item = (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>)&gt;,\n<span data-nosnippet>456</span>    {\n<span data-nosnippet>457</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>&gt; = iter\n<span data-nosnippet>458</span>            .into_iter()\n<span data-nosnippet>459</span>            .map(|(f, g)| PartialIgnoredOrd(Reverse(f.<span class=\"highlight\">length</span>().max(g.<span class=\"highlight\">length</span>())), (f, g)))\n<span data-nosnippet>460</span>            .collect();\n<span data-nosnippet>461</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, (xa, xb))) = heap.pop() {\n<span data-nosnippet>462</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, (ya, yb))) = heap.pop() {\n<span data-nosnippet>463</span>                <span class=\"kw\">let </span>zb = (<span class=\"kw-2\">&amp;</span>xb * <span class=\"kw-2\">&amp;</span>yb).prefix(deg);\n<span data-nosnippet>464</span>                <span class=\"kw\">let </span>za = (xa * yb + ya * xb).prefix(deg);\n<span data-nosnippet>465</span>                heap.push(PartialIgnoredOrd(\n<span data-nosnippet>466</span>                    Reverse(za.<span class=\"highlight\">length</span>().max(zb.<span class=\"highlight\">length</span>())),\n<span data-nosnippet>467</span>                    (za, zb),\n<span data-nosnippet>468</span>                ));\n<span data-nosnippet>469</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>470</span>                <span class=\"kw\">return </span>(xa, xb);\n<span data-nosnippet>471</span>            }\n<span data-nosnippet>472</span>        }\n<span data-nosnippet>473</span>        (<span class=\"self\">Self</span>::zero(), <span class=\"self\">Self</span>::one())\n<span data-nosnippet>474</span>    }\n<span data-nosnippet>475</span>    <span class=\"kw\">pub fn </span>kth_term_of_linearly_recurrence(<span class=\"self\">self</span>, a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>476</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>477</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>478</span>        }\n<span data-nosnippet>479</span>        <span class=\"kw\">let </span>p = (<span class=\"self\">Self</span>::from_vec(a).prefix(<span class=\"self\">self</span>.<span class=\"highlight\">length</span>() - <span class=\"number\">1</span>) * <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>).prefix(<span class=\"self\">self</span>.<span class=\"highlight\">length</span>() - <span class=\"number\">1</span>);\n<span data-nosnippet>480</span>        p.bostan_mori(<span class=\"self\">self</span>, k)\n<span data-nosnippet>481</span>    }\n<span data-nosnippet>482</span>    <span class=\"kw\">pub fn </span>kth_term(a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>483</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>484</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>485</span>        }\n<span data-nosnippet>486</span>        <span class=\"self\">Self</span>::from_vec(berlekamp_massey(<span class=\"kw-2\">&amp;</span>a)).kth_term_of_linearly_recurrence(a, k)\n<span data-nosnippet>487</span>    }\n<span data-nosnippet>488</span>    <span class=\"doccomment\">/// sum_i a_i exp(b_i x)\n<span data-nosnippet>489</span>    </span><span class=\"kw\">pub fn </span>linear_sum_of_exp&lt;I, F&gt;(iter: I, deg: usize, <span class=\"kw-2\">mut </span>inv_fact: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>490</span>    </span><span class=\"kw\">where\n<span data-nosnippet>491</span>        </span>I: IntoIterator&lt;Item = (T, T)&gt;,\n<span data-nosnippet>492</span>        F: FnMut(usize) -&gt; T,\n<span data-nosnippet>493</span>    {\n<span data-nosnippet>494</span>        <span class=\"kw\">let </span>(p, q) = <span class=\"self\">Self</span>::sum_all_rational(\n<span data-nosnippet>495</span>            iter.into_iter()\n<span data-nosnippet>496</span>                .map(|(a, b)| (<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[a]), <span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[T::one(), -b]))),\n<span data-nosnippet>497</span>            deg,\n<span data-nosnippet>498</span>        );\n<span data-nosnippet>499</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (p * q.inv(deg)).prefix(deg);\n<span data-nosnippet>500</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..f.<span class=\"highlight\">length</span>() {\n<span data-nosnippet>501</span>            f[i] <span class=\"kw-2\">*</span>= inv_fact(i);\n<span data-nosnippet>502</span>        }\n<span data-nosnippet>503</span>        f\n<span data-nosnippet>504</span>    }\n<span data-nosnippet>505</span>}\n<span data-nosnippet>506</span>\n<span data-nosnippet>507</span><span class=\"kw\">impl</span>&lt;M, C&gt; FormalPowerSeries&lt;MInt&lt;M&gt;, C&gt;\n<span data-nosnippet>508</span><span class=\"kw\">where\n<span data-nosnippet>509</span>    </span>M: MIntConvert&lt;usize&gt;,\n<span data-nosnippet>510</span>    C: ConvolveSteps&lt;T = Vec&lt;MInt&lt;M&gt;&gt;&gt;,\n<span data-nosnippet>511</span>{\n<span data-nosnippet>512</span>    <span class=\"doccomment\">/// f(x) &lt;- f(x + a)\n<span data-nosnippet>513</span>    </span><span class=\"kw\">pub fn </span>taylor_shift(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, a: MInt&lt;M&gt;, f: <span class=\"kw-2\">&amp;</span>MemorizedFactorial&lt;M&gt;) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>514</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.<span class=\"highlight\">length</span>();\n<span data-nosnippet>515</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..n {\n<span data-nosnippet>516</span>            <span class=\"self\">self</span>.data[i] <span class=\"kw-2\">*</span>= f.fact[i];\n<span data-nosnippet>517</span>        }\n<span data-nosnippet>518</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>519</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = a;\n<span data-nosnippet>520</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = <span class=\"self\">Self</span>::from_vec(f.inv_fact[..n].to_vec());\n<span data-nosnippet>521</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>522</span>            g[i] <span class=\"kw-2\">*</span>= b;\n<span data-nosnippet>523</span>            b <span class=\"kw-2\">*</span>= a;\n<span data-nosnippet>524</span>        }\n<span data-nosnippet>525</span>        <span class=\"self\">self </span><span class=\"kw-2\">*</span>= g;\n<span data-nosnippet>526</span>        <span class=\"self\">self</span>.truncate(n);\n<span data-nosnippet>527</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>528</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..n {\n<span data-nosnippet>529</span>            <span class=\"self\">self</span>.data[i] <span class=\"kw-2\">*</span>= f.inv_fact[i];\n<span data-nosnippet>530</span>        }\n<span data-nosnippet>531</span>        <span class=\"self\">self\n<span data-nosnippet>532</span>    </span>}</code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#22-24\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[9,9],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#84&#34;,&#34;line 84&#34;],[[175,175],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#250&#34;,&#34;line 250&#34;],[[225,225],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#300&#34;,&#34;line 300&#34;],[[257,257],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#332&#34;,&#34;line 332&#34;],[[451,451],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#526&#34;,&#34;line 526&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#84\">line 84</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>75</span>    <span class=\"kw\">pub fn </span>trim_tail_zeros(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>) {\n<span data-nosnippet>76</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>len = <span class=\"self\">self</span>.length();\n<span data-nosnippet>77</span>        <span class=\"kw\">while </span>len &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>78</span>            <span class=\"kw\">if </span><span class=\"self\">self</span>.data[len - <span class=\"number\">1</span>].is_zero() {\n<span data-nosnippet>79</span>                len -= <span class=\"number\">1</span>;\n<span data-nosnippet>80</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>81</span>                <span class=\"kw\">break</span>;\n<span data-nosnippet>82</span>            }\n<span data-nosnippet>83</span>        }\n<span data-nosnippet>84</span>        <span class=\"self\">self</span>.<span class=\"highlight focus\">truncate</span>(len);\n<span data-nosnippet>85</span>    }\n<span data-nosnippet>86</span>}\n<span data-nosnippet>87</span>\n<span data-nosnippet>88</span><span class=\"kw\">impl</span>&lt;T, C&gt; Zero <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>89</span><span class=\"kw\">where\n<span data-nosnippet>90</span>    </span>T: PartialEq,\n<span data-nosnippet>91</span>{\n<span data-nosnippet>92</span>    <span class=\"kw\">fn </span>zero() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>93</span>        <span class=\"self\">Self</span>::from_vec(Vec::new())\n<span data-nosnippet>94</span>    }\n<span data-nosnippet>95</span>}\n<span data-nosnippet>96</span><span class=\"kw\">impl</span>&lt;T, C&gt; One <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>97</span><span class=\"kw\">where\n<span data-nosnippet>98</span>    </span>T: PartialEq + One,\n<span data-nosnippet>99</span>{\n<span data-nosnippet>100</span>    <span class=\"kw\">fn </span>one() -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>101</span>        <span class=\"self\">Self</span>::from(T::one())\n<span data-nosnippet>102</span>    }\n<span data-nosnippet>103</span>}\n<span data-nosnippet>104</span>\n<span data-nosnippet>105</span><span class=\"kw\">impl</span>&lt;T, C&gt; IntoIterator <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>106</span>    <span class=\"kw\">type </span>Item = T;\n<span data-nosnippet>107</span>    <span class=\"kw\">type </span>IntoIter = std::vec::IntoIter&lt;T&gt;;\n<span data-nosnippet>108</span>    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n<span data-nosnippet>109</span>        <span class=\"self\">self</span>.data.into_iter()\n<span data-nosnippet>110</span>    }\n<span data-nosnippet>111</span>}\n<span data-nosnippet>112</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T, C&gt; IntoIterator <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>113</span>    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>T;\n<span data-nosnippet>114</span>    <span class=\"kw\">type </span>IntoIter = Iter&lt;<span class=\"lifetime\">'a</span>, T&gt;;\n<span data-nosnippet>115</span>    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n<span data-nosnippet>116</span>        <span class=\"self\">self</span>.data.iter()\n<span data-nosnippet>117</span>    }\n<span data-nosnippet>118</span>}\n<span data-nosnippet>119</span><span class=\"kw\">impl</span>&lt;<span class=\"lifetime\">'a</span>, T, C&gt; IntoIterator <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>120</span>    <span class=\"kw\">type </span>Item = <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span><span class=\"kw-2\">mut </span>T;\n<span data-nosnippet>121</span>    <span class=\"kw\">type </span>IntoIter = IterMut&lt;<span class=\"lifetime\">'a</span>, T&gt;;\n<span data-nosnippet>122</span>    <span class=\"kw\">fn </span>into_iter(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::IntoIter {\n<span data-nosnippet>123</span>        <a class=\"self\" href=\"/competitive/algebra/struct.Bits.html\">self</a>.data.iter_mut()\n<span data-nosnippet>124</span>    }\n<span data-nosnippet>125</span>}\n<span data-nosnippet>126</span>\n<span data-nosnippet>127</span><span class=\"kw\">impl</span>&lt;T, C&gt; FromIterator&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>128</span>    <span class=\"kw\">fn </span>from_iter&lt;I: IntoIterator&lt;Item = T&gt;&gt;(iter: I) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>129</span>        <span class=\"self\">Self</span>::from_vec(iter.into_iter().collect())\n<span data-nosnippet>130</span>    }\n<span data-nosnippet>131</span>}\n<span data-nosnippet>132</span>\n<span data-nosnippet>133</span><span class=\"kw\">impl</span>&lt;T, C&gt; Index&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>134</span>    <span class=\"kw\">type </span>Output = T;\n<span data-nosnippet>135</span>    <span class=\"kw\">fn </span>index(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, index: usize) -&gt; <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>::Output {\n<span data-nosnippet>136</span>        <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>.data[index]\n<span data-nosnippet>137</span>    }\n<span data-nosnippet>138</span>}\n<span data-nosnippet>139</span><span class=\"kw\">impl</span>&lt;T, C&gt; IndexMut&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>140</span>    <span class=\"kw\">fn </span>index_mut(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, index: usize) -&gt; <span class=\"kw-2\">&amp;mut </span><span class=\"self\">Self</span>::Output {\n<span data-nosnippet>141</span>        <span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.data[index]\n<span data-nosnippet>142</span>    }\n<span data-nosnippet>143</span>}\n<span data-nosnippet>144</span>\n<span data-nosnippet>145</span><span class=\"kw\">impl</span>&lt;T, C&gt; From&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>146</span>    <span class=\"kw\">fn </span>from(x: T) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>147</span>        once(x).collect()\n<span data-nosnippet>148</span>    }\n<span data-nosnippet>149</span>}\n<span data-nosnippet>150</span><span class=\"kw\">impl</span>&lt;T, C&gt; From&lt;Vec&lt;T&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt; {\n<span data-nosnippet>151</span>    <span class=\"kw\">fn </span>from(data: Vec&lt;T&gt;) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>152</span>        <span class=\"self\">Self</span>::from_vec(data)\n<span data-nosnippet>153</span>    }\n<span data-nosnippet>154</span>}\n<span data-nosnippet>155</span>\n<span data-nosnippet>156</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>157</span><span class=\"kw\">where\n<span data-nosnippet>158</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>159</span>{\n<span data-nosnippet>160</span>    <span class=\"kw\">pub fn </span>prefix_ref(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>161</span>        <span class=\"kw\">if </span>deg &lt; <span class=\"self\">self</span>.length() {\n<span data-nosnippet>162</span>            <span class=\"self\">Self</span>::from_vec(<span class=\"self\">self</span>.data[..deg].to_vec())\n<span data-nosnippet>163</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>164</span>            <span class=\"self\">self</span>.clone()\n<span data-nosnippet>165</span>        }\n<span data-nosnippet>166</span>    }\n<span data-nosnippet>167</span>    <span class=\"kw\">pub fn </span>prefix(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>168</span>        <span class=\"self\">self</span>.data.truncate(deg);\n<span data-nosnippet>169</span>        <span class=\"self\">self\n<span data-nosnippet>170</span>    </span>}\n<span data-nosnippet>171</span>    <span class=\"kw\">pub fn </span>even(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>172</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>keep = <span class=\"bool-val\">false</span>;\n<span data-nosnippet>173</span>        <span class=\"self\">self</span>.data.retain(|<span class=\"kw\">_</span>| {\n<span data-nosnippet>174</span>            keep = !keep;\n<span data-nosnippet>175</span>            keep\n<span data-nosnippet>176</span>        });\n<span data-nosnippet>177</span>        <span class=\"self\">self\n<span data-nosnippet>178</span>    </span>}\n<span data-nosnippet>179</span>    <span class=\"kw\">pub fn </span>odd(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>180</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>keep = <span class=\"bool-val\">true</span>;\n<span data-nosnippet>181</span>        <span class=\"self\">self</span>.data.retain(|<span class=\"kw\">_</span>| {\n<span data-nosnippet>182</span>            keep = !keep;\n<span data-nosnippet>183</span>            keep\n<span data-nosnippet>184</span>        });\n<span data-nosnippet>185</span>        <span class=\"self\">self\n<span data-nosnippet>186</span>    </span>}\n<span data-nosnippet>187</span>    <span class=\"kw\">pub fn </span>diff(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>188</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = T::one();\n<span data-nosnippet>189</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>190</span>            <span class=\"kw-2\">*</span>x <span class=\"kw-2\">*</span>= <span class=\"kw-2\">&amp;</span>c;\n<span data-nosnippet>191</span>            c += T::one();\n<span data-nosnippet>192</span>        }\n<span data-nosnippet>193</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>194</span>            <span class=\"self\">self</span>.data.remove(<span class=\"number\">0</span>);\n<span data-nosnippet>195</span>        }\n<span data-nosnippet>196</span>        <span class=\"self\">self\n<span data-nosnippet>197</span>    </span>}\n<span data-nosnippet>198</span>    <span class=\"kw\">pub fn </span>integral(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>199</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>200</span>        <span class=\"self\">self</span>.data.insert(<span class=\"number\">0</span>, Zero::zero());\n<span data-nosnippet>201</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fact = Vec::with_capacity(n + <span class=\"number\">1</span>);\n<span data-nosnippet>202</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = T::one();\n<span data-nosnippet>203</span>        fact.push(c.clone());\n<span data-nosnippet>204</span>        <span class=\"kw\">for _ in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>205</span>            fact.push(fact.last().cloned().unwrap() * c.clone());\n<span data-nosnippet>206</span>            c += T::one();\n<span data-nosnippet>207</span>        }\n<span data-nosnippet>208</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>invf = T::one() / (fact.last().cloned().unwrap() * c.clone());\n<span data-nosnippet>209</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().skip(<span class=\"number\">1</span>).rev() {\n<span data-nosnippet>210</span>            <span class=\"kw-2\">*</span>x <span class=\"kw-2\">*</span>= invf.clone() * fact.pop().unwrap();\n<span data-nosnippet>211</span>            invf <span class=\"kw-2\">*</span>= c.clone();\n<span data-nosnippet>212</span>            c -= T::one();\n<span data-nosnippet>213</span>        }\n<span data-nosnippet>214</span>        <span class=\"self\">self\n<span data-nosnippet>215</span>    </span>}\n<span data-nosnippet>216</span>    <span class=\"kw\">pub fn </span>eval(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, x: T) -&gt; T {\n<span data-nosnippet>217</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>base = T::one();\n<span data-nosnippet>218</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = T::zero();\n<span data-nosnippet>219</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.iter() {\n<span data-nosnippet>220</span>            res += base.clone() * a.clone();\n<span data-nosnippet>221</span>            base <span class=\"kw-2\">*</span>= x.clone();\n<span data-nosnippet>222</span>        }\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }\n<span data-nosnippet>225</span>}\n<span data-nosnippet>226</span>\n<span data-nosnippet>227</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>228</span><span class=\"kw\">where\n<span data-nosnippet>229</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>230</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>231</span>{\n<span data-nosnippet>232</span>    <span class=\"kw\">pub fn </span>inv(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>233</span>        <span class=\"macro\">debug_assert!</span>(!<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>234</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(T::one() / <span class=\"self\">self</span>[<span class=\"number\">0</span>].clone());\n<span data-nosnippet>235</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>236</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>237</span>            <span class=\"kw\">let </span>g = <span class=\"self\">self</span>.prefix_ref((i * <span class=\"number\">2</span>).min(deg));\n<span data-nosnippet>238</span>            <span class=\"kw\">let </span>h = f.clone();\n<span data-nosnippet>239</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>240</span>            <span class=\"kw\">let </span>h = C::transform(h.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>241</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>242</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = <span class=\"self\">Self</span>::from_vec(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>243</span>            g &gt;&gt;= i;\n<span data-nosnippet>244</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>245</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>246</span>            <span class=\"kw\">let </span>g = <span class=\"self\">Self</span>::from_vec(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>247</span>            f.data.extend((-g).into_iter().take(i));\n<span data-nosnippet>248</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>249</span>        }\n<span data-nosnippet>250</span>        f.<span class=\"highlight\">truncate</span>(deg);\n<span data-nosnippet>251</span>        f\n<span data-nosnippet>252</span>    }\n<span data-nosnippet>253</span>    <span class=\"kw\">pub fn </span>exp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>254</span>        <span class=\"macro\">debug_assert!</span>(<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>255</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::one();\n<span data-nosnippet>256</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>257</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>258</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = -f.log(i * <span class=\"number\">2</span>);\n<span data-nosnippet>259</span>            g[<span class=\"number\">0</span>] += T::one();\n<span data-nosnippet>260</span>            <span class=\"kw\">for </span>(g, x) <span class=\"kw\">in </span>g.iter_mut().zip(<span class=\"self\">self</span>.iter().take(i * <span class=\"number\">2</span>)) {\n<span data-nosnippet>261</span>                <span class=\"kw-2\">*</span>g += x.clone();\n<span data-nosnippet>262</span>            }\n<span data-nosnippet>263</span>            f = (f * g).prefix(i * <span class=\"number\">2</span>);\n<span data-nosnippet>264</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>265</span>        }\n<span data-nosnippet>266</span>        f.prefix(deg)\n<span data-nosnippet>267</span>    }\n<span data-nosnippet>268</span>    <span class=\"kw\">pub fn </span>log(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>269</span>        (<span class=\"self\">self</span>.inv(deg) * <span class=\"self\">self</span>.clone().diff()).integral().prefix(deg)\n<span data-nosnippet>270</span>    }\n<span data-nosnippet>271</span>    <span class=\"kw\">pub fn </span>pow(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: usize, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>272</span>        <span class=\"kw\">if </span>rhs == <span class=\"number\">0 </span>{\n<span data-nosnippet>273</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::from_vec(\n<span data-nosnippet>274</span>                once(T::one())\n<span data-nosnippet>275</span>                    .chain(repeat_with(T::zero))\n<span data-nosnippet>276</span>                    .take(deg)\n<span data-nosnippet>277</span>                    .collect(),\n<span data-nosnippet>278</span>            );\n<span data-nosnippet>279</span>        }\n<span data-nosnippet>280</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>281</span>            <span class=\"kw\">if </span>k &gt;= (deg + rhs - <span class=\"number\">1</span>) / rhs {\n<span data-nosnippet>282</span>                <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>283</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>284</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x0 = <span class=\"self\">self</span>[k].clone();\n<span data-nosnippet>285</span>                <span class=\"kw\">let </span>rev = T::one() / x0.clone();\n<span data-nosnippet>286</span>                <span class=\"kw\">let </span>x = {\n<span data-nosnippet>287</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = T::one();\n<span data-nosnippet>288</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = rhs;\n<span data-nosnippet>289</span>                    <span class=\"kw\">while </span>y &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>290</span>                        <span class=\"kw\">if </span>y &amp; <span class=\"number\">1 </span>== <span class=\"number\">1 </span>{\n<span data-nosnippet>291</span>                            x <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>292</span>                        }\n<span data-nosnippet>293</span>                        x0 <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>294</span>                        y &gt;&gt;= <span class=\"number\">1</span>;\n<span data-nosnippet>295</span>                    }\n<span data-nosnippet>296</span>                    x\n<span data-nosnippet>297</span>                };\n<span data-nosnippet>298</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (<span class=\"self\">self</span>.clone() * <span class=\"kw-2\">&amp;</span>rev) &gt;&gt; k;\n<span data-nosnippet>299</span>                f = (f.log(deg) * <span class=\"kw-2\">&amp;</span>T::from(rhs)).exp(deg) * <span class=\"kw-2\">&amp;</span>x;\n<span data-nosnippet>300</span>                f.<span class=\"highlight\">truncate</span>(deg - k * rhs);\n<span data-nosnippet>301</span>                f &lt;&lt;= k * rhs;\n<span data-nosnippet>302</span>                f\n<span data-nosnippet>303</span>            }\n<span data-nosnippet>304</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>305</span>            <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>306</span>        }\n<span data-nosnippet>307</span>    }\n<span data-nosnippet>308</span>}\n<span data-nosnippet>309</span>\n<span data-nosnippet>310</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>311</span><span class=\"kw\">where\n<span data-nosnippet>312</span>    </span>T: FormalPowerSeriesCoefficientSqrt,\n<span data-nosnippet>313</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>314</span>{\n<span data-nosnippet>315</span>    <span class=\"kw\">pub fn </span>sqrt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>316</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero() {\n<span data-nosnippet>317</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>318</span>                <span class=\"kw\">if </span>k % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>319</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>320</span>                } <span class=\"kw\">else if </span>deg &gt; k / <span class=\"number\">2 </span>{\n<span data-nosnippet>321</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self </span>&gt;&gt; k).sqrt(deg - k / <span class=\"number\">2</span>)<span class=\"question-mark\">? </span>&lt;&lt; (k / <span class=\"number\">2</span>));\n<span data-nosnippet>322</span>                }\n<span data-nosnippet>323</span>            }\n<span data-nosnippet>324</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>325</span>            <span class=\"kw\">let </span>inv2 = T::one() / (T::one() + T::one());\n<span data-nosnippet>326</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(<span class=\"self\">self</span>[<span class=\"number\">0</span>].sqrt_coefficient()<span class=\"question-mark\">?</span>);\n<span data-nosnippet>327</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>328</span>            <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>329</span>                f = (<span class=\"kw-2\">&amp;</span>f + <span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.prefix_ref(i * <span class=\"number\">2</span>) * f.inv(i * <span class=\"number\">2</span>))).prefix(i * <span class=\"number\">2</span>) * <span class=\"kw-2\">&amp;</span>inv2;\n<span data-nosnippet>330</span>                i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>331</span>            }\n<span data-nosnippet>332</span>            f.<span class=\"highlight\">truncate</span>(deg);\n<span data-nosnippet>333</span>            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(f);\n<span data-nosnippet>334</span>        }\n<span data-nosnippet>335</span>        <span class=\"prelude-val\">Some</span>(<span class=\"self\">Self</span>::zeros(deg))\n<span data-nosnippet>336</span>    }\n<span data-nosnippet>337</span>}\n<span data-nosnippet>338</span>\n<span data-nosnippet>339</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>340</span><span class=\"kw\">where\n<span data-nosnippet>341</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>342</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>343</span>{\n<span data-nosnippet>344</span>    <span class=\"kw\">pub fn </span>count_subset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>345</span>    </span><span class=\"kw\">where\n<span data-nosnippet>346</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>347</span>    {\n<span data-nosnippet>348</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>349</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>350</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>351</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>352</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>353</span>                    <span class=\"kw\">if </span>j &amp; <span class=\"number\">1 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>354</span>                        f[d] += <span class=\"self\">self</span>[i].<a href=\"mod.rs.html#15\">clone</a>() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>355</span>                    } <span class=\"kw\">else </span>{\n<span data-nosnippet>356</span>                        f[d] -= <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>357</span>                    }\n<span data-nosnippet>358</span>                }\n<span data-nosnippet>359</span>            }\n<span data-nosnippet>360</span>        }\n<span data-nosnippet>361</span>        f.exp(deg)\n<span data-nosnippet>362</span>    }\n<span data-nosnippet>363</span>    <span class=\"kw\">pub fn </span>count_multiset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>364</span>    </span><span class=\"kw\">where\n<span data-nosnippet>365</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>366</span>    {\n<span data-nosnippet>367</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>368</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>369</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>370</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>371</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>372</span>                    f[d] += <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>373</span>                }\n<span data-nosnippet>374</span>            }\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>        f.exp(deg)\n<span data-nosnippet>377</span>    }\n<span data-nosnippet>378</span>    <span class=\"kw\">pub fn </span>bostan_mori(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>, <span class=\"kw-2\">mut </span>n: usize) -&gt; T {\n<span data-nosnippet>379</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"self\">self</span>;\n<span data-nosnippet>380</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = rhs;\n<span data-nosnippet>381</span>        <span class=\"kw\">while </span>n &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>382</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mq = q.clone();\n<span data-nosnippet>383</span>            mq.iter_mut()\n<span data-nosnippet>384</span>                .skip(<span class=\"number\">1</span>)\n<span data-nosnippet>385</span>                .step_by(<span class=\"number\">2</span>)\n<span data-nosnippet>386</span>                .for_each(|x| <span class=\"kw-2\">*</span>x = -x.clone());\n<span data-nosnippet>387</span>            <span class=\"kw\">let </span>u = p * mq.clone();\n<span data-nosnippet>388</span>            p = <span class=\"kw\">if </span>n % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>{ u.even() } <span class=\"kw\">else </span>{ u.odd() };\n<span data-nosnippet>389</span>            q = (q * mq).even();\n<span data-nosnippet>390</span>            n /= <span class=\"number\">2</span>;\n<span data-nosnippet>391</span>        }\n<span data-nosnippet>392</span>        p[<span class=\"number\">0</span>].clone() / q[<span class=\"number\">0</span>].clone()\n<span data-nosnippet>393</span>    }\n<span data-nosnippet>394</span>    <span class=\"kw\">fn </span>middle_product(<span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>C::F, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>395</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>396</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = C::transform(<span class=\"self\">self</span>.reversed().data, deg);\n<span data-nosnippet>397</span>        C::multiply(<span class=\"kw-2\">&amp;mut </span>s, other);\n<span data-nosnippet>398</span>        <span class=\"self\">Self</span>::from_vec((C::inverse_transform(s, deg))[n - <span class=\"number\">1</span>..].to_vec())\n<span data-nosnippet>399</span>    }\n<span data-nosnippet>400</span>    <span class=\"kw\">pub fn </span>multipoint_evaluation(<span class=\"self\">self</span>, points: <span class=\"kw-2\">&amp;</span>[T]) -&gt; Vec&lt;T&gt; {\n<span data-nosnippet>401</span>        <span class=\"kw\">let </span>n = points.len();\n<span data-nosnippet>402</span>        <span class=\"kw\">if </span>n &lt;= <span class=\"number\">32 </span>{\n<span data-nosnippet>403</span>            <span class=\"kw\">return </span>points.iter().map(|p| <span class=\"self\">self</span>.eval(p.clone())).collect();\n<span data-nosnippet>404</span>        }\n<span data-nosnippet>405</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>subproduct_tree = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>406</span>        subproduct_tree.resize_with(n, Zero::zero);\n<span data-nosnippet>407</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span>points {\n<span data-nosnippet>408</span>            subproduct_tree.push(<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[-x.clone(), T::one()]));\n<span data-nosnippet>409</span>        }\n<span data-nosnippet>410</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">1</span>..n).rev() {\n<span data-nosnippet>411</span>            subproduct_tree[i] = <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2</span>] * <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2 </span>+ <span class=\"number\">1</span>];\n<span data-nosnippet>412</span>        }\n<span data-nosnippet>413</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uptree_t = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>414</span>        uptree_t.resize_with(<span class=\"number\">1</span>, Zero::zero);\n<span data-nosnippet>415</span>        subproduct_tree.reverse();\n<span data-nosnippet>416</span>        subproduct_tree.pop();\n<span data-nosnippet>417</span>        <span class=\"kw\">let </span>m = <span class=\"self\">self</span>.length();\n<span data-nosnippet>418</span>        <span class=\"kw\">let </span>v = subproduct_tree.pop().unwrap().reversed().resized(m);\n<span data-nosnippet>419</span>        <span class=\"kw\">let </span>s = C::transform(<span class=\"self\">self</span>.data, m * <span class=\"number\">2</span>);\n<span data-nosnippet>420</span>        uptree_t.push(v.inv(m).middle_product(<span class=\"kw-2\">&amp;</span>s, m * <span class=\"number\">2</span>).resized(n).reversed());\n<span data-nosnippet>421</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>422</span>            <span class=\"kw\">let </span>subl = subproduct_tree.pop().unwrap();\n<span data-nosnippet>423</span>            <span class=\"kw\">let </span>subr = subproduct_tree.pop().unwrap();\n<span data-nosnippet>424</span>            <span class=\"kw\">let </span>(dl, dr) = (subl.length(), subr.length());\n<span data-nosnippet>425</span>            <span class=\"kw\">let </span>len = dl.max(dr) + uptree_t[i].length();\n<span data-nosnippet>426</span>            <span class=\"kw\">let </span>s = C::transform(uptree_t[i].data.to_vec(), len);\n<span data-nosnippet>427</span>            uptree_t.push(subr.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dl));\n<span data-nosnippet>428</span>            uptree_t.push(subl.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dr));\n<span data-nosnippet>429</span>        }\n<span data-nosnippet>430</span>        uptree_t[n..]\n<span data-nosnippet>431</span>            .iter()\n<span data-nosnippet>432</span>            .map(|u| u.data.first().cloned().unwrap_or_else(Zero::zero))\n<span data-nosnippet>433</span>            .collect()\n<span data-nosnippet>434</span>    }\n<span data-nosnippet>435</span>    <span class=\"kw\">pub fn </span>product_all&lt;I&gt;(iter: I, deg: usize) -&gt; <span class=\"self\">Self\n<span data-nosnippet>436</span>    </span><span class=\"kw\">where\n<span data-nosnippet>437</span>        </span>I: IntoIterator&lt;Item = <span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>438</span>    {\n<span data-nosnippet>439</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>&gt; = iter\n<span data-nosnippet>440</span>            .into_iter()\n<span data-nosnippet>441</span>            .map(|f| PartialIgnoredOrd(Reverse(f.length()), f))\n<span data-nosnippet>442</span>            .collect();\n<span data-nosnippet>443</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, x)) = heap.pop() {\n<span data-nosnippet>444</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, y)) = heap.pop() {\n<span data-nosnippet>445</span>                <span class=\"kw\">let </span>z = (x * y).prefix(deg);\n<span data-nosnippet>446</span>                heap.push(PartialIgnoredOrd(Reverse(z.length()), z));\n<span data-nosnippet>447</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>448</span>                <span class=\"kw\">return </span>x;\n<span data-nosnippet>449</span>            }\n<span data-nosnippet>450</span>        }\n<span data-nosnippet>451</span>        <span class=\"self\">Self</span>::one()\n<span data-nosnippet>452</span>    }\n<span data-nosnippet>453</span>    <span class=\"kw\">pub fn </span>sum_all_rational&lt;I&gt;(iter: I, deg: usize) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>)\n<span data-nosnippet>454</span>    <span class=\"kw\">where\n<span data-nosnippet>455</span>        </span>I: IntoIterator&lt;Item = (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>)&gt;,\n<span data-nosnippet>456</span>    {\n<span data-nosnippet>457</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>&gt; = iter\n<span data-nosnippet>458</span>            .into_iter()\n<span data-nosnippet>459</span>            .map(|(f, g)| PartialIgnoredOrd(Reverse(f.length().max(g.length())), (f, g)))\n<span data-nosnippet>460</span>            .collect();\n<span data-nosnippet>461</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, (xa, xb))) = heap.pop() {\n<span data-nosnippet>462</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, (ya, yb))) = heap.pop() {\n<span data-nosnippet>463</span>                <span class=\"kw\">let </span>zb = (<span class=\"kw-2\">&amp;</span>xb * <span class=\"kw-2\">&amp;</span>yb).prefix(deg);\n<span data-nosnippet>464</span>                <span class=\"kw\">let </span>za = (xa * yb + ya * xb).prefix(deg);\n<span data-nosnippet>465</span>                heap.push(PartialIgnoredOrd(\n<span data-nosnippet>466</span>                    Reverse(za.length().max(zb.length())),\n<span data-nosnippet>467</span>                    (za, zb),\n<span data-nosnippet>468</span>                ));\n<span data-nosnippet>469</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>470</span>                <span class=\"kw\">return </span>(xa, xb);\n<span data-nosnippet>471</span>            }\n<span data-nosnippet>472</span>        }\n<span data-nosnippet>473</span>        (<span class=\"self\">Self</span>::zero(), <span class=\"self\">Self</span>::one())\n<span data-nosnippet>474</span>    }\n<span data-nosnippet>475</span>    <span class=\"kw\">pub fn </span>kth_term_of_linearly_recurrence(<span class=\"self\">self</span>, a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>476</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>477</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>478</span>        }\n<span data-nosnippet>479</span>        <span class=\"kw\">let </span>p = (<span class=\"self\">Self</span>::from_vec(a).prefix(<span class=\"self\">self</span>.length() - <span class=\"number\">1</span>) * <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>).prefix(<span class=\"self\">self</span>.length() - <span class=\"number\">1</span>);\n<span data-nosnippet>480</span>        p.bostan_mori(<span class=\"self\">self</span>, k)\n<span data-nosnippet>481</span>    }\n<span data-nosnippet>482</span>    <span class=\"kw\">pub fn </span>kth_term(a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>483</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>484</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>485</span>        }\n<span data-nosnippet>486</span>        <span class=\"self\">Self</span>::from_vec(berlekamp_massey(<span class=\"kw-2\">&amp;</span>a)).kth_term_of_linearly_recurrence(a, k)\n<span data-nosnippet>487</span>    }\n<span data-nosnippet>488</span>    <span class=\"doccomment\">/// sum_i a_i exp(b_i x)\n<span data-nosnippet>489</span>    </span><span class=\"kw\">pub fn </span>linear_sum_of_exp&lt;I, F&gt;(iter: I, deg: usize, <span class=\"kw-2\">mut </span>inv_fact: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>490</span>    </span><span class=\"kw\">where\n<span data-nosnippet>491</span>        </span>I: IntoIterator&lt;Item = (T, T)&gt;,\n<span data-nosnippet>492</span>        F: FnMut(usize) -&gt; T,\n<span data-nosnippet>493</span>    {\n<span data-nosnippet>494</span>        <span class=\"kw\">let </span>(p, q) = <span class=\"self\">Self</span>::sum_all_rational(\n<span data-nosnippet>495</span>            iter.into_iter()\n<span data-nosnippet>496</span>                .map(|(a, b)| (<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[a]), <span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[T::one(), -b]))),\n<span data-nosnippet>497</span>            deg,\n<span data-nosnippet>498</span>        );\n<span data-nosnippet>499</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (p * q.inv(deg)).prefix(deg);\n<span data-nosnippet>500</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..f.length() {\n<span data-nosnippet>501</span>            f[i] <span class=\"kw-2\">*</span>= inv_fact(i);\n<span data-nosnippet>502</span>        }\n<span data-nosnippet>503</span>        f\n<span data-nosnippet>504</span>    }\n<span data-nosnippet>505</span>}\n<span data-nosnippet>506</span>\n<span data-nosnippet>507</span><span class=\"kw\">impl</span>&lt;M, C&gt; FormalPowerSeries&lt;MInt&lt;M&gt;, C&gt;\n<span data-nosnippet>508</span><span class=\"kw\">where\n<span data-nosnippet>509</span>    </span>M: MIntConvert&lt;usize&gt;,\n<span data-nosnippet>510</span>    C: ConvolveSteps&lt;T = Vec&lt;MInt&lt;M&gt;&gt;&gt;,\n<span data-nosnippet>511</span>{\n<span data-nosnippet>512</span>    <span class=\"doccomment\">/// f(x) &lt;- f(x + a)\n<span data-nosnippet>513</span>    </span><span class=\"kw\">pub fn </span>taylor_shift(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, a: MInt&lt;M&gt;, f: <span class=\"kw-2\">&amp;</span>MemorizedFactorial&lt;M&gt;) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>514</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>515</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..n {\n<span data-nosnippet>516</span>            <span class=\"self\">self</span>.data[i] <span class=\"kw-2\">*</span>= f.fact[i];\n<span data-nosnippet>517</span>        }\n<span data-nosnippet>518</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>519</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>b = a;\n<span data-nosnippet>520</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = <span class=\"self\">Self</span>::from_vec(f.inv_fact[..n].to_vec());\n<span data-nosnippet>521</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>522</span>            g[i] <span class=\"kw-2\">*</span>= b;\n<span data-nosnippet>523</span>            b <span class=\"kw-2\">*</span>= a;\n<span data-nosnippet>524</span>        }\n<span data-nosnippet>525</span>        <span class=\"self\">self </span><span class=\"kw-2\">*</span>= g;\n<span data-nosnippet>526</span>        <span class=\"self\">self</span>.<span class=\"highlight\">truncate</span>(n);\n<span data-nosnippet>527</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>528</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..n {\n<span data-nosnippet>529</span>            <span class=\"self\">self</span>.data[i] <span class=\"kw-2\">*</span>= f.inv_fact[i];\n<span data-nosnippet>530</span>        }\n<span data-nosnippet>531</span>        <span class=\"self\">self\n<span data-nosnippet>532</span>    </span>}</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[10,10],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#221&#34;,&#34;line 221&#34;],[[130,130],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#341&#34;,&#34;line 341&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_nums.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#221\">line 221</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>211</span>    <span class=\"kw\">fn </span>div(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>212</span>        <span class=\"self\">self</span>.trim_tail_zeros();\n<span data-nosnippet>213</span>        rhs.trim_tail_zeros();\n<span data-nosnippet>214</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>215</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::zero();\n<span data-nosnippet>216</span>        }\n<span data-nosnippet>217</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>218</span>        rhs.data.reverse();\n<span data-nosnippet>219</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length() - rhs.length() + <span class=\"number\">1</span>;\n<span data-nosnippet>220</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"self\">self </span>* rhs.inv(n);\n<span data-nosnippet>221</span>        res.<span class=\"highlight focus\">truncate</span>(n);\n<span data-nosnippet>222</span>        res.data.reverse();\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }\n<span data-nosnippet>225</span>}\n<span data-nosnippet>226</span><span class=\"kw\">impl</span>&lt;T, C&gt; Rem <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>227</span><span class=\"kw\">where\n<span data-nosnippet>228</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>229</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>230</span>{\n<span data-nosnippet>231</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>232</span>    <span class=\"kw\">fn </span>rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>233</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self</span>.clone() - <span class=\"self\">self </span>/ rhs.clone() * rhs;\n<span data-nosnippet>234</span>        rem.trim_tail_zeros();\n<span data-nosnippet>235</span>        rem\n<span data-nosnippet>236</span>    }\n<span data-nosnippet>237</span>}\n<span data-nosnippet>238</span>\n<span data-nosnippet>239</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>240</span><span class=\"kw\">where\n<span data-nosnippet>241</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>242</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>243</span>{\n<span data-nosnippet>244</span>    <span class=\"kw\">pub fn </span>div_rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>) {\n<span data-nosnippet>245</span>        <span class=\"kw\">let </span>div = <span class=\"self\">self</span>.clone() / rhs.clone();\n<span data-nosnippet>246</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self </span>- div.clone() * rhs;\n<span data-nosnippet>247</span>        rem.trim_tail_zeros();\n<span data-nosnippet>248</span>        (div, rem)\n<span data-nosnippet>249</span>    }\n<span data-nosnippet>250</span>}\n<span data-nosnippet>251</span>\n<span data-nosnippet>252</span><span class=\"macro\">macro_rules!</span> impl_fps_binop_conv {\n<span data-nosnippet>253</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>254</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>255</span>        <span class=\"kw\">where\n<span data-nosnippet>256</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>257</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>258</span>        {\n<span data-nosnippet>259</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) {\n<span data-nosnippet>260</span>                <span class=\"kw-2\">*</span><span class=\"self\">self </span>= <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">Self</span>::from_vec(take(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.data)), rhs);\n<span data-nosnippet>261</span>            }\n<span data-nosnippet>262</span>        }\n<span data-nosnippet>263</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>264</span>        <span class=\"kw\">where\n<span data-nosnippet>265</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>266</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>267</span>        {\n<span data-nosnippet>268</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>269</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, rhs.clone());\n<span data-nosnippet>270</span>            }\n<span data-nosnippet>271</span>        }\n<span data-nosnippet>272</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>273</span>        <span class=\"kw\">where\n<span data-nosnippet>274</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>275</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>276</span>        {\n<span data-nosnippet>277</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>278</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>279</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs.clone())\n<span data-nosnippet>280</span>            }\n<span data-nosnippet>281</span>        }\n<span data-nosnippet>282</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>283</span>        <span class=\"kw\">where\n<span data-nosnippet>284</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>285</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>286</span>        {\n<span data-nosnippet>287</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>288</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>289</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs)\n<span data-nosnippet>290</span>            }\n<span data-nosnippet>291</span>        }\n<span data-nosnippet>292</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>293</span>        <span class=\"kw\">where\n<span data-nosnippet>294</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>295</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>296</span>        {\n<span data-nosnippet>297</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>298</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>299</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs.clone())\n<span data-nosnippet>300</span>            }\n<span data-nosnippet>301</span>        }\n<span data-nosnippet>302</span>    };\n<span data-nosnippet>303</span>}\n<span data-nosnippet>304</span><span class=\"macro\">impl_fps_binop_conv!</span>(Mul, mul, MulAssign, mul_assign);\n<span data-nosnippet>305</span><span class=\"macro\">impl_fps_binop_conv!</span>(Div, div, DivAssign, div_assign);\n<span data-nosnippet>306</span><span class=\"macro\">impl_fps_binop_conv!</span>(Rem, rem, RemAssign, rem_assign);\n<span data-nosnippet>307</span>\n<span data-nosnippet>308</span><span class=\"kw\">impl</span>&lt;T, C&gt; Neg <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>309</span><span class=\"kw\">where\n<span data-nosnippet>310</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>311</span>{\n<span data-nosnippet>312</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>313</span>    <span class=\"kw\">fn </span>neg(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>314</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut() {\n<span data-nosnippet>315</span>            <span class=\"kw-2\">*</span>x = -x.clone();\n<span data-nosnippet>316</span>        }\n<span data-nosnippet>317</span>        <span class=\"self\">self\n<span data-nosnippet>318</span>    </span>}\n<span data-nosnippet>319</span>}\n<span data-nosnippet>320</span><span class=\"kw\">impl</span>&lt;T, C&gt; Neg <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>321</span><span class=\"kw\">where\n<span data-nosnippet>322</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>323</span>{\n<span data-nosnippet>324</span>    <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>325</span>    <span class=\"kw\">fn </span>neg(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>326</span>        <span class=\"self\">self</span>.clone().neg()\n<span data-nosnippet>327</span>    }\n<span data-nosnippet>328</span>}\n<span data-nosnippet>329</span>\n<span data-nosnippet>330</span><span class=\"kw\">impl</span>&lt;T, C&gt; ShrAssign&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;<a href=\"monoid_action.rs.html#83\">T</a>, C&gt;\n<span data-nosnippet>331</span><span class=\"kw\">where\n<span data-nosnippet>332</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>333</span>{\n<span data-nosnippet>334</span>    <span class=\"kw\">fn </span>shr_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: usize) {\n<span data-nosnippet>335</span>        <span class=\"kw\">if </span><a class=\"self\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\">self</a>.length() &lt;= rhs {\n<span data-nosnippet>336</span>            <span class=\"kw-2\">*</span><span class=\"self\">self </span>= <span class=\"self\">Self</span>::zero();\n<span data-nosnippet>337</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>338</span>            <span class=\"kw\">for </span>i <span class=\"kw\">in </span>rhs..<span class=\"self\">self</span>.length() {\n<span data-nosnippet>339</span>                <span class=\"self\">self</span>[i - rhs] = <span class=\"self\">self</span>[i].clone();\n<span data-nosnippet>340</span>            }\n<span data-nosnippet>341</span>            <span class=\"self\">self</span>.<span class=\"highlight\">truncate</span>(<span class=\"self\">self</span>.length() - rhs);\n<span data-nosnippet>342</span>        }\n<span data-nosnippet>343</span>    }</code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#25-27\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/slice/iter/struct.Iter.html\" title=\"struct core::slice::iter::Iter\">Iter</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-3\"><a href=\"#scraped-examples-3\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[4,4],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#119&#34;,&#34;line 119&#34;],[[17,17],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#132&#34;,&#34;line 132&#34;],[[290,290],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#405&#34;,&#34;line 405&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_nums.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#119\">line 119</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>115</span>    <span class=\"kw\">fn </span>add_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>116</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>117</span>            <span class=\"self\">self</span>.resize(rhs.length());\n<span data-nosnippet>118</span>        }\n<span data-nosnippet>119</span>        <span class=\"kw\">for </span>(x, y) <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().zip(rhs.<span class=\"highlight focus\">iter</span>()) {\n<span data-nosnippet>120</span>            x.add_assign(y);\n<span data-nosnippet>121</span>        }\n<span data-nosnippet>122</span>    }\n<span data-nosnippet>123</span>}\n<span data-nosnippet>124</span><span class=\"kw\">impl</span>&lt;T, C&gt; SubAssign&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>125</span><span class=\"kw\">where\n<span data-nosnippet>126</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>127</span>{\n<span data-nosnippet>128</span>    <span class=\"kw\">fn </span>sub_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>129</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>130</span>            <span class=\"self\">self</span>.resize(rhs.length());\n<span data-nosnippet>131</span>        }\n<span data-nosnippet>132</span>        <span class=\"kw\">for </span>(x, y) <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().zip(rhs.<span class=\"highlight\">iter</span>()) {\n<span data-nosnippet>133</span>            x.sub_assign(y);\n<span data-nosnippet>134</span>        }\n<span data-nosnippet>135</span>        <span class=\"self\">self</span>.trim_tail_zeros();\n<span data-nosnippet>136</span>    }\n<span data-nosnippet>137</span>}\n<span data-nosnippet>138</span>\n<span data-nosnippet>139</span><span class=\"macro\">macro_rules!</span> impl_fps_binop_addsub {\n<span data-nosnippet>140</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>141</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>142</span>        <span class=\"kw\">where\n<span data-nosnippet>143</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>144</span>        {\n<span data-nosnippet>145</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) {\n<span data-nosnippet>146</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>147</span>            }\n<span data-nosnippet>148</span>        }\n<span data-nosnippet>149</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>150</span>        <span class=\"kw\">where\n<span data-nosnippet>151</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>152</span>        {\n<span data-nosnippet>153</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>154</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>155</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>156</span>                <span class=\"self\">self\n<span data-nosnippet>157</span>            </span>}\n<span data-nosnippet>158</span>        }\n<span data-nosnippet>159</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>160</span>        <span class=\"kw\">where\n<span data-nosnippet>161</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>162</span>        {\n<span data-nosnippet>163</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>164</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>165</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs);\n<span data-nosnippet>166</span>                <span class=\"self\">self\n<span data-nosnippet>167</span>            </span>}\n<span data-nosnippet>168</span>        }\n<span data-nosnippet>169</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>170</span>        <span class=\"kw\">where\n<span data-nosnippet>171</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>172</span>        {\n<span data-nosnippet>173</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>174</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>175</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">self</span>.clone();\n<span data-nosnippet>176</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span>self_, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>177</span>                self_\n<span data-nosnippet>178</span>            }\n<span data-nosnippet>179</span>        }\n<span data-nosnippet>180</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>181</span>        <span class=\"kw\">where\n<span data-nosnippet>182</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>183</span>        {\n<span data-nosnippet>184</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>185</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>186</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">self</span>.clone();\n<span data-nosnippet>187</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span>self_, rhs);\n<span data-nosnippet>188</span>                self_\n<span data-nosnippet>189</span>            }\n<span data-nosnippet>190</span>        }\n<span data-nosnippet>191</span>    };\n<span data-nosnippet>192</span>}\n<span data-nosnippet>193</span><span class=\"macro\">impl_fps_binop_addsub!</span>(Add, add, AddAssign, add_assign);\n<span data-nosnippet>194</span><span class=\"macro\">impl_fps_binop_addsub!</span>(Sub, sub, SubAssign, sub_assign);\n<span data-nosnippet>195</span>\n<span data-nosnippet>196</span><span class=\"kw\">impl</span>&lt;T, C&gt; Mul <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>197</span><span class=\"kw\">where\n<span data-nosnippet>198</span>    </span>C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>199</span>{\n<span data-nosnippet>200</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>201</span>    <span class=\"kw\">fn </span>mul(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>202</span>        <span class=\"self\">Self</span>::from_vec(C::convolve(<span class=\"self\">self</span>.data, rhs.data))\n<span data-nosnippet>203</span>    }\n<span data-nosnippet>204</span>}\n<span data-nosnippet>205</span><span class=\"kw\">impl</span>&lt;T, C&gt; Div <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>206</span><span class=\"kw\">where\n<span data-nosnippet>207</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>208</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>209</span>{\n<span data-nosnippet>210</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>211</span>    <span class=\"kw\">fn </span>div(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>212</span>        <span class=\"self\">self</span>.trim_tail_zeros();\n<span data-nosnippet>213</span>        rhs.trim_tail_zeros();\n<span data-nosnippet>214</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>215</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::zero();\n<span data-nosnippet>216</span>        }\n<span data-nosnippet>217</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>218</span>        rhs.data.reverse();\n<span data-nosnippet>219</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length() - rhs.length() + <span class=\"number\">1</span>;\n<span data-nosnippet>220</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"self\">self </span>* rhs.inv(n);\n<span data-nosnippet>221</span>        res.truncate(n);\n<span data-nosnippet>222</span>        res.data.reverse();\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }\n<span data-nosnippet>225</span>}\n<span data-nosnippet>226</span><span class=\"kw\">impl</span>&lt;T, C&gt; Rem <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>227</span><span class=\"kw\">where\n<span data-nosnippet>228</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>229</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>230</span>{\n<span data-nosnippet>231</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>232</span>    <span class=\"kw\">fn </span>rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>233</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self</span>.clone() - <span class=\"self\">self </span>/ rhs.clone() * rhs;\n<span data-nosnippet>234</span>        rem.trim_tail_zeros();\n<span data-nosnippet>235</span>        rem\n<span data-nosnippet>236</span>    }\n<span data-nosnippet>237</span>}\n<span data-nosnippet>238</span>\n<span data-nosnippet>239</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>240</span><span class=\"kw\">where\n<span data-nosnippet>241</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>242</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>243</span>{\n<span data-nosnippet>244</span>    <span class=\"kw\">pub fn </span>div_rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>) {\n<span data-nosnippet>245</span>        <span class=\"kw\">let </span>div = <span class=\"self\">self</span>.clone() / rhs.clone();\n<span data-nosnippet>246</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self </span>- div.clone() * rhs;\n<span data-nosnippet>247</span>        rem.trim_tail_zeros();\n<span data-nosnippet>248</span>        (div, rem)\n<span data-nosnippet>249</span>    }\n<span data-nosnippet>250</span>}\n<span data-nosnippet>251</span>\n<span data-nosnippet>252</span><span class=\"macro\">macro_rules!</span> impl_fps_binop_conv {\n<span data-nosnippet>253</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>254</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>255</span>        <span class=\"kw\">where\n<span data-nosnippet>256</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>257</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>258</span>        {\n<span data-nosnippet>259</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) {\n<span data-nosnippet>260</span>                <span class=\"kw-2\">*</span><span class=\"self\">self </span>= <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">Self</span>::from_vec(take(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.data)), rhs);\n<span data-nosnippet>261</span>            }\n<span data-nosnippet>262</span>        }\n<span data-nosnippet>263</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>264</span>        <span class=\"kw\">where\n<span data-nosnippet>265</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>266</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>267</span>        {\n<span data-nosnippet>268</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>269</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, rhs.clone());\n<span data-nosnippet>270</span>            }\n<span data-nosnippet>271</span>        }\n<span data-nosnippet>272</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>273</span>        <span class=\"kw\">where\n<span data-nosnippet>274</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>275</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>276</span>        {\n<span data-nosnippet>277</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>278</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>279</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs.clone())\n<span data-nosnippet>280</span>            }\n<span data-nosnippet>281</span>        }\n<span data-nosnippet>282</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>283</span>        <span class=\"kw\">where\n<span data-nosnippet>284</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>285</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>286</span>        {\n<span data-nosnippet>287</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>288</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>289</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs)\n<span data-nosnippet>290</span>            }\n<span data-nosnippet>291</span>        }\n<span data-nosnippet>292</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>293</span>        <span class=\"kw\">where\n<span data-nosnippet>294</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>295</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>296</span>        {\n<span data-nosnippet>297</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>298</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>299</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs.clone())\n<span data-nosnippet>300</span>            }\n<span data-nosnippet>301</span>        }\n<span data-nosnippet>302</span>    };\n<span data-nosnippet>303</span>}\n<span data-nosnippet>304</span><span class=\"macro\">impl_fps_binop_conv!</span>(Mul, mul, MulAssign, mul_assign);\n<span data-nosnippet>305</span><span class=\"macro\">impl_fps_binop_conv!</span>(Div, div, DivAssign, div_assign);\n<span data-nosnippet>306</span><span class=\"macro\">impl_fps_binop_conv!</span>(Rem, rem, RemAssign, rem_assign);\n<span data-nosnippet>307</span>\n<span data-nosnippet>308</span><span class=\"kw\">impl</span>&lt;T, C&gt; Neg <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>309</span><span class=\"kw\">where\n<span data-nosnippet>310</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>311</span>{\n<span data-nosnippet>312</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>313</span>    <span class=\"kw\">fn </span>neg(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>314</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut() {\n<span data-nosnippet>315</span>            <span class=\"kw-2\">*</span>x = -x.clone();\n<span data-nosnippet>316</span>        }\n<span data-nosnippet>317</span>        <span class=\"self\">self\n<span data-nosnippet>318</span>    </span>}\n<span data-nosnippet>319</span>}\n<span data-nosnippet>320</span><span class=\"kw\">impl</span>&lt;T, C&gt; Neg <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>321</span><span class=\"kw\">where\n<span data-nosnippet>322</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>323</span>{\n<span data-nosnippet>324</span>    <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>325</span>    <span class=\"kw\">fn </span>neg(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>326</span>        <span class=\"self\">self</span>.clone().neg()\n<span data-nosnippet>327</span>    }\n<span data-nosnippet>328</span>}\n<span data-nosnippet>329</span>\n<span data-nosnippet>330</span><span class=\"kw\">impl</span>&lt;T, C&gt; ShrAssign&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;<a href=\"monoid_action.rs.html#83\">T</a>, C&gt;\n<span data-nosnippet>331</span><span class=\"kw\">where\n<span data-nosnippet>332</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>333</span>{\n<span data-nosnippet>334</span>    <span class=\"kw\">fn </span>shr_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: usize) {\n<span data-nosnippet>335</span>        <span class=\"kw\">if </span><a class=\"self\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\">self</a>.length() &lt;= rhs {\n<span data-nosnippet>336</span>            <span class=\"kw-2\">*</span><span class=\"self\">self </span>= <span class=\"self\">Self</span>::zero();\n<span data-nosnippet>337</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>338</span>            <span class=\"kw\">for </span>i <span class=\"kw\">in </span>rhs..<span class=\"self\">self</span>.length() {\n<span data-nosnippet>339</span>                <span class=\"self\">self</span>[i - rhs] = <span class=\"self\">self</span>[i].clone();\n<span data-nosnippet>340</span>            }\n<span data-nosnippet>341</span>            <span class=\"self\">self</span>.truncate(<span class=\"self\">self</span>.length() - rhs);\n<span data-nosnippet>342</span>        }\n<span data-nosnippet>343</span>    }\n<span data-nosnippet>344</span>}\n<span data-nosnippet>345</span><span class=\"kw\">impl</span>&lt;T, C&gt; ShlAssign&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>346</span><span class=\"kw\">where\n<span data-nosnippet>347</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>348</span>{\n<span data-nosnippet>349</span>    <span class=\"kw\">fn </span>shl_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: usize) {\n<span data-nosnippet>350</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>351</span>        <span class=\"self\">self</span>.resize(n + rhs);\n<span data-nosnippet>352</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).rev() {\n<span data-nosnippet>353</span>            <span class=\"self\">self</span>[i + rhs] = <span class=\"self\">self</span>[i].clone();\n<span data-nosnippet>354</span>        }\n<span data-nosnippet>355</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..rhs {\n<span data-nosnippet>356</span>            <span class=\"self\">self</span>[i] = T::zero();\n<span data-nosnippet>357</span>        }\n<span data-nosnippet>358</span>    }\n<span data-nosnippet>359</span>}\n<span data-nosnippet>360</span>\n<span data-nosnippet>361</span><span class=\"kw\">impl</span>&lt;T, C&gt; Shr&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>362</span><span class=\"kw\">where\n<span data-nosnippet>363</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>364</span>{\n<span data-nosnippet>365</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>366</span>    <span class=\"kw\">fn </span>shr(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: usize) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>367</span>        <span class=\"self\">self</span>.shr_assign(rhs);\n<span data-nosnippet>368</span>        <span class=\"self\">self\n<span data-nosnippet>369</span>    </span>}\n<span data-nosnippet>370</span>}\n<span data-nosnippet>371</span><span class=\"kw\">impl</span>&lt;T, C&gt; Shl&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>372</span><span class=\"kw\">where\n<span data-nosnippet>373</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>374</span>{\n<span data-nosnippet>375</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>376</span>    <span class=\"kw\">fn </span>shl(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: usize) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>377</span>        <span class=\"self\">self</span>.shl_assign(rhs);\n<span data-nosnippet>378</span>        <span class=\"self\">self\n<span data-nosnippet>379</span>    </span>}\n<span data-nosnippet>380</span>}\n<span data-nosnippet>381</span><span class=\"kw\">impl</span>&lt;T, C&gt; Shr&lt;usize&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>382</span><span class=\"kw\">where\n<span data-nosnippet>383</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>384</span>{\n<span data-nosnippet>385</span>    <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>386</span>    <span class=\"kw\">fn </span>shr(<span class=\"self\">self</span>, rhs: usize) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>387</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt;= rhs {\n<span data-nosnippet>388</span>            <span class=\"self\">Self</span>::Output::zero()\n<span data-nosnippet>389</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>390</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::Output::zeros(<span class=\"self\">self</span>.length() - rhs);\n<span data-nosnippet>391</span>            <span class=\"kw\">for </span>i <span class=\"kw\">in </span>rhs..<span class=\"self\">self</span>.length() {\n<span data-nosnippet>392</span>                f[i - rhs] = <span class=\"self\">self</span>[i].clone();\n<span data-nosnippet>393</span>            }\n<span data-nosnippet>394</span>            f\n<span data-nosnippet>395</span>        }\n<span data-nosnippet>396</span>    }\n<span data-nosnippet>397</span>}\n<span data-nosnippet>398</span><span class=\"kw\">impl</span>&lt;T, C&gt; Shl&lt;usize&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>399</span><span class=\"kw\">where\n<span data-nosnippet>400</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>401</span>{\n<span data-nosnippet>402</span>    <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>403</span>    <span class=\"kw\">fn </span>shl(<span class=\"self\">self</span>, rhs: usize) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>404</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::Output::zeros(<span class=\"self\">self</span>.length() + rhs);\n<span data-nosnippet>405</span>        <span class=\"kw\">for </span>(i, x) <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">iter</span>().cloned().enumerate().rev() {\n<span data-nosnippet>406</span>            f[i + rhs] = x;\n<span data-nosnippet>407</span>        }\n<span data-nosnippet>408</span>        f\n<span data-nosnippet>409</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[3,3],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#219&#34;,&#34;line 219&#34;],[[44,44],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#260&#34;,&#34;line 260&#34;],[[64,64],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#280&#34;,&#34;line 280&#34;],[[101,101],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#317&#34;,&#34;line 317&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#219\">line 219</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>216</span>    <span class=\"kw\">pub fn </span>eval(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, x: T) -&gt; T {\n<span data-nosnippet>217</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>base = T::one();\n<span data-nosnippet>218</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = T::zero();\n<span data-nosnippet>219</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight focus\">iter</span>() {\n<span data-nosnippet>220</span>            res += base.clone() * a.clone();\n<span data-nosnippet>221</span>            base <span class=\"kw-2\">*</span>= x.clone();\n<span data-nosnippet>222</span>        }\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }\n<span data-nosnippet>225</span>}\n<span data-nosnippet>226</span>\n<span data-nosnippet>227</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>228</span><span class=\"kw\">where\n<span data-nosnippet>229</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>230</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>231</span>{\n<span data-nosnippet>232</span>    <span class=\"kw\">pub fn </span>inv(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>233</span>        <span class=\"macro\">debug_assert!</span>(!<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>234</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(T::one() / <span class=\"self\">self</span>[<span class=\"number\">0</span>].clone());\n<span data-nosnippet>235</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>236</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>237</span>            <span class=\"kw\">let </span>g = <span class=\"self\">self</span>.prefix_ref((i * <span class=\"number\">2</span>).min(deg));\n<span data-nosnippet>238</span>            <span class=\"kw\">let </span>h = f.clone();\n<span data-nosnippet>239</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>240</span>            <span class=\"kw\">let </span>h = C::transform(h.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>241</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>242</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = <span class=\"self\">Self</span>::from_vec(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>243</span>            g &gt;&gt;= i;\n<span data-nosnippet>244</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>245</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>246</span>            <span class=\"kw\">let </span>g = <span class=\"self\">Self</span>::from_vec(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>247</span>            f.data.extend((-g).into_iter().take(i));\n<span data-nosnippet>248</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>249</span>        }\n<span data-nosnippet>250</span>        f.truncate(deg);\n<span data-nosnippet>251</span>        f\n<span data-nosnippet>252</span>    }\n<span data-nosnippet>253</span>    <span class=\"kw\">pub fn </span>exp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>254</span>        <span class=\"macro\">debug_assert!</span>(<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>255</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::one();\n<span data-nosnippet>256</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>257</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>258</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = -f.log(i * <span class=\"number\">2</span>);\n<span data-nosnippet>259</span>            g[<span class=\"number\">0</span>] += T::one();\n<span data-nosnippet>260</span>            <span class=\"kw\">for </span>(g, x) <span class=\"kw\">in </span>g.iter_mut().zip(<span class=\"self\">self</span>.<span class=\"highlight\">iter</span>().take(i * <span class=\"number\">2</span>)) {\n<span data-nosnippet>261</span>                <span class=\"kw-2\">*</span>g += x.clone();\n<span data-nosnippet>262</span>            }\n<span data-nosnippet>263</span>            f = (f * g).prefix(i * <span class=\"number\">2</span>);\n<span data-nosnippet>264</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>265</span>        }\n<span data-nosnippet>266</span>        f.prefix(deg)\n<span data-nosnippet>267</span>    }\n<span data-nosnippet>268</span>    <span class=\"kw\">pub fn </span>log(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>269</span>        (<span class=\"self\">self</span>.inv(deg) * <span class=\"self\">self</span>.clone().diff()).integral().prefix(deg)\n<span data-nosnippet>270</span>    }\n<span data-nosnippet>271</span>    <span class=\"kw\">pub fn </span>pow(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: usize, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>272</span>        <span class=\"kw\">if </span>rhs == <span class=\"number\">0 </span>{\n<span data-nosnippet>273</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::from_vec(\n<span data-nosnippet>274</span>                once(T::one())\n<span data-nosnippet>275</span>                    .chain(repeat_with(T::zero))\n<span data-nosnippet>276</span>                    .take(deg)\n<span data-nosnippet>277</span>                    .collect(),\n<span data-nosnippet>278</span>            );\n<span data-nosnippet>279</span>        }\n<span data-nosnippet>280</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.<span class=\"highlight\">iter</span>().position(|x| !x.is_zero()) {\n<span data-nosnippet>281</span>            <span class=\"kw\">if </span>k &gt;= (deg + rhs - <span class=\"number\">1</span>) / rhs {\n<span data-nosnippet>282</span>                <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>283</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>284</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x0 = <span class=\"self\">self</span>[k].clone();\n<span data-nosnippet>285</span>                <span class=\"kw\">let </span>rev = T::one() / x0.clone();\n<span data-nosnippet>286</span>                <span class=\"kw\">let </span>x = {\n<span data-nosnippet>287</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = T::one();\n<span data-nosnippet>288</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = rhs;\n<span data-nosnippet>289</span>                    <span class=\"kw\">while </span>y &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>290</span>                        <span class=\"kw\">if </span>y &amp; <span class=\"number\">1 </span>== <span class=\"number\">1 </span>{\n<span data-nosnippet>291</span>                            x <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>292</span>                        }\n<span data-nosnippet>293</span>                        x0 <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>294</span>                        y &gt;&gt;= <span class=\"number\">1</span>;\n<span data-nosnippet>295</span>                    }\n<span data-nosnippet>296</span>                    x\n<span data-nosnippet>297</span>                };\n<span data-nosnippet>298</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (<span class=\"self\">self</span>.clone() * <span class=\"kw-2\">&amp;</span>rev) &gt;&gt; k;\n<span data-nosnippet>299</span>                f = (f.log(deg) * <span class=\"kw-2\">&amp;</span>T::from(rhs)).exp(deg) * <span class=\"kw-2\">&amp;</span>x;\n<span data-nosnippet>300</span>                f.truncate(deg - k * rhs);\n<span data-nosnippet>301</span>                f &lt;&lt;= k * rhs;\n<span data-nosnippet>302</span>                f\n<span data-nosnippet>303</span>            }\n<span data-nosnippet>304</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>305</span>            <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>306</span>        }\n<span data-nosnippet>307</span>    }\n<span data-nosnippet>308</span>}\n<span data-nosnippet>309</span>\n<span data-nosnippet>310</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>311</span><span class=\"kw\">where\n<span data-nosnippet>312</span>    </span>T: FormalPowerSeriesCoefficientSqrt,\n<span data-nosnippet>313</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>314</span>{\n<span data-nosnippet>315</span>    <span class=\"kw\">pub fn </span>sqrt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>316</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero() {\n<span data-nosnippet>317</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.<span class=\"highlight\">iter</span>().position(|x| !x.is_zero()) {\n<span data-nosnippet>318</span>                <span class=\"kw\">if </span>k % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>319</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>320</span>                } <span class=\"kw\">else if </span>deg &gt; k / <span class=\"number\">2 </span>{\n<span data-nosnippet>321</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self </span>&gt;&gt; k).sqrt(deg - k / <span class=\"number\">2</span>)<span class=\"question-mark\">? </span>&lt;&lt; (k / <span class=\"number\">2</span>));\n<span data-nosnippet>322</span>                }\n<span data-nosnippet>323</span>            }\n<span data-nosnippet>324</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>325</span>            <span class=\"kw\">let </span>inv2 = T::one() / (T::one() + T::one());\n<span data-nosnippet>326</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(<span class=\"self\">self</span>[<span class=\"number\">0</span>].sqrt_coefficient()<span class=\"question-mark\">?</span>);\n<span data-nosnippet>327</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>328</span>            <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>329</span>                f = (<span class=\"kw-2\">&amp;</span>f + <span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.prefix_ref(i * <span class=\"number\">2</span>) * f.inv(i * <span class=\"number\">2</span>))).prefix(i * <span class=\"number\">2</span>) * <span class=\"kw-2\">&amp;</span>inv2;\n<span data-nosnippet>330</span>                i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>331</span>            }\n<span data-nosnippet>332</span>            f.truncate(deg);\n<span data-nosnippet>333</span>            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(f);\n<span data-nosnippet>334</span>        }\n<span data-nosnippet>335</span>        <span class=\"prelude-val\">Some</span>(<span class=\"self\">Self</span>::zeros(deg))\n<span data-nosnippet>336</span>    }</code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#28-30\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/slice/iter/struct.IterMut.html\" title=\"struct core::slice::iter::IterMut\">IterMut</a>&lt;'_, T&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-4\"><a href=\"#scraped-examples-4\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#40&#34;,&#34;line 40&#34;],[[12,12],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#51&#34;,&#34;line 51&#34;],[[80,80],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#119&#34;,&#34;line 119&#34;],[[93,93],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#132&#34;,&#34;line 132&#34;],[[275,275],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#314&#34;,&#34;line 314&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_nums.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#40\">line 40</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>39</span>    <span class=\"kw\">fn </span>mul_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: T) {\n<span data-nosnippet>40</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight focus\">iter_mut</span>() {\n<span data-nosnippet>41</span>            x.mul_assign(<span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>42</span>        }\n<span data-nosnippet>43</span>    }\n<span data-nosnippet>44</span>}\n<span data-nosnippet>45</span><span class=\"kw\">impl</span>&lt;T, C&gt; DivAssign&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>46</span><span class=\"kw\">where\n<span data-nosnippet>47</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>48</span>{\n<span data-nosnippet>49</span>    <span class=\"kw\">fn </span>div_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: T) {\n<span data-nosnippet>50</span>        <span class=\"kw\">let </span>rinv = T::one() / rhs;\n<span data-nosnippet>51</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">iter_mut</span>() {\n<span data-nosnippet>52</span>            x.mul_assign(<span class=\"kw-2\">&amp;</span>rinv);\n<span data-nosnippet>53</span>        }\n<span data-nosnippet>54</span>    }\n<span data-nosnippet>55</span>}\n<span data-nosnippet>56</span><span class=\"macro\">macro_rules!</span> impl_fps_single_binop {\n<span data-nosnippet>57</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>58</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign</span>&lt;<span class=\"kw-2\">&amp;</span>T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>59</span>        <span class=\"kw\">where\n<span data-nosnippet>60</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>61</span>        {\n<span data-nosnippet>62</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>T) {\n<span data-nosnippet>63</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, rhs.clone());\n<span data-nosnippet>64</span>            }\n<span data-nosnippet>65</span>        }\n<span data-nosnippet>66</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>67</span>        <span class=\"kw\">where\n<span data-nosnippet>68</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>69</span>        {\n<span data-nosnippet>70</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>71</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>72</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs);\n<span data-nosnippet>73</span>                <span class=\"self\">self\n<span data-nosnippet>74</span>            </span>}\n<span data-nosnippet>75</span>        }\n<span data-nosnippet>76</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>77</span>        <span class=\"kw\">where\n<span data-nosnippet>78</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>79</span>        {\n<span data-nosnippet>80</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>81</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>82</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs);\n<span data-nosnippet>83</span>                <span class=\"self\">self\n<span data-nosnippet>84</span>            </span>}\n<span data-nosnippet>85</span>        }\n<span data-nosnippet>86</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;T&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>87</span>        <span class=\"kw\">where\n<span data-nosnippet>88</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>89</span>        {\n<span data-nosnippet>90</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>91</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>92</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs)\n<span data-nosnippet>93</span>            }\n<span data-nosnippet>94</span>        }\n<span data-nosnippet>95</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>T&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>96</span>        <span class=\"kw\">where\n<span data-nosnippet>97</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>98</span>        {\n<span data-nosnippet>99</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>100</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>101</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs)\n<span data-nosnippet>102</span>            }\n<span data-nosnippet>103</span>        }\n<span data-nosnippet>104</span>    };\n<span data-nosnippet>105</span>}\n<span data-nosnippet>106</span><span class=\"macro\">impl_fps_single_binop!</span>(Add, add, AddAssign, add_assign);\n<span data-nosnippet>107</span><span class=\"macro\">impl_fps_single_binop!</span>(Sub, sub, SubAssign, sub_assign);\n<span data-nosnippet>108</span><span class=\"macro\">impl_fps_single_binop!</span>(Mul, mul, MulAssign, mul_assign);\n<span data-nosnippet>109</span><span class=\"macro\">impl_fps_single_binop!</span>(Div, div, DivAssign, div_assign);\n<span data-nosnippet>110</span>\n<span data-nosnippet>111</span><span class=\"kw\">impl</span>&lt;T, C&gt; AddAssign&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>112</span><span class=\"kw\">where\n<span data-nosnippet>113</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>114</span>{\n<span data-nosnippet>115</span>    <span class=\"kw\">fn </span>add_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>116</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>117</span>            <span class=\"self\">self</span>.resize(rhs.length());\n<span data-nosnippet>118</span>        }\n<span data-nosnippet>119</span>        <span class=\"kw\">for </span>(x, y) <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">iter_mut</span>().zip(rhs.iter()) {\n<span data-nosnippet>120</span>            x.add_assign(y);\n<span data-nosnippet>121</span>        }\n<span data-nosnippet>122</span>    }\n<span data-nosnippet>123</span>}\n<span data-nosnippet>124</span><span class=\"kw\">impl</span>&lt;T, C&gt; SubAssign&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>125</span><span class=\"kw\">where\n<span data-nosnippet>126</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>127</span>{\n<span data-nosnippet>128</span>    <span class=\"kw\">fn </span>sub_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>129</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>130</span>            <span class=\"self\">self</span>.resize(rhs.length());\n<span data-nosnippet>131</span>        }\n<span data-nosnippet>132</span>        <span class=\"kw\">for </span>(x, y) <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">iter_mut</span>().zip(rhs.iter()) {\n<span data-nosnippet>133</span>            x.sub_assign(y);\n<span data-nosnippet>134</span>        }\n<span data-nosnippet>135</span>        <span class=\"self\">self</span>.trim_tail_zeros();\n<span data-nosnippet>136</span>    }\n<span data-nosnippet>137</span>}\n<span data-nosnippet>138</span>\n<span data-nosnippet>139</span><span class=\"macro\">macro_rules!</span> impl_fps_binop_addsub {\n<span data-nosnippet>140</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>141</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>142</span>        <span class=\"kw\">where\n<span data-nosnippet>143</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>144</span>        {\n<span data-nosnippet>145</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) {\n<span data-nosnippet>146</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>147</span>            }\n<span data-nosnippet>148</span>        }\n<span data-nosnippet>149</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>150</span>        <span class=\"kw\">where\n<span data-nosnippet>151</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>152</span>        {\n<span data-nosnippet>153</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>154</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>155</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>156</span>                <span class=\"self\">self\n<span data-nosnippet>157</span>            </span>}\n<span data-nosnippet>158</span>        }\n<span data-nosnippet>159</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>160</span>        <span class=\"kw\">where\n<span data-nosnippet>161</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>162</span>        {\n<span data-nosnippet>163</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>164</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>165</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs);\n<span data-nosnippet>166</span>                <span class=\"self\">self\n<span data-nosnippet>167</span>            </span>}\n<span data-nosnippet>168</span>        }\n<span data-nosnippet>169</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>170</span>        <span class=\"kw\">where\n<span data-nosnippet>171</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>172</span>        {\n<span data-nosnippet>173</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>174</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>175</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">self</span>.clone();\n<span data-nosnippet>176</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span>self_, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>177</span>                self_\n<span data-nosnippet>178</span>            }\n<span data-nosnippet>179</span>        }\n<span data-nosnippet>180</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>181</span>        <span class=\"kw\">where\n<span data-nosnippet>182</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>183</span>        {\n<span data-nosnippet>184</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>185</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>186</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">self</span>.clone();\n<span data-nosnippet>187</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span>self_, rhs);\n<span data-nosnippet>188</span>                self_\n<span data-nosnippet>189</span>            }\n<span data-nosnippet>190</span>        }\n<span data-nosnippet>191</span>    };\n<span data-nosnippet>192</span>}\n<span data-nosnippet>193</span><span class=\"macro\">impl_fps_binop_addsub!</span>(Add, add, AddAssign, add_assign);\n<span data-nosnippet>194</span><span class=\"macro\">impl_fps_binop_addsub!</span>(Sub, sub, SubAssign, sub_assign);\n<span data-nosnippet>195</span>\n<span data-nosnippet>196</span><span class=\"kw\">impl</span>&lt;T, C&gt; Mul <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>197</span><span class=\"kw\">where\n<span data-nosnippet>198</span>    </span>C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>199</span>{\n<span data-nosnippet>200</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>201</span>    <span class=\"kw\">fn </span>mul(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>202</span>        <span class=\"self\">Self</span>::from_vec(C::convolve(<span class=\"self\">self</span>.data, rhs.data))\n<span data-nosnippet>203</span>    }\n<span data-nosnippet>204</span>}\n<span data-nosnippet>205</span><span class=\"kw\">impl</span>&lt;T, C&gt; Div <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>206</span><span class=\"kw\">where\n<span data-nosnippet>207</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>208</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>209</span>{\n<span data-nosnippet>210</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>211</span>    <span class=\"kw\">fn </span>div(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>212</span>        <span class=\"self\">self</span>.trim_tail_zeros();\n<span data-nosnippet>213</span>        rhs.trim_tail_zeros();\n<span data-nosnippet>214</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>215</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::zero();\n<span data-nosnippet>216</span>        }\n<span data-nosnippet>217</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>218</span>        rhs.data.reverse();\n<span data-nosnippet>219</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length() - rhs.length() + <span class=\"number\">1</span>;\n<span data-nosnippet>220</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"self\">self </span>* rhs.inv(n);\n<span data-nosnippet>221</span>        res.truncate(n);\n<span data-nosnippet>222</span>        res.data.reverse();\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }\n<span data-nosnippet>225</span>}\n<span data-nosnippet>226</span><span class=\"kw\">impl</span>&lt;T, C&gt; Rem <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>227</span><span class=\"kw\">where\n<span data-nosnippet>228</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>229</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>230</span>{\n<span data-nosnippet>231</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>232</span>    <span class=\"kw\">fn </span>rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>233</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self</span>.clone() - <span class=\"self\">self </span>/ rhs.clone() * rhs;\n<span data-nosnippet>234</span>        rem.trim_tail_zeros();\n<span data-nosnippet>235</span>        rem\n<span data-nosnippet>236</span>    }\n<span data-nosnippet>237</span>}\n<span data-nosnippet>238</span>\n<span data-nosnippet>239</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>240</span><span class=\"kw\">where\n<span data-nosnippet>241</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>242</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>243</span>{\n<span data-nosnippet>244</span>    <span class=\"kw\">pub fn </span>div_rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>) {\n<span data-nosnippet>245</span>        <span class=\"kw\">let </span>div = <span class=\"self\">self</span>.clone() / rhs.clone();\n<span data-nosnippet>246</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self </span>- div.clone() * rhs;\n<span data-nosnippet>247</span>        rem.trim_tail_zeros();\n<span data-nosnippet>248</span>        (div, rem)\n<span data-nosnippet>249</span>    }\n<span data-nosnippet>250</span>}\n<span data-nosnippet>251</span>\n<span data-nosnippet>252</span><span class=\"macro\">macro_rules!</span> impl_fps_binop_conv {\n<span data-nosnippet>253</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>254</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>255</span>        <span class=\"kw\">where\n<span data-nosnippet>256</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>257</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>258</span>        {\n<span data-nosnippet>259</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) {\n<span data-nosnippet>260</span>                <span class=\"kw-2\">*</span><span class=\"self\">self </span>= <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">Self</span>::from_vec(take(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.data)), rhs);\n<span data-nosnippet>261</span>            }\n<span data-nosnippet>262</span>        }\n<span data-nosnippet>263</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>264</span>        <span class=\"kw\">where\n<span data-nosnippet>265</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>266</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>267</span>        {\n<span data-nosnippet>268</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>269</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, rhs.clone());\n<span data-nosnippet>270</span>            }\n<span data-nosnippet>271</span>        }\n<span data-nosnippet>272</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>273</span>        <span class=\"kw\">where\n<span data-nosnippet>274</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>275</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>276</span>        {\n<span data-nosnippet>277</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>278</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>279</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs.clone())\n<span data-nosnippet>280</span>            }\n<span data-nosnippet>281</span>        }\n<span data-nosnippet>282</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>283</span>        <span class=\"kw\">where\n<span data-nosnippet>284</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>285</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>286</span>        {\n<span data-nosnippet>287</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>288</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>289</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs)\n<span data-nosnippet>290</span>            }\n<span data-nosnippet>291</span>        }\n<span data-nosnippet>292</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>293</span>        <span class=\"kw\">where\n<span data-nosnippet>294</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>295</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>296</span>        {\n<span data-nosnippet>297</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>298</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>299</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs.clone())\n<span data-nosnippet>300</span>            }\n<span data-nosnippet>301</span>        }\n<span data-nosnippet>302</span>    };\n<span data-nosnippet>303</span>}\n<span data-nosnippet>304</span><span class=\"macro\">impl_fps_binop_conv!</span>(Mul, mul, MulAssign, mul_assign);\n<span data-nosnippet>305</span><span class=\"macro\">impl_fps_binop_conv!</span>(Div, div, DivAssign, div_assign);\n<span data-nosnippet>306</span><span class=\"macro\">impl_fps_binop_conv!</span>(Rem, rem, RemAssign, rem_assign);\n<span data-nosnippet>307</span>\n<span data-nosnippet>308</span><span class=\"kw\">impl</span>&lt;T, C&gt; Neg <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>309</span><span class=\"kw\">where\n<span data-nosnippet>310</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>311</span>{\n<span data-nosnippet>312</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>313</span>    <span class=\"kw\">fn </span>neg(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>314</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">iter_mut</span>() {\n<span data-nosnippet>315</span>            <span class=\"kw-2\">*</span>x = -x.clone();\n<span data-nosnippet>316</span>        }\n<span data-nosnippet>317</span>        <span class=\"self\">self\n<span data-nosnippet>318</span>    </span>}</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[2,2],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#189&#34;,&#34;line 189&#34;],[[22,22],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#209&#34;,&#34;line 209&#34;],[[73,73],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#260&#34;,&#34;line 260&#34;],[[196,196],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#383&#34;,&#34;line 383&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#189\">line 189</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>187</span>    <span class=\"kw\">pub fn </span>diff(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>188</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = T::one();\n<span data-nosnippet>189</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight focus\">iter_mut</span>().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>190</span>            <span class=\"kw-2\">*</span>x <span class=\"kw-2\">*</span>= <span class=\"kw-2\">&amp;</span>c;\n<span data-nosnippet>191</span>            c += T::one();\n<span data-nosnippet>192</span>        }\n<span data-nosnippet>193</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>194</span>            <span class=\"self\">self</span>.data.remove(<span class=\"number\">0</span>);\n<span data-nosnippet>195</span>        }\n<span data-nosnippet>196</span>        <span class=\"self\">self\n<span data-nosnippet>197</span>    </span>}\n<span data-nosnippet>198</span>    <span class=\"kw\">pub fn </span>integral(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>199</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>200</span>        <span class=\"self\">self</span>.data.insert(<span class=\"number\">0</span>, Zero::zero());\n<span data-nosnippet>201</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>fact = Vec::with_capacity(n + <span class=\"number\">1</span>);\n<span data-nosnippet>202</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = T::one();\n<span data-nosnippet>203</span>        fact.push(c.clone());\n<span data-nosnippet>204</span>        <span class=\"kw\">for _ in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>205</span>            fact.push(fact.last().cloned().unwrap() * c.clone());\n<span data-nosnippet>206</span>            c += T::one();\n<span data-nosnippet>207</span>        }\n<span data-nosnippet>208</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>invf = T::one() / (fact.last().cloned().unwrap() * c.clone());\n<span data-nosnippet>209</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.<span class=\"highlight\">iter_mut</span>().skip(<span class=\"number\">1</span>).rev() {\n<span data-nosnippet>210</span>            <span class=\"kw-2\">*</span>x <span class=\"kw-2\">*</span>= invf.clone() * fact.pop().unwrap();\n<span data-nosnippet>211</span>            invf <span class=\"kw-2\">*</span>= c.clone();\n<span data-nosnippet>212</span>            c -= T::one();\n<span data-nosnippet>213</span>        }\n<span data-nosnippet>214</span>        <span class=\"self\">self\n<span data-nosnippet>215</span>    </span>}\n<span data-nosnippet>216</span>    <span class=\"kw\">pub fn </span>eval(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, x: T) -&gt; T {\n<span data-nosnippet>217</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>base = T::one();\n<span data-nosnippet>218</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = T::zero();\n<span data-nosnippet>219</span>        <span class=\"kw\">for </span>a <span class=\"kw\">in </span><span class=\"self\">self</span>.iter() {\n<span data-nosnippet>220</span>            res += base.clone() * a.clone();\n<span data-nosnippet>221</span>            base <span class=\"kw-2\">*</span>= x.clone();\n<span data-nosnippet>222</span>        }\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }\n<span data-nosnippet>225</span>}\n<span data-nosnippet>226</span>\n<span data-nosnippet>227</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>228</span><span class=\"kw\">where\n<span data-nosnippet>229</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>230</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>231</span>{\n<span data-nosnippet>232</span>    <span class=\"kw\">pub fn </span>inv(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>233</span>        <span class=\"macro\">debug_assert!</span>(!<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>234</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(T::one() / <span class=\"self\">self</span>[<span class=\"number\">0</span>].clone());\n<span data-nosnippet>235</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>236</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>237</span>            <span class=\"kw\">let </span>g = <span class=\"self\">self</span>.prefix_ref((i * <span class=\"number\">2</span>).min(deg));\n<span data-nosnippet>238</span>            <span class=\"kw\">let </span>h = f.clone();\n<span data-nosnippet>239</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>240</span>            <span class=\"kw\">let </span>h = C::transform(h.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>241</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>242</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = <span class=\"self\">Self</span>::from_vec(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>243</span>            g &gt;&gt;= i;\n<span data-nosnippet>244</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>245</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>246</span>            <span class=\"kw\">let </span>g = <span class=\"self\">Self</span>::from_vec(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>247</span>            f.data.extend((-g).into_iter().take(i));\n<span data-nosnippet>248</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>249</span>        }\n<span data-nosnippet>250</span>        f.truncate(deg);\n<span data-nosnippet>251</span>        f\n<span data-nosnippet>252</span>    }\n<span data-nosnippet>253</span>    <span class=\"kw\">pub fn </span>exp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>254</span>        <span class=\"macro\">debug_assert!</span>(<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>255</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::one();\n<span data-nosnippet>256</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>257</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>258</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = -f.log(i * <span class=\"number\">2</span>);\n<span data-nosnippet>259</span>            g[<span class=\"number\">0</span>] += T::one();\n<span data-nosnippet>260</span>            <span class=\"kw\">for </span>(g, x) <span class=\"kw\">in </span>g.<span class=\"highlight\">iter_mut</span>().zip(<span class=\"self\">self</span>.iter().take(i * <span class=\"number\">2</span>)) {\n<span data-nosnippet>261</span>                <span class=\"kw-2\">*</span>g += x.clone();\n<span data-nosnippet>262</span>            }\n<span data-nosnippet>263</span>            f = (f * g).prefix(i * <span class=\"number\">2</span>);\n<span data-nosnippet>264</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>265</span>        }\n<span data-nosnippet>266</span>        f.prefix(deg)\n<span data-nosnippet>267</span>    }\n<span data-nosnippet>268</span>    <span class=\"kw\">pub fn </span>log(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>269</span>        (<span class=\"self\">self</span>.inv(deg) * <span class=\"self\">self</span>.clone().diff()).integral().prefix(deg)\n<span data-nosnippet>270</span>    }\n<span data-nosnippet>271</span>    <span class=\"kw\">pub fn </span>pow(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: usize, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>272</span>        <span class=\"kw\">if </span>rhs == <span class=\"number\">0 </span>{\n<span data-nosnippet>273</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::from_vec(\n<span data-nosnippet>274</span>                once(T::one())\n<span data-nosnippet>275</span>                    .chain(repeat_with(T::zero))\n<span data-nosnippet>276</span>                    .take(deg)\n<span data-nosnippet>277</span>                    .collect(),\n<span data-nosnippet>278</span>            );\n<span data-nosnippet>279</span>        }\n<span data-nosnippet>280</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>281</span>            <span class=\"kw\">if </span>k &gt;= (deg + rhs - <span class=\"number\">1</span>) / rhs {\n<span data-nosnippet>282</span>                <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>283</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>284</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x0 = <span class=\"self\">self</span>[k].clone();\n<span data-nosnippet>285</span>                <span class=\"kw\">let </span>rev = T::one() / x0.clone();\n<span data-nosnippet>286</span>                <span class=\"kw\">let </span>x = {\n<span data-nosnippet>287</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = T::one();\n<span data-nosnippet>288</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = rhs;\n<span data-nosnippet>289</span>                    <span class=\"kw\">while </span>y &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>290</span>                        <span class=\"kw\">if </span>y &amp; <span class=\"number\">1 </span>== <span class=\"number\">1 </span>{\n<span data-nosnippet>291</span>                            x <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>292</span>                        }\n<span data-nosnippet>293</span>                        x0 <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>294</span>                        y &gt;&gt;= <span class=\"number\">1</span>;\n<span data-nosnippet>295</span>                    }\n<span data-nosnippet>296</span>                    x\n<span data-nosnippet>297</span>                };\n<span data-nosnippet>298</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (<span class=\"self\">self</span>.clone() * <span class=\"kw-2\">&amp;</span>rev) &gt;&gt; k;\n<span data-nosnippet>299</span>                f = (f.log(deg) * <span class=\"kw-2\">&amp;</span>T::from(rhs)).exp(deg) * <span class=\"kw-2\">&amp;</span>x;\n<span data-nosnippet>300</span>                f.truncate(deg - k * rhs);\n<span data-nosnippet>301</span>                f &lt;&lt;= k * rhs;\n<span data-nosnippet>302</span>                f\n<span data-nosnippet>303</span>            }\n<span data-nosnippet>304</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>305</span>            <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>306</span>        }\n<span data-nosnippet>307</span>    }\n<span data-nosnippet>308</span>}\n<span data-nosnippet>309</span>\n<span data-nosnippet>310</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>311</span><span class=\"kw\">where\n<span data-nosnippet>312</span>    </span>T: FormalPowerSeriesCoefficientSqrt,\n<span data-nosnippet>313</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>314</span>{\n<span data-nosnippet>315</span>    <span class=\"kw\">pub fn </span>sqrt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>316</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero() {\n<span data-nosnippet>317</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>318</span>                <span class=\"kw\">if </span>k % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>319</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>320</span>                } <span class=\"kw\">else if </span>deg &gt; k / <span class=\"number\">2 </span>{\n<span data-nosnippet>321</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self </span>&gt;&gt; k).sqrt(deg - k / <span class=\"number\">2</span>)<span class=\"question-mark\">? </span>&lt;&lt; (k / <span class=\"number\">2</span>));\n<span data-nosnippet>322</span>                }\n<span data-nosnippet>323</span>            }\n<span data-nosnippet>324</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>325</span>            <span class=\"kw\">let </span>inv2 = T::one() / (T::one() + T::one());\n<span data-nosnippet>326</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(<span class=\"self\">self</span>[<span class=\"number\">0</span>].sqrt_coefficient()<span class=\"question-mark\">?</span>);\n<span data-nosnippet>327</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>328</span>            <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>329</span>                f = (<span class=\"kw-2\">&amp;</span>f + <span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.prefix_ref(i * <span class=\"number\">2</span>) * f.inv(i * <span class=\"number\">2</span>))).prefix(i * <span class=\"number\">2</span>) * <span class=\"kw-2\">&amp;</span>inv2;\n<span data-nosnippet>330</span>                i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>331</span>            }\n<span data-nosnippet>332</span>            f.truncate(deg);\n<span data-nosnippet>333</span>            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(f);\n<span data-nosnippet>334</span>        }\n<span data-nosnippet>335</span>        <span class=\"prelude-val\">Some</span>(<span class=\"self\">Self</span>::zeros(deg))\n<span data-nosnippet>336</span>    }\n<span data-nosnippet>337</span>}\n<span data-nosnippet>338</span>\n<span data-nosnippet>339</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>340</span><span class=\"kw\">where\n<span data-nosnippet>341</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>342</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>343</span>{\n<span data-nosnippet>344</span>    <span class=\"kw\">pub fn </span>count_subset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>345</span>    </span><span class=\"kw\">where\n<span data-nosnippet>346</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>347</span>    {\n<span data-nosnippet>348</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>349</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>350</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>351</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>352</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>353</span>                    <span class=\"kw\">if </span>j &amp; <span class=\"number\">1 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>354</span>                        f[d] += <span class=\"self\">self</span>[i].<a href=\"mod.rs.html#15\">clone</a>() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>355</span>                    } <span class=\"kw\">else </span>{\n<span data-nosnippet>356</span>                        f[d] -= <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>357</span>                    }\n<span data-nosnippet>358</span>                }\n<span data-nosnippet>359</span>            }\n<span data-nosnippet>360</span>        }\n<span data-nosnippet>361</span>        f.exp(deg)\n<span data-nosnippet>362</span>    }\n<span data-nosnippet>363</span>    <span class=\"kw\">pub fn </span>count_multiset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>364</span>    </span><span class=\"kw\">where\n<span data-nosnippet>365</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>366</span>    {\n<span data-nosnippet>367</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>368</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>369</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>370</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>371</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>372</span>                    f[d] += <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>373</span>                }\n<span data-nosnippet>374</span>            }\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>        f.exp(deg)\n<span data-nosnippet>377</span>    }\n<span data-nosnippet>378</span>    <span class=\"kw\">pub fn </span>bostan_mori(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>, <span class=\"kw-2\">mut </span>n: usize) -&gt; T {\n<span data-nosnippet>379</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"self\">self</span>;\n<span data-nosnippet>380</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = rhs;\n<span data-nosnippet>381</span>        <span class=\"kw\">while </span>n &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>382</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mq = q.clone();\n<span data-nosnippet>383</span>            mq.<span class=\"highlight\">iter_mut</span>()\n<span data-nosnippet>384</span>                .skip(<span class=\"number\">1</span>)\n<span data-nosnippet>385</span>                .step_by(<span class=\"number\">2</span>)\n<span data-nosnippet>386</span>                .for_each(|x| <span class=\"kw-2\">*</span>x = -x.clone());\n<span data-nosnippet>387</span>            <span class=\"kw\">let </span>u = p * mq.clone();\n<span data-nosnippet>388</span>            p = <span class=\"kw\">if </span>n % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>{ u.even() } <span class=\"kw\">else </span>{ u.odd() };\n<span data-nosnippet>389</span>            q = (q * mq).even();\n<span data-nosnippet>390</span>            n /= <span class=\"number\">2</span>;\n<span data-nosnippet>391</span>        }\n<span data-nosnippet>392</span>        p[<span class=\"number\">0</span>].clone() / q[<span class=\"number\">0</span>].clone()\n<span data-nosnippet>393</span>    }</code></pre></div></div></div></details></div></details></div></details>",0,"competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#156-225\">Source</a><a href=\"#impl-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.prefix_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#160-166\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.prefix_ref\" class=\"fn\">prefix_ref</a>(&amp;self, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[5,5],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#237&#34;,&#34;line 237&#34;],[[97,97],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#329&#34;,&#34;line 329&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#237\">line 237</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>232</span>    <span class=\"kw\">pub fn </span>inv(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>233</span>        <span class=\"macro\">debug_assert!</span>(!<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>234</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(T::one() / <span class=\"self\">self</span>[<span class=\"number\">0</span>].clone());\n<span data-nosnippet>235</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>236</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>237</span>            <span class=\"kw\">let </span>g = <span class=\"self\">self</span>.<span class=\"highlight focus\">prefix_ref</span>((i * <span class=\"number\">2</span>).min(deg));\n<span data-nosnippet>238</span>            <span class=\"kw\">let </span>h = f.clone();\n<span data-nosnippet>239</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>240</span>            <span class=\"kw\">let </span>h = C::transform(h.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>241</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>242</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = <span class=\"self\">Self</span>::from_vec(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>243</span>            g &gt;&gt;= i;\n<span data-nosnippet>244</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = C::transform(g.data, <span class=\"number\">2 </span>* i);\n<span data-nosnippet>245</span>            C::multiply(<span class=\"kw-2\">&amp;mut </span>g, <span class=\"kw-2\">&amp;</span>h);\n<span data-nosnippet>246</span>            <span class=\"kw\">let </span>g = <span class=\"self\">Self</span>::from_vec(C::inverse_transform(g, <span class=\"number\">2 </span>* i));\n<span data-nosnippet>247</span>            f.data.extend((-g).into_iter().take(i));\n<span data-nosnippet>248</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>249</span>        }\n<span data-nosnippet>250</span>        f.truncate(deg);\n<span data-nosnippet>251</span>        f\n<span data-nosnippet>252</span>    }\n<span data-nosnippet>253</span>    <span class=\"kw\">pub fn </span>exp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>254</span>        <span class=\"macro\">debug_assert!</span>(<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>255</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::one();\n<span data-nosnippet>256</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>257</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>258</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = -f.log(i * <span class=\"number\">2</span>);\n<span data-nosnippet>259</span>            g[<span class=\"number\">0</span>] += T::one();\n<span data-nosnippet>260</span>            <span class=\"kw\">for </span>(g, x) <span class=\"kw\">in </span>g.iter_mut().zip(<span class=\"self\">self</span>.iter().take(i * <span class=\"number\">2</span>)) {\n<span data-nosnippet>261</span>                <span class=\"kw-2\">*</span>g += x.clone();\n<span data-nosnippet>262</span>            }\n<span data-nosnippet>263</span>            f = (f * g).prefix(i * <span class=\"number\">2</span>);\n<span data-nosnippet>264</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>265</span>        }\n<span data-nosnippet>266</span>        f.prefix(deg)\n<span data-nosnippet>267</span>    }\n<span data-nosnippet>268</span>    <span class=\"kw\">pub fn </span>log(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>269</span>        (<span class=\"self\">self</span>.inv(deg) * <span class=\"self\">self</span>.clone().diff()).integral().prefix(deg)\n<span data-nosnippet>270</span>    }\n<span data-nosnippet>271</span>    <span class=\"kw\">pub fn </span>pow(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: usize, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>272</span>        <span class=\"kw\">if </span>rhs == <span class=\"number\">0 </span>{\n<span data-nosnippet>273</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::from_vec(\n<span data-nosnippet>274</span>                once(T::one())\n<span data-nosnippet>275</span>                    .chain(repeat_with(T::zero))\n<span data-nosnippet>276</span>                    .take(deg)\n<span data-nosnippet>277</span>                    .collect(),\n<span data-nosnippet>278</span>            );\n<span data-nosnippet>279</span>        }\n<span data-nosnippet>280</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>281</span>            <span class=\"kw\">if </span>k &gt;= (deg + rhs - <span class=\"number\">1</span>) / rhs {\n<span data-nosnippet>282</span>                <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>283</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>284</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x0 = <span class=\"self\">self</span>[k].clone();\n<span data-nosnippet>285</span>                <span class=\"kw\">let </span>rev = T::one() / x0.clone();\n<span data-nosnippet>286</span>                <span class=\"kw\">let </span>x = {\n<span data-nosnippet>287</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = T::one();\n<span data-nosnippet>288</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = rhs;\n<span data-nosnippet>289</span>                    <span class=\"kw\">while </span>y &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>290</span>                        <span class=\"kw\">if </span>y &amp; <span class=\"number\">1 </span>== <span class=\"number\">1 </span>{\n<span data-nosnippet>291</span>                            x <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>292</span>                        }\n<span data-nosnippet>293</span>                        x0 <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>294</span>                        y &gt;&gt;= <span class=\"number\">1</span>;\n<span data-nosnippet>295</span>                    }\n<span data-nosnippet>296</span>                    x\n<span data-nosnippet>297</span>                };\n<span data-nosnippet>298</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (<span class=\"self\">self</span>.clone() * <span class=\"kw-2\">&amp;</span>rev) &gt;&gt; k;\n<span data-nosnippet>299</span>                f = (f.log(deg) * <span class=\"kw-2\">&amp;</span>T::from(rhs)).exp(deg) * <span class=\"kw-2\">&amp;</span>x;\n<span data-nosnippet>300</span>                f.truncate(deg - k * rhs);\n<span data-nosnippet>301</span>                f &lt;&lt;= k * rhs;\n<span data-nosnippet>302</span>                f\n<span data-nosnippet>303</span>            }\n<span data-nosnippet>304</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>305</span>            <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>306</span>        }\n<span data-nosnippet>307</span>    }\n<span data-nosnippet>308</span>}\n<span data-nosnippet>309</span>\n<span data-nosnippet>310</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>311</span><span class=\"kw\">where\n<span data-nosnippet>312</span>    </span>T: FormalPowerSeriesCoefficientSqrt,\n<span data-nosnippet>313</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>314</span>{\n<span data-nosnippet>315</span>    <span class=\"kw\">pub fn </span>sqrt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>316</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero() {\n<span data-nosnippet>317</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>318</span>                <span class=\"kw\">if </span>k % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>319</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>320</span>                } <span class=\"kw\">else if </span>deg &gt; k / <span class=\"number\">2 </span>{\n<span data-nosnippet>321</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self </span>&gt;&gt; k).sqrt(deg - k / <span class=\"number\">2</span>)<span class=\"question-mark\">? </span>&lt;&lt; (k / <span class=\"number\">2</span>));\n<span data-nosnippet>322</span>                }\n<span data-nosnippet>323</span>            }\n<span data-nosnippet>324</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>325</span>            <span class=\"kw\">let </span>inv2 = T::one() / (T::one() + T::one());\n<span data-nosnippet>326</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(<span class=\"self\">self</span>[<span class=\"number\">0</span>].sqrt_coefficient()<span class=\"question-mark\">?</span>);\n<span data-nosnippet>327</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>328</span>            <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>329</span>                f = (<span class=\"kw-2\">&amp;</span>f + <span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.<span class=\"highlight\">prefix_ref</span>(i * <span class=\"number\">2</span>) * f.inv(i * <span class=\"number\">2</span>))).prefix(i * <span class=\"number\">2</span>) * <span class=\"kw-2\">&amp;</span>inv2;\n<span data-nosnippet>330</span>                i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>331</span>            }\n<span data-nosnippet>332</span>            f.truncate(deg);\n<span data-nosnippet>333</span>            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(f);\n<span data-nosnippet>334</span>        }\n<span data-nosnippet>335</span>        <span class=\"prelude-val\">Some</span>(<span class=\"self\">Self</span>::zeros(deg))\n<span data-nosnippet>336</span>    }</code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.prefix\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#167-170\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.prefix\" class=\"fn\">prefix</a>(self, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[10,10],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#263&#34;,&#34;line 263&#34;],[[13,13],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#266&#34;,&#34;line 266&#34;],[[16,16],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#269&#34;,&#34;line 269&#34;],[[76,76],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#329&#34;,&#34;line 329&#34;],[[174,174],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#427&#34;,&#34;line 427&#34;],[[175,175],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#428&#34;,&#34;line 428&#34;],[[192,192],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#445&#34;,&#34;line 445&#34;],[[210,210],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#463&#34;,&#34;line 463&#34;],[[211,211],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#464&#34;,&#34;line 464&#34;],[[226,226],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#479&#34;,&#34;line 479&#34;],[[226,226],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#479&#34;,&#34;line 479&#34;],[[246,246],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#499&#34;,&#34;line 499&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#263\">line 263</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>253</span>    <span class=\"kw\">pub fn </span>exp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>254</span>        <span class=\"macro\">debug_assert!</span>(<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>255</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::one();\n<span data-nosnippet>256</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>257</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>258</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = -f.log(i * <span class=\"number\">2</span>);\n<span data-nosnippet>259</span>            g[<span class=\"number\">0</span>] += T::one();\n<span data-nosnippet>260</span>            <span class=\"kw\">for </span>(g, x) <span class=\"kw\">in </span>g.iter_mut().zip(<span class=\"self\">self</span>.iter().take(i * <span class=\"number\">2</span>)) {\n<span data-nosnippet>261</span>                <span class=\"kw-2\">*</span>g += x.clone();\n<span data-nosnippet>262</span>            }\n<span data-nosnippet>263</span>            f = (f * g).<span class=\"highlight focus\">prefix</span>(i * <span class=\"number\">2</span>);\n<span data-nosnippet>264</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>265</span>        }\n<span data-nosnippet>266</span>        f.<span class=\"highlight\">prefix</span>(deg)\n<span data-nosnippet>267</span>    }\n<span data-nosnippet>268</span>    <span class=\"kw\">pub fn </span>log(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>269</span>        (<span class=\"self\">self</span>.inv(deg) * <span class=\"self\">self</span>.clone().diff()).integral().<span class=\"highlight\">prefix</span>(deg)\n<span data-nosnippet>270</span>    }\n<span data-nosnippet>271</span>    <span class=\"kw\">pub fn </span>pow(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: usize, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>272</span>        <span class=\"kw\">if </span>rhs == <span class=\"number\">0 </span>{\n<span data-nosnippet>273</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::from_vec(\n<span data-nosnippet>274</span>                once(T::one())\n<span data-nosnippet>275</span>                    .chain(repeat_with(T::zero))\n<span data-nosnippet>276</span>                    .take(deg)\n<span data-nosnippet>277</span>                    .collect(),\n<span data-nosnippet>278</span>            );\n<span data-nosnippet>279</span>        }\n<span data-nosnippet>280</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>281</span>            <span class=\"kw\">if </span>k &gt;= (deg + rhs - <span class=\"number\">1</span>) / rhs {\n<span data-nosnippet>282</span>                <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>283</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>284</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x0 = <span class=\"self\">self</span>[k].clone();\n<span data-nosnippet>285</span>                <span class=\"kw\">let </span>rev = T::one() / x0.clone();\n<span data-nosnippet>286</span>                <span class=\"kw\">let </span>x = {\n<span data-nosnippet>287</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = T::one();\n<span data-nosnippet>288</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = rhs;\n<span data-nosnippet>289</span>                    <span class=\"kw\">while </span>y &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>290</span>                        <span class=\"kw\">if </span>y &amp; <span class=\"number\">1 </span>== <span class=\"number\">1 </span>{\n<span data-nosnippet>291</span>                            x <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>292</span>                        }\n<span data-nosnippet>293</span>                        x0 <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>294</span>                        y &gt;&gt;= <span class=\"number\">1</span>;\n<span data-nosnippet>295</span>                    }\n<span data-nosnippet>296</span>                    x\n<span data-nosnippet>297</span>                };\n<span data-nosnippet>298</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (<span class=\"self\">self</span>.clone() * <span class=\"kw-2\">&amp;</span>rev) &gt;&gt; k;\n<span data-nosnippet>299</span>                f = (f.log(deg) * <span class=\"kw-2\">&amp;</span>T::from(rhs)).exp(deg) * <span class=\"kw-2\">&amp;</span>x;\n<span data-nosnippet>300</span>                f.truncate(deg - k * rhs);\n<span data-nosnippet>301</span>                f &lt;&lt;= k * rhs;\n<span data-nosnippet>302</span>                f\n<span data-nosnippet>303</span>            }\n<span data-nosnippet>304</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>305</span>            <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>306</span>        }\n<span data-nosnippet>307</span>    }\n<span data-nosnippet>308</span>}\n<span data-nosnippet>309</span>\n<span data-nosnippet>310</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>311</span><span class=\"kw\">where\n<span data-nosnippet>312</span>    </span>T: FormalPowerSeriesCoefficientSqrt,\n<span data-nosnippet>313</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>314</span>{\n<span data-nosnippet>315</span>    <span class=\"kw\">pub fn </span>sqrt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>316</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero() {\n<span data-nosnippet>317</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>318</span>                <span class=\"kw\">if </span>k % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>319</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>320</span>                } <span class=\"kw\">else if </span>deg &gt; k / <span class=\"number\">2 </span>{\n<span data-nosnippet>321</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self </span>&gt;&gt; k).sqrt(deg - k / <span class=\"number\">2</span>)<span class=\"question-mark\">? </span>&lt;&lt; (k / <span class=\"number\">2</span>));\n<span data-nosnippet>322</span>                }\n<span data-nosnippet>323</span>            }\n<span data-nosnippet>324</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>325</span>            <span class=\"kw\">let </span>inv2 = T::one() / (T::one() + T::one());\n<span data-nosnippet>326</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(<span class=\"self\">self</span>[<span class=\"number\">0</span>].sqrt_coefficient()<span class=\"question-mark\">?</span>);\n<span data-nosnippet>327</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>328</span>            <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>329</span>                f = (<span class=\"kw-2\">&amp;</span>f + <span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.prefix_ref(i * <span class=\"number\">2</span>) * f.inv(i * <span class=\"number\">2</span>))).<span class=\"highlight\">prefix</span>(i * <span class=\"number\">2</span>) * <span class=\"kw-2\">&amp;</span>inv2;\n<span data-nosnippet>330</span>                i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>331</span>            }\n<span data-nosnippet>332</span>            f.truncate(deg);\n<span data-nosnippet>333</span>            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(f);\n<span data-nosnippet>334</span>        }\n<span data-nosnippet>335</span>        <span class=\"prelude-val\">Some</span>(<span class=\"self\">Self</span>::zeros(deg))\n<span data-nosnippet>336</span>    }\n<span data-nosnippet>337</span>}\n<span data-nosnippet>338</span>\n<span data-nosnippet>339</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>340</span><span class=\"kw\">where\n<span data-nosnippet>341</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>342</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>343</span>{\n<span data-nosnippet>344</span>    <span class=\"kw\">pub fn </span>count_subset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>345</span>    </span><span class=\"kw\">where\n<span data-nosnippet>346</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>347</span>    {\n<span data-nosnippet>348</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>349</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>350</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>351</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>352</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>353</span>                    <span class=\"kw\">if </span>j &amp; <span class=\"number\">1 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>354</span>                        f[d] += <span class=\"self\">self</span>[i].<a href=\"mod.rs.html#15\">clone</a>() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>355</span>                    } <span class=\"kw\">else </span>{\n<span data-nosnippet>356</span>                        f[d] -= <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>357</span>                    }\n<span data-nosnippet>358</span>                }\n<span data-nosnippet>359</span>            }\n<span data-nosnippet>360</span>        }\n<span data-nosnippet>361</span>        f.exp(deg)\n<span data-nosnippet>362</span>    }\n<span data-nosnippet>363</span>    <span class=\"kw\">pub fn </span>count_multiset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>364</span>    </span><span class=\"kw\">where\n<span data-nosnippet>365</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>366</span>    {\n<span data-nosnippet>367</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>368</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>369</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>370</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>371</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>372</span>                    f[d] += <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>373</span>                }\n<span data-nosnippet>374</span>            }\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>        f.exp(deg)\n<span data-nosnippet>377</span>    }\n<span data-nosnippet>378</span>    <span class=\"kw\">pub fn </span>bostan_mori(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>, <span class=\"kw-2\">mut </span>n: usize) -&gt; T {\n<span data-nosnippet>379</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"self\">self</span>;\n<span data-nosnippet>380</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = rhs;\n<span data-nosnippet>381</span>        <span class=\"kw\">while </span>n &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>382</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mq = q.clone();\n<span data-nosnippet>383</span>            mq.iter_mut()\n<span data-nosnippet>384</span>                .skip(<span class=\"number\">1</span>)\n<span data-nosnippet>385</span>                .step_by(<span class=\"number\">2</span>)\n<span data-nosnippet>386</span>                .for_each(|x| <span class=\"kw-2\">*</span>x = -x.clone());\n<span data-nosnippet>387</span>            <span class=\"kw\">let </span>u = p * mq.clone();\n<span data-nosnippet>388</span>            p = <span class=\"kw\">if </span>n % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>{ u.even() } <span class=\"kw\">else </span>{ u.odd() };\n<span data-nosnippet>389</span>            q = (q * mq).even();\n<span data-nosnippet>390</span>            n /= <span class=\"number\">2</span>;\n<span data-nosnippet>391</span>        }\n<span data-nosnippet>392</span>        p[<span class=\"number\">0</span>].clone() / q[<span class=\"number\">0</span>].clone()\n<span data-nosnippet>393</span>    }\n<span data-nosnippet>394</span>    <span class=\"kw\">fn </span>middle_product(<span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>C::F, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>395</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>396</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = C::transform(<span class=\"self\">self</span>.reversed().data, deg);\n<span data-nosnippet>397</span>        C::multiply(<span class=\"kw-2\">&amp;mut </span>s, other);\n<span data-nosnippet>398</span>        <span class=\"self\">Self</span>::from_vec((C::inverse_transform(s, deg))[n - <span class=\"number\">1</span>..].to_vec())\n<span data-nosnippet>399</span>    }\n<span data-nosnippet>400</span>    <span class=\"kw\">pub fn </span>multipoint_evaluation(<span class=\"self\">self</span>, points: <span class=\"kw-2\">&amp;</span>[T]) -&gt; Vec&lt;T&gt; {\n<span data-nosnippet>401</span>        <span class=\"kw\">let </span>n = points.len();\n<span data-nosnippet>402</span>        <span class=\"kw\">if </span>n &lt;= <span class=\"number\">32 </span>{\n<span data-nosnippet>403</span>            <span class=\"kw\">return </span>points.iter().map(|p| <span class=\"self\">self</span>.eval(p.clone())).collect();\n<span data-nosnippet>404</span>        }\n<span data-nosnippet>405</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>subproduct_tree = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>406</span>        subproduct_tree.resize_with(n, Zero::zero);\n<span data-nosnippet>407</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span>points {\n<span data-nosnippet>408</span>            subproduct_tree.push(<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[-x.clone(), T::one()]));\n<span data-nosnippet>409</span>        }\n<span data-nosnippet>410</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">1</span>..n).rev() {\n<span data-nosnippet>411</span>            subproduct_tree[i] = <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2</span>] * <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2 </span>+ <span class=\"number\">1</span>];\n<span data-nosnippet>412</span>        }\n<span data-nosnippet>413</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uptree_t = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>414</span>        uptree_t.resize_with(<span class=\"number\">1</span>, Zero::zero);\n<span data-nosnippet>415</span>        subproduct_tree.reverse();\n<span data-nosnippet>416</span>        subproduct_tree.pop();\n<span data-nosnippet>417</span>        <span class=\"kw\">let </span>m = <span class=\"self\">self</span>.length();\n<span data-nosnippet>418</span>        <span class=\"kw\">let </span>v = subproduct_tree.pop().unwrap().reversed().resized(m);\n<span data-nosnippet>419</span>        <span class=\"kw\">let </span>s = C::transform(<span class=\"self\">self</span>.data, m * <span class=\"number\">2</span>);\n<span data-nosnippet>420</span>        uptree_t.push(v.inv(m).middle_product(<span class=\"kw-2\">&amp;</span>s, m * <span class=\"number\">2</span>).resized(n).reversed());\n<span data-nosnippet>421</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>422</span>            <span class=\"kw\">let </span>subl = subproduct_tree.pop().unwrap();\n<span data-nosnippet>423</span>            <span class=\"kw\">let </span>subr = subproduct_tree.pop().unwrap();\n<span data-nosnippet>424</span>            <span class=\"kw\">let </span>(dl, dr) = (subl.length(), subr.length());\n<span data-nosnippet>425</span>            <span class=\"kw\">let </span>len = dl.max(dr) + uptree_t[i].length();\n<span data-nosnippet>426</span>            <span class=\"kw\">let </span>s = C::transform(uptree_t[i].data.to_vec(), len);\n<span data-nosnippet>427</span>            uptree_t.push(subr.middle_product(<span class=\"kw-2\">&amp;</span>s, len).<span class=\"highlight\">prefix</span>(dl));\n<span data-nosnippet>428</span>            uptree_t.push(subl.middle_product(<span class=\"kw-2\">&amp;</span>s, len).<span class=\"highlight\">prefix</span>(dr));\n<span data-nosnippet>429</span>        }\n<span data-nosnippet>430</span>        uptree_t[n..]\n<span data-nosnippet>431</span>            .iter()\n<span data-nosnippet>432</span>            .map(|u| u.data.first().cloned().unwrap_or_else(Zero::zero))\n<span data-nosnippet>433</span>            .collect()\n<span data-nosnippet>434</span>    }\n<span data-nosnippet>435</span>    <span class=\"kw\">pub fn </span>product_all&lt;I&gt;(iter: I, deg: usize) -&gt; <span class=\"self\">Self\n<span data-nosnippet>436</span>    </span><span class=\"kw\">where\n<span data-nosnippet>437</span>        </span>I: IntoIterator&lt;Item = <span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>438</span>    {\n<span data-nosnippet>439</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>&gt; = iter\n<span data-nosnippet>440</span>            .into_iter()\n<span data-nosnippet>441</span>            .map(|f| PartialIgnoredOrd(Reverse(f.length()), f))\n<span data-nosnippet>442</span>            .collect();\n<span data-nosnippet>443</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, x)) = heap.pop() {\n<span data-nosnippet>444</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, y)) = heap.pop() {\n<span data-nosnippet>445</span>                <span class=\"kw\">let </span>z = (x * y).<span class=\"highlight\">prefix</span>(deg);\n<span data-nosnippet>446</span>                heap.push(PartialIgnoredOrd(Reverse(z.length()), z));\n<span data-nosnippet>447</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>448</span>                <span class=\"kw\">return </span>x;\n<span data-nosnippet>449</span>            }\n<span data-nosnippet>450</span>        }\n<span data-nosnippet>451</span>        <span class=\"self\">Self</span>::one()\n<span data-nosnippet>452</span>    }\n<span data-nosnippet>453</span>    <span class=\"kw\">pub fn </span>sum_all_rational&lt;I&gt;(iter: I, deg: usize) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>)\n<span data-nosnippet>454</span>    <span class=\"kw\">where\n<span data-nosnippet>455</span>        </span>I: IntoIterator&lt;Item = (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>)&gt;,\n<span data-nosnippet>456</span>    {\n<span data-nosnippet>457</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>&gt; = iter\n<span data-nosnippet>458</span>            .into_iter()\n<span data-nosnippet>459</span>            .map(|(f, g)| PartialIgnoredOrd(Reverse(f.length().max(g.length())), (f, g)))\n<span data-nosnippet>460</span>            .collect();\n<span data-nosnippet>461</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, (xa, xb))) = heap.pop() {\n<span data-nosnippet>462</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, (ya, yb))) = heap.pop() {\n<span data-nosnippet>463</span>                <span class=\"kw\">let </span>zb = (<span class=\"kw-2\">&amp;</span>xb * <span class=\"kw-2\">&amp;</span>yb).<span class=\"highlight\">prefix</span>(deg);\n<span data-nosnippet>464</span>                <span class=\"kw\">let </span>za = (xa * yb + ya * xb).<span class=\"highlight\">prefix</span>(deg);\n<span data-nosnippet>465</span>                heap.push(PartialIgnoredOrd(\n<span data-nosnippet>466</span>                    Reverse(za.length().max(zb.length())),\n<span data-nosnippet>467</span>                    (za, zb),\n<span data-nosnippet>468</span>                ));\n<span data-nosnippet>469</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>470</span>                <span class=\"kw\">return </span>(xa, xb);\n<span data-nosnippet>471</span>            }\n<span data-nosnippet>472</span>        }\n<span data-nosnippet>473</span>        (<span class=\"self\">Self</span>::zero(), <span class=\"self\">Self</span>::one())\n<span data-nosnippet>474</span>    }\n<span data-nosnippet>475</span>    <span class=\"kw\">pub fn </span>kth_term_of_linearly_recurrence(<span class=\"self\">self</span>, a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>476</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>477</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>478</span>        }\n<span data-nosnippet>479</span>        <span class=\"kw\">let </span>p = (<span class=\"self\">Self</span>::from_vec(a).<span class=\"highlight\">prefix</span>(<span class=\"self\">self</span>.length() - <span class=\"number\">1</span>) * <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>).<span class=\"highlight\">prefix</span>(<span class=\"self\">self</span>.length() - <span class=\"number\">1</span>);\n<span data-nosnippet>480</span>        p.bostan_mori(<span class=\"self\">self</span>, k)\n<span data-nosnippet>481</span>    }\n<span data-nosnippet>482</span>    <span class=\"kw\">pub fn </span>kth_term(a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>483</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>484</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>485</span>        }\n<span data-nosnippet>486</span>        <span class=\"self\">Self</span>::from_vec(berlekamp_massey(<span class=\"kw-2\">&amp;</span>a)).kth_term_of_linearly_recurrence(a, k)\n<span data-nosnippet>487</span>    }\n<span data-nosnippet>488</span>    <span class=\"doccomment\">/// sum_i a_i exp(b_i x)\n<span data-nosnippet>489</span>    </span><span class=\"kw\">pub fn </span>linear_sum_of_exp&lt;I, F&gt;(iter: I, deg: usize, <span class=\"kw-2\">mut </span>inv_fact: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>490</span>    </span><span class=\"kw\">where\n<span data-nosnippet>491</span>        </span>I: IntoIterator&lt;Item = (T, T)&gt;,\n<span data-nosnippet>492</span>        F: FnMut(usize) -&gt; T,\n<span data-nosnippet>493</span>    {\n<span data-nosnippet>494</span>        <span class=\"kw\">let </span>(p, q) = <span class=\"self\">Self</span>::sum_all_rational(\n<span data-nosnippet>495</span>            iter.into_iter()\n<span data-nosnippet>496</span>                .map(|(a, b)| (<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[a]), <span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[T::one(), -b]))),\n<span data-nosnippet>497</span>            deg,\n<span data-nosnippet>498</span>        );\n<span data-nosnippet>499</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (p * q.inv(deg)).<span class=\"highlight\">prefix</span>(deg);\n<span data-nosnippet>500</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..f.length() {\n<span data-nosnippet>501</span>            f[i] <span class=\"kw-2\">*</span>= inv_fact(i);\n<span data-nosnippet>502</span>        }\n<span data-nosnippet>503</span>        f\n<span data-nosnippet>504</span>    }</code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.even\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#171-178\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.even\" class=\"fn\">even</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[10,10],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#388&#34;,&#34;line 388&#34;],[[11,11],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#389&#34;,&#34;line 389&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#388\">line 388</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>378</span>    <span class=\"kw\">pub fn </span>bostan_mori(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>, <span class=\"kw-2\">mut </span>n: usize) -&gt; T {\n<span data-nosnippet>379</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"self\">self</span>;\n<span data-nosnippet>380</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = rhs;\n<span data-nosnippet>381</span>        <span class=\"kw\">while </span>n &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>382</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mq = q.clone();\n<span data-nosnippet>383</span>            mq.iter_mut()\n<span data-nosnippet>384</span>                .skip(<span class=\"number\">1</span>)\n<span data-nosnippet>385</span>                .step_by(<span class=\"number\">2</span>)\n<span data-nosnippet>386</span>                .for_each(|x| <span class=\"kw-2\">*</span>x = -x.clone());\n<span data-nosnippet>387</span>            <span class=\"kw\">let </span>u = p * mq.clone();\n<span data-nosnippet>388</span>            p = <span class=\"kw\">if </span>n % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>{ u.<span class=\"highlight focus\">even</span>() } <span class=\"kw\">else </span>{ u.odd() };\n<span data-nosnippet>389</span>            q = (q * mq).<span class=\"highlight\">even</span>();\n<span data-nosnippet>390</span>            n /= <span class=\"number\">2</span>;\n<span data-nosnippet>391</span>        }\n<span data-nosnippet>392</span>        p[<span class=\"number\">0</span>].clone() / q[<span class=\"number\">0</span>].clone()\n<span data-nosnippet>393</span>    }</code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.odd\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#179-186\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.odd\" class=\"fn\">odd</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-3\"><a href=\"#scraped-examples-3\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[10,10],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#388&#34;,&#34;line 388&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#388\">line 388</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>378</span>    <span class=\"kw\">pub fn </span>bostan_mori(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>, <span class=\"kw-2\">mut </span>n: usize) -&gt; T {\n<span data-nosnippet>379</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"self\">self</span>;\n<span data-nosnippet>380</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = rhs;\n<span data-nosnippet>381</span>        <span class=\"kw\">while </span>n &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>382</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mq = q.clone();\n<span data-nosnippet>383</span>            mq.iter_mut()\n<span data-nosnippet>384</span>                .skip(<span class=\"number\">1</span>)\n<span data-nosnippet>385</span>                .step_by(<span class=\"number\">2</span>)\n<span data-nosnippet>386</span>                .for_each(|x| <span class=\"kw-2\">*</span>x = -x.clone());\n<span data-nosnippet>387</span>            <span class=\"kw\">let </span>u = p * mq.clone();\n<span data-nosnippet>388</span>            p = <span class=\"kw\">if </span>n % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>{ u.even() } <span class=\"kw\">else </span>{ u.<span class=\"highlight focus\">odd</span>() };\n<span data-nosnippet>389</span>            q = (q * mq).even();\n<span data-nosnippet>390</span>            n /= <span class=\"number\">2</span>;\n<span data-nosnippet>391</span>        }\n<span data-nosnippet>392</span>        p[<span class=\"number\">0</span>].clone() / q[<span class=\"number\">0</span>].clone()\n<span data-nosnippet>393</span>    }</code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.diff\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#187-197\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.diff\" class=\"fn\">diff</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-4\"><a href=\"#scraped-examples-4\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#269&#34;,&#34;line 269&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#269\">line 269</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>268</span>    <span class=\"kw\">pub fn </span>log(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>269</span>        (<span class=\"self\">self</span>.inv(deg) * <span class=\"self\">self</span>.clone().<span class=\"highlight focus\">diff</span>()).integral().prefix(deg)\n<span data-nosnippet>270</span>    }</code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.integral\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#198-215\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.integral\" class=\"fn\">integral</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-5\"><a href=\"#scraped-examples-5\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#269&#34;,&#34;line 269&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#269\">line 269</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>268</span>    <span class=\"kw\">pub fn </span>log(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>269</span>        (<span class=\"self\">self</span>.inv(deg) * <span class=\"self\">self</span>.clone().diff()).<span class=\"highlight focus\">integral</span>().prefix(deg)\n<span data-nosnippet>270</span>    }</code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.eval\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#216-224\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.eval\" class=\"fn\">eval</a>(&amp;self, x: T) -&gt; T</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-6\"><a href=\"#scraped-examples-6\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[3,3],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#403&#34;,&#34;line 403&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#403\">line 403</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>400</span>    <span class=\"kw\">pub fn </span>multipoint_evaluation(<span class=\"self\">self</span>, points: <span class=\"kw-2\">&amp;</span>[T]) -&gt; Vec&lt;T&gt; {\n<span data-nosnippet>401</span>        <span class=\"kw\">let </span>n = points.len();\n<span data-nosnippet>402</span>        <span class=\"kw\">if </span>n &lt;= <span class=\"number\">32 </span>{\n<span data-nosnippet>403</span>            <span class=\"kw\">return </span>points.iter().map(|p| <span class=\"self\">self</span>.<span class=\"highlight focus\">eval</span>(p.clone())).collect();\n<span data-nosnippet>404</span>        }\n<span data-nosnippet>405</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>subproduct_tree = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>406</span>        subproduct_tree.resize_with(n, Zero::zero);\n<span data-nosnippet>407</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span>points {\n<span data-nosnippet>408</span>            subproduct_tree.push(<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[-x.clone(), T::one()]));\n<span data-nosnippet>409</span>        }\n<span data-nosnippet>410</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">1</span>..n).rev() {\n<span data-nosnippet>411</span>            subproduct_tree[i] = <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2</span>] * <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2 </span>+ <span class=\"number\">1</span>];\n<span data-nosnippet>412</span>        }\n<span data-nosnippet>413</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uptree_t = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>414</span>        uptree_t.resize_with(<span class=\"number\">1</span>, Zero::zero);\n<span data-nosnippet>415</span>        subproduct_tree.reverse();\n<span data-nosnippet>416</span>        subproduct_tree.pop();\n<span data-nosnippet>417</span>        <span class=\"kw\">let </span>m = <span class=\"self\">self</span>.length();\n<span data-nosnippet>418</span>        <span class=\"kw\">let </span>v = subproduct_tree.pop().unwrap().reversed().resized(m);\n<span data-nosnippet>419</span>        <span class=\"kw\">let </span>s = C::transform(<span class=\"self\">self</span>.data, m * <span class=\"number\">2</span>);\n<span data-nosnippet>420</span>        uptree_t.push(v.inv(m).middle_product(<span class=\"kw-2\">&amp;</span>s, m * <span class=\"number\">2</span>).resized(n).reversed());\n<span data-nosnippet>421</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>422</span>            <span class=\"kw\">let </span>subl = subproduct_tree.pop().unwrap();\n<span data-nosnippet>423</span>            <span class=\"kw\">let </span>subr = subproduct_tree.pop().unwrap();\n<span data-nosnippet>424</span>            <span class=\"kw\">let </span>(dl, dr) = (subl.length(), subr.length());\n<span data-nosnippet>425</span>            <span class=\"kw\">let </span>len = dl.max(dr) + uptree_t[i].length();\n<span data-nosnippet>426</span>            <span class=\"kw\">let </span>s = C::transform(uptree_t[i].data.to_vec(), len);\n<span data-nosnippet>427</span>            uptree_t.push(subr.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dl));\n<span data-nosnippet>428</span>            uptree_t.push(subl.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dr));\n<span data-nosnippet>429</span>        }\n<span data-nosnippet>430</span>        uptree_t[n..]\n<span data-nosnippet>431</span>            .iter()\n<span data-nosnippet>432</span>            .map(|u| u.data.first().cloned().unwrap_or_else(Zero::zero))\n<span data-nosnippet>433</span>            .collect()\n<span data-nosnippet>434</span>    }</code></pre></div></div></div></details></div></details>",0,"competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#227-308\">Source</a><a href=\"#impl-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.inv\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#232-252\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.inv\" class=\"fn\">inv</a>(&amp;self, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[1,1],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#269&#34;,&#34;line 269&#34;],[[61,61],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#329&#34;,&#34;line 329&#34;],[[152,152],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#420&#34;,&#34;line 420&#34;],[[231,231],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#499&#34;,&#34;line 499&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#269\">line 269</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>268</span>    <span class=\"kw\">pub fn </span>log(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>269</span>        (<span class=\"self\">self</span>.<span class=\"highlight focus\">inv</span>(deg) * <span class=\"self\">self</span>.clone().diff()).integral().prefix(deg)\n<span data-nosnippet>270</span>    }\n<span data-nosnippet>271</span>    <span class=\"kw\">pub fn </span>pow(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: usize, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>272</span>        <span class=\"kw\">if </span>rhs == <span class=\"number\">0 </span>{\n<span data-nosnippet>273</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::from_vec(\n<span data-nosnippet>274</span>                once(T::one())\n<span data-nosnippet>275</span>                    .chain(repeat_with(T::zero))\n<span data-nosnippet>276</span>                    .take(deg)\n<span data-nosnippet>277</span>                    .collect(),\n<span data-nosnippet>278</span>            );\n<span data-nosnippet>279</span>        }\n<span data-nosnippet>280</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>281</span>            <span class=\"kw\">if </span>k &gt;= (deg + rhs - <span class=\"number\">1</span>) / rhs {\n<span data-nosnippet>282</span>                <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>283</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>284</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x0 = <span class=\"self\">self</span>[k].clone();\n<span data-nosnippet>285</span>                <span class=\"kw\">let </span>rev = T::one() / x0.clone();\n<span data-nosnippet>286</span>                <span class=\"kw\">let </span>x = {\n<span data-nosnippet>287</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = T::one();\n<span data-nosnippet>288</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = rhs;\n<span data-nosnippet>289</span>                    <span class=\"kw\">while </span>y &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>290</span>                        <span class=\"kw\">if </span>y &amp; <span class=\"number\">1 </span>== <span class=\"number\">1 </span>{\n<span data-nosnippet>291</span>                            x <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>292</span>                        }\n<span data-nosnippet>293</span>                        x0 <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>294</span>                        y &gt;&gt;= <span class=\"number\">1</span>;\n<span data-nosnippet>295</span>                    }\n<span data-nosnippet>296</span>                    x\n<span data-nosnippet>297</span>                };\n<span data-nosnippet>298</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (<span class=\"self\">self</span>.clone() * <span class=\"kw-2\">&amp;</span>rev) &gt;&gt; k;\n<span data-nosnippet>299</span>                f = (f.log(deg) * <span class=\"kw-2\">&amp;</span>T::from(rhs)).exp(deg) * <span class=\"kw-2\">&amp;</span>x;\n<span data-nosnippet>300</span>                f.truncate(deg - k * rhs);\n<span data-nosnippet>301</span>                f &lt;&lt;= k * rhs;\n<span data-nosnippet>302</span>                f\n<span data-nosnippet>303</span>            }\n<span data-nosnippet>304</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>305</span>            <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>306</span>        }\n<span data-nosnippet>307</span>    }\n<span data-nosnippet>308</span>}\n<span data-nosnippet>309</span>\n<span data-nosnippet>310</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>311</span><span class=\"kw\">where\n<span data-nosnippet>312</span>    </span>T: FormalPowerSeriesCoefficientSqrt,\n<span data-nosnippet>313</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>314</span>{\n<span data-nosnippet>315</span>    <span class=\"kw\">pub fn </span>sqrt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>316</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero() {\n<span data-nosnippet>317</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>318</span>                <span class=\"kw\">if </span>k % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>319</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>320</span>                } <span class=\"kw\">else if </span>deg &gt; k / <span class=\"number\">2 </span>{\n<span data-nosnippet>321</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self </span>&gt;&gt; k).sqrt(deg - k / <span class=\"number\">2</span>)<span class=\"question-mark\">? </span>&lt;&lt; (k / <span class=\"number\">2</span>));\n<span data-nosnippet>322</span>                }\n<span data-nosnippet>323</span>            }\n<span data-nosnippet>324</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>325</span>            <span class=\"kw\">let </span>inv2 = T::one() / (T::one() + T::one());\n<span data-nosnippet>326</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(<span class=\"self\">self</span>[<span class=\"number\">0</span>].sqrt_coefficient()<span class=\"question-mark\">?</span>);\n<span data-nosnippet>327</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>328</span>            <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>329</span>                f = (<span class=\"kw-2\">&amp;</span>f + <span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.prefix_ref(i * <span class=\"number\">2</span>) * f.<span class=\"highlight\">inv</span>(i * <span class=\"number\">2</span>))).prefix(i * <span class=\"number\">2</span>) * <span class=\"kw-2\">&amp;</span>inv2;\n<span data-nosnippet>330</span>                i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>331</span>            }\n<span data-nosnippet>332</span>            f.truncate(deg);\n<span data-nosnippet>333</span>            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(f);\n<span data-nosnippet>334</span>        }\n<span data-nosnippet>335</span>        <span class=\"prelude-val\">Some</span>(<span class=\"self\">Self</span>::zeros(deg))\n<span data-nosnippet>336</span>    }\n<span data-nosnippet>337</span>}\n<span data-nosnippet>338</span>\n<span data-nosnippet>339</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>340</span><span class=\"kw\">where\n<span data-nosnippet>341</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>342</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>343</span>{\n<span data-nosnippet>344</span>    <span class=\"kw\">pub fn </span>count_subset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>345</span>    </span><span class=\"kw\">where\n<span data-nosnippet>346</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>347</span>    {\n<span data-nosnippet>348</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>349</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>350</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>351</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>352</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>353</span>                    <span class=\"kw\">if </span>j &amp; <span class=\"number\">1 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>354</span>                        f[d] += <span class=\"self\">self</span>[i].<a href=\"mod.rs.html#15\">clone</a>() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>355</span>                    } <span class=\"kw\">else </span>{\n<span data-nosnippet>356</span>                        f[d] -= <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>357</span>                    }\n<span data-nosnippet>358</span>                }\n<span data-nosnippet>359</span>            }\n<span data-nosnippet>360</span>        }\n<span data-nosnippet>361</span>        f.exp(deg)\n<span data-nosnippet>362</span>    }\n<span data-nosnippet>363</span>    <span class=\"kw\">pub fn </span>count_multiset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>364</span>    </span><span class=\"kw\">where\n<span data-nosnippet>365</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>366</span>    {\n<span data-nosnippet>367</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>368</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>369</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>370</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>371</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>372</span>                    f[d] += <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>373</span>                }\n<span data-nosnippet>374</span>            }\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>        f.exp(deg)\n<span data-nosnippet>377</span>    }\n<span data-nosnippet>378</span>    <span class=\"kw\">pub fn </span>bostan_mori(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>, <span class=\"kw-2\">mut </span>n: usize) -&gt; T {\n<span data-nosnippet>379</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>p = <span class=\"self\">self</span>;\n<span data-nosnippet>380</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>q = rhs;\n<span data-nosnippet>381</span>        <span class=\"kw\">while </span>n &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>382</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>mq = q.clone();\n<span data-nosnippet>383</span>            mq.iter_mut()\n<span data-nosnippet>384</span>                .skip(<span class=\"number\">1</span>)\n<span data-nosnippet>385</span>                .step_by(<span class=\"number\">2</span>)\n<span data-nosnippet>386</span>                .for_each(|x| <span class=\"kw-2\">*</span>x = -x.clone());\n<span data-nosnippet>387</span>            <span class=\"kw\">let </span>u = p * mq.clone();\n<span data-nosnippet>388</span>            p = <span class=\"kw\">if </span>n % <span class=\"number\">2 </span>== <span class=\"number\">0 </span>{ u.even() } <span class=\"kw\">else </span>{ u.odd() };\n<span data-nosnippet>389</span>            q = (q * mq).even();\n<span data-nosnippet>390</span>            n /= <span class=\"number\">2</span>;\n<span data-nosnippet>391</span>        }\n<span data-nosnippet>392</span>        p[<span class=\"number\">0</span>].clone() / q[<span class=\"number\">0</span>].clone()\n<span data-nosnippet>393</span>    }\n<span data-nosnippet>394</span>    <span class=\"kw\">fn </span>middle_product(<span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>C::F, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>395</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>396</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = C::transform(<span class=\"self\">self</span>.reversed().data, deg);\n<span data-nosnippet>397</span>        C::multiply(<span class=\"kw-2\">&amp;mut </span>s, other);\n<span data-nosnippet>398</span>        <span class=\"self\">Self</span>::from_vec((C::inverse_transform(s, deg))[n - <span class=\"number\">1</span>..].to_vec())\n<span data-nosnippet>399</span>    }\n<span data-nosnippet>400</span>    <span class=\"kw\">pub fn </span>multipoint_evaluation(<span class=\"self\">self</span>, points: <span class=\"kw-2\">&amp;</span>[T]) -&gt; Vec&lt;T&gt; {\n<span data-nosnippet>401</span>        <span class=\"kw\">let </span>n = points.len();\n<span data-nosnippet>402</span>        <span class=\"kw\">if </span>n &lt;= <span class=\"number\">32 </span>{\n<span data-nosnippet>403</span>            <span class=\"kw\">return </span>points.iter().map(|p| <span class=\"self\">self</span>.eval(p.clone())).collect();\n<span data-nosnippet>404</span>        }\n<span data-nosnippet>405</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>subproduct_tree = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>406</span>        subproduct_tree.resize_with(n, Zero::zero);\n<span data-nosnippet>407</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span>points {\n<span data-nosnippet>408</span>            subproduct_tree.push(<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[-x.clone(), T::one()]));\n<span data-nosnippet>409</span>        }\n<span data-nosnippet>410</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">1</span>..n).rev() {\n<span data-nosnippet>411</span>            subproduct_tree[i] = <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2</span>] * <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2 </span>+ <span class=\"number\">1</span>];\n<span data-nosnippet>412</span>        }\n<span data-nosnippet>413</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uptree_t = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>414</span>        uptree_t.resize_with(<span class=\"number\">1</span>, Zero::zero);\n<span data-nosnippet>415</span>        subproduct_tree.reverse();\n<span data-nosnippet>416</span>        subproduct_tree.pop();\n<span data-nosnippet>417</span>        <span class=\"kw\">let </span>m = <span class=\"self\">self</span>.length();\n<span data-nosnippet>418</span>        <span class=\"kw\">let </span>v = subproduct_tree.pop().unwrap().reversed().resized(m);\n<span data-nosnippet>419</span>        <span class=\"kw\">let </span>s = C::transform(<span class=\"self\">self</span>.data, m * <span class=\"number\">2</span>);\n<span data-nosnippet>420</span>        uptree_t.push(v.<span class=\"highlight\">inv</span>(m).middle_product(<span class=\"kw-2\">&amp;</span>s, m * <span class=\"number\">2</span>).resized(n).reversed());\n<span data-nosnippet>421</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>422</span>            <span class=\"kw\">let </span>subl = subproduct_tree.pop().unwrap();\n<span data-nosnippet>423</span>            <span class=\"kw\">let </span>subr = subproduct_tree.pop().unwrap();\n<span data-nosnippet>424</span>            <span class=\"kw\">let </span>(dl, dr) = (subl.length(), subr.length());\n<span data-nosnippet>425</span>            <span class=\"kw\">let </span>len = dl.max(dr) + uptree_t[i].length();\n<span data-nosnippet>426</span>            <span class=\"kw\">let </span>s = C::transform(uptree_t[i].data.to_vec(), len);\n<span data-nosnippet>427</span>            uptree_t.push(subr.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dl));\n<span data-nosnippet>428</span>            uptree_t.push(subl.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dr));\n<span data-nosnippet>429</span>        }\n<span data-nosnippet>430</span>        uptree_t[n..]\n<span data-nosnippet>431</span>            .iter()\n<span data-nosnippet>432</span>            .map(|u| u.data.first().cloned().unwrap_or_else(Zero::zero))\n<span data-nosnippet>433</span>            .collect()\n<span data-nosnippet>434</span>    }\n<span data-nosnippet>435</span>    <span class=\"kw\">pub fn </span>product_all&lt;I&gt;(iter: I, deg: usize) -&gt; <span class=\"self\">Self\n<span data-nosnippet>436</span>    </span><span class=\"kw\">where\n<span data-nosnippet>437</span>        </span>I: IntoIterator&lt;Item = <span class=\"self\">Self</span>&gt;,\n<span data-nosnippet>438</span>    {\n<span data-nosnippet>439</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>&gt; = iter\n<span data-nosnippet>440</span>            .into_iter()\n<span data-nosnippet>441</span>            .map(|f| PartialIgnoredOrd(Reverse(f.length()), f))\n<span data-nosnippet>442</span>            .collect();\n<span data-nosnippet>443</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, x)) = heap.pop() {\n<span data-nosnippet>444</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, y)) = heap.pop() {\n<span data-nosnippet>445</span>                <span class=\"kw\">let </span>z = (x * y).prefix(deg);\n<span data-nosnippet>446</span>                heap.push(PartialIgnoredOrd(Reverse(z.length()), z));\n<span data-nosnippet>447</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>448</span>                <span class=\"kw\">return </span>x;\n<span data-nosnippet>449</span>            }\n<span data-nosnippet>450</span>        }\n<span data-nosnippet>451</span>        <span class=\"self\">Self</span>::one()\n<span data-nosnippet>452</span>    }\n<span data-nosnippet>453</span>    <span class=\"kw\">pub fn </span>sum_all_rational&lt;I&gt;(iter: I, deg: usize) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>)\n<span data-nosnippet>454</span>    <span class=\"kw\">where\n<span data-nosnippet>455</span>        </span>I: IntoIterator&lt;Item = (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>)&gt;,\n<span data-nosnippet>456</span>    {\n<span data-nosnippet>457</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heap: BinaryHeap&lt;<span class=\"kw\">_</span>&gt; = iter\n<span data-nosnippet>458</span>            .into_iter()\n<span data-nosnippet>459</span>            .map(|(f, g)| PartialIgnoredOrd(Reverse(f.length().max(g.length())), (f, g)))\n<span data-nosnippet>460</span>            .collect();\n<span data-nosnippet>461</span>        <span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, (xa, xb))) = heap.pop() {\n<span data-nosnippet>462</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(PartialIgnoredOrd(<span class=\"kw\">_</span>, (ya, yb))) = heap.pop() {\n<span data-nosnippet>463</span>                <span class=\"kw\">let </span>zb = (<span class=\"kw-2\">&amp;</span>xb * <span class=\"kw-2\">&amp;</span>yb).prefix(deg);\n<span data-nosnippet>464</span>                <span class=\"kw\">let </span>za = (xa * yb + ya * xb).prefix(deg);\n<span data-nosnippet>465</span>                heap.push(PartialIgnoredOrd(\n<span data-nosnippet>466</span>                    Reverse(za.length().max(zb.length())),\n<span data-nosnippet>467</span>                    (za, zb),\n<span data-nosnippet>468</span>                ));\n<span data-nosnippet>469</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>470</span>                <span class=\"kw\">return </span>(xa, xb);\n<span data-nosnippet>471</span>            }\n<span data-nosnippet>472</span>        }\n<span data-nosnippet>473</span>        (<span class=\"self\">Self</span>::zero(), <span class=\"self\">Self</span>::one())\n<span data-nosnippet>474</span>    }\n<span data-nosnippet>475</span>    <span class=\"kw\">pub fn </span>kth_term_of_linearly_recurrence(<span class=\"self\">self</span>, a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>476</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>477</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>478</span>        }\n<span data-nosnippet>479</span>        <span class=\"kw\">let </span>p = (<span class=\"self\">Self</span>::from_vec(a).prefix(<span class=\"self\">self</span>.length() - <span class=\"number\">1</span>) * <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>).prefix(<span class=\"self\">self</span>.length() - <span class=\"number\">1</span>);\n<span data-nosnippet>480</span>        p.bostan_mori(<span class=\"self\">self</span>, k)\n<span data-nosnippet>481</span>    }\n<span data-nosnippet>482</span>    <span class=\"kw\">pub fn </span>kth_term(a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>483</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>484</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>485</span>        }\n<span data-nosnippet>486</span>        <span class=\"self\">Self</span>::from_vec(berlekamp_massey(<span class=\"kw-2\">&amp;</span>a)).kth_term_of_linearly_recurrence(a, k)\n<span data-nosnippet>487</span>    }\n<span data-nosnippet>488</span>    <span class=\"doccomment\">/// sum_i a_i exp(b_i x)\n<span data-nosnippet>489</span>    </span><span class=\"kw\">pub fn </span>linear_sum_of_exp&lt;I, F&gt;(iter: I, deg: usize, <span class=\"kw-2\">mut </span>inv_fact: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>490</span>    </span><span class=\"kw\">where\n<span data-nosnippet>491</span>        </span>I: IntoIterator&lt;Item = (T, T)&gt;,\n<span data-nosnippet>492</span>        F: FnMut(usize) -&gt; T,\n<span data-nosnippet>493</span>    {\n<span data-nosnippet>494</span>        <span class=\"kw\">let </span>(p, q) = <span class=\"self\">Self</span>::sum_all_rational(\n<span data-nosnippet>495</span>            iter.into_iter()\n<span data-nosnippet>496</span>                .map(|(a, b)| (<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[a]), <span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[T::one(), -b]))),\n<span data-nosnippet>497</span>            deg,\n<span data-nosnippet>498</span>        );\n<span data-nosnippet>499</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (p * q.<span class=\"highlight\">inv</span>(deg)).prefix(deg);\n<span data-nosnippet>500</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..f.length() {\n<span data-nosnippet>501</span>            f[i] <span class=\"kw-2\">*</span>= inv_fact(i);\n<span data-nosnippet>502</span>        }\n<span data-nosnippet>503</span>        f\n<span data-nosnippet>504</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example expanded\" data-locs=\"[[[5,5],&#34;src/library_checker/math/inv_of_formal_power_series.rs.html#11&#34;,&#34;line 11&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/inv_of_formal_power_series.rs (<a href=\"src/library_checker/math/inv_of_formal_power_series.rs.html#11\">line 11</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>inv_of_formal_power_series(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, n, a: [MInt998244353; n]);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>f = Fps998244353::from_vec(a);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span>g = f.<span class=\"highlight focus\">inv</span>(n);\n<span data-nosnippet>12</span>    <span class=\"macro\">iter_print!</span>(writer, @it g.data);\n<span data-nosnippet>13</span>}</code></pre></div></div><div class=\"scraped-example\" data-locs=\"[[[9,9],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#220&#34;,&#34;line 220&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_nums.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#220\">line 220</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>211</span>    <span class=\"kw\">fn </span>div(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>212</span>        <span class=\"self\">self</span>.trim_tail_zeros();\n<span data-nosnippet>213</span>        rhs.trim_tail_zeros();\n<span data-nosnippet>214</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>215</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::zero();\n<span data-nosnippet>216</span>        }\n<span data-nosnippet>217</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>218</span>        rhs.data.reverse();\n<span data-nosnippet>219</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length() - rhs.length() + <span class=\"number\">1</span>;\n<span data-nosnippet>220</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"self\">self </span>* rhs.<span class=\"highlight focus\">inv</span>(n);\n<span data-nosnippet>221</span>        res.truncate(n);\n<span data-nosnippet>222</span>        res.data.reverse();\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }</code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.exp\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#253-267\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.exp\" class=\"fn\">exp</a>(&amp;self, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[5,5],&#34;src/library_checker/math/exp_of_formal_power_series.rs.html#11&#34;,&#34;line 11&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/exp_of_formal_power_series.rs (<a href=\"src/library_checker/math/exp_of_formal_power_series.rs.html#11\">line 11</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>exp_of_formal_power_series(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, n, a: [MInt998244353; n]);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>f = Fps998244353::from_vec(a);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span>g = f.<span class=\"highlight focus\">exp</span>(n);\n<span data-nosnippet>12</span>    <span class=\"macro\">iter_print!</span>(writer, @it g.data);\n<span data-nosnippet>13</span>}</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[28,28],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#299&#34;,&#34;line 299&#34;],[[90,90],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#361&#34;,&#34;line 361&#34;],[[105,105],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#376&#34;,&#34;line 376&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#299\">line 299</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>271</span>    <span class=\"kw\">pub fn </span>pow(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: usize, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>272</span>        <span class=\"kw\">if </span>rhs == <span class=\"number\">0 </span>{\n<span data-nosnippet>273</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::from_vec(\n<span data-nosnippet>274</span>                once(T::one())\n<span data-nosnippet>275</span>                    .chain(repeat_with(T::zero))\n<span data-nosnippet>276</span>                    .take(deg)\n<span data-nosnippet>277</span>                    .collect(),\n<span data-nosnippet>278</span>            );\n<span data-nosnippet>279</span>        }\n<span data-nosnippet>280</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>281</span>            <span class=\"kw\">if </span>k &gt;= (deg + rhs - <span class=\"number\">1</span>) / rhs {\n<span data-nosnippet>282</span>                <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>283</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>284</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x0 = <span class=\"self\">self</span>[k].clone();\n<span data-nosnippet>285</span>                <span class=\"kw\">let </span>rev = T::one() / x0.clone();\n<span data-nosnippet>286</span>                <span class=\"kw\">let </span>x = {\n<span data-nosnippet>287</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = T::one();\n<span data-nosnippet>288</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = rhs;\n<span data-nosnippet>289</span>                    <span class=\"kw\">while </span>y &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>290</span>                        <span class=\"kw\">if </span>y &amp; <span class=\"number\">1 </span>== <span class=\"number\">1 </span>{\n<span data-nosnippet>291</span>                            x <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>292</span>                        }\n<span data-nosnippet>293</span>                        x0 <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>294</span>                        y &gt;&gt;= <span class=\"number\">1</span>;\n<span data-nosnippet>295</span>                    }\n<span data-nosnippet>296</span>                    x\n<span data-nosnippet>297</span>                };\n<span data-nosnippet>298</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (<span class=\"self\">self</span>.clone() * <span class=\"kw-2\">&amp;</span>rev) &gt;&gt; k;\n<span data-nosnippet>299</span>                f = (f.log(deg) * <span class=\"kw-2\">&amp;</span>T::from(rhs)).<span class=\"highlight focus\">exp</span>(deg) * <span class=\"kw-2\">&amp;</span>x;\n<span data-nosnippet>300</span>                f.truncate(deg - k * rhs);\n<span data-nosnippet>301</span>                f &lt;&lt;= k * rhs;\n<span data-nosnippet>302</span>                f\n<span data-nosnippet>303</span>            }\n<span data-nosnippet>304</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>305</span>            <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>306</span>        }\n<span data-nosnippet>307</span>    }\n<span data-nosnippet>308</span>}\n<span data-nosnippet>309</span>\n<span data-nosnippet>310</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>311</span><span class=\"kw\">where\n<span data-nosnippet>312</span>    </span>T: FormalPowerSeriesCoefficientSqrt,\n<span data-nosnippet>313</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>314</span>{\n<span data-nosnippet>315</span>    <span class=\"kw\">pub fn </span>sqrt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>316</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero() {\n<span data-nosnippet>317</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>318</span>                <span class=\"kw\">if </span>k % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>319</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>320</span>                } <span class=\"kw\">else if </span>deg &gt; k / <span class=\"number\">2 </span>{\n<span data-nosnippet>321</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self </span>&gt;&gt; k).sqrt(deg - k / <span class=\"number\">2</span>)<span class=\"question-mark\">? </span>&lt;&lt; (k / <span class=\"number\">2</span>));\n<span data-nosnippet>322</span>                }\n<span data-nosnippet>323</span>            }\n<span data-nosnippet>324</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>325</span>            <span class=\"kw\">let </span>inv2 = T::one() / (T::one() + T::one());\n<span data-nosnippet>326</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(<span class=\"self\">self</span>[<span class=\"number\">0</span>].sqrt_coefficient()<span class=\"question-mark\">?</span>);\n<span data-nosnippet>327</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>328</span>            <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>329</span>                f = (<span class=\"kw-2\">&amp;</span>f + <span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.prefix_ref(i * <span class=\"number\">2</span>) * f.inv(i * <span class=\"number\">2</span>))).prefix(i * <span class=\"number\">2</span>) * <span class=\"kw-2\">&amp;</span>inv2;\n<span data-nosnippet>330</span>                i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>331</span>            }\n<span data-nosnippet>332</span>            f.truncate(deg);\n<span data-nosnippet>333</span>            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(f);\n<span data-nosnippet>334</span>        }\n<span data-nosnippet>335</span>        <span class=\"prelude-val\">Some</span>(<span class=\"self\">Self</span>::zeros(deg))\n<span data-nosnippet>336</span>    }\n<span data-nosnippet>337</span>}\n<span data-nosnippet>338</span>\n<span data-nosnippet>339</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>340</span><span class=\"kw\">where\n<span data-nosnippet>341</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>342</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>343</span>{\n<span data-nosnippet>344</span>    <span class=\"kw\">pub fn </span>count_subset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>345</span>    </span><span class=\"kw\">where\n<span data-nosnippet>346</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>347</span>    {\n<span data-nosnippet>348</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>349</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>350</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>351</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>352</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>353</span>                    <span class=\"kw\">if </span>j &amp; <span class=\"number\">1 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>354</span>                        f[d] += <span class=\"self\">self</span>[i].<a href=\"mod.rs.html#15\">clone</a>() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>355</span>                    } <span class=\"kw\">else </span>{\n<span data-nosnippet>356</span>                        f[d] -= <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>357</span>                    }\n<span data-nosnippet>358</span>                }\n<span data-nosnippet>359</span>            }\n<span data-nosnippet>360</span>        }\n<span data-nosnippet>361</span>        f.<span class=\"highlight\">exp</span>(deg)\n<span data-nosnippet>362</span>    }\n<span data-nosnippet>363</span>    <span class=\"kw\">pub fn </span>count_multiset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>364</span>    </span><span class=\"kw\">where\n<span data-nosnippet>365</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>366</span>    {\n<span data-nosnippet>367</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>368</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::zeros(n);\n<span data-nosnippet>369</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>370</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>371</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>372</span>                    f[d] += <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>373</span>                }\n<span data-nosnippet>374</span>            }\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>        f.<span class=\"highlight\">exp</span>(deg)\n<span data-nosnippet>377</span>    }</code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.log\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#268-270\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.log\" class=\"fn\">log</a>(&amp;self, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[5,5],&#34;src/library_checker/math/log_of_formal_power_series.rs.html#11&#34;,&#34;line 11&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/log_of_formal_power_series.rs (<a href=\"src/library_checker/math/log_of_formal_power_series.rs.html#11\">line 11</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>log_of_formal_power_series(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, n, a: [MInt998244353; n]);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>f = Fps998244353::from_vec(a);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span>g = f.<span class=\"highlight focus\">log</span>(n);\n<span data-nosnippet>12</span>    <span class=\"macro\">iter_print!</span>(writer, @it g.data);\n<span data-nosnippet>13</span>}</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[5,5],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#258&#34;,&#34;line 258&#34;],[[46,46],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#299&#34;,&#34;line 299&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#258\">line 258</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>253</span>    <span class=\"kw\">pub fn </span>exp(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>254</span>        <span class=\"macro\">debug_assert!</span>(<span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero());\n<span data-nosnippet>255</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::one();\n<span data-nosnippet>256</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>257</span>        <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>258</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>g = -f.<span class=\"highlight focus\">log</span>(i * <span class=\"number\">2</span>);\n<span data-nosnippet>259</span>            g[<span class=\"number\">0</span>] += T::one();\n<span data-nosnippet>260</span>            <span class=\"kw\">for </span>(g, x) <span class=\"kw\">in </span>g.iter_mut().zip(<span class=\"self\">self</span>.iter().take(i * <span class=\"number\">2</span>)) {\n<span data-nosnippet>261</span>                <span class=\"kw-2\">*</span>g += x.clone();\n<span data-nosnippet>262</span>            }\n<span data-nosnippet>263</span>            f = (f * g).prefix(i * <span class=\"number\">2</span>);\n<span data-nosnippet>264</span>            i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>265</span>        }\n<span data-nosnippet>266</span>        f.prefix(deg)\n<span data-nosnippet>267</span>    }\n<span data-nosnippet>268</span>    <span class=\"kw\">pub fn </span>log(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>269</span>        (<span class=\"self\">self</span>.inv(deg) * <span class=\"self\">self</span>.clone().diff()).integral().prefix(deg)\n<span data-nosnippet>270</span>    }\n<span data-nosnippet>271</span>    <span class=\"kw\">pub fn </span>pow(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: usize, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>272</span>        <span class=\"kw\">if </span>rhs == <span class=\"number\">0 </span>{\n<span data-nosnippet>273</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::from_vec(\n<span data-nosnippet>274</span>                once(T::one())\n<span data-nosnippet>275</span>                    .chain(repeat_with(T::zero))\n<span data-nosnippet>276</span>                    .take(deg)\n<span data-nosnippet>277</span>                    .collect(),\n<span data-nosnippet>278</span>            );\n<span data-nosnippet>279</span>        }\n<span data-nosnippet>280</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>281</span>            <span class=\"kw\">if </span>k &gt;= (deg + rhs - <span class=\"number\">1</span>) / rhs {\n<span data-nosnippet>282</span>                <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>283</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>284</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x0 = <span class=\"self\">self</span>[k].clone();\n<span data-nosnippet>285</span>                <span class=\"kw\">let </span>rev = T::one() / x0.clone();\n<span data-nosnippet>286</span>                <span class=\"kw\">let </span>x = {\n<span data-nosnippet>287</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = T::one();\n<span data-nosnippet>288</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = rhs;\n<span data-nosnippet>289</span>                    <span class=\"kw\">while </span>y &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>290</span>                        <span class=\"kw\">if </span>y &amp; <span class=\"number\">1 </span>== <span class=\"number\">1 </span>{\n<span data-nosnippet>291</span>                            x <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>292</span>                        }\n<span data-nosnippet>293</span>                        x0 <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>294</span>                        y &gt;&gt;= <span class=\"number\">1</span>;\n<span data-nosnippet>295</span>                    }\n<span data-nosnippet>296</span>                    x\n<span data-nosnippet>297</span>                };\n<span data-nosnippet>298</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (<span class=\"self\">self</span>.clone() * <span class=\"kw-2\">&amp;</span>rev) &gt;&gt; k;\n<span data-nosnippet>299</span>                f = (f.<span class=\"highlight\">log</span>(deg) * <span class=\"kw-2\">&amp;</span>T::from(rhs)).exp(deg) * <span class=\"kw-2\">&amp;</span>x;\n<span data-nosnippet>300</span>                f.truncate(deg - k * rhs);\n<span data-nosnippet>301</span>                f &lt;&lt;= k * rhs;\n<span data-nosnippet>302</span>                f\n<span data-nosnippet>303</span>            }\n<span data-nosnippet>304</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>305</span>            <span class=\"self\">Self</span>::zeros(deg)\n<span data-nosnippet>306</span>        }\n<span data-nosnippet>307</span>    }</code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#271-307\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.pow\" class=\"fn\">pow</a>(&amp;self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-3\"><a href=\"#scraped-examples-3\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[5,5],&#34;src/library_checker/math/pow_of_formal_power_series.rs.html#11&#34;,&#34;line 11&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/pow_of_formal_power_series.rs (<a href=\"src/library_checker/math/pow_of_formal_power_series.rs.html#11\">line 11</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>pow_of_formal_power_series(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, n, m, a: [MInt998244353; n]);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>f = Fps998244353::from_vec(a);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span>g = f.<span class=\"highlight focus\">pow</span>(m, n);\n<span data-nosnippet>12</span>    <span class=\"macro\">iter_print!</span>(writer, @it g.data);\n<span data-nosnippet>13</span>}</code></pre></div></div></div></details></div></details>",0,"competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#310-337\">Source</a><a href=\"#impl-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficientSqrt.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficientSqrt\">FormalPowerSeriesCoefficientSqrt</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sqrt\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#315-336\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.sqrt\" class=\"fn\">sqrt</a>(&amp;self, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[5,5],&#34;src/library_checker/math/sqrt_of_formal_power_series.rs.html#11&#34;,&#34;line 11&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/sqrt_of_formal_power_series.rs (<a href=\"src/library_checker/math/sqrt_of_formal_power_series.rs.html#11\">line 11</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>sqrt_of_formal_power_series(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, n, a: [MInt998244353; n]);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>f = Fps998244353::from_vec(a);\n<span data-nosnippet>11</span>    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(g) = f.<span class=\"highlight focus\">sqrt</span>(n) {\n<span data-nosnippet>12</span>        <span class=\"macro\">iter_print!</span>(writer, @it g.data);\n<span data-nosnippet>13</span>    } <span class=\"kw\">else </span>{\n<span data-nosnippet>14</span>        <span class=\"macro\">iter_print!</span>(writer, <span class=\"string\">\"-1\"</span>);\n<span data-nosnippet>15</span>    }\n<span data-nosnippet>16</span>}</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[6,6],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#321&#34;,&#34;line 321&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#321\">line 321</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>315</span>    <span class=\"kw\">pub fn </span>sqrt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>316</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero() {\n<span data-nosnippet>317</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>318</span>                <span class=\"kw\">if </span>k % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>319</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>320</span>                } <span class=\"kw\">else if </span>deg &gt; k / <span class=\"number\">2 </span>{\n<span data-nosnippet>321</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self </span>&gt;&gt; k).<span class=\"highlight focus\">sqrt</span>(deg - k / <span class=\"number\">2</span>)<span class=\"question-mark\">? </span>&lt;&lt; (k / <span class=\"number\">2</span>));\n<span data-nosnippet>322</span>                }\n<span data-nosnippet>323</span>            }\n<span data-nosnippet>324</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>325</span>            <span class=\"kw\">let </span>inv2 = T::one() / (T::one() + T::one());\n<span data-nosnippet>326</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(<span class=\"self\">self</span>[<span class=\"number\">0</span>].sqrt_coefficient()<span class=\"question-mark\">?</span>);\n<span data-nosnippet>327</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>328</span>            <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>329</span>                f = (<span class=\"kw-2\">&amp;</span>f + <span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.prefix_ref(i * <span class=\"number\">2</span>) * f.inv(i * <span class=\"number\">2</span>))).prefix(i * <span class=\"number\">2</span>) * <span class=\"kw-2\">&amp;</span>inv2;\n<span data-nosnippet>330</span>                i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>331</span>            }\n<span data-nosnippet>332</span>            f.truncate(deg);\n<span data-nosnippet>333</span>            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(f);\n<span data-nosnippet>334</span>        }\n<span data-nosnippet>335</span>        <span class=\"prelude-val\">Some</span>(<span class=\"self\">Self</span>::zeros(deg))\n<span data-nosnippet>336</span>    }</code></pre></div></div></div></details></div></details></div></details>",0,"competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#339-505\">Source</a><a href=\"#impl-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_subset_sum\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#344-362\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.count_subset_sum\" class=\"fn\">count_subset_sum</a>&lt;F&gt;(&amp;self, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, inverse: F) -&gt; Self<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T,</div></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[9,9],&#34;src/library_checker/math/sharp_p_subset_sum.rs.html#18&#34;,&#34;line 18&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/sharp_p_subset_sum.rs (<a href=\"src/library_checker/math/sharp_p_subset_sum.rs.html#18\">line 18</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>9</span><span class=\"kw\">pub fn </span>sharp_p_subset_sum(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>12</span>    <span class=\"macro\">scan!</span>(scanner, n, t, s: [usize; n]);\n<span data-nosnippet>13</span>    <span class=\"kw\">let </span>f = MemorizedFactorial::new(t);\n<span data-nosnippet>14</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = <span class=\"macro\">vec!</span>[MInt998244353::zero(); t + <span class=\"number\">1</span>];\n<span data-nosnippet>15</span>    <span class=\"kw\">for </span>s <span class=\"kw\">in </span>s {\n<span data-nosnippet>16</span>        c[s] += MInt998244353::one();\n<span data-nosnippet>17</span>    }\n<span data-nosnippet>18</span>    <span class=\"kw\">let </span>a = Fps998244353::from_vec(c).<span class=\"highlight focus\">count_subset_sum</span>(t + <span class=\"number\">1</span>, |x| f.inv(x));\n<span data-nosnippet>19</span>    <span class=\"macro\">iter_print!</span>(writer, @it a.data[<span class=\"number\">1</span>..]);\n<span data-nosnippet>20</span>}</code></pre></div></div></div></details><section id=\"method.count_multiset_sum\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#363-377\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.count_multiset_sum\" class=\"fn\">count_multiset_sum</a>&lt;F&gt;(&amp;self, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, inverse: F) -&gt; Self<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T,</div></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.bostan_mori\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#378-393\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.bostan_mori\" class=\"fn\">bostan_mori</a>(self, rhs: Self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[5,5],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#480&#34;,&#34;line 480&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#480\">line 480</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>475</span>    <span class=\"kw\">pub fn </span>kth_term_of_linearly_recurrence(<span class=\"self\">self</span>, a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>476</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>477</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>478</span>        }\n<span data-nosnippet>479</span>        <span class=\"kw\">let </span>p = (<span class=\"self\">Self</span>::from_vec(a).prefix(<span class=\"self\">self</span>.length() - <span class=\"number\">1</span>) * <span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>).prefix(<span class=\"self\">self</span>.length() - <span class=\"number\">1</span>);\n<span data-nosnippet>480</span>        p.<span class=\"highlight focus\">bostan_mori</span>(<span class=\"self\">self</span>, k)\n<span data-nosnippet>481</span>    }</code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.multipoint_evaluation\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#400-434\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.multipoint_evaluation\" class=\"fn\">multipoint_evaluation</a>(self, points: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[T]</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[5,5],&#34;src/library_checker/math/multipoint_evaluation.rs.html#11&#34;,&#34;line 11&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/multipoint_evaluation.rs (<a href=\"src/library_checker/math/multipoint_evaluation.rs.html#11\">line 11</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>6</span><span class=\"kw\">pub fn </span>multipoint_evaluation(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>7</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>8</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>9</span>    <span class=\"macro\">scan!</span>(scanner, n, m, c: [MInt998244353; n], p: [MInt998244353; m]);\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>f = Fps998244353::from_vec(c);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span>res = f.<span class=\"highlight focus\">multipoint_evaluation</span>(<span class=\"kw-2\">&amp;</span>p);\n<span data-nosnippet>12</span>    <span class=\"macro\">iter_print!</span>(writer, @it res);\n<span data-nosnippet>13</span>}</code></pre></div></div></div></details><section id=\"method.product_all\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#435-452\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.product_all\" class=\"fn\">product_all</a>&lt;I&gt;(iter: I, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = Self&gt;,</div></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum_all_rational\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#453-474\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.sum_all_rational\" class=\"fn\">sum_all_rational</a>&lt;I&gt;(iter: I, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; (Self, Self)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (Self, Self)&gt;,</div></h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-3\"><a href=\"#scraped-examples-3\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[5,9],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#494-498&#34;,&#34;lines 494-498&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#494-498\">lines 494-498</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>489</span>    <span class=\"kw\">pub fn </span>linear_sum_of_exp&lt;I, F&gt;(iter: I, deg: usize, <span class=\"kw-2\">mut </span>inv_fact: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>490</span>    </span><span class=\"kw\">where\n<span data-nosnippet>491</span>        </span>I: IntoIterator&lt;Item = (T, T)&gt;,\n<span data-nosnippet>492</span>        F: FnMut(usize) -&gt; T,\n<span data-nosnippet>493</span>    {\n<span data-nosnippet>494</span>        <span class=\"kw\">let </span>(p, q) = <span class=\"highlight focus\"><span class=\"self\">Self</span>::sum_all_rational</span>(\n<span data-nosnippet>495</span>            iter.into_iter()\n<span data-nosnippet>496</span>                .map(|(a, b)| (<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[a]), <span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[T::one(), -b]))),\n<span data-nosnippet>497</span>            deg,\n<span data-nosnippet>498</span>        );\n<span data-nosnippet>499</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (p * q.inv(deg)).prefix(deg);\n<span data-nosnippet>500</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..f.length() {\n<span data-nosnippet>501</span>            f[i] <span class=\"kw-2\">*</span>= inv_fact(i);\n<span data-nosnippet>502</span>        }\n<span data-nosnippet>503</span>        f\n<span data-nosnippet>504</span>    }</code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.kth_term_of_linearly_recurrence\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#475-481\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.kth_term_of_linearly_recurrence\" class=\"fn\">kth_term_of_linearly_recurrence</a>(self, a: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-4\"><a href=\"#scraped-examples-4\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[4,4],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#486&#34;,&#34;line 486&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#486\">line 486</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>482</span>    <span class=\"kw\">pub fn </span>kth_term(a: Vec&lt;T&gt;, k: usize) -&gt; T {\n<span data-nosnippet>483</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(x) = a.get(k) {\n<span data-nosnippet>484</span>            <span class=\"kw\">return </span>x.clone();\n<span data-nosnippet>485</span>        }\n<span data-nosnippet>486</span>        <span class=\"self\">Self</span>::from_vec(berlekamp_massey(<span class=\"kw-2\">&amp;</span>a)).<span class=\"highlight focus\">kth_term_of_linearly_recurrence</span>(a, k)\n<span data-nosnippet>487</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example expanded\" data-locs=\"[[[5,5],&#34;src/library_checker/math/kth_term_of_linearly_recurrent_sequence.rs.html#14&#34;,&#34;line 14&#34;]]\"><div class=\"scraped-example-title\">crates/library_checker/src/math/kth_term_of_linearly_recurrent_sequence.rs (<a href=\"src/library_checker/math/kth_term_of_linearly_recurrent_sequence.rs.html#14\">line 14</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>9</span><span class=\"kw\">pub fn </span>kth_term_of_linearly_recurrent_sequence(reader: <span class=\"kw\">impl </span>Read, <span class=\"kw-2\">mut </span>writer: <span class=\"kw\">impl </span>Write) {\n<span data-nosnippet>10</span>    <span class=\"kw\">let </span>s = read_all_unchecked(reader);\n<span data-nosnippet>11</span>    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>scanner = Scanner::new(<span class=\"kw-2\">&amp;</span>s);\n<span data-nosnippet>12</span>    <span class=\"macro\">scan!</span>(scanner, d, k, a: [MInt998244353; d], c: [MInt998244353; d]);\n<span data-nosnippet>13</span>    <span class=\"kw\">let </span>q = Fps998244353::one() - (Fps998244353::from_vec(c) &lt;&lt; <span class=\"number\">1</span>);\n<span data-nosnippet>14</span>    <span class=\"macro\">iter_print!</span>(writer, q.<span class=\"highlight focus\">kth_term_of_linearly_recurrence</span>(a, k));\n<span data-nosnippet>15</span>}</code></pre></div></div></div></details></div></details><section id=\"method.kth_term\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#482-487\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.kth_term\" class=\"fn\">kth_term</a>(a: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.linear_sum_of_exp\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#489-504\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.linear_sum_of_exp\" class=\"fn\">linear_sum_of_exp</a>&lt;I, F&gt;(iter: I, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, inv_fact: F) -&gt; Self<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T, T)</a>&gt;,\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; T,</div></h4></section></summary><div class=\"docblock\"><p>sum_i a_i exp(b_i x)</p>\n</div></details></div></details>",0,"competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#51-69\">Source</a><a href=\"#impl-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/num/trait.Zero.html\" title=\"trait competitive::num::Zero\">Zero</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeros\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#55-57\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.zeros\" class=\"fn\">zeros</a>(deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[4,4],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#390&#34;,&#34;line 390&#34;],[[18,18],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#404&#34;,&#34;line 404&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_nums.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#390\">line 390</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>386</span>    <span class=\"kw\">fn </span>shr(<span class=\"self\">self</span>, rhs: usize) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>387</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt;= rhs {\n<span data-nosnippet>388</span>            <span class=\"self\">Self</span>::Output::zero()\n<span data-nosnippet>389</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>390</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"highlight focus\"><span class=\"self\">Self</span>::Output::zeros</span>(<span class=\"self\">self</span>.length() - rhs);\n<span data-nosnippet>391</span>            <span class=\"kw\">for </span>i <span class=\"kw\">in </span>rhs..<span class=\"self\">self</span>.length() {\n<span data-nosnippet>392</span>                f[i - rhs] = <span class=\"self\">self</span>[i].clone();\n<span data-nosnippet>393</span>            }\n<span data-nosnippet>394</span>            f\n<span data-nosnippet>395</span>        }\n<span data-nosnippet>396</span>    }\n<span data-nosnippet>397</span>}\n<span data-nosnippet>398</span><span class=\"kw\">impl</span>&lt;T, C&gt; Shl&lt;usize&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>399</span><span class=\"kw\">where\n<span data-nosnippet>400</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>401</span>{\n<span data-nosnippet>402</span>    <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>403</span>    <span class=\"kw\">fn </span>shl(<span class=\"self\">self</span>, rhs: usize) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>404</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"highlight\"><span class=\"self\">Self</span>::Output::zeros</span>(<span class=\"self\">self</span>.length() + rhs);\n<span data-nosnippet>405</span>        <span class=\"kw\">for </span>(i, x) <span class=\"kw\">in </span><span class=\"self\">self</span>.iter().cloned().enumerate().rev() {\n<span data-nosnippet>406</span>            f[i + rhs] = x;\n<span data-nosnippet>407</span>        }\n<span data-nosnippet>408</span>        f\n<span data-nosnippet>409</span>    }</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[11,11],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#282&#34;,&#34;line 282&#34;],[[34,34],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#305&#34;,&#34;line 305&#34;],[[64,64],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#335&#34;,&#34;line 335&#34;],[[78,78],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#349&#34;,&#34;line 349&#34;],[[97,97],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#368&#34;,&#34;line 368&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#282\">line 282</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>271</span>    <span class=\"kw\">pub fn </span>pow(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, rhs: usize, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>272</span>        <span class=\"kw\">if </span>rhs == <span class=\"number\">0 </span>{\n<span data-nosnippet>273</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::from_vec(\n<span data-nosnippet>274</span>                once(T::one())\n<span data-nosnippet>275</span>                    .chain(repeat_with(T::zero))\n<span data-nosnippet>276</span>                    .take(deg)\n<span data-nosnippet>277</span>                    .collect(),\n<span data-nosnippet>278</span>            );\n<span data-nosnippet>279</span>        }\n<span data-nosnippet>280</span>        <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>281</span>            <span class=\"kw\">if </span>k &gt;= (deg + rhs - <span class=\"number\">1</span>) / rhs {\n<span data-nosnippet>282</span>                <span class=\"highlight focus\"><span class=\"self\">Self</span>::zeros</span>(deg)\n<span data-nosnippet>283</span>            } <span class=\"kw\">else </span>{\n<span data-nosnippet>284</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x0 = <span class=\"self\">self</span>[k].clone();\n<span data-nosnippet>285</span>                <span class=\"kw\">let </span>rev = T::one() / x0.clone();\n<span data-nosnippet>286</span>                <span class=\"kw\">let </span>x = {\n<span data-nosnippet>287</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = T::one();\n<span data-nosnippet>288</span>                    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>y = rhs;\n<span data-nosnippet>289</span>                    <span class=\"kw\">while </span>y &gt; <span class=\"number\">0 </span>{\n<span data-nosnippet>290</span>                        <span class=\"kw\">if </span>y &amp; <span class=\"number\">1 </span>== <span class=\"number\">1 </span>{\n<span data-nosnippet>291</span>                            x <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>292</span>                        }\n<span data-nosnippet>293</span>                        x0 <span class=\"kw-2\">*</span>= x0.clone();\n<span data-nosnippet>294</span>                        y &gt;&gt;= <span class=\"number\">1</span>;\n<span data-nosnippet>295</span>                    }\n<span data-nosnippet>296</span>                    x\n<span data-nosnippet>297</span>                };\n<span data-nosnippet>298</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = (<span class=\"self\">self</span>.clone() * <span class=\"kw-2\">&amp;</span>rev) &gt;&gt; k;\n<span data-nosnippet>299</span>                f = (f.log(deg) * <span class=\"kw-2\">&amp;</span>T::from(rhs)).exp(deg) * <span class=\"kw-2\">&amp;</span>x;\n<span data-nosnippet>300</span>                f.truncate(deg - k * rhs);\n<span data-nosnippet>301</span>                f &lt;&lt;= k * rhs;\n<span data-nosnippet>302</span>                f\n<span data-nosnippet>303</span>            }\n<span data-nosnippet>304</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>305</span>            <span class=\"highlight\"><span class=\"self\">Self</span>::zeros</span>(deg)\n<span data-nosnippet>306</span>        }\n<span data-nosnippet>307</span>    }\n<span data-nosnippet>308</span>}\n<span data-nosnippet>309</span>\n<span data-nosnippet>310</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>311</span><span class=\"kw\">where\n<span data-nosnippet>312</span>    </span>T: FormalPowerSeriesCoefficientSqrt,\n<span data-nosnippet>313</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>314</span>{\n<span data-nosnippet>315</span>    <span class=\"kw\">pub fn </span>sqrt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"prelude-ty\">Option</span>&lt;<span class=\"self\">Self</span>&gt; {\n<span data-nosnippet>316</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>[<span class=\"number\">0</span>].is_zero() {\n<span data-nosnippet>317</span>            <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(k) = <span class=\"self\">self</span>.iter().position(|x| !x.is_zero()) {\n<span data-nosnippet>318</span>                <span class=\"kw\">if </span>k % <span class=\"number\">2 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>319</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">None</span>;\n<span data-nosnippet>320</span>                } <span class=\"kw\">else if </span>deg &gt; k / <span class=\"number\">2 </span>{\n<span data-nosnippet>321</span>                    <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>((<span class=\"self\">self </span>&gt;&gt; k).sqrt(deg - k / <span class=\"number\">2</span>)<span class=\"question-mark\">? </span>&lt;&lt; (k / <span class=\"number\">2</span>));\n<span data-nosnippet>322</span>                }\n<span data-nosnippet>323</span>            }\n<span data-nosnippet>324</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>325</span>            <span class=\"kw\">let </span>inv2 = T::one() / (T::one() + T::one());\n<span data-nosnippet>326</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"self\">Self</span>::from(<span class=\"self\">self</span>[<span class=\"number\">0</span>].sqrt_coefficient()<span class=\"question-mark\">?</span>);\n<span data-nosnippet>327</span>            <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>i = <span class=\"number\">1</span>;\n<span data-nosnippet>328</span>            <span class=\"kw\">while </span>i &lt; deg {\n<span data-nosnippet>329</span>                f = (<span class=\"kw-2\">&amp;</span>f + <span class=\"kw-2\">&amp;</span>(<span class=\"self\">self</span>.prefix_ref(i * <span class=\"number\">2</span>) * f.inv(i * <span class=\"number\">2</span>))).prefix(i * <span class=\"number\">2</span>) * <span class=\"kw-2\">&amp;</span>inv2;\n<span data-nosnippet>330</span>                i <span class=\"kw-2\">*</span>= <span class=\"number\">2</span>;\n<span data-nosnippet>331</span>            }\n<span data-nosnippet>332</span>            f.truncate(deg);\n<span data-nosnippet>333</span>            <span class=\"kw\">return </span><span class=\"prelude-val\">Some</span>(f);\n<span data-nosnippet>334</span>        }\n<span data-nosnippet>335</span>        <span class=\"prelude-val\">Some</span>(<span class=\"highlight\"><span class=\"self\">Self</span>::zeros</span>(deg))\n<span data-nosnippet>336</span>    }\n<span data-nosnippet>337</span>}\n<span data-nosnippet>338</span>\n<span data-nosnippet>339</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>340</span><span class=\"kw\">where\n<span data-nosnippet>341</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>342</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>343</span>{\n<span data-nosnippet>344</span>    <span class=\"kw\">pub fn </span>count_subset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>345</span>    </span><span class=\"kw\">where\n<span data-nosnippet>346</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>347</span>    {\n<span data-nosnippet>348</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>349</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"highlight\"><span class=\"self\">Self</span>::zeros</span>(n);\n<span data-nosnippet>350</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>351</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>352</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>353</span>                    <span class=\"kw\">if </span>j &amp; <span class=\"number\">1 </span>!= <span class=\"number\">0 </span>{\n<span data-nosnippet>354</span>                        f[d] += <span class=\"self\">self</span>[i].<a href=\"mod.rs.html#15\">clone</a>() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>355</span>                    } <span class=\"kw\">else </span>{\n<span data-nosnippet>356</span>                        f[d] -= <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>357</span>                    }\n<span data-nosnippet>358</span>                }\n<span data-nosnippet>359</span>            }\n<span data-nosnippet>360</span>        }\n<span data-nosnippet>361</span>        f.exp(deg)\n<span data-nosnippet>362</span>    }\n<span data-nosnippet>363</span>    <span class=\"kw\">pub fn </span>count_multiset_sum&lt;F&gt;(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, deg: usize, <span class=\"kw-2\">mut </span>inverse: F) -&gt; <span class=\"self\">Self\n<span data-nosnippet>364</span>    </span><span class=\"kw\">where\n<span data-nosnippet>365</span>        </span>F: FnMut(usize) -&gt; T,\n<span data-nosnippet>366</span>    {\n<span data-nosnippet>367</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>368</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>f = <span class=\"highlight\"><span class=\"self\">Self</span>::zeros</span>(n);\n<span data-nosnippet>369</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>370</span>            <span class=\"kw\">if </span>!<span class=\"self\">self</span>[i].is_zero() {\n<span data-nosnippet>371</span>                <span class=\"kw\">for </span>(j, d) <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).step_by(i).enumerate().skip(<span class=\"number\">1</span>) {\n<span data-nosnippet>372</span>                    f[d] += <span class=\"self\">self</span>[i].clone() * <span class=\"kw-2\">&amp;</span>inverse(j);\n<span data-nosnippet>373</span>                }\n<span data-nosnippet>374</span>            }\n<span data-nosnippet>375</span>        }\n<span data-nosnippet>376</span>        f.exp(deg)\n<span data-nosnippet>377</span>    }</code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#58-60\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.resize\" class=\"fn\">resize</a>(&amp;mut self, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-1\"><a href=\"#scraped-examples-1\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example expanded\" data-locs=\"[[[1,1],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#62&#34;,&#34;line 62&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#62\">line 62</a>)</div><div class=\"example-wrap digits-2\"><pre class=\"rust\"><code><span data-nosnippet>61</span>    <span class=\"kw\">pub fn </span>resized(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>62</span>        <span class=\"self\">self</span>.<span class=\"highlight focus\">resize</span>(deg);\n<span data-nosnippet>63</span>        <span class=\"self\">self\n<span data-nosnippet>64</span>    </span>}</code></pre></div></div><details class=\"toggle more-examples-toggle\"><summary class=\"hideme\"><span>More examples</span></summary><div class=\"hide-more\">Hide additional examples</div><div class=\"more-scraped-examples\"><div class=\"toggle-line\"><div class=\"toggle-line-inner\"></div></div><div class=\"scraped-example\" data-locs=\"[[[2,2],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#117&#34;,&#34;line 117&#34;],[[15,15],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#130&#34;,&#34;line 130&#34;],[[236,236],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#351&#34;,&#34;line 351&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_nums.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#117\">line 117</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>115</span>    <span class=\"kw\">fn </span>add_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>116</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>117</span>            <span class=\"self\">self</span>.<span class=\"highlight focus\">resize</span>(rhs.length());\n<span data-nosnippet>118</span>        }\n<span data-nosnippet>119</span>        <span class=\"kw\">for </span>(x, y) <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().zip(rhs.iter()) {\n<span data-nosnippet>120</span>            x.add_assign(y);\n<span data-nosnippet>121</span>        }\n<span data-nosnippet>122</span>    }\n<span data-nosnippet>123</span>}\n<span data-nosnippet>124</span><span class=\"kw\">impl</span>&lt;T, C&gt; SubAssign&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>125</span><span class=\"kw\">where\n<span data-nosnippet>126</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>127</span>{\n<span data-nosnippet>128</span>    <span class=\"kw\">fn </span>sub_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>129</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>130</span>            <span class=\"self\">self</span>.<span class=\"highlight\">resize</span>(rhs.length());\n<span data-nosnippet>131</span>        }\n<span data-nosnippet>132</span>        <span class=\"kw\">for </span>(x, y) <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().zip(rhs.iter()) {\n<span data-nosnippet>133</span>            x.sub_assign(y);\n<span data-nosnippet>134</span>        }\n<span data-nosnippet>135</span>        <span class=\"self\">self</span>.trim_tail_zeros();\n<span data-nosnippet>136</span>    }\n<span data-nosnippet>137</span>}\n<span data-nosnippet>138</span>\n<span data-nosnippet>139</span><span class=\"macro\">macro_rules!</span> impl_fps_binop_addsub {\n<span data-nosnippet>140</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>141</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>142</span>        <span class=\"kw\">where\n<span data-nosnippet>143</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>144</span>        {\n<span data-nosnippet>145</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) {\n<span data-nosnippet>146</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>147</span>            }\n<span data-nosnippet>148</span>        }\n<span data-nosnippet>149</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>150</span>        <span class=\"kw\">where\n<span data-nosnippet>151</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>152</span>        {\n<span data-nosnippet>153</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>154</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>155</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>156</span>                <span class=\"self\">self\n<span data-nosnippet>157</span>            </span>}\n<span data-nosnippet>158</span>        }\n<span data-nosnippet>159</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>160</span>        <span class=\"kw\">where\n<span data-nosnippet>161</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>162</span>        {\n<span data-nosnippet>163</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>164</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>165</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs);\n<span data-nosnippet>166</span>                <span class=\"self\">self\n<span data-nosnippet>167</span>            </span>}\n<span data-nosnippet>168</span>        }\n<span data-nosnippet>169</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>170</span>        <span class=\"kw\">where\n<span data-nosnippet>171</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>172</span>        {\n<span data-nosnippet>173</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>174</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>175</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">self</span>.clone();\n<span data-nosnippet>176</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span>self_, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>177</span>                self_\n<span data-nosnippet>178</span>            }\n<span data-nosnippet>179</span>        }\n<span data-nosnippet>180</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>181</span>        <span class=\"kw\">where\n<span data-nosnippet>182</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>183</span>        {\n<span data-nosnippet>184</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>185</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>186</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">self</span>.clone();\n<span data-nosnippet>187</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span>self_, rhs);\n<span data-nosnippet>188</span>                self_\n<span data-nosnippet>189</span>            }\n<span data-nosnippet>190</span>        }\n<span data-nosnippet>191</span>    };\n<span data-nosnippet>192</span>}\n<span data-nosnippet>193</span><span class=\"macro\">impl_fps_binop_addsub!</span>(Add, add, AddAssign, add_assign);\n<span data-nosnippet>194</span><span class=\"macro\">impl_fps_binop_addsub!</span>(Sub, sub, SubAssign, sub_assign);\n<span data-nosnippet>195</span>\n<span data-nosnippet>196</span><span class=\"kw\">impl</span>&lt;T, C&gt; Mul <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>197</span><span class=\"kw\">where\n<span data-nosnippet>198</span>    </span>C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>199</span>{\n<span data-nosnippet>200</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>201</span>    <span class=\"kw\">fn </span>mul(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>202</span>        <span class=\"self\">Self</span>::from_vec(C::convolve(<span class=\"self\">self</span>.data, rhs.data))\n<span data-nosnippet>203</span>    }\n<span data-nosnippet>204</span>}\n<span data-nosnippet>205</span><span class=\"kw\">impl</span>&lt;T, C&gt; Div <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>206</span><span class=\"kw\">where\n<span data-nosnippet>207</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>208</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>209</span>{\n<span data-nosnippet>210</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>211</span>    <span class=\"kw\">fn </span>div(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>212</span>        <span class=\"self\">self</span>.trim_tail_zeros();\n<span data-nosnippet>213</span>        rhs.trim_tail_zeros();\n<span data-nosnippet>214</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>215</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::zero();\n<span data-nosnippet>216</span>        }\n<span data-nosnippet>217</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>218</span>        rhs.data.reverse();\n<span data-nosnippet>219</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length() - rhs.length() + <span class=\"number\">1</span>;\n<span data-nosnippet>220</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"self\">self </span>* rhs.inv(n);\n<span data-nosnippet>221</span>        res.truncate(n);\n<span data-nosnippet>222</span>        res.data.reverse();\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }\n<span data-nosnippet>225</span>}\n<span data-nosnippet>226</span><span class=\"kw\">impl</span>&lt;T, C&gt; Rem <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>227</span><span class=\"kw\">where\n<span data-nosnippet>228</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>229</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>230</span>{\n<span data-nosnippet>231</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>232</span>    <span class=\"kw\">fn </span>rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>233</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self</span>.clone() - <span class=\"self\">self </span>/ rhs.clone() * rhs;\n<span data-nosnippet>234</span>        rem.trim_tail_zeros();\n<span data-nosnippet>235</span>        rem\n<span data-nosnippet>236</span>    }\n<span data-nosnippet>237</span>}\n<span data-nosnippet>238</span>\n<span data-nosnippet>239</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>240</span><span class=\"kw\">where\n<span data-nosnippet>241</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>242</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>243</span>{\n<span data-nosnippet>244</span>    <span class=\"kw\">pub fn </span>div_rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>) {\n<span data-nosnippet>245</span>        <span class=\"kw\">let </span>div = <span class=\"self\">self</span>.clone() / rhs.clone();\n<span data-nosnippet>246</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self </span>- div.clone() * rhs;\n<span data-nosnippet>247</span>        rem.trim_tail_zeros();\n<span data-nosnippet>248</span>        (div, rem)\n<span data-nosnippet>249</span>    }\n<span data-nosnippet>250</span>}\n<span data-nosnippet>251</span>\n<span data-nosnippet>252</span><span class=\"macro\">macro_rules!</span> impl_fps_binop_conv {\n<span data-nosnippet>253</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>254</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>255</span>        <span class=\"kw\">where\n<span data-nosnippet>256</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>257</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>258</span>        {\n<span data-nosnippet>259</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) {\n<span data-nosnippet>260</span>                <span class=\"kw-2\">*</span><span class=\"self\">self </span>= <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">Self</span>::from_vec(take(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>.data)), rhs);\n<span data-nosnippet>261</span>            }\n<span data-nosnippet>262</span>        }\n<span data-nosnippet>263</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign</span>&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>264</span>        <span class=\"kw\">where\n<span data-nosnippet>265</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>266</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>267</span>        {\n<span data-nosnippet>268</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>269</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, rhs.clone());\n<span data-nosnippet>270</span>            }\n<span data-nosnippet>271</span>        }\n<span data-nosnippet>272</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>273</span>        <span class=\"kw\">where\n<span data-nosnippet>274</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>275</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>276</span>        {\n<span data-nosnippet>277</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>278</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>279</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs.clone())\n<span data-nosnippet>280</span>            }\n<span data-nosnippet>281</span>        }\n<span data-nosnippet>282</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>283</span>        <span class=\"kw\">where\n<span data-nosnippet>284</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>285</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>286</span>        {\n<span data-nosnippet>287</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>288</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>289</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs)\n<span data-nosnippet>290</span>            }\n<span data-nosnippet>291</span>        }\n<span data-nosnippet>292</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>293</span>        <span class=\"kw\">where\n<span data-nosnippet>294</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>295</span>            C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>296</span>        {\n<span data-nosnippet>297</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>298</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>299</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs.clone())\n<span data-nosnippet>300</span>            }\n<span data-nosnippet>301</span>        }\n<span data-nosnippet>302</span>    };\n<span data-nosnippet>303</span>}\n<span data-nosnippet>304</span><span class=\"macro\">impl_fps_binop_conv!</span>(Mul, mul, MulAssign, mul_assign);\n<span data-nosnippet>305</span><span class=\"macro\">impl_fps_binop_conv!</span>(Div, div, DivAssign, div_assign);\n<span data-nosnippet>306</span><span class=\"macro\">impl_fps_binop_conv!</span>(Rem, rem, RemAssign, rem_assign);\n<span data-nosnippet>307</span>\n<span data-nosnippet>308</span><span class=\"kw\">impl</span>&lt;T, C&gt; Neg <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>309</span><span class=\"kw\">where\n<span data-nosnippet>310</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>311</span>{\n<span data-nosnippet>312</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>313</span>    <span class=\"kw\">fn </span>neg(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>314</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut() {\n<span data-nosnippet>315</span>            <span class=\"kw-2\">*</span>x = -x.clone();\n<span data-nosnippet>316</span>        }\n<span data-nosnippet>317</span>        <span class=\"self\">self\n<span data-nosnippet>318</span>    </span>}\n<span data-nosnippet>319</span>}\n<span data-nosnippet>320</span><span class=\"kw\">impl</span>&lt;T, C&gt; Neg <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>321</span><span class=\"kw\">where\n<span data-nosnippet>322</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>323</span>{\n<span data-nosnippet>324</span>    <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>325</span>    <span class=\"kw\">fn </span>neg(<span class=\"self\">self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>326</span>        <span class=\"self\">self</span>.clone().neg()\n<span data-nosnippet>327</span>    }\n<span data-nosnippet>328</span>}\n<span data-nosnippet>329</span>\n<span data-nosnippet>330</span><span class=\"kw\">impl</span>&lt;T, C&gt; ShrAssign&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;<a href=\"monoid_action.rs.html#83\">T</a>, C&gt;\n<span data-nosnippet>331</span><span class=\"kw\">where\n<span data-nosnippet>332</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>333</span>{\n<span data-nosnippet>334</span>    <span class=\"kw\">fn </span>shr_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: usize) {\n<span data-nosnippet>335</span>        <span class=\"kw\">if </span><a class=\"self\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\">self</a>.length() &lt;= rhs {\n<span data-nosnippet>336</span>            <span class=\"kw-2\">*</span><span class=\"self\">self </span>= <span class=\"self\">Self</span>::zero();\n<span data-nosnippet>337</span>        } <span class=\"kw\">else </span>{\n<span data-nosnippet>338</span>            <span class=\"kw\">for </span>i <span class=\"kw\">in </span>rhs..<span class=\"self\">self</span>.length() {\n<span data-nosnippet>339</span>                <span class=\"self\">self</span>[i - rhs] = <span class=\"self\">self</span>[i].clone();\n<span data-nosnippet>340</span>            }\n<span data-nosnippet>341</span>            <span class=\"self\">self</span>.truncate(<span class=\"self\">self</span>.length() - rhs);\n<span data-nosnippet>342</span>        }\n<span data-nosnippet>343</span>    }\n<span data-nosnippet>344</span>}\n<span data-nosnippet>345</span><span class=\"kw\">impl</span>&lt;T, C&gt; ShlAssign&lt;usize&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>346</span><span class=\"kw\">where\n<span data-nosnippet>347</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>348</span>{\n<span data-nosnippet>349</span>    <span class=\"kw\">fn </span>shl_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: usize) {\n<span data-nosnippet>350</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>351</span>        <span class=\"self\">self</span>.<span class=\"highlight\">resize</span>(n + rhs);\n<span data-nosnippet>352</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">0</span>..n).rev() {\n<span data-nosnippet>353</span>            <span class=\"self\">self</span>[i + rhs] = <span class=\"self\">self</span>[i].clone();\n<span data-nosnippet>354</span>        }\n<span data-nosnippet>355</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">0</span>..rhs {\n<span data-nosnippet>356</span>            <span class=\"self\">self</span>[i] = T::zero();\n<span data-nosnippet>357</span>        }\n<span data-nosnippet>358</span>    }</code></pre></div></div></div></details></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.resized\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#61-64\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.resized\" class=\"fn\">resized</a>(self, deg: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-2\"><a href=\"#scraped-examples-2\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[18,18],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#418&#34;,&#34;line 418&#34;],[[20,20],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#420&#34;,&#34;line 420&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#418\">line 418</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>400</span>    <span class=\"kw\">pub fn </span>multipoint_evaluation(<span class=\"self\">self</span>, points: <span class=\"kw-2\">&amp;</span>[T]) -&gt; Vec&lt;T&gt; {\n<span data-nosnippet>401</span>        <span class=\"kw\">let </span>n = points.len();\n<span data-nosnippet>402</span>        <span class=\"kw\">if </span>n &lt;= <span class=\"number\">32 </span>{\n<span data-nosnippet>403</span>            <span class=\"kw\">return </span>points.iter().map(|p| <span class=\"self\">self</span>.eval(p.clone())).collect();\n<span data-nosnippet>404</span>        }\n<span data-nosnippet>405</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>subproduct_tree = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>406</span>        subproduct_tree.resize_with(n, Zero::zero);\n<span data-nosnippet>407</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span>points {\n<span data-nosnippet>408</span>            subproduct_tree.push(<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[-x.clone(), T::one()]));\n<span data-nosnippet>409</span>        }\n<span data-nosnippet>410</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">1</span>..n).rev() {\n<span data-nosnippet>411</span>            subproduct_tree[i] = <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2</span>] * <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2 </span>+ <span class=\"number\">1</span>];\n<span data-nosnippet>412</span>        }\n<span data-nosnippet>413</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uptree_t = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>414</span>        uptree_t.resize_with(<span class=\"number\">1</span>, Zero::zero);\n<span data-nosnippet>415</span>        subproduct_tree.reverse();\n<span data-nosnippet>416</span>        subproduct_tree.pop();\n<span data-nosnippet>417</span>        <span class=\"kw\">let </span>m = <span class=\"self\">self</span>.length();\n<span data-nosnippet>418</span>        <span class=\"kw\">let </span>v = subproduct_tree.pop().unwrap().reversed().<span class=\"highlight focus\">resized</span>(m);\n<span data-nosnippet>419</span>        <span class=\"kw\">let </span>s = C::transform(<span class=\"self\">self</span>.data, m * <span class=\"number\">2</span>);\n<span data-nosnippet>420</span>        uptree_t.push(v.inv(m).middle_product(<span class=\"kw-2\">&amp;</span>s, m * <span class=\"number\">2</span>).<span class=\"highlight\">resized</span>(n).reversed());\n<span data-nosnippet>421</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>422</span>            <span class=\"kw\">let </span>subl = subproduct_tree.pop().unwrap();\n<span data-nosnippet>423</span>            <span class=\"kw\">let </span>subr = subproduct_tree.pop().unwrap();\n<span data-nosnippet>424</span>            <span class=\"kw\">let </span>(dl, dr) = (subl.length(), subr.length());\n<span data-nosnippet>425</span>            <span class=\"kw\">let </span>len = dl.max(dr) + uptree_t[i].length();\n<span data-nosnippet>426</span>            <span class=\"kw\">let </span>s = C::transform(uptree_t[i].data.to_vec(), len);\n<span data-nosnippet>427</span>            uptree_t.push(subr.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dl));\n<span data-nosnippet>428</span>            uptree_t.push(subl.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dr));\n<span data-nosnippet>429</span>        }\n<span data-nosnippet>430</span>        uptree_t[n..]\n<span data-nosnippet>431</span>            .iter()\n<span data-nosnippet>432</span>            .map(|u| u.data.first().cloned().unwrap_or_else(Zero::zero))\n<span data-nosnippet>433</span>            .collect()\n<span data-nosnippet>434</span>    }</code></pre></div></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reversed\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#65-68\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.reversed\" class=\"fn\">reversed</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples-3\"><a href=\"#scraped-examples-3\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[2,2],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#396&#34;,&#34;line 396&#34;],[[24,24],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#418&#34;,&#34;line 418&#34;],[[26,26],&#34;src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#420&#34;,&#34;line 420&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_impls.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#396\">line 396</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>394</span>    <span class=\"kw\">fn </span>middle_product(<span class=\"self\">self</span>, other: <span class=\"kw-2\">&amp;</span>C::F, deg: usize) -&gt; <span class=\"self\">Self </span>{\n<span data-nosnippet>395</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length();\n<span data-nosnippet>396</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = C::transform(<span class=\"self\">self</span>.<span class=\"highlight focus\">reversed</span>().data, deg);\n<span data-nosnippet>397</span>        C::multiply(<span class=\"kw-2\">&amp;mut </span>s, other);\n<span data-nosnippet>398</span>        <span class=\"self\">Self</span>::from_vec((C::inverse_transform(s, deg))[n - <span class=\"number\">1</span>..].to_vec())\n<span data-nosnippet>399</span>    }\n<span data-nosnippet>400</span>    <span class=\"kw\">pub fn </span>multipoint_evaluation(<span class=\"self\">self</span>, points: <span class=\"kw-2\">&amp;</span>[T]) -&gt; Vec&lt;T&gt; {\n<span data-nosnippet>401</span>        <span class=\"kw\">let </span>n = points.len();\n<span data-nosnippet>402</span>        <span class=\"kw\">if </span>n &lt;= <span class=\"number\">32 </span>{\n<span data-nosnippet>403</span>            <span class=\"kw\">return </span>points.iter().map(|p| <span class=\"self\">self</span>.eval(p.clone())).collect();\n<span data-nosnippet>404</span>        }\n<span data-nosnippet>405</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>subproduct_tree = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>406</span>        subproduct_tree.resize_with(n, Zero::zero);\n<span data-nosnippet>407</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span>points {\n<span data-nosnippet>408</span>            subproduct_tree.push(<span class=\"self\">Self</span>::from_vec(<span class=\"macro\">vec!</span>[-x.clone(), T::one()]));\n<span data-nosnippet>409</span>        }\n<span data-nosnippet>410</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span>(<span class=\"number\">1</span>..n).rev() {\n<span data-nosnippet>411</span>            subproduct_tree[i] = <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2</span>] * <span class=\"kw-2\">&amp;</span>subproduct_tree[i * <span class=\"number\">2 </span>+ <span class=\"number\">1</span>];\n<span data-nosnippet>412</span>        }\n<span data-nosnippet>413</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>uptree_t = Vec::with_capacity(n * <span class=\"number\">2</span>);\n<span data-nosnippet>414</span>        uptree_t.resize_with(<span class=\"number\">1</span>, Zero::zero);\n<span data-nosnippet>415</span>        subproduct_tree.reverse();\n<span data-nosnippet>416</span>        subproduct_tree.pop();\n<span data-nosnippet>417</span>        <span class=\"kw\">let </span>m = <span class=\"self\">self</span>.length();\n<span data-nosnippet>418</span>        <span class=\"kw\">let </span>v = subproduct_tree.pop().unwrap().<span class=\"highlight\">reversed</span>().resized(m);\n<span data-nosnippet>419</span>        <span class=\"kw\">let </span>s = C::transform(<span class=\"self\">self</span>.data, m * <span class=\"number\">2</span>);\n<span data-nosnippet>420</span>        uptree_t.push(v.inv(m).middle_product(<span class=\"kw-2\">&amp;</span>s, m * <span class=\"number\">2</span>).resized(n).<span class=\"highlight\">reversed</span>());\n<span data-nosnippet>421</span>        <span class=\"kw\">for </span>i <span class=\"kw\">in </span><span class=\"number\">1</span>..n {\n<span data-nosnippet>422</span>            <span class=\"kw\">let </span>subl = subproduct_tree.pop().unwrap();\n<span data-nosnippet>423</span>            <span class=\"kw\">let </span>subr = subproduct_tree.pop().unwrap();\n<span data-nosnippet>424</span>            <span class=\"kw\">let </span>(dl, dr) = (subl.length(), subr.length());\n<span data-nosnippet>425</span>            <span class=\"kw\">let </span>len = dl.max(dr) + uptree_t[i].length();\n<span data-nosnippet>426</span>            <span class=\"kw\">let </span>s = C::transform(uptree_t[i].data.to_vec(), len);\n<span data-nosnippet>427</span>            uptree_t.push(subr.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dl));\n<span data-nosnippet>428</span>            uptree_t.push(subl.middle_product(<span class=\"kw-2\">&amp;</span>s, len).prefix(dr));\n<span data-nosnippet>429</span>        }\n<span data-nosnippet>430</span>        uptree_t[n..]\n<span data-nosnippet>431</span>            .iter()\n<span data-nosnippet>432</span>            .map(|u| u.data.first().cloned().unwrap_or_else(Zero::zero))\n<span data-nosnippet>433</span>            .collect()\n<span data-nosnippet>434</span>    }</code></pre></div></div></div></details></div></details>",0,"competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#71-86\">Source</a><a href=\"#impl-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/num/trait.Zero.html\" title=\"trait competitive::num::Zero\">Zero</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.trim_tail_zeros\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#75-85\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.trim_tail_zeros\" class=\"fn\">trim_tail_zeros</a>(&amp;mut self)</h4></section></summary><div class=\"docblock scraped-example-list\"><span></span><h5 id=\"scraped-examples\"><a href=\"#scraped-examples\">Examples found in repository</a><a class=\"scrape-help\" href=\"scrape-examples-help.html\">?</a></h5><div class=\"scraped-example\" data-locs=\"[[[5,5],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#32&#34;,&#34;line 32&#34;],[[108,108],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#135&#34;,&#34;line 135&#34;],[[185,185],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#212&#34;,&#34;line 212&#34;],[[186,186],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#213&#34;,&#34;line 213&#34;],[[207,207],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#234&#34;,&#34;line 234&#34;],[[220,220],&#34;src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#247&#34;,&#34;line 247&#34;]]\"><div class=\"scraped-example-title\">crates/competitive/src/math/formal_power_series/formal_power_series_nums.rs (<a href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#32\">line 32</a>)</div><div class=\"example-wrap digits-3\"><pre class=\"rust\"><code><span data-nosnippet>27</span>    <span class=\"kw\">fn </span>sub_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: T) {\n<span data-nosnippet>28</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() == <span class=\"number\">0 </span>{\n<span data-nosnippet>29</span>            <span class=\"self\">self</span>.data.push(T::zero());\n<span data-nosnippet>30</span>        }\n<span data-nosnippet>31</span>        <span class=\"self\">self</span>.data[<span class=\"number\">0</span>].sub_assign(rhs);\n<span data-nosnippet>32</span>        <span class=\"self\">self</span>.<span class=\"highlight focus\">trim_tail_zeros</span>();\n<span data-nosnippet>33</span>    }\n<span data-nosnippet>34</span>}\n<span data-nosnippet>35</span><span class=\"kw\">impl</span>&lt;T, C&gt; MulAssign&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>36</span><span class=\"kw\">where\n<span data-nosnippet>37</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>38</span>{\n<span data-nosnippet>39</span>    <span class=\"kw\">fn </span>mul_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: T) {\n<span data-nosnippet>40</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut() {\n<span data-nosnippet>41</span>            x.mul_assign(<span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>42</span>        }\n<span data-nosnippet>43</span>    }\n<span data-nosnippet>44</span>}\n<span data-nosnippet>45</span><span class=\"kw\">impl</span>&lt;T, C&gt; DivAssign&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>46</span><span class=\"kw\">where\n<span data-nosnippet>47</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>48</span>{\n<span data-nosnippet>49</span>    <span class=\"kw\">fn </span>div_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: T) {\n<span data-nosnippet>50</span>        <span class=\"kw\">let </span>rinv = T::one() / rhs;\n<span data-nosnippet>51</span>        <span class=\"kw\">for </span>x <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut() {\n<span data-nosnippet>52</span>            x.mul_assign(<span class=\"kw-2\">&amp;</span>rinv);\n<span data-nosnippet>53</span>        }\n<span data-nosnippet>54</span>    }\n<span data-nosnippet>55</span>}\n<span data-nosnippet>56</span><span class=\"macro\">macro_rules!</span> impl_fps_single_binop {\n<span data-nosnippet>57</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>58</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign</span>&lt;<span class=\"kw-2\">&amp;</span>T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>59</span>        <span class=\"kw\">where\n<span data-nosnippet>60</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>61</span>        {\n<span data-nosnippet>62</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>T) {\n<span data-nosnippet>63</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, rhs.clone());\n<span data-nosnippet>64</span>            }\n<span data-nosnippet>65</span>        }\n<span data-nosnippet>66</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>67</span>        <span class=\"kw\">where\n<span data-nosnippet>68</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>69</span>        {\n<span data-nosnippet>70</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>71</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>72</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs);\n<span data-nosnippet>73</span>                <span class=\"self\">self\n<span data-nosnippet>74</span>            </span>}\n<span data-nosnippet>75</span>        }\n<span data-nosnippet>76</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>T&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>77</span>        <span class=\"kw\">where\n<span data-nosnippet>78</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>79</span>        {\n<span data-nosnippet>80</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>81</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>82</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs);\n<span data-nosnippet>83</span>                <span class=\"self\">self\n<span data-nosnippet>84</span>            </span>}\n<span data-nosnippet>85</span>        }\n<span data-nosnippet>86</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;T&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>87</span>        <span class=\"kw\">where\n<span data-nosnippet>88</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>89</span>        {\n<span data-nosnippet>90</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>91</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>92</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs)\n<span data-nosnippet>93</span>            }\n<span data-nosnippet>94</span>        }\n<span data-nosnippet>95</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>T&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>96</span>        <span class=\"kw\">where\n<span data-nosnippet>97</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>98</span>        {\n<span data-nosnippet>99</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>100</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>T) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>101</span>                <span class=\"macro-nonterminal\">$imp</span>::<span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>.clone(), rhs)\n<span data-nosnippet>102</span>            }\n<span data-nosnippet>103</span>        }\n<span data-nosnippet>104</span>    };\n<span data-nosnippet>105</span>}\n<span data-nosnippet>106</span><span class=\"macro\">impl_fps_single_binop!</span>(Add, add, AddAssign, add_assign);\n<span data-nosnippet>107</span><span class=\"macro\">impl_fps_single_binop!</span>(Sub, sub, SubAssign, sub_assign);\n<span data-nosnippet>108</span><span class=\"macro\">impl_fps_single_binop!</span>(Mul, mul, MulAssign, mul_assign);\n<span data-nosnippet>109</span><span class=\"macro\">impl_fps_single_binop!</span>(Div, div, DivAssign, div_assign);\n<span data-nosnippet>110</span>\n<span data-nosnippet>111</span><span class=\"kw\">impl</span>&lt;T, C&gt; AddAssign&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>112</span><span class=\"kw\">where\n<span data-nosnippet>113</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>114</span>{\n<span data-nosnippet>115</span>    <span class=\"kw\">fn </span>add_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>116</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>117</span>            <span class=\"self\">self</span>.resize(rhs.length());\n<span data-nosnippet>118</span>        }\n<span data-nosnippet>119</span>        <span class=\"kw\">for </span>(x, y) <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().zip(rhs.iter()) {\n<span data-nosnippet>120</span>            x.add_assign(y);\n<span data-nosnippet>121</span>        }\n<span data-nosnippet>122</span>    }\n<span data-nosnippet>123</span>}\n<span data-nosnippet>124</span><span class=\"kw\">impl</span>&lt;T, C&gt; SubAssign&lt;<span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>125</span><span class=\"kw\">where\n<span data-nosnippet>126</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>127</span>{\n<span data-nosnippet>128</span>    <span class=\"kw\">fn </span>sub_assign(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span><span class=\"self\">Self</span>) {\n<span data-nosnippet>129</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>130</span>            <span class=\"self\">self</span>.resize(rhs.length());\n<span data-nosnippet>131</span>        }\n<span data-nosnippet>132</span>        <span class=\"kw\">for </span>(x, y) <span class=\"kw\">in </span><span class=\"self\">self</span>.iter_mut().zip(rhs.iter()) {\n<span data-nosnippet>133</span>            x.sub_assign(y);\n<span data-nosnippet>134</span>        }\n<span data-nosnippet>135</span>        <span class=\"self\">self</span>.<span class=\"highlight\">trim_tail_zeros</span>();\n<span data-nosnippet>136</span>    }\n<span data-nosnippet>137</span>}\n<span data-nosnippet>138</span>\n<span data-nosnippet>139</span><span class=\"macro\">macro_rules!</span> impl_fps_binop_addsub {\n<span data-nosnippet>140</span>    (<span class=\"macro-nonterminal\">$imp</span>:ident, <span class=\"macro-nonterminal\">$method</span>:ident, <span class=\"macro-nonterminal\">$imp_assign</span>:ident, <span class=\"macro-nonterminal\">$method_assign</span>:ident) =&gt; {\n<span data-nosnippet>141</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp_assign </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>142</span>        <span class=\"kw\">where\n<span data-nosnippet>143</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>144</span>        {\n<span data-nosnippet>145</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) {\n<span data-nosnippet>146</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"self\">self</span>, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>147</span>            }\n<span data-nosnippet>148</span>        }\n<span data-nosnippet>149</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp </span><span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>150</span>        <span class=\"kw\">where\n<span data-nosnippet>151</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>152</span>        {\n<span data-nosnippet>153</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>154</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>155</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>156</span>                <span class=\"self\">self\n<span data-nosnippet>157</span>            </span>}\n<span data-nosnippet>158</span>        }\n<span data-nosnippet>159</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>160</span>        <span class=\"kw\">where\n<span data-nosnippet>161</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>162</span>        {\n<span data-nosnippet>163</span>            <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>164</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>165</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, rhs);\n<span data-nosnippet>166</span>                <span class=\"self\">self\n<span data-nosnippet>167</span>            </span>}\n<span data-nosnippet>168</span>        }\n<span data-nosnippet>169</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>170</span>        <span class=\"kw\">where\n<span data-nosnippet>171</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>172</span>        {\n<span data-nosnippet>173</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>174</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>175</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">self</span>.clone();\n<span data-nosnippet>176</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span>self_, <span class=\"kw-2\">&amp;</span>rhs);\n<span data-nosnippet>177</span>                self_\n<span data-nosnippet>178</span>            }\n<span data-nosnippet>179</span>        }\n<span data-nosnippet>180</span>        <span class=\"kw\">impl</span>&lt;T, C&gt; <span class=\"macro-nonterminal\">$imp</span>&lt;<span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;&gt; <span class=\"kw\">for </span><span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>181</span>        <span class=\"kw\">where\n<span data-nosnippet>182</span>            </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>183</span>        {\n<span data-nosnippet>184</span>            <span class=\"kw\">type </span>Output = FormalPowerSeries&lt;T, C&gt;;\n<span data-nosnippet>185</span>            <span class=\"kw\">fn </span><span class=\"macro-nonterminal\">$method</span>(<span class=\"self\">self</span>, rhs: <span class=\"kw-2\">&amp;</span>FormalPowerSeries&lt;T, C&gt;) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>186</span>                <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>self_ = <span class=\"self\">self</span>.clone();\n<span data-nosnippet>187</span>                <span class=\"macro-nonterminal\">$imp_assign</span>::<span class=\"macro-nonterminal\">$method_assign</span>(<span class=\"kw-2\">&amp;mut </span>self_, rhs);\n<span data-nosnippet>188</span>                self_\n<span data-nosnippet>189</span>            }\n<span data-nosnippet>190</span>        }\n<span data-nosnippet>191</span>    };\n<span data-nosnippet>192</span>}\n<span data-nosnippet>193</span><span class=\"macro\">impl_fps_binop_addsub!</span>(Add, add, AddAssign, add_assign);\n<span data-nosnippet>194</span><span class=\"macro\">impl_fps_binop_addsub!</span>(Sub, sub, SubAssign, sub_assign);\n<span data-nosnippet>195</span>\n<span data-nosnippet>196</span><span class=\"kw\">impl</span>&lt;T, C&gt; Mul <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>197</span><span class=\"kw\">where\n<span data-nosnippet>198</span>    </span>C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>199</span>{\n<span data-nosnippet>200</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>201</span>    <span class=\"kw\">fn </span>mul(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>202</span>        <span class=\"self\">Self</span>::from_vec(C::convolve(<span class=\"self\">self</span>.data, rhs.data))\n<span data-nosnippet>203</span>    }\n<span data-nosnippet>204</span>}\n<span data-nosnippet>205</span><span class=\"kw\">impl</span>&lt;T, C&gt; Div <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>206</span><span class=\"kw\">where\n<span data-nosnippet>207</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>208</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>209</span>{\n<span data-nosnippet>210</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>211</span>    <span class=\"kw\">fn </span>div(<span class=\"kw-2\">mut </span><span class=\"self\">self</span>, <span class=\"kw-2\">mut </span>rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>212</span>        <span class=\"self\">self</span>.<span class=\"highlight\">trim_tail_zeros</span>();\n<span data-nosnippet>213</span>        rhs.<span class=\"highlight\">trim_tail_zeros</span>();\n<span data-nosnippet>214</span>        <span class=\"kw\">if </span><span class=\"self\">self</span>.length() &lt; rhs.length() {\n<span data-nosnippet>215</span>            <span class=\"kw\">return </span><span class=\"self\">Self</span>::zero();\n<span data-nosnippet>216</span>        }\n<span data-nosnippet>217</span>        <span class=\"self\">self</span>.data.reverse();\n<span data-nosnippet>218</span>        rhs.data.reverse();\n<span data-nosnippet>219</span>        <span class=\"kw\">let </span>n = <span class=\"self\">self</span>.length() - rhs.length() + <span class=\"number\">1</span>;\n<span data-nosnippet>220</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>res = <span class=\"self\">self </span>* rhs.inv(n);\n<span data-nosnippet>221</span>        res.truncate(n);\n<span data-nosnippet>222</span>        res.data.reverse();\n<span data-nosnippet>223</span>        res\n<span data-nosnippet>224</span>    }\n<span data-nosnippet>225</span>}\n<span data-nosnippet>226</span><span class=\"kw\">impl</span>&lt;T, C&gt; Rem <span class=\"kw\">for </span>FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>227</span><span class=\"kw\">where\n<span data-nosnippet>228</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>229</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>230</span>{\n<span data-nosnippet>231</span>    <span class=\"kw\">type </span>Output = <span class=\"self\">Self</span>;\n<span data-nosnippet>232</span>    <span class=\"kw\">fn </span>rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; <span class=\"self\">Self</span>::Output {\n<span data-nosnippet>233</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self</span>.clone() - <span class=\"self\">self </span>/ rhs.clone() * rhs;\n<span data-nosnippet>234</span>        rem.<span class=\"highlight\">trim_tail_zeros</span>();\n<span data-nosnippet>235</span>        rem\n<span data-nosnippet>236</span>    }\n<span data-nosnippet>237</span>}\n<span data-nosnippet>238</span>\n<span data-nosnippet>239</span><span class=\"kw\">impl</span>&lt;T, C&gt; FormalPowerSeries&lt;T, C&gt;\n<span data-nosnippet>240</span><span class=\"kw\">where\n<span data-nosnippet>241</span>    </span>T: FormalPowerSeriesCoefficient,\n<span data-nosnippet>242</span>    C: ConvolveSteps&lt;T = Vec&lt;T&gt;&gt;,\n<span data-nosnippet>243</span>{\n<span data-nosnippet>244</span>    <span class=\"kw\">pub fn </span>div_rem(<span class=\"self\">self</span>, rhs: <span class=\"self\">Self</span>) -&gt; (<span class=\"self\">Self</span>, <span class=\"self\">Self</span>) {\n<span data-nosnippet>245</span>        <span class=\"kw\">let </span>div = <span class=\"self\">self</span>.clone() / rhs.clone();\n<span data-nosnippet>246</span>        <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rem = <span class=\"self\">self </span>- div.clone() * rhs;\n<span data-nosnippet>247</span>        rem.<span class=\"highlight\">trim_tail_zeros</span>();\n<span data-nosnippet>248</span>        (div, rem)\n<span data-nosnippet>249</span>    }</code></pre></div></div></div></details></div></details>",0,"competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#239-250\">Source</a><a href=\"#impl-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.div_rem\" class=\"method\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#244-249\">Source</a><h4 class=\"code-header\">pub fn <a href=\"competitive/math/struct.FormalPowerSeries.html#tymethod.div_rem\" class=\"fn\">div_rem</a>(self, rhs: Self) -&gt; (Self, Self)</h4></section></div></details>",0,"competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#145-149\">Source</a><a href=\"#impl-From%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#146-148\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(x: T) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CT%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#150-154\">Source</a><a href=\"#impl-From%3CVec%3CT%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#151-153\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(data: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; Self</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<T>>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#127-131\">Source</a><a href=\"#impl-FromIterator%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#128-130\">Source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = T&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#133-138\">Source</a><a href=\"#impl-Index%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#134\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = T</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#135-137\">Source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<usize>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#139-143\">Source</a><a href=\"#impl-IndexMut%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#140-142\">Source</a><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &amp;mut Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<usize>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#105-111\">Source</a><a href=\"#impl-IntoIterator-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#106\">Source</a><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = T</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#107\">Source</a><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">IntoIter</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#108-110\">Source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#304\">Source</a><a href=\"#impl-Mul%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;&amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#304\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#304\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: &amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&FormalPowerSeries<T, C>>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#108\">Source</a><a href=\"#impl-Mul%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#108\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#108\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#108\">Source</a><a href=\"#impl-Mul%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#108\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#108\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: T) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#196-204\">Source</a><a href=\"#impl-Mul-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html\" title=\"trait core::ops::arith::Mul\">Mul</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#200\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#201-203\">Source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, rhs: Self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::arith::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#304\">Source</a><a href=\"#impl-MulAssign%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#304\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: &amp;Self)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&FormalPowerSeries<T, C>>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#108\">Source</a><a href=\"#impl-MulAssign%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#108\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#35-44\">Source</a><a href=\"#impl-MulAssign%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#39-43\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: T)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#304\">Source</a><a href=\"#impl-MulAssign-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html\" title=\"trait core::ops::arith::MulAssign\">MulAssign</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#304\">Source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, rhs: Self)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#308-319\">Source</a><a href=\"#impl-Neg-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#312\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#313-318\">Source</a><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#associatedtype.Output\" title=\"type core::ops::arith::Neg::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-One-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#96-103\">Source</a><a href=\"#impl-One-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"competitive/num/trait.One.html\" title=\"trait competitive::num::One\">One</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + <a class=\"trait\" href=\"competitive/num/trait.One.html\" title=\"trait competitive::num::One\">One</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#100-102\">Source</a><a href=\"#method.one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.One.html#tymethod.one\" class=\"fn\">one</a>() -&gt; Self</h4></section><section id=\"method.is_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/zero_one.rs.html#18-23\">Source</a><a href=\"#method.is_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.One.html#method.is_one\" class=\"fn\">is_one</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section><section id=\"method.set_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/zero_one.rs.html#25-27\">Source</a><a href=\"#method.set_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.One.html#method.set_one\" class=\"fn\">set_one</a>(&amp;mut self)</h4></section></div></details>","One","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#41-48\">Source</a><a href=\"#impl-PartialEq-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#45-47\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#306\">Source</a><a href=\"#impl-Rem%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a>&lt;&amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#306\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#306\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: &amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::arith::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&FormalPowerSeries<T, C>>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#226-237\">Source</a><a href=\"#impl-Rem-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html\" title=\"trait core::ops::arith::Rem\">Rem</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#231\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#232-236\">Source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, rhs: Self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::arith::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#306\">Source</a><a href=\"#impl-RemAssign%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#306\">Source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: &amp;Self)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<&FormalPowerSeries<T, C>>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#306\">Source</a><a href=\"#impl-RemAssign-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html\" title=\"trait core::ops::arith::RemAssign\">RemAssign</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,\n    C: <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a>&lt;T = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#306\">Source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, rhs: Self)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#371-380\">Source</a><a href=\"#impl-Shl%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html\" title=\"trait core::ops::bit::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#375\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#376-379\">Source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::bit::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<usize>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#345-359\">Source</a><a href=\"#impl-ShlAssign%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html\" title=\"trait core::ops::bit::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#349-358\">Source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<usize>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#361-370\">Source</a><a href=\"#impl-Shr%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#365\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#366-369\">Source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::bit::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<usize>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#330-344\">Source</a><a href=\"#impl-ShrAssign%3Cusize%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html\" title=\"trait core::ops::bit::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#334-343\">Source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<usize>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#194\">Source</a><a href=\"#impl-Sub%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;&amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#194\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#194\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: &amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&FormalPowerSeries<T, C>>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#107\">Source</a><a href=\"#impl-Sub%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#107\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#107\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#107\">Source</a><a href=\"#impl-Sub%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#107\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#107\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: T) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#194\">Source</a><a href=\"#impl-Sub-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html\" title=\"trait core::ops::arith::Sub\">Sub</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#194\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#194\">Source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, rhs: Self) -&gt; Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::arith::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#124-137\">Source</a><a href=\"#impl-SubAssign%3C%26FormalPowerSeries%3CT,+C%3E%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#128-136\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: &amp;Self)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<&FormalPowerSeries<T, C>>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#107\">Source</a><a href=\"#impl-SubAssign%3C%26T%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#107\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<&T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#23-34\">Source</a><a href=\"#impl-SubAssign%3CT%3E-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a>&lt;T&gt; for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#27-33\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: T)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<T>","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#194\">Source</a><a href=\"#impl-SubAssign-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html\" title=\"trait core::ops::arith::SubAssign\">SubAssign</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"competitive/math/trait.FormalPowerSeriesCoefficient.html\" title=\"trait competitive::math::FormalPowerSeriesCoefficient\">FormalPowerSeriesCoefficient</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_nums.rs.html#194\">Source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, rhs: Self)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zero-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#88-95\">Source</a><a href=\"#impl-Zero-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"competitive/num/trait.Zero.html\" title=\"trait competitive::num::Zero\">Zero</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#92-94\">Source</a><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.Zero.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; Self</h4></section><section id=\"method.is_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/zero_one.rs.html#4-9\">Source</a><a href=\"#method.is_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.Zero.html#method.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h4></section><section id=\"method.set_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/num/zero_one.rs.html#11-13\">Source</a><a href=\"#method.set_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/num/trait.Zero.html#method.set_zero\" class=\"fn\">set_zero</a>(&amp;mut self)</h4></section></div></details>","Zero","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"],["<section id=\"impl-Eq-for-FormalPowerSeries%3CT,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/formal_power_series/formal_power_series_impls.rs.html#49\">Source</a><a href=\"#impl-Eq-for-FormalPowerSeries%3CT,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, C&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"competitive/math/struct.FormalPowerSeries.html\" title=\"struct competitive::math::FormalPowerSeries\">FormalPowerSeries</a>&lt;T, C&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section>","Eq","competitive::math::formal_power_series::Fps998244353","competitive::math::formal_power_series::Fps"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[679239]}