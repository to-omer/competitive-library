(function() {
    var type_impls = Object.fromEntries([["competitive",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvolveSteps-for-Convolve%3C(M,+(N1,+N2,+N3))%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#336-411\">Source</a><a href=\"#impl-ConvolveSteps-for-Convolve%3C(M,+(N1,+N2,+N3))%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M, N1, N2, N3&gt; <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a> for <a class=\"struct\" href=\"competitive/math/struct.Convolve.html\" title=\"struct competitive::math::Convolve\">Convolve</a>&lt;(M, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(N1, N2, N3)</a>)&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a> + <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;,\n    N1: Montgomery32NttModulus,\n    N2: Montgomery32NttModulus,\n    N3: Montgomery32NttModulus,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#343\">Source</a><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" class=\"associatedtype\">T</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt;</h4></section><section id=\"associatedtype.F\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#344\">Source</a><a href=\"#associatedtype.F\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" class=\"associatedtype\">F</a> = (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;N1&gt;&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;N2&gt;&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;N3&gt;&gt;)</h4></section><section id=\"method.length\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#345-347\">Source</a><a href=\"#method.length\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.ConvolveSteps.html#tymethod.length\" class=\"fn\">length</a>(t: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.transform\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#348-367\">Source</a><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.ConvolveSteps.html#tymethod.transform\" class=\"fn\">transform</a>(t: Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a></h4></section><section id=\"method.inverse_transform\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#368-386\">Source</a><a href=\"#method.inverse_transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.ConvolveSteps.html#tymethod.inverse_transform\" class=\"fn\">inverse_transform</a>(f: Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a></h4></section><section id=\"method.multiply\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#387-400\">Source</a><a href=\"#method.multiply\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.ConvolveSteps.html#tymethod.multiply\" class=\"fn\">multiply</a>(f: &amp;mut Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>, g: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>)</h4></section><section id=\"method.convolve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#401-410\">Source</a><a href=\"#method.convolve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.ConvolveSteps.html#method.convolve\" class=\"fn\">convolve</a>(a: Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a>, b: Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a></h4></section></div></details>","ConvolveSteps","competitive::math::number_theoretic_transform::MIntConvolve"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ConvolveSteps-for-Convolve%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#270-334\">Source</a><a href=\"#impl-ConvolveSteps-for-Convolve%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"competitive/math/trait.ConvolveSteps.html\" title=\"trait competitive::math::ConvolveSteps\">ConvolveSteps</a> for <a class=\"struct\" href=\"competitive/math/struct.Convolve.html\" title=\"struct competitive::math::Convolve\">Convolve</a>&lt;M&gt;<div class=\"where\">where\n    M: Montgomery32NttModulus,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedtype.T\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#274\">Source</a><a href=\"#associatedtype.T\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" class=\"associatedtype\">T</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt;</h4></section><section id=\"associatedtype.F\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#275\">Source</a><a href=\"#associatedtype.F\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" class=\"associatedtype\">F</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"competitive/num/struct.MInt.html\" title=\"struct competitive::num::MInt\">MInt</a>&lt;M&gt;&gt;</h4></section><section id=\"method.length\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#276-278\">Source</a><a href=\"#method.length\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.ConvolveSteps.html#tymethod.length\" class=\"fn\">length</a>(t: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section><section id=\"method.transform\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#279-283\">Source</a><a href=\"#method.transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.ConvolveSteps.html#tymethod.transform\" class=\"fn\">transform</a>(t: Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a></h4></section><section id=\"method.inverse_transform\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#284-292\">Source</a><a href=\"#method.inverse_transform\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.ConvolveSteps.html#tymethod.inverse_transform\" class=\"fn\">inverse_transform</a>(f: Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>, len: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a></h4></section><section id=\"method.multiply\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#293-298\">Source</a><a href=\"#method.multiply\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.ConvolveSteps.html#tymethod.multiply\" class=\"fn\">multiply</a>(f: &amp;mut Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>, g: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>)</h4></section><section id=\"method.convolve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#299-333\">Source</a><a href=\"#method.convolve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.ConvolveSteps.html#method.convolve\" class=\"fn\">convolve</a>(a: Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a>, b: Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.T\" title=\"type competitive::math::ConvolveSteps::T\">T</a></h4></section></div></details>","ConvolveSteps","competitive::math::number_theoretic_transform::Convolve998244353","competitive::math::number_theoretic_transform::MIntConvolve"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NttReuse-for-Convolve%3C(M,+(N1,+N2,+N3))%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#492-590\">Source</a><a href=\"#impl-NttReuse-for-Convolve%3C(M,+(N1,+N2,+N3))%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M, N1, N2, N3&gt; <a class=\"trait\" href=\"competitive/math/trait.NttReuse.html\" title=\"trait competitive::math::NttReuse\">NttReuse</a> for <a class=\"struct\" href=\"competitive/math/struct.Convolve.html\" title=\"struct competitive::math::Convolve\">Convolve</a>&lt;(M, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(N1, N2, N3)</a>)&gt;<div class=\"where\">where\n    M: <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a> + <a class=\"trait\" href=\"competitive/num/trait.MIntConvert.html\" title=\"trait competitive::num::MIntConvert\">MIntConvert</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;,\n    N1: Montgomery32NttModulus,\n    N2: Montgomery32NttModulus,\n    N3: Montgomery32NttModulus,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.ntt_doubling\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#499-505\">Source</a><a href=\"#method.ntt_doubling\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.NttReuse.html#tymethod.ntt_doubling\" class=\"fn\">ntt_doubling</a>(f: Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a></h4></section></summary><div class='docblock'>F(a) → F(a + [0] * a.len())</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.even_mul_normal_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#507-539\">Source</a><a href=\"#method.even_mul_normal_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.NttReuse.html#tymethod.even_mul_normal_neg\" class=\"fn\">even_mul_normal_neg</a>(f: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>, g: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a></h4></section></summary><div class='docblock'>F(a(x)), F(b(x)) → even(F(a(x) * b(-x)))</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.odd_mul_normal_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#541-589\">Source</a><a href=\"#method.odd_mul_normal_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.NttReuse.html#tymethod.odd_mul_normal_neg\" class=\"fn\">odd_mul_normal_neg</a>(f: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>, g: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a></h4></section></summary><div class='docblock'>F(a(x)), F(b(x)) → odd(F(a(x) * b(-x)))</div></details><section id=\"associatedconstant.MULTIPLE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#414\">Source</a><a href=\"#associatedconstant.MULTIPLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"competitive/math/trait.NttReuse.html#associatedconstant.MULTIPLE\" class=\"constant\">MULTIPLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = true</h4></section></div></details>","NttReuse","competitive::math::number_theoretic_transform::MIntConvolve"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NttReuse-for-Convolve%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#430-490\">Source</a><a href=\"#impl-NttReuse-for-Convolve%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M&gt; <a class=\"trait\" href=\"competitive/math/trait.NttReuse.html\" title=\"trait competitive::math::NttReuse\">NttReuse</a> for <a class=\"struct\" href=\"competitive/math/struct.Convolve.html\" title=\"struct competitive::math::Convolve\">Convolve</a>&lt;M&gt;<div class=\"where\">where\n    M: Montgomery32NttModulus,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.MULTIPLE\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#434\">Source</a><a href=\"#associatedconstant.MULTIPLE\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"competitive/math/trait.NttReuse.html#associatedconstant.MULTIPLE\" class=\"constant\">MULTIPLE</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a> = false</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.ntt_doubling\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#436-448\">Source</a><a href=\"#method.ntt_doubling\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.NttReuse.html#tymethod.ntt_doubling\" class=\"fn\">ntt_doubling</a>(f: Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a></h4></section></summary><div class='docblock'>F(a) → F(a + [0] * a.len())</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.even_mul_normal_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#450-459\">Source</a><a href=\"#method.even_mul_normal_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.NttReuse.html#tymethod.even_mul_normal_neg\" class=\"fn\">even_mul_normal_neg</a>(f: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>, g: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a></h4></section></summary><div class='docblock'>F(a(x)), F(b(x)) → even(F(a(x) * b(-x)))</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.odd_mul_normal_neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/competitive/math/number_theoretic_transform.rs.html#461-489\">Source</a><a href=\"#method.odd_mul_normal_neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"competitive/math/trait.NttReuse.html#tymethod.odd_mul_normal_neg\" class=\"fn\">odd_mul_normal_neg</a>(f: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>, g: &amp;Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a>) -&gt; Self::<a class=\"associatedtype\" href=\"competitive/math/trait.ConvolveSteps.html#associatedtype.F\" title=\"type competitive::math::ConvolveSteps::F\">F</a></h4></section></summary><div class='docblock'>F(a(x)), F(b(x)) → odd(F(a(x) * b(-x)))</div></details></div></details>","NttReuse","competitive::math::number_theoretic_transform::Convolve998244353","competitive::math::number_theoretic_transform::MIntConvolve"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[22229]}