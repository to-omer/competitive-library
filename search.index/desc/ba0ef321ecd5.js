rd_("o(-m)^{-1} mod n0Aetype of operands: $T$nType of value.cgcdin^1 mod m0in^2 mod m0in^3 mod m0Andp[v]: result of v-rooted treeCaep[e]: result of e-subtree, if e &gt;= n then \xe2\x80\xa6BlReturns the remaining count after moving up.amAfadditive operaion: $+$0Bkmultiplicative right inversed operaion: $-$0AnDiscrete Optimization ProblemsAeData Sets and Queriesjbinary gcdAjget i-th value of rho pathCjReturns a reference to the value corresponding to the key.A`Graph AlgorithmsAkmultiplicative inverse: $-$0Aegcd(a, mod) must be 1Almultiplicative operaion: $+$0Aeadditive inverse: $-$0AeCreate a empty space.BiMakes a new, empty <code>RangeMap</code>.BiMakes a new, empty <code>RangeSet</code>.lCreate emptyAfConstruct empty graph.Almultiplicative identity: $1$0Cbbinary exponentiation: $x^n = x\\circ\\ddots\\circ x$0m\xe2\x9c\x85  AC  87msBeadditive right inversed operaion: $-$0DcThe <code>Read</code> trait allows for reading bytes from a source.ClReturn coordinate if element can be consisted by current \xe2\x80\xa6AdReturn fold of range0Am0-indexed [i1, i2) x [j1, j2)AoReturns the argument unchanged.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BaCalls <code>U::from(self)</code>.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AmIntroduction to Programming IAbmathematical datasAegcd(a, mod) must be 1CdDeclare random values using <code>RandomSpec</code>.AfReturn a random value.Ajthe number of val in rangeCgPull some bytes from this source into the specified \xe2\x80\xa6Bascan and bind values with Scanner00DgCreates an adapter which will read at most <code>limit</code> bytes \xe2\x80\xa6otree algorithmsAeidentity element: $e$Afadditive identity: $0$0Classociative binary operation and an identity element and \xe2\x80\xa6Bbbinary operaion: $T \\circ T \\to T$CbA trait for objects which are byte-oriented sinks.ClReturn coordinate if element can be consisted by current \xe2\x80\xa6nbuild rho pathEcTransforms this <code>Read</code> instance to an <code>Iterator</code> over its \xe2\x80\xa6ChCreates an adapter which will chain this stream with \xe2\x80\xa6BfClears the map, removing all elements.BfClears the set, removing all elements.CaFlushes this output stream, ensuring that all \xe2\x80\xa6Aograph structures and algorithmsAithe number of 0 in [0, k)0Aithe number of 1 in [0, k)0Aaf\xe2\x80\x99(x) := f(x-a)CnWrites a buffer into this writer, returning how many bytes \xe2\x80\xa6Adbinary search helperCjGarner\xe2\x80\x99s algorithm with precomputation for fixed moduli.Cdassociative binary operation and an identity elementBdTrait for signed integer operations.Cn$\\exists e \\in T, \\forall a \\in T, e \\circ a = a \\circ e = \xe2\x80\xa6lget k-th bitnget k-th valuel\xe2\x9c\x85  AC  0msCmCreates a \xe2\x80\x9cby reference\xe2\x80\x9d adapter for this instance of \xe2\x80\xa60CjReturn true if inserted element cannot be consisted by \xe2\x80\xa6BhInserts values into the specified range.BaInserts into the specified range.Alchecks if the element is one0CkReturn (reduced basis, coordinate). Coordinate means if \xe2\x80\xa6Aon^{-1}x = (x + (xr mod n)m) / n0BeRemove values contained in the range.BdRemove items contained in the range.Aaindex of k-th valAastring algorithmsBiadd a, a+d, \xe2\x80\xa6, a+(k-1)d into [l, l + k)mCreate valleyAhTrait for max/min boundsBmTrait for basic primitive integer operations.C`$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$Aeternary search helpermf(x) += |x-a|galgebraAeCoin Changing Probleml\xe2\x9c\x85  AC  1msAd0-1 Knapsack Probleml\xe2\x9c\x85  AC  0msA`Knapsack Problem3AnLongest Increasing Subsequencel\xe2\x9c\x85  AC  3msBdEdit Distance (Levenshtein Distance)6Ag0-1 Knapsack Problem II5BaKnapsack Problem with Limitationsl\xe2\x9c\x85  AC  4msAeHuge Knapsack Problemm\xe2\x9c\x85  AC  34msBdKnapsack Problem with Limitations II:nLargest Squarem\xe2\x9c\x85  AC  10msAaLargest Rectangle1B`Largest Rectangle in a Histograml\xe2\x9c\x85  AC  2msAmDisjoint Set: Union Find Tree9AiWeighted Union Find Treesm\xe2\x9c\x85  AC  12msAiRange Minimum Query (RMQ)m\xe2\x9c\x85  AC  11msoRange Sum Query9AfRange Search (kD Tree)n\xe2\x9c\x85  AC  231msAhRange Update Query (RUQ)m\xe2\x9c\x85  AC  42msAeRange Add Query (RAQ)m\xe2\x9c\x85  AC  24mskRMQ and RUQm\xe2\x9c\x85  AC  46mskRSQ and RAQm\xe2\x9c\x85  AC  28mskRMQ and RAQm\xe2\x9c\x85  AC  25mskRSQ and RUQm\xe2\x9c\x85  AC  53msAeThe Smallest Window Il\xe2\x9c\x85  AC  2msAfThe Smallest Window IIl\xe2\x9c\x85  AC  1msAeThe Number of Windowsn\xe2\x9c\x85  AC  160msAgSliding Minimum Elementm\xe2\x9c\x85  AC  62msAcUnion of Rectanglesm\xe2\x9c\x85  AC  30msAoThe Maximum Number of Customers7AnThe Maximum Number of Overlapsl\xe2\x9c\x85  AC  3msAkSingle Source Shortest Pathm\xe2\x9c\x85  AC  46msBlSingle Source Shortest Path (Negative Edges)>AgAll Pairs Shortest Pathl\xe2\x9c\x85  AC  4msAeMinimum Spanning Treel\xe2\x9c\x85  AC  7msAiMinimum-Cost Arborescencel\xe2\x9c\x85  AC  0msAcArticulation Pointsl\xe2\x9c\x85  AC  1msgBridges1AmStrongly Connected Components8BdCycle Detection for a Directed Graph5A`Topological Sort4AbDiameter of a Treel\xe2\x9c\x85  AC  5msA`Height of a Tree7AfLowest Common Ancestorm\xe2\x9c\x85  AC  63msAeRange Query on a Treem\xe2\x9c\x85  AC  28msAhRange Query on a Tree IIn\xe2\x9c\x85  AC  118mslMaximum Flowl\xe2\x9c\x85  AC  0msAaMinimum Cost Flow1AbBipartite Matching2Ai$a$ where $a \\circ x = e$Amchecks if the element is zero0n\xe2\x9c\x85  AC  322msClconvert $\\sum_{i\\leq n} f(i)$ to $\\sum_{i\\leq n, i\\text{ \xe2\x80\xa6hmin f(x)CnMacro that define closure like macro. Unlike closure, this \xe2\x80\xa6Akg(d) = Sigma mu(d) * f(n/d)Ahbinary operaion: $\\circ$lx^n mod selfAfPrepare useful macros.Dglist primes less than or equal to <code>max_n</code> by segmented sieveoindex of k-th 00oindex of k-th 10n\xe2\x9c\x85  AC  156msCaA map to control intervals that have same values.AkA set to control intervals.Akimplement Ord by PartialOrdBfTrait for unsigned integer operations.CnWrapper type of arithmetic <code>wrapping_*</code> operations.AgBasis of xor operation.BkAdd edge with lower/upper capacity and costBjk-th add_line(a_k, b_k): a_k &gt;= a_{k+1}Aef(x) += max(0, (a-x))Aef(x) += max(0, (x-a))BgReturns true if the set contains a key.C`Macro that returns a recursive function that \xe2\x80\xa6kHello Worldl\xe2\x9c\x85  AC  0msBoAutomatic memorization for recursive functions.B`get k-th smallest value in rangeCkPull some bytes from this source into the specified buffer.Eb<code>cmp(key)</code>: <code>Ordering</code> between splaying and <code>key</code>m\xe2\x9c\x85  AC  44msBgReturn an iterator over graph vertices.0ha\xe2\x80\x93b-vcia\xe2\x80\x93c\xe2\x80\x93bBgdynamic programming on all-rooted treesAlassociative binary operationif(x) += aDacost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, \xe2\x80\xa6ialgorithmAorho path that index of rho pathm\xe2\x9c\x85  AC  61msAoSum of Floor of Linear mod 2^64BkReturns the range corresponding to the key.margmin_x f(x)C`Return an iterator that generates random values.0darg:m\xe2\x9c\x85  AC  13msCdAttempts to write an entire buffer into this writer.CmWrites a formatted string into this writer, returning any \xe2\x80\xa6oAccumlated dataCiTrait for operations of integer in binary representation.B`$\\forall a \\in T, a \\circ a = a$Ck$\\exists e \\in T, \\forall a \\in T, \\exists b,c \\in T, b \xe2\x80\xa6ic\xe2\x80\x93a\xe2\x80\x93bBdref: https://na-inet.jp/na/qd_ja.pdfBjTrait for spec of generating random value.D`Wrapper type of arithmetic <code>saturating_*</code> operations.AeReturn fold of [0, k)AoReturn fold of [0, x) \xc3\x97 [0, y)kfold [0, k]Adfold [0, i] x [0, j]Ae(p_x = f) | (p_y = g)jAdd demandjAdd supplyn\xe2\x9c\x85  AC  240msBaright to left accumulated minimumBoOperate and consume range-value pairs in range.AmOperate and consume in range.AkReturn the number of edges.0AkConstruct graph from edges.0BcPrint expressions with a separator.0CdReturn a random value using <code>RandomSpec</code>.Aothe number of valrange in rangeDbReads the exact number of bytes required to fill <code>buf</code>.Aiscan a value with Scanner0A`build transducer0A`(order, parents)m\xe2\x9c\x85  AC  18msCm$\\forall a,\\forall b,\\forall c \\in T, (a \\circ b) \\circ c \xe2\x80\xa6Cb$\\forall a,\\forall b \\in T, a \\circ b = b \\circ a$Biextended_gcd(a,b): ax + by = g = gcd(a,b)ia\xe2\x80\x93b\xe2\x80\x93cCiStatic Sparse Graph represented as Compressed Sparse Row.kfold [0, k)Adfold [0, i) x [0, j)BeReturn a slice of adjacency vertices.Aa[x^n] P(x) / Q(x)Baleft to right accumulated minimumfgithubm\xe2\x9c\x85  AC  60msCeReturns the first element that satisfies a predicate.D`map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>DbGet a left neighboring range of <code>[key, key)</code> if the \xe2\x80\xa60C`Insert values and operate old range-value pairs.AmInsert and operate old range.D`map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>m\xe2\x9c\x85  AC  97msDbPop a left neighboring range of <code>[key, key)</code> if the \xe2\x80\xa60CjReads all bytes until EOF in this source, placing them \xe2\x80\xa6o\xe2\x9c\x85  AC  1132msktree center0Aacommutative groupAm2-dimensional accumlated dataBibinary operation to select larger elementBjbinary operation to select smaller elementDjx1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)Djx1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)CeReturns true if the map contains a value for the key.Bj$y = \\left\\lfloor\\frac{n}{x}\\right\\rfloor$DcGet a right neighboring range of <code>[key, key)</code> if the \xe2\x80\xa60Ajempty sequence is includedCmconvert $\\sum_{i\\leq n, i\\text{ is prime}} f(i)$ to $\\sum_\xe2\x80\xa6Aksolve with Mo\xe2\x80\x99s algorithmAmF(a) \xe2\x86\x92 F(a + [0] * a.len())DcPop a right neighboring range of <code>[key, key)</code> if the \xe2\x80\xa60ChReturns the first index that satisfies a accumlative \xe2\x80\xa6000CdReturns the last element that satisfies a predicate.Acf(x) &lt;- f(x + a)Biadd a, a+d, \xe2\x80\xa6, a+(k-1)d into [l, l + k)Abcommutative monoidBeGraph represented by a list of edges.Agretain the last elementCestore with index ${\\lfloor\\frac{n}{i}\\rfloor \\mid \xe2\x80\xa6Bbbinary search for monotone segmentAoSum of Floor of Linear mod 2^64Bjthe number of value less than val in rangeDeLike <code>read</code>, except that it reads into a slice of buffers.CgReturns the last index that satisfies a accumlative \xe2\x80\xa6000Bkf\xe2\x80\x99(x) := min f(y) (x-a &lt;= y &lt;= x-b)AnReturn the number of vertices.0a|Ahretain the first elementBcGenerate Tree with Pr\xc3\xbcfer sequenceAgbinary search for slicem\xe2\x9c\x85  AC  60msodata structuresm\xe2\x9c\x85  AC  46msn\xe2\x9c\x85  AC  391msBdget k-th smallest value out of rangeDeReads the exact number of bytes required to fill <code>cursor</code>.ClReads all bytes until EOF in this source, appending them \xe2\x80\xa6CmReturns the element that gives the minimum value from the \xe2\x80\xa6DgLike <code>write</code>, except that it writes from a slice of buffers.An$$g(m) = \\sum_{n \\mid m}f(n)$$000j$+,\\times$CdTrait for a modifiable value associated with a type.e&amp;a^Agfibonacci search helperCl$(a, b) \\circ (c, d) = \\lambda x. c \\times (a \\times x + \xe2\x80\xa6BfLeft-close Right-open No Empty SegmentCgreturn F(x) where [x^n] P(x) / Q(x) = [x^d-1] P(x) F(x)kReturn normn\xe2\x9c\x85  AC  100msn\xe2\x9c\x85  AC  294msm\xe2\x9c\x85  AC  87msCfReturns the range-value pair corresponding to the key.1DaVerification of <code>competitive</code> crate by Library-Checkern\xe2\x9c\x85  AC  295msl\xe2\x9c\x85  AC  0msCnReturns the first index that satisfies a predicate. if not \xe2\x80\xa6ha\xe2\x80\x93b-^cAaidempotent monoidCfThe smallest number of colors needed to color a graph.m\xe2\x9c\x85  AC  65msn\xe2\x9c\x85  AC  913msBgImplement <code>AssociatedValue</code>.EfDetermines if this <code>Read</code>er has an efficient <code>read_vectored</code> \xe2\x80\xa6n\xe2\x9c\x85  AC  277msAn$$f(m) = \\sum_{n \\mid m}h(n)$$000CkReturns the last index+1 that satisfies a predicate. if \xe2\x80\xa6c$+$ChAdd demand/supply (positive for supply, negative for \xe2\x80\xa6DcVerification of <code>competitive</code> crate by Aizu Online Judgeo\xe2\x9c\x85  AC  2082msEgDetermines if this <code>Write</code>r has an efficient <code>write_vectored</code> \xe2\x80\xa6Adsum_i a_i exp(b_i x)AdReturn (flow, cost).n\xe2\x9c\x85  AC  181msm\xe2\x9c\x85  AC  71msAedet(self + other * x)Aaa^x \xe2\x89\xa1 b (mod n)BiF(a(x)), F(b(x)) \xe2\x86\x92 odd(F(a(x) * b(-x)))n\xe2\x9c\x85  AC  229msAhf: (row, pivot_row, col)n\xe2\x9c\x85  AC  359msn\xe2\x9c\x85  AC  498msCdAttempts to write multiple buffers into this writer.CaReturn between two elements if search is not end.BjF(a(x)), F(b(x)) \xe2\x86\x92 even(F(a(x) * b(-x)))Ahreturn: [(elem, length)]n\xe2\x9c\x85  AC  293msAm$\\min{0\\le i &lt; n | x^i=y}$n\xe2\x9c\x85  AC  202msCb$$\\sum_{i=0}^{n-1}i^X\\left\\lfloor\\frac{a\\times \xe2\x80\xa6n\xe2\x9c\x85  AC  789msCb0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2n\xe2\x9c\x85  AC  405msBdFind majority(strict) of a sequence.Adm is prime, n = 2^32n\xe2\x9c\x85  AC  366msCj$(a, b) \\circ (c, d) = \\lambda x. c \\wedge (a \\wedge x \xe2\x80\xa6Cgrank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1m\xe2\x9c\x85  AC  86msm\xe2\x9c\x85  AC  16msm\xe2\x9c\x85  AC  66msDamap <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>Fmmap (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>CiLagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)n\xe2\x9c\x85  AC  484msm\xe2\x9c\x85  AC  52msn\xe2\x9c\x85  AC  503msm\xe2\x9c\x85  AC  88msm\xe2\x9c\x85  AC  18msm\xe2\x9c\x85  AC  89msh$\\times$o\xe2\x9c\x85  AC  1051ms=Aa[(hcn, #divisor)]m\xe2\x9c\x85  AC  79msmreturn: (y,z)n\xe2\x9c\x85  AC  324msn\xe2\x9c\x85  AC  147msCb$$\\sum_{i=l}^{r-1}i^X\\left\\lfloor\\frac{a\\times \xe2\x80\xa6AaSolve ax + by = cCdDFA to accept Less/Greater than (or equal to) in \xe2\x80\xa6n\xe2\x9c\x85  AC  191msAdReturn (flow, cost).n\xe2\x9c\x85  AC  119msn\xe2\x9c\x85  AC  139msn\xe2\x9c\x85  AC  258msn\xe2\x9c\x85  AC  213msn\xe2\x9c\x85  AC  327msm\xe2\x9c\x85  AC  93msn\xe2\x9c\x85  AC  145msn\xe2\x9c\x85  AC  451msn\xe2\x9c\x85  AC  112msm\xe2\x9c\x85  AC  27msm\xe2\x9c\x85  AC  22msn\xe2\x9c\x85  AC  235msCmDFA to accept Less/Greater than (or equal to) in reversed \xe2\x80\xa6Damap <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>Damap <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>Damap <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>Damap <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>Bff: |g, root, ord: [vertex, parent]| {}ftarjann\xe2\x9c\x85  AC  878msm\xe2\x9c\x85  AC  96msm\xe2\x9c\x85  AC  70mshmax-heapm\xe2\x9c\x85  AC  72msm\xe2\x9c\x85  AC  58msn\xe2\x9c\x85  AC  160msn\xe2\x9c\x85  AC  114msn\xe2\x9c\x85  AC  132msmreturn: (y,z)o\xe2\x9c\x85  AC  1647msn\xe2\x9c\x85  AC  568msm\xe2\x9c\x85  AC  53msm\xe2\x9c\x85  AC  99ms")