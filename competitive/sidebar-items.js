initSidebarItems({"macro":[["add_assign",""],["automaton","build automaton"],["bitand_assign",""],["bitor_assign",""],["bitxor_assign",""],["chmax",""],["chmin",""],["comprehension",""],["crecurse","Macro that returns a recursive function that (semi-)automatically captures."],["define_basic_mint32",""],["define_basic_mintbase",""],["div_assign",""],["impl_assoc_value","Implement `AssociatedValue`."],["impl_bitand_identity",""],["impl_bitor_identity",""],["impl_bitxor_identity",""],["iter_print","Print expressions with a separator."],["max",""],["memorize","Automatic memorization for recursive functions."],["min",""],["minmax",""],["monoid_fold",""],["mul_assign",""],["prepare","Prepare useful macros."],["rand","Declare random values using [`RandomSpec`]."],["rand_value","Return a random value using [`RandomSpec`]."],["rem_assign",""],["scan","`scan!(scanner, $($pat $(: ELEMENT)?),*)`"],["scan_value","`scan_value!(scanner, ELEMENT)`ELEMENT :="],["shl_assign",""],["shr_assign",""],["sub_assign",""]],"mod":[["algebra","algebra"],["algorithm","algorithm"],["combinatorial_optimization",""],["data_structure","data structures"],["geometry",""],["graph","graph structures and algorithms"],["math","mathematical datas"],["num",""],["prelude",""],["string","string algorithems"],["tools",""],["tree","tree algorithems"]]});