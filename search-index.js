var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of `competitive` crate by Aizu Online Judge","i":[[0,"dpl","aizu_online_judge","Discrete Optimization Problems",null,null],[0,"dpl_1_a","aizu_online_judge::dpl","Coin Changing Problem",null,null],[5,"dpl_1_a","aizu_online_judge::dpl::dpl_1_a","✅  AC  3ms",null,[[]]],[0,"dpl_1_b","aizu_online_judge::dpl","0-1 Knapsack Problem",null,null],[5,"dpl_1_b","aizu_online_judge::dpl::dpl_1_b","✅  AC  1ms",null,[[]]],[0,"dpl_1_c","aizu_online_judge::dpl","Knapsack Problem",null,null],[5,"dpl_1_c","aizu_online_judge::dpl::dpl_1_c","✅  AC  3ms",null,[[]]],[0,"dpl_1_d","aizu_online_judge::dpl","Longest Increasing Subsequence",null,null],[5,"dpl_1_d","aizu_online_judge::dpl::dpl_1_d","✅  AC  8ms",null,[[]]],[0,"dpl_1_e","aizu_online_judge::dpl","Edit Distance (Levenshtein Distance)",null,null],[5,"dpl_1_e","aizu_online_judge::dpl::dpl_1_e","✅  AC  9ms",null,[[]]],[0,"dpl_1_f","aizu_online_judge::dpl","0-1 Knapsack Problem II",null,null],[5,"dpl_1_f","aizu_online_judge::dpl::dpl_1_f","✅  AC  1ms",null,[[]]],[0,"dpl_1_g","aizu_online_judge::dpl","Knapsack Problem with Limitations",null,null],[5,"dpl_1_g","aizu_online_judge::dpl::dpl_1_g","✅  AC  14ms",null,[[]]],[0,"dpl_1_h","aizu_online_judge::dpl","Huge Knapsack Problem",null,null],[5,"dpl_1_h","aizu_online_judge::dpl::dpl_1_h","✅  AC  57ms",null,[[]]],[0,"dpl_1_i","aizu_online_judge::dpl","Knapsack Problem with Limitations II",null,null],[5,"dpl_1_i","aizu_online_judge::dpl::dpl_1_i","✅  AC  0ms",null,[[]]],[0,"dpl_3_a","aizu_online_judge::dpl","Largest Square",null,null],[5,"dpl_3_a","aizu_online_judge::dpl::dpl_3_a","✅  AC  30ms",null,[[]]],[0,"dpl_3_b","aizu_online_judge::dpl","Largest Rectangle",null,null],[5,"dpl_3_b","aizu_online_judge::dpl::dpl_3_b","✅  AC  19ms",null,[[]]],[0,"dpl_3_c","aizu_online_judge::dpl","Largest Rectangle in a Histogram",null,null],[5,"dpl_3_c","aizu_online_judge::dpl::dpl_3_c","✅  AC  3ms",null,[[]]],[0,"dsl","aizu_online_judge","Data Sets and Queries",null,null],[0,"dsl_1_a","aizu_online_judge::dsl","Disjoint Set: Union Find Tree",null,null],[5,"dsl_1_a","aizu_online_judge::dsl::dsl_1_a","✅  AC  7ms",null,[[]]],[0,"dsl_1_b","aizu_online_judge::dsl","Weighted Union Find Trees",null,null],[5,"dsl_1_b","aizu_online_judge::dsl::dsl_1_b","✅  AC  26ms",null,[[]]],[0,"dsl_2_a","aizu_online_judge::dsl","Range Minimum Query (RMQ)",null,null],[5,"dsl_2_a","aizu_online_judge::dsl::dsl_2_a","✅  AC  22ms",null,[[]]],[0,"dsl_2_b","aizu_online_judge::dsl","Range Sum Query",null,null],[5,"dsl_2_b","aizu_online_judge::dsl::dsl_2_b","✅  AC  18ms",null,[[]]],[0,"dsl_2_c","aizu_online_judge::dsl","Range Search (kD Tree)",null,null],[5,"dsl_2_c","aizu_online_judge::dsl::dsl_2_c","✅  AC  552ms",null,[[]]],[0,"dsl_2_d","aizu_online_judge::dsl","Range Update Query (RUQ)",null,null],[5,"dsl_2_d","aizu_online_judge::dsl::dsl_2_d","✅  AC  47ms",null,[[]]],[0,"dsl_2_e","aizu_online_judge::dsl","Range Add Query (RAQ)",null,null],[5,"dsl_2_e","aizu_online_judge::dsl::dsl_2_e","✅  AC  43ms",null,[[]]],[0,"dsl_2_f","aizu_online_judge::dsl","RMQ and RUQ",null,null],[5,"dsl_2_f","aizu_online_judge::dsl::dsl_2_f","✅  AC  48ms",null,[[]]],[0,"dsl_2_g","aizu_online_judge::dsl","RSQ and RAQ",null,null],[5,"dsl_2_g","aizu_online_judge::dsl::dsl_2_g","✅  AC  50ms",null,[[]]],[0,"dsl_2_h","aizu_online_judge::dsl","RMQ and RAQ",null,null],[5,"dsl_2_h","aizu_online_judge::dsl::dsl_2_h","✅  AC  44ms",null,[[]]],[0,"dsl_2_i","aizu_online_judge::dsl","RSQ and RUQ",null,null],[5,"dsl_2_i","aizu_online_judge::dsl::dsl_2_i","✅  AC  81ms",null,[[]]],[0,"dsl_3_a","aizu_online_judge::dsl","The Smallest Window I",null,null],[5,"dsl_3_a","aizu_online_judge::dsl::dsl_3_a","✅  AC  4ms",null,[[]]],[0,"dsl_3_b","aizu_online_judge::dsl","The Smallest Window II",null,null],[5,"dsl_3_b","aizu_online_judge::dsl::dsl_3_b","✅  AC  5ms",null,[[]]],[0,"dsl_3_c","aizu_online_judge::dsl","The Number of Windows",null,null],[5,"dsl_3_c","aizu_online_judge::dsl::dsl_3_c","✅  AC  222ms",null,[[]]],[0,"dsl_3_d","aizu_online_judge::dsl","Sliding Minimum Element",null,null],[5,"dsl_3_d","aizu_online_judge::dsl::dsl_3_d","✅  AC  165ms",null,[[]]],[0,"dsl_4_a","aizu_online_judge::dsl","Union of Rectangles",null,null],[5,"dsl_4_a","aizu_online_judge::dsl::dsl_4_a","✅  AC  78ms",null,[[]]],[0,"dsl_5_a","aizu_online_judge::dsl","The Maximum Number of Customers",null,null],[5,"dsl_5_a","aizu_online_judge::dsl::dsl_5_a","✅  AC  4ms",null,[[]]],[0,"dsl_5_b","aizu_online_judge::dsl","The Maximum Number of Overlaps",null,null],[5,"dsl_5_b","aizu_online_judge::dsl::dsl_5_b","✅  AC  10ms",null,[[]]],[0,"grl","aizu_online_judge","Graph Algorithms",null,null],[0,"grl_1_a","aizu_online_judge::grl","Single Source Shortest Path",null,null],[5,"grl_1_a","aizu_online_judge::grl::grl_1_a","✅  AC  84ms",null,[[]]],[0,"grl_1_b","aizu_online_judge::grl","Single Source Shortest Path (Negative Edges)",null,null],[5,"grl_1_b","aizu_online_judge::grl::grl_1_b","✅  AC  7ms",null,[[]]],[0,"grl_1_c","aizu_online_judge::grl","All Pairs Shortest Path",null,null],[5,"grl_1_c","aizu_online_judge::grl::grl_1_c","✅  AC  5ms",null,[[]]],[0,"grl_2_a","aizu_online_judge::grl","Minimum Spanning Tree",null,null],[5,"grl_2_a","aizu_online_judge::grl::grl_2_a","✅  AC  31ms",null,[[]]],[0,"grl_2_b","aizu_online_judge::grl","Minimum-Cost Arborescence",null,null],[5,"grl_2_b","aizu_online_judge::grl::grl_2_b","✅  AC  0ms",null,[[]]],[0,"grl_3_a","aizu_online_judge::grl","Articulation Points",null,null],[5,"grl_3_a","aizu_online_judge::grl::grl_3_a","✅  AC  3ms",null,[[]]],[0,"grl_3_b","aizu_online_judge::grl","Bridges",null,null],[5,"grl_3_b","aizu_online_judge::grl::grl_3_b","✅  AC  4ms",null,[[]]],[0,"grl_3_c","aizu_online_judge::grl","Strongly Connected Components",null,null],[5,"grl_3_c","aizu_online_judge::grl::grl_3_c","✅  AC  8ms",null,[[]]],[0,"grl_4_a","aizu_online_judge::grl","Cycle Detection for a Directed Graph",null,null],[5,"grl_4_a","aizu_online_judge::grl::grl_4_a","✅  AC  0ms",null,[[]]],[0,"grl_4_b","aizu_online_judge::grl","Topological Sort",null,null],[5,"grl_4_b","aizu_online_judge::grl::grl_4_b","✅  AC  3ms",null,[[]]],[5,"judge_grl_4_b","","",null,[[]]],[0,"grl_5_a","aizu_online_judge::grl","Diameter of a Tree",null,null],[5,"grl_5_a","aizu_online_judge::grl::grl_5_a","✅  AC  10ms",null,[[]]],[0,"grl_5_b","aizu_online_judge::grl","Height of a Tree",null,null],[5,"grl_5_b","aizu_online_judge::grl::grl_5_b","✅  AC  4ms",null,[[]]],[0,"grl_5_c","aizu_online_judge::grl","Lowest Common Ancestor",null,null],[5,"grl_5_c","aizu_online_judge::grl::grl_5_c","✅  AC  77ms",null,[[]]],[0,"grl_5_d","aizu_online_judge::grl","Range Query on a Tree",null,null],[5,"grl_5_d","aizu_online_judge::grl::grl_5_d","✅  AC  59ms",null,[[]]],[0,"grl_5_e","aizu_online_judge::grl","Range Query on a Tree II",null,null],[5,"grl_5_e","aizu_online_judge::grl::grl_5_e","✅  AC  185ms",null,[[]]],[0,"grl_6_a","aizu_online_judge::grl","Maximum Flow",null,null],[5,"grl_6_a","aizu_online_judge::grl::grl_6_a","✅  AC  0ms",null,[[]]],[0,"grl_6_b","aizu_online_judge::grl","Minimum Cost Flow",null,null],[5,"grl_6_b","aizu_online_judge::grl::grl_6_b","✅  AC  1ms",null,[[]]],[0,"grl_7_a","aizu_online_judge::grl","Bipartite Matching",null,null],[5,"grl_7_a","aizu_online_judge::grl::grl_7_a","✅  AC  0ms",null,[[]]],[0,"itp1","aizu_online_judge","Introduction to Programming I",null,null],[0,"itp1_1_a","aizu_online_judge::itp1","Hello World",null,null],[5,"itp1_1_a","aizu_online_judge::itp1::itp1_1_a","✅  AC  0ms",null,[[]]]],"p":[],"a":{"verify":[2,4,6,8,10,12,14,16,18,20,22,24,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,64,66,68,70,72,74,76,78,80,82,85,87,89,91,93,95,97,99,102]}},\
"codesnip":{"doc":"","i":[[23,"entry","codesnip","",null,null],[23,"skip","","",null,null],[3,"Config","","",null,null],[12,"target","","Target file paths.",0,null],[12,"use_cache","","Use cached data.",0,null],[12,"cfg","","Configure the environment: e.g. --cfg=nightly",0,null],[12,"filter_item","","Filter items by attributes path: e.g. --filter-item=test",0,null],[12,"filter_attr","","Filter attributes by attributes path: e.g.…",0,null],[12,"cmd","","",0,null],[4,"Opt","","",null,null],[13,"Codesnip","","Extract code snippets.",1,null],[4,"Command","","",null,null],[13,"Cache","","Save analyzed data into file.",2,null],[12,"output","codesnip::Command","Output file.",3,null],[13,"List","codesnip","List names.",2,null],[13,"Snippet","","Output snippet for VSCode.",2,null],[12,"output","codesnip::Command","Output file, default stdout.",4,null],[12,"ignore_include","","ignore includes",4,null],[13,"Bundle","codesnip","Bundle",2,null],[12,"name","codesnip::Command","snippet name.",5,null],[12,"excludes","","excludes",5,null],[13,"Verify","codesnip","Verify",2,null],[0,"mapping","","",null,null],[3,"VSCode","codesnip::mapping","",null,null],[8,"SnippetMapExt","","",null,null],[10,"collect_entries","","",6,[[["filter",3]]]],[10,"format_all","","",6,[[]]],[10,"to_vscode","","",6,[[],[["vscode",3],["btreemap",3],["string",3]]]],[0,"parse","codesnip","",null,null],[5,"parse_files","codesnip::parse","",null,[[],[["vec",3],["result",4],["error",4]]]],[0,"verify","codesnip","",null,null],[5,"execute","codesnip::verify","",null,[[["snippetmap",3]],["result",6]]],[5,"check","","",null,[[],[["result",6],["option",4]]]],[11,"from_args","codesnip","",1,[[]]],[11,"execute","","",1,[[],["result",6]]],[11,"execute","","",0,[[],["result",6]]],[11,"execute","","",2,[[["snippetmap",3]],["result",6]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"vzip","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"vzip","","",2,[[]]],[11,"from","codesnip::mapping","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"vzip","","",7,[[]]],[11,"from","","",7,[[]]],[11,"fmt","codesnip","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"serialize","codesnip::mapping","",7,[[],["result",4]]],[11,"clap","codesnip","",1,[[],["app",3]]],[11,"from_clap","","",1,[[["argmatches",3]]]],[11,"clap","","",0,[[],["app",3]]],[11,"from_clap","","",0,[[["argmatches",3]]]],[11,"clap","","",2,[[],["app",3]]],[11,"from_clap","","",2,[[["argmatches",3]]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"from_subcommand","","",1,[[],["option",4]]],[11,"is_subcommand","","",1,[[]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"is_subcommand","","",0,[[]]],[11,"augment_clap","","",2,[[["app",3]],["app",3]]],[11,"from_subcommand","","",2,[[],["option",4]]],[11,"is_subcommand","","",2,[[]]]],"p":[[3,"Config"],[4,"Opt"],[4,"Command"],[13,"Cache"],[13,"Snippet"],[13,"Bundle"],[8,"SnippetMapExt"],[3,"VSCode"]]},\
"codesnip_core":{"doc":"","i":[[3,"Filter","codesnip_core","",null,null],[3,"LinkedSnippet","","",null,null],[12,"contents","","",0,null],[12,"includes","","",0,null],[3,"SnippetMap","","",null,null],[12,"map","","",1,null],[4,"Error","","",null,null],[13,"IOError","","",2,null],[13,"ParseFile","","",2,null],[13,"ModuleNotFound","","",2,null],[13,"FileNotFound","","",2,null],[5,"format_with_rustfmt","","",null,[[],[["string",3],["option",4]]]],[5,"rustfmt_exits","","",null,[[]]],[5,"parse_file_recursive","","",null,[[["pathbuf",3]],[["file",3],["error",4],["result",4]]]],[0,"entry","","",null,null],[3,"Entry","codesnip_core::entry","",null,null],[12,"name","","",3,null],[12,"include","","",3,null],[12,"inline","","",3,null],[3,"EntryArgs","","",null,null],[12,"args","","",4,null],[3,"EntryArgName","","",null,null],[12,"name_token","","",5,null],[12,"name","","",5,null],[3,"EntryArgInclude","","",null,null],[12,"include_token","","",6,null],[12,"paren_token","","",6,null],[12,"includes","","",6,null],[3,"EntryArgInline","","",null,null],[12,"token","","",7,null],[3,"EntryArgNoInline","","",null,null],[12,"token","","",8,null],[4,"EntryArg","","",null,null],[13,"Name","","",9,null],[13,"Include","","",9,null],[13,"Inline","","",9,null],[13,"NoInline","","",9,null],[11,"try_to_entry","","",4,[[["item",4]],[["entry",3],["result",6]]]],[11,"new","codesnip_core","",1,[[]]],[11,"extend_with_filter","","",1,[[["filter",3],["item",4]]]],[11,"bundle","","",1,[[["linkedsnippet",3],["btreeset",3]],["string",3]]],[11,"push_contents","","",0,[[]]],[11,"push_item_with_filter","","",0,[[["filter",3],["item",4]]]],[11,"push_include","","",0,[[["string",3]]]],[11,"push_includes","","",0,[[]]],[11,"append","","",0,[[]]],[11,"format","","",0,[[]]],[11,"new","","",10,[[]]],[8,"AttributeExt","","",null,null],[10,"parse_args_empty_with","","",11,[[["parser",8]],["result",6]]],[8,"ItemExt","","",null,null],[10,"get_attributes","","",12,[[],["option",4]]],[10,"get_attributes_mut","","",12,[[],[["vec",3],["option",4]]]],[10,"get_default_name","","",12,[[],[["string",3],["option",4]]]],[10,"is_mod","","",12,[[]]],[8,"PathExt","","",null,null],[10,"is_codesnip_entry","","",13,[[]]],[10,"is_codesnip_skip","","",13,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"into_iter","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","codesnip_core::entry","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"span","","",4,[[],["span",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"span","","",5,[[],["span",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"span","","",6,[[],["span",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"span","","",7,[[],["span",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"span","","",8,[[],["span",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"span","","",9,[[],["span",3]]],[11,"from","codesnip_core","",2,[[["error",3]]]],[11,"extend","","",1,[[["intoiterator",8]]]],[11,"into_iter","","",1,[[]]],[11,"clone","codesnip_core::entry","",3,[[],["entry",3]]],[11,"clone","","",4,[[],["entryargs",3]]],[11,"clone","","",9,[[],["entryarg",4]]],[11,"clone","","",5,[[],["entryargname",3]]],[11,"clone","","",6,[[],["entryarginclude",3]]],[11,"clone","","",7,[[],["entryarginline",3]]],[11,"clone","","",8,[[],["entryargnoinline",3]]],[11,"clone","codesnip_core","",1,[[],["snippetmap",3]]],[11,"clone","","",0,[[],["linkedsnippet",3]]],[11,"clone","","",10,[[],["filter",3]]],[11,"default","codesnip_core::entry","",3,[[],["entry",3]]],[11,"default","codesnip_core","",1,[[],["snippetmap",3]]],[11,"default","","",0,[[],["linkedsnippet",3]]],[11,"eq","codesnip_core::entry","",4,[[["entryargs",3]]]],[11,"ne","","",4,[[["entryargs",3]]]],[11,"eq","","",9,[[["entryarg",4]]]],[11,"ne","","",9,[[["entryarg",4]]]],[11,"eq","","",5,[[["entryargname",3]]]],[11,"ne","","",5,[[["entryargname",3]]]],[11,"eq","","",6,[[["entryarginclude",3]]]],[11,"ne","","",6,[[["entryarginclude",3]]]],[11,"eq","","",7,[[["entryarginline",3]]]],[11,"ne","","",7,[[["entryarginline",3]]]],[11,"eq","","",8,[[["entryargnoinline",3]]]],[11,"ne","","",8,[[["entryargnoinline",3]]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","codesnip_core","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"hash","codesnip_core::entry","",4,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"source","codesnip_core","",2,[[],[["option",4],["error",8]]]],[11,"to_tokens","codesnip_core::entry","",4,[[["tokenstream",3]]]],[11,"to_tokens","","",9,[[["tokenstream",3]]]],[11,"to_tokens","","",5,[[["tokenstream",3]]]],[11,"to_tokens","","",6,[[["tokenstream",3]]]],[11,"to_tokens","","",7,[[["tokenstream",3]]]],[11,"to_tokens","","",8,[[["tokenstream",3]]]],[11,"parse","","",4,[[["parsestream",6]],["result",6]]],[11,"parse","","",9,[[["parsestream",6]],["result",6]]],[11,"parse","","",5,[[["parsestream",6]],["result",6]]],[11,"serialize","codesnip_core","",1,[[],["result",4]]],[11,"serialize","","",0,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",0,[[],["result",4]]]],"p":[[3,"LinkedSnippet"],[3,"SnippetMap"],[4,"Error"],[3,"Entry"],[3,"EntryArgs"],[3,"EntryArgName"],[3,"EntryArgInclude"],[3,"EntryArgInline"],[3,"EntryArgNoInline"],[4,"EntryArg"],[3,"Filter"],[8,"AttributeExt"],[8,"ItemExt"],[8,"PathExt"]]},\
"competitive":{"doc":"github","i":[[0,"algebra","competitive","algebra",null,null],[3,"MaxOperation","competitive::algebra","binary operation to select larger element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"FirstOperation","","retain the first element",null,null],[3,"LastOperation","","retain the last element",null,null],[3,"AdditiveOperation","","$+$",null,null],[3,"MultiplicativeOperation","","$\\\\times$",null,null],[3,"LinearOperation","","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"BitAndOperation","","&",null,null],[3,"BitOrOperation","","|",null,null],[3,"BitXorOperation","","^",null,null],[3,"MonoidalOperation","","",null,null],[3,"GroupOperation","","",null,null],[3,"AssocoativeOperator","","",null,null],[3,"AbsorbedAssocoativeOperator","","",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"CountingOperation","","",null,null],[3,"ReverseOperation","","",null,null],[11,"new","","",0,[[]]],[11,"new","","",1,[[]]],[11,"new","","",2,[[]]],[11,"new","","",3,[[]]],[11,"new","","",4,[[]]],[11,"new","","",5,[[]]],[11,"new","","",6,[[]]],[11,"new","","",7,[[]]],[11,"new","","",8,[[]]],[11,"new","","",9,[[]]],[11,"new","","",10,[[]]],[11,"new","","",11,[[]]],[11,"new","","",12,[[]]],[11,"new","","",13,[[]]],[11,"new","","",14,[[]]],[11,"new","","",15,[[]]],[8,"Magma","","binary operaion: $T \\\\circ T \\\\to T$",null,null],[16,"T","","type of operands: $T$",16,null],[10,"operate","","binary operaion: $\\\\circ$",16,[[]]],[11,"reverse_operate","","",16,[[]]],[8,"Associative","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c…",null,null],[8,"SemiGroup","","associative binary operation",null,null],[8,"Unital","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e =…",null,null],[10,"unit","","identity element: $e$",17,[[]]],[8,"Monoid","","associative binary operation and an identity element",null,null],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",18,[[]]],[8,"Invertible","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b…",null,null],[10,"inverse","","$a$ where $a \\\\circ x = e$",19,[[]]],[11,"rinv_operate","","",19,[[]]],[8,"Group","","associative binary operation and an identity element and…",null,null],[8,"Commutative","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$",null,null],[8,"AbelianMonoid","","commutative monoid",null,null],[8,"AbelianGroup","","commutative group",null,null],[8,"Idempotent","","$\\\\forall a \\\\in T, a \\\\circ a = a$",null,null],[8,"IdempotentMonoid","","idempotent monoid",null,null],[8,"MinimumBounded","","",null,null],[10,"minimum","","",20,[[]]],[8,"MaximumBounded","","",null,null],[10,"maximum","","",21,[[]]],[8,"BitAndIdentity","","",null,null],[10,"all_one","","",22,[[]]],[8,"BitOrIdentity","","",null,null],[10,"all_zero","","",23,[[]]],[8,"BitXorIdentity","","",null,null],[10,"xor_zero","","",24,[[]]],[0,"algorithm","competitive","algorithm",null,null],[3,"CHTLine","competitive::algorithm","",null,null],[3,"ConvexHullTrick","","",null,null],[3,"SlideMinimum","","",null,null],[3,"SubsetTransform","","",null,null],[3,"SupersetTransform","","",null,null],[3,"DivisorTransform","","",null,null],[3,"MultipleTransform","","",null,null],[5,"product","","choose `r` elements from `n` independently",null,[[]]],[5,"permutations","","choose distinct `r` elements from `n` in any order",null,[[]]],[5,"combinations","","choose distinct `r` elements from `n` in sorted order",null,[[]]],[5,"combinations_with_replacement","","choose `r` elements from `n` in sorted order",null,[[]]],[5,"run_length_encoding","","return: [(start, length)]",null,[[],["vec",3]]],[5,"rho_path","","$P_0 =$ `init`, $P_{i+1} = f(P_i)$",null,[[]]],[5,"binary_search","","binary search for monotone segment",null,[[]]],[5,"count_monotone","","Count the number of elements that meet the condition in…",null,[[]]],[5,"ternary_search","","like `(left..right).min_by_key(f)`",null,[[]]],[5,"slide_minimum","","",null,[[],["vec",3]]],[11,"new","","",25,[[]]],[11,"value","","",25,[[]]],[11,"check","","",25,[[]]],[11,"new","","",26,[[]]],[11,"add_line","","k-th add_line(a_k, b_k): a_k >= a_{k+1}",26,[[]]],[11,"query","","",26,[[]]],[11,"new","","",27,[[]]],[11,"next_minimum","","",27,[[]]],[11,"new","","",28,[[]]],[11,"zeta_transform","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$",28,[[]]],[11,"mobius_transform","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$",28,[[]]],[11,"convolve","","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$",28,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",29,[[]]],[11,"zeta_transform","","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$",29,[[]]],[11,"mobius_transform","","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$",29,[[]]],[11,"convolve","","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$",29,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",30,[[["vec",3]]]],[11,"zeta_transform","","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$",30,[[]]],[11,"mobius_transform","","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$",30,[[]]],[11,"convolve","","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$",30,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",31,[[["vec",3]]]],[11,"zeta_transform","","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$",31,[[]]],[11,"mobius_transform","","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$",31,[[]]],[11,"convolve","","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$",31,[[["vec",3],["monoid",8]],["vec",3]]],[8,"MoSolver","","",null,null],[16,"Answer","","",32,null],[10,"insert","","",32,[[]]],[10,"remove","","",32,[[]]],[10,"answer","","",32,[[]]],[11,"mo_solve","","",32,[[]]],[8,"Bisect","","binary search helper",null,null],[10,"halve","","return between two elements",33,[[]]],[10,"section_end","","the end condition of binary search",33,[[]]],[8,"SliceBisectExt","","binary search for sorted slice",null,null],[10,"lower_bound","","Returns the first index with elements greater than or…",34,[[]]],[10,"upper_bound","","Returns the first index with elements greater than x. if…",34,[[]]],[8,"Trisect","","ternary search helper",null,null],[10,"next_section","","Divide into 3 sections",35,[[]]],[10,"section_end","","the end condition of ternary search",35,[[]]],[0,"combinatorial_optimization","competitive","",null,null],[3,"KnapsackPloblemSmallWeight","competitive::combinatorial_optimization","",null,null],[12,"dp","","",36,null],[3,"KnapsackPloblemSmallValue","","",null,null],[12,"dp","","",37,null],[3,"ZeroOneKnapsackProblemSmallItems","","",null,null],[3,"ZeroOneKnapsackPloblemBranchAndBound","","",null,null],[3,"LongestIncreasingSubsequence","","",null,null],[12,"dp","","",38,null],[5,"largest_square","","",null,[[]]],[5,"largest_rectangle","","",null,[[]]],[5,"largest_rectangle_in_grid","","",null,[[]]],[5,"levenshtein_distance","","",null,[[]]],[11,"new","","",39,[[]]],[11,"solve","","",39,[[]]],[11,"new","","",36,[[]]],[11,"max_weight","","",36,[[]]],[11,"insert","","",36,[[]]],[11,"extend","","",36,[[["intoiterator",8]]]],[11,"insert01","","",36,[[]]],[11,"extend01","","",36,[[["intoiterator",8]]]],[11,"insert_limitation","","",36,[[]]],[11,"extend_limitation","","",36,[[["intoiterator",8]]]],[11,"insert_limitation2","","",36,[[]]],[11,"extend_limitation2","","",36,[[["intoiterator",8]]]],[11,"solve","","",36,[[]]],[11,"new","","",37,[[]]],[11,"insert","","",37,[[]]],[11,"extend","","",37,[[["intoiterator",8]]]],[11,"insert01","","",37,[[]]],[11,"extend01","","",37,[[["intoiterator",8]]]],[11,"insert_limitation","","",37,[[]]],[11,"extend_limitation","","",37,[[["intoiterator",8]]]],[11,"solve","","",37,[[]]],[11,"new","","",40,[[]]],[11,"insert","","",40,[[]]],[11,"extend","","",40,[[["intoiterator",8]]]],[11,"solve","","",40,[[]]],[11,"new","","",38,[[]]],[11,"longest_length","","",38,[[]]],[11,"insert","","",38,[[]]],[11,"extend","","",38,[[["intoiterator",8]]]],[0,"data_structure","competitive","data structures",null,null],[3,"IntersectionAutomaton","competitive::data_structure","",null,null],[3,"UnionAutomaton","","",null,null],[3,"ProductAutomaton","","",null,null],[3,"LessThanAutomaton","","",null,null],[3,"GreaterThanAutomaton","","",null,null],[3,"ContainAutomaton","","",null,null],[3,"ContainCounterAutomaton","","",null,null],[3,"AlwaysAcceptingAutomaton","","",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"BinaryIndexedTree2D","","",null,null],[3,"BitVector","","",null,null],[3,"BitSet","","",null,null],[3,"DisjointSparseTable","","",null,null],[3,"Static2DTree","","",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"SegmentTree","","",null,null],[3,"DequeAggregation","","",null,null],[3,"QueueAggregation","","",null,null],[3,"Trie","","",null,null],[3,"UnionFind","","",null,null],[3,"WeightedUnionFind","","",null,null],[3,"MergingUnionFind","","",null,null],[3,"WaveletMatrix","","",null,null],[5,"automaton_dp","","",null,[[]]],[11,"new","","",41,[[]]],[11,"new","","",42,[[]]],[11,"new","","",43,[[]]],[11,"new","","",44,[[]]],[11,"accumulate0","","fold [0, k)",44,[[]]],[11,"accumulate","","fold [0, k]",44,[[]]],[11,"update","","",44,[[]]],[11,"fold","","",44,[[]]],[11,"get","","",44,[[]]],[11,"set","","",44,[[]]],[11,"lower_bound","","",44,[[]]],[11,"new","","",45,[[]]],[11,"accumulate0","","fold [0, i) x [0, j)",45,[[]]],[11,"accumulate","","fold [0, i] x [0, j]",45,[[]]],[11,"update","","",45,[[]]],[11,"fold","","0-indexed [i1, i2) x [j1, j2)",45,[[]]],[11,"get","","",45,[[]]],[11,"set","","",45,[[]]],[11,"new","","",46,[[]]],[11,"ones","","",46,[[]]],[11,"get","","",46,[[]]],[11,"set","","",46,[[]]],[11,"count_ones","","",46,[[]]],[11,"count_zeros","","",46,[[]]],[11,"shl_bitor_assign","","",46,[[]]],[11,"shr_bitor_assign","","",46,[[]]],[11,"new","","",47,[[["vec",3]]]],[11,"height","","",47,[[]]],[11,"fold_close","","",47,[[]]],[11,"fold","","",47,[[]]],[11,"new","","",48,[[]]],[11,"range","","",48,[[["range",3],["range",3]],["vec",3]]],[11,"new","","",49,[[]]],[11,"from_vec","","",49,[[["vec",3]]]],[11,"update","","",49,[[]]],[11,"fold","","",49,[[]]],[11,"set","","",49,[[]]],[11,"get","","",49,[[]]],[11,"fold_all","","",49,[[]]],[11,"as_slice","","",49,[[]]],[11,"as_slice_lazy","","",49,[[]]],[11,"new","","",50,[[]]],[11,"from_vec","","",50,[[["vec",3]]]],[11,"set","","",50,[[]]],[11,"update","","",50,[[]]],[11,"get","","",50,[[]]],[11,"fold","","",50,[[]]],[11,"fold_all","","",50,[[]]],[11,"lower_bound_all","","left most index [0, r) that satisfies monotonic condition",50,[[["fn",8]]]],[11,"lower_bound","","left most index [l, r) that satisfies monotonic condition",50,[[["fn",8]]]],[11,"as_slice","","",50,[[]]],[11,"new","","",51,[[]]],[11,"len","","",51,[[]]],[11,"is_empty","","",51,[[]]],[11,"fold_all","","",51,[[]]],[11,"last","","",51,[[],["option",4]]],[11,"push","","",51,[[]]],[11,"pop","","",51,[[],["option",4]]],[11,"new","","",52,[[]]],[11,"len","","",52,[[]]],[11,"is_empty","","",52,[[]]],[11,"fold_all","","",52,[[]]],[11,"front","","",52,[[],["option",4]]],[11,"back","","",52,[[],["option",4]]],[11,"push_front","","",52,[[]]],[11,"push_back","","",52,[[]]],[11,"pop_front","","",52,[[],["option",4]]],[11,"pop_back","","",52,[[],["option",4]]],[11,"reverse","","",52,[[]]],[11,"new","","",53,[[]]],[11,"insert_at","","",53,[[],["vec",3]]],[11,"insert","","",53,[[],["vec",3]]],[11,"find_at","","",53,[[],["result",4]]],[11,"find","","",53,[[],["result",4]]],[11,"next_node","","",53,[[],["option",4]]],[11,"count","","",53,[[]]],[11,"next_count","","",53,[[]]],[11,"new","","",54,[[["fn",8]]]],[11,"find","","",54,[[]]],[11,"find_root","","",54,[[],[["rootdata",3],["ref",3]]]],[11,"find_root_mut","","",54,[[],[["rootdata",3],["refmut",3]]]],[11,"unite","","",54,[[]]],[11,"size","","",54,[[]]],[11,"same","","",54,[[]]],[11,"members","","",54,[[],["vec",3]]],[11,"roots","","",54,[[],["vec",3]]],[11,"all_group_members","","",54,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",55,[[]]],[11,"find","","",55,[[]]],[11,"unite","","",55,[[]]],[11,"size","","",55,[[]]],[11,"same","","",55,[[]]],[11,"members","","",55,[[],["vec",3]]],[11,"roots","","",55,[[],["vec",3]]],[11,"all_group_members","","",55,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",56,[[]]],[11,"find","","",56,[[]]],[11,"get_weight","","",56,[[]]],[11,"unite","","",56,[[]]],[11,"size","","",56,[[]]],[11,"is_same","","",56,[[]]],[11,"get_difference","","",56,[[],["option",4]]],[11,"members","","",56,[[],["vec",3]]],[11,"roots","","",56,[[],["vec",3]]],[11,"all_group_members","","",56,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",57,[[["vec",3],["clone",8],["rankselectdictionaries",8]]]],[11,"access","","get k-th value",57,[[]]],[11,"rank","","the number of val in range",57,[[["range",3]]]],[11,"select","","index of k-th val",57,[[],["option",4]]],[11,"quantile","","get k-th smallest value in range",57,[[["range",3]]]],[11,"rank_lessthan","","the number of value less than val in range",57,[[["range",3]]]],[11,"rank_range","","the number of valrange in range",57,[[["range",3]]]],[8,"Automaton","","",null,null],[16,"Alphabet","","",58,null],[16,"State","","",58,null],[16,"Effect","","",58,null],[10,"initial","","",58,[[]]],[10,"next","","",58,[[],["option",4]]],[10,"accept","","",58,[[]]],[8,"RankSelectDictionaries","","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1",null,null],[10,"bit_length","","",59,[[]]],[10,"access","","get k-th bit",59,[[]]],[11,"rank1","","the number of 1 in [0, k)",59,[[]]],[11,"rank0","","the number of 0 in [0, k)",59,[[]]],[11,"select1","","index of k-th 1",59,[[],["option",4]]],[11,"select0","","index of k-th 0",59,[[],["option",4]]],[0,"geometry","competitive","",null,null],[3,"Circle","competitive::geometry","",null,null],[3,"Line","","",null,null],[3,"LineSegment","","",null,null],[3,"Real","","",null,null],[12,"0","","",60,null],[4,"CCW","","",null,null],[13,"OnlineFront","","a--b--c",61,null],[13,"Clockwise","","a--b-vc",61,null],[13,"OnSegment","","a--c--b",61,null],[13,"CounterClockwise","","a--b-^c",61,null],[13,"OnlineBack","","c--a--b",61,null],[5,"closest_pair","","",null,[[["vec",3],["point",6]]]],[5,"convex_diameter","","",null,[[["vec",3],["point",6]]]],[5,"convex_hull","","",null,[[["vec",3],["point",6]],[["vec",3],["point",6]]]],[11,"new","","",62,[[["point",6]]]],[11,"cross_circle","","",62,[[],["option",4]]],[11,"contains_point","","",62,[[["point",6]]]],[11,"new","","",63,[[["point",6]]]],[11,"dir","","",63,[[],["point",6]]],[11,"ccw","","",63,[[["point",6]],["ccw",4]]],[11,"projection","","",63,[[["point",6]],["point",6]]],[11,"reflection","","",63,[[["point",6]],["point",6]]],[11,"distance_point","","",63,[[["point",6]]]],[11,"is_parallel","","",63,[[]]],[11,"is_orthogonal","","",63,[[]]],[11,"new","","",64,[[["point",6]]]],[11,"dir","","",64,[[],["point",6]]],[11,"ccw","","",64,[[["point",6]],["ccw",4]]],[11,"projection","","",64,[[["point",6]],["point",6]]],[11,"reflection","","",64,[[["point",6]],["point",6]]],[11,"is_parallel","","",64,[[]]],[11,"is_orthogonal","","",64,[[]]],[11,"intersect","","",64,[[]]],[11,"intersect_point","","",64,[[["point",6]]]],[11,"cross_point","","",64,[[],[["point",6],["option",4]]]],[11,"distance_point","","",64,[[["point",6]]]],[11,"distance","","",64,[[]]],[6,"Point","","",null,null],[17,"EPS","","",null,null],[11,"ccw","","",61,[[["point",6]]]],[0,"graph","competitive","graph structures and algorithms",null,null],[3,"AdjacencyListGraph","competitive::graph","",null,null],[12,"vsize","","",65,null],[12,"esize","","",65,null],[12,"graph","","",65,null],[3,"AdjacencyListGraphScanner","","",null,null],[3,"EdgeListGraph","","Graph represented by a list of edges.",null,null],[3,"EdgeListGraphScanner","","",null,null],[3,"GridGraph","","",null,null],[3,"LowLink","","",null,null],[12,"low","","",66,null],[12,"ord","","",66,null],[12,"articulation","","",66,null],[12,"bridge","","",66,null],[3,"DinicBuilder","","",null,null],[3,"Dinic","","",null,null],[3,"PrimalDualBuilder","","",null,null],[3,"PrimalDual","","",null,null],[3,"Adjacency","","",null,null],[12,"id","","",67,null],[12,"to","","",67,null],[3,"SparseGraph","","Static Sparse Graph represented as Compressed Sparse Row.",null,null],[12,"start","","",68,null],[12,"elist","","",68,null],[12,"edges","","",68,null],[3,"TreeGraphScanner","","",null,null],[3,"StronglyConnectedComponent","","",null,null],[3,"TwoSatisfiability","","",null,null],[11,"new","","",65,[[],["adjacencylistgraph",3]]],[11,"add_edge","","",65,[[]]],[11,"add_undirected_edge","","",65,[[]]],[11,"vertices","","",65,[[],["range",3]]],[11,"adjacency","","",65,[[],["vec",3]]],[11,"new","","",69,[[]]],[11,"new","","Construct empty graph.",70,[[]]],[11,"vertices_size","","Return the number of vertices.",70,[[]]],[11,"edges_size","","Return the number of edges.",70,[[]]],[11,"vertices","","Return an iterator over graph vertices.",70,[[],["range",3]]],[11,"edges","","",70,[[],["iter",3]]],[11,"from_edges","","Construct graph from edges.",70,[[["vec",3]]]],[11,"new","","",71,[[]]],[11,"new","","",72,[[]]],[11,"adjacency4","","",72,[[],["adjacency4",3]]],[11,"adjacency8","","",72,[[],["adjacency8",3]]],[11,"new","","",66,[[["undirectedsparsegraph",6]]]],[11,"new","","",73,[[]]],[11,"add_edge","","",73,[[]]],[11,"gen_graph","","",73,[[],["bidirectionalsparsegraph",6]]],[11,"build","","",73,[[["bidirectionalsparsegraph",6]],["dinic",3]]],[11,"maximum_flow_limited","","",74,[[]]],[11,"maximum_flow","","",74,[[]]],[11,"get_flow","","",74,[[]]],[11,"change_edge","","",74,[[]]],[11,"new","","",75,[[]]],[11,"add_edge","","",75,[[]]],[11,"gen_graph","","",75,[[],["bidirectionalsparsegraph",6]]],[11,"build","","",75,[[["bidirectionalsparsegraph",6]],["primaldual",3]]],[11,"minimum_cost_flow_limited","","Return (flow, cost).",76,[[]]],[11,"minimum_cost_flow","","Return (flow, cost).",76,[[]]],[11,"get_flow","","",76,[[]]],[11,"minimum_spanning_tree","","",70,[[],["vec",3]]],[11,"minimum_spanning_arborescence","","tarjan",70,[[],["option",4]]],[11,"dijkstra","","",68,[[],[["vec",3],["option",4]]]],[11,"bellman_ford","","",68,[[]]],[11,"warshall_floyd","","",68,[[],[["vec",3],["vec",3]]]],[11,"new","","",67,[[],["adjacency",3]]],[11,"vertices_size","","Return the number of vertices.",68,[[]]],[11,"edges_size","","Return the number of edges.",68,[[]]],[11,"vertices","","Return an iterator over graph vertices.",68,[[],["range",3]]],[11,"adjacencies","","Return a slice of adjacency vertices.",68,[[],[["iter",3],["adjacency",3]]]],[11,"from_edges","","Construct graph from edges.",68,[[["vec",3]]]],[11,"new","","",77,[[]]],[11,"new","","",78,[[["directedsparsegraph",6]]]],[11,"gen_cgraph","","",78,[[],["directedsparsegraph",6]]],[11,"components","","",78,[[],[["vec",3],["vec",3]]]],[11,"has_loop","","",78,[[]]],[11,"size","","",78,[[]]],[11,"new","","",79,[[]]],[11,"add_inner","","",79,[[]]],[11,"add_or","","",79,[[]]],[11,"add_nand","","",79,[[]]],[11,"set_true","","",79,[[]]],[11,"set_false","","",79,[[]]],[11,"two_satisfiability","","",79,[[],[["vec",3],["option",4]]]],[11,"topological_sort","","",68,[[],["vec",3]]],[0,"adjacency_list_graph","","",null,null],[3,"Adjacency","competitive::graph::adjacency_list_graph","",null,null],[12,"id","","",80,null],[12,"to","","",80,null],[3,"AdjacencyListGraph","","",null,null],[12,"vsize","","",65,null],[12,"esize","","",65,null],[12,"graph","","",65,null],[3,"AdjacencyListGraphScanner","","",null,null],[0,"edge_list_graph","competitive::graph","",null,null],[3,"EdgeListGraph","competitive::graph::edge_list_graph","Graph represented by a list of edges.",null,null],[3,"EdgeListGraphScanner","","",null,null],[0,"grid_graph","competitive::graph","",null,null],[3,"GridGraph","competitive::graph::grid_graph","",null,null],[3,"Adjacency4","","",null,null],[3,"Adjacency8","","",null,null],[0,"sparse_graph","competitive::graph","",null,null],[3,"DirectedEdge","competitive::graph::sparse_graph","",null,null],[3,"UndirectedEdge","","",null,null],[3,"BidirectionalEdge","","",null,null],[3,"Adjacency","","",null,null],[12,"id","","",67,null],[12,"to","","",67,null],[3,"SparseGraph","","Static Sparse Graph represented as Compressed Sparse Row.",null,null],[12,"start","","",68,null],[12,"elist","","",68,null],[12,"edges","","",68,null],[3,"SparseGraphScanner","","",null,null],[3,"TreeGraphScanner","","",null,null],[6,"DirectedSparseGraph","","",null,null],[6,"UndirectedSparseGraph","","",null,null],[6,"BidirectionalSparseGraph","","",null,null],[6,"DirectedGraphScanner","","",null,null],[6,"UndirectedGraphScanner","","",null,null],[6,"BidirectionalGraphScanner","","",null,null],[8,"SparseGraphConstruction","","",null,null],[10,"construct_graph","","",81,[[["vec",3]],["sparsegraph",3]]],[6,"BidirectionalGraphScanner","competitive::graph","",null,null],[6,"BidirectionalSparseGraph","","",null,null],[6,"DirectedGraphScanner","","",null,null],[6,"DirectedSparseGraph","","",null,null],[6,"UndirectedGraphScanner","","",null,null],[6,"UndirectedSparseGraph","","",null,null],[0,"math","competitive","mathematical datas",null,null],[3,"MemorizedFactorial","competitive::math","",null,null],[12,"fact","","",82,null],[12,"inv_fact","","",82,null],[3,"SmallModMemorizedFactorial","","",null,null],[3,"FormalPowerSeries","","",null,null],[12,"data","","",83,null],[3,"DefaultFormalPowerSeriesMultiplier","","",null,null],[3,"Matrix","","",null,null],[12,"shape","","",84,null],[12,"data","","",84,null],[3,"NumberTheoreticTransform","","",null,null],[3,"BabyStepGiantStep","","",null,null],[3,"Polynomial","","",null,null],[12,"data","","",85,null],[3,"PrimeTable","","",null,null],[3,"EulerPhiTable","","",null,null],[5,"fast_fourier_transform","","",null,[[["complex",3],["vec",3]],[["complex",3],["vec",3]]]],[5,"convolve_i64","","",null,[[["vec",3]],["vec",3]]],[5,"gcd","","",null,[[]]],[5,"gcd_binary","","",null,[[]]],[5,"lcm","","",null,[[]]],[5,"extgcd","","",null,[[]]],[5,"extgcd_loop","","",null,[[]]],[5,"extgcd_binary","","",null,[[]]],[5,"modinv","","",null,[[]]],[5,"modinv_loop","","",null,[[]]],[5,"modinv_extgcd_binary","","0 < a < p, gcd(a, p) == 1, p is prime > 2",null,[[]]],[5,"lagrange_interpolation","","",null,[[["mint",3],["modulus",8]],[["mint",3],["modulus",8]]]],[5,"lagrange_interpolation_polynomial","","",null,[[],[["mint",3],["vec",3]]]],[5,"convolve2","","max(a.len(), b.len()) * max(a) * max(b) < 3.64 * 10^18",null,[[["vec",3]],["vec",3]]],[5,"convolve3","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],[["mint",3],["vec",3]]]],[5,"convolve3_128","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],["vec",3]]],[5,"binary_exponentiation","","",null,[[["clone",8],["mulassign",8]],[["clone",8],["mulassign",8]]]],[5,"floor_sum","","Sum of Floor of Linear",null,[[]]],[5,"linear_congruence","","return: (y,z)",null,[[],["option",4]]],[5,"prime_factors","","",null,[[],["vec",3]]],[5,"divisors","","",null,[[],["vec",3]]],[5,"primes","","",null,[[],["vec",3]]],[5,"pow","","",null,[[]]],[5,"miller_rabin","","",null,[[]]],[5,"find_factor","","",null,[[]]],[5,"prime_factors_rho","","",null,[[],["vec",3]]],[5,"euler_phi","","",null,[[]]],[5,"moebius","","g(d) = Sigma mu(d) * f(n/d)",null,[[],["hashmap",3]]],[5,"segmented_sieve_primes","","",null,[[],["vec",3]]],[11,"new","","",82,[[]]],[11,"combination","","",82,[[],["mint",3]]],[11,"permutation","","",82,[[],["mint",3]]],[11,"homogeneous_product","","",82,[[],["mint",3]]],[11,"inv","","",82,[[],["mint",3]]],[11,"new","","",86,[[]]],[11,"factorial","","n! = a * p^e",86,[[]]],[11,"combination","","",86,[[],["mint",3]]],[11,"from_vec","","",83,[[["vec",3]]]],[11,"length","","",83,[[]]],[11,"truncate","","",83,[[]]],[11,"zeros","","",83,[[]]],[11,"resize","","",83,[[]]],[11,"prefix","","",83,[[]]],[11,"diff","","",83,[[]]],[11,"integral","","",83,[[]]],[11,"inv","","",83,[[]]],[11,"exp","","",83,[[]]],[11,"log","","",83,[[]]],[11,"pow","","",83,[[]]],[11,"sqrt","","",83,[[],["option",4]]],[11,"lagrange_interpolation","","Lagrange interpolation with (i, f(i)) (0 <= i <= n)",82,[[["mint",3]],["mint",3]]],[11,"new","","",84,[[]]],[11,"from_vec","","",84,[[["vec",3],["vec",3]]]],[11,"zeros","","",84,[[]]],[11,"eye","","",84,[[]]],[11,"pow","","",84,[[]]],[11,"row_reduction","","",84,[[]]],[11,"rank","","",84,[[]]],[11,"solve_system_of_linear_equations","","",84,[[],[["vec",3],["option",4]]]],[11,"inverse","","",84,[[],[["matrix",3],["option",4]]]],[11,"convert","","",87,[[["intoiterator",8]],[["mint",3],["vec",3]]]],[11,"ntt","","",87,[[["mint",3],["vec",3]],[["mint",3],["vec",3]]]],[11,"convolve","","",87,[[["mint",3],["vec",3]],[["mint",3],["vec",3]]]],[11,"convolve_it","","",87,[[["intoiterator",8]],[["mint",3],["vec",3]]]],[11,"new","","",88,[[]]],[11,"solve","","",88,[[],["option",4]]],[11,"from_vec","","",85,[[["vec",3]]]],[11,"length","","",85,[[]]],[11,"assign","","",85,[[]]],[11,"pow","","",85,[[]]],[11,"new","","",89,[[]]],[11,"is_prime","","",89,[[]]],[11,"prime_factors","","",89,[[],["vec",3]]],[11,"count_divisors","","",89,[[]]],[11,"new","","",90,[[]]],[11,"get","","",90,[[]]],[6,"FPS998244353","","",null,null],[6,"FPS","","",null,null],[6,"NTT998244353","","",null,null],[8,"FormalPowerSeriesCoefficient","","",null,null],[8,"FormalPowerSeriesMultiplier","","",null,null],[16,"T","","",91,null],[10,"convolve","","",91,[[["formalpowerseries",3]],["formalpowerseries",3]]],[8,"FormalPowerSeriesCoefficientSqrt","","",null,null],[10,"sqrt","","",92,[[],["option",4]]],[8,"NTTModulus","","",null,null],[10,"primitive_root","","",93,[[]]],[0,"num","competitive","",null,null],[3,"Complex","competitive::num","",null,null],[12,"re","","",94,null],[12,"im","","",94,null],[3,"MInt","","",null,null],[3,"QuadDouble","","ref: https://na-inet.jp/na/qd_ja.pdf",null,null],[12,"0","","",95,null],[11,"new","","",94,[[]]],[11,"transpose","","",94,[[]]],[11,"conjugate","","",94,[[]]],[11,"dot","","",94,[[]]],[11,"cross","","",94,[[]]],[11,"norm","","",94,[[]]],[11,"polar","","",94,[[]]],[11,"abs","","",94,[[]]],[11,"unit","","",94,[[]]],[11,"angle","","",94,[[]]],[11,"new","","",96,[[]]],[11,"new_unchecked","","",96,[[]]],[11,"inner","","",96,[[]]],[11,"get_mod","","",96,[[]]],[11,"pow","","",96,[[]]],[11,"inv","","only prime modulus",96,[[]]],[11,"new","","",95,[[]]],[11,"renormalize","","",95,[[]]],[11,"is_zero","","",95,[[]]],[11,"is_sign_negative","","",95,[[]]],[11,"sqrt","","",95,[[]]],[11,"abs","","",95,[[]]],[11,"div2","","",95,[[]]],[0,"modulus","","",null,null],[3,"Modulo1000000007","competitive::num::modulus","",null,null],[3,"Modulo1000000009","","",null,null],[3,"Modulo998244353","","",null,null],[3,"DynModulo","","",null,null],[5,"set_dyn_modulus","","",null,[[]]],[6,"MInt1000000007","","",null,null],[6,"MInt1000000009","","",null,null],[6,"MInt998244353","","",null,null],[6,"DynMInt","","",null,null],[8,"Modulus","competitive::num","",null,null],[10,"get_modulus","","",97,[[]]],[11,"modulo","","",97,[[]]],[8,"Zero","","",null,null],[10,"zero","","",98,[[]]],[11,"is_zero","","",98,[[]]],[8,"One","","",null,null],[10,"one","","",99,[[]]],[11,"is_one","","",99,[[]]],[0,"string","competitive","string algorithems",null,null],[3,"KnuthMorrisPratt","competitive::string","",null,null],[3,"MultipleRollingHash","","",null,null],[3,"RollingHash","","",null,null],[3,"SuffixArray","","",null,null],[3,"Zarray","","",null,null],[11,"new","","",100,[[["vec",3]]]],[11,"search_all","","",100,[[],["vec",3]]],[18,"MOD","","",101,null],[11,"mersenne_mod","","",101,[[]]],[11,"mersenne_mul","","",101,[[]]],[11,"mersenne_mul_mod","","",101,[[]]],[11,"new","","",101,[[]]],[11,"hash_once","","",101,[[]]],[11,"find","","S [l, r)",101,[[]]],[11,"concat","","",101,[[]]],[11,"new","","",102,[[]]],[11,"new_rand","","",102,[[]]],[11,"find","","",102,[[],["vec",3]]],[11,"concat","","",102,[[],["vec",3]]],[11,"new","","",103,[[["vec",3]]]],[11,"longest_common_prefix_array","","",103,[[],["vec",3]]],[11,"new","","",104,[[]]],[11,"search","","",104,[[["eq",8]],["vec",3]]],[0,"tools","competitive","",null,null],[3,"Counter","competitive::tools","",null,null],[3,"SimuratedAnnealing","","",null,null],[12,"iter_count","","",105,null],[12,"now","","",105,null],[12,"time","","",105,null],[12,"temperture","","",105,null],[12,"log_table","","",105,null],[12,"rand","","",105,null],[3,"Xorshift","","",null,null],[3,"Scanner","","",null,null],[3,"TotalOrd","","implement Ord by PartialOrd",null,null],[12,"0","","",106,null],[5,"echo","","",null,[[],["result",6]]],[5,"read_stdin_all","","",null,[[],["string",3]]],[5,"read_all","","",null,[[],["string",3]]],[5,"read_all_unchecked","","",null,[[],["string",3]]],[11,"new","","",107,[[]]],[11,"get","","",107,[[]]],[11,"add","","",107,[[]]],[11,"remove","","",107,[[]]],[11,"keys","","",107,[[],["keys",3]]],[11,"values","","",107,[[],["values",3]]],[11,"iter","","",107,[[],["iter",3]]],[18,"IS_MAXIMIZE","","",105,null],[18,"START_TEMP","","",105,null],[18,"END_TEMP","","",105,null],[18,"TEMP_RATIO","","",105,null],[18,"TIME_LIMIT","","",105,null],[18,"LOG_TABLE_SIZE","","",105,null],[18,"UPDATE_INTERVAL","","",105,null],[18,"SEED","","",105,null],[11,"new","","",105,[[]]],[11,"is_accepted","","",105,[[]]],[11,"is_end","","",105,[[]]],[11,"new","","",108,[[]]],[11,"time","","",108,[[]]],[11,"rand64","","",108,[[]]],[11,"rand","","",108,[[]]],[11,"rands","","",108,[[],["vec",3]]],[11,"randf","","",108,[[]]],[11,"gen_bool","","",108,[[]]],[11,"new","","",109,[[]]],[11,"scan","","",109,[[]]],[11,"mscan","","",109,[[["markediterscan",8]]]],[11,"scan_vec","","",109,[[],["vec",3]]],[11,"iter","","",109,[[],[["scanneriter",3],["iterscan",8]]]],[0,"marker","","",null,null],[3,"Usize1","competitive::tools::marker","",null,null],[3,"Chars","","",null,null],[3,"CharsWithBase","","",null,null],[12,"0","","",110,null],[3,"Collect","","",null,null],[8,"IterScan","competitive::tools","",null,null],[16,"Output","","",111,null],[10,"scan","","",111,[[],["option",4]]],[8,"MarkedIterScan","","",null,null],[16,"Output","","",112,null],[10,"mscan","","",112,[[],["option",4]]],[0,"prelude","competitive","",null,null],[8,"Read","competitive::prelude","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified…",113,[[],[["error",3],["result",4]]]],[11,"read_vectored","","Like `read`, except that it reads into a slice of buffers.",113,[[],[["error",3],["result",4]]]],[11,"is_read_vectored","","Determines if this `Read`er has an efficient…",113,[[]]],[11,"initializer","","Determines if this `Read`er can work with buffers of…",113,[[],["initializer",3]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into…",113,[[["vec",3]],[["error",3],["result",4]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to…",113,[[["string",3]],[["error",3],["result",4]]]],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",113,[[],[["result",4],["error",3]]]],[11,"by_ref","","Creates a \\\"by reference\\\" adaptor for this instance of…",113,[[]]],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over…",113,[[],["bytes",3]]],[11,"chain","","Creates an adaptor which will chain this stream with…",113,[[],["chain",3]]],[11,"take","","Creates an adaptor which will read at most `limit` bytes…",113,[[],["take",3]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this writer, returning how many bytes…",114,[[],[["error",3],["result",4]]]],[11,"write_vectored","","Like `write`, except that it writes from a slice of buffers.",114,[[],[["error",3],["result",4]]]],[11,"is_write_vectored","","Determines if this `Write`er has an efficient…",114,[[]]],[10,"flush","","Flush this output stream, ensuring that all intermediately…",114,[[],[["result",4],["error",3]]]],[11,"write_all","","Attempts to write an entire buffer into this writer.",114,[[],[["result",4],["error",3]]]],[11,"write_all_vectored","","Attempts to write multiple buffers into this writer.",114,[[],[["result",4],["error",3]]]],[11,"write_fmt","","Writes a formatted string into this writer, returning any…",114,[[["arguments",3]],[["result",4],["error",3]]]],[11,"by_ref","","Creates a \\\"by reference\\\" adaptor for this instance of…",114,[[]]],[3,"Chars","","",null,null],[3,"Usize1","","",null,null],[3,"Scanner","","",null,null],[5,"echo","","",null,[[],["result",6]]],[5,"read_all","","",null,[[],["string",3]]],[5,"read_all_unchecked","","",null,[[],["string",3]]],[8,"One","","",null,null],[10,"one","","",99,[[]]],[11,"is_one","competitive::num","",99,[[]]],[8,"Zero","competitive::prelude","",null,null],[10,"zero","","",98,[[]]],[11,"is_zero","competitive::num","",98,[[]]],[0,"tree","competitive","tree algorithems",null,null],[3,"EulerTourForEdge","competitive::tree","",null,null],[12,"eidx","","",115,null],[12,"par","","",115,null],[3,"EulerTourForVertex","","",null,null],[12,"vidx","","",116,null],[3,"EulerTourForRichVertex","","",null,null],[3,"LowestCommonAncestor","","",null,null],[3,"LCAMonoid","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",117,null],[12,"vidx","","",117,null],[3,"ReRooting","","dynamic programming on all-rooted trees",null,null],[12,"dp","","dp[v]: result of v-rooted tree",118,null],[12,"ep","","ep[e]: result of e-subtree, if e >= n then…",118,null],[3,"TreeRec","","",null,null],[12,"n","","",119,null],[11,"tree_depth","competitive::graph","",68,[[],["vec",3]]],[11,"tree_depth","competitive::tree::depth","",120,[[],["vec",3]]],[11,"weighted_tree_depth","competitive::graph","",68,[[["fn",8],["monoid",8]],["vec",3]]],[11,"weighted_tree_depth","competitive::tree::depth","",120,[[["fn",8],["monoid",8]],["vec",3]]],[11,"tree_size","competitive::graph","",68,[[],["vec",3]]],[11,"tree_size","competitive::tree::depth","",120,[[],["vec",3]]],[11,"new","competitive::tree","",121,[[["undirectedsparsegraph",6]]]],[11,"ancestor","","",121,[[]]],[11,"new","","",115,[[["undirectedsparsegraph",6]]]],[11,"length","","",115,[[]]],[11,"new","","",116,[[["undirectedsparsegraph",6]]]],[11,"length","","",116,[[]]],[11,"subtree_vertex_tour","","",116,[[]]],[11,"path_vertex_tour","","",116,[[]]],[11,"subtree_query","","",116,[[["fnmut",8]]]],[11,"subtree_update","","",116,[[["fnmut",8]]]],[11,"path_query","","",116,[[["fnmut",8]]]],[11,"path_update","","",116,[[["fnmut",8]]]],[11,"new","","",122,[[["undirectedsparsegraph",6]]]],[11,"length","","",122,[[]]],[11,"query","","",122,[[["fnmut",8]]]],[11,"gen_lca","","",122,[[],["lowestcommonancestor",3]]],[11,"lca","","",123,[[]]],[11,"new","","",117,[[["undirectedsparsegraph",6]]]],[11,"lca","","",117,[[]]],[11,"update","","",117,[[["fnmut",8]]]],[11,"query","","",117,[[["fnmut",8]]]],[11,"query_noncom","","",117,[[["fnmut",8]]]],[11,"new","","",118,[[["undirectedsparsegraph",6]]]],[11,"new","","",119,[[]]],[11,"dfs","","",119,[[["undirectedsparsegraph",6]]]],[0,"impl_lcam","","",null,null],[14,"impl_bitand_identity","competitive","",null,null],[14,"impl_bitor_identity","","",null,null],[14,"impl_bitxor_identity","","",null,null],[14,"comprehension","","",null,null],[14,"min","","",null,null],[14,"chmin","","",null,null],[14,"max","","",null,null],[14,"chmax","","",null,null],[14,"scan_value","","",null,null],[14,"scan","","",null,null],[11,"from","competitive::algebra","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","competitive::algorithm","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","competitive::combinatorial_optimization","",36,[[]]],[11,"into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","competitive::data_structure","",125,[[]]],[11,"into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","competitive::geometry","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","competitive::graph","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","competitive::graph::adjacency_list_graph","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","competitive::graph::grid_graph","",131,[[]]],[11,"into","","",131,[[]]],[11,"into_iter","","",131,[[]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"into_iter","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"from","competitive::graph::sparse_graph","",133,[[]]],[11,"into","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"to_owned","","",134,[[]]],[11,"clone_into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"from","competitive::math","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","competitive::num","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"to_string","","",96,[[],["string",3]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"to_string","","",95,[[],["string",3]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","competitive::num::modulus","",138,[[]]],[11,"into","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"from","competitive::string","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","competitive::tools","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","competitive::tools::marker","",142,[[]]],[11,"into","","",142,[[]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"to_owned","","",144,[[]]],[11,"clone_into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"from","competitive::tree","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"operate","competitive::algebra","",0,[[]]],[11,"operate","","",1,[[]]],[11,"operate","","",2,[[]]],[11,"operate","","",3,[[]]],[11,"operate","","",4,[[]]],[11,"operate","","",5,[[]]],[11,"operate","","",6,[[]]],[11,"operate","","",7,[[]]],[11,"operate","","",8,[[]]],[11,"operate","","",9,[[]]],[11,"operate","","",10,[[]]],[11,"operate","","",11,[[]]],[11,"operate","","",124,[[]]],[11,"operate","","",12,[[]]],[11,"operate","","",13,[[]]],[11,"operate","","",14,[[]]],[11,"operate","","",15,[[]]],[11,"operate","competitive::tree","",121,[[]]],[11,"unit","competitive::algebra","",0,[[]]],[11,"unit","","",1,[[]]],[11,"unit","","",2,[[]]],[11,"unit","","",3,[[]]],[11,"unit","","",4,[[]]],[11,"unit","","",5,[[]]],[11,"unit","","",6,[[]]],[11,"unit","","",7,[[]]],[11,"unit","","",8,[[]]],[11,"unit","","",9,[[]]],[11,"unit","","",10,[[]]],[11,"unit","","",11,[[]]],[11,"unit","","",12,[[]]],[11,"unit","","",13,[[]]],[11,"unit","","",14,[[]]],[11,"unit","","",15,[[]]],[11,"inverse","","",4,[[]]],[11,"rinv_operate","","",4,[[]]],[11,"inverse","","",5,[[]]],[11,"rinv_operate","","",5,[[]]],[11,"inverse","","",9,[[]]],[11,"inverse","","",11,[[]]],[11,"inverse","","",13,[[]]],[11,"inverse","","",15,[[]]],[11,"initial","competitive::data_structure","",125,[[]]],[11,"next","","",125,[[],["option",4]]],[11,"accept","","",125,[[]]],[11,"initial","","",126,[[]]],[11,"next","","",126,[[],["option",4]]],[11,"accept","","",126,[[]]],[11,"initial","","",127,[[]]],[11,"next","","",127,[[],["option",4]]],[11,"accept","","",127,[[]]],[11,"initial","","",41,[[]]],[11,"next","","",41,[[],["option",4]]],[11,"accept","","",41,[[]]],[11,"initial","","",42,[[]]],[11,"next","","",42,[[],["option",4]]],[11,"accept","","",42,[[]]],[11,"initial","","",128,[[]]],[11,"next","","",128,[[],["option",4]]],[11,"accept","","",128,[[]]],[11,"initial","","",129,[[]]],[11,"next","","",129,[[],["option",4]]],[11,"accept","","",129,[[]]],[11,"initial","","",43,[[]]],[11,"next","","",43,[[],["option",4]]],[11,"accept","","",43,[[]]],[11,"bit_length","","",130,[[]]],[11,"access","","",130,[[]]],[11,"rank1","","",130,[[]]],[11,"select1","","",130,[[],["option",4]]],[11,"select0","","",130,[[],["option",4]]],[11,"convolve","competitive::math","",137,[[["formalpowerseries",3]],["formalpowerseries",3]]],[11,"sqrt","competitive::num","",96,[[],["option",4]]],[11,"primitive_root","competitive::num::modulus","",140,[[]]],[11,"get_modulus","","",138,[[]]],[11,"get_modulus","","",139,[[]]],[11,"get_modulus","","",140,[[]]],[11,"get_modulus","","",141,[[]]],[11,"zero","competitive::math","",83,[[]]],[11,"zero","","",85,[[]]],[11,"zero","competitive::num","",96,[[]]],[11,"one","competitive::math","",83,[[]]],[11,"one","","",85,[[]]],[11,"one","competitive::num","",96,[[]]],[11,"construct_graph","competitive::graph::sparse_graph","",133,[[["vec",3]],["sparsegraph",3]]],[11,"construct_graph","","",134,[[["vec",3]],["sparsegraph",3]]],[11,"construct_graph","","",135,[[["vec",3]],["sparsegraph",3]]],[11,"scan","competitive::num","",96,[[],["option",4]]],[11,"scan","competitive::tools::marker","",142,[[],["option",4]]],[11,"scan","","",143,[[],["option",4]]],[11,"mscan","competitive::graph","",69,[[],["option",4]]],[11,"mscan","","",71,[[],["option",4]]],[11,"mscan","competitive::graph::sparse_graph","",136,[[],["option",4]]],[11,"mscan","competitive::graph","",77,[[],["option",4]]],[11,"mscan","competitive::tools::marker","",110,[[],["option",4]]],[11,"mscan","","",144,[[],["option",4]]],[11,"from","competitive::math","",83,[[]]],[11,"from","","",83,[[["vec",3]]]],[11,"from","competitive::num","",96,[[]]],[11,"from","","",96,[[]]],[11,"from","","",96,[[]]],[11,"from","","",96,[[]]],[11,"from","","",96,[[]]],[11,"from","","",96,[[]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"extend","competitive::graph","",73,[[["intoiterator",8]]]],[11,"extend","","",75,[[["intoiterator",8]]]],[11,"extend","competitive::tools","",107,[[["intoiterator",8]]]],[11,"next","competitive::graph::grid_graph","",131,[[],["option",4]]],[11,"next","","",132,[[],["option",4]]],[11,"clone","competitive::algebra","",0,[[],["maxoperation",3]]],[11,"clone","","",1,[[],["minoperation",3]]],[11,"clone","","",2,[[],["firstoperation",3]]],[11,"clone","","",3,[[],["lastoperation",3]]],[11,"clone","","",4,[[],["additiveoperation",3]]],[11,"clone","","",5,[[],["multiplicativeoperation",3]]],[11,"clone","","",6,[[],["linearoperation",3]]],[11,"clone","","",7,[[],["bitandoperation",3]]],[11,"clone","","",8,[[],["bitoroperation",3]]],[11,"clone","","",9,[[],["bitxoroperation",3]]],[11,"clone","","",10,[[],["monoidaloperation",3]]],[11,"clone","","",11,[[],["groupoperation",3]]],[11,"clone","","",124,[[],["assocoativeoperator",3]]],[11,"clone","","",12,[[],["absorbedassocoativeoperator",3]]],[11,"clone","","",13,[[],["cartesianoperation",3]]],[11,"clone","","",14,[[],["countingoperation",3]]],[11,"clone","","",15,[[],["reverseoperation",3]]],[11,"clone","competitive::algorithm","",25,[[],["chtline",3]]],[11,"clone","","",26,[[],["convexhulltrick",3]]],[11,"clone","competitive::combinatorial_optimization","",40,[[],["zerooneknapsackproblemsmallitems",3]]],[11,"clone","","",38,[[],["longestincreasingsubsequence",3]]],[11,"clone","competitive::data_structure","",43,[[],["alwaysacceptingautomaton",3]]],[11,"clone","","",44,[[],["binaryindexedtree",3]]],[11,"clone","","",45,[[],["binaryindexedtree2d",3]]],[11,"clone","","",46,[[],["bitset",3]]],[11,"clone","","",47,[[],["disjointsparsetable",3]]],[11,"clone","","",49,[[],["lazysegmenttree",3]]],[11,"clone","","",50,[[],["segmenttree",3]]],[11,"clone","","",51,[[],["queueaggregation",3]]],[11,"clone","","",52,[[],["dequeaggregation",3]]],[11,"clone","","",55,[[],["unionfind",3]]],[11,"clone","","",56,[[],["weightedunionfind",3]]],[11,"clone","competitive::geometry","",62,[[],["circle",3]]],[11,"clone","","",63,[[],["line",3]]],[11,"clone","","",64,[[],["linesegment",3]]],[11,"clone","","",60,[[],["real",3]]],[11,"clone","","",61,[[],["ccw",4]]],[11,"clone","competitive::graph::adjacency_list_graph","",80,[[],["adjacency",3]]],[11,"clone","competitive::graph","",65,[[],["adjacencylistgraph",3]]],[11,"clone","","",70,[[],["edgelistgraph",3]]],[11,"clone","","",72,[[],["gridgraph",3]]],[11,"clone","competitive::graph::grid_graph","",131,[[],["adjacency4",3]]],[11,"clone","","",132,[[],["adjacency8",3]]],[11,"clone","competitive::graph","",73,[[],["dinicbuilder",3]]],[11,"clone","","",74,[[],["dinic",3]]],[11,"clone","","",75,[[],["primaldualbuilder",3]]],[11,"clone","competitive::graph::sparse_graph","",133,[[],["directededge",3]]],[11,"clone","","",134,[[],["undirectededge",3]]],[11,"clone","","",135,[[],["bidirectionaledge",3]]],[11,"clone","competitive::graph","",67,[[],["adjacency",3]]],[11,"clone","","",68,[[],["sparsegraph",3]]],[11,"clone","","",78,[[],["stronglyconnectedcomponent",3]]],[11,"clone","","",79,[[],["twosatisfiability",3]]],[11,"clone","competitive::math","",82,[[],["memorizedfactorial",3]]],[11,"clone","","",86,[[],["smallmodmemorizedfactorial",3]]],[11,"clone","","",83,[[]]],[11,"clone","","",84,[[],["matrix",3]]],[11,"clone","","",88,[[],["babystepgiantstep",3]]],[11,"clone","","",85,[[],["polynomial",3]]],[11,"clone","","",89,[[],["primetable",3]]],[11,"clone","","",90,[[],["eulerphitable",3]]],[11,"clone","competitive::num","",94,[[],["complex",3]]],[11,"clone","","",96,[[]]],[11,"clone","","",95,[[],["quaddouble",3]]],[11,"clone","competitive::string","",100,[[],["knuthmorrispratt",3]]],[11,"clone","","",101,[[],["rollinghash",3]]],[11,"clone","","",102,[[],["multiplerollinghash",3]]],[11,"clone","","",103,[[],["suffixarray",3]]],[11,"clone","","",104,[[],["zarray",3]]],[11,"clone","competitive::tools","",107,[[],["counter",3]]],[11,"clone","","",108,[[],["xorshift",3]]],[11,"clone","","",109,[[],["scanner",3]]],[11,"clone","competitive::tools::marker","",142,[[],["usize1",3]]],[11,"clone","","",143,[[],["chars",3]]],[11,"clone","","",110,[[],["charswithbase",3]]],[11,"clone","","",144,[[],["collect",3]]],[11,"clone","competitive::tree","",115,[[],["eulertourforedge",3]]],[11,"clone","","",116,[[],["eulertourforvertex",3]]],[11,"clone","","",122,[[],["eulertourforrichvertex",3]]],[11,"clone","","",123,[[],["lowestcommonancestor",3]]],[11,"clone","","",121,[[],["lcamonoid",3]]],[11,"clone","","",118,[[],["rerooting",3]]],[11,"clone","","",119,[[],["treerec",3]]],[11,"default","competitive::algebra","",0,[[],["maxoperation",3]]],[11,"default","","",1,[[],["minoperation",3]]],[11,"default","","",2,[[],["firstoperation",3]]],[11,"default","","",3,[[],["lastoperation",3]]],[11,"default","","",4,[[],["additiveoperation",3]]],[11,"default","","",5,[[],["multiplicativeoperation",3]]],[11,"default","","",6,[[],["linearoperation",3]]],[11,"default","","",7,[[],["bitandoperation",3]]],[11,"default","","",8,[[],["bitoroperation",3]]],[11,"default","","",9,[[],["bitxoroperation",3]]],[11,"default","competitive::algorithm","",25,[[],["chtline",3]]],[11,"default","","",26,[[],["convexhulltrick",3]]],[11,"default","competitive::combinatorial_optimization","",40,[[]]],[11,"default","","",38,[[]]],[11,"default","competitive::data_structure","",43,[[]]],[11,"default","","",46,[[],["bitset",3]]],[11,"default","competitive::graph::adjacency_list_graph","",80,[[],["adjacency",3]]],[11,"default","competitive::graph","",65,[[],["adjacencylistgraph",3]]],[11,"default","competitive::graph::sparse_graph","",133,[[],["directededge",3]]],[11,"default","","",134,[[],["undirectededge",3]]],[11,"default","","",135,[[],["bidirectionaledge",3]]],[11,"default","competitive::graph","",67,[[],["adjacency",3]]],[11,"default","competitive::math","",86,[[]]],[11,"default","","",83,[[],["formalpowerseries",3]]],[11,"default","","",85,[[],["polynomial",3]]],[11,"default","competitive::num","",94,[[],["complex",3]]],[11,"default","","",96,[[]]],[11,"default","","",95,[[],["quaddouble",3]]],[11,"default","competitive::tools","",107,[[]]],[11,"default","","",105,[[]]],[11,"default","","",108,[[]]],[11,"cmp","competitive::algebra","",0,[[["maxoperation",3]],["ordering",4]]],[11,"cmp","","",1,[[["minoperation",3]],["ordering",4]]],[11,"cmp","","",2,[[["firstoperation",3]],["ordering",4]]],[11,"cmp","","",3,[[["lastoperation",3]],["ordering",4]]],[11,"cmp","","",4,[[["additiveoperation",3]],["ordering",4]]],[11,"cmp","","",5,[[["multiplicativeoperation",3]],["ordering",4]]],[11,"cmp","","",6,[[["linearoperation",3]],["ordering",4]]],[11,"cmp","","",7,[[["bitandoperation",3]],["ordering",4]]],[11,"cmp","","",8,[[["bitoroperation",3]],["ordering",4]]],[11,"cmp","","",9,[[["bitxoroperation",3]],["ordering",4]]],[11,"cmp","competitive::data_structure","",46,[[["bitset",3]],["ordering",4]]],[11,"cmp","competitive::geometry","",61,[[["ccw",4]],["ordering",4]]],[11,"cmp","competitive::graph::adjacency_list_graph","",80,[[["adjacency",3]],["ordering",4]]],[11,"cmp","competitive::graph","",72,[[["gridgraph",3]],["ordering",4]]],[11,"cmp","competitive::graph::sparse_graph","",133,[[["directededge",3]],["ordering",4]]],[11,"cmp","","",134,[[["undirectededge",3]],["ordering",4]]],[11,"cmp","","",135,[[["bidirectionaledge",3]],["ordering",4]]],[11,"cmp","competitive::graph","",67,[[["adjacency",3]],["ordering",4]]],[11,"cmp","competitive::num","",96,[[],["ordering",4]]],[11,"cmp","competitive::tools","",106,[[["totalord",3]],["ordering",4]]],[11,"eq","competitive::algebra","",0,[[["maxoperation",3]]]],[11,"ne","","",0,[[["maxoperation",3]]]],[11,"eq","","",1,[[["minoperation",3]]]],[11,"ne","","",1,[[["minoperation",3]]]],[11,"eq","","",2,[[["firstoperation",3]]]],[11,"ne","","",2,[[["firstoperation",3]]]],[11,"eq","","",3,[[["lastoperation",3]]]],[11,"ne","","",3,[[["lastoperation",3]]]],[11,"eq","","",4,[[["additiveoperation",3]]]],[11,"ne","","",4,[[["additiveoperation",3]]]],[11,"eq","","",5,[[["multiplicativeoperation",3]]]],[11,"ne","","",5,[[["multiplicativeoperation",3]]]],[11,"eq","","",6,[[["linearoperation",3]]]],[11,"ne","","",6,[[["linearoperation",3]]]],[11,"eq","","",7,[[["bitandoperation",3]]]],[11,"ne","","",7,[[["bitandoperation",3]]]],[11,"eq","","",8,[[["bitoroperation",3]]]],[11,"ne","","",8,[[["bitoroperation",3]]]],[11,"eq","","",9,[[["bitxoroperation",3]]]],[11,"ne","","",9,[[["bitxoroperation",3]]]],[11,"eq","competitive::algorithm","",25,[[["chtline",3]]]],[11,"ne","","",25,[[["chtline",3]]]],[11,"eq","competitive::data_structure","",46,[[["bitset",3]]]],[11,"ne","","",46,[[["bitset",3]]]],[11,"eq","competitive::geometry","",62,[[["circle",3]]]],[11,"ne","","",62,[[["circle",3]]]],[11,"eq","","",63,[[["line",3]]]],[11,"ne","","",63,[[["line",3]]]],[11,"eq","","",64,[[["linesegment",3]]]],[11,"ne","","",64,[[["linesegment",3]]]],[11,"eq","","",60,[[["real",3]]]],[11,"eq","","",61,[[["ccw",4]]]],[11,"eq","competitive::graph::adjacency_list_graph","",80,[[["adjacency",3]]]],[11,"ne","","",80,[[["adjacency",3]]]],[11,"eq","competitive::graph","",72,[[["gridgraph",3]]]],[11,"ne","","",72,[[["gridgraph",3]]]],[11,"eq","competitive::graph::sparse_graph","",133,[[["directededge",3]]]],[11,"eq","","",134,[[["undirectededge",3]]]],[11,"eq","","",135,[[["bidirectionaledge",3]]]],[11,"eq","competitive::graph","",67,[[["adjacency",3]]]],[11,"ne","","",67,[[["adjacency",3]]]],[11,"eq","competitive::math","",83,[[]]],[11,"eq","","",84,[[["matrix",3]]]],[11,"ne","","",84,[[["matrix",3]]]],[11,"eq","","",85,[[["polynomial",3]]]],[11,"ne","","",85,[[["polynomial",3]]]],[11,"eq","competitive::num","",94,[[["complex",3]]]],[11,"ne","","",94,[[["complex",3]]]],[11,"eq","","",96,[[]]],[11,"eq","","",95,[[["quaddouble",3]]]],[11,"ne","","",95,[[["quaddouble",3]]]],[11,"eq","competitive::tools","",106,[[["totalord",3]]]],[11,"ne","","",106,[[["totalord",3]]]],[11,"partial_cmp","competitive::algebra","",0,[[["maxoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["maxoperation",3]]]],[11,"le","","",0,[[["maxoperation",3]]]],[11,"gt","","",0,[[["maxoperation",3]]]],[11,"ge","","",0,[[["maxoperation",3]]]],[11,"partial_cmp","","",1,[[["minoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["minoperation",3]]]],[11,"le","","",1,[[["minoperation",3]]]],[11,"gt","","",1,[[["minoperation",3]]]],[11,"ge","","",1,[[["minoperation",3]]]],[11,"partial_cmp","","",2,[[["firstoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["firstoperation",3]]]],[11,"le","","",2,[[["firstoperation",3]]]],[11,"gt","","",2,[[["firstoperation",3]]]],[11,"ge","","",2,[[["firstoperation",3]]]],[11,"partial_cmp","","",3,[[["lastoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["lastoperation",3]]]],[11,"le","","",3,[[["lastoperation",3]]]],[11,"gt","","",3,[[["lastoperation",3]]]],[11,"ge","","",3,[[["lastoperation",3]]]],[11,"partial_cmp","","",4,[[["additiveoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["additiveoperation",3]]]],[11,"le","","",4,[[["additiveoperation",3]]]],[11,"gt","","",4,[[["additiveoperation",3]]]],[11,"ge","","",4,[[["additiveoperation",3]]]],[11,"partial_cmp","","",5,[[["multiplicativeoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["multiplicativeoperation",3]]]],[11,"le","","",5,[[["multiplicativeoperation",3]]]],[11,"gt","","",5,[[["multiplicativeoperation",3]]]],[11,"ge","","",5,[[["multiplicativeoperation",3]]]],[11,"partial_cmp","","",6,[[["linearoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["linearoperation",3]]]],[11,"le","","",6,[[["linearoperation",3]]]],[11,"gt","","",6,[[["linearoperation",3]]]],[11,"ge","","",6,[[["linearoperation",3]]]],[11,"partial_cmp","","",7,[[["bitandoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["bitandoperation",3]]]],[11,"le","","",7,[[["bitandoperation",3]]]],[11,"gt","","",7,[[["bitandoperation",3]]]],[11,"ge","","",7,[[["bitandoperation",3]]]],[11,"partial_cmp","","",8,[[["bitoroperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["bitoroperation",3]]]],[11,"le","","",8,[[["bitoroperation",3]]]],[11,"gt","","",8,[[["bitoroperation",3]]]],[11,"ge","","",8,[[["bitoroperation",3]]]],[11,"partial_cmp","","",9,[[["bitxoroperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["bitxoroperation",3]]]],[11,"le","","",9,[[["bitxoroperation",3]]]],[11,"gt","","",9,[[["bitxoroperation",3]]]],[11,"ge","","",9,[[["bitxoroperation",3]]]],[11,"partial_cmp","competitive::data_structure","",46,[[["bitset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",46,[[["bitset",3]]]],[11,"le","","",46,[[["bitset",3]]]],[11,"gt","","",46,[[["bitset",3]]]],[11,"ge","","",46,[[["bitset",3]]]],[11,"partial_cmp","competitive::geometry","",60,[[["real",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",61,[[["ccw",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::graph::adjacency_list_graph","",80,[[["adjacency",3]],[["option",4],["ordering",4]]]],[11,"lt","","",80,[[["adjacency",3]]]],[11,"le","","",80,[[["adjacency",3]]]],[11,"gt","","",80,[[["adjacency",3]]]],[11,"ge","","",80,[[["adjacency",3]]]],[11,"partial_cmp","competitive::graph","",72,[[["gridgraph",3]],[["option",4],["ordering",4]]]],[11,"lt","","",72,[[["gridgraph",3]]]],[11,"le","","",72,[[["gridgraph",3]]]],[11,"gt","","",72,[[["gridgraph",3]]]],[11,"ge","","",72,[[["gridgraph",3]]]],[11,"partial_cmp","competitive::graph::sparse_graph","",133,[[["directededge",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",134,[[["undirectededge",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",135,[[["bidirectionaledge",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::graph","",67,[[["adjacency",3]],[["option",4],["ordering",4]]]],[11,"lt","","",67,[[["adjacency",3]]]],[11,"le","","",67,[[["adjacency",3]]]],[11,"gt","","",67,[[["adjacency",3]]]],[11,"ge","","",67,[[["adjacency",3]]]],[11,"partial_cmp","competitive::num","",96,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",95,[[["quaddouble",3]],[["option",4],["ordering",4]]]],[11,"lt","","",95,[[["quaddouble",3]]]],[11,"le","","",95,[[["quaddouble",3]]]],[11,"gt","","",95,[[["quaddouble",3]]]],[11,"ge","","",95,[[["quaddouble",3]]]],[11,"partial_cmp","competitive::tools","",106,[[["totalord",3]],[["option",4],["ordering",4]]]],[11,"fmt","competitive::algebra","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::algorithm","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::combinatorial_optimization","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::adjacency_list_graph","",80,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::grid_graph","",131,[[["formatter",3]],["result",6]]],[11,"fmt","","",132,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::sparse_graph","",133,[[["formatter",3]],["result",6]]],[11,"fmt","","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",94,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools::marker","",142,[[["formatter",3]],["result",6]]],[11,"fmt","","",143,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","","",144,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",96,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",95,[[["formatter",3]],[["error",3],["result",4]]]],[11,"div","competitive::math","",83,[[]]],[11,"div","","",83,[[]]],[11,"div","competitive::num","",94,[[]]],[11,"div","","",94,[[]]],[11,"div","","",96,[[]]],[11,"div","","",96,[[["mint",3]]]],[11,"div","","",95,[[]]],[11,"rem","competitive::math","",83,[[]]],[11,"sub","","",83,[[]]],[11,"sub","","",83,[[]]],[11,"sub","competitive::num","",94,[[]]],[11,"sub","","",94,[[]]],[11,"sub","","",96,[[]]],[11,"sub","","",96,[[["mint",3]]]],[11,"sub","","",95,[[]]],[11,"add","competitive::math","",83,[[]]],[11,"add","","",83,[[]]],[11,"add","competitive::num","",94,[[]]],[11,"add","","",94,[[]]],[11,"add","","",96,[[]]],[11,"add","","",96,[[["mint",3]]]],[11,"add","","",95,[[]]],[11,"add","","",95,[[]]],[11,"mul","competitive::math","",83,[[]]],[11,"mul","","",83,[[]]],[11,"mul","competitive::num","",94,[[]]],[11,"mul","","",94,[[]]],[11,"mul","","",96,[[]]],[11,"mul","","",96,[[["mint",3]]]],[11,"mul","","",95,[[]]],[11,"mul","","",95,[[]]],[11,"neg","competitive::math","",83,[[]]],[11,"neg","competitive::num","",94,[[]]],[11,"neg","","",96,[[]]],[11,"neg","","",95,[[]]],[11,"add_assign","competitive::math","",83,[[]]],[11,"add_assign","","",83,[[]]],[11,"add_assign","competitive::num","",96,[[["mint",3]]]],[11,"add_assign","","",96,[[["mint",3]]]],[11,"sub_assign","competitive::math","",83,[[]]],[11,"sub_assign","","",83,[[]]],[11,"sub_assign","competitive::num","",96,[[["mint",3]]]],[11,"sub_assign","","",96,[[["mint",3]]]],[11,"mul_assign","competitive::math","",83,[[]]],[11,"mul_assign","","",83,[[]]],[11,"mul_assign","competitive::num","",96,[[["mint",3]]]],[11,"mul_assign","","",96,[[["mint",3]]]],[11,"div_assign","competitive::math","",83,[[]]],[11,"div_assign","","",83,[[]]],[11,"div_assign","competitive::num","",96,[[["mint",3]]]],[11,"div_assign","","",96,[[["mint",3]]]],[11,"rem_assign","competitive::math","",83,[[]]],[11,"not","competitive::data_structure","",46,[[]]],[11,"bitand","","",46,[[]]],[11,"bitor","","",46,[[]]],[11,"bitxor","","",46,[[]]],[11,"shl","","",46,[[]]],[11,"shl","competitive::math","",83,[[]]],[11,"shr","competitive::data_structure","",46,[[]]],[11,"shr","competitive::math","",83,[[]]],[11,"bitand_assign","competitive::data_structure","",46,[[]]],[11,"bitor_assign","","",46,[[]]],[11,"bitxor_assign","","",46,[[]]],[11,"shl_assign","","",46,[[]]],[11,"shl_assign","competitive::math","",83,[[]]],[11,"shr_assign","competitive::data_structure","",46,[[]]],[11,"shr_assign","competitive::math","",83,[[]]],[11,"index","competitive::data_structure","",47,[[]]],[11,"index","competitive::graph","",70,[[]]],[11,"index","","",78,[[]]],[11,"index","competitive::math","",83,[[]]],[11,"index","","",84,[[]]],[11,"index","","",84,[[]]],[11,"index","","",85,[[]]],[11,"index","competitive::num","",95,[[]]],[11,"index","competitive::string","",103,[[]]],[11,"index","","",104,[[]]],[11,"index_mut","competitive::math","",83,[[]]],[11,"index_mut","","",84,[[]]],[11,"index_mut","","",84,[[]]],[11,"index_mut","","",85,[[]]],[11,"hash","competitive::algebra","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","competitive::data_structure","",46,[[]]],[11,"hash","competitive::graph::adjacency_list_graph","",80,[[]]],[11,"hash","competitive::graph","",72,[[]]],[11,"hash","competitive::graph::sparse_graph","",133,[[]]],[11,"hash","","",134,[[]]],[11,"hash","","",135,[[]]],[11,"hash","competitive::graph","",67,[[]]],[11,"hash","competitive::num","",94,[[]]],[11,"hash","","",96,[[]]],[11,"from_str","","",96,[[],["result",4]]],[11,"from_str","","",95,[[],["result",4]]],[11,"from_iter","competitive::data_structure","",130,[[["intoiterator",8]]]],[11,"from_iter","competitive::math","",83,[[["intoiterator",8]]]],[11,"from_iter","competitive::tools","",107,[[["intoiterator",8]]]],[11,"sum","competitive::num","",96,[[["iterator",8]]]],[11,"sum","","",96,[[["iterator",8]]]],[11,"product","","",96,[[["iterator",8]]]],[11,"product","","",96,[[["iterator",8]]]],[11,"reverse_operate","competitive::algebra","",16,[[]]],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",18,[[]]],[11,"rinv_operate","","",19,[[]]],[11,"mo_solve","competitive::algorithm","",32,[[]]],[11,"rank1","competitive::data_structure","the number of 1 in [0, k)",59,[[]]],[11,"rank0","","the number of 0 in [0, k)",59,[[]]],[11,"select1","","index of k-th 1",59,[[],["option",4]]],[11,"select0","","index of k-th 0",59,[[],["option",4]]],[11,"new","competitive::graph::adjacency_list_graph","",80,[[],["adjacency",3]]],[11,"new","competitive::graph::sparse_graph","",136,[[]]],[11,"sqrt","competitive::num","",96,[[],["option",4]]],[11,"modulo","","",97,[[]]],[11,"is_zero","","",98,[[]]],[11,"is_one","","",99,[[]]],[11,"new","competitive::tools::marker","",144,[[]]]],"p":[[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"MonoidalOperation"],[3,"GroupOperation"],[3,"AbsorbedAssocoativeOperator"],[3,"CartesianOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[8,"Magma"],[8,"Unital"],[8,"Monoid"],[8,"Invertible"],[8,"MinimumBounded"],[8,"MaximumBounded"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[8,"BitXorIdentity"],[3,"CHTLine"],[3,"ConvexHullTrick"],[3,"SlideMinimum"],[3,"SubsetTransform"],[3,"SupersetTransform"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"MoSolver"],[8,"Bisect"],[8,"SliceBisectExt"],[8,"Trisect"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"LongestIncreasingSubsequence"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"LessThanAutomaton"],[3,"GreaterThanAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"Static2DTree"],[3,"LazySegmentTree"],[3,"SegmentTree"],[3,"QueueAggregation"],[3,"DequeAggregation"],[3,"Trie"],[3,"MergingUnionFind"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"WaveletMatrix"],[8,"Automaton"],[8,"RankSelectDictionaries"],[3,"Real"],[4,"CCW"],[3,"Circle"],[3,"Line"],[3,"LineSegment"],[3,"AdjacencyListGraph"],[3,"LowLink"],[3,"Adjacency"],[3,"SparseGraph"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraph"],[3,"EdgeListGraphScanner"],[3,"GridGraph"],[3,"DinicBuilder"],[3,"Dinic"],[3,"PrimalDualBuilder"],[3,"PrimalDual"],[3,"TreeGraphScanner"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[3,"Adjacency"],[8,"SparseGraphConstruction"],[3,"MemorizedFactorial"],[3,"FormalPowerSeries"],[3,"Matrix"],[3,"Polynomial"],[3,"SmallModMemorizedFactorial"],[3,"NumberTheoreticTransform"],[3,"BabyStepGiantStep"],[3,"PrimeTable"],[3,"EulerPhiTable"],[8,"FormalPowerSeriesMultiplier"],[8,"FormalPowerSeriesCoefficientSqrt"],[8,"NTTModulus"],[3,"Complex"],[3,"QuadDouble"],[3,"MInt"],[8,"Modulus"],[8,"Zero"],[8,"One"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"SimuratedAnnealing"],[3,"TotalOrd"],[3,"Counter"],[3,"Xorshift"],[3,"Scanner"],[3,"CharsWithBase"],[8,"IterScan"],[8,"MarkedIterScan"],[8,"Read"],[8,"Write"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"HeavyLightDecomposition"],[3,"ReRooting"],[3,"TreeRec"],[6,"UndirectedSparseGraph"],[3,"LCAMonoid"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"AssocoativeOperator"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"ContainAutomaton"],[3,"ContainCounterAutomaton"],[3,"BitVector"],[3,"Adjacency4"],[3,"Adjacency8"],[3,"DirectedEdge"],[3,"UndirectedEdge"],[3,"BidirectionalEdge"],[3,"SparseGraphScanner"],[3,"DefaultFormalPowerSeriesMultiplier"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"Modulo998244353"],[3,"DynModulo"],[3,"Usize1"],[3,"Chars"],[3,"Collect"]]},\
"library_checker":{"doc":"Verification of `competitive` crate by Library-Checker","i":[[0,"datastructure","library_checker","",null,null],[0,"point_add_range_sum","library_checker::datastructure","",null,null],[5,"point_add_range_sum_binary_indexed_tree","library_checker::datastructure::point_add_range_sum","✅  AC  116ms",null,[[]]],[5,"point_add_range_sum_segment_tree","","✅  AC  149ms",null,[[]]],[0,"point_set_range_composite","library_checker::datastructure","",null,null],[5,"point_set_range_composite","library_checker::datastructure::point_set_range_composite","✅  AC  220ms",null,[[]]],[0,"queue_operate_all_composite","library_checker::datastructure","",null,null],[5,"queue_operate_all_composite","library_checker::datastructure::queue_operate_all_composite","✅  AC  50ms",null,[[]]],[0,"range_affine_range_sum","library_checker::datastructure","",null,null],[5,"range_affine_range_sum","library_checker::datastructure::range_affine_range_sum","✅  AC  761ms",null,[[]]],[0,"range_kth_smallest","library_checker::datastructure","",null,null],[5,"range_kth_smallest","library_checker::datastructure::range_kth_smallest","✅  AC  430ms",null,[[]]],[0,"staticrmq","library_checker::datastructure","",null,null],[5,"staticrmq_disjoint_sparse_table","library_checker::datastructure::staticrmq","✅  AC  154ms",null,[[]]],[5,"staticrmq_segment_tree","","✅  AC  141ms",null,[[]]],[0,"unionfind","library_checker::datastructure","",null,null],[5,"unionfind","library_checker::datastructure::unionfind","✅  AC  23ms",null,[[]]],[0,"vertex_add_path_sum","library_checker::datastructure","",null,null],[5,"vertex_add_path_sum","library_checker::datastructure::vertex_add_path_sum","✅  AC  489ms",null,[[]]],[0,"vertex_add_subtree_sum","library_checker::datastructure","",null,null],[5,"vertex_add_subtree_sum","library_checker::datastructure::vertex_add_subtree_sum","✅  AC  182ms",null,[[]]],[0,"vertex_set_path_composite","library_checker::datastructure","",null,null],[5,"vertex_set_path_composite","library_checker::datastructure::vertex_set_path_composite","✅  AC  300ms",null,[[]]],[0,"graph","library_checker","",null,null],[0,"bipartitematching","library_checker::graph","",null,null],[5,"bipartitematching","library_checker::graph::bipartitematching","✅  AC  193ms",null,[[]]],[0,"directedmst","library_checker::graph","",null,null],[5,"directedmst","library_checker::graph::directedmst","✅  AC  115ms",null,[[]]],[0,"lca","library_checker::graph","",null,null],[5,"lca_euler_tour","library_checker::graph::lca","✅  AC  383ms",null,[[]]],[5,"lca_hld","","✅  AC  389ms",null,[[]]],[0,"scc","library_checker::graph","",null,null],[5,"scc","library_checker::graph::scc","✅  AC  234ms",null,[[]]],[0,"math","library_checker","",null,null],[0,"convolution_mod","library_checker::math","",null,null],[5,"convolution_mod","library_checker::math::convolution_mod","✅  AC  362ms",null,[[]]],[0,"convolution_mod_1000000007","library_checker::math","",null,null],[5,"convolution_mod_1000000007","library_checker::math::convolution_mod_1000000007","✅  AC  1644ms",null,[[]]],[0,"enumerate_primes","library_checker::math","",null,null],[5,"enumerate_primes","library_checker::math::enumerate_primes","✅  AC  2294ms",null,[[]]],[0,"exp_of_formal_power_series","library_checker::math","",null,null],[5,"exp_of_formal_power_series","library_checker::math::exp_of_formal_power_series","✅  AC  2101ms",null,[[]]],[0,"factorize","library_checker::math","",null,null],[5,"factorize","library_checker::math::factorize","✅  AC  2541ms",null,[[]]],[0,"inv_of_formal_power_series","library_checker::math","",null,null],[5,"inv_of_formal_power_series","library_checker::math::inv_of_formal_power_series","✅  AC  580ms",null,[[]]],[0,"log_of_formal_power_series","library_checker::math","",null,null],[5,"log_of_formal_power_series","library_checker::math::log_of_formal_power_series","✅  AC  1073ms",null,[[]]],[0,"pow_of_formal_power_series","library_checker::math","",null,null],[5,"pow_of_formal_power_series","library_checker::math::pow_of_formal_power_series","✅  AC  3161ms",null,[[]]],[0,"sqrt_mod","library_checker::math","",null,null],[5,"sqrt_mod","library_checker::math::sqrt_mod","✅  AC  138ms",null,[[]]],[0,"sqrt_of_formal_power_series","library_checker::math","",null,null],[5,"sqrt_of_formal_power_series","library_checker::math::sqrt_of_formal_power_series","✅  AC  1517ms",null,[[]]],[0,"sum_of_floor_of_linear","library_checker::math","",null,null],[5,"sum_of_floor_of_linear","library_checker::math::sum_of_floor_of_linear","✅  AC  77ms",null,[[]]],[0,"two_sat","library_checker::math","",null,null],[5,"two_sat","library_checker::math::two_sat","✅  AC  280ms",null,[[]]],[0,"sample","library_checker","",null,null],[0,"aplusb","library_checker::sample","",null,null],[5,"aplusb","library_checker::sample::aplusb","✅  AC  0ms",null,[[]]],[0,"many_aplusb","library_checker::sample","",null,null],[5,"many_aplusb","library_checker::sample::many_aplusb","✅  AC  214ms",null,[[]]],[0,"string","library_checker","",null,null],[0,"number_of_substrings","library_checker::string","",null,null],[5,"number_of_substrings","library_checker::string::number_of_substrings","✅  AC  951ms",null,[[]]],[0,"suffixarray","library_checker::string","",null,null],[5,"suffixarray","library_checker::string::suffixarray","✅  AC  1003ms",null,[[]]],[0,"zalgorithm","library_checker::string","",null,null],[5,"zalgorithm","library_checker::string::zalgorithm","✅  AC  31ms",null,[[]]]],"p":[],"a":{"verify":[2,3,5,7,9,11,13,14,16,18,20,22,25,27,29,30,32,35,37,39,41,43,45,47,49,51,53,55,57,60,62,65,67,69]}}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);