var searchIndex = JSON.parse('{\
"competitive":{"doc":"github","i":[[0,"algebra","competitive","algebra",null,null],[3,"MaxOperation","competitive::algebra","binary operation to select larger element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"FirstOperation","","retain the first element",null,null],[3,"LastOperation","","retain the last element",null,null],[3,"AdditiveOperation","","$+$",null,null],[3,"MultiplicativeOperation","","$\\\\times$",null,null],[3,"LinearOperation","","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"BitAndOperation","","&",null,null],[3,"BitOrOperation","","|",null,null],[3,"MonoidalOperation","","",null,null],[3,"GroupOperation","","",null,null],[3,"AssocoativeOperator","","",null,null],[3,"AbsorbedAssocoativeOperator","","",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"CountingOperation","","",null,null],[3,"ReverseOperation","","",null,null],[11,"new","","",0,[[]]],[11,"new","","",1,[[]]],[11,"new","","",2,[[]]],[11,"new","","",3,[[]]],[11,"new","","",4,[[]]],[11,"new","","",5,[[]]],[11,"new","","",6,[[]]],[11,"new","","",7,[[]]],[11,"new","","",8,[[]]],[11,"new","","",9,[[]]],[11,"new","","",10,[[]]],[11,"new","","",11,[[]]],[11,"new","","",12,[[]]],[11,"new","","",13,[[]]],[11,"new","","",14,[[]]],[8,"Magma","","binary operaion: $T \\\\circ T \\\\to T$",null,null],[16,"T","","type of operands: $T$",15,null],[10,"operate","","binary operaion: $\\\\circ$",15,[[]]],[11,"reverse_operate","","",15,[[]]],[8,"Associative","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c…",null,null],[8,"SemiGroup","","associative binary operation",null,null],[8,"Unital","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e =…",null,null],[10,"unit","","identity element: $e$",16,[[]]],[8,"Monoid","","associative binary operation and an identity element",null,null],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",17,[[]]],[8,"Invertible","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b…",null,null],[10,"inverse","","$a$ where $a \\\\circ x = e$",18,[[]]],[8,"RightInvertibleMagma","","short cut of right inverse binary operation",null,null],[10,"rinv_operation","","right inverse binary operation: $\\\\cdot \\\\circ (\\\\cdot^{-1})$",19,[[]]],[8,"Group","","associative binary operation and an identity element and…",null,null],[8,"Commutative","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$",null,null],[8,"AbelianMonoid","","commutative monoid",null,null],[8,"AbelianGroup","","commutative group",null,null],[8,"Idempotent","","$\\\\forall a \\\\in T, a \\\\circ a = a$",null,null],[8,"IdempotentMonoid","","idempotent monoid",null,null],[8,"MinimumBounded","","",null,null],[10,"minimum","","",20,[[]]],[8,"MaximumBounded","","",null,null],[10,"maximum","","",21,[[]]],[8,"AdditiveIdentity","","",null,null],[10,"zero","","",22,[[]]],[8,"MultiplicativeIdentity","","",null,null],[10,"one","","",23,[[]]],[8,"BitAndIdentity","","",null,null],[10,"all_one","","",24,[[]]],[8,"BitOrIdentity","","",null,null],[10,"all_zero","","",25,[[]]],[0,"algorithm","competitive","algorithm",null,null],[3,"Compress","competitive::algorithm","",null,null],[3,"CHTLine","","",null,null],[3,"ConvexHullTrick","","",null,null],[5,"binary_search","","",null,[[["fn",8],["bisect",8]],["bisect",8]]],[5,"lower_bound","","",null,[[["ord",8],["bisect",8]]]],[5,"upper_bound","","",null,[[["ord",8],["bisect",8]]]],[5,"ternary_search","","",null,[[["fn",8],["trisect",8]],["trisect",8]]],[5,"slide_minimum","","",null,[[["vec",3]],["vec",3]]],[5,"zeta_transform_for_subset","","",null,[[["monoid",8]]]],[5,"mobius_transform_for_subset","","",null,[[["group",8]]]],[5,"zeta_transform_for_superset","","",null,[[["monoid",8]]]],[5,"mobius_transform_for_superset","","",null,[[["group",8]]]],[5,"zeta_transform_for_divisor","","",null,[[["monoid",8],["iterator",8]]]],[5,"mobius_transform_for_divisor","","",null,[[["group",8],["iterator",8]]]],[5,"zeta_transform_for_multiple","","",null,[[["monoid",8],["iterator",8]]]],[5,"mobius_transform_for_multiple","","",null,[[["group",8],["iterator",8]]]],[11,"get","","",26,[[]]],[11,"len","","",26,[[]]],[11,"new","","",27,[[]]],[11,"value","","",27,[[]]],[11,"check","","",27,[[]]],[11,"new","","",28,[[]]],[11,"add_line","","k-th add_line(a_k, b_k): a_k >= a_{k+1}",28,[[]]],[11,"query","","",28,[[]]],[8,"MoSolver","","",null,null],[16,"Answer","","",29,null],[10,"insert","","",29,[[]]],[10,"remove","","",29,[[]]],[10,"answer","","",29,[[]]],[11,"mo_solve","","",29,[[]]],[8,"Bisect","","binary search helper",null,null],[10,"halve","","return between two elements",30,[[]]],[10,"section_end","","the end condition of binary search",30,[[]]],[8,"Trisect","","",null,null],[10,"next","","",31,[[]]],[10,"section_end","","",31,[[]]],[0,"data_structure","competitive","data structures",null,null],[3,"IntersectionAutomaton","competitive::data_structure","",null,null],[3,"UnionAutomaton","","",null,null],[3,"ProductAutomaton","","",null,null],[3,"LessThanAutomaton","","",null,null],[3,"GreaterThanAutomaton","","",null,null],[3,"ContainAutomaton","","",null,null],[3,"ContainCounterAutomaton","","",null,null],[3,"AlwaysAcceptingAutomaton","","",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"BinaryIndexedTree2D","","",null,null],[3,"BitSet","","",null,null],[3,"DisjointSparseTable","","",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"SegmentTree","","",null,null],[3,"DequeAggregation","","",null,null],[3,"QueueAggregation","","",null,null],[3,"UnionFind","","",null,null],[3,"WeightedUnionFind","","",null,null],[5,"automaton_dp","","",null,[[]]],[11,"new","","",32,[[]]],[11,"new","","",33,[[]]],[11,"new","","",34,[[]]],[11,"new","","",35,[[]]],[11,"accumulate0","","fold [0, k)",35,[[]]],[11,"accumulate","","fold [0, k]",35,[[]]],[11,"update","","",35,[[]]],[11,"fold","","",35,[[]]],[11,"get","","",35,[[]]],[11,"set","","",35,[[]]],[11,"lower_bound","","",35,[[]]],[11,"new","","",36,[[]]],[11,"accumulate0","","fold [0, i) x [0, j)",36,[[]]],[11,"accumulate","","fold [0, i] x [0, j]",36,[[]]],[11,"update","","",36,[[]]],[11,"fold","","0-indexed [i1, i2) x [j1, j2)",36,[[]]],[11,"get","","",36,[[]]],[11,"set","","",36,[[]]],[11,"new","","",37,[[]]],[11,"ones","","",37,[[]]],[11,"get","","",37,[[]]],[11,"set","","",37,[[]]],[11,"count_ones","","",37,[[]]],[11,"count_zeros","","",37,[[]]],[11,"shl_bitor_assign","","",37,[[]]],[11,"shr_bitor_assign","","",37,[[]]],[11,"new","","",38,[[["vec",3]]]],[11,"len","","",38,[[]]],[11,"fold_close","","",38,[[]]],[11,"fold","","",38,[[]]],[11,"new","","",39,[[]]],[11,"from_vec","","",39,[[["vec",3]]]],[11,"update","","",39,[[]]],[11,"fold","","",39,[[]]],[11,"get","","",39,[[]]],[11,"fold_all","","",39,[[]]],[11,"new","","",40,[[]]],[11,"from_vec","","",40,[[["vec",3]]]],[11,"set","","",40,[[]]],[11,"update","","",40,[[]]],[11,"get","","",40,[[]]],[11,"fold","","",40,[[]]],[11,"fold_all","","",40,[[]]],[11,"lower_bound_all","","left most index [0, r) that satisfies monotonic condition",40,[[["fn",8]]]],[11,"lower_bound","","left most index [l, r) that satisfies monotonic condition",40,[[["fn",8]]]],[11,"new","","",41,[[]]],[11,"len","","",41,[[]]],[11,"is_empty","","",41,[[]]],[11,"fold_all","","",41,[[]]],[11,"last","","",41,[[],["option",4]]],[11,"push","","",41,[[]]],[11,"pop","","",41,[[],["option",4]]],[11,"new","","",42,[[]]],[11,"len","","",42,[[]]],[11,"is_empty","","",42,[[]]],[11,"fold_all","","",42,[[]]],[11,"front","","",42,[[],["option",4]]],[11,"back","","",42,[[],["option",4]]],[11,"push_front","","",42,[[]]],[11,"push_back","","",42,[[]]],[11,"pop_front","","",42,[[],["option",4]]],[11,"pop_back","","",42,[[],["option",4]]],[11,"reverse","","",42,[[]]],[11,"new","","",43,[[]]],[11,"find","","",43,[[]]],[11,"unite","","",43,[[]]],[11,"unite_light","","",43,[[]]],[11,"size","","",43,[[]]],[11,"same","","",43,[[]]],[11,"members","","",43,[[],["vec",3]]],[11,"roots","","",43,[[],["vec",3]]],[11,"all_group_members","","",43,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",44,[[]]],[11,"find","","",44,[[]]],[11,"get_weight","","",44,[[]]],[11,"unite","","",44,[[]]],[11,"size","","",44,[[]]],[11,"is_same","","",44,[[]]],[11,"get_difference","","",44,[[],["option",4]]],[11,"members","","",44,[[],["vec",3]]],[11,"roots","","",44,[[],["vec",3]]],[11,"all_group_members","","",44,[[],[["vec",3],["hashmap",3]]]],[8,"Automaton","","",null,null],[16,"Alphabet","","",45,null],[16,"State","","",45,null],[10,"initial","","",45,[[]]],[10,"next","","",45,[[],["option",4]]],[10,"accept","","",45,[[]]],[0,"geometry","competitive","",null,null],[3,"Circle","competitive::geometry","",null,null],[3,"Line","","",null,null],[3,"LineSegment","","",null,null],[3,"Real","","",null,null],[12,"0","","",46,null],[4,"CCW","","",null,null],[13,"OnlineFront","","a--b--c",47,null],[13,"Clockwise","","a--b-vc",47,null],[13,"OnSegment","","a--c--b",47,null],[13,"CounterClockwise","","a--b-^c",47,null],[13,"OnlineBack","","c--a--b",47,null],[5,"closest_pair","","",null,[[["vec",3],["point",6]]]],[5,"convex_hull","","",null,[[["vec",3],["point",6]],[["vec",3],["point",6]]]],[5,"convex_diameter","","",null,[[["vec",3],["point",6]]]],[5,"ccw","","",null,[[["point",6]],["ccw",4]]],[11,"new","","",48,[[["point",6]]]],[11,"cross_circle","","",48,[[],["option",4]]],[11,"contains_point","","",48,[[["point",6]]]],[11,"new","","",49,[[["point",6]]]],[11,"dir","","",49,[[],["point",6]]],[11,"ccw","","",49,[[["point",6]],["ccw",4]]],[11,"projection","","",49,[[["point",6]],["point",6]]],[11,"reflection","","",49,[[["point",6]],["point",6]]],[11,"distance_point","","",49,[[["point",6]]]],[11,"is_parallel","","",49,[[]]],[11,"is_orthogonal","","",49,[[]]],[11,"new","","",50,[[["point",6]]]],[11,"dir","","",50,[[],["point",6]]],[11,"ccw","","",50,[[["point",6]],["ccw",4]]],[11,"projection","","",50,[[["point",6]],["point",6]]],[11,"reflection","","",50,[[["point",6]],["point",6]]],[11,"is_parallel","","",50,[[]]],[11,"is_orthogonal","","",50,[[]]],[11,"intersect","","",50,[[]]],[11,"intersect_point","","",50,[[["point",6]]]],[11,"cross_point","","",50,[[],[["option",4],["point",6]]]],[11,"distance_point","","",50,[[["point",6]]]],[11,"distance","","",50,[[]]],[6,"Point","","",null,null],[17,"EPS","","",null,null],[0,"graph","competitive","graph structures and algorithms",null,null],[3,"Adjacent","competitive::graph","",null,null],[12,"id","","",51,null],[12,"to","","",51,null],[3,"Graph","","",null,null],[12,"vsize","","",52,null],[12,"esize","","",52,null],[12,"graph","","",52,null],[3,"GraphScanner","","",null,null],[3,"GraphRec","","",null,null],[12,"n","","",53,null],[12,"visited","","",53,null],[12,"cost","","",53,null],[3,"GraphEidCache","","",null,null],[3,"GridGraph","","",null,null],[3,"Adjacent4","","",null,null],[3,"Adjacent8","","",null,null],[3,"RevGraph","","",null,null],[12,"vsize","","",54,null],[12,"esize","","",54,null],[12,"graph","","",54,null],[12,"rgraph","","",54,null],[3,"RevGraphScanner","","",null,null],[3,"LowLink","","",null,null],[12,"ord","","",55,null],[12,"low","","",55,null],[12,"articulation","","",55,null],[12,"bridge","","",55,null],[3,"RevEdge","","",null,null],[12,"to","","",56,null],[12,"rev","","",56,null],[12,"cap","","",56,null],[3,"FordFulkerson","","",null,null],[3,"Dinic","","",null,null],[12,"graph","","",57,null],[3,"RevCEdge","","",null,null],[12,"to","","",58,null],[12,"rev","","",58,null],[12,"cap","","",58,null],[12,"cost","","",58,null],[3,"PrimalDual","","",null,null],[3,"StronglyConnectedComponent","","",null,null],[3,"TwoSatisfiability","","",null,null],[11,"new","","",51,[[],["adjacent",3]]],[11,"new","","",52,[[],["graph",3]]],[11,"add_edge","","",52,[[]]],[11,"add_undirected_edge","","",52,[[]]],[11,"vertices","","",52,[[],["range",3]]],[11,"adjacency","","",52,[[],["vec",3]]],[11,"eid_cache","","",52,[[],["grapheidcache",3]]],[11,"new","","",59,[[]]],[11,"new","","",53,[[]]],[11,"dfs","","",53,[[["graph",3]]]],[11,"edge","","",60,[[]]],[11,"new","","",61,[[]]],[11,"adjacency4","","",61,[[],["adjacent4",3]]],[11,"adjacency8","","",61,[[],["adjacent8",3]]],[11,"new","","",54,[[],["revgraph",3]]],[11,"add_edge","","",54,[[]]],[11,"vertices","","",54,[[],["range",3]]],[11,"adjacency","","",54,[[],["vec",3]]],[11,"radjacency","","",54,[[],["vec",3]]],[11,"new","","",62,[[]]],[11,"new","","",55,[[["graph",3]]]],[11,"new","","",56,[[]]],[11,"new","","",63,[[]]],[11,"add_edge","","",63,[[]]],[11,"dfs","","",63,[[]]],[11,"maximum_flow","","",63,[[]]],[11,"new","","",57,[[]]],[11,"add_edge","","",57,[[]]],[11,"maximum_flow","","",57,[[]]],[11,"new","","",58,[[]]],[11,"new","","",64,[[]]],[11,"add_edge","","",64,[[]]],[11,"minimum_cost_flow","","",64,[[],["option",4]]],[11,"minimum_spanning_tree","","",52,[[["fn",8]],["vec",3]]],[11,"chu_liu_edmond","","minimum_spanning_arborescence: O(|E||V|)",54,[[["group",8]],["option",4]]],[11,"minimum_spanning_arborescence","","tarjan",52,[[["group",8],["fn",8]],["option",4]]],[11,"dijkstra","","",52,[[["monoid",8],["fn",8]],[["vec",3],["option",4]]]],[11,"bellman_ford","","",52,[[["monoid",8],["fn",8]]]],[11,"warshall_floyd","","",52,[[["monoid",8],["fn",8]],[["vec",3],["vec",3]]]],[11,"new","","",65,[[["revgraph",3]]]],[11,"gen_cgraph","","",65,[[["revgraph",3]],["revgraph",3]]],[11,"components","","",65,[[],[["vec",3],["vec",3]]]],[11,"has_loop","","",65,[[]]],[11,"size","","",65,[[]]],[11,"add_inner","","",66,[[["revgraph",3]]]],[11,"add_or","","",66,[[["revgraph",3]]]],[11,"add_nand","","",66,[[["revgraph",3]]]],[11,"set_true","","",66,[[["revgraph",3]]]],[11,"set_false","","",66,[[["revgraph",3]]]],[11,"build","","",66,[[["revgraph",3]],[["option",4],["vec",3]]]],[11,"topological_sort","","",52,[[],["vec",3]]],[0,"math","competitive","mathematical datas",null,null],[3,"MemorizedFactorial","competitive::math","",null,null],[12,"fact","","",67,null],[12,"inv_fact","","",67,null],[3,"SmallModMemorizedFactorial","","",null,null],[3,"Matrix","","",null,null],[12,"shape","","",68,null],[12,"data","","",68,null],[3,"BabyStepGiantStep","","",null,null],[3,"Polynomial","","",null,null],[12,"0","","",69,null],[12,"1","","",69,null],[3,"PrimeTable","","",null,null],[3,"EulerPhiTable","","",null,null],[5,"fft_rec","","",null,[[]]],[5,"fft","","",null,[[["complex",3],["vec",3]],[["complex",3],["vec",3]]]],[5,"gcd","","",null,[[]]],[5,"gcd_binary","","",null,[[]]],[5,"lcm","","",null,[[]]],[5,"extgcd","","",null,[[]]],[5,"extgcd_loop","","",null,[[]]],[5,"extgcd_binary","","",null,[[]]],[5,"modinv","","",null,[[]]],[5,"modinv_loop","","",null,[[]]],[5,"modinv_extgcd_binary","","0 < a < p, gcd(a, p) == 1, p is prime > 2",null,[[]]],[5,"lagrange_interpolation","","",null,[[["modulus",8],["mint",3]],[["modulus",8],["mint",3]]]],[5,"binary_exponentiation","","",null,[[["mulassign",8],["clone",8]],[["mulassign",8],["clone",8]]]],[5,"poly_add","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_sub","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_mul","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_div","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_mod","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_assign","","",null,[[["polynomial",3]]]],[5,"prime_factors","","",null,[[],["vec",3]]],[5,"divisors","","",null,[[],["vec",3]]],[5,"primes","","",null,[[],["vec",3]]],[5,"pow","","",null,[[]]],[5,"miller_rabin","","",null,[[]]],[5,"find_factor","","",null,[[]]],[5,"find_factor2","","",null,[[]]],[5,"prime_factors_rho","","",null,[[],["vec",3]]],[5,"euler_phi","","",null,[[]]],[5,"moebius","","g(d) = Sigma mu(d) * f(n/d)",null,[[],["hashmap",3]]],[5,"segmented_sieve_primes","","",null,[[],["vec",3]]],[11,"new","","",67,[[]]],[11,"combination","","",67,[[],["mint",3]]],[11,"permutation","","",67,[[],["mint",3]]],[11,"homogeneous_product","","",67,[[],["mint",3]]],[11,"inv","","",67,[[],["mint",3]]],[11,"new","","",70,[[]]],[11,"factorial","","n! = a * p^e",70,[[]]],[11,"combination","","",70,[[],["mint",3]]],[11,"lagrange_interpolation","","Lagrange interpolation with (i, f(i)) (0 <= i <= n)",67,[[["mint",3]],["mint",3]]],[11,"new","","",68,[[]]],[11,"from_vec","","",68,[[["vec",3],["vec",3]]]],[11,"zeros","","",68,[[]]],[11,"eye","","",68,[[]]],[11,"pow","","",68,[[]]],[11,"gauss_jordan","","",68,[[["vec",3]],[["vec",3],["option",4]]]],[11,"new","","",71,[[]]],[11,"solve","","",71,[[],["option",4]]],[11,"len","","",69,[[]]],[11,"new","","",72,[[]]],[11,"is_prime","","",72,[[]]],[11,"prime_factors","","",72,[[],["vec",3]]],[11,"new","","",73,[[]]],[11,"get","","",73,[[]]],[0,"poly_mod_poly","","",null,null],[5,"poly_mulmod","competitive::math::poly_mod_poly","",null,[[["poly",6]],["poly",6]]],[5,"poly_pow","","",null,[[["poly",6]],["poly",6]]],[6,"Poly","","",null,null],[0,"num","competitive","",null,null],[3,"Complex","competitive::num","",null,null],[12,"re","","",74,null],[12,"im","","",74,null],[3,"MInt","","",null,null],[3,"QuadDouble","","ref: https://na-inet.jp/na/qd_ja.pdf",null,null],[12,"0","","",75,null],[11,"new","","",74,[[]]],[11,"transpose","","",74,[[]]],[11,"conjugate","","",74,[[]]],[11,"dot","","",74,[[]]],[11,"cross","","",74,[[]]],[11,"norm","","",74,[[]]],[11,"polar","","",74,[[]]],[11,"abs","","",74,[[]]],[11,"unit","","",74,[[]]],[11,"angle","","",74,[[]]],[11,"new","","",76,[[]]],[11,"new_unchecked","","",76,[[]]],[11,"inner","","",76,[[]]],[11,"one","","",76,[[]]],[11,"zero","","",76,[[]]],[11,"get_mod","","",76,[[]]],[11,"pow","","",76,[[]]],[11,"inv","","only prime modulus",76,[[]]],[11,"new","","",75,[[]]],[11,"renormalize","","",75,[[]]],[11,"is_zero","","",75,[[]]],[11,"is_sign_negative","","",75,[[]]],[11,"sqrt","","",75,[[]]],[11,"abs","","",75,[[]]],[11,"div2","","",75,[[]]],[0,"modulus","","",null,null],[3,"Modulo1000000007","competitive::num::modulus","",null,null],[3,"Modulo1000000009","","",null,null],[3,"Modulo998244353","","",null,null],[3,"DynModulo","","",null,null],[5,"set_dyn_modulus","","",null,[[]]],[8,"Modulus","competitive::num","",null,null],[10,"get_modulus","","",77,[[]]],[11,"modulo","","",77,[[]]],[0,"string","competitive","string algorithems",null,null],[3,"KnuthMorrisPratt","competitive::string","",null,null],[3,"MultipleRollingHash","","",null,null],[3,"RollingHash","","",null,null],[3,"SuffixArray","","",null,null],[3,"Zarray","","",null,null],[11,"new","","",78,[[["vec",3]]]],[11,"search_all","","",78,[[["vec",3]],["vec",3]]],[18,"MOD","","",79,null],[11,"mersenne_mod","","",79,[[]]],[11,"mersenne_mul","","",79,[[]]],[11,"mersenne_mul_mod","","",79,[[]]],[11,"new","","",79,[[["vec",3]]]],[11,"hash_once","","",79,[[["vec",3]]]],[11,"find","","S [l, r)",79,[[]]],[11,"concat","","",79,[[]]],[11,"new","","",80,[[["vec",3]]]],[11,"new_rand","","",80,[[["vec",3]]]],[11,"find","","",80,[[],["vec",3]]],[11,"concat","","",80,[[["vec",3]],["vec",3]]],[11,"new","","",81,[[["vec",3]]]],[11,"len","","",81,[[]]],[11,"longest_common_prefix_array","","",81,[[],["vec",3]]],[11,"new","","",82,[[]]],[11,"search","","",82,[[["eq",8],["vec",3]],["vec",3]]],[0,"tools","competitive","",null,null],[3,"Counter","competitive::tools","",null,null],[3,"SimuratedAnnealing","","",null,null],[12,"iter_count","","",83,null],[12,"now","","",83,null],[12,"time","","",83,null],[12,"temperture","","",83,null],[12,"log_table","","",83,null],[12,"rand","","",83,null],[3,"Xorshift","","",null,null],[3,"Scanner","","",null,null],[3,"TotalOrd","","implement Ord by PartialOrd",null,null],[12,"0","","",84,null],[5,"read_stdin_all","","",null,[[],["string",3]]],[5,"read_all","","",null,[[],["string",3]]],[11,"new","","",85,[[]]],[11,"get","","",85,[[]]],[11,"add","","",85,[[]]],[11,"keys","","",85,[[],["keys",3]]],[11,"values","","",85,[[],["values",3]]],[11,"iter","","",85,[[],["iter",3]]],[18,"IS_MAXIMIZE","","",83,null],[18,"START_TEMP","","",83,null],[18,"END_TEMP","","",83,null],[18,"TEMP_RATIO","","",83,null],[18,"TIME_LIMIT","","",83,null],[18,"LOG_TABLE_SIZE","","",83,null],[18,"UPDATE_INTERVAL","","",83,null],[18,"SEED","","",83,null],[11,"new","","",83,[[]]],[11,"is_accepted","","",83,[[]]],[11,"is_end","","",83,[[]]],[11,"new","","",86,[[]]],[11,"time","","",86,[[]]],[11,"next","","",86,[[]]],[11,"rand","","",86,[[]]],[11,"rands","","",86,[[],["vec",3]]],[11,"randf","","",86,[[]]],[11,"gen_bool","","",86,[[]]],[11,"iter","","",87,[[],[["scanneriter",3],["iterscan",8]]]],[11,"new","","",87,[[]]],[11,"scan","","",87,[[]]],[11,"mscan","","",87,[[["markediterscan",8]]]],[11,"scan_vec","","",87,[[],["vec",3]]],[11,"scan_chars","","",87,[[],["vec",3]]],[8,"IterScan","","",null,null],[16,"Output","","",88,null],[10,"scan","","",88,[[],["option",4]]],[8,"MarkedIterScan","","",null,null],[16,"Output","","",89,null],[10,"mscan","","",89,[[],["option",4]]],[0,"tree","competitive","tree algorithems",null,null],[3,"EulerTourForEdge","competitive::tree","",null,null],[12,"eidx","","",90,null],[12,"par","","",90,null],[3,"EulerTourForVertex","","",null,null],[12,"vidx","","",91,null],[3,"EulerTourForRichVertex","","",null,null],[3,"LowestCommonAncestor","","",null,null],[3,"LCAMonoid","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",92,null],[12,"vidx","","",92,null],[3,"ReRooting","","dynamic programming on all-rooted trees",null,null],[12,"n","","vertex size",93,null],[12,"monoid","","merge subtree",93,null],[12,"dp","","dp[v]: result of v-rooted tree",93,null],[12,"ep","","ep[e]: result of e-subtree, if e >= n then…",93,null],[12,"rooting","","rooting(data, vid, (Optional)eid): add root node(vid),…",93,null],[3,"TreeRec","","",null,null],[12,"n","","",94,null],[11,"tree_depth","competitive::graph","",52,[[],["vec",3]]],[11,"weighted_tree_depth","","",52,[[["monoid",8],["fn",8]],["vec",3]]],[11,"tree_size","","",52,[[],["vec",3]]],[11,"new","competitive::tree","",95,[[["graph",3]]]],[11,"ancestor","","",95,[[]]],[11,"new","","",90,[[]]],[11,"len","","",90,[[]]],[11,"edge_tour","","",90,[[["graph",3]]]],[11,"new","","",91,[[]]],[11,"len","","",91,[[]]],[11,"subtree_vertex_tour","","",91,[[["graph",3]]]],[11,"path_vertex_tour","","",91,[[["graph",3]]]],[11,"subtree_query","","",91,[[["fnmut",8]]]],[11,"subtree_update","","",91,[[["fnmut",8]]]],[11,"path_query","","",91,[[["fnmut",8]]]],[11,"path_update","","",91,[[["fnmut",8]]]],[11,"new","","",96,[[]]],[11,"len","","",96,[[]]],[11,"vertex_tour","","",96,[[["graph",3]]]],[11,"query","","",96,[[["fnmut",8]]]],[11,"gen_lca","","",96,[[["graph",3]],["lowestcommonancestor",3]]],[11,"lca","","",97,[[]]],[11,"new","","",92,[[["graph",3]]]],[11,"lca","","",92,[[]]],[11,"update","","",92,[[["fnmut",8]]]],[11,"query","","",92,[[["fnmut",8]]]],[11,"query_noncom","","",92,[[["fnmut",8]]]],[11,"new","","",93,[[]]],[11,"rerooting","","",93,[[["graph",3]]]],[11,"new","","",94,[[]]],[11,"dfs","","",94,[[["graph",3]]]],[0,"impl_lcam","","",null,null],[0,"aizu_online_judge","competitive","Aizu Online Judge",null,null],[0,"dsl","competitive::aizu_online_judge","",null,null],[0,"dsl_2_d","competitive::aizu_online_judge::dsl","",null,null],[3,"LastOperation","competitive::aizu_online_judge::dsl::dsl_2_d","retain the last element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_d","","✅  AC  57ms",null,[[]]],[0,"dsl_2_e","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_e","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_e","","✅  AC  54ms",null,[[]]],[0,"dsl_2_f","competitive::aizu_online_judge::dsl","",null,null],[3,"LastOperation","competitive::aizu_online_judge::dsl::dsl_2_f","retain the last element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_f","","✅  AC  93ms",null,[[]]],[0,"dsl_2_g","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_g","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_g","","✅  AC  57ms",null,[[]]],[0,"dsl_2_h","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_h","$+$",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_h","","✅  AC  57ms",null,[[]]],[0,"dsl_2_i","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_i","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LastOperation","","retain the last element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_i","","✅  AC  92ms",null,[[]]],[0,"grl","competitive::aizu_online_judge","",null,null],[0,"grl_1_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_1_a","$+$",null,null],[3,"GraphScanner","","",null,null],[5,"grl_1_a","","✅  AC  115ms",null,[[]]],[0,"grl_1_b","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_1_b","$+$",null,null],[3,"GraphScanner","","",null,null],[5,"grl_1_b","","✅  AC  6ms",null,[[]]],[0,"grl_1_c","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_1_c","$+$",null,null],[3,"GraphScanner","","",null,null],[5,"grl_1_c","","✅  AC  5ms",null,[[]]],[0,"grl_2_a","competitive::aizu_online_judge::grl","",null,null],[3,"GraphScanner","competitive::aizu_online_judge::grl::grl_2_a","",null,null],[5,"grl_2_a","","✅  AC  29ms",null,[[]]],[0,"grl_2_b","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_2_b","$+$",null,null],[3,"GraphScanner","","",null,null],[5,"grl_2_b","","✅  AC  0ms",null,[[]]],[0,"grl_3_a","competitive::aizu_online_judge::grl","",null,null],[3,"GraphScanner","competitive::aizu_online_judge::grl::grl_3_a","",null,null],[3,"LowLink","","",null,null],[12,"ord","","",55,null],[12,"low","","",55,null],[12,"articulation","","",55,null],[12,"bridge","","",55,null],[5,"grl_3_a","","✅  AC  6ms",null,[[]]],[0,"grl_3_b","competitive::aizu_online_judge::grl","",null,null],[3,"GraphScanner","competitive::aizu_online_judge::grl::grl_3_b","",null,null],[3,"LowLink","","",null,null],[12,"ord","","",55,null],[12,"low","","",55,null],[12,"articulation","","",55,null],[12,"bridge","","",55,null],[5,"grl_3_b","","✅  AC  7ms",null,[[]]],[0,"grl_3_c","competitive::aizu_online_judge::grl","",null,null],[3,"RevGraphScanner","competitive::aizu_online_judge::grl::grl_3_c","",null,null],[3,"StronglyConnectedComponent","","",null,null],[5,"grl_3_c","","✅  AC  12ms",null,[[]]],[0,"grl_4_a","competitive::aizu_online_judge::grl","",null,null],[3,"GraphScanner","competitive::aizu_online_judge::grl::grl_4_a","",null,null],[5,"grl_4_a","","✅  AC  0ms",null,[[]]],[0,"grl_4_b","competitive::aizu_online_judge::grl","",null,null],[3,"GraphScanner","competitive::aizu_online_judge::grl::grl_4_b","",null,null],[5,"grl_4_b","","✅  AC  4ms",null,[[]]],[5,"judge_grl_4_b","","",null,[[]]],[0,"grl_5_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_5_a","$+$",null,null],[3,"GraphScanner","","",null,null],[5,"grl_5_a","","✅  AC  19ms",null,[[]]],[0,"grl_5_b","competitive::aizu_online_judge::grl","",null,null],[3,"MaxOperation","competitive::aizu_online_judge::grl::grl_5_b","binary operation to select larger element",null,null],[3,"GraphScanner","","",null,null],[3,"ReRooting","","dynamic programming on all-rooted trees",null,null],[12,"n","","vertex size",93,null],[12,"monoid","","merge subtree",93,null],[12,"dp","","dp[v]: result of v-rooted tree",93,null],[12,"ep","","ep[e]: result of e-subtree, if e >= n then…",93,null],[12,"rooting","","rooting(data, vid, (Optional)eid): add root node(vid),…",93,null],[5,"grl_5_b","","✅  AC  5ms",null,[[]]],[0,"grl_5_c","competitive::aizu_online_judge::grl","",null,null],[3,"Graph","competitive::aizu_online_judge::grl::grl_5_c","",null,null],[12,"vsize","","",52,null],[12,"esize","","",52,null],[12,"graph","","",52,null],[3,"EulerTourForRichVertex","","",null,null],[5,"grl_5_c","","✅  AC  88ms",null,[[]]],[0,"grl_5_d","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_5_d","$+$",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"Graph","","",null,null],[12,"vsize","","",52,null],[12,"esize","","",52,null],[12,"graph","","",52,null],[3,"EulerTourForEdge","","",null,null],[12,"eidx","","",90,null],[12,"par","","",90,null],[5,"grl_5_d","","✅  AC  60ms",null,[[]]],[0,"grl_5_e","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_5_e","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"Graph","","",null,null],[12,"vsize","","",52,null],[12,"esize","","",52,null],[12,"graph","","",52,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",92,null],[12,"vidx","","",92,null],[5,"grl_5_e","","✅  AC  193ms",null,[[]]],[0,"grl_6_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_6_a","$+$",null,null],[3,"Dinic","","",null,null],[12,"graph","","",57,null],[5,"grl_6_a","","✅  AC  0ms",null,[[]]],[0,"grl_6_b","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_6_b","$+$",null,null],[3,"PrimalDual","","",null,null],[5,"grl_6_b","","✅  AC  2ms",null,[[]]],[0,"grl_7_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_7_a","$+$",null,null],[3,"Dinic","","",null,null],[12,"graph","","",57,null],[5,"grl_7_a","","✅  AC  0ms",null,[[]]],[0,"itp1","competitive::aizu_online_judge","",null,null],[0,"itp1_1_a","competitive::aizu_online_judge::itp1","",null,null],[5,"itp1_1_a","competitive::aizu_online_judge::itp1::itp1_1_a","✅  AC  0ms",null,[[]]],[0,"library_checker","competitive","Library-Checker",null,null],[0,"datastructure","competitive::library_checker","",null,null],[0,"point_add_range_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::point_add_range_sum","$+$",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"SegmentTree","","",null,null],[5,"point_add_range_sum_binary_indexed_tree","","✅  AC  92ms",null,[[]]],[5,"point_add_range_sum_segment_tree","","✅  AC  156ms",null,[[]]],[0,"point_set_range_composite","competitive::library_checker::datastructure","",null,null],[3,"LinearOperation","competitive::library_checker::datastructure::point_set_range_composite","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"SegmentTree","","",null,null],[3,"Modulo998244353","","",null,null],[3,"MInt","","",null,null],[5,"point_set_range_composite","","✅  AC  226ms",null,[[]]],[0,"queue_operate_all_composite","competitive::library_checker::datastructure","",null,null],[3,"LinearOperation","competitive::library_checker::datastructure::queue_operate_all_composite","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"QueueAggregation","","",null,null],[3,"Modulo998244353","","",null,null],[3,"MInt","","",null,null],[5,"queue_operate_all_composite","","✅  AC  54ms",null,[[]]],[0,"range_affine_range_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::range_affine_range_sum","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LinearOperation","","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"Modulo998244353","","",null,null],[3,"MInt","","",null,null],[5,"range_affine_range_sum","","✅  AC  941ms",null,[[]]],[0,"staticrmq","competitive::library_checker::datastructure","",null,null],[3,"MinOperation","competitive::library_checker::datastructure::staticrmq","binary operation to select smaller element",null,null],[3,"DisjointSparseTable","","",null,null],[3,"SegmentTree","","",null,null],[5,"staticrmq_disjoint_sparse_table","","✅  AC  188ms",null,[[]]],[5,"staticrmq_segment_tree","","✅  AC  125ms",null,[[]]],[0,"unionfind","competitive::library_checker::datastructure","",null,null],[3,"UnionFind","competitive::library_checker::datastructure::unionfind","",null,null],[5,"unionfind","","✅  AC  18ms",null,[[]]],[0,"vertex_add_path_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::vertex_add_path_sum","$+$",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"GraphScanner","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",92,null],[12,"vidx","","",92,null],[5,"vertex_add_path_sum","","✅  AC  1112ms",null,[[]]],[0,"vertex_add_subtree_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::vertex_add_subtree_sum","$+$",null,null],[3,"SegmentTree","","",null,null],[3,"Graph","","",null,null],[12,"vsize","","",52,null],[12,"esize","","",52,null],[12,"graph","","",52,null],[3,"EulerTourForVertex","","",null,null],[12,"vidx","","",91,null],[5,"vertex_add_subtree_sum","","✅  AC  323ms",null,[[]]],[0,"vertex_set_path_composite","competitive::library_checker::datastructure","",null,null],[3,"LinearOperation","competitive::library_checker::datastructure::vertex_set_path_composite","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"ReverseOperation","","",null,null],[3,"SegmentTree","","",null,null],[3,"GraphScanner","","",null,null],[3,"Modulo998244353","","",null,null],[3,"MInt","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",92,null],[12,"vidx","","",92,null],[5,"vertex_set_path_composite","","✅  AC  232ms",null,[[]]],[0,"graph","competitive::library_checker","",null,null],[0,"bipartitematching","competitive::library_checker::graph","",null,null],[3,"Dinic","competitive::library_checker::graph::bipartitematching","",null,null],[12,"graph","","",57,null],[3,"RevEdge","","",null,null],[12,"to","","",56,null],[12,"rev","","",56,null],[12,"cap","","",56,null],[5,"bipartitematching","","✅  AC  464ms",null,[[]]],[0,"lca","competitive::library_checker::graph","",null,null],[3,"Graph","competitive::library_checker::graph::lca","",null,null],[12,"vsize","","",52,null],[12,"esize","","",52,null],[12,"graph","","",52,null],[3,"EulerTourForRichVertex","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",92,null],[12,"vidx","","",92,null],[5,"lca_euler_tour","","✅  AC  601ms",null,[[]]],[5,"lca_hld","","✅  AC  658ms",null,[[]]],[0,"scc","competitive::library_checker::graph","",null,null],[3,"RevGraphScanner","competitive::library_checker::graph::scc","",null,null],[3,"StronglyConnectedComponent","","",null,null],[5,"scc","","✅  AC  644ms",null,[[]]],[0,"math","competitive::library_checker","",null,null],[0,"enumerate_primes","competitive::library_checker::math","",null,null],[5,"segmented_sieve_primes","competitive::library_checker::math::enumerate_primes","",null,[[],["vec",3]]],[5,"enumerate_primes","","✅  AC  2037ms",null,[[]]],[0,"factorize","competitive::library_checker::math","",null,null],[5,"prime_factors_rho","competitive::library_checker::math::factorize","",null,[[],["vec",3]]],[5,"factorize","","✅  AC  839ms",null,[[]]],[0,"two_sat","competitive::library_checker::math","",null,null],[3,"RevGraph","competitive::library_checker::math::two_sat","",null,null],[12,"vsize","","",54,null],[12,"esize","","",54,null],[12,"graph","","",54,null],[12,"rgraph","","",54,null],[3,"TwoSatisfiability","","",null,null],[5,"two_sat","","✅  AC  1206ms",null,[[]]],[0,"sample","competitive::library_checker","",null,null],[0,"aplusb","competitive::library_checker::sample","",null,null],[5,"aplusb","competitive::library_checker::sample::aplusb","✅  AC  0ms",null,[[]]],[0,"many_aplusb","competitive::library_checker::sample","",null,null],[5,"many_aplusb","competitive::library_checker::sample::many_aplusb","✅  AC  201ms",null,[[]]],[0,"string","competitive::library_checker","",null,null],[0,"suffixarray","competitive::library_checker::string","",null,null],[3,"SuffixArray","competitive::library_checker::string::suffixarray","",null,null],[5,"suffixarray","","✅  AC  922ms",null,[[]]],[0,"zalgorithm","competitive::library_checker::string","",null,null],[3,"Zarray","competitive::library_checker::string::zalgorithm","",null,null],[5,"zalgorithm","","✅  AC  32ms",null,[[]]],[14,"impl_additive_identity","competitive","",null,null],[14,"impl_multiplicative_identity","","",null,null],[14,"impl_bitand_identity","","",null,null],[14,"impl_bitor_identity","","",null,null],[14,"read_value","","",null,null],[14,"input_inner","","",null,null],[14,"input","","",null,null],[14,"comprehension","","",null,null],[14,"min","","",null,null],[14,"chmin","","",null,null],[14,"max","","",null,null],[14,"chmax","","",null,null],[14,"scan_value","","",null,null],[14,"scan","","",null,null],[11,"from","competitive::algebra","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","competitive::algorithm","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","competitive::data_structure","",99,[[]]],[11,"into","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","competitive::geometry","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","competitive::graph","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"into_iter","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"into_iter","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","competitive::math","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","competitive::num","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"to_string","","",76,[[],["string",3]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"to_string","","",75,[[],["string",3]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","competitive::num::modulus","",106,[[]]],[11,"into","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","competitive::string","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","competitive::tools","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","competitive::tree","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"operate","competitive::algebra","",0,[[]]],[11,"operate","","",1,[[]]],[11,"operate","","",2,[[]]],[11,"operate","","",3,[[]]],[11,"operate","","",4,[[]]],[11,"operate","","",5,[[]]],[11,"operate","","",6,[[]]],[11,"operate","","",7,[[]]],[11,"operate","","",8,[[]]],[11,"operate","","",9,[[]]],[11,"operate","","",10,[[]]],[11,"operate","","",98,[[]]],[11,"operate","","",11,[[]]],[11,"operate","","",12,[[]]],[11,"operate","","",13,[[]]],[11,"operate","","",14,[[]]],[11,"operate","competitive::tree","",95,[[]]],[11,"unit","competitive::algebra","",0,[[]]],[11,"unit","","",1,[[]]],[11,"unit","","",2,[[]]],[11,"unit","","",3,[[]]],[11,"unit","","",4,[[]]],[11,"unit","","",5,[[]]],[11,"unit","","",6,[[]]],[11,"unit","","",7,[[]]],[11,"unit","","",8,[[]]],[11,"unit","","",9,[[]]],[11,"unit","","",10,[[]]],[11,"unit","","",11,[[]]],[11,"unit","","",12,[[]]],[11,"unit","","",13,[[]]],[11,"unit","","",14,[[]]],[11,"inverse","","",4,[[]]],[11,"inverse","","",5,[[]]],[11,"inverse","","",10,[[]]],[11,"inverse","","",12,[[]]],[11,"inverse","","",14,[[]]],[11,"rinv_operation","","",4,[[]]],[11,"rinv_operation","","",5,[[]]],[11,"zero","competitive::num","",76,[[]]],[11,"one","","",76,[[]]],[11,"initial","competitive::data_structure","",99,[[]]],[11,"next","","",99,[[],["option",4]]],[11,"accept","","",99,[[]]],[11,"initial","","",100,[[]]],[11,"next","","",100,[[],["option",4]]],[11,"accept","","",100,[[]]],[11,"initial","","",101,[[]]],[11,"next","","",101,[[],["option",4]]],[11,"accept","","",101,[[]]],[11,"initial","","",32,[[]]],[11,"next","","",32,[[],["option",4]]],[11,"accept","","",32,[[]]],[11,"initial","","",33,[[]]],[11,"next","","",33,[[],["option",4]]],[11,"accept","","",33,[[]]],[11,"initial","","",102,[[]]],[11,"next","","",102,[[],["option",4]]],[11,"accept","","",102,[[]]],[11,"initial","","",103,[[]]],[11,"next","","",103,[[],["option",4]]],[11,"accept","","",103,[[]]],[11,"initial","","",34,[[]]],[11,"next","","",34,[[],["option",4]]],[11,"accept","","",34,[[]]],[11,"get_modulus","competitive::num::modulus","",106,[[]]],[11,"get_modulus","","",107,[[]]],[11,"get_modulus","","",108,[[]]],[11,"get_modulus","","",109,[[]]],[11,"scan","competitive::num","",76,[[],["option",4]]],[11,"mscan","competitive::graph","",59,[[],["option",4]]],[11,"mscan","","",62,[[],["option",4]]],[11,"from","competitive::num","",76,[[]]],[11,"from","","",76,[[]]],[11,"from","","",76,[[]]],[11,"from","","",76,[[]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"next","competitive::graph","",104,[[],["option",4]]],[11,"next","","",105,[[],["option",4]]],[11,"clone","competitive::algebra","",0,[[],["maxoperation",3]]],[11,"clone","","",1,[[],["minoperation",3]]],[11,"clone","","",2,[[],["firstoperation",3]]],[11,"clone","","",3,[[],["lastoperation",3]]],[11,"clone","","",4,[[],["additiveoperation",3]]],[11,"clone","","",5,[[],["multiplicativeoperation",3]]],[11,"clone","","",6,[[],["linearoperation",3]]],[11,"clone","","",7,[[],["bitandoperation",3]]],[11,"clone","","",8,[[],["bitoroperation",3]]],[11,"clone","","",9,[[],["monoidaloperation",3]]],[11,"clone","","",10,[[],["groupoperation",3]]],[11,"clone","","",98,[[],["assocoativeoperator",3]]],[11,"clone","","",11,[[],["absorbedassocoativeoperator",3]]],[11,"clone","","",12,[[],["cartesianoperation",3]]],[11,"clone","","",13,[[],["countingoperation",3]]],[11,"clone","","",14,[[],["reverseoperation",3]]],[11,"clone","competitive::algorithm","",26,[[],["compress",3]]],[11,"clone","","",27,[[],["chtline",3]]],[11,"clone","","",28,[[],["convexhulltrick",3]]],[11,"clone","competitive::data_structure","",35,[[],["binaryindexedtree",3]]],[11,"clone","","",36,[[],["binaryindexedtree2d",3]]],[11,"clone","","",37,[[],["bitset",3]]],[11,"clone","","",38,[[],["disjointsparsetable",3]]],[11,"clone","","",39,[[],["lazysegmenttree",3]]],[11,"clone","","",40,[[],["segmenttree",3]]],[11,"clone","","",41,[[],["queueaggregation",3]]],[11,"clone","","",42,[[],["dequeaggregation",3]]],[11,"clone","","",43,[[],["unionfind",3]]],[11,"clone","","",44,[[],["weightedunionfind",3]]],[11,"clone","competitive::geometry","",48,[[],["circle",3]]],[11,"clone","","",49,[[],["line",3]]],[11,"clone","","",50,[[],["linesegment",3]]],[11,"clone","","",46,[[],["real",3]]],[11,"clone","","",47,[[],["ccw",4]]],[11,"clone","competitive::graph","",51,[[],["adjacent",3]]],[11,"clone","","",52,[[],["graph",3]]],[11,"clone","","",60,[[],["grapheidcache",3]]],[11,"clone","","",61,[[],["gridgraph",3]]],[11,"clone","","",54,[[],["revgraph",3]]],[11,"clone","","",56,[[],["revedge",3]]],[11,"clone","","",58,[[],["revcedge",3]]],[11,"clone","competitive::math","",67,[[],["memorizedfactorial",3]]],[11,"clone","","",70,[[],["smallmodmemorizedfactorial",3]]],[11,"clone","","",68,[[],["matrix",3]]],[11,"clone","","",71,[[],["babystepgiantstep",3]]],[11,"clone","","",69,[[],["polynomial",3]]],[11,"clone","","",72,[[],["primetable",3]]],[11,"clone","","",73,[[],["eulerphitable",3]]],[11,"clone","competitive::num","",74,[[],["complex",3]]],[11,"clone","","",76,[[]]],[11,"clone","","",75,[[],["quaddouble",3]]],[11,"clone","competitive::string","",78,[[],["knuthmorrispratt",3]]],[11,"clone","","",79,[[],["rollinghash",3]]],[11,"clone","","",80,[[],["multiplerollinghash",3]]],[11,"clone","","",81,[[],["suffixarray",3]]],[11,"clone","","",82,[[],["zarray",3]]],[11,"clone","competitive::tools","",85,[[],["counter",3]]],[11,"clone","","",86,[[],["xorshift",3]]],[11,"clone","competitive::tree","",90,[[],["eulertourforedge",3]]],[11,"clone","","",91,[[],["eulertourforvertex",3]]],[11,"clone","","",96,[[],["eulertourforrichvertex",3]]],[11,"clone","","",97,[[],["lowestcommonancestor",3]]],[11,"clone","","",95,[[],["lcamonoid",3]]],[11,"clone","","",93,[[],["rerooting",3]]],[11,"clone","","",94,[[],["treerec",3]]],[11,"default","competitive::algebra","",0,[[],["maxoperation",3]]],[11,"default","","",1,[[],["minoperation",3]]],[11,"default","","",2,[[],["firstoperation",3]]],[11,"default","","",3,[[],["lastoperation",3]]],[11,"default","","",4,[[],["additiveoperation",3]]],[11,"default","","",5,[[],["multiplicativeoperation",3]]],[11,"default","","",6,[[],["linearoperation",3]]],[11,"default","","",7,[[],["bitandoperation",3]]],[11,"default","","",8,[[],["bitoroperation",3]]],[11,"default","competitive::algorithm","",27,[[],["chtline",3]]],[11,"default","competitive::data_structure","",37,[[],["bitset",3]]],[11,"default","competitive::graph","",51,[[],["adjacent",3]]],[11,"default","","",52,[[],["graph",3]]],[11,"default","","",54,[[],["revgraph",3]]],[11,"default","competitive::math","",69,[[],["polynomial",3]]],[11,"default","competitive::num","",74,[[],["complex",3]]],[11,"default","","",76,[[]]],[11,"default","","",75,[[],["quaddouble",3]]],[11,"default","competitive::tools","",85,[[]]],[11,"default","","",86,[[]]],[11,"default","competitive::tree","",90,[[],["eulertourforedge",3]]],[11,"default","","",91,[[],["eulertourforvertex",3]]],[11,"default","","",96,[[],["eulertourforrichvertex",3]]],[11,"cmp","competitive::algebra","",0,[[["maxoperation",3]],["ordering",4]]],[11,"cmp","","",1,[[["minoperation",3]],["ordering",4]]],[11,"cmp","","",2,[[["firstoperation",3]],["ordering",4]]],[11,"cmp","","",3,[[["lastoperation",3]],["ordering",4]]],[11,"cmp","","",4,[[["additiveoperation",3]],["ordering",4]]],[11,"cmp","","",5,[[["multiplicativeoperation",3]],["ordering",4]]],[11,"cmp","","",6,[[["linearoperation",3]],["ordering",4]]],[11,"cmp","","",7,[[["bitandoperation",3]],["ordering",4]]],[11,"cmp","","",8,[[["bitoroperation",3]],["ordering",4]]],[11,"cmp","competitive::data_structure","",37,[[["bitset",3]],["ordering",4]]],[11,"cmp","competitive::geometry","",47,[[["ccw",4]],["ordering",4]]],[11,"cmp","competitive::graph","",51,[[["adjacent",3]],["ordering",4]]],[11,"cmp","","",61,[[["gridgraph",3]],["ordering",4]]],[11,"cmp","competitive::num","",76,[[],["ordering",4]]],[11,"cmp","competitive::tools","",84,[[["totalord",3]],["ordering",4]]],[11,"eq","competitive::algebra","",0,[[["maxoperation",3]]]],[11,"ne","","",0,[[["maxoperation",3]]]],[11,"eq","","",1,[[["minoperation",3]]]],[11,"ne","","",1,[[["minoperation",3]]]],[11,"eq","","",2,[[["firstoperation",3]]]],[11,"ne","","",2,[[["firstoperation",3]]]],[11,"eq","","",3,[[["lastoperation",3]]]],[11,"ne","","",3,[[["lastoperation",3]]]],[11,"eq","","",4,[[["additiveoperation",3]]]],[11,"ne","","",4,[[["additiveoperation",3]]]],[11,"eq","","",5,[[["multiplicativeoperation",3]]]],[11,"ne","","",5,[[["multiplicativeoperation",3]]]],[11,"eq","","",6,[[["linearoperation",3]]]],[11,"ne","","",6,[[["linearoperation",3]]]],[11,"eq","","",7,[[["bitandoperation",3]]]],[11,"ne","","",7,[[["bitandoperation",3]]]],[11,"eq","","",8,[[["bitoroperation",3]]]],[11,"ne","","",8,[[["bitoroperation",3]]]],[11,"eq","competitive::algorithm","",27,[[["chtline",3]]]],[11,"ne","","",27,[[["chtline",3]]]],[11,"eq","competitive::data_structure","",37,[[["bitset",3]]]],[11,"ne","","",37,[[["bitset",3]]]],[11,"eq","competitive::geometry","",48,[[["circle",3]]]],[11,"ne","","",48,[[["circle",3]]]],[11,"eq","","",49,[[["line",3]]]],[11,"ne","","",49,[[["line",3]]]],[11,"eq","","",50,[[["linesegment",3]]]],[11,"ne","","",50,[[["linesegment",3]]]],[11,"eq","","",46,[[["real",3]]]],[11,"eq","","",47,[[["ccw",4]]]],[11,"eq","competitive::graph","",51,[[["adjacent",3]]]],[11,"ne","","",51,[[["adjacent",3]]]],[11,"eq","","",61,[[["gridgraph",3]]]],[11,"ne","","",61,[[["gridgraph",3]]]],[11,"eq","competitive::math","",68,[[["matrix",3]]]],[11,"ne","","",68,[[["matrix",3]]]],[11,"eq","","",69,[[["polynomial",3]]]],[11,"ne","","",69,[[["polynomial",3]]]],[11,"eq","competitive::num","",74,[[["complex",3]]]],[11,"ne","","",74,[[["complex",3]]]],[11,"eq","","",76,[[]]],[11,"eq","","",75,[[["quaddouble",3]]]],[11,"ne","","",75,[[["quaddouble",3]]]],[11,"eq","competitive::tools","",84,[[["totalord",3]]]],[11,"ne","","",84,[[["totalord",3]]]],[11,"partial_cmp","competitive::algebra","",0,[[["maxoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["maxoperation",3]]]],[11,"le","","",0,[[["maxoperation",3]]]],[11,"gt","","",0,[[["maxoperation",3]]]],[11,"ge","","",0,[[["maxoperation",3]]]],[11,"partial_cmp","","",1,[[["minoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["minoperation",3]]]],[11,"le","","",1,[[["minoperation",3]]]],[11,"gt","","",1,[[["minoperation",3]]]],[11,"ge","","",1,[[["minoperation",3]]]],[11,"partial_cmp","","",2,[[["firstoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["firstoperation",3]]]],[11,"le","","",2,[[["firstoperation",3]]]],[11,"gt","","",2,[[["firstoperation",3]]]],[11,"ge","","",2,[[["firstoperation",3]]]],[11,"partial_cmp","","",3,[[["lastoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["lastoperation",3]]]],[11,"le","","",3,[[["lastoperation",3]]]],[11,"gt","","",3,[[["lastoperation",3]]]],[11,"ge","","",3,[[["lastoperation",3]]]],[11,"partial_cmp","","",4,[[["additiveoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["additiveoperation",3]]]],[11,"le","","",4,[[["additiveoperation",3]]]],[11,"gt","","",4,[[["additiveoperation",3]]]],[11,"ge","","",4,[[["additiveoperation",3]]]],[11,"partial_cmp","","",5,[[["multiplicativeoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["multiplicativeoperation",3]]]],[11,"le","","",5,[[["multiplicativeoperation",3]]]],[11,"gt","","",5,[[["multiplicativeoperation",3]]]],[11,"ge","","",5,[[["multiplicativeoperation",3]]]],[11,"partial_cmp","","",6,[[["linearoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["linearoperation",3]]]],[11,"le","","",6,[[["linearoperation",3]]]],[11,"gt","","",6,[[["linearoperation",3]]]],[11,"ge","","",6,[[["linearoperation",3]]]],[11,"partial_cmp","","",7,[[["bitandoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["bitandoperation",3]]]],[11,"le","","",7,[[["bitandoperation",3]]]],[11,"gt","","",7,[[["bitandoperation",3]]]],[11,"ge","","",7,[[["bitandoperation",3]]]],[11,"partial_cmp","","",8,[[["bitoroperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["bitoroperation",3]]]],[11,"le","","",8,[[["bitoroperation",3]]]],[11,"gt","","",8,[[["bitoroperation",3]]]],[11,"ge","","",8,[[["bitoroperation",3]]]],[11,"partial_cmp","competitive::data_structure","",37,[[["bitset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",37,[[["bitset",3]]]],[11,"le","","",37,[[["bitset",3]]]],[11,"gt","","",37,[[["bitset",3]]]],[11,"ge","","",37,[[["bitset",3]]]],[11,"partial_cmp","competitive::geometry","",46,[[["real",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",47,[[["ccw",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::graph","",51,[[["adjacent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",51,[[["adjacent",3]]]],[11,"le","","",51,[[["adjacent",3]]]],[11,"gt","","",51,[[["adjacent",3]]]],[11,"ge","","",51,[[["adjacent",3]]]],[11,"partial_cmp","","",61,[[["gridgraph",3]],[["option",4],["ordering",4]]]],[11,"lt","","",61,[[["gridgraph",3]]]],[11,"le","","",61,[[["gridgraph",3]]]],[11,"gt","","",61,[[["gridgraph",3]]]],[11,"ge","","",61,[[["gridgraph",3]]]],[11,"partial_cmp","competitive::num","",76,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",75,[[["quaddouble",3]],[["option",4],["ordering",4]]]],[11,"lt","","",75,[[["quaddouble",3]]]],[11,"le","","",75,[[["quaddouble",3]]]],[11,"gt","","",75,[[["quaddouble",3]]]],[11,"ge","","",75,[[["quaddouble",3]]]],[11,"partial_cmp","competitive::tools","",84,[[["totalord",3]],[["option",4],["ordering",4]]]],[11,"lt","","",84,[[["totalord",3]]]],[11,"le","","",84,[[["totalord",3]]]],[11,"gt","","",84,[[["totalord",3]]]],[11,"ge","","",84,[[["totalord",3]]]],[11,"fmt","competitive::algebra","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::algorithm","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure","",35,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",76,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",75,[[["formatter",3]],[["error",3],["result",4]]]],[11,"div","","",74,[[]]],[11,"div","","",74,[[]]],[11,"div","","",76,[[]]],[11,"div","","",76,[[["mint",3]]]],[11,"div","","",75,[[]]],[11,"sub","","",74,[[]]],[11,"sub","","",74,[[]]],[11,"sub","","",76,[[]]],[11,"sub","","",76,[[["mint",3]]]],[11,"sub","","",75,[[]]],[11,"add","","",74,[[]]],[11,"add","","",74,[[]]],[11,"add","","",76,[[]]],[11,"add","","",76,[[["mint",3]]]],[11,"add","","",75,[[]]],[11,"add","","",75,[[]]],[11,"mul","","",74,[[]]],[11,"mul","","",74,[[]]],[11,"mul","","",76,[[]]],[11,"mul","","",76,[[["mint",3]]]],[11,"mul","","",75,[[]]],[11,"mul","","",75,[[]]],[11,"neg","","",74,[[]]],[11,"neg","","",76,[[]]],[11,"neg","","",75,[[]]],[11,"add_assign","","",76,[[["mint",3]]]],[11,"add_assign","","",76,[[["mint",3]]]],[11,"sub_assign","","",76,[[["mint",3]]]],[11,"sub_assign","","",76,[[["mint",3]]]],[11,"mul_assign","","",76,[[["mint",3]]]],[11,"mul_assign","","",76,[[["mint",3]]]],[11,"div_assign","","",76,[[["mint",3]]]],[11,"div_assign","","",76,[[["mint",3]]]],[11,"not","competitive::data_structure","",37,[[]]],[11,"bitand","","",37,[[]]],[11,"bitor","","",37,[[]]],[11,"bitxor","","",37,[[]]],[11,"shl","","",37,[[]]],[11,"shr","","",37,[[]]],[11,"bitand_assign","","",37,[[]]],[11,"bitor_assign","","",37,[[]]],[11,"bitxor_assign","","",37,[[]]],[11,"shl_assign","","",37,[[]]],[11,"shr_assign","","",37,[[]]],[11,"index","competitive::algorithm","",26,[[]]],[11,"index","competitive::data_structure","",38,[[]]],[11,"index","competitive::graph","",65,[[]]],[11,"index","competitive::math","",68,[[]]],[11,"index","","",69,[[]]],[11,"index","competitive::num","",75,[[]]],[11,"index","competitive::string","",81,[[]]],[11,"index","","",82,[[]]],[11,"index_mut","competitive::math","",68,[[]]],[11,"index_mut","","",69,[[]]],[11,"hash","competitive::algebra","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","competitive::data_structure","",37,[[]]],[11,"hash","competitive::graph","",51,[[]]],[11,"hash","","",61,[[]]],[11,"hash","competitive::num","",74,[[]]],[11,"hash","","",76,[[]]],[11,"from_iter","competitive::algorithm","",26,[[["intoiterator",8]]]],[11,"from_iter","competitive::tools","",85,[[["intoiterator",8]]]],[11,"product","competitive::num","",76,[[["iterator",8]]]],[11,"product","","",76,[[["iterator",8]]]],[11,"sum","","",76,[[["iterator",8]]]],[11,"sum","","",76,[[["iterator",8]]]],[11,"from_str","","",76,[[],["result",4]]],[11,"from_str","","",75,[[],["result",4]]],[11,"reverse_operate","competitive::algebra","",15,[[]]],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",17,[[]]],[11,"mo_solve","competitive::algorithm","",29,[[]]],[11,"modulo","competitive::num","",77,[[]]]],"p":[[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"MonoidalOperation"],[3,"GroupOperation"],[3,"AbsorbedAssocoativeOperator"],[3,"CartesianOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[8,"Magma"],[8,"Unital"],[8,"Monoid"],[8,"Invertible"],[8,"RightInvertibleMagma"],[8,"MinimumBounded"],[8,"MaximumBounded"],[8,"AdditiveIdentity"],[8,"MultiplicativeIdentity"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"Compress"],[3,"CHTLine"],[3,"ConvexHullTrick"],[8,"MoSolver"],[8,"Bisect"],[8,"Trisect"],[3,"LessThanAutomaton"],[3,"GreaterThanAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"SegmentTree"],[3,"QueueAggregation"],[3,"DequeAggregation"],[3,"UnionFind"],[3,"WeightedUnionFind"],[8,"Automaton"],[3,"Real"],[4,"CCW"],[3,"Circle"],[3,"Line"],[3,"LineSegment"],[3,"Adjacent"],[3,"Graph"],[3,"GraphRec"],[3,"RevGraph"],[3,"LowLink"],[3,"RevEdge"],[3,"Dinic"],[3,"RevCEdge"],[3,"GraphScanner"],[3,"GraphEidCache"],[3,"GridGraph"],[3,"RevGraphScanner"],[3,"FordFulkerson"],[3,"PrimalDual"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[3,"MemorizedFactorial"],[3,"Matrix"],[3,"Polynomial"],[3,"SmallModMemorizedFactorial"],[3,"BabyStepGiantStep"],[3,"PrimeTable"],[3,"EulerPhiTable"],[3,"Complex"],[3,"QuadDouble"],[3,"MInt"],[8,"Modulus"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"SimuratedAnnealing"],[3,"TotalOrd"],[3,"Counter"],[3,"Xorshift"],[3,"Scanner"],[8,"IterScan"],[8,"MarkedIterScan"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"HeavyLightDecomposition"],[3,"ReRooting"],[3,"TreeRec"],[3,"LCAMonoid"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"AssocoativeOperator"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"ContainAutomaton"],[3,"ContainCounterAutomaton"],[3,"Adjacent4"],[3,"Adjacent8"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"Modulo998244353"],[3,"DynModulo"]],"a":{"verify":[590,595,600,605,610,616,621,625,629,632,636,644,652,656,659,662,667,677,684,695,707,712,716,721,724,731,732,738,744,752,757,758,761,769,779,790,799,809,810,814,818,821,829,832,834,838,841]}}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);