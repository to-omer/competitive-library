var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":"AAAAAAAAAAAAAAAAFCFCFCFFCCFCFCFCFFCFCFCAAAAAAAAAAAAAAAAAACFCCFCCFCCFCFCCFCCFCCFCCFCCFCCFCCFFFCCFFFFAAAAAAAAAAAAAAAAAACCCCCCFFCCCCFCCCCCFCFCCCFCCFCCFCCFCFCFFCCFCCCFCCCCFCCCCCFCCCCCCFCCFCCFCCFAF","n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","dpl_1_e","levenshtein_distance","KnapsackPloblemSmallValue","dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","dpl_3_a","largest_square","dpl_3_b","largest_rectangle_in_grid","dpl_3_c","largest_rectangle","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","MinOperation","SegmentTree","dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","Static2DTree","dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","dsl_3_b","dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","EdgeListGraphScanner","grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","DirectedGraphScanner","grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","itp1_1_a","itp1_1_a"],"q":[[0,"aizu_online_judge"],[4,"aizu_online_judge::dpl"],[16,"aizu_online_judge::dpl::dpl_1_a"],[17,"aizu_online_judge::dpl::dpl_1_b"],[19,"aizu_online_judge::dpl::dpl_1_c"],[21,"aizu_online_judge::dpl::dpl_1_d"],[23,"aizu_online_judge::dpl::dpl_1_e"],[25,"aizu_online_judge::dpl::dpl_1_f"],[27,"aizu_online_judge::dpl::dpl_1_g"],[29,"aizu_online_judge::dpl::dpl_1_h"],[31,"aizu_online_judge::dpl::dpl_1_i"],[33,"aizu_online_judge::dpl::dpl_3_a"],[35,"aizu_online_judge::dpl::dpl_3_b"],[37,"aizu_online_judge::dpl::dpl_3_c"],[39,"aizu_online_judge::dsl"],[57,"aizu_online_judge::dsl::dsl_1_a"],[59,"aizu_online_judge::dsl::dsl_1_b"],[62,"aizu_online_judge::dsl::dsl_2_a"],[65,"aizu_online_judge::dsl::dsl_2_b"],[68,"aizu_online_judge::dsl::dsl_2_c"],[70,"aizu_online_judge::dsl::dsl_2_d"],[73,"aizu_online_judge::dsl::dsl_2_e"],[76,"aizu_online_judge::dsl::dsl_2_f"],[79,"aizu_online_judge::dsl::dsl_2_g"],[82,"aizu_online_judge::dsl::dsl_2_h"],[85,"aizu_online_judge::dsl::dsl_2_i"],[88,"aizu_online_judge::dsl::dsl_3_a"],[91,"aizu_online_judge::dsl::dsl_3_b"],[92,"aizu_online_judge::dsl::dsl_3_c"],[93,"aizu_online_judge::dsl::dsl_3_d"],[96,"aizu_online_judge::dsl::dsl_4_a"],[97,"aizu_online_judge::dsl::dsl_5_a"],[98,"aizu_online_judge::dsl::dsl_5_b"],[99,"aizu_online_judge::grl"],[117,"aizu_online_judge::grl::grl_1_a"],[125,"aizu_online_judge::grl::grl_1_b"],[130,"aizu_online_judge::grl::grl_1_c"],[136,"aizu_online_judge::grl::grl_2_a"],[138,"aizu_online_judge::grl::grl_2_b"],[142,"aizu_online_judge::grl::grl_3_a"],[145,"aizu_online_judge::grl::grl_3_b"],[148,"aizu_online_judge::grl::grl_3_c"],[151,"aizu_online_judge::grl::grl_4_a"],[153,"aizu_online_judge::grl::grl_4_b"],[156,"aizu_online_judge::grl::grl_5_a"],[159,"aizu_online_judge::grl::grl_5_b"],[163,"aizu_online_judge::grl::grl_5_c"],[168,"aizu_online_judge::grl::grl_5_d"],[174,"aizu_online_judge::grl::grl_5_e"],[181,"aizu_online_judge::grl::grl_6_a"],[184,"aizu_online_judge::grl::grl_6_b"],[187,"aizu_online_judge::grl::grl_7_a"],[190,"aizu_online_judge::itp1"],[191,"aizu_online_judge::itp1::itp1_1_a"]],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  1ms","","✅  AC  1ms","","✅  AC  3ms","","✅  AC  8ms","✅  AC  4ms","","","✅  AC  0ms","","✅  AC  6ms","","✅  AC  57ms","","✅  AC  0ms","✅  AC  18ms","","✅  AC  16ms","","✅  AC  3ms","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  6ms","","","✅  AC  19ms","","","✅  AC  14ms","","","✅  AC  13ms","","✅  AC  474ms","","","✅  AC  47ms","","","✅  AC  45ms","","","✅  AC  64ms","","","✅  AC  54ms","","","✅  AC  50ms","","","✅  AC  70ms","","","✅  AC  5ms","✅  AC  2ms","✅  AC  241ms","","","✅  AC  105ms","✅  AC  54ms","✅  AC  3ms","✅  AC  7ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  67ms","✅  AC  68ms","","","","","✅  AC  5ms","","","","","","✅  AC  7ms","","✅  AC  23ms","","","","✅  AC  0ms","","","✅  AC  2ms","","","✅  AC  3ms","","","✅  AC  6ms","","✅  AC  0ms","","✅  AC  2ms","","","","✅  AC  7ms","","","","✅  AC  2ms","","","","","✅  AC  87ms","","","","","","✅  AC  44ms","","","","","","","✅  AC  217ms","","","✅  AC  0ms","","","✅  AC  0ms","","","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,[[1,2]],0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,1,1],3],0,0,[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]]],"c":[],"p":[[8,"Read"],[8,"Write"],[15,"bool"]],"a":{"verify":[16,18,20,22,23,26,28,30,32,33,35,37,58,61,64,67,69,72,75,78,81,84,87,90,91,92,95,96,97,98,123,124,129,135,137,141,144,147,150,152,154,158,162,167,173,180,183,186,189,191]}},\
"competitive":{"doc":"github","t":"OAAOOOOOOOAOOAOOOOAAOOOOOOOAOOOOOOOOAAOOOOOOOOAOOAAIIQQDQDQQIIDIDIDDIDDDIDDEIIIIQDDSSIDEDIIQDEDDDDDDDDDIIIQQDIKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLOLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLQDIDDDDDDIDDDQQQQDIDDQDIIIDIDQQQDDDQIDIDDLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLKFLLLLLLLLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLMLLLLLLLLLLLLLLLKKLLKKLKKKLLLFKKKLLLKKFKFLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIQDDIDDDDDDDGGGGDGGGGIDDGGDDDDDDDDDDDDDDDDDIDDDDDDQDIDDDDDDKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLOLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIEIDNNDDNNNKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQQQQQQQIIIDIIIDDIDDEGGDDDDEGGQQIQDDIIIIQIDDDDDDDIIDDIDDDQDDEGGDDQQDDDQIIIIQKLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLMLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLKLLLLLLLLLLLLLFKLMLLKLLLMKLKLLLLLLLLLLLLLLLLLLLKLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLMLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLKLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLKLLLLKLLLLLLKLMKLLLLLLLLLLLLLLMLDGEIDQDIIGGGDDDDDDDQLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLFFLLLLLLLLLLLLLLFLLLLLLLLFLLLFFFLMLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLFLLLLLLLLLLLLLLLLLLLLLLLLLMLKLLLLLLLLLFLFFKLLLLLFLLFFFFFFLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLFLLFLLLFLLLLLLLLLLLLLLMLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIIDSIDSSQDSSSSSSSSSIDDSQISSSSSSSSSSSSDIISSISDSIDSDIQSIQDIKKLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLLLLLLLLLLLLLKLLKLLKLLLLKLLLLLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLKLLLLLLLLKLLLMLLLKLLLLLLLLLLLLKLLKLLLLLLKLLKLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLKLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLKLLKLLKLLLLLLKLLKLLLLLLLLLLLLLLAKKKKKKKLLKKLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKKLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLMMKLLLLLLLGGEEGGGGEEDELLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGEEEEILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLCCICCILLLLKLLOKCLLLLLLOLKLLLLCCCCDCCCCDDLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLFEEEQDDDDEEEIQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIEDEDIDEDDIIISIDQQQDIDDISDDIDDDQDEDKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMKMLKLLLLLLKLLLLLLLLLLLLLLLLLMLLLLKLLLMLLLLLFFFFFLLKLLLLLLOOLKLLLLLLLLLMMMMKKKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLDDDDDEIDDNDDDDEDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLL","n":["add_assign","algebra","algorithm","array","automaton","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","invariant","iter_print","main","math","max","memorize","min","minmax","mlambda","mo_algorithm","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","syakutori","tools","tree","AbelianGroup","AbelianMonoid","Act","ActMonoid","AddMulOperation","Additive","AdditiveOperation","Agg","AggMonoid","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","EmptyAction","EmptyLazy","Field","FindMajorityOperation","FirstOperation","Gf2_63","Group","Idempotent","IdempotentMonoid","Invertible","Key","LastOperation","LinearOperation","MOD","MOD","Magma","MaxOperation","Mersenne61","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","Top2Operation","Unital","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_operate","act_operate","act_operate_assign","act_operate_assign","act_unit","act_unit","add","add","add","agg_operate","agg_operate","agg_operate_assign","agg_operate_assign","agg_unit","agg_unit","all_one","all_zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone_into","clone_into","define_monoid","div","div","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","mul","mul","neg","neg","one","one","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","single","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","sub","sub","sum","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","zero","zero","B","BabyStepGiantStep","Bisect","BitDp","Combinations","ConvexHullTrick","DivisorTransform","EsperEstimator","EsperSolver","ImpartialGame","ImpartialGameAnalyzer","ImpartialGamer","IndependentSubSet","Iter","Iter","LIter","M","MultipleTransform","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SliceCombinationsExt","SliceSortExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","State","State","SubsetTransform","Subsets","SupersetTransform","T","Trisect","XorBasis","ZeroSumGame","ZeroSumGameAnalyzer","ZeroSumGamer","add_line","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bubble_sort","bubble_sort_by","bucket","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","convolve","convolve","convolve","convolve","default","default","default","elements","eq","equivalent","eval","eval","eval","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_bucket","fold_cell","for_each_combinations","for_each_combinations_with_replacement","for_each_permutations","for_each_product","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","ind","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_element","is_subset","k_colorable","merge_sort","merge_sort_by","middle","middle_point","mobius_transform","mobius_transform","mobius_transform","mobius_transform","n","new","new","new","new","new","new","new","new","new","new","new","new_with_primes","new_with_primes","next","next","next_combination","next_left","next_left","next_minimum","next_permutation","next_right","next_right","next_section","next_state","next_state","next_state","next_state","not_elements","parallel_binary_search","position_bisect","prev_combination","prev_permutation","push","query","reduce","rfind_bisect","rposition_bisect","run_length_encoding","section_end","slide_minimum","solve","solve","solve","solve_checked","sqrt_decomposition","sqrt_decomposition","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_bucket","update_cell","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Accumulate","Allocator","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","CompressedBinaryIndexedTree","CompressedBinaryIndexedTree1d","CompressedBinaryIndexedTree2d","CompressedBinaryIndexedTree3d","CompressedBinaryIndexedTree4d","CompressedSegmentTree","CompressedSegmentTree1d","CompressedSegmentTree2d","CompressedSegmentTree3d","CompressedSegmentTree4d","Compressor","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCompress","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MemoryPool","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTreeMap","SlopeTrick","SplayMap","SplaySequence","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","VecCompress","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","allocate","allocate","append","as_slice","as_total_ord","automaton","back","bit_length","bit_length","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_failure","build_inplace","chmax","chmin","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count_ones","count_zeros","dd","deallocate","deallocate","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","drop","drop","drop","edges","eq","equivalent","extend","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get","get","get_difference","get_key_value","get_key_value_at","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","index_exact","index_exact","index_exact","index_lower_bound","index_lower_bound","index_lower_bound","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert","insert","insert","insert_at","insert_once_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","iter","iter","iter","iter_mut","keys","keys","keys","last","len","len","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","minmax","modify","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next_node","node_size","not","not","ones","partial_cmp","pop","pop_back","pop_front","pop_left_if","pop_left_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","quantile_outer","query_min","range","range","range","range_at","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove","remove","remove_at","remove_count","remove_count","reverse","roots","roots","roots","rotate_left","rotate_right","rposition_acc","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update_isize","valley","values","values","values","values_mut","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","Approx","ApproxOrd","Ccw","Ccwable","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","approx_cmp","approx_eq","as_total_ord","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","ccw_open","chmax","chmax","chmin","chmin","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","default","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","minmax","minmax","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","add_assign","add_assign","add_assign","add_assign","add_clause","add_cost1","add_cost2","add_cost2_01","add_cost2_10","add_edge","add_edge","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adj4","adj8","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies_with_eindex","adjacencies_with_eindex","adjacencies_with_value","adjacencies_with_value","adjacencies_with_value","adjacency","articulation","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","avalue","avalue","avalue","aviews","aviews","aviews","aviews","aviews","aviews","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","build","builder","builder","builder","builder_with_esize","change_edge","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","chmin","chmin","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","components","construct_emap","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","construct_vmap","construct_vmap","construct_vmap","construct_vmap","default","default","default","dfs_order","dfs_tree","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","dulmage_mendelsohn_decomposition","edges","edges","edges","edges_size","edges_size","eindex","eindex","eindex","eindex","elist","emap_get","emap_get","emap_get_mut","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","esize","esize","esize","eview","eview","eview","eview","extend","extend","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","hash","hash","hash","height","hopcroft_karp","id","index","index","inf","inf","inf","inf","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","kuhn_multi_start_bfs","low","map","map","maximum_flow","maximum_flow_limited","maximum_independent_set","maximum_matching","minimum_cost_flow","minimum_cost_flow_limited","minimum_cut","minimum_edge_cover","minimum_spanning_arborescence","minimum_spanning_tree","minimum_vertex_cover","minmax","minmax","minmax","minmax","minmax","minmax","minmax","minmax","move_by_diff","mscan","mscan","mscan","mscan","mul","mul","mul","mul","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_adj4","new_adj8","new_with_esize","next","next","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","solve","source","source","source","source","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices_size","vertices_size","vindex","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_set","vmap_set","vsize","vsize","vsize","vview","vview","vview","vview","vview","vview","vview","vview","vview","vview","vview","warshall_floyd_ap","warshall_floyd_ap","weighted_tree_depth","weighted_tree_depth","width","with_n_values","Convolve","Convolve998244353","ConvolveRealFft","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","MIntConvolve","Matrix","MemorizedFactorial","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","assign","berlekamp_massey","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","check_primitive_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convolve","convolve","convolve","convolve","count_divisors","count_divisors","count_multiset_sum","count_subset_sum","data","data","data","default","default","default","default","determinant","diff","discrete_logarithm","discrete_logarithm_prime_mod","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","divisors","divisors","divisors","eq","eq","eq","equivalent","equivalent","equivalent","euler_phi","eval","even","exp","extgcd","extgcd_binary","extgcd_recurse","eye","fact","factorial","floor_sum","floor_sum_i64","floor_sum_range_freq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_loop","get","highly_composite_number","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into_iter","inv","inv","inv","inv_fact","inverse","inverse_transform","inverse_transform","inverse_transform","inverse_transform","is_prime","is_prime","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","length","length","length","length","linear_congruence","linear_sum_of_exp","log","miller_rabin","miller_rabin_with_br","modinv","modinv_extgcd_binary","modinv_recurse","moebius","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply","multiply","multipoint_evaluation","neg","neg","new","new","new","new","new","new","new","odd","one","one","permutation","pow","pow","pow","pow","powi","prefix","prefix_ref","prime_factors","prime_factors","prime_factors","prime_factors_flatten","primes","primes","primes_lte","primitive_root","product_all","rank","rem","rem","rem","rem","rem","rem_assign","rem_assign","reserve","resize","resized","reversed","row_reduction","shape","shl","shl","shl_assign","shr","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum_all_rational","taylor_shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","transform","trial_division","trial_division","trim_tail_zeros","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zeros","zeros","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","Rational","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","chmin","chmin","chmin","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp_by_arg","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","default","delta","den","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_rem","div_rem","div_rem","dot","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","get_mod","get_mod","get_mod","hash","hash","hash","hash","hypot","hypot","hypot","i","im","index","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","is_zero","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","maximum","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","minimum","minimum","minimum","minimum","minmax","minmax","minmax","minmax","minmax","minmax","minmax","minmax","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new_unchecked","new_unchecked","norm","not","not","num","one","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","primitive_nth_root_of_unity","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","scan","scan","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_mod","set_mod","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","__local_key","__local_key","__local_key","__local_key","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","n1","n1","n1","n1","n1","n2","n2","n2","n2","n2","n3","n3","n3","n3","n3","r","r","r","r","r","r","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Bytes","Chars","Read","Scanner","Usize1","Write","by_ref","by_ref","bytes","chain","flush","is_read_vectored","is_write_vectored","iter_print","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","take","write","write_all","write_all_vectored","write_fmt","write_vectored","Gf2_63x1","Gf2_63x2","Gf2_63x3","HashedRangeChained","KnuthMorrisPratt","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHasher","SuffixArray","Zarray","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","index","index","into","into","into","longest_common_prefix_array","new","new","new","rolling_hash","search","search_all","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wildcard_pattern_matching","Gf2_63x1","Gf2_63x2","Gf2_63x3","Hash","Hashed","HashedRange","HashedRangeChained","HashedSequence","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHasher","T","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chainable","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","chmin","chmin","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","concat","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","default","ensure","ensure","ensure","ensure","ensure","ensure","ensure","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash_range","hash_range","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","init","init_with_rng","init_with_rng","init_with_rng","init_with_rng","init_with_rng","init_with_rng","init_with_rng","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","len","len","longest_common_prefix","minmax","minmax","minmax","minmax","minmax","minmax","minmax","minmax","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","push","range","range","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AsTotalOrd","AssociatedValue","Byte1","ByteWithBase","Bytes","BytesWithBase","CharTools","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","LOG_TABLE_SIZE","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandRange","RandomSpec","SEED","Scanner","ScannerIter","SerdeByteStr","SimuratedAnnealing","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","__local_key","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","deserialize","deserialize_from_bytes","deserialize_from_bytes","end_temp","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_accepted","is_end","is_maximize","iter","iter_count","iter_print","log_table","minimize","minmax","minmax","minmax","minmax","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","new","new","new","new","new","new","new_with_seed","next","next","now","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rand","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","replace","replace","scan","scan","scan","scan","scan","scan","scan","scan","scan_value","scan_vec","serialize","serialize_bytestr","serialize_bytestr","set","set","set_end_temp","set_start_temp","set_time_limit","set_update_interval","shuffle","start_temp","temperture","time","time_limit","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_upper_alphabetic_number","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unescape","update_interval","with","with","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dp","eidx","ep","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vidx","vsize","vsize","with_seed"],"q":[[0,"competitive"],[51,"competitive::algebra"],[458,"competitive::algorithm"],[808,"competitive::combinatorial_optimization"],[922,"competitive::data_structure"],[1849,"competitive::geometry"],[1967,"competitive::graph"],[2686,"competitive::math"],[3050,"competitive::num"],[4486,"competitive::num::mint_basic"],[4751,"competitive::num::montgomery"],[4928,"competitive::prelude"],[4957,"competitive::string"],[5011,"competitive::string::rolling_hash"],[5256,"competitive::tools"],[5640,"competitive::tree"]],"d":["","algebra","algorithm","","build automaton","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","Implement <code>AssociatedValue</code>.","","","","","Print expressions with a separator.","","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","solve with Mo’s algorithm","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","scan and bind values with Scanner","scan a value with Scanner","","","string algorithems","","arg:","","tree algorithems","commutative group","commutative monoid","","","$+,\\\\times$","","$+$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","","","Find majority(strict) of a sequence.","retain the first element","","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","","","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","$a$ where $a \\\\circ x = e$","","","","","","","","","","multiplicative operaion: $+$","multiplicative operaion: $+$","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","","","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","","","additive identity: $0$","additive identity: $0$","","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","binary search helper","","","","","","","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","","","","","ternary search helper","Basis of xor operation.","","","","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","","","","","","","","","","","","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","get i-th value of rho path","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","middle point of section","Return between two elements if search is not end.","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","","","","","","Create a empty space.","","","","","","","","","","","","","Divide into 3 sections","","","","","","","Returns the first index that satisfies a predicate. if not …","","","","","Return (reduced basis, coordinate). Coordinate means if …","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","the end condition of ternary search","","","","","","","","","like <code>(left..=right).min_by_key(f)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return accumlate of [0, k)","fold [0, k]","fold [0, i] x [0, j]","","","","","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of [l, r)","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Create empty","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","","get k-th smallest value in range","get k-th smallest value out of range","","","","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-badd a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return norm","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(p_x = f) | (p_y = g)","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","","","","","","","","Return a slice of adjacency verticeseturn the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","Return an iterator over graph vertices.","","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e, c==1","Sum of Floor of Linear mod 2^64","Sum of Floor of Linear mod 2^64","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","binary gcd","","","[(hcn, #divisor)]","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","","return: (y,z)","sum_i a_i exp(b_i x)","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","m","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","Calls <code>U::from(self)</code>.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n^1 mod m","","","","","n^2 mod m","","","","","n^3 mod m","","","","","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","Flush this output stream, ensuring that all intermediately …","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Print expressions with a separator.","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","scan and bind values with Scanner","Creates an adapter which will read at most <code>limit</code> bytes …","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","","Trait for spec of generating random value.","","","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","","","","","","","scan and bind values with Scanner","scan a value with Scanner","","","","","","","","","","","","","","","","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","","","","","","","","","","","","","","","","","","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,104,0,312,0,104,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,313,314,0,0,0,0,0,0,312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,315,312,0,0,104,316,317,318,319,320,321,322,323,6,104,316,317,318,319,320,321,322,323,6,104,104,104,104,104,104,312,312,4,104,104,104,104,104,104,324,325,326,316,317,318,319,320,321,322,323,4,6,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,313,314,326,316,317,318,319,320,321,322,323,4,6,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,313,314,4,4,4,6,4,6,0,343,343,4,6,4,6,4,6,326,316,317,318,319,320,321,322,323,4,6,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,313,314,326,316,317,318,319,320,321,322,323,4,6,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,313,314,343,343,344,331,332,333,336,338,341,345,345,0,312,312,346,346,312,312,315,4,6,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,313,314,315,315,58,58,315,315,344,344,331,332,345,345,6,104,316,317,318,319,320,321,322,323,6,346,346,6,4,6,104,104,326,316,317,318,319,320,321,322,323,4,6,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,313,314,326,316,317,318,319,320,321,322,323,4,6,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,313,314,326,316,317,318,319,320,321,322,323,4,6,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,313,314,345,4,6,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,313,314,347,312,312,50,0,0,0,0,0,0,0,0,0,0,0,0,39,43,41,50,0,0,0,0,41,0,0,0,0,0,0,0,39,41,43,0,0,0,50,0,0,0,0,0,21,23,0,54,55,51,56,348,349,46,47,49,34,35,36,33,21,37,38,40,42,31,57,23,44,54,55,51,56,348,349,46,47,49,34,35,36,33,21,37,38,40,42,31,57,23,44,350,350,50,31,31,33,34,35,36,33,21,37,38,40,42,23,44,34,35,36,33,21,37,38,40,42,23,44,34,348,349,46,47,34,21,23,34,34,34,40,42,44,31,23,351,0,49,34,35,36,33,21,37,38,40,42,31,23,44,51,50,50,352,352,352,352,54,55,51,56,348,349,46,47,49,34,35,36,33,21,37,38,40,42,31,57,23,44,33,23,31,31,33,23,54,55,51,56,348,349,46,47,49,34,35,36,33,21,37,38,40,42,31,57,23,44,35,36,34,34,33,350,350,60,27,348,349,46,47,33,54,55,56,49,21,37,40,42,57,23,44,46,47,35,36,352,41,55,57,352,41,55,60,39,43,54,56,34,0,351,352,352,37,21,23,351,351,0,60,0,49,37,38,37,50,50,34,0,34,35,36,33,21,37,38,40,42,23,44,54,55,51,56,348,349,46,47,49,34,35,36,33,21,37,38,40,42,31,57,23,44,54,55,51,56,348,349,46,47,49,34,35,36,33,21,37,38,40,42,31,57,23,44,54,55,51,56,348,349,46,47,49,34,35,36,33,21,37,38,40,42,31,57,23,44,51,50,50,348,349,46,47,0,0,0,0,0,0,61,62,63,64,65,66,61,62,63,64,65,66,61,62,63,64,65,66,61,62,63,64,65,66,63,66,61,62,66,61,62,63,66,61,62,61,62,61,61,62,63,64,65,66,61,62,63,64,65,66,61,62,61,62,63,66,61,62,61,62,61,61,62,63,64,65,66,65,0,0,0,0,66,61,61,62,63,64,65,66,61,62,63,64,61,62,63,64,65,66,61,62,63,64,65,66,61,62,63,64,65,66,61,62,63,64,65,66,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,67,68,69,70,71,72,73,74,75,76,77,133,78,79,80,81,82,83,83,83,83,81,82,84,85,86,86,84,85,86,86,87,89,90,114,92,84,93,96,0,95,133,78,96,96,96,96,96,96,96,96,96,80,81,82,83,101,103,132,105,106,87,93,107,108,95,116,117,89,92,109,68,69,70,71,72,73,74,75,76,77,78,96,110,111,84,85,112,98,99,100,86,97,90,79,80,81,82,83,101,103,132,105,106,87,93,107,108,95,116,117,89,92,109,68,69,70,71,72,73,74,75,76,77,78,96,110,111,84,85,112,98,99,100,86,97,90,79,97,98,96,96,84,85,99,100,86,86,81,82,83,101,103,105,106,93,107,108,95,89,109,68,69,70,71,72,73,74,75,76,77,78,96,110,111,84,85,112,98,99,100,86,97,90,79,81,82,83,101,103,105,106,93,107,108,95,89,109,68,69,70,71,72,73,74,75,76,77,78,96,110,111,84,85,112,98,99,100,86,97,90,79,96,100,99,96,96,98,114,92,83,101,108,95,116,117,92,76,77,96,84,85,112,99,100,86,67,67,109,84,99,100,116,117,92,97,96,96,116,84,84,85,85,99,100,87,89,97,90,97,87,87,80,81,82,83,101,103,105,106,93,107,108,95,116,117,89,92,109,68,69,70,71,72,73,74,75,76,77,78,96,110,111,84,85,112,98,99,100,86,97,90,79,80,81,82,101,101,101,101,103,105,106,93,107,116,109,105,106,93,107,108,95,103,80,81,82,83,101,103,132,105,106,87,93,107,108,95,116,117,89,92,109,68,69,70,71,72,73,74,75,76,77,78,96,110,111,84,85,112,98,99,100,86,97,90,79,80,78,110,111,84,84,85,85,99,100,81,105,93,95,81,82,105,106,93,107,116,117,96,84,85,99,89,117,117,99,100,100,99,99,100,89,74,75,74,75,96,103,103,353,110,111,353,110,111,67,68,69,70,71,72,73,74,75,76,77,116,117,112,99,100,97,97,97,99,100,80,81,82,83,101,103,132,105,106,87,93,107,108,95,116,117,89,92,109,68,69,70,71,72,73,74,75,76,77,78,96,110,111,84,85,112,98,99,100,86,97,90,79,108,95,116,117,84,85,89,117,84,85,99,100,99,84,85,99,108,108,95,116,117,84,85,74,75,74,75,81,109,87,89,90,86,86,96,116,81,82,83,83,83,83,101,101,101,101,103,132,105,106,87,93,107,108,95,116,117,89,92,109,71,72,73,76,77,96,84,85,112,98,99,100,86,97,90,79,67,68,69,70,71,72,73,74,75,76,77,97,97,96,96,96,96,108,95,95,99,100,99,100,105,106,93,107,116,108,95,95,79,79,112,132,117,85,117,79,133,133,133,133,78,79,79,116,117,84,85,99,100,117,84,85,116,87,89,90,116,116,105,106,93,107,116,109,109,87,90,79,133,133,78,133,133,78,81,82,105,106,93,107,96,86,96,96,96,96,96,96,353,87,89,110,111,90,86,109,109,354,354,354,354,81,82,83,101,103,105,106,93,107,108,95,89,109,68,69,70,71,72,73,74,75,76,77,78,96,110,111,84,85,112,98,99,100,86,97,90,79,80,81,82,83,101,103,132,105,106,87,93,107,108,95,116,117,89,92,109,68,69,70,71,72,73,74,75,76,77,78,96,110,111,84,85,112,98,99,100,86,97,90,79,80,81,82,83,101,103,132,105,106,87,93,107,108,95,116,117,89,92,109,68,69,70,71,72,73,74,75,76,77,78,96,110,111,84,85,112,98,99,100,86,97,90,79,80,81,82,83,101,103,132,105,106,87,93,107,108,95,116,117,89,92,109,68,69,70,71,72,73,74,75,76,77,78,96,110,111,84,85,112,98,99,100,86,97,90,79,87,89,90,81,82,83,83,83,83,101,101,101,101,105,106,93,107,116,98,98,86,84,85,99,99,116,117,92,84,97,0,0,0,0,0,142,142,0,0,142,142,142,145,145,146,142,146,142,147,143,144,146,142,147,143,144,142,143,144,142,146,142,146,142,146,142,147,143,144,146,142,147,143,144,0,146,142,147,0,0,147,144,146,143,144,144,143,144,146,142,147,143,144,146,142,146,142,147,143,144,146,142,147,143,144,142,144,144,146,142,147,143,144,143,144,143,144,146,142,147,143,144,146,142,143,144,143,144,146,142,147,143,144,146,142,147,143,144,146,142,147,143,144,146,142,147,143,144,355,188,190,355,188,190,356,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,358,0,359,0,0,0,0,0,0,360,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,362,363,0,0,0,166,0,0,0,0,167,361,364,365,366,151,152,152,152,152,153,154,155,156,157,151,151,154,158,158,355,159,160,158,158,161,161,188,161,190,159,160,154,193,175,176,164,165,177,178,179,162,356,164,165,168,159,160,158,158,161,367,367,367,367,367,367,367,367,161,184,159,160,185,189,191,193,364,365,366,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,184,159,160,185,189,191,193,364,365,366,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,193,153,156,157,172,173,161,161,172,175,176,164,165,177,178,179,162,175,176,164,165,177,178,179,162,154,155,174,175,176,164,165,158,156,172,157,152,177,178,179,162,161,180,151,154,155,174,175,176,164,165,158,156,172,157,152,177,178,179,162,161,180,151,175,176,164,165,177,178,179,162,180,360,161,170,177,178,179,167,159,160,158,161,154,152,162,161,161,367,367,367,367,0,359,174,161,174,161,358,176,165,162,161,360,161,360,161,360,360,175,176,164,165,177,178,179,162,175,176,164,165,177,178,179,162,368,161,154,194,161,161,161,156,157,158,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,161,184,159,160,185,189,191,193,364,365,366,153,186,187,154,155,174,175,175,175,176,176,164,164,165,165,158,156,172,157,173,152,177,178,179,162,161,180,151,155,174,161,180,156,157,172,173,154,180,175,176,164,165,177,178,179,162,158,155,162,174,180,361,364,365,366,184,159,160,185,189,191,193,364,365,366,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,189,191,155,193,164,165,172,172,155,155,173,173,172,155,174,174,155,175,176,164,165,177,178,179,162,158,184,185,186,187,361,364,365,366,184,159,160,185,189,191,193,153,186,187,154,155,174,158,156,157,152,162,180,151,158,158,153,189,191,193,175,176,164,165,177,178,179,162,151,151,180,152,361,364,365,366,161,162,182,192,171,161,161,161,154,155,174,175,176,164,165,158,156,172,157,152,177,178,179,162,161,180,151,161,192,161,192,161,192,161,192,161,161,192,161,184,159,160,185,189,191,193,364,365,366,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,184,159,160,185,189,191,193,364,365,366,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,151,184,159,160,185,189,191,193,364,365,366,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,158,166,159,160,154,174,158,161,161,174,161,363,175,176,164,165,162,167,159,160,158,161,167,159,160,158,161,167,167,169,161,154,369,159,159,159,160,160,158,158,161,161,161,367,367,192,161,158,152,0,0,0,0,0,202,0,0,0,0,0,0,0,0,0,0,0,0,0,202,198,198,198,198,198,198,198,198,199,200,198,198,198,198,200,0,0,370,371,206,207,208,198,199,200,209,210,211,370,371,206,207,208,198,199,200,209,210,211,198,0,206,207,208,198,199,200,209,210,211,206,207,208,198,199,200,209,210,211,206,207,202,202,371,371,210,211,198,198,198,199,200,207,198,200,210,199,198,0,0,198,198,198,198,198,198,198,198,200,198,198,198,198,198,0,210,211,198,199,200,198,199,200,0,198,198,198,0,0,0,199,206,207,0,0,0,206,207,208,198,199,200,209,210,211,370,371,206,207,208,198,198,198,198,199,200,209,210,211,198,198,199,200,0,0,209,0,206,198,199,199,200,198,199,199,200,198,370,371,206,207,208,198,199,200,209,210,211,198,206,208,198,206,199,202,370,371,371,210,211,198,198,198,198,0,206,0,0,202,370,371,371,198,200,0,198,198,0,0,0,0,0,0,198,198,198,198,198,198,198,198,199,200,198,198,198,198,202,370,371,371,198,198,198,206,207,208,199,209,210,211,198,198,200,206,208,198,199,200,208,198,198,0,210,211,0,210,211,210,0,198,199,198,198,198,198,200,198,198,210,198,198,198,199,199,198,198,198,198,198,198,199,198,215,198,198,198,198,198,198,198,198,199,200,198,198,198,198,198,198,206,207,208,198,199,200,209,210,211,202,370,371,371,210,211,198,198,370,371,206,207,208,198,199,200,209,210,211,370,371,206,207,208,198,199,200,209,210,211,370,371,206,207,208,198,199,200,209,210,211,198,200,198,199,0,0,0,0,149,0,0,149,149,372,0,149,149,149,149,149,149,149,149,149,0,0,0,149,32,0,149,149,149,149,149,149,149,149,149,149,149,149,0,0,0,149,149,0,149,0,149,0,0,149,0,0,373,149,0,226,0,0,149,226,141,216,217,218,219,219,219,219,219,219,224,224,224,224,224,224,225,227,373,373,149,217,218,149,217,218,212,212,212,212,141,141,141,141,141,141,141,141,216,216,217,218,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,225,225,227,212,212,141,141,141,141,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,227,141,141,216,217,218,219,224,225,227,149,217,218,149,217,218,149,217,218,149,217,218,149,217,218,374,374,374,374,374,374,374,219,224,219,224,219,224,219,224,219,224,219,224,239,212,204,141,216,217,218,219,224,225,227,239,212,204,141,216,217,218,219,224,225,227,149,217,218,149,217,218,141,216,217,218,219,224,225,227,141,216,217,218,219,224,225,227,149,217,218,212,204,141,216,217,218,219,224,225,227,212,204,141,216,217,218,219,224,225,227,141,216,217,218,219,224,227,141,141,149,217,218,149,217,218,149,217,218,375,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,375,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,141,212,141,216,217,218,219,224,225,374,227,212,212,212,212,204,204,204,141,141,141,141,141,141,141,141,216,217,218,219,224,224,224,224,224,224,224,224,224,224,224,224,225,227,212,212,141,141,141,141,219,224,224,224,224,224,224,224,224,224,224,224,224,227,149,372,217,218,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,204,204,204,141,376,376,376,376,212,141,216,217,218,219,224,225,227,212,141,216,217,218,219,224,227,149,217,218,149,217,218,149,217,218,373,373,149,217,218,212,212,204,141,216,216,217,217,218,218,219,219,224,224,225,225,227,374,374,374,374,374,374,374,149,217,218,205,239,212,212,212,212,212,212,212,212,212,212,212,212,212,204,141,216,216,217,217,218,218,219,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,224,225,225,227,149,217,218,212,216,217,218,219,224,225,372,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,239,373,219,219,219,219,219,219,224,224,224,224,224,224,32,212,204,204,204,212,141,219,224,149,217,218,141,141,225,212,227,205,239,212,204,141,216,217,218,219,224,225,227,212,149,217,218,149,217,218,3,3,3,3,149,217,218,226,219,219,219,219,219,219,224,224,224,224,224,224,149,217,218,14,14,226,219,219,219,219,219,219,224,224,224,224,224,224,149,217,218,149,217,218,2,2,216,225,373,373,375,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,149,217,218,149,217,218,149,217,218,149,217,218,149,217,218,149,217,218,3,216,217,218,219,224,227,149,217,218,3,216,217,218,219,224,227,141,216,217,218,219,224,225,227,0,32,32,205,32,32,32,32,32,32,32,32,373,373,0,212,212,212,212,141,141,141,141,141,141,141,141,216,216,217,218,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,225,225,227,149,217,218,212,212,141,141,141,141,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,227,212,212,141,141,216,217,218,219,219,219,219,219,219,224,224,224,224,224,224,225,227,212,204,204,204,141,227,212,227,141,219,224,227,14,212,141,217,218,219,224,227,141,216,217,218,219,224,225,227,141,372,212,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,149,217,218,149,217,218,141,212,212,141,141,141,149,217,218,204,204,204,217,218,219,224,224,224,224,224,224,224,224,224,224,224,224,219,224,224,224,224,224,224,224,224,224,224,224,224,149,372,217,218,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,375,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,375,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,375,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,149,217,218,212,141,219,224,3,3,3,3,212,212,14,14,2,2,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,373,219,219,219,219,219,219,224,224,224,224,224,224,149,226,217,218,219,219,219,219,219,219,224,224,224,224,224,224,149,217,218,149,217,218,149,217,218,149,212,216,217,218,225,212,376,376,376,376,374,212,212,212,212,141,141,141,141,141,141,141,141,216,217,218,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,225,227,212,212,141,141,141,141,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,227,212,212,141,141,149,217,218,149,217,218,149,217,218,149,217,218,212,204,141,216,217,218,219,224,225,227,149,217,218,376,376,376,376,376,376,376,376,212,216,217,218,219,224,225,149,217,218,375,219,219,219,219,219,219,219,219,219,219,219,219,224,224,224,224,224,224,224,224,224,224,224,224,141,149,217,218,239,212,204,141,216,217,218,219,224,225,227,239,212,204,141,216,217,218,219,224,225,227,239,212,204,141,216,217,218,219,224,225,227,141,226,219,219,219,219,219,219,224,224,224,224,224,224,239,239,2,212,141,217,218,219,224,227,0,0,0,0,0,0,0,0,0,0,0,0,377,378,379,380,381,382,377,378,379,380,381,382,0,0,377,377,377,377,377,377,377,377,377,377,377,377,377,378,378,378,378,378,378,378,378,378,379,379,379,379,379,379,379,379,379,380,380,380,380,380,380,380,380,380,381,381,381,381,381,381,381,381,381,382,382,382,382,382,382,382,377,378,379,380,381,382,377,377,377,377,377,377,377,377,377,377,377,377,377,378,378,378,378,378,378,378,378,378,379,379,379,379,379,379,379,379,379,380,380,380,380,380,380,380,380,380,381,381,381,381,381,381,381,381,381,382,382,382,382,382,382,382,377,378,379,380,381,382,377,378,379,380,381,382,377,377,377,377,377,377,377,377,377,377,377,377,378,378,378,378,378,378,378,378,379,379,379,379,379,379,379,379,380,380,380,380,380,380,380,380,381,381,381,381,381,381,381,381,382,382,382,382,382,382,377,378,379,380,381,382,377,378,379,380,381,382,377,378,379,380,381,382,377,378,379,380,381,382,377,377,378,379,380,381,382,377,378,379,380,381,382,383,384,381,382,377,378,379,380,381,382,377,378,379,380,381,382,377,378,379,380,381,382,0,0,0,0,0,0,0,0,0,385,386,387,388,385,386,387,388,385,386,387,388,385,385,385,385,385,385,385,386,386,386,386,386,386,386,387,387,387,387,387,387,387,388,388,388,388,388,388,388,389,385,385,386,386,387,387,388,388,385,385,385,385,385,385,385,386,386,386,386,386,386,386,387,387,387,387,387,387,387,388,388,388,388,388,388,388,385,386,387,388,385,386,387,388,385,385,385,385,385,385,386,386,386,386,386,386,387,387,387,387,387,387,388,388,388,388,388,388,385,386,387,388,385,386,387,388,385,386,387,388,385,386,387,388,385,386,387,388,385,386,387,388,389,385,386,387,388,389,385,386,387,388,389,385,386,387,388,389,389,385,386,387,388,389,389,385,386,387,388,385,386,387,388,385,386,387,388,0,0,0,0,0,0,252,296,252,252,296,252,296,0,252,0,252,252,252,252,252,252,0,252,296,296,296,296,296,0,0,0,0,0,0,0,0,0,0,0,261,262,263,261,262,263,261,262,263,261,262,263,261,262,263,261,262,263,262,263,261,262,263,262,261,262,263,0,263,261,261,262,263,261,262,263,261,262,263,261,262,263,0,0,0,0,264,0,0,0,0,0,0,0,0,264,265,266,268,269,270,271,272,273,265,274,266,267,268,269,270,271,272,273,265,274,266,267,268,269,270,271,272,273,265,266,265,266,268,269,270,271,272,273,265,266,268,269,270,271,272,273,265,266,267,268,269,270,271,272,273,265,266,267,268,269,270,271,272,273,265,266,268,269,270,271,272,273,267,264,268,269,270,271,272,273,265,264,268,269,270,271,272,273,265,266,267,268,269,270,271,272,273,265,266,267,268,269,270,271,272,273,265,274,266,267,268,269,270,271,272,273,265,265,274,266,267,268,269,270,271,272,273,266,267,268,269,270,271,272,273,274,266,264,268,269,270,271,272,273,264,268,269,270,271,272,273,264,264,268,269,270,271,272,273,265,274,266,267,268,269,270,271,272,273,274,266,274,266,266,265,266,268,269,270,271,272,273,265,266,268,269,270,271,272,273,265,274,266,265,266,267,268,269,270,271,272,273,265,274,266,267,268,269,270,271,272,273,265,274,266,267,268,269,270,271,272,273,265,274,266,267,268,269,270,271,272,273,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0,183,297,390,0,0,0,0,0,292,0,0,0,0,0,0,391,0,0,0,391,392,276,277,278,94,295,292,276,275,294,277,278,279,280,281,282,283,284,285,286,287,289,290,291,94,295,292,276,275,294,277,278,279,280,281,282,283,284,285,286,287,289,290,291,94,393,276,277,278,94,393,276,277,278,94,276,275,277,278,279,280,281,282,283,284,285,286,287,289,290,291,94,276,275,277,278,279,280,281,282,283,284,285,286,287,289,290,291,94,276,277,278,94,292,276,275,94,394,394,394,292,276,277,278,94,276,277,278,94,292,276,275,294,277,278,279,280,281,282,283,284,285,286,287,289,290,291,94,295,292,276,275,294,277,278,279,280,281,282,283,284,285,286,287,289,290,291,94,395,395,395,395,275,275,275,391,391,390,277,278,94,295,292,276,275,294,277,278,279,280,281,282,283,284,285,286,287,289,290,291,94,295,294,292,292,292,279,292,396,292,292,393,276,277,278,94,391,391,297,279,281,283,285,287,289,291,291,292,275,278,279,289,291,275,295,294,292,276,277,278,94,293,275,277,278,292,275,293,293,275,275,0,0,0,0,0,391,391,183,279,280,282,284,286,290,0,0,279,394,394,394,391,391,292,292,292,292,275,292,292,292,292,395,395,395,276,275,277,278,279,280,281,282,283,284,285,286,287,289,290,291,94,395,295,292,276,275,294,277,278,279,280,281,282,283,284,285,286,287,289,290,291,94,295,292,276,275,294,277,278,279,280,281,282,283,284,285,286,287,289,290,291,94,295,292,276,275,294,277,278,279,280,281,282,283,284,285,286,287,289,290,291,94,0,292,391,391,0,0,0,0,0,0,0,0,0,196,0,0,0,0,0,0,196,308,309,310,311,299,300,301,303,397,304,307,305,196,306,308,309,310,311,299,300,301,303,397,304,307,305,196,306,299,300,301,303,304,305,196,299,300,301,303,304,305,196,306,302,397,305,299,305,196,196,299,300,301,303,304,305,196,306,308,309,310,311,299,300,301,303,397,304,307,305,196,306,301,196,306,306,0,308,309,310,311,299,300,301,303,397,304,307,305,196,306,303,307,299,300,301,299,300,301,307,305,306,304,299,307,300,300,300,301,307,307,308,309,310,311,301,302,397,300,300,300,299,300,301,303,304,305,196,308,309,310,311,299,300,301,303,397,304,307,305,196,306,308,309,310,311,299,300,301,303,397,304,307,305,196,306,308,309,310,311,299,300,301,303,397,304,307,305,196,306,307,300,301,307,302,397,306],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[2,3]]],[[4,[[0,[2,3]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[2,3]]],[[4,[[0,[2,3]]]]]],[[[0,[2,3]]],[[4,[[0,[2,3]]]]]],[[[4,[5]]],[[4,[5]]]],[[[6,[5]]],[[6,[5]]]],[[]],[[]],0,[[]],[[]],[[[4,[7]],[4,[7]]],8],[[[6,[7]],[6,[7]]],8],[[],8],[[],8],[[[4,[9]],10],11],[[[6,[9]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12],[12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[13,2,14,15,3,16,17,18,7]],[0,[13,2,14,15,3,16,17,18,7]]],[[6,[[0,[13,2,14,15,3,16,17,18,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[21,22,22]],[[23,24],[[1,[[25,[24]]]]]],[[26,27,27],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26],[12],[[[0,[5,28,29]],30],[[31,[[0,[5,28,29]]]]]],[[31,12,30],[[31,[12]]]],[[[33,[32]]],12],[34,34],[35,35],[36,36],[[[33,[[0,[5,32]]]]],[[33,[[0,[5,32]]]]]],[21,21],[[[37,[5,5,[0,[28,29,5]],[0,[30,5]],[0,[30,5]]]]],[[37,[5,5,[0,[28,29,5]],[0,[30,5]],[0,[30,5]]]]]],[[[38,[5,5,[0,[28,29,5]],[0,[30,5]],[0,[30,5]]]]],[[38,[5,5,[0,[28,29,5]],[0,[30,5]],[0,[30,5]]]]]],[[[40,[[0,[39,5]]]]],[[40,[[0,[39,5]]]]]],[[[42,[[0,[41,5]]]]],[[42,[[0,[41,5]]]]]],[23,23],[[[44,[[0,[43,5]]]]],[[44,[[0,[43,5]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[34,12],36],[[25,25],25],[[25,25],25],[[[46,[45]],25,25],25],[[[47,[45]],25,25],25],[[],34],[[],21],[[],23],[[34,12],48],[[34,34],8],[[],8],[[[40,[39]]],24],[[[42,[41]]],22],[[[44,[43]]],22],0,[[23,24],[[1,[24]]]],[26,1],[12,[[25,[12]]]],[[[49,[[0,[45,9]]]],10],11],[[34,10],11],[[35,10],11],[[36,10],11],[[[33,[[0,[9,32]]]],10],11],[[21,10],11],[[[37,[9,9,[0,[28,29,9]],[0,[30,9]],[0,[30,9]]]],10],11],[[[38,[9,9,[0,[28,29,9]],[0,[30,9]],[0,[30,9]]]],10],11],[[[40,[[0,[39,9]]]],10],11],[[[42,[[0,[41,9]]]],10],11],[[[31,[9]],10],11],[[23,10],11],[[[44,[[0,[43,9]]]],10],11],[[[51,[50]],12,12]],[[]],[[]],[[12,26]],[[12,26]],[[12,26]],[[12,26]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[52,[12]]],[[33,[32]]]],[53,23],0,[[31,12]],0,[[23,24],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,12],8],[[12,12],8],[[[33,[32]],12],8],[[]],[26],[[]],[[],1],[52],[52],[[[46,[45]],52]],[[[47,[45]],52]],0,[26,[[54,[26,48]]]],[[26,26],[[55,[26,26,48,48]]]],[26,[[56,[26,48]]]],[12,[[49,[45]]]],[[],21],[[30,30],[[37,[[0,[28,29]],30,30]]]],[39,[[40,[39]]]],[41,[[42,[41]]]],[[12,[52,[22]]],57],[[],23],[43,[[44,[43]]]],[[[52,[24]]],[[46,[58]]]],[[[52,[24]]],[[47,[58]]]],[35,1],[36,1],[12,8],[[]],[[[55,[26,26,48,48]]]],[57,22],[[],8],[[]],[[[55,[26,26,48,48]]]],[[]],[[]],[[]],[[[54,[26,48]]]],[[[56,[26,48]]]],[[34,12],48],[[26,12,27,27],[[25,[27]]]],[26,12],[12,8],[[],8],[[[37,[[0,[28,29]],30,30]]]],[[21,22],22],[[23,24]],[26,1],[26,12],[53,25],[[],8],[[[52,[[0,[5,15]]]],12],[[25,[12]]]],[[[49,[45]]],[[1,[12]]]],[[[37,[[0,[13,7,2,14,17,18,59]],[0,[28,29]],30,30]]],[[38,[[0,[13,7,2,14,17,18,59]],[0,[28,29]],30,30]]]],[[[38,[[0,[13,2,16,18]],[0,[28,29]],30,30]]],[[0,[13,2,16,18]]]],[[[37,[9,[0,[13,7,2,14,17,18,59]],9,[0,[28,29]],30,30]]],[[38,[9,[0,[13,7,2,14,17,18,59]],9,[0,[28,29]],30,30]]]],[[12,12],51],[[12,12],51],[12,35],[[26,60,60],60],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[[51,[50]],12,12]],[[]],[[]],[52],[52],[[[46,[58]],52]],[[[47,[58]],52]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[61,61],[62,62],[63,63],[64,64],[65,65],[[[66,[5]]],[[66,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],63],[[],66],0,0,0,[[61,53]],[[62,53]],[[63,53]],[[[66,[15]],53]],[[61,53]],[[62,53]],[[61,53]],[[62,53]],[[61,53]],[[61,10],11],[[62,10],11],[[63,10],11],[[64,10],11],[[65,10],11],[[[66,[9]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[61,12],[[1,[22]]]],[[62,12],[[1,[22]]]],[[61,22,12]],[[62,12,22]],[[63,22,22]],[[[66,[15]],15]],[[61,22,12]],[[62,12,22]],[[61,22,12,12]],[[62,12,22,12]],[[61,22,12,12]],[[]],[[]],[[]],[[]],[[]],[[]],[[65,12],[[1,[[25,[12]]]]]],[[[52,[12]]],12],[[12,12,30],12],[[12,12,30],12],[[[52,[7]],[52,[7]]],12],[66,12],[61,12],[12,61],[12,62],[[],63],[53,64],[[[52,[12]]],65],[[],66],[61,[[1,[22]]]],[[62,22],[[1,[12]]]],[[63,22],22],[[64,22],22],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[[[68,[67,67]]],8],[[[69,[67,67]]],8],[[[70,[67,67]]],8],[[[71,[30,30,30]]],8],[[[72,[67,30,30,30]]],8],[[[73,[67,30,30,30]]],8],[[[74,[15]]],8],[[[75,[15]]],8],[[[76,[58]]],8],[77,8],[12,8],[[78,12],8],[[79,12],12],[[[80,[58]],12]],[[[81,[58]],12]],[[[82,[58]],12,12]],[[[83,[58,[0,[5,15]],[0,[58]]]]]],[[[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[0,[58]]]]]]]],[[[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[0,[58]]]]]]]]]],[[[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[0,[58]]]]]]]]]]]],[[[81,[58]],12]],[[[82,[58]],12,12]],[[[84,[[0,[28,29]]]],[0,[28,29]]]],[[[85,[15]],15]],[[86,22]],[[86,22]],[[[84,[[0,[28,29]]]],[0,[28,29]],12]],[[[85,[15]],15,12]],[[86,22]],[[86,22]],[[[87,[30]]],[[88,[12,[25,[12]]]]]],[[[89,[45]]],[[88,[12,[25,[12]]]]]],[90,[[88,[12,[25,[12]]]]]],[[],91],[92,91],[[[84,[[0,[28,29]]]],[84,[[0,[28,29]]]]]],[[[93,[58]]],52],[[],94],0,[[[95,[58]]],1],[[],12],[78,12],[[96,96]],[[96,96]],[[96,96]],[[96,96]],[[96,96]],[[96,96]],[[96,96]],[[96,96]],[[96,96]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[97,52]],[98],[[]],[[]],[84],[[[85,[15]]]],[[[99,[15]]]],[[[100,[15]]]],[86],[86],[[[81,[58]]],[[81,[58]]]],[[[82,[58]]],[[82,[58]]]],[[[83,[58,5,5]]],[[83,[58,5,5]]]],[[[101,[58,5,5]]],[[101,[58,5,5]]]],[[[103,[102]]],[[103,[102]]]],[[[105,[104]]],[[105,[104]]]],[[[106,[104]]],[[106,[104]]]],[[[93,[58]]],[[93,[58]]]],[[[107,[58]]],[[107,[58]]]],[[[108,[58]]],[[108,[58]]]],[[[95,[58]]],[[95,[58]]]],[[[89,[45]]],[[89,[45]]]],[[[109,[[0,[58,5]],[0,[67,5]]]]],[[109,[[0,[58,5]],[0,[67,5]]]]]],[[[68,[5,5]]],[[68,[5,5]]]],[[[69,[5,5]]],[[69,[5,5]]]],[[[70,[5,5]]],[[70,[5,5]]]],[[[71,[5,5,[0,[30,5]],[0,[30,5]],[0,[30,5]]]]],[[71,[5,5,[0,[30,5]],[0,[30,5]],[0,[30,5]]]]]],[[[72,[[0,[67,5]],5,[0,[30,5]],[0,[30,5]],[0,[30,5]]]]],[[72,[[0,[67,5]],5,[0,[30,5]],[0,[30,5]],[0,[30,5]]]]]],[[[73,[[0,[67,5]],5,5,[0,[30,5]],[0,[30,5]],[0,[30,5]]]]],[[73,[[0,[67,5]],5,5,[0,[30,5]],[0,[30,5]],[0,[30,5]]]]]],[[[74,[5]]],[[74,[5]]]],[[[75,[5]]],[[75,[5]]]],[[[76,[[0,[58,5]]]]],[[76,[[0,[58,5]]]]]],[[[77,[5]]],[[77,[5]]]],[78,78],[96,96],[[[110,[5]]],[[110,[5]]]],[[[111,[5]]],[[111,[5]]]],[[[84,[5]]],[[84,[5]]]],[[[85,[5]]],[[85,[5]]]],[[[112,[5]]],[[112,[5]]]],[98,98],[[[99,[5,5]]],[[99,[5,5]]]],[[[100,[5]]],[[100,[5]]]],[86,86],[97,97],[90,90],[79,79],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[96,96],113],[[[100,[[0,[5,15]]]],[0,[5,15]]],8],[[[99,[[0,[5,15]]]],[0,[5,15]]],8],[96,24],[96,24],0,[91],[[92,91]],[[],[[83,[58]]]],[[],[[101,[58]]]],[[],[[108,[58]]]],[[],[[95,[58]]]],[[],[[116,[104,[0,[[114,[[0,[[0,[104]]]]]],115]]]]]],[[],[[117,[[0,[[114,[0]],115]]]]]],[[],92],[[],[[76,[58]]]],[[],77],[[],96],[[],[[84,[[0,[28,29]]]]]],[[],[[85,[15]]]],[[],[[112,[15]]]],[[],[[99,[15]]]],[[],[[100,[15]]]],[[],86],[118,[[109,[58,118]]]],[118,[[109,[58,118]]]],0,[84,[[119,[12]]]],[[[99,[[0,[5,15]],5]],26]],[[[100,[[0,[5,15]]]],26]],[[[116,[104,[114,[[0,[[0,[104]]]]]]]]]],[[[117,[[114,[0]]]]]],[92],[97,25],[[96,96],8],[[],8],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],53]],[[[84,[[0,[28,29]]]],53]],[[[84,[[0,[28,29]]]],53]],[[[85,[15]],53]],[[[85,[15]],53]],[[[99,[[0,[5,15]],[0,[5,28]]]],53]],[[[100,[[0,[5,15]]]],53]],[[[87,[30]],12],12],[[[89,[45]],12],12],[[97,53],[[19,[12,12]]]],[[90,12],12],[[97,12,53],[[19,[12,12]]]],[[[87,[30]],12],[[120,[0]]]],[[[87,[30]],12],[[121,[0]]]],[[[80,[58]],10],11],[[[81,[58]],10],11],[[[82,[58]],10],11],[[[83,[58,9,9]],10],11],[[[101,[58,9,9]],10],11],[[[103,[102]],10],11],[[[105,[104]],10],11],[[[106,[104]],10],11],[[[93,[58]],10],11],[[[107,[58]],10],11],[[[108,[58]],10],11],[[[95,[58]],10],11],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],10],11],[[[117,[9,9,[114,[0]]]],10],11],[[[89,[45]],10],11],[[[92,[9]],10],11],[[[109,[58,[0,[67,9]]]],10],11],[[[68,[9,9]],10],11],[[[69,[9,9]],10],11],[[[70,[9,9]],10],11],[[[71,[9,9,[0,[30,9]],[0,[30,9]],[0,[30,9]]]],10],11],[[[72,[[0,[67,9]],9,[0,[30,9]],[0,[30,9]],[0,[30,9]]]],10],11],[[[73,[[0,[67,9]],9,9,[0,[30,9]],[0,[30,9]],[0,[30,9]]]],10],11],[[[74,[9]],10],11],[[[75,[9]],10],11],[[[76,[[0,[58,9]]]],10],11],[[[77,[9]],10],11],[[78,10],11],[[96,10],11],[[[110,[9]],10],11],[[[111,[[0,[9,28,29]]]],10],11],[[[84,[9]],10],11],[[[85,[9]],10],11],[[[112,[9]],10],11],[[98,10],11],[[[99,[9,9]],10],11],[[[100,[9]],10],11],[[86,10],11],[[97,10],11],[[90,10],11],[[79,10],11],[[[80,[45]],12,12]],[[[81,[45]],12,12]],[[[82,[45]],12,12,12,12]],[[[101,[58,[0,[5,15]],[0,[58]]]]]],[[[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[0,[58]]]]]]]],[[[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[0,[58]]]]]]]]]],[[[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[0,[58]]]]]]]]]]]],[[[103,[102]],12,12]],[[[105,[104]],12,12]],[[[106,[104]],12,12]],[[[93,[58]],[122,[12]]]],[[[107,[58]],[122,[12]]]],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],[122,[12]]]],[[[109,[58,67]]]],[[[105,[104]]]],[[[106,[104]]]],[[[93,[123]]]],[[[107,[123]]]],[[[108,[58]]]],[[[95,[58]]]],[[[103,[102]],12,12]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[53,[[80,[58]]]],[53,78],[53,[[110,[15]]]],[53,[[111,[[0,[15,29]]]]]],[53,[[84,[[0,[28,29]]]]]],[53,[[84,[[0,[28,29]]]]]],[53,[[85,[15]]]],[53,[[85,[15]]]],[53,[[99,[[0,[5,15]],[0,[5,28]]]]]],[53,[[100,[[0,[5,15]]]]]],[52,[[81,[58]]]],[25,[[105,[104]]]],[25,[[93,[58]]]],[[[95,[58]]],1],[[[81,[45]],12]],[[[82,[45]],12,12]],[[[105,[104]],12]],[[[106,[104]],12]],[[[93,[58]],12]],[[[107,[58]],12]],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],12],1],[[[117,[[124,[[0,[15,118]]]],[114,[0]]]],[0,[15,118]]],1],[[96,12],8],[[[84,[[0,[28,29]]]],[0,[28,29]]],12],[[[85,[15]],15],12],[[[99,[[0,[5,15]]]],[0,[5,15]]],1],[[[89,[45]],12,12],1],[[[117,[[124,[[0,[15,118]]]],[114,[0]]]],[0,[15,118]]],1],[[[117,[[114,[0]]]],12],1],[[[99,[[0,[5,15]]]],[0,[5,15]],26],1],[[[100,[[0,[5,15]]]],[0,[5,15]],26],1],[[[100,[[0,[5,15]]]],[0,[5,15]]],1],[[[99,[[0,[5,15]]]],[0,[5,15]]],1],[[[99,[[0,[5,15]]]],[0,[5,15]],26],1],[[[100,[[0,[5,15]]]],[0,[5,15]],26],1],[[[89,[45]],12]],[52,74],[52,75],[52,74],[52,75],[[96,125]],[[[103,[102]]],12],[[[103,[102]],12]],[[],[[1,[12]]]],[[[110,[15]],15],[[1,[12]]]],[[[111,[[0,[15,29]]]],[0,[15,29]]],[[1,[12]]]],[[],12],[[[110,[15]],15],12],[[[111,[[0,[15,29]]]],[0,[15,29]]],12],[[]],[[[68,[67,67]]]],[[[69,[67,67]]]],[[[70,[67,67]]]],[[[71,[30,30,30]]]],[[[72,[67,30,30,30]]]],[[[73,[67,30,30,30]]]],[[[74,[15]]]],[[[75,[15]]]],[[[76,[58]]]],[77],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],12]],[[[117,[15,[114,[0]]]],15],1],[[[112,[[0,[13,3,15,16,17,18,59]]]],[0,[13,3,15,16,17,18,59]],[0,[13,3,15,16,17,18,59]]]],[[[99,[[0,[5,15]],[0,[5,28]]]],[0,[5,28]]]],[[[100,[[0,[5,15]]]]]],[[97,53],[[25,[12]]]],[[97,12,53],[[25,[12]]]],[[97,12,12],12],[[[99,[[0,[5,15]],[0,[5,28]]]],[0,[5,28]],26]],[[[100,[[0,[5,15]]]],26]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[108,[58]]],8],[[[95,[58]]],8],[[[116,[104]]],8],[[[117,[[114,[0]]]]],8],[84,8],[85,8],[[[89,[45]],12,12],8],0,[84,[[126,[12]]]],[85,[[127,[12]]]],[99,127],[100,128],[99,129],[84,[[130,[12]]]],[85,[[128,[12]]]],[99,128],[[[108,[58]]],1],[[[108,[58]]],12],[[[95,[58]]],12],[[[116,[104]]],12],[[[117,[[114,[0]]]]],12],[84,12],[85,12],[52,74],[52,75],[52,74],[52,75],[[[81,[58]]],12],[[[109,[58,67]],26],[[88,[[0,[28,29]]]]]],[[[87,[30]],12],[[25,[12]]]],[[[89,[45]],12],[[25,[12]]]],[[90,12],[[25,[12]]]],[86],[86,22],[[]],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],12,131]],[12,[[81,[58]]]],[[12,12],[[82,[58]]]],[52,[[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[0,[58]]]]]]]]]],[52,[[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[0,[58]]]]]]]]]]]],[52,[[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[0,[58]]]]]]]],[52,[[83,[58,[0,[5,15]],[0,[58]]]]]],[52,[[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[0,[58]]]]]]]],[52,[[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[0,[58]]]]]]]]]]]],[52,[[101,[58,[0,[5,15]],[0,[58]]]]]],[52,[[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[0,[58]]]]]]]]]],[25,[[103,[102]]]],[53,[[132,[15,15]]]],[12,[[105,[104]]]],[12,[[106,[104]]]],[[12,30,30],[[87,[30]]]],[12,[[93,[58]]]],[12,[[107,[58]]]],[[],[[108,[58]]]],[[],[[95,[58]]]],[[],[[116,[104]]]],[[],117],[12,[[89,[45]]]],[[],92],[67,[[109,[58,67]]]],[[30,30,30],[[71,[30,30,30]]]],[[67,30,30,30],[[72,[67,30,30,30]]]],[[67,30,30,30],[[73,[67,30,30,30]]]],[[],[[76,[58]]]],[[],77],[12,96],[[],[[84,[[0,[28,29]]]]]],[[],[[85,[15]]]],[[],[[112,[[0,[13,3,15,16,17,18,59]]]]]],[12,98],[[],[[99,[15]]]],[[],[[100,[15]]]],[[],86],[12,97],[12,90],[[[25,[[0,[5,133]]]],12],79],[[],1],[[[68,[67,67]]],1],[[[69,[67,67]]],1],[[[70,[67,67]]],1],[[[71,[30,30,30]]],1],[[[72,[67,30,30,30]]],1],[[[73,[67,30,30,30]]],1],[[[74,[15]]],1],[[[75,[15]]],1],[[[76,[58]]],1],[77,1],[[97,12,12],[[1,[12]]]],[97,12],[96],[96],[12,96],[[96,96],[[1,[113]]]],[[[108,[58]]],1],[[[95,[58]]],1],[[[95,[58]]],1],[[[99,[[0,[5,15]]]],[0,[5,15]],26],1],[[[100,[[0,[5,15]]]],[0,[5,15]],26],1],[[[99,[[0,[5,15]]]],[0,[5,15]],26],1],[[[100,[[0,[5,15]]]],[0,[5,15]],26],1],[[[105,[104]],12,12,30],[[1,[12]]]],[[[106,[104]],12,12,30],[[1,[12]]]],[[[93,[58]],[122,[12]],30],[[1,[12]]]],[[[107,[58]],[122,[12]],30],[[1,[12]]]],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],[122,[12]],26],[[1,[12]]]],[[[108,[58]]]],[[[95,[58]]]],[[[95,[58]]]],[[79,[134,[12]],12],12],[[79,[134,[12]],12],12],[[[112,[[0,[13,3,15,16,17,18,59]]]],[0,[13,3,15,16,17,18,59]]],[[1,[[0,[13,3,15,16,17,18,59]]]]]],[[[132,[15,15]],[134,[15]],[134,[15]]],25],[[[117,[[124,[[0,[15,118]]]],[114,[0]]]],[122,[[0,[15,118]]]]],[[0,[[124,[[0,[15,118]]]]]]]],[[[85,[[0,[[124,[15]],15]]]],[122,[15]]],[[135,[[0,[[124,[15]],15]],12]]]],0,[[79,12,[134,[12]]],12],[12,12],[12,12],[12,12],[12,12],[[78,12],12],[[79,12,[134,[12]]],12],[[79,[134,[12]],[134,[12]]],12],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],12],1],[[[117,[[124,[[0,[15,118]]]],[114,[0]]]],[0,[15,118]]],1],[[[84,[[0,[28,29]]]],[0,[28,29]]],8],[[[85,[15]],15],8],[[[99,[[0,[5,15]],5]]]],[[[100,[[0,[5,15]]]]]],[[[117,[[114,[0]]]],12],1],[[[84,[[0,[28,29]]]],[0,[28,29]],12],12],[[[85,[15]],15,12],12],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],[122,[12]]]],[[[87,[30]]],[[25,[12]]]],[[[89,[45]]],[[25,[12]]]],[90,[[25,[12]]]],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],12]],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],12]],[[[105,[104]],12,12,30],[[1,[12]]]],[[[106,[104]],12,12,30],[[1,[12]]]],[[[93,[58]],[122,[12]],30],[[1,[12]]]],[[[107,[58]],[122,[12]],30],[[1,[12]]]],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],[122,[12]],26],[[1,[12]]]],[[[109,[58,67]],26,12]],[[[109,[58,67]],26,12,26]],[[[87,[30]],12,12],8],[[90,12,12],8],[[79,12,12],[[1,[12]]]],[12,[[1,[12]]]],[12,[[1,[12]]]],[[78,12],[[1,[12]]]],[12,[[1,[12]]]],[12,[[1,[12]]]],[[78,12],[[1,[12]]]],[[[81,[45]],12]],[[[82,[45]],12,12]],[[[105,[104]],12]],[[[106,[104]],12]],[[[93,[58]],12]],[[[107,[58]],12]],[[96,12,8]],[[86,22]],[[96,12]],[[96,12]],[[96,12]],[[96,12]],[[96,12]],[[96,12]],[[],12],[[[87,[30]],12],12],[[[89,[45]],12],12],[[[110,[15]]],12],[[[111,[[0,[15,29]]]]],12],[[90,12],12],[[86,22,22]],[[[109,[58,67]],26]],[[[109,[58,67]],26,26]],[[],25],[12,25],[[],25],[12,25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[[87,[30]],12,12],8],[[[89,[45]],12,12],8],[[90,12,12],8],[[[81,[58]],12]],[[[82,[58]],12,12]],[[[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[0,[58]]]]]]]]]],[[[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[0,[58]]]]]]]],[[[83,[58,[0,[5,15]],[0,[58]]]]]],[[[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[83,[58,[0,[5,15]],[0,[58]]]]]]]]]]]],[[[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[0,[58]]]]]]]]]],[[[101,[58,[0,[5,15]],[0,[58]]]]]],[[[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[0,[58]]]]]]]],[[[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[101,[58,[0,[5,15]],[0,[58]]]]]]]]]]]],[[[105,[104]],12,12]],[[[106,[104]],12,12]],[[[93,[58]],12]],[[[107,[58]],12]],[[[116,[104,[114,[[0,[[0,[104]]]]]]]],[122,[12]]]],[[98,12,12,22,22]],[[98,136,12,22,22]],[[22,12],86],[84,[[137,[12]]]],[85,[[138,[12]]]],[99,138],[99,139],[12,[[116,[104]]]],[12,117],[12,92],[12,[[84,[[0,[28,29]]]]]],[[12,12],97],0,0,0,0,0,0,0,0,0,0,0,0,[[],113],[[],8],[[],94],[[],94],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[141,[140]],[141,[140]],[141,[140]]],142],[[[143,[140]],[141,[140]]],142],[[[144,[140]],[141,[140]]],142],[[[141,[140]],[141,[140]],[141,[140]]],142],[[]],[[]],[[]],[[]],[[[146,[[0,[145,5]]]]],[[146,[[0,[145,5]]]]]],[142,142],[[[147,[5]]],[[147,[5]]]],[[[143,[5]]],[[143,[5]]]],[[[144,[5]]],[[144,[5]]]],[[]],[[]],[[]],[[]],[[]],[[[25,[[141,[148]]]]],148],[[[146,[145]],[146,[145]]],113],[[142,142],113],[[[147,[[0,[140,149]]]],[141,[[0,[140,149]]]]],8],[[[52,[[141,[[0,[150,140]]]]]]],[[0,[150,140]]]],[[[25,[[141,[[0,[150,140]]]]]]],[[25,[[141,[[0,[150,140]]]]]]]],[[[147,[[0,[140,149]]]],[147,[[0,[140,149]]]]],1],[[[144,[[0,[140,149]]]],[144,[[0,[140,149]]]]],[[1,[[141,[[0,[140,149]]]]]]]],[[],[[146,[[0,[145,115]]]]]],[[[143,[140]]],[[141,[140]]]],[[[144,[140]]],[[141,[140]]]],[[[144,[[0,[140,149]]]],[144,[[0,[140,149]]]]],[[0,[140,149]]]],[[[143,[[0,[140,149]]]],[141,[[0,[140,149]]]]],[[0,[140,149]]]],[[[144,[[0,[140,149]]]],[141,[[0,[140,149]]]]],[[0,[140,149]]]],[[[146,[145]],[146,[145]]],8],[[142,142],8],[[[147,[7]],[147,[7]]],8],[[[143,[7]],[143,[7]]],8],[[[144,[7]],[144,[7]]],8],[[],8],[[],8],[[[146,[[0,[145,9]]]],10],11],[[142,10],11],[[[147,[9]],10],11],[[[143,[9]],10],11],[[[144,[9]],10],11],[[]],[[]],[[]],[[]],[[]],[[142,125]],[[[144,[140]],[144,[140]]],8],[[[144,[140]],[141,[140]]],8],[[]],[[]],[[]],[[]],[[]],[[[143,[140]],[143,[140]]],8],[[[144,[140]],[144,[140]]],8],[[[143,[140]],[143,[140]]],8],[[[144,[140]],[144,[140]]],8],[[]],[[]],[[[141,[[0,[140,149]]]],[0,[140,149]]],[[147,[[0,[140,149]]]]]],[[141,141],143],[[141,141],144],[[[146,[145]],[146,[145]]],[[1,[113]]]],[[142,142],[[1,[113]]]],[[[143,[[0,[140,149]]]],[141,[[0,[140,149]]]]],[[141,[[0,[140,149]]]]]],[[[144,[[0,[140,149]]]],[141,[[0,[140,149]]]]],[[141,[[0,[140,149]]]]]],[[[143,[[0,[140,149]]]],[141,[[0,[140,149]]]]],[[141,[[0,[140,149]]]]]],[[[144,[[0,[140,149]]]],[141,[[0,[140,149]]]]],[[141,[[0,[140,149]]]]]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[151,12,8,12,8]],[[152,12,12,22]],[[152,12,12,26]],[[152,12,12,12,12,24]],[[152,12,12,12,12,24]],[[153,12,12]],[[154,12,12]],[[155,12,12]],[[156,12,12,24]],[[157,12,12,24,22]],[[151,12,12]],[[151,12,12]],[[154,12,12]],[[[158,[0]]],[[0,[0]]]],[[[158,[0]]],[[0,[0]]]],[[]],[[[159,[30]]]],[[[160,[[0,[28,13]],30]]]],[[[158,[0]]]],[[[158,[0]]]],[[161,12],[[163,[162]]]],[161],[[]],[161],[[]],[[[159,[30]]]],[[[160,[[0,[28,13]],30]]]],[[154,12],[[25,[0]]]],0,[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[]],[[[164,[[0,[28,13]],5]]]],[[[165,[[0,[28,13]],5]]]],[[]],[[[159,[30]],30]],[[[160,[[0,[28,13]],30]],30]],[[[158,[0]],30]],[[[158,[0]],30]],[161],[[[0,[166,167,168,169]],53,8],1],[[[0,[166,167,168,169]],53,8],1],[[[0,[166,167,168,169]],8],1],[[[0,[166,167,168,169]],8],1],[[[0,[167,168]],53]],[[[0,[167,168]],53]],[[[0,[167,168]]]],[[[0,[167,168]]]],[[161,12],[[25,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[153,[170]]]],[[156,171],172],[[157,171],173],[[12,12],156],[[12,12],157],[12,153],[[12,12],153],[[172,12,24,24]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[154,154],[155,155],[174,174],[[[175,[5]]],[[175,[5]]]],[[[176,[5,5]]],[[176,[5,5]]]],[[[164,[5,5]]],[[164,[5,5]]]],[[[165,[5,5,5]]],[[165,[5,5,5]]]],[[[158,[5]]],[[158,[5]]]],[156,156],[172,172],[157,157],[152,152],[177,177],[178,178],[179,179],[162,162],[[[161,[5]]],[[161,[5]]]],[180,180],[151,151],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[175,[15]],[175,[15]]],113],[[[176,[15,15]],[176,[15,15]]],113],[[[164,[15,15]],[164,[15,15]]],113],[[[165,[15,15,15]],[165,[15,15,15]]],113],[[177,177],113],[[178,178],113],[[179,179],113],[[162,162],113],[180,[[25,[[25,[12]]]]]],[26],[[161,26]],[[12,25],161],[[12,25],[[161,[177]]]],[[12,25],[[161,[178]]]],[[12,25],[[161,[179]]]],[26],[[159,26]],[[[160,[[0,[28,13,29]]]],26]],[[158,26]],[[161,26]],[[],154],[[],152],[[],162],[[161,12],[[25,[12]]]],[[161,12],[[25,[8]]]],[[[0,[167,168]],53]],[[[0,[167,168]],53]],[[[0,[167,168]]]],[[[0,[167,168]]]],[[12,12,52],25],[[]],[174,163],0,[174,12],[161,12],[[]],[[[176,[[0,[28,13]],[0,[28,13]]]]]],[[[165,[[0,[28,13]],[0,[28,13]]]]]],[162],0,[[]],[161],[[]],[161],[[]],[[]],[[[175,[7]],[175,[7]]],8],[[[176,[7,7]],[176,[7,7]]],8],[[[164,[7,7]],[164,[7,7]]],8],[[[165,[7,7,7]],[165,[7,7,7]]],8],[[177,177],8],[[178,178],8],[[179,179],8],[[162,162],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],12],[161,12],0,[[]],[[161,[25,[5]]],5],[[161,[52,[5]]],5],[[]],[[156,53]],[[157,53]],[158,12],[[154,10],11],[[155,10],11],[[174,10],11],[[[175,[9]],10],11],[[[176,[9,9]],10],11],[[[164,[9,9]],10],11],[[[165,[9,9,9]],10],11],[[[158,[9]],10],11],[[156,10],11],[[172,10],11],[[157,10],11],[[173,10],11],[[152,10],11],[[177,10],11],[[178,10],11],[[179,10],11],[[162,10],11],[[[161,[9]],10],11],[[180,10],11],[[151,10],11],[[161,26]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[181],[[]],[[],175],[[]],[[],176],[[],164],[[]],[[],165],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,12,52],155],[[12,25],174],[[12,25],[[161,[170]]]],[180,182],[156,171],[157,171],[[172,12],24],[[173,12],24],0,[180,8],[[[175,[29]],125]],[[[176,[29,29]],125]],[[[164,[29,29]],125]],[[[165,[29,29,29]],125]],[[177,125]],[[178,125]],[[179,125]],[[162,125]],0,[155],0,[[174,12]],[[180,12]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[155],0,[[164,26],164],[[165,26],165],[[172,12,12],24],[[172,12,12,24],24],[155],[155,25],[[173,12,12]],[[173,12,12,24]],[[172,12],[[25,[8]]]],[155,25],[[174,12,30],1],[[174,30],[[25,[8]]]],[155],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[158,1],[[[184,[183,183]],48],1],[[[185,[183,183]],48],1],[[[186,[183,183,170]],48],1],[[[187,[183,183]],48],1],[[]],[[]],[[]],[[]],[[12,12,8],[[184,[183,183]]]],[12,159],[[],160],[[12,12],[[185,[183,183]]]],[188,[[189,[188]]]],[[],[[191,[[190,[5]],5]]]],[192,193],[12,153],[[12,12],[[186,[183,183]]]],[12,[[187,[183,183]]]],[12,154],[[12,12],155],[12,174],[[12,12],158],[[12,12],156],[[12,12],157],[[12,12],152],[[12,12],162],[182,180],[12,151],[[12,12],[[158,[0]]]],[[12,12],[[158,[0]]]],[[12,12],153],[[[189,[[0,[188,194]]]]],1],[[[191,[[190,[5]],30,5]]],1],0,[[[175,[150]],[175,[150]]],[[1,[113]]]],[[[176,[150,150]],[176,[150,150]]],[[1,[113]]]],[[[164,[150,150]],[164,[150,150]]],[[1,[113]]]],[[[165,[150,150,150]],[165,[150,150,150]]],[[1,[113]]]],[[177,177],[[1,[113]]]],[[178,178],[[1,[113]]]],[[179,179],[[1,[113]]]],[[162,162],[[1,[113]]]],[[151,12]],[[151,12]],[180,12],[152],[[]],[[]],[[]],[[]],0,0,[[182,30,30],195],[[192,30,30],195],[[171,30,30],195],[[[161,[177]],30,30],195],[[[161,[179]],30,30],195],[[[161,[178]],30,30],195],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[161,[[25,[12]]]],[192,196],[[[161,[178]]],196],[[192,12],[[25,[24]]]],[[[161,[178]],12],[[25,[24]]]],[[192,12,52,26]],[[[161,[178]],12,52,26]],[[192,12,52,26]],[[[161,[178]],12,52,26]],[[161,12]],[[192,12],[[25,[24]]]],[[[161,[178]],12],[[25,[24]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[151,[[1,[[25,[8]]]]]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[158,12]],[[]],[159],[[[160,[[0,[28,13]],30]]]],[154,[[134,[12]]]],[174,[[134,[12]]]],[158],[161,[[134,[12]]]],[161],[174,12],[161,12],[[]],[[[175,[[0,[28,13]]]]]],[[[176,[[0,[28,13]]]]]],[[[164,[[0,[28,13]]]]]],[[[165,[[0,[28,13]]]]]],[162],[[]],[159],[[[160,[[0,[28,13,29]]]]],5],[158],[161],[[]],[159],[[[160,[[0,[28,13,29]]]]],5],[158],[161],[[]],[[]],[[],12],[161,12],0,[[]],[[159,[52,[5]]],5],[[159,[25,[5]]],5],[[]],[[]],[[[160,[[0,[28,13,29]]]]],5],[[158,[25,[[25,[5]]]]],5],[[]],[[161,[25,[5]]],5],[[161,[52,[5]]],5],[[]],[[[0,[166,167,167,168]]]],[[[0,[166,167,167,168]]]],[[192,12,30],25],[[[161,[178]],12,30],25],0,[[[25,[12]]],152],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[198,[197]],[198,[197]]]],[[[198,[197]],[198,[197]]]],[[[198,[197]],197]],[[[198,[197]],[198,[197]]]],[[[198,[197]],197]],[[[198,[197]],[198,[197]]]],[[[198,[197]],197]],[[[198,[197]],197]],[[[199,[[0,[13,2,16]]]],[199,[[0,[13,2,16]]]]]],[[[200,[[0,[13,16]]]],[200,[[0,[13,16]]]]]],[[[198,[197]],197]],[[[198,[197]],[198,[197]]]],[[[198,[197]],[198,[197]]]],[[[198,[197]],197]],[[[200,[[0,[5,2,16,18]]]],[0,[5,2,16,18]]],[[0,[5,2,16,18]]]],[[[52,[[0,[2,14,5,7,16,17,18,59]]]]],[[25,[[0,[2,14,5,7,16,17,18,59]]]]]],[[[0,[5,201]],12,[0,[5,201]]],[[0,[5,201]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[198,[197,202]],[198,[197,202]],12],197],[[24,24,[204,[203]],52],8],[[[206,[[0,[[205,[12]],5]]]]],[[206,[[0,[[205,[12]],5]]]]]],[[[207,[[0,[[205,[12]],5]]]]],[[207,[[0,[[205,[12]],5]]]]]],[[[208,[[0,[[205,[12]],5]]]]],[[208,[[0,[[205,[12]],5]]]]]],[[[198,[5]]],[[198,[5]]]],[[[199,[5]]],[[199,[5]]]],[[[200,[5]]],[[200,[5]]]],[209,209],[210,210],[211,211],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[206,[[205,[12]]]],12,12],[[212,[[205,[12]]]]]],[[[207,[[205,[12]]]],12,12],[[212,[[205,[12]]]]]],[[]],[[]],[[]],[[]],[[210,24],24],[[211,213],213],[[[198,[197,202]],12,26],[[198,[197,202]]]],[[[198,[197,202]],12,26],[[198,[197,202]]]],0,0,0,[[],[[207,[[205,[12]]]]]],[[],[[198,[115,115]]]],[[],[[200,[115]]]],[[],210],[[[199,[[0,[13,7,2,14,17,18,59]]]]],[[0,[13,7,2,14,17,18,59]]]],[[[198,[197]]],[[198,[197]]]],[[24,24,24],[[1,[24]]]],[[24,24,24],[[1,[24]]]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197]],197]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197]],197]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197]],197]],[[[198,[197]],197]],[[[200,[[0,[13,2,17,18,59]]]],[200,[[0,[13,2,17,18,59]]]]]],[[[198,[197]],197]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197]],197]],[[[198,[197,202]],[198,[197,202]]]],[24,[[25,[24]]]],[[210,24],[[25,[24]]]],[[211,213],[[25,[213]]]],[[[198,[7]],[198,[7]]],8],[[[199,[7]],[199,[7]]],8],[[[200,[7]],[200,[7]]],8],[[],8],[[],8],[[],8],[12,12],[[[198,[197]],197],197],[[[198,[197]]],[[198,[197]]]],[[[198,[197,202]],12],[[198,[197,202]]]],[[22,22]],[[22,22]],[[22,22]],[[],[[199,[[0,[5,2,14]]]]]],0,[[[207,[[205,[12]]]],12]],[[24,24,24,24],24],[[22,22,22,22,24],22],[[22,22,22,22,24,[134,[22]]],22],[[[206,[[0,[[205,[12]],9]]]],10],11],[[[207,[[0,[[205,[12]],9]]]],10],11],[[[208,[[0,[[205,[12]],9]]]],10],11],[[[198,[9,9]],10],11],[[[199,[9]],10],11],[[[200,[9]],10],11],[[209,10],11],[[210,10],11],[[211,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[181],[25,198],[[],198],[[]],[[]],[[]],[[]],[[]],[53,198],[25,198],[[[25,[25]]],199],[25,200],[[24,24],24],[[24,24],24],[[209,12],12],[203,25],[[[206,[[205,[12]]]],12,12],[[212,[[205,[12]]]]]],[[198,12]],[[199,12]],[199],[[200,12]],[[198,12]],[199],[[199,12]],[[200,12]],[[[198,[197]]],[[198,[197]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[198],[[[206,[[205,[12]]]],12],[[212,[[205,[12]]]]]],[[[208,[[205,[12]]]]],[[212,[[205,[12]]]]]],[[[198,[197,202]],12],[[198,[197,202]]]],0,[[[199,[[0,[13,7,2,14,17,18,59]]]]],[[1,[[199,[[0,[13,7,2,14,17,18,59]]]]]]]],[12],[12],[12],[12],[[210,24],8],[[211,213],8],[198,163],[198,214],[[[25,[197]],12],197],[[[198,[197,202]],[25,[197]],12],197],[[[52,[[212,[32]]]],[52,[[212,[32]]]],[212,[32]]],[[212,[32]]]],[[[206,[[205,[12]]]],12,30,[212,[[205,[12]]]]],[[212,[[205,[12]]]]]],[[[52,[[212,[32]]]],[52,[[212,[32]]]]],[[25,[[212,[32]]]]]],[[24,24],24],[[],12],[[],12],[[],12],[[],12],[198,12],[200,12],[53,1],[[53,12,26],[[198,[197,202]]]],[[[198,[197,202]],12],[[198,[197,202]]]],[24,8],[[24,[204,[203]]],8],[[24,24],24],[[24,24],24],[[24,24],24],[12,[[88,[12,22]]]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197]],197]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197]],197]],[[[198,[202]],[198,[202]]]],[[[198,[197]],197]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197]],197]],[[[199,[[0,[13,2,16,18]]]],[199,[[0,[13,2,16,18]]]]]],[[[200,[[0,[13,2,16,18]]]],[200,[[0,[13,2,16,18]]]]]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197]],197]],[[[198,[197]],197]],[[[198,[197,202]],[198,[197,202]]]],[[]],[[]],[[]],[[]],[[[198,[197,202]],[52,[197]]],[[25,[197]]]],[[[198,[197]]]],[[[198,[197]]]],[12,[[206,[[205,[12]]]]]],[[],[[207,[[205,[12]]]]]],[[[212,[[205,[12]]]]],[[208,[[205,[12]]]]]],[5,[[199,[5]]]],[12,209],[24,210],[213,211],[[[198,[197]]],[[198,[197]]]],[[],[[198,[[0,[7,14]]]]]],[[],[[200,[[0,[2,14]]]]]],[[[206,[[205,[12]]]],12,12],[[212,[[205,[12]]]]]],[[[208,[[205,[12]]]],12],[[212,[[205,[12]]]]]],[[[198,[197,202]],12,12],[[198,[197,202]]]],[[[199,[[0,[13,2,14,16,18]]]],12],[[199,[[0,[13,2,14,16,18]]]]]],[[[200,[[0,[13,2,14,16,18]]]],12],[[200,[[0,[13,2,14,16,18]]]]]],[[[208,[[205,[12]]]],136],[[212,[[205,[12]]]]]],[[[198,[197]],12],[[198,[197]]]],[[[198,[197]],12],[[198,[197]]]],[24,25],[[210,24],25],[[211,213],25],[24,[[25,[24]]]],[210,[[52,[24]]]],[211,48],[[210,24],[[52,[24]]]],[24,24],[[53,12],[[198,[197,202]]]],[[[199,[[0,[13,7,2,14,17,18,59]]]]],12],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197,202]],[198,[197,202]]]],[[[200,[[0,[13,2,17,18,59]]]],[200,[[0,[13,2,17,18,59]]]]]],[[[198,[197,202]],[198,[197,202]]]],[[[198,[197,202]],[198,[197,202]]]],[[210,24]],[[[198,[2]],12]],[[[198,[2]],12],[[198,[2]]]],[[[198,[2]]],[[198,[2]]]],[[[199,[[0,[13,7,2,14,17,18,59]]]],8]],0,[[[198,[197]],12]],[[[198,[197]],12]],[[[198,[197]],12]],[[[198,[197]],12]],[[[198,[197]],12]],[[[198,[197]],12]],[[[199,[[0,[13,7,2,14,17,18,59]]]],[52,[[0,[13,7,2,14,17,18,59]]]]],[[1,[[25,[[0,[13,7,2,14,17,18,59]]]]]]]],[[[198,[215,202]],12],[[1,[[198,[215,202]]]]]],[[],1],[[[198,[197]],[198,[197]]]],[[[198,[197]],197]],[[[198,[197]],[198,[197]]]],[[[198,[197]],197]],[[[198,[197]],197]],[[[198,[197]],[198,[197]]]],[[[198,[197]],197]],[[[198,[197]],[198,[197]]]],[[[199,[[0,[13,2,17]]]],[199,[[0,[13,2,17]]]]]],[[[200,[[0,[13,17]]]],[200,[[0,[13,17]]]]]],[[[198,[197]],[198,[197]]]],[[[198,[197]],197]],[[[198,[197]],197]],[[[198,[197]],[198,[197]]]],[[53,12]],[[[198,[[212,[[205,[12]]]],202]],[212,[[205,[12]]]],[206,[[205,[12]]]]],[[198,[[212,[[205,[12]]]],202]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12],[12],[12],[12],0,[[211,213,26]],[[[198,[[0,[2,7]]]]]],[[198,12]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],[[198,[7]]]],[[],200],[12,[[198,[2]]]],[[],[[199,[[0,[5,2]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[141,[149]]],149],[216,216],[217,217],[218,218],[[[219,[136]]],[[219,[136]]]],[[[219,[220]]],[[219,[220]]]],[[[219,[221]]],[[219,[221]]]],[[[219,[222]]],[[219,[222]]]],[[[219,[22]]],[[219,[22]]]],[[[219,[223]]],[[219,[223]]]],[[[224,[221]]],[[224,[221]]]],[[[224,[223]]],[[224,[223]]]],[[[224,[220]]],[[224,[220]]]],[[[224,[136]]],[[224,[136]]]],[[[224,[22]]],[[224,[22]]]],[[[224,[222]]],[[224,[222]]]],[225,225],[[[227,[226]]],[[227,[226]]]],[[]],[[]],[[]],[217,217],[218,218],[[]],[217,217],[218,218],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[141,[16]],16]],[[[141,[[0,[5,16]]]],[141,[[0,[5,16]]]]]],[[[141,[16]],[141,[16]]]],[[[141,[[0,[5,16]]]],[0,[5,16]]]],[[[141,[[0,[5,16]]]],[0,[5,16]]]],[[[141,[[0,[5,16]]]],[0,[5,16]]]],[[[141,[[0,[5,16]]]],[141,[[0,[5,16]]]]]],[[[141,[[0,[5,16]]]],[141,[[0,[5,16]]]]]],[[216,216]],[[216,148]],[[217,217]],[[218,218]],[[[219,[12]],[219,[12]]]],[[[219,[223]],[219,[223]]]],[[[219,[220]],[219,[220]]]],[[[219,[221]],[219,[221]]]],[[[219,[136]],[219,[136]]]],[[[219,[228]],[219,[228]]]],[[[219,[229]],[219,[229]]]],[[[219,[24]],[219,[24]]]],[[[219,[203]],[219,[203]]]],[[[219,[222]],[219,[222]]]],[[[219,[22]],[219,[22]]]],[[[219,[213]],[219,[213]]]],[[[224,[136]],[224,[136]]]],[[[224,[222]],[224,[222]]]],[[[224,[229]],[224,[229]]]],[[[224,[12]],[224,[12]]]],[[[224,[213]],[224,[213]]]],[[[224,[221]],[224,[221]]]],[[[224,[223]],[224,[223]]]],[[[224,[24]],[224,[24]]]],[[[224,[22]],[224,[22]]]],[[[224,[203]],[224,[203]]]],[[[224,[220]],[224,[220]]]],[[[224,[228]],[224,[228]]]],[[225,148]],[[225,225]],[[[227,[226]],[227,[226]]]],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[141,[[0,[5,16]]]],[0,[5,16]]]],[[[141,[[0,[5,16]]]],[141,[[0,[5,16]]]]]],[[[141,[[0,[5,16]]]],[0,[5,16]]]],[[[141,[[0,[5,16]]]],[141,[[0,[5,16]]]]]],[[[219,[213]],[219,[213]]]],[[[219,[220]],[219,[220]]]],[[[219,[203]],[219,[203]]]],[[[219,[221]],[219,[221]]]],[[[219,[12]],[219,[12]]]],[[[219,[136]],[219,[136]]]],[[[219,[222]],[219,[222]]]],[[[219,[229]],[219,[229]]]],[[[219,[22]],[219,[22]]]],[[[219,[228]],[219,[228]]]],[[[219,[223]],[219,[223]]]],[[[219,[24]],[219,[24]]]],[[[224,[228]],[224,[228]]]],[[[224,[213]],[224,[213]]]],[[[224,[222]],[224,[222]]]],[[[224,[229]],[224,[229]]]],[[[224,[12]],[224,[12]]]],[[[224,[203]],[224,[203]]]],[[[224,[136]],[224,[136]]]],[[[224,[22]],[224,[22]]]],[[[224,[220]],[224,[220]]]],[[[224,[223]],[224,[223]]]],[[[224,[24]],[224,[24]]]],[[[224,[221]],[224,[221]]]],[[[227,[226]],[227,[226]]]],[[[141,[149]]],149],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[]],[217,217],[218,218],[[]],[217,217],[218,218],[[]],[217,217],[218,218],[[]],[[217,217],217],[[218,218],218],[[]],[217,217],[218,218],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[[219,[230]],[219,[230]]]],[[[224,[230]],[224,[230]]]],[[[219,[231]],[219,[231]]]],[[[224,[231]],[224,[231]]]],[[[219,[232]],[219,[232]]]],[[[224,[232]],[224,[232]]]],[[[219,[233]],[219,[233]]]],[[[224,[233]],[224,[233]]]],[[[219,[234]],[219,[234]]]],[[[224,[234]],[224,[234]]]],[[[219,[235]],[219,[235]]]],[[[224,[235]],[224,[235]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[217,217],[218,218],[[]],[217,217],[218,218],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],236],[217,236],[218,236],[[[212,[32]]],[[212,[32]]]],[[[204,[5]]],[[204,[5]]]],[[[141,[5]]],[[141,[5]]]],[216,216],[217,217],[218,218],[[[219,[5]]],[[219,[5]]]],[[[224,[5]]],[[224,[5]]]],[225,225],[[[227,[[0,[226,5]]]]],[[227,[[0,[226,5]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[141,[15]],[141,[15]]],113],[[216,216],113],[[217,217],113],[[218,218],113],[[[219,[15]],[219,[15]]],113],[[[224,[15]],[224,[15]]],113],[[[227,[226]],[227,[226]]],113],[[[141,[[0,[2,15,18]]]],[141,[[0,[2,15,18]]]]],113],[[[141,[237]]],[[141,[237]]]],[[]],[[217,217],217],[[218,218],218],[[]],[217,217],[218,218],[[]],[217,217],[218,218],[[]],[[[219,[24]]],213],[[[219,[203]]],213],[[[219,[136]]],213],[[[219,[221]]],213],[[[219,[22]]],213],[[[219,[228]]],213],[[[219,[222]]],213],[[[219,[12]]],213],[[[219,[223]]],213],[[[219,[213]]],213],[[[219,[220]]],213],[[[219,[229]]],213],[[[224,[22]]],213],[[[224,[213]]],213],[[[224,[222]]],213],[[[224,[136]]],213],[[[224,[12]]],213],[[[224,[229]]],213],[[[224,[220]]],213],[[[224,[223]]],213],[[[224,[228]]],213],[[[224,[24]]],213],[[[224,[221]]],213],[[[224,[203]]],213],[[]],[[[219,[228]]],213],[[[219,[229]]],213],[[[219,[136]]],213],[[[219,[22]]],213],[[[219,[221]]],213],[[[219,[220]]],213],[[[219,[213]]],213],[[[219,[222]]],213],[[[219,[203]]],213],[[[219,[12]]],213],[[[219,[223]]],213],[[[219,[24]]],213],[[[224,[223]]],213],[[[224,[12]]],213],[[[224,[213]]],213],[[[224,[24]]],213],[[[224,[22]]],213],[[[224,[221]]],213],[[[224,[228]]],213],[[[224,[222]]],213],[[[224,[203]]],213],[[[224,[136]]],213],[[[224,[229]]],213],[[[224,[220]]],213],[[[141,[18]],[141,[18]]]],[[],[[212,[32]]]],[[],[[141,[115]]]],[[],216],[[],217],[[],218],[[],[[219,[115]]]],[[],[[224,[115]]]],[[],225],[[]],0,[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[204,[24]],24],24],[[[204,[203]],203],203],[[[204,[213]],213],213],[[[141,[[0,[5,59]]]],[0,[5,59]]]],[[[141,[[0,[5,59]]]],[0,[5,59]]]],[[[141,[[0,[5,16,17,18,59]]]],[141,[[0,[5,16,17,18,59]]]]]],[[[141,[[0,[5,16,17,18,59]]]],[141,[[0,[5,16,17,18,59]]]]]],[[[141,[[0,[5,59]]]],[0,[5,59]]]],[[[141,[[0,[5,16,17,18,59]]]],[141,[[0,[5,16,17,18,59]]]]]],[[[141,[[0,[5,59]]]],[0,[5,59]]]],[[[141,[[0,[5,16,17,18,59]]]],[141,[[0,[5,16,17,18,59]]]]]],[[216,216]],[[217,217]],[[218,218]],[[[219,[59]],[219,[59]]]],[[[224,[223]],[224,[223]]]],[[[224,[222]],[224,[222]]]],[[[224,[220]],[224,[220]]]],[[[224,[229]],[224,[229]]]],[[[224,[213]],[224,[213]]]],[[[224,[221]],[224,[221]]]],[[[224,[24]],[224,[24]]]],[[[224,[22]],[224,[22]]]],[[[224,[203]],[224,[203]]]],[[[224,[136]],[224,[136]]]],[[[224,[12]],[224,[12]]]],[[[224,[228]],[224,[228]]]],[[225,225]],[[[227,[226]],[227,[226]]]],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[141,[[0,[5,59]]]],[0,[5,59]]]],[[[141,[[0,[5,59]]]],[0,[5,59]]]],[[[141,[[0,[5,16,17,18,59]]]],[141,[[0,[5,16,17,18,59]]]]]],[[[141,[[0,[5,16,17,18,59]]]],[141,[[0,[5,16,17,18,59]]]]]],[[[219,[238]],[219,[238]]]],[[[224,[221]],[224,[221]]]],[[[224,[24]],[224,[24]]]],[[[224,[220]],[224,[220]]]],[[[224,[203]],[224,[203]]]],[[[224,[223]],[224,[223]]]],[[[224,[229]],[224,[229]]]],[[[224,[213]],[224,[213]]]],[[[224,[12]],[224,[12]]]],[[[224,[222]],[224,[222]]]],[[[224,[22]],[224,[22]]]],[[[224,[136]],[224,[136]]]],[[[224,[228]],[224,[228]]]],[[[227,[226]],[227,[226]]]],[[]],[[]],[[217,217],217],[[218,218],218],[[[219,[24]],[219,[24]]],[[219,[24]]]],[[[219,[220]],[219,[220]]],[[219,[220]]]],[[[219,[12]],[219,[12]]],[[219,[12]]]],[[[219,[203]],[219,[203]]],[[219,[203]]]],[[[219,[229]],[219,[229]]],[[219,[229]]]],[[[219,[228]],[219,[228]]],[[219,[228]]]],[[[219,[22]],[219,[22]]],[[219,[22]]]],[[[219,[221]],[219,[221]]],[[219,[221]]]],[[[219,[223]],[219,[223]]],[[219,[223]]]],[[[219,[213]],[219,[213]]],[[219,[213]]]],[[[219,[222]],[219,[222]]],[[219,[222]]]],[[[219,[136]],[219,[136]]],[[219,[136]]]],[[[224,[22]],[224,[22]]],[[224,[22]]]],[[[224,[12]],[224,[12]]],[[224,[12]]]],[[[224,[203]],[224,[203]]],[[224,[203]]]],[[[224,[228]],[224,[228]]],[[224,[228]]]],[[[224,[222]],[224,[222]]],[[224,[222]]]],[[[224,[229]],[224,[229]]],[[224,[229]]]],[[[224,[223]],[224,[223]]],[[224,[223]]]],[[[224,[213]],[224,[213]]],[[224,[213]]]],[[[224,[24]],[224,[24]]],[[224,[24]]]],[[[224,[220]],[224,[220]]],[[224,[220]]]],[[[224,[221]],[224,[221]]],[[224,[221]]]],[[[224,[136]],[224,[136]]],[[224,[136]]]],[[[204,[24]],24]],[[[204,[213]],213]],[[[204,[203]],203]],[[[141,[18]],[141,[18]]]],[[]],[[],1],[[]],[[],1],[[[212,[32]],[212,[32]]],8],[[[141,[7]],[141,[7]]],8],[[216,216],8],[[217,217],8],[[218,218],8],[[[219,[7]],[219,[7]]],8],[[[224,[7]],[224,[7]]],8],[[225,225],8],[[[227,[226]],[227,[226]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[]],[217,217],[218,218],[[]],[217,217],[218,218],[[]],[217,217],[218,218],[[],239],[[],239],[[]],[217,217],[218,218],[[[212,[205]],10],[[19,[240]]]],[[[212,[32]],10],11],[[[204,[9]],10],11],[[[141,[9]],10],11],[[216,10],11],[[216,10],11],[[217,10],11],[[217,10],11],[[218,10],11],[[218,10],11],[[[219,[9]],10],11],[[[219,[241]],10],11],[[[224,[241]],10],11],[[[224,[9]],10],11],[[225,10],11],[[225,10],11],[[[227,[[0,[226,9]]]],10],11],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[]],[217,217],[218,218],[[]],[[]],[213,[[212,[[205,[213]]]]]],[222,[[212,[[205,[222]]]]]],[223,[[212,[[205,[223]]]]]],[22,[[212,[[205,[22]]]]]],[12,[[212,[[205,[12]]]]]],[228,[[212,[[205,[228]]]]]],[229,[[212,[[205,[229]]]]]],[[]],[221,[[212,[[205,[221]]]]]],[220,[[212,[[205,[220]]]]]],[203,[[212,[[205,[203]]]]]],[24,[[212,[[205,[24]]]]]],[136,[[212,[[205,[136]]]]]],[[]],[[]],[[]],[148,216],[[]],[242,217],[148,218],[[]],[222,[[219,[222]]]],[229,[[219,[229]]]],[213,[[219,[213]]]],[228,[[219,[228]]]],[[]],[203,[[219,[203]]]],[223,[[219,[223]]]],[136,[[219,[136]]]],[24,[[219,[24]]]],[12,[[219,[12]]]],[220,[[219,[220]]]],[221,[[219,[221]]]],[22,[[219,[22]]]],[221,[[224,[221]]]],[213,[[224,[213]]]],[[]],[223,[[224,[223]]]],[229,[[224,[229]]]],[136,[[224,[136]]]],[12,[[224,[12]]]],[222,[[224,[222]]]],[228,[[224,[228]]]],[203,[[224,[203]]]],[22,[[224,[22]]]],[220,[[224,[220]]]],[24,[[224,[24]]]],[[]],[148,225],[[]],[24],[24,217],[24,218],[243,[[19,[[212,[205]]]]]],[243,[[19,[216]]]],[243,[[19,[217]]]],[243,[[19,[218]]]],[243,[[19,[[219,[244]]]]]],[243,[[19,[[224,[244]]]]]],[243,[[19,[225]]]],[[243,213],19],[[243,213],[[19,[[219,[12]]]]]],[[243,213],[[19,[[219,[223]]]]]],[[243,213],[[19,[[219,[220]]]]]],[[243,213],[[19,[[219,[221]]]]]],[[243,213],[[19,[[219,[228]]]]]],[[243,213],[[19,[[219,[203]]]]]],[[243,213],[[19,[[219,[213]]]]]],[[243,213],[[19,[[219,[222]]]]]],[[243,213],[[19,[[219,[24]]]]]],[[243,213],[[19,[[219,[136]]]]]],[[243,213],[[19,[[219,[22]]]]]],[[243,213],[[19,[[219,[229]]]]]],[[243,213],[[19,[[224,[221]]]]]],[[243,213],[[19,[[224,[228]]]]]],[[243,213],[[19,[[224,[220]]]]]],[[243,213],[[19,[[224,[12]]]]]],[[243,213],[[19,[[224,[229]]]]]],[[243,213],[[19,[[224,[24]]]]]],[[243,213],[[19,[[224,[213]]]]]],[[243,213],[[19,[[224,[223]]]]]],[[243,213],[[19,[[224,[222]]]]]],[[243,213],[[19,[[224,[203]]]]]],[[243,213],[[19,[[224,[136]]]]]],[[243,213],[[19,[[224,[22]]]]]],0,[[]],[[[219,[228]],[219,[228]]],[[219,[228]]]],[[[219,[24]],[219,[24]]],[[219,[24]]]],[[[219,[203]],[219,[203]]],[[219,[203]]]],[[[219,[12]],[219,[12]]],[[219,[12]]]],[[[219,[229]],[219,[229]]],[[219,[229]]]],[[[219,[213]],[219,[213]]],[[219,[213]]]],[[[224,[12]],[224,[12]]],[[224,[12]]]],[[[224,[228]],[224,[228]]],[[224,[228]]]],[[[224,[24]],[224,[24]]],[[224,[24]]]],[[[224,[203]],[224,[203]]],[[224,[203]]]],[[[224,[229]],[224,[229]]],[[224,[229]]]],[[[224,[213]],[224,[213]]],[[224,[213]]]],[[]],[[]],[[[204,[213]]],213],[[[204,[203]]],203],[[[204,[24]]],24],[[[212,[32]],125]],[[[141,[29]],125]],[[[219,[29]],125]],[[[224,[29]],125]],[[]],[[217,217],217],[[218,218],218],[[],[[141,[[0,[2,14]]]]]],0,[[225,12]],[[[212,[205]]]],[[[227,[226]]],226],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[212,[32]]],[[212,[32]]]],[[],8],[217,8],[218,8],[[],8],[217,8],[218,8],[[],8],[[],8],[[],8],[[],8],[[],8],[217,8],[218,8],[[],8],[[[219,[22]]],8],[[[219,[221]]],8],[[[219,[223]]],8],[[[219,[222]]],8],[[[219,[136]]],8],[[[219,[220]]],8],[[[224,[223]]],8],[[[224,[22]]],8],[[[224,[136]]],8],[[[224,[221]]],8],[[[224,[220]]],8],[[[224,[222]]],8],[[],8],[217,8],[218,8],[7,8],[7,8],[[],8],[[[219,[22]]],8],[[[219,[220]]],8],[[[219,[223]]],8],[[[219,[136]]],8],[[[219,[221]]],8],[[[219,[222]]],8],[[[224,[22]]],8],[[[224,[222]]],8],[[[224,[220]]],8],[[[224,[136]]],8],[[[224,[221]]],8],[[[224,[223]]],8],[[],8],[217,8],[218,8],[[],8],[217,8],[218,8],[7,8],[7,8],[216,8],[225,8],[[]],[[]],[[]],[[[219,[12]]],213],[[[219,[228]]],213],[[[219,[222]]],213],[[[219,[220]]],213],[[[219,[203]]],213],[[[219,[24]]],213],[[[219,[213]]],213],[[[219,[221]]],213],[[[219,[22]]],213],[[[219,[229]]],213],[[[219,[136]]],213],[[[219,[223]]],213],[[[224,[220]]],213],[[[224,[136]]],213],[[[224,[221]]],213],[[[224,[228]]],213],[[[224,[12]]],213],[[[224,[223]]],213],[[[224,[229]]],213],[[[224,[222]]],213],[[[224,[213]]],213],[[[224,[22]]],213],[[[224,[24]]],213],[[[224,[203]]],213],[[]],[217,217],[218,218],[[]],[217,217],[218,218],[[]],[[217,217],217],[[218,218],218],[[]],[217,217],[218,218],[[]],[217,217],[218,218],[[]],[[217,217],217],[[218,218],218],[[]],[[],216],[[],217],[[],218],[[],[[219,[3]]]],[[],[[224,[3]]]],[[],[[227,[226]]]],[[]],[[217,217],217],[[218,218],218],[[]],[[],216],[[],217],[[],218],[[],[[219,[3]]]],[[],[[224,[3]]]],[[],[[227,[226]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12],[12],[[]],[[]],[[]],[[]],0,[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[141,[[0,[5,16,17,18]]]],[141,[[0,[5,16,17,18]]]]]],[[[141,[[0,[5,16,17,18]]]],[141,[[0,[5,16,17,18]]]]]],[[[141,[[0,[5,16,17,18]]]],[141,[[0,[5,16,17,18]]]]]],[[[141,[[0,[5,18]]]],[0,[5,18]]]],[[[141,[[0,[5,18]]]],[0,[5,18]]]],[[[141,[[0,[5,18]]]],[141,[[0,[5,18]]]]]],[[[141,[[0,[5,18]]]],[0,[5,18]]]],[[[141,[[0,[5,18]]]],[0,[5,18]]]],[[216,216]],[[216,148]],[[217,217]],[[218,218]],[[[219,[24]],[219,[24]]]],[[[219,[213]],[219,[213]]]],[[[219,[229]],[219,[229]]]],[[[219,[221]],[219,[221]]]],[[[219,[222]],[219,[222]]]],[[[219,[12]],[219,[12]]]],[[[219,[22]],[219,[22]]]],[[[219,[136]],[219,[136]]]],[[[219,[228]],[219,[228]]]],[[[219,[220]],[219,[220]]]],[[[219,[203]],[219,[203]]]],[[[219,[223]],[219,[223]]]],[[[224,[221]],[224,[221]]]],[[[224,[223]],[224,[223]]]],[[[224,[222]],[224,[222]]]],[[[224,[24]],[224,[24]]]],[[[224,[136]],[224,[136]]]],[[[224,[213]],[224,[213]]]],[[[224,[228]],[224,[228]]]],[[[224,[12]],[224,[12]]]],[[[224,[220]],[224,[220]]]],[[[224,[229]],[224,[229]]]],[[[224,[203]],[224,[203]]]],[[[224,[22]],[224,[22]]]],[[225,148]],[[225,225]],[[[227,[226]],[227,[226]]]],[[]],[[217,217,217],217],[[218,218,218],218],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[141,[[0,[5,18]]]],[0,[5,18]]]],[[[141,[[0,[5,16,17,18]]]],[141,[[0,[5,16,17,18]]]]]],[[[141,[[0,[5,16,17,18]]]],[141,[[0,[5,16,17,18]]]]]],[[[141,[[0,[5,18]]]],[0,[5,18]]]],[[[219,[228]],[219,[228]]]],[[[219,[203]],[219,[203]]]],[[[219,[136]],[219,[136]]]],[[[219,[24]],[219,[24]]]],[[[219,[223]],[219,[223]]]],[[[219,[213]],[219,[213]]]],[[[219,[221]],[219,[221]]]],[[[219,[22]],[219,[22]]]],[[[219,[12]],[219,[12]]]],[[[219,[229]],[219,[229]]]],[[[219,[220]],[219,[220]]]],[[[219,[222]],[219,[222]]]],[[[224,[203]],[224,[203]]]],[[[224,[229]],[224,[229]]]],[[[224,[213]],[224,[213]]]],[[[224,[228]],[224,[228]]]],[[[224,[223]],[224,[223]]]],[[[224,[22]],[224,[22]]]],[[[224,[24]],[224,[24]]]],[[[224,[12]],[224,[12]]]],[[[224,[136]],[224,[136]]]],[[[224,[221]],[224,[221]]]],[[[224,[222]],[224,[222]]]],[[[224,[220]],[224,[220]]]],[[[227,[226]],[227,[226]]]],[[[212,[32]]]],[[[212,[32]]]],[[[141,[237]]]],[[[141,[[0,[5,237]]]]]],[216],[217],[218],[[[219,[223]]]],[[[219,[136]]]],[[[219,[221]]]],[[[219,[222]]]],[[[219,[220]]]],[[[219,[22]]]],[[[224,[222]]]],[[[224,[22]]]],[[[224,[221]]]],[[[224,[220]]]],[[[224,[223]]]],[[[224,[136]]]],[225],[[[227,[226]]]],[[],[[212,[205]]]],[213,[[204,[213]]]],[24,[[204,[24]]]],[203,[[204,[203]]]],[[],141],[[226,226],[[227,[226]]]],[[],[[212,[32]]]],[[226,226],[[227,[226]]]],[[[141,[[0,[18,5]]]]]],[[[219,[245]]]],[[[224,[245]]]],0,[[]],[[],[[212,[32]]]],[[],[[141,[[0,[2,14]]]]]],[[],217],[[],218],[[],[[219,[14]]]],[[],[[224,[14]]]],[[],[[227,[226]]]],[[[141,[150]],[141,[150]]],[[1,[113]]]],[[216,216],[[1,[113]]]],[[217,217],[[1,[113]]]],[[218,218],[[1,[113]]]],[[[219,[150]],[219,[150]]],[[1,[113]]]],[[[224,[150]],[224,[150]]],[[1,[113]]]],[[225,225],[[1,[113]]]],[[[227,[226]],[227,[226]]],[[1,[113]]]],[[149,149],[[141,[149]]]],[213],[[[212,[32]],12],[[212,[32]]]],[[[219,[228]],213],[[219,[228]]]],[[[219,[221]],213],[[219,[221]]]],[[[219,[213]],213],[[219,[213]]]],[[[219,[229]],213],[[219,[229]]]],[[[219,[12]],213],[[219,[12]]]],[[[219,[223]],213],[[219,[223]]]],[[[219,[222]],213],[[219,[222]]]],[[[219,[136]],213],[[219,[136]]]],[[[219,[220]],213],[[219,[220]]]],[[[219,[203]],213],[[219,[203]]]],[[[219,[24]],213],[[219,[24]]]],[[[219,[22]],213],[[219,[22]]]],[[[224,[136]],213],[[224,[136]]]],[[[224,[203]],213],[[224,[203]]]],[[[224,[222]],213],[[224,[222]]]],[[[224,[228]],213],[[224,[228]]]],[[[224,[220]],213],[[224,[220]]]],[[[224,[221]],213],[[224,[221]]]],[[[224,[24]],213],[[224,[24]]]],[[[224,[213]],213],[[224,[213]]]],[[[224,[12]],213],[[224,[12]]]],[[[224,[223]],213],[[224,[223]]]],[[[224,[229]],213],[[224,[229]]]],[[[224,[22]],213],[[224,[22]]]],[[]],[[217,217],217],[[218,218],218],[220],[[217,220],217],[[218,220],218],[149,[[141,[149]]]],[48,[[212,[32]]]],[48,[[212,[32]]]],[48,[[141,[[0,[14,16,17,18,2,5]]]]]],[48,[[141,[[0,[5,14,16,17,18,2,5]]]]]],0,[[]],[217,217],[218,218],[[[204,[213]],213],213],[[[204,[203]],203],203],[[[204,[24]],24],24],[[217,217]],[[218,218]],[[[219,[246]],[219,[246]]]],[[[224,[136]],[224,[136]]]],[[[224,[228]],[224,[228]]]],[[[224,[203]],[224,[203]]]],[[[224,[223]],[224,[223]]]],[[[224,[229]],[224,[229]]]],[[[224,[213]],[224,[213]]]],[[[224,[222]],[224,[222]]]],[[[224,[221]],[224,[221]]]],[[[224,[12]],[224,[12]]]],[[[224,[24]],[224,[24]]]],[[[224,[220]],[224,[220]]]],[[[224,[22]],[224,[22]]]],[[[219,[247]],[219,[247]]]],[[[224,[22]],[224,[22]]]],[[[224,[203]],[224,[203]]]],[[[224,[222]],[224,[222]]]],[[[224,[24]],[224,[24]]]],[[[224,[229]],[224,[229]]]],[[[224,[228]],[224,[228]]]],[[[224,[136]],[224,[136]]]],[[[224,[213]],[224,[213]]]],[[[224,[221]],[224,[221]]]],[[[224,[223]],[224,[223]]]],[[[224,[220]],[224,[220]]]],[[[224,[12]],[224,[12]]]],[[]],[[]],[[217,217],217],[[218,218],218],[[[219,[229]],[219,[229]]],[[219,[229]]]],[[[219,[228]],[219,[228]]],[[219,[228]]]],[[[219,[213]],[219,[213]]],[[219,[213]]]],[[[219,[223]],[219,[223]]],[[219,[223]]]],[[[219,[222]],[219,[222]]],[[219,[222]]]],[[[219,[12]],[219,[12]]],[[219,[12]]]],[[[219,[203]],[219,[203]]],[[219,[203]]]],[[[219,[24]],[219,[24]]],[[219,[24]]]],[[[219,[136]],[219,[136]]],[[219,[136]]]],[[[219,[221]],[219,[221]]],[[219,[221]]]],[[[219,[22]],[219,[22]]],[[219,[22]]]],[[[219,[220]],[219,[220]]],[[219,[220]]]],[[[224,[203]],[224,[203]]],[[224,[203]]]],[[[224,[220]],[224,[220]]],[[224,[220]]]],[[[224,[221]],[224,[221]]],[[224,[221]]]],[[[224,[136]],[224,[136]]],[[224,[136]]]],[[[224,[24]],[224,[24]]],[[224,[24]]]],[[[224,[222]],[224,[222]]],[[224,[222]]]],[[[224,[229]],[224,[229]]],[[224,[229]]]],[[[224,[213]],[224,[213]]],[[224,[213]]]],[[[224,[228]],[224,[228]]],[[224,[228]]]],[[[224,[223]],[224,[223]]],[[224,[223]]]],[[[224,[12]],[224,[12]]],[[224,[12]]]],[[[224,[22]],[224,[22]]],[[224,[22]]]],[[]],[[[219,[24]]],[[219,[24]]]],[[[219,[223]]],[[219,[223]]]],[[[219,[203]]],[[219,[203]]]],[[[219,[136]]],[[219,[136]]]],[[[219,[220]]],[[219,[220]]]],[[[219,[213]]],[[219,[213]]]],[[[219,[12]]],[[219,[12]]]],[[[219,[229]]],[[219,[229]]]],[[[219,[221]]],[[219,[221]]]],[[[219,[22]]],[[219,[22]]]],[[[219,[222]]],[[219,[222]]]],[[[219,[228]]],[[219,[228]]]],[[[224,[203]]],[[224,[203]]]],[[[224,[213]]],[[224,[213]]]],[[[224,[22]]],[[224,[22]]]],[[[224,[12]]],[[224,[12]]]],[[[224,[136]]],[[224,[136]]]],[[[224,[228]]],[[224,[228]]]],[[[224,[229]]],[[224,[229]]]],[[[224,[221]]],[[224,[221]]]],[[[224,[223]]],[[224,[223]]]],[[[224,[220]]],[[224,[220]]]],[[[224,[24]]],[[224,[24]]]],[[[224,[222]]],[[224,[222]]]],[[]],[[[219,[228]],213],[[219,[228]]]],[[[219,[221]],213],[[219,[221]]]],[[[219,[136]],213],[[219,[136]]]],[[[219,[223]],213],[[219,[223]]]],[[[219,[24]],213],[[219,[24]]]],[[[219,[220]],213],[[219,[220]]]],[[[219,[229]],213],[[219,[229]]]],[[[219,[222]],213],[[219,[222]]]],[[[219,[203]],213],[[219,[203]]]],[[[219,[22]],213],[[219,[22]]]],[[[219,[12]],213],[[219,[12]]]],[[[219,[213]],213],[[219,[213]]]],[[[224,[213]],213],[[224,[213]]]],[[[224,[24]],213],[[224,[24]]]],[[[224,[222]],213],[[224,[222]]]],[[[224,[22]],213],[[224,[22]]]],[[[224,[223]],213],[[224,[223]]]],[[[224,[228]],213],[[224,[228]]]],[[[224,[220]],213],[[224,[220]]]],[[[224,[136]],213],[[224,[136]]]],[[[224,[12]],213],[[224,[12]]]],[[[224,[203]],213],[[224,[203]]]],[[[224,[229]],213],[[224,[229]]]],[[[224,[221]],213],[[224,[221]]]],[[]],[[[219,[203]],213],[[219,[203]]]],[[[219,[136]],213],[[219,[136]]]],[[[219,[213]],213],[[219,[213]]]],[[[219,[22]],213],[[219,[22]]]],[[[219,[222]],213],[[219,[222]]]],[[[219,[24]],213],[[219,[24]]]],[[[219,[229]],213],[[219,[229]]]],[[[219,[223]],213],[[219,[223]]]],[[[219,[220]],213],[[219,[220]]]],[[[219,[221]],213],[[219,[221]]]],[[[219,[228]],213],[[219,[228]]]],[[[219,[12]],213],[[219,[12]]]],[[[224,[229]],213],[[224,[229]]]],[[[224,[22]],213],[[224,[22]]]],[[[224,[24]],213],[[224,[24]]]],[[[224,[222]],213],[[224,[222]]]],[[[224,[203]],213],[[224,[203]]]],[[[224,[220]],213],[[224,[220]]]],[[[224,[136]],213],[[224,[136]]]],[[[224,[12]],213],[[224,[12]]]],[[[224,[221]],213],[[224,[221]]]],[[[224,[228]],213],[[224,[228]]]],[[[224,[213]],213],[[224,[213]]]],[[[224,[223]],213],[[224,[223]]]],[[]],[217,217],[218,218],[48,1],[48,1],[48,1],[48,1],[[]],[[]],[[]],[[]],[213],[24],[[]],[[]],[[]],[[]],[[[219,[223]],213]],[[[219,[24]],213]],[[[219,[229]],213]],[[[219,[221]],213]],[[[219,[12]],213]],[[[219,[222]],213]],[[[219,[22]],213]],[[[219,[203]],213]],[[[219,[220]],213]],[[[219,[136]],213]],[[[219,[213]],213]],[[[219,[228]],213]],[[[224,[213]],213]],[[[224,[203]],213]],[[[224,[228]],213]],[[[224,[24]],213]],[[[224,[22]],213]],[[[224,[221]],213]],[[[224,[136]],213]],[[[224,[222]],213]],[[[224,[229]],213]],[[[224,[220]],213]],[[[224,[223]],213]],[[[224,[12]],213]],[[[219,[222]],213]],[[[219,[203]],213]],[[[219,[24]],213]],[[[219,[229]],213]],[[[219,[22]],213]],[[[219,[223]],213]],[[[219,[213]],213]],[[[219,[136]],213]],[[[219,[221]],213]],[[[219,[220]],213]],[[[219,[228]],213]],[[[219,[12]],213]],[[[224,[24]],213]],[[[224,[221]],213]],[[[224,[222]],213]],[[[224,[220]],213]],[[[224,[136]],213]],[[[224,[213]],213]],[[[224,[223]],213]],[[[224,[229]],213]],[[[224,[203]],213]],[[[224,[22]],213]],[[[224,[12]],213]],[[[224,[228]],213]],[[[219,[229]],213]],[[[219,[221]],213]],[[[219,[203]],213]],[[[219,[223]],213]],[[[219,[22]],213]],[[[219,[136]],213]],[[[219,[12]],213]],[[[219,[228]],213]],[[[219,[24]],213]],[[[219,[213]],213]],[[[219,[222]],213]],[[[219,[220]],213]],[[[224,[221]],213]],[[[224,[136]],213]],[[[224,[228]],213]],[[[224,[213]],213]],[[[224,[12]],213]],[[[224,[229]],213]],[[[224,[220]],213]],[[[224,[223]],213]],[[[224,[22]],213]],[[[224,[222]],213]],[[[224,[24]],213]],[[[224,[203]],213]],[[[219,[220]],213]],[[[219,[213]],213]],[[[219,[228]],213]],[[[219,[203]],213]],[[[219,[229]],213]],[[[219,[221]],213]],[[[219,[24]],213]],[[[219,[223]],213]],[[[219,[22]],213]],[[[219,[222]],213]],[[[219,[12]],213]],[[[219,[136]],213]],[[[224,[24]],213]],[[[224,[229]],213]],[[[224,[12]],213]],[[[224,[228]],213]],[[[224,[221]],213]],[[[224,[136]],213]],[[[224,[203]],213]],[[[224,[220]],213]],[[[224,[222]],213]],[[[224,[22]],213]],[[[224,[223]],213]],[[[224,[213]],213]],[[]],[[[219,[228]]]],[[[219,[213]]]],[[[219,[203]]]],[[[219,[12]]]],[[[219,[229]]]],[[[219,[24]]]],[[[224,[12]]]],[[[224,[203]]]],[[[224,[228]]]],[[[224,[24]]]],[[[224,[229]]]],[[[224,[213]]]],[[]],[[]],[217,217],[218,218],[[[219,[22]]],[[219,[22]]]],[[[219,[136]]],[[219,[136]]]],[[[219,[222]]],[[219,[222]]]],[[[219,[223]]],[[219,[223]]]],[[[219,[220]]],[[219,[220]]]],[[[219,[221]]],[[219,[221]]]],[[[224,[222]]],[[224,[222]]]],[[[224,[220]]],[[224,[220]]]],[[[224,[22]]],[[224,[22]]]],[[[224,[223]]],[[224,[223]]]],[[[224,[221]]],[[224,[221]]]],[[[224,[136]]],[[224,[136]]]],[[]],[217,217],[218,218],[[]],[217],[218],[[]],[217,217],[218,218],[[]],[[[212,[[205,[213]]]]],[[1,[[212,[[205,[213]]]]]]]],[216,216],[217,217],[218,218],[225,225],[[[212,[[0,[[205,[213]],[205,[12]]]]]]],[[1,[[212,[[0,[[205,[213]],[205,[12]]]]]]]]]],[[]],[[],1],[[]],[[],1],[[],1],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[141,[[0,[5,17]]]],[0,[5,17]]]],[[[141,[17]],[141,[17]]]],[[[141,[[0,[5,17]]]],[141,[[0,[5,17]]]]]],[[[141,[17]],17]],[[[141,[[0,[5,17]]]],[141,[[0,[5,17]]]]]],[[[141,[[0,[5,17]]]],[141,[[0,[5,17]]]]]],[[[141,[[0,[5,17]]]],[0,[5,17]]]],[[[141,[[0,[5,17]]]],[0,[5,17]]]],[[216,216]],[[217,217]],[[218,218]],[[[219,[213]],[219,[213]]]],[[[219,[24]],[219,[24]]]],[[[219,[22]],[219,[22]]]],[[[219,[223]],[219,[223]]]],[[[219,[222]],[219,[222]]]],[[[219,[221]],[219,[221]]]],[[[219,[229]],[219,[229]]]],[[[219,[228]],[219,[228]]]],[[[219,[136]],[219,[136]]]],[[[219,[220]],[219,[220]]]],[[[219,[12]],[219,[12]]]],[[[219,[203]],[219,[203]]]],[[[224,[213]],[224,[213]]]],[[[224,[222]],[224,[222]]]],[[[224,[12]],[224,[12]]]],[[[224,[223]],[224,[223]]]],[[[224,[136]],[224,[136]]]],[[[224,[203]],[224,[203]]]],[[[224,[24]],[224,[24]]]],[[[224,[228]],[224,[228]]]],[[[224,[220]],[224,[220]]]],[[[224,[221]],[224,[221]]]],[[[224,[22]],[224,[22]]]],[[[224,[229]],[224,[229]]]],[[225,225]],[[[227,[226]],[227,[226]]]],[[[212,[32]],[212,[32]]]],[[[212,[32]],[212,[32]]]],[[[141,[[0,[5,17]]]],[141,[[0,[5,17]]]]]],[[[141,[[0,[5,17]]]],[141,[[0,[5,17]]]]]],[[[141,[[0,[5,17]]]],[0,[5,17]]]],[[[141,[[0,[5,17]]]],[0,[5,17]]]],[[[219,[221]],[219,[221]]]],[[[219,[229]],[219,[229]]]],[[[219,[223]],[219,[223]]]],[[[219,[222]],[219,[222]]]],[[[219,[12]],[219,[12]]]],[[[219,[213]],[219,[213]]]],[[[219,[228]],[219,[228]]]],[[[219,[24]],[219,[24]]]],[[[219,[220]],[219,[220]]]],[[[219,[22]],[219,[22]]]],[[[219,[203]],[219,[203]]]],[[[219,[136]],[219,[136]]]],[[[224,[213]],[224,[213]]]],[[[224,[220]],[224,[220]]]],[[[224,[24]],[224,[24]]]],[[[224,[136]],[224,[136]]]],[[[224,[229]],[224,[229]]]],[[[224,[22]],[224,[22]]]],[[[224,[221]],[224,[221]]]],[[[224,[12]],[224,[12]]]],[[[224,[222]],[224,[222]]]],[[[224,[223]],[224,[223]]]],[[[224,[228]],[224,[228]]]],[[[224,[203]],[224,[203]]]],[[[227,[226]],[227,[226]]]],[48,[[212,[32]]]],[48,[[212,[32]]]],[48,[[141,[[0,[2,16]]]]]],[48,[[141,[[0,[5,2,16]]]]]],[[]],[217,217],[218,218],[[]],[217,217],[218,218],[[],24],[217,24],[218,24],[[]],[217,217],[218,218],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[217,217],[218,218],[[],134],[[],134],[[],[[1,[134]]]],[[],[[1,[134]]]],[[],248],[[],248],[[],[[1,[248]]]],[[],[[1,[248]]]],[[],195],[[],195],[[],195],[[],195],[[],195],[[],195],[[],195],[[],113],[[217,217],113],[[218,218],113],[[]],[[[219,[221]]],213],[[[219,[229]]],213],[[[219,[222]]],213],[[[219,[136]]],213],[[[219,[22]]],213],[[[219,[24]]],213],[[[219,[213]]],213],[[[219,[228]]],213],[[[219,[220]]],213],[[[219,[203]]],213],[[[219,[223]]],213],[[[219,[12]]],213],[[[224,[220]]],213],[[[224,[203]]],213],[[[224,[22]]],213],[[[224,[223]]],213],[[[224,[213]]],213],[[[224,[222]]],213],[[[224,[136]]],213],[[[224,[229]]],213],[[[224,[228]]],213],[[[224,[12]]],213],[[[224,[24]]],213],[[[224,[221]]],213],[141,141],[[]],[217,217],[218,218],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[[141,[149]]],[[141,[149]]]],[[]],[[[219,[220]]]],[[[219,[222]]]],[[[219,[221]]]],[[[219,[223]]]],[[[219,[22]]]],[[[219,[136]]]],[[[224,[222]]]],[[[224,[223]]]],[[[224,[22]]]],[[[224,[221]]]],[[[224,[220]]]],[[[224,[136]]]],0,0,[[]],[[],[[212,[32]]]],[[],[[141,[2]]]],[[],217],[[],218],[[],[[219,[2]]]],[[],[[224,[2]]]],[[],[[227,[226]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[228],[[]],[220],[229],[222],[12],[223],[203],[24],[136],[213],[22],[221],[24],[12],[213],[203],[220],[[]],[136],[22],[222],[222],[[]],[12],[136],[213],[203],[220],[24],[22],[136],[12],[22],[222],[203],[[]],[213],[24],[220],[136],[24],[22],[203],[220],[[]],[222],[12],[213],[12],[203],[22],[24],[[]],[136],[222],[[]],[[]],[[]],[[]],[[]],[[]],[[],223],[[],203],[[],213],[[],22],[[],136],[[]],[[],229],[[],222],[[],24],[[],12],[[],228],[[],220],[[],221],[[],222],[[],24],[[],213],[[],220],[[]],[[],136],[[],22],[[],203],[[],12],[[],213],[[]],[[],203],[[],22],[[],12],[[],136],[[],220],[[],222],[[],24],[[],213],[[],22],[[]],[[],136],[[],203],[[],12],[[],220],[[],222],[[],24],[[],213],[[],136],[[],203],[[],12],[[],222],[[]],[[],220],[[],24],[[],22],[[],136],[[],12],[[],203],[[],22],[[],24],[[]],[[],222],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],220],[[],228],[[],12],[[],222],[[],136],[[],229],[[],22],[[],213],[[],203],[[],223],[[],24],[[],221],[[],136],[[],220],[[],222],[[],22],[[],12],[[],24],[[],213],[[],203],[[],222],[[],203],[[],12],[[],136],[[],213],[[],24],[[],22],[[],220],[[],22],[[],203],[[],213],[[],24],[[],222],[[],136],[[],220],[[],12],[[],222],[[],203],[[],24],[[],12],[[],22],[[],213],[[],136],[[],220],[[],12],[[],24],[[],136],[[],222],[[],203],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[213],[24],[213],[24],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,0,0,0,[[],[[250,[249]]]],[[],[[250,[249]]]],[[],[[250,[249]]]],[[],[[250,[249]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22],[136],[213],[24],[12],[220],[[]],[136],[12],[[]],[220],[24],[213],[22],[220],[[]],[12],[24],[136],[22],[213],[[]],[12],[22],[24],[220],[136],[213],[[],213],[[],213],[[]],[[]],[[],213],[[],213],[[]],[[],213],[[]],[[]],[[],220],[[],136],[[],12],[[],24],[[],213],[[],22],[[],220],[[],136],[[],213],[[],12],[[],22],[[],24],[[]],[[],136],[[],213],[[],12],[[],24],[[],22],[[]],[[],220],[[],24],[[],12],[[],22],[[],213],[[]],[[],136],[[],220],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],22],[[],136],[[],24],[[],213],[[],220],[[],24],[[],12],[[],213],[[],22],[[],136],[[],220],[[],24],[[],12],[[],136],[[],22],[[],220],[[],213],[[],22],[[],136],[[],213],[[],24],[[],220],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[[],213],[24,213],[24,213],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,[118,118],[118,118],[118,[[251,[118]]]],[[118,252],[[253,[118,252]]]],[[],[[19,[254]]]],[[],8],[[],8],0,[[[52,[229]]],[[19,[12,254]]]],0,[255,[[19,[254]]]],[255,[[19,[254]]]],[[[52,[229]]],[[19,[254]]]],[[[25,[229,256]]],[[19,[12,254]]]],[195,[[19,[12,254]]]],[[[52,[257]]],[[19,[12,254]]]],0,[[118,24],[[258,[118]]]],[[[52,[229]]],[[19,[12,254]]]],[[[52,[229]]],[[19,[254]]]],[[[52,[259]]],[[19,[254]]]],[260,[[19,[254]]]],[[[52,[259]]],[[19,[12,254]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[261,[[0,[5,28]]]]],[[261,[[0,[5,28]]]]]],[[[262,[5]]],[[262,[5]]]],[263,263],[[]],[[]],[[]],[[[261,[[0,[9,28]]]],10],11],[[[262,[9]],10],11],[[263,10],11],[[]],[[]],[[]],[[262,12]],[[263,12],12],[[]],[[]],[[]],[[[262,[15]]],[[25,[12]]]],[[[25,[28]]],[[261,[28]]]],[[[25,[15]]],[[262,[15]]]],[[[52,[28]]],263],0,[[[52,[28]],[52,[28]],28],[[25,[12]]]],[[[261,[28]],[52,[28]]],[[25,[12]]]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[[52,[229]],[52,[229]]],[[25,[8]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[265,[[0,[264,118]]]],[266,[[0,[264,118]]]]],[[265,[[0,[264,118]]]]]],[[[266,[[0,[264,118]]]]],[[265,[[0,[264,118]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[265,[[0,[264,118,5]]]]],[[265,[[0,[264,118,5]]]]]],[[[266,[[0,[264,118]]]]],[[266,[[0,[264,118]]]]]],[[[267,[[0,[264,118]]]]],[[267,[[0,[264,118]]]]]],[268,268],[269,269],[270,270],[271,271],[272,272],[273,273],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[265,[[0,[264,118]]]],[265,[[0,[264,118]]]]],113],[[[266,[[0,[264,118]]]],[266,[[0,[264,118]]]]],113],[[268,268],113],[[269,269],113],[[270,270],113],[[271,271],113],[[272,272],113],[[273,273],113],[[[267,[[0,[264,118]]]],[267,[[0,[264,118]]]]],[[267,[[0,[264,118]]]]]],[[267,267],267],[[[267,[268]],[267,[268]]],[[267,[268]]]],[[[267,[269]],[267,[269]]],[[267,[269]]]],[[[267,[270]],[267,[270]]],[[267,[270]]]],[[[267,[271]],[267,[271]]],[[267,[271]]]],[[[267,[272]],[267,[272]]],[[267,[272]]]],[[[267,[273]],[267,[273]]],[[267,[273]]]],[[],[[265,[[0,[264,118,115]]]]]],[12],[12],[12],[12],[12],[12],[12],[[[265,[[0,[264,118]]]],[265,[[0,[264,118]]]]],8],[[[266,[[0,[264,118]]]],[266,[[0,[264,118]]]]],8],[[[267,[[0,[264,118]]]],[267,[[0,[264,118]]]]],8],[[268,268],8],[[269,269],8],[[270,270],8],[[271,271],8],[[272,272],8],[[273,273],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[265,[[0,[264,118,9]]]],10],11],[[[274,[[0,[264,118,9]]]],10],11],[[[266,[[0,[264,118,9]]]],10],11],[[[267,[[0,[264,118,9]]]],10],11],[[268,10],11],[[269,10],11],[[270,10],11],[[271,10],11],[[272,10],11],[[273,10],11],[[]],[[[25,[[266,[[0,[264,118]]]]]]],[[265,[[0,[264,118]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[266,[[0,[264,118]]]]],[[267,[[0,[264,118]]]]]],[[[267,[[0,[264,118]]]],125]],[[268,125]],[[269,125]],[[270,125]],[[271,125]],[[272,125]],[[273,125]],[[[274,[[0,[264,118]]]],[122,[12]]],[[267,[[0,[264,118]]]]]],[[[266,[[0,[264,118]]]],[122,[12]]],[[267,[[0,[264,118]]]]]],[53,274],[53,[[274,[268]]]],[53,[[274,[269]]]],[53,[[274,[270]]]],[53,[[274,[271]]]],[53,[[274,[272]]]],[53,[[274,[273]]]],[52,267],[52,[[267,[268]]]],[52,[[267,[269]]]],[52,[[267,[270]]]],[52,[[267,[271]]]],[52,[[267,[272]]]],[52,[[267,[273]]]],[12],[[12,275]],[[12,275]],[[12,275]],[[12,275]],[[12,275]],[[12,275]],[[12,275]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[274,[[0,[264,118]]]]],8],[[[266,[[0,[264,118]]]]],8],[[[274,[[0,[264,118]]]]],12],[[[266,[[0,[264,118]]]]],12],[[[266,[[0,[264,118]]]],[266,[[0,[264,118]]]]],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[265,[[0,[264,118]]]],[265,[[0,[264,118]]]]],[[1,[113]]]],[[[266,[[0,[264,118]]]],[266,[[0,[264,118]]]]],[[1,[113]]]],[[268,268],[[1,[113]]]],[[269,269],[[1,[113]]]],[[270,270],[[1,[113]]]],[[271,271],[[1,[113]]]],[[272,272],[[1,[113]]]],[[273,273],[[1,[113]]]],[[[265,[[0,[264,118]]]],[266,[[0,[264,118]]]]]],[[[274,[[0,[264,118]]]],[122,[12]]],[[266,[[0,[264,118]]]]]],[[[266,[[0,[264,118]]]],[122,[12]]],[[266,[[0,[264,118]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[250,[249]]]],[[],94],[[],94],[[],94],[[],94],[[],94],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[276,[5,5]]],[[276,[5,5]]]],[275,275],[[[277,[5]]],[[277,[5]]]],[[[278,[5,5]]],[[278,[5,5]]]],[279,279],[280,280],[281,281],[282,282],[283,283],[284,284],[285,285],[286,286],[287,287],[[[289,[[0,[183,5]],[0,[288,5]]]]],[[289,[[0,[183,5]],[0,[288,5]]]]]],[[[290,[[0,[183,5]],[0,[288,5]]]]],[[290,[[0,[183,5]],[0,[288,5]]]]]],[[[291,[[0,[183,5]],5]]],[[291,[[0,[183,5]],5]]]],[[[94,[5]]],[[94,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[276,[15]],[276,[15]]],113],[[[277,[15]],[277,[15]]],113],[[[278,[15,15]],[278,[15,15]]],113],[[[94,[150]],[94,[150]]],113],[[],292],[[],[[276,[115,115]]]],[[],275],[[],[[94,[115]]]],[48],[[[52,[229]]],118],[[[52,[229]]],118],0,[[[276,[7]],[276,[7]]],8],[[[277,[7]],[277,[7]]],8],[[[278,[7,7]],[278,[7,7]]],8],[[[94,[7]],[94,[7]]],8],[[],8],[[],8],[[],8],[[],8],[[292,10],11],[[[276,[9,9]],10],11],[[275,10],11],[[[294,[9,[0,[9,[293,[9]]]]]],10],11],[[[277,[9]],10],11],[[[278,[9,9]],10],11],[[279,10],11],[[280,10],11],[[281,10],11],[[282,10],11],[[283,10],11],[[284,10],11],[[285,10],11],[[286,10],11],[[287,10],11],[[[289,[[0,[183,9]],[0,[288,9]]]],10],11],[[[290,[[0,[183,9]],[0,[288,9]]]],10],11],[[[291,[[0,[183,9]],9]],10],11],[[[94,[9]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[213,1],[213,1],[213,1],[213,1],[[275,293]],[[275,148],8],[[275,293],[[294,[293]]]],[[]],[[]],[[]],[[[277,[29]],125]],[[[278,[29,29]],125]],[[[94,[29]],125]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[292,148,148],8],[292,8],0,[279,[[295,[183]]]],0,[[296,241,8],[[19,[254]]]],0,[292,292],[[]],[[]],[[]],[[]],[[]],[131],[131],[48,1],[[279,297]],[[281,48],1],[[283,48],1],[[285,48],1],[[287,48],1],[[[289,[183,288]],48],1],[[[291,[183,243]],48],1],[[[291,[183,298]],48],1],[[],292],[[],275],[[],278],[243,279],[12,[[289,[183,288]]]],[[],[[291,[183]]]],[24,275],[[[295,[183]]],1],[[[294,[293]]],1],0,[[[276,[150]],[276,[150]]],[[1,[113]]]],[[[277,[150]],[277,[150]]],[[1,[113]]]],[[[278,[150,150]],[278,[150,150]]],[[1,[113]]]],[[[94,[150]],[94,[150]]],[[1,[113]]]],[275],[[275,24],24],[[[277,[[293,[12]]]],275]],[[[278,[[293,[15]],15]],275]],0,[275,24],[275,294],[275,294],[275,148],[[275,24,12],[[25,[24]]]],[252,195],[252,195],[[],195],[[],195],[[],195],[[]],[[]],[48,1],[279],[48,1],[48,1],[48,1],[48,1],[48,1],0,0,[[279,12],25],[[[25,[229]]]],[[],195],[[],195],[[]],[[]],[[292,148],292],[[292,148],292],[[292,148],292],[[292,12],292],[[275,52]],0,0,0,0,[[],[[1,[213]]]],[[],[[1,[213]]]],[[],[[1,[213]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[1,[213]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[[52,[229]]],[[25,[229]]]],0,[131],[131],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[299,299],[300,300],[301,301],[[[303,[[0,[5,302]]]]],[[303,[[0,[5,302]]]]]],[[[304,[[0,[5,302]]]]],[[304,[[0,[5,302]]]]]],[[[305,[[0,[5,58]],[0,[5,30]]]]],[[305,[[0,[5,58]],[0,[5,30]]]]]],[196,196],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],306],[12,24],[12,24],0,0,0,[[196,196],8],[[],8],[[299,10],11],[[300,10],11],[[301,10],11],[[[303,[[0,[9,302]]]],10],11],[[[304,[[0,[9,302]]]],10],11],[[[305,[[0,[9,58]],[0,[9,30]]]],10],11],[[196,10],11],[[306,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[301,[[303,[302]]]],[[196,125]],[[306,192],24],[[306,192,12,12],24],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[303,[302]],12,12],12],[[307,12,12],12],[299,12],[300,12],[301,12],[[12,192],299],[192,300],[[12,192],301],[[12,192],307],[[192,30],[[305,[58,30]]]],[[],306],[[]],0,0,[[300,12,12,26]],[[300,12,26]],[[300,12,12]],[[301,12,12,26]],[[307,12,12,8,26]],[[307,12,12,8,26,26]],[[[308,[[293,[12]]]],275],192],[[[309,[[293,[12]]]],275],192],[[[310,[[293,[12]]]],275],192],[[[311,[[293,[12]]]],275],192],0,[[[25,[24]]]],[[[25,[24]]]],[[300,12,26]],[[300,12,26]],[[300,12,12]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[307,12,12,8,26]],0,0,0,[[],12],[[],12],[24,306]],"c":[],"p":[[4,"Option"],[8,"Zero"],[8,"Bounded"],[3,"RangeChminChmaxAdd"],[8,"Clone"],[3,"RangeSumRangeChminChmaxAdd"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"usize"],[8,"Copy"],[8,"One"],[8,"Ord"],[8,"Add"],[8,"Sub"],[8,"Mul"],[4,"Result"],[3,"TypeId"],[3,"ConvexHullTrick"],[15,"i64"],[3,"XorBasis"],[15,"u64"],[3,"Vec"],[8,"FnMut"],[8,"Bisect"],[8,"Eq"],[8,"Hash"],[8,"Fn"],[3,"RhoPath"],[8,"MIntBase"],[3,"IndependentSubSet"],[3,"BitDp"],[3,"Subsets"],[3,"Combinations"],[3,"EsperEstimator"],[3,"EsperSolver"],[8,"ImpartialGame"],[3,"ImpartialGameAnalyzer"],[8,"PartisanGame"],[3,"PartisanGameAnalyzer"],[8,"ZeroSumGame"],[3,"ZeroSumGameAnalyzer"],[8,"Group"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"Iterator"],[3,"BabyStepGiantStep"],[8,"SqrtDecomposition"],[3,"SqrtDecompositionBuckets"],[15,"slice"],[8,"IntoIterator"],[3,"ImpartialGamer"],[3,"PartisanGamer"],[3,"ZeroSumGamer"],[3,"SlideMinimum"],[8,"Monoid"],[8,"Div"],[8,"Trisect"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"LexicographicalSubsequence"],[3,"LongestIncreasingSubsequence"],[8,"Automaton"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"FunctionalAutomaton"],[3,"MappingAutomaton"],[3,"AlphabetMappingAutomaton"],[3,"LexicographicalAutomaton"],[3,"RevLexicographicalAutomaton"],[3,"MonoidalAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BitVector"],[3,"WaveletMatrix"],[3,"Accumulate"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"CompressedBinaryIndexedTree"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"SlopeTrick"],[3,"MergingUnionFind"],[3,"HashMap"],[3,"WeightedUnionFind"],[3,"UnionFind"],[3,"NonNull"],[3,"MemoryPool"],[3,"SegmentTree"],[3,"TotalOrd"],[3,"DequeAggregation"],[3,"BitSet"],[3,"Trie"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"CompressedSegmentTree"],[8,"SemiGroup"],[3,"DisjointSparseTable"],[8,"MonoidAction"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"Automatondp"],[3,"VecCompress"],[3,"HashCompress"],[3,"LineSet"],[4,"Ordering"],[8,"Allocator"],[8,"Default"],[3,"SplaySequence"],[3,"SplayMap"],[8,"Sized"],[3,"Drain"],[3,"Ref"],[3,"RefMut"],[8,"RangeBounds"],[8,"AbelianMonoid"],[8,"Borrow"],[8,"Hasher"],[3,"Iter"],[3,"Iter"],[3,"Keys"],[3,"IterMut"],[3,"Keys"],[8,"FnOnce"],[3,"Static2DTree"],[8,"RankSelectDictionaries"],[3,"Range"],[3,"Range"],[15,"isize"],[3,"Values"],[3,"Values"],[3,"ValuesMut"],[8,"Ccwable"],[3,"Complex"],[4,"Ccw"],[3,"Line"],[3,"LineSegment"],[8,"ApproxOrd"],[3,"Approx"],[3,"Circle"],[15,"f64"],[8,"Float"],[8,"PartialOrd"],[3,"TwoSatisfiability"],[3,"ProjectSelectionProblem"],[3,"SparseGraphBuilder"],[3,"AdjacencyListGraph"],[3,"BipartiteMatching"],[3,"DinicBuilder"],[3,"PrimalDualBuilder"],[3,"GridGraph"],[3,"UsizeGraph"],[3,"ClosureGraph"],[3,"SparseGraph"],[3,"Adjacency"],[3,"Iter"],[3,"VIndexWithValue"],[3,"VIndexWithEIndexValue"],[8,"Vertices"],[8,"VertexMap"],[8,"AdjacencyView"],[8,"VertexSize"],[8,"SparseGraphConstruction"],[6,"BidirectionalSparseGraph"],[3,"Dinic"],[3,"PrimalDual"],[3,"EdgeListGraph"],[3,"VIndex"],[3,"VIndexWithEIndex"],[4,"DirectedEdge"],[4,"UndirectedEdge"],[4,"BidirectionalEdge"],[3,"StronglyConnectedComponent"],[15,"never"],[6,"DirectedSparseGraph"],[8,"IterScan"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraphScanner"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[8,"AdjacenciesWithEindex"],[3,"AdjacencyViewIterFromEindex"],[8,"AdjacenciesWithValue"],[3,"AdjacencyViewIterFromValue"],[6,"UndirectedSparseGraph"],[3,"LowLink"],[8,"EdgeView"],[3,"String"],[4,"TreeCenter"],[8,"FormalPowerSeriesCoefficient"],[3,"FormalPowerSeries"],[3,"Matrix"],[3,"Polynomial"],[8,"MulAssign"],[8,"ConvolveSteps"],[15,"u128"],[3,"BarrettReduction"],[8,"MIntConvert"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"PowPrec"],[3,"EulerPhiTable"],[3,"PrimeList"],[3,"PrimeTable"],[3,"MInt"],[15,"u32"],[3,"IterMut"],[8,"FormalPowerSeriesCoefficientSqrt"],[3,"DoubleDouble"],[3,"Float32"],[3,"Float64"],[3,"Saturating"],[15,"i32"],[15,"i8"],[15,"i128"],[15,"i16"],[3,"Wrapping"],[3,"QuadDouble"],[8,"Signed"],[3,"Rational"],[15,"u16"],[15,"u8"],[8,"BitAnd"],[8,"BitAndAssign"],[8,"BitOr"],[8,"BitOrAssign"],[8,"BitXor"],[8,"BitXorAssign"],[4,"FpCategory"],[8,"Neg"],[8,"DivAssign"],[3,"ExtendedGcd"],[3,"Error"],[8,"Display"],[15,"f32"],[15,"str"],[8,"FromStr"],[8,"Not"],[8,"Rem"],[8,"RemAssign"],[3,"RangeInclusive"],[3,"Cell"],[3,"LocalKey"],[3,"Bytes"],[8,"Read"],[3,"Chain"],[3,"Error"],[3,"BorrowedCursor"],[3,"Global"],[3,"IoSliceMut"],[3,"Take"],[3,"IoSlice"],[3,"Arguments"],[3,"KnuthMorrisPratt"],[3,"SuffixArray"],[3,"Zarray"],[8,"RollingHasher"],[3,"HashedRangeChained"],[3,"HashedRange"],[3,"Hashed"],[4,"Mersenne61x1"],[4,"Mersenne61x2"],[4,"Mersenne61x3"],[4,"Gf2_63x1"],[4,"Gf2_63x2"],[4,"Gf2_63x3"],[3,"HashedSequence"],[3,"Xorshift"],[3,"PartialIgnoredOrd"],[3,"NotEmptySegment"],[3,"RandRange"],[3,"Scanner"],[4,"Usize1"],[3,"CharWithBase"],[4,"Chars"],[3,"CharsWithBase"],[4,"Byte1"],[3,"ByteWithBase"],[4,"Bytes"],[3,"BytesWithBase"],[8,"FromIterator"],[3,"Collect"],[3,"SizedCollect"],[3,"Splitted"],[3,"SimuratedAnnealing"],[8,"RandomSpec"],[3,"RandIter"],[3,"ScannerIter"],[8,"Write"],[8,"MarkedIterScan"],[15,"char"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[8,"LcaMonoidDispatch"],[3,"LowestCommonAncestor"],[3,"LcaMonoid"],[3,"ReRooting"],[3,"TreeHasher"],[3,"HeavyLightDecomposition"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[8,"SemiRing"],[4,"Gf2_63"],[4,"Mersenne61"],[8,"Magma"],[3,"EmptyLazy"],[3,"EmptyAction"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"AddMulOperation"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[4,"PermutationOperation"],[3,"FindMajorityOperation"],[8,"Field"],[8,"Invertible"],[8,"Unital"],[8,"Ring"],[8,"BitXorIdentity"],[3,"SubsetTransform"],[3,"SupersetTransform"],[8,"SliceSortExt"],[8,"SliceBisectExt"],[8,"SliceCombinationsExt"],[8,"Compressor"],[8,"ToDigitSequence"],[8,"Adjacencies"],[8,"AdjacencyIndexWithValue"],[8,"EIndexedGraph"],[8,"AdjacencyIndexWithEindex"],[8,"Edges"],[8,"EdgeMap"],[8,"ShortestPathSemiRing"],[8,"GraphBase"],[8,"AdjacencyIndex"],[3,"StandardSp"],[3,"OptionSp"],[3,"PathFoldingSp"],[8,"ShortestPathExt"],[8,"EdgeSize"],[8,"VertexView"],[4,"ConvolveRealFft"],[3,"Convolve"],[8,"IntBase"],[8,"Unsigned"],[8,"DiscreteSteps"],[8,"BinaryRepr"],[8,"RangeBoundsExt"],[3,"Modulo2"],[4,"Modulo998244353"],[4,"Modulo1000000007"],[4,"Modulo1000000009"],[4,"DynModuloU32"],[4,"DynModuloU64"],[6,"DynMIntU32"],[6,"DynMIntU64"],[4,"Modulo998244353"],[4,"Modulo2113929217"],[4,"Modulo1811939329"],[4,"Modulo2013265921"],[8,"MontgomeryReduction32"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[8,"AsTotalOrd"],[8,"PartialOrdExt"],[8,"SerdeByteStr"],[8,"CharTools"],[8,"IterPrint"],[4,"LcaMonoidDefaultId"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":"AAAAAAAAAAAAAAAAAAACCCCFCCCFCFCCCFFCCCCFCCCCFCCCCCFCCCCFCFCCCFFCFCCCCFCCCCFCCCCCCCFAAAACCFFCCFCCCCFFCCFAAAAAAAAAAAAAAAAAAACCCCFCCCCCFCFCFCCFFCCCFCCFCCCFCCFCCFCCFCCCFCCFCCCCCFCFCCFCFCFAAFFAAACFCFCCCFF","n":["datastructure","graph","math","sample","string","deque_operate_all_composite","dynamic_sequence_range_affine_range_sum","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_chmin_chmax_add_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","DequeAggregation","LinearOperation","MInt","MInt998244353","deque_operate_all_composite","MInt998244353","RangeSumRangeLinear","SplaySequence","dynamic_sequence_range_affine_range_sum","LineSet","line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","LazySegmentTree","RangeChminChmaxAdd","RangeSumRangeChminChmaxAdd","Saturating","range_chmin_chmax_add_range_sum","WaveletMatrix","range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","UnionFind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","log_of_formal_power_series","min_of_mod_of_linear","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","Convolve","ConvolveSteps","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","PrimeList","enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","factorize","prime_factors_flatten","MInt998244353","berlekamp_massey","find_linear_recurrence","Fps998244353","MInt998244353","inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","Fps998244353","MInt998244353","log_of_formal_power_series","binary_search","floor_sum_range_freq","min_of_mod_of_linear","Fps998244353","MInt998244353","multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","DynMIntU32","sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","floor_sum","sum_of_floor_of_linear","TwoSatisfiability","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","SuffixArray","suffixarray","Mersenne61x1","RollingHasher","Zarray","zalgorithm","zalgorithm_rolling_hash"],"q":[[0,"library_checker"],[5,"library_checker::datastructure"],[19,"library_checker::datastructure::deque_operate_all_composite"],[24,"library_checker::datastructure::dynamic_sequence_range_affine_range_sum"],[28,"library_checker::datastructure::line_add_get_min"],[30,"library_checker::datastructure::point_add_range_sum"],[35,"library_checker::datastructure::point_set_range_composite"],[40,"library_checker::datastructure::queue_operate_all_composite"],[45,"library_checker::datastructure::range_affine_range_sum"],[51,"library_checker::datastructure::range_chmin_chmax_add_range_sum"],[56,"library_checker::datastructure::range_kth_smallest"],[58,"library_checker::datastructure::staticrmq"],[63,"library_checker::datastructure::unionfind"],[65,"library_checker::datastructure::vertex_add_path_sum"],[70,"library_checker::datastructure::vertex_add_subtree_sum"],[75,"library_checker::datastructure::vertex_set_path_composite"],[83,"library_checker::graph"],[87,"library_checker::graph::bipartitematching"],[91,"library_checker::graph::directedmst"],[94,"library_checker::graph::lca"],[100,"library_checker::graph::scc"],[103,"library_checker::math"],[122,"library_checker::math::convolution_mod"],[127,"library_checker::math::convolution_mod_1000000007"],[133,"library_checker::math::discrete_logarithm_mod"],[135,"library_checker::math::enumerate_primes"],[137,"library_checker::math::exp_of_formal_power_series"],[140,"library_checker::math::factorize"],[142,"library_checker::math::find_linear_recurrence"],[145,"library_checker::math::inv_of_formal_power_series"],[148,"library_checker::math::kth_term_of_linearly_recurrent_sequence"],[152,"library_checker::math::log_of_formal_power_series"],[155,"library_checker::math::min_of_mod_of_linear"],[158,"library_checker::math::multipoint_evaluation"],[161,"library_checker::math::polynomial_taylor_shift"],[165,"library_checker::math::pow_of_formal_power_series"],[168,"library_checker::math::sharp_p_subset_sum"],[174,"library_checker::math::sqrt_mod"],[176,"library_checker::math::sqrt_of_formal_power_series"],[179,"library_checker::math::sum_of_floor_of_linear"],[181,"library_checker::math::two_sat"],[183,"library_checker::sample"],[185,"library_checker::sample::aplusb"],[186,"library_checker::sample::many_aplusb"],[187,"library_checker::string"],[190,"library_checker::string::number_of_substrings"],[192,"library_checker::string::suffixarray"],[194,"library_checker::string::zalgorithm"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","✅  AC  47ms","","","","✅  AC  2188ms","","✅  AC  455ms","","","","✅  AC  96ms","✅  AC  107ms","","","","","✅  AC  178ms","","","","","✅  AC  46ms","","","","","","✅  AC  1049ms","","","","","✅  AC  1281ms","","✅  AC  273ms","","","","✅  AC  139ms","✅  AC  145ms","","✅  AC  16ms","","","","","✅  AC  369ms","","","","","✅  AC  202ms","","","","","","","","✅  AC  187ms","","","","","","","✅  AC  93ms","✅  AC  1646ms","","","✅  AC  204ms","","","","","✅  AC  477ms","✅  AC  473ms","","","✅  AC  305ms","","","","","","","","","","","","","","","","","","","","","","","","✅  AC  159ms","","","","","","✅  AC  274ms","","✅  AC  3ms","","✅  AC  1541ms","","","✅  AC  339ms","✅  AC  97ms","","","","✅  AC  87ms","","","✅  AC  134ms","","","","✅  AC  1069ms","","","✅  AC  172ms","","","✅  AC  2049ms","","","✅  AC  546ms","","","","✅  AC  106ms","","","✅  AC  457ms","","","","","","✅  AC  542ms","","✅  AC  77ms","","","✅  AC  246ms","","✅  AC  33ms","","✅  AC  222ms","","","✅  AC  0ms","✅  AC  151ms","","","","","✅  AC  530ms","","✅  AC  754ms","","","","✅  AC  33ms","✅  AC  131ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]]],"c":[],"p":[[8,"Read"],[8,"Write"]],"a":{"verify":[23,27,29,33,34,39,44,50,55,57,61,62,64,69,74,82,89,90,93,98,99,102,126,132,134,136,139,140,144,147,151,154,157,160,164,167,173,175,178,180,182,185,186,191,193,197,198]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
