var searchIndex={};
searchIndex["aplusb"] = {"doc":"","i":[[5,"main","aplusb","",null,[[]]]],"p":[]};
searchIndex["bipartitematching"] = {"doc":"","i":[[5,"solve","bipartitematching","",null,[[["bufwriter"]],["result"]]],[5,"main","","",null,[[],["result"]]]],"p":[]};
searchIndex["competitive"] = {"doc":"","i":[[0,"algebra","competitive","",null,null],[0,"base","competitive::algebra","",null,null],[8,"Magma","competitive::algebra::base","",null,null],[16,"T","","",0,null],[10,"operate","","",0,[[["self"]]]],[8,"Associative","","",null,null],[8,"SemiGroup","","",null,null],[8,"Unital","","",null,null],[10,"unit","","",1,[[["self"]]]],[8,"Monoid","","",null,null],[11,"power","","",2,[[["usize"],["self"]]]],[8,"Invertible","","",null,null],[10,"inverse","","",3,[[["self"]]]],[8,"Group","","",null,null],[8,"Commutative","","",null,null],[8,"AbelianMonoid","","",null,null],[8,"AbelianGroup","","",null,null],[8,"Idempotent","","",null,null],[8,"IdempotentMonoid","","",null,null],[0,"effect","competitive::algebra","",null,null],[3,"AnyMonoidEffect","competitive::algebra::effect","",null,null],[0,"any_monoid_effect_impl","","",null,null],[11,"new","","",4,[[["m"],["f"]],["self"]]],[8,"MonoidEffect","","",null,null],[16,"A","","",5,null],[10,"effect","","",5,[[["self"]]]],[0,"operations","competitive::algebra","",null,null],[3,"MaxOperation","competitive::algebra::operations","",null,null],[3,"MinOperation","","",null,null],[3,"FirstOperation","","",null,null],[3,"LastOperation","","",null,null],[3,"AdditiveOperation","","",null,null],[3,"MultiplicativeOperation","","",null,null],[3,"LinearOperation","","",null,null],[3,"BitAndOperation","","",null,null],[3,"BitOrOperation","","",null,null],[3,"MonoidalOperation","","",null,null],[3,"GroupOperation","","",null,null],[3,"AssocoativeOperator","","",null,null],[3,"AbsorbedAssocoativeOperator","","",null,null],[3,"CartesianOperation","","",null,null],[3,"CountingOperation","","",null,null],[0,"max_operation_impl","","",null,null],[11,"new","","",6,[[],["self"]]],[0,"min_operation_impl","","",null,null],[11,"new","","",7,[[],["self"]]],[0,"first_operation_impl","","",null,null],[11,"new","","",8,[[],["self"]]],[0,"last_operation_impl","","",null,null],[11,"new","","",9,[[],["self"]]],[0,"additive_operation_impl","","",null,null],[11,"new","","",10,[[],["self"]]],[0,"multiplicative_operation_impl","","",null,null],[11,"new","","",11,[[],["self"]]],[0,"linear_operation_impl","","",null,null],[11,"new","","",12,[[],["self"]]],[0,"bitand_operation_impl","","",null,null],[11,"new","","",13,[[],["self"]]],[0,"bitor_operation_impl","","",null,null],[11,"new","","",14,[[],["self"]]],[0,"monoidal_operation_impl","","",null,null],[11,"new","","",15,[[["t"],["f"]],["self"]]],[0,"group_operation_impl","","",null,null],[11,"new","","",16,[[["g"],["t"],["f"]],["self"]]],[0,"assocoative_operator_impl","","",null,null],[0,"absorbed_assocoative_operator_impl","","",null,null],[11,"new","","",17,[[["f"]],["self"]]],[0,"cartesian_operation_impl","","",null,null],[11,"new","","",18,[[["m2"],["m1"]],["self"]]],[0,"counting_operation_impl","","",null,null],[11,"new","","",19,[[["m"]],["self"]]],[8,"MinimumBounded","","",null,null],[10,"minimum","","",20,[[],["self"]]],[8,"MaximumBounded","","",null,null],[10,"maximum","","",21,[[],["self"]]],[8,"AdditiveIdentity","","",null,null],[10,"zero","","",22,[[],["self"]]],[8,"MultiplicativeIdentity","","",null,null],[10,"one","","",23,[[],["self"]]],[8,"BitAndIdentity","","",null,null],[10,"all_one","","",24,[[],["self"]]],[8,"BitOrIdentity","","",null,null],[10,"all_zero","","",25,[[],["self"]]],[0,"algorithm","competitive","",null,null],[0,"compress","competitive::algorithm","",null,null],[3,"Compress","competitive::algorithm::compress","",null,null],[11,"get","","",26,[[["self"],["t"]],["usize"]]],[11,"len","","",26,[[["self"]],["usize"]]],[0,"convex_hull_trick","competitive::algorithm","",null,null],[3,"CHTLine","competitive::algorithm::convex_hull_trick","",null,null],[3,"ConvexHullTrick","","",null,null],[11,"new","","",27,[[["i64"]],["self"]]],[11,"value","","",27,[[["i64"],["self"]],["i64"]]],[11,"check","","",27,[[["self"]],["bool"]]],[11,"new","","",28,[[],["self"]]],[11,"add_line","","k-th add_line(a_k, b_k): a_k >= a_{k+1}",28,[[["i64"],["self"]]]],[11,"query","","",28,[[["i64"],["self"]],["i64"]]],[0,"search","competitive::algorithm","",null,null],[5,"binary_search","competitive::algorithm::search","",null,[[["fn"],["bisect"]],["bisect"]]],[5,"lower_bound","","",null,[[["ord"],["bisect"]],["usize"]]],[5,"upper_bound","","",null,[[["ord"],["bisect"]],["usize"]]],[5,"ternary_search","","",null,[[["fn"],["trisect"]],["trisect"]]],[0,"bisect_impl","","",null,null],[0,"trisect_impl","","",null,null],[8,"Bisect","","",null,null],[10,"halve","","",29,[[],["self"]]],[10,"section_end","","",29,[[],["bool"]]],[8,"Trisect","","",null,null],[10,"next","","",30,[[]]],[10,"section_end","","",30,[[],["bool"]]],[0,"slide_minimum","competitive::algorithm","",null,null],[5,"slide_minimum","competitive::algorithm::slide_minimum","",null,[[["usize"],["vec"]],[["usize"],["vec",["usize"]]]]],[0,"data_structure","competitive","",null,null],[3,"Rev","competitive::data_structure","",null,null],[12,"0","","",31,null],[3,"TotalOrd","","",null,null],[12,"0","","",32,null],[0,"binary_indexed_tree","","",null,null],[3,"BinaryIndexedTree","competitive::data_structure::binary_indexed_tree","",null,null],[3,"BinaryIndexedTree2D","","",null,null],[11,"new","","",33,[[["m"],["usize"]],["binaryindexedtree"]]],[11,"ident","","",33,[[["self"]]]],[11,"operate","","",33,[[["self"]]]],[11,"accumulate","","0-indexed [1, k)",33,[[["self"],["usize"]]]],[11,"update","","1-indexed",33,[[["self"],["usize"]]]],[11,"inverse","","",33,[[["self"]]]],[11,"fold","","0-indexed [l, r)",33,[[["self"],["usize"]]]],[11,"get","","1-indexed",33,[[["self"],["usize"]]]],[11,"set","","1-indexed",33,[[["self"],["usize"]]]],[11,"lower_bound","","1-indexed",33,[[["self"]],["usize"]]],[11,"new","","",34,[[["m"],["usize"]],["binaryindexedtree2d"]]],[11,"accumulate","","0-indexed [0, i) x [0, j)",34,[[["self"],["usize"]]]],[11,"update","","1-indexed",34,[[["self"],["usize"]]]],[11,"fold","","0-indexed [i1, i2) x [j1, j2)",34,[[["self"],["usize"]]]],[11,"get","","1-indexed",34,[[["self"],["usize"]]]],[11,"set","","1-indexed",34,[[["self"],["usize"]]]],[0,"bitset","competitive::data_structure","",null,null],[3,"BitSet","competitive::data_structure::bitset","",null,null],[11,"new","","",35,[[["usize"]],["self"]]],[11,"get","","",35,[[["self"],["usize"]],["bool"]]],[11,"set","","",35,[[["self"],["usize"],["bool"]]]],[11,"count_ones","","",35,[[["self"]],["u64"]]],[11,"count_zeros","","",35,[[["self"]],["u64"]]],[11,"shl_bitor_assign","","",35,[[["self"],["usize"]]]],[11,"shr_bitor_assign","","",35,[[["self"],["usize"]]]],[0,"disjoint_sparse_table","competitive::data_structure","",null,null],[3,"DisjointSparseTable","competitive::data_structure::disjoint_sparse_table","",null,null],[11,"new","","",36,[[["vec"],["s"]],["self"]]],[11,"len","","",36,[[["self"]],["usize"]]],[11,"fold_close","","",36,[[["self"],["usize"]]]],[11,"fold","","",36,[[["self"],["usize"]]]],[0,"lazy_segment_tree","competitive::data_structure","",null,null],[3,"LazySegmentTree","competitive::data_structure::lazy_segment_tree","M: folding Monoid E: lazy Monoid effect",null,null],[11,"new","","",37,[[["m"],["usize"],["e"]],["self"]]],[11,"from_vec","","",37,[[["e"],["m"],["vec"]],["self"]]],[11,"eval","","",37,[[["self"],["usize"]]]],[11,"update","","",37,[[["self"],["usize"]]]],[11,"fold","","",37,[[["self"],["usize"]]]],[0,"segment_tree","competitive::data_structure","",null,null],[3,"SegmentTree","competitive::data_structure::segment_tree","",null,null],[11,"new","","",38,[[["m"],["usize"]],["segmenttree"]]],[11,"from_vec","","",38,[[["m"],["vec"]],["segmenttree"]]],[11,"set","","",38,[[["self"],["usize"]]]],[11,"update","","",38,[[["self"],["usize"]]]],[11,"get","","",38,[[["self"],["usize"]]]],[11,"fold","","",38,[[["self"],["usize"]]]],[11,"fold_all","","",38,[[["self"]]]],[11,"lower_bound_all","","left most index [0, r) that satisfies monotonic condition",38,[[["fn"],["self"],["usize"]],["usize"]]],[11,"lower_bound","","left most index [l, r) that satisfies monotonic condition",38,[[["usize"],["fn"],["self"]],["usize"]]],[0,"sliding_winsow_aggregation","competitive::data_structure","",null,null],[3,"QueueAggregation","competitive::data_structure::sliding_winsow_aggregation","",null,null],[3,"DequeAggregation","","",null,null],[11,"new","","",39,[[["m"]],["self"]]],[11,"len","","",39,[[["self"]],["usize"]]],[11,"is_empty","","",39,[[["self"]],["bool"]]],[11,"fold_all","","",39,[[["self"]]]],[11,"last","","",39,[[["self"]],["option"]]],[11,"push","","",39,[[["self"]]]],[11,"pop","","",39,[[["self"]],["option"]]],[11,"new","","",40,[[["m"]],["self"]]],[11,"len","","",40,[[["self"]],["usize"]]],[11,"is_empty","","",40,[[["self"]],["bool"]]],[11,"fold_all","","",40,[[["self"]]]],[11,"front","","",40,[[["self"]],["option"]]],[11,"back","","",40,[[["self"]],["option"]]],[11,"push_front","","",40,[[["self"]]]],[11,"push_back","","",40,[[["self"]]]],[11,"pop_front","","",40,[[["self"]],["option"]]],[11,"pop_back","","",40,[[["self"]],["option"]]],[11,"reverse","","",40,[[["self"]]]],[0,"union_find","competitive::data_structure","",null,null],[3,"UnionFind","competitive::data_structure::union_find","",null,null],[3,"WeightedUnionFind","","",null,null],[11,"new","","",41,[[["usize"]],["unionfind"]]],[11,"find","","",41,[[["self"],["usize"]],["usize"]]],[11,"unite","","",41,[[["self"],["usize"]],["bool"]]],[11,"size","","",41,[[["self"],["usize"]],["usize"]]],[11,"same","","",41,[[["self"],["usize"]],["bool"]]],[11,"members","","",41,[[["self"],["usize"]],[["usize"],["vec",["usize"]]]]],[11,"roots","","",41,[[["self"]],[["usize"],["vec",["usize"]]]]],[11,"all_group_members","","",41,[[["self"]],[["hashmap",["usize","vec"]],["usize"],["vec",["usize"]]]]],[11,"new","","",42,[[["usize"],["g"]],["self"]]],[11,"find","","",42,[[["self"],["usize"]],["usize"]]],[11,"get_weight","","",42,[[["self"],["usize"]]]],[11,"unite","","",42,[[["self"],["usize"]],["bool"]]],[11,"size","","",42,[[["self"],["usize"]],["usize"]]],[11,"is_same","","",42,[[["self"],["usize"]],["bool"]]],[11,"get_difference","","",42,[[["self"],["usize"]],["option"]]],[11,"members","","",42,[[["self"],["usize"]],[["usize"],["vec",["usize"]]]]],[11,"roots","","",42,[[["self"]],[["usize"],["vec",["usize"]]]]],[11,"all_group_members","","",42,[[["self"]],[["vec",["usize"]],["hashmap",["usize","vec"]],["usize"]]]],[0,"geometry","competitive","",null,null],[3,"Real","competitive::geometry","",null,null],[12,"0","","",43,null],[4,"CCW","","",null,null],[13,"OnlineFront","","a--b--c",44,null],[13,"Clockwise","","a--b-vc",44,null],[13,"OnSegment","","a--c--b",44,null],[13,"CounterClockwise","","a--b-^c",44,null],[13,"OnlineBack","","c--a--b",44,null],[5,"ccw","","",null,[[["point"]],["ccw"]]],[0,"circle","","",null,null],[3,"Circle","competitive::geometry::circle","",null,null],[11,"new","","",45,[[["f64"],["point"]],["self"]]],[11,"cross_circle","","",45,[[["self"]],["option"]]],[11,"contains_point","","",45,[[["self"],["point"]],["bool"]]],[0,"closest_pair","competitive::geometry","",null,null],[5,"closest_pair","competitive::geometry::closest_pair","",null,[[["vec",["point"]],["point"]],["f64"]]],[0,"complex","competitive::geometry","",null,null],[3,"Complex","competitive::geometry::complex","",null,null],[12,"re","","",46,null],[12,"im","","",46,null],[11,"new","","",46,[[["t"]],["complex"]]],[11,"transpose","","",46,[[],["complex"]]],[11,"conjugate","","",46,[[],["complex"]]],[11,"dot","","",46,[[],["t"]]],[11,"cross","","",46,[[],["t"]]],[11,"norm","","",46,[[],["t"]]],[11,"from_polar","","",46,[[["f64"]],["self"]]],[11,"abs","","",46,[[],["f64"]]],[11,"unit","","",46,[[],["self"]]],[11,"angle","","",46,[[],["f64"]]],[0,"line","competitive::geometry","",null,null],[3,"Line","competitive::geometry::line","",null,null],[3,"LineSegment","","",null,null],[11,"new","","",47,[[["point"]],["self"]]],[11,"dir","","",47,[[["self"]],["point"]]],[11,"ccw","","",47,[[["self"],["point"]],["ccw"]]],[11,"projection","","",47,[[["self"],["point"]],["point"]]],[11,"reflection","","",47,[[["self"],["point"]],["point"]]],[11,"distance_point","","",47,[[["self"],["point"]],["f64"]]],[11,"is_parallel","","",47,[[["self"]],["bool"]]],[11,"is_orthogonal","","",47,[[["self"]],["bool"]]],[11,"new","","",48,[[["point"]],["self"]]],[11,"dir","","",48,[[["self"]],["point"]]],[11,"ccw","","",48,[[["self"],["point"]],["ccw"]]],[11,"projection","","",48,[[["self"],["point"]],["point"]]],[11,"reflection","","",48,[[["self"],["point"]],["point"]]],[11,"is_parallel","","",48,[[["self"]],["bool"]]],[11,"is_orthogonal","","",48,[[["self"]],["bool"]]],[11,"intersect","","",48,[[["self"]],["bool"]]],[11,"intersect_point","","",48,[[["self"],["point"]],["bool"]]],[11,"cross_point","","",48,[[["self"]],[["option",["point"]],["point"]]]],[11,"distance_point","","",48,[[["self"],["point"]],["f64"]]],[11,"distance","","",48,[[["self"]],["f64"]]],[0,"polygon","competitive::geometry","",null,null],[5,"convex_hull","competitive::geometry::polygon","",null,[[["vec",["point"]],["point"]],[["vec",["point"]],["point"]]]],[5,"convex_diameter","","",null,[[["vec",["point"]],["point"]],["f64"]]],[6,"Point","competitive::geometry","",null,null],[17,"EPS","","",null,null],[0,"graph","competitive","",null,null],[3,"DirectedAcyclicGraph","competitive::graph","",null,null],[0,"base","","",null,null],[3,"Adjacent","competitive::graph::base","",null,null],[12,"to","","",49,null],[12,"id","","",49,null],[3,"Graph","","",null,null],[12,"vsize","","",50,null],[12,"esize","","",50,null],[12,"graph","","",50,null],[3,"GraphRec","","",null,null],[12,"n","","",51,null],[12,"visited","","",51,null],[12,"cost","","",51,null],[11,"new","","",49,[[["usize"]],["adjacent"]]],[11,"new","","",50,[[["usize"]],["graph"]]],[11,"add_edge","","",50,[[["self"],["usize"]]]],[11,"add_undirected_edge","","",50,[[["self"],["usize"]]]],[11,"vertices","","",50,[[["self"]],[["range",["usize"]],["usize"]]]],[11,"adjacency","","",50,[[["self"],["usize"]],["vec"]]],[11,"new","","",51,[[["usize"]],["graphrec"]]],[11,"dfs","","",51,[[["self"],["usize"],["graph"]]]],[0,"maximum_flow","competitive::graph","",null,null],[3,"RevEdge","competitive::graph::maximum_flow","",null,null],[12,"to","","",52,null],[12,"rev","","",52,null],[12,"cap","","",52,null],[3,"FordFulkerson","","",null,null],[3,"Dinic","","",null,null],[12,"graph","","",53,null],[11,"new","","",52,[[["usize"],["u64"]],["revedge"]]],[11,"new","","",54,[[["usize"]],["fordfulkerson"]]],[11,"add_edge","","",54,[[["self"],["usize"],["u64"]]]],[11,"dfs","","",54,[[["self"],["usize"],["u64"]],["u64"]]],[11,"maximum_flow","","",54,[[["self"],["usize"]],["u64"]]],[11,"new","","",53,[[["usize"]],["dinic"]]],[11,"add_edge","","",53,[[["self"],["usize"],["u64"]]]],[11,"maximum_flow","","",53,[[["self"],["usize"]],["u64"]]],[0,"minimum_cost_flow","competitive::graph","",null,null],[3,"RevEdge","competitive::graph::minimum_cost_flow","",null,null],[12,"to","","",55,null],[12,"rev","","",55,null],[12,"cap","","",55,null],[12,"cost","","",55,null],[3,"PrimalDual","","",null,null],[11,"new","","",55,[[["i64"],["usize"],["u64"]],["revedge"]]],[11,"new","","",56,[[["usize"]],["primaldual"]]],[11,"add_edge","","",56,[[["i64"],["usize"],["self"],["u64"]]]],[11,"minimum_cost_flow","","",56,[[["self"],["usize"],["u64"]],[["option",["i64"]],["i64"]]]],[0,"strongly_connected_component","competitive::graph","",null,null],[3,"StronglyConnectedComponent","competitive::graph::strongly_connected_component","",null,null],[3,"TwoSatisfiability","","",null,null],[11,"new","","",57,[[["usize"]],["self"]]],[11,"add_edge","","",57,[[["self"],["usize"]]]],[11,"dfs","","",57,[[["self"],["usize"]]]],[11,"rdfs","","",57,[[["self"],["usize"]]]],[11,"build","","",57,[[["self"]]]],[11,"gen_cgraph","","",57,[[["self"]],[["vec",["vec"]],["vec",["usize"]]]]],[11,"component","","",57,[[["self"]],[["hashset",["usize"]],["vec",["hashset"]]]]],[11,"new","","",58,[[["usize"]],["self"]]],[11,"add_inner","","",58,[[["self"],["usize"]]]],[11,"add_or","","",58,[[["self"],["usize"]]]],[11,"add_nand","","",58,[[["self"],["usize"]]]],[11,"set_true","","",58,[[["self"],["usize"]]]],[11,"set_false","","",58,[[["self"],["usize"]]]],[11,"build","","",58,[[["self"]],[["vec",["bool"]],["option",["vec"]]]]],[0,"topological_sort","competitive::graph","",null,null],[11,"topological_sort","competitive::graph::base","",50,[[["self"]],[["usize"],["vec",["usize"]]]]],[11,"new","competitive::graph","",59,[[["usize"]],["directedacyclicgraph"]]],[11,"add_edge","","",59,[[["self"],["usize"]]]],[11,"bfs","","",59,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[0,"math","competitive","",null,null],[0,"anymod","competitive::math","",null,null],[3,"AnyMod","competitive::math::anymod","",null,null],[11,"new","","",60,[[["i64"]],["self"]]],[11,"modulo","","",60,[[["i64"]],["i64"]]],[11,"pow","","",60,[[["usize"]],["self"]]],[11,"inv","","",60,[[],["self"]]],[0,"anymodu32","competitive::math","",null,null],[3,"AnyModu32","competitive::math::anymodu32","",null,null],[0,"modu32_impl","","",null,null],[11,"new","","",61,[[["u32"]],["self"]]],[11,"new_unchecked","","",61,[[["u32"]],["self"]]],[11,"one","","",61,[[],["self"]]],[11,"zero","","",61,[[],["self"]]],[11,"get_modulo","","",61,[[],["u32"]]],[11,"set_modulo","","",61,[[["u32"]]]],[11,"pow","","",61,[[["usize"]],["self"]]],[11,"inv","","",61,[[],["self"]]],[0,"factorial","competitive::math","",null,null],[3,"MemorizedFactorial","competitive::math::factorial","",null,null],[3,"SmallModMemorizedFactorial","","",null,null],[11,"new","","",62,[[["usize"]],["memorizedfactorial"]]],[11,"combination","","",62,[[["self"],["usize"]],["modi64"]]],[11,"permutation","","",62,[[["self"],["usize"]],["modi64"]]],[11,"homogeneous_product","","",62,[[["self"],["usize"]],["modi64"]]],[11,"new","","",63,[[["usize"]],["smallmodmemorizedfactorial"]]],[11,"factorial","","n! = a * p^e",63,[[["self"],["usize"]]]],[11,"combination","","",63,[[["self"],["usize"]],["anymod"]]],[0,"gcd","competitive::math","",null,null],[5,"gcd","competitive::math::gcd","",null,[[["u64"]],["u64"]]],[5,"gcd_binary","","",null,[[["u64"]],["u64"]]],[5,"lcm","","",null,[[["u64"]],["u64"]]],[5,"extgcd","","",null,[[["i64"]]]],[5,"extgcd_loop","","",null,[[["i64"]]]],[5,"extgcd_binary","","",null,[[["i64"]]]],[5,"modinv","","",null,[[["i64"]],["i64"]]],[5,"modinv_loop","","",null,[[["i64"]],["i64"]]],[5,"modinv_extgcd_binary","","0 < a < p, gcd(a, p) == 1, p is prime > 2",null,[[["u64"]],["u64"]]],[0,"matrix","competitive::math","",null,null],[3,"Matrix","competitive::math::matrix","",null,null],[12,"shape","","",64,null],[12,"data","","",64,null],[11,"new","","",64,[[["t"]],["self"]]],[11,"from_vec","","",64,[[["vec",["vec"]],["vec"]],["self"]]],[11,"zeros","","",64,[[],["self"]]],[11,"eye","","",64,[[["t"]],["self"]]],[11,"pow","","",64,[[["t"],["self"],["usize"]],["self"]]],[11,"gauss_jordan","","",64,[[["vec"],["self"]],[["vec",["f64"]],["option",["vec"]]]]],[0,"modi64","competitive::math","",null,null],[3,"Modi64","competitive::math::modi64","",null,null],[12,"0","","",65,null],[11,"new","","",65,[[["i64"]],["self"]]],[11,"modulo","","",65,[[["i64"]],["i64"]]],[11,"pow","","",65,[[["i64"]],["self"]]],[11,"inv","","",65,[[],["self"]]],[0,"modu32","competitive::math","",null,null],[3,"Modu32","competitive::math::modu32","",null,null],[0,"modulos","","",null,null],[3,"Modulo1000000007","competitive::math::modu32::modulos","",null,null],[3,"Modulo1000000009","","",null,null],[3,"Modulo998244353","","",null,null],[0,"modu32_impl","competitive::math::modu32","",null,null],[8,"Modulo","","",null,null],[18,"MODULO","","",66,null],[11,"modulo","","",66,[[["u32"]],["u32"]]],[11,"new","","",67,[[["u32"]],["self"]]],[11,"new_unchecked","","",67,[[["u32"]],["self"]]],[11,"one","","",67,[[],["self"]]],[11,"zero","","",67,[[],["self"]]],[11,"get_mod","","",67,[[],["u32"]]],[11,"pow","","",67,[[["usize"]],["self"]]],[11,"inv","","",67,[[],["self"]]],[0,"nums","competitive::math","",null,null],[3,"BabyStepGiantStep","competitive::math::nums","",null,null],[5,"binary_exponentiation","","",null,[[["usize"],["mulassign"],["clone"]],[["mulassign"],["clone"]]]],[11,"new","","",68,[[["u64"]],["self"]]],[11,"solve","","",68,[[["self"],["u64"]],[["u64"],["option",["u64"]]]]],[0,"polynomial","competitive::math","",null,null],[3,"Polynomial","competitive::math::polynomial","",null,null],[12,"0","","",69,null],[12,"1","","",69,null],[5,"poly_add","","",null,[[["i64"],["polynomial"]],["polynomial"]]],[5,"poly_sub","","",null,[[["i64"],["polynomial"]],["polynomial"]]],[5,"poly_mul","","",null,[[["i64"],["polynomial"]],["polynomial"]]],[5,"poly_div","","",null,[[["i64"],["polynomial"]],["polynomial"]]],[5,"poly_mod","","",null,[[["i64"],["polynomial"]],["polynomial"]]],[5,"poly_assign","","",null,[[["i64"],["polynomial"]],["i64"]]],[0,"poly_mod_poly","","",null,null],[5,"poly_mulmod","competitive::math::polynomial::poly_mod_poly","",null,[[["poly"]],["poly"]]],[5,"poly_pow","","",null,[[["poly"],["usize"]],["poly"]]],[6,"Poly","","",null,null],[11,"len","competitive::math::polynomial","",69,[[["self"]],["usize"]]],[0,"prime","competitive::math","",null,null],[3,"PrimeTable","competitive::math::prime","",null,null],[3,"EulerPhiTable","","",null,null],[5,"prime_factors","","",null,[[["usize"]],[["usize"],["hashmap",["usize","usize"]]]]],[5,"divisors","","",null,[[["usize"]],[["usize"],["vec",["usize"]]]]],[5,"pow","","",null,[[["u64"]],["u64"]]],[5,"miller_rabin","","",null,[[["u64"],["usize"]],["bool"]]],[5,"euler_phi","","",null,[[["usize"]],["usize"]]],[5,"moebius","","g(d) = Sigma mu(d) * f(n/d)",null,[[["usize"]],[["i64"],["hashmap",["usize","i64"]],["usize"]]]],[11,"new","","",70,[[["usize"]],["self"]]],[11,"is_prime","","",70,[[["self"],["usize"]],["bool"]]],[11,"prime_factors","","",70,[[["self"],["usize"]],[["usize"],["hashmap",["usize","usize"]]]]],[11,"new","","",71,[[["usize"]],["self"]]],[11,"get","","",71,[[["self"],["usize"]],["usize"]]],[0,"quad_double","competitive::math","",null,null],[3,"QuadDouble","competitive::math::quad_double","ref: https://na-inet.jp/na/qd_ja.pdf",null,null],[0,"quad_double_impl","","",null,null],[5,"quick_two_sum","competitive::math::quad_double::quad_double_impl","",null,[[["f64"]]]],[5,"two_sum","","",null,[[["f64"]]]],[5,"split","","",null,[[["f64"]]]],[5,"two_prod","","",null,[[["f64"]]]],[5,"three_three_sum","","",null,[[["f64"]]]],[5,"three_two_sum","","",null,[[["f64"]]]],[5,"multiple_three_sum","","",null,[[]]],[5,"multiple_two_sum","","",null,[[]]],[5,"double_accumulate","","",null,[[["f64"]]]],[11,"new","competitive::math::quad_double","",72,[[["f64"]],["self"]]],[11,"renormalize","","",72,[[["f64"]],["self"]]],[0,"string","competitive","",null,null],[0,"knuth_morris_pratt","competitive::string","",null,null],[3,"KnuthMorrisPratt","competitive::string::knuth_morris_pratt","",null,null],[11,"new","","",73,[[["vec"]],["knuthmorrispratt"]]],[11,"search_all","","",73,[[["self"],["vec"]],[["usize"],["vec",["usize"]]]]],[0,"rolling_hash","competitive::string","",null,null],[3,"RollingHash","competitive::string::rolling_hash","",null,null],[3,"MultipleRollingHash","","",null,null],[18,"MOD","","",74,null],[11,"mersenne_mod","","",74,[[["u64"]],["u64"]]],[11,"mersenne_mul","","",74,[[["u64"]],["u64"]]],[11,"mersenne_mul_mod","","",74,[[["u64"]],["u64"]]],[11,"new","","",74,[[["u64"],["vec"]],["self"]]],[11,"hash_once","","",74,[[["self"],["vec"]],["u64"]]],[11,"find","","S [l, r)",74,[[["self"],["usize"]],["u64"]]],[11,"concat","","",74,[[["usize"],["self"],["u64"]],["u64"]]],[11,"new","","",75,[[["vec"]],["self"]]],[11,"new_rand","","",75,[[["usize"],["vec"]],["self"]]],[11,"find","","",75,[[["self"],["usize"]],[["vec",["u64"]],["u64"]]]],[11,"concat","","",75,[[["usize"],["self"],["vec"]],[["vec",["u64"]],["u64"]]]],[0,"suffix_array","competitive::string","",null,null],[3,"SuffixArray","competitive::string::suffix_array","",null,null],[11,"new","","",76,[[["vec"]],["self"]]],[11,"len","","",76,[[["self"]],["usize"]]],[11,"longest_common_prefix_array","","",76,[[["self"]],[["usize"],["vec",["usize"]]]]],[0,"z_algorithm","competitive::string","",null,null],[3,"Zarray","competitive::string::z_algorithm","",null,null],[11,"new","","",77,[[],["zarray"]]],[11,"search","","",77,[[["eq"],["vec"]],[["usize"],["vec",["usize"]]]]],[0,"tools","competitive","",null,null],[0,"input","competitive::tools","",null,null],[0,"iterable","","",null,null],[0,"output","","",null,null],[5,"with_bufwriter","competitive::tools::output","",null,[[["f"]],["result"]]],[0,"random","competitive::tools","",null,null],[3,"Xorshift","competitive::tools::random","",null,null],[11,"new","","",78,[[["u64"]],["self"]]],[11,"time","","",78,[[],["self"]]],[11,"next","","",78,[[["self"]],["u64"]]],[11,"rand","","",78,[[["self"],["u64"]],["u64"]]],[11,"rands","","",78,[[["self"],["u64"],["usize"]],[["vec",["u64"]],["u64"]]]],[11,"randf","","",78,[[["self"]],["f64"]]],[0,"tree","competitive","",null,null],[0,"depth","competitive::tree","",null,null],[11,"tree_depth","competitive::graph::base","",50,[[["self"],["usize"]],[["vec",["u64"]],["u64"]]]],[11,"tree_size","","",50,[[["self"],["usize"]],[["vec",["u64"]],["u64"]]]],[0,"euler_tour","competitive::tree","",null,null],[3,"EulerTourForEdge","competitive::tree::euler_tour","",null,null],[3,"EulerTourForVertex","","",null,null],[3,"EulerTourForRichVertex","","",null,null],[3,"LowestCommonAncestor","","",null,null],[3,"LCAMonoid","","",null,null],[0,"impl_lcam","","",null,null],[11,"new","","",79,[[["graph"]],["self"]]],[11,"ancestor","","",79,[[["self"],["usize"]],["usize"]]],[11,"new","","",80,[[["usize"]],["self"]]],[11,"len","","",80,[[["self"]],["usize"]]],[11,"edge_tour","","",80,[[["self"],["usize"],["graph"]]]],[11,"new","","",81,[[["usize"]],["self"]]],[11,"len","","",81,[[["self"]],["usize"]]],[11,"subtree_vertex_tour","","",81,[[["self"],["usize"],["graph"]]]],[11,"path_vertex_tour","","",81,[[["self"],["usize"],["graph"]]]],[11,"subtree_query","","",81,[[["fnmut"],["self"],["usize"]],["t"]]],[11,"subtree_update","","",81,[[["usize"],["fnmut"],["t"],["self"]]]],[11,"path_query","","",81,[[["fnmut"],["self"],["usize"]],["t"]]],[11,"path_update","","",81,[[["usize"],["fnmut"],["t"],["self"]]]],[11,"new","","",82,[[["usize"]],["self"]]],[11,"len","","",82,[[["self"]],["usize"]]],[11,"vertex_tour","","",82,[[["self"],["usize"],["graph"]]]],[11,"query","","",82,[[["fnmut"],["self"],["usize"]],["t"]]],[11,"gen_lca","","",82,[[["self"],["graph"]],["lowestcommonancestor"]]],[11,"lca","","",83,[[["self"],["usize"]],["usize"]]],[0,"rerooting","competitive::tree","",null,null],[3,"ReRooting","competitive::tree::rerooting","",null,null],[11,"new","","",84,[[["m"],["usize"],["f"]],["self"]]],[11,"eidx","","",84,[[["adjacent"],["self"],["usize"]],["usize"]]],[11,"reidx","","",84,[[["adjacent"],["self"],["usize"]],["usize"]]],[11,"merge","","",84,[[["self"]]]],[11,"add_subroot","","",84,[[["usize"],["self"]]]],[11,"add_root","","",84,[[["self"],["usize"]]]],[11,"dfs","","",84,[[["usize"],["graph"],["self"],["adjacent"]]]],[11,"efs","","",84,[[["self"],["usize"],["graph"]]]],[11,"rerooting","","",84,[[["self"],["graph"]]]],[0,"tree","competitive::tree","",null,null],[3,"TreeRec","competitive::tree::tree","",null,null],[12,"n","","",85,null],[11,"new","","",85,[[["usize"]],["treerec"]]],[11,"dfs","","",85,[[["self"],["usize"],["graph"]]]],[14,"impl_additive_identity","competitive","",null,null],[14,"impl_multiplicative_identity","","",null,null],[14,"impl_bitand_identity","","",null,null],[14,"impl_bitor_identity","","",null,null],[14,"read_value","","",null,null],[14,"input_inner","","",null,null],[14,"input","","",null,null],[11,"from","competitive::algebra::effect","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","competitive::algebra::operations","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,[[["self"],["t"]]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","competitive::algorithm::compress","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","competitive::algorithm::convex_hull_trick","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","competitive::data_structure","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","competitive::data_structure::binary_indexed_tree","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","competitive::data_structure::bitset","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","competitive::data_structure::disjoint_sparse_table","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","competitive::data_structure::lazy_segment_tree","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","competitive::data_structure::segment_tree","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","competitive::data_structure::sliding_winsow_aggregation","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","competitive::data_structure::union_find","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","competitive::geometry","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","competitive::geometry::circle","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","competitive::geometry::complex","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","competitive::geometry::line","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","competitive::graph","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"from","competitive::graph::base","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"to_owned","","",49,[[["self"]],["t"]]],[11,"clone_into","","",49,[[["self"],["t"]]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","competitive::graph::maximum_flow","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","competitive::graph::minimum_cost_flow","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"to_owned","","",55,[[["self"]],["t"]]],[11,"clone_into","","",55,[[["self"],["t"]]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","competitive::graph::strongly_connected_component","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","competitive::math::anymod","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"to_string","","",60,[[["self"]],["string"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"from","competitive::math::anymodu32","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"to_string","","",61,[[["self"]],["string"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"from","competitive::math::factorial","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"to_owned","","",63,[[["self"]],["t"]]],[11,"clone_into","","",63,[[["self"],["t"]]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"from","competitive::math::matrix","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from","competitive::math::modi64","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"to_string","","",65,[[["self"]],["string"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"from","competitive::math::modu32","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"to_string","","",67,[[["self"]],["string"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"from","competitive::math::modu32::modulos","",87,[[["t"]],["t"]]],[11,"into","","",87,[[],["u"]]],[11,"to_owned","","",87,[[["self"]],["t"]]],[11,"clone_into","","",87,[[["self"],["t"]]]],[11,"try_from","","",87,[[["u"]],["result"]]],[11,"try_into","","",87,[[],["result"]]],[11,"borrow","","",87,[[["self"]],["t"]]],[11,"borrow_mut","","",87,[[["self"]],["t"]]],[11,"type_id","","",87,[[["self"]],["typeid"]]],[11,"from","","",88,[[["t"]],["t"]]],[11,"into","","",88,[[],["u"]]],[11,"to_owned","","",88,[[["self"]],["t"]]],[11,"clone_into","","",88,[[["self"],["t"]]]],[11,"try_from","","",88,[[["u"]],["result"]]],[11,"try_into","","",88,[[],["result"]]],[11,"borrow","","",88,[[["self"]],["t"]]],[11,"borrow_mut","","",88,[[["self"]],["t"]]],[11,"type_id","","",88,[[["self"]],["typeid"]]],[11,"from","","",89,[[["t"]],["t"]]],[11,"into","","",89,[[],["u"]]],[11,"to_owned","","",89,[[["self"]],["t"]]],[11,"clone_into","","",89,[[["self"],["t"]]]],[11,"try_from","","",89,[[["u"]],["result"]]],[11,"try_into","","",89,[[],["result"]]],[11,"borrow","","",89,[[["self"]],["t"]]],[11,"borrow_mut","","",89,[[["self"]],["t"]]],[11,"type_id","","",89,[[["self"]],["typeid"]]],[11,"from","competitive::math::nums","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"from","competitive::math::polynomial","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"from","competitive::math::prime","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"from","competitive::math::quad_double","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"to_string","","",72,[[["self"]],["string"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"from","competitive::string::knuth_morris_pratt","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"from","competitive::string::rolling_hash","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,[[["self"],["t"]]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"from","","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"from","competitive::string::suffix_array","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,[[["self"],["t"]]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"from","competitive::string::z_algorithm","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,[[["self"],["t"]]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"from","competitive::tools::random","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,[[["self"],["t"]]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"from","competitive::tree::euler_tour","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,[[["self"],["t"]]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,[[["self"],["t"]]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"from","","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"to_owned","","",82,[[["self"]],["t"]]],[11,"clone_into","","",82,[[["self"],["t"]]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,[[["self"],["t"]]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,[[["self"],["t"]]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"from","competitive::tree::rerooting","",84,[[["t"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,[[["self"],["t"]]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"from","competitive::tree::tree","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"effect","competitive::algebra::effect","",4,[[["self"]]]],[11,"operate","","",4,[[["self"]]]],[11,"operate","competitive::algebra::operations","",6,[[["self"]]]],[11,"operate","","",7,[[["self"]]]],[11,"operate","","",8,[[["self"]]]],[11,"operate","","",9,[[["self"]]]],[11,"operate","","",10,[[["self"]]]],[11,"operate","","",11,[[["self"]]]],[11,"operate","","",12,[[["self"]]]],[11,"operate","","",13,[[["self"]]]],[11,"operate","","",14,[[["self"]]]],[11,"operate","","",15,[[["self"]]]],[11,"operate","","",16,[[["self"]]]],[11,"operate","","",86,[[["self"]]]],[11,"operate","","",17,[[["self"]]]],[11,"operate","","",18,[[["self"]]]],[11,"operate","","",19,[[["self"]]]],[11,"operate","competitive::tree::euler_tour","",79,[[["self"]]]],[11,"unit","competitive::algebra::effect","",4,[[["self"]]]],[11,"unit","competitive::algebra::operations","",6,[[["self"]]]],[11,"unit","","",7,[[["self"]]]],[11,"unit","","",8,[[["self"]]]],[11,"unit","","",9,[[["self"]]]],[11,"unit","","",10,[[["self"]]]],[11,"unit","","",11,[[["self"]]]],[11,"unit","","",12,[[["self"]]]],[11,"unit","","",13,[[["self"]]]],[11,"unit","","",14,[[["self"]]]],[11,"unit","","",15,[[["self"]]]],[11,"unit","","",16,[[["self"]]]],[11,"unit","","",17,[[["self"]]]],[11,"unit","","",18,[[["self"]]]],[11,"unit","","",19,[[["self"]]]],[11,"inverse","","",10,[[["self"]]]],[11,"inverse","","",11,[[["self"]]]],[11,"inverse","","",16,[[["self"]]]],[11,"inverse","","",18,[[["self"]]]],[11,"zero","competitive::math::anymodu32","",61,[[],["self"]]],[11,"zero","competitive::math::modu32","",67,[[],["self"]]],[11,"one","competitive::math::anymodu32","",61,[[],["self"]]],[11,"one","competitive::math::modu32","",67,[[],["self"]]],[11,"from","competitive::math::anymodu32","",61,[[["u32"]],["self"]]],[11,"from","","",61,[[["u64"]],["self"]]],[11,"from","competitive::math::modi64","",65,[[["i64"]],["self"]]],[11,"from","competitive::math::modu32","",67,[[["u32"]],["self"]]],[11,"from","","",67,[[["u64"]],["self"]]],[11,"from","competitive::math::quad_double","",72,[[["f64"]],["self"]]],[11,"into","","",72,[[],["f64"]]],[11,"clone","competitive::algebra::effect","",4,[[["self"]],["anymonoideffect"]]],[11,"clone","competitive::algebra::operations","",6,[[["self"]],["maxoperation"]]],[11,"clone","","",7,[[["self"]],["minoperation"]]],[11,"clone","","",8,[[["self"]],["firstoperation"]]],[11,"clone","","",9,[[["self"]],["lastoperation"]]],[11,"clone","","",10,[[["self"]],["additiveoperation"]]],[11,"clone","","",11,[[["self"]],["multiplicativeoperation"]]],[11,"clone","","",12,[[["self"]],["linearoperation"]]],[11,"clone","","",13,[[["self"]],["bitandoperation"]]],[11,"clone","","",14,[[["self"]],["bitoroperation"]]],[11,"clone","","",15,[[["self"]],["monoidaloperation"]]],[11,"clone","","",16,[[["self"]],["groupoperation"]]],[11,"clone","","",86,[[["self"]],["assocoativeoperator"]]],[11,"clone","","",17,[[["self"]],["absorbedassocoativeoperator"]]],[11,"clone","","",18,[[["self"]],["cartesianoperation"]]],[11,"clone","","",19,[[["self"]],["countingoperation"]]],[11,"clone","competitive::algorithm::compress","",26,[[["self"]],["compress"]]],[11,"clone","competitive::algorithm::convex_hull_trick","",27,[[["self"]],["chtline"]]],[11,"clone","","",28,[[["self"]],["convexhulltrick"]]],[11,"clone","competitive::data_structure::binary_indexed_tree","",33,[[["self"]],["binaryindexedtree"]]],[11,"clone","","",34,[[["self"]],["binaryindexedtree2d"]]],[11,"clone","competitive::data_structure::bitset","",35,[[["self"]],["bitset"]]],[11,"clone","competitive::data_structure::disjoint_sparse_table","",36,[[["self"]],["disjointsparsetable"]]],[11,"clone","competitive::data_structure::lazy_segment_tree","",37,[[["self"]],["lazysegmenttree"]]],[11,"clone","competitive::data_structure::segment_tree","",38,[[["self"]],["segmenttree"]]],[11,"clone","competitive::data_structure::sliding_winsow_aggregation","",39,[[["self"]],["queueaggregation"]]],[11,"clone","","",40,[[["self"]],["dequeaggregation"]]],[11,"clone","competitive::data_structure::union_find","",41,[[["self"]],["unionfind"]]],[11,"clone","","",42,[[["self"]],["weightedunionfind"]]],[11,"clone","competitive::data_structure","",31,[[["self"]],["rev"]]],[11,"clone","competitive::geometry::circle","",45,[[["self"]],["circle"]]],[11,"clone","competitive::geometry::complex","",46,[[["self"]],["complex"]]],[11,"clone","competitive::geometry::line","",47,[[["self"]],["line"]]],[11,"clone","","",48,[[["self"]],["linesegment"]]],[11,"clone","competitive::geometry","",43,[[["self"]],["real"]]],[11,"clone","","",44,[[["self"]],["ccw"]]],[11,"clone","competitive::graph::base","",49,[[["self"]],["adjacent"]]],[11,"clone","","",50,[[["self"]],["graph"]]],[11,"clone","competitive::graph::maximum_flow","",52,[[["self"]],["revedge"]]],[11,"clone","competitive::graph::minimum_cost_flow","",55,[[["self"]],["revedge"]]],[11,"clone","competitive::math::anymod","",60,[[["self"]],["anymod"]]],[11,"clone","competitive::math::anymodu32","",61,[[["self"]],["anymodu32"]]],[11,"clone","competitive::math::factorial","",62,[[["self"]],["memorizedfactorial"]]],[11,"clone","","",63,[[["self"]],["smallmodmemorizedfactorial"]]],[11,"clone","competitive::math::matrix","",64,[[["self"]],["matrix"]]],[11,"clone","competitive::math::modi64","",65,[[["self"]],["modi64"]]],[11,"clone","competitive::math::modu32::modulos","",87,[[["self"]],["modulo1000000007"]]],[11,"clone","","",88,[[["self"]],["modulo1000000009"]]],[11,"clone","","",89,[[["self"]],["modulo998244353"]]],[11,"clone","competitive::math::modu32","",67,[[["self"]],["modu32"]]],[11,"clone","competitive::math::nums","",68,[[["self"]],["babystepgiantstep"]]],[11,"clone","competitive::math::polynomial","",69,[[["self"]],["polynomial"]]],[11,"clone","competitive::math::prime","",70,[[["self"]],["primetable"]]],[11,"clone","","",71,[[["self"]],["eulerphitable"]]],[11,"clone","competitive::math::quad_double","",72,[[["self"]],["quaddouble"]]],[11,"clone","competitive::string::knuth_morris_pratt","",73,[[["self"]],["knuthmorrispratt"]]],[11,"clone","competitive::string::rolling_hash","",74,[[["self"]],["rollinghash"]]],[11,"clone","","",75,[[["self"]],["multiplerollinghash"]]],[11,"clone","competitive::string::suffix_array","",76,[[["self"]],["suffixarray"]]],[11,"clone","competitive::string::z_algorithm","",77,[[["self"]],["zarray"]]],[11,"clone","competitive::tools::random","",78,[[["self"]],["xorshift"]]],[11,"clone","competitive::tree::euler_tour","",80,[[["self"]],["eulertourforedge"]]],[11,"clone","","",81,[[["self"]],["eulertourforvertex"]]],[11,"clone","","",82,[[["self"]],["eulertourforrichvertex"]]],[11,"clone","","",83,[[["self"]],["lowestcommonancestor"]]],[11,"clone","","",79,[[["self"]],["lcamonoid"]]],[11,"clone","competitive::tree::rerooting","",84,[[["self"]],["rerooting"]]],[11,"default","competitive::algebra::effect","",4,[[],["anymonoideffect"]]],[11,"default","competitive::algebra::operations","",6,[[],["maxoperation"]]],[11,"default","","",7,[[],["minoperation"]]],[11,"default","","",8,[[],["firstoperation"]]],[11,"default","","",9,[[],["lastoperation"]]],[11,"default","","",10,[[],["additiveoperation"]]],[11,"default","","",11,[[],["multiplicativeoperation"]]],[11,"default","","",12,[[],["linearoperation"]]],[11,"default","","",13,[[],["bitandoperation"]]],[11,"default","","",14,[[],["bitoroperation"]]],[11,"default","competitive::algorithm::convex_hull_trick","",27,[[],["chtline"]]],[11,"default","competitive::data_structure::bitset","",35,[[],["bitset"]]],[11,"default","competitive::geometry::complex","",46,[[],["complex"]]],[11,"default","competitive::graph::base","",49,[[],["adjacent"]]],[11,"default","","",50,[[],["graph"]]],[11,"default","competitive::math::anymod","",60,[[],["anymod"]]],[11,"default","competitive::math::anymodu32","",61,[[],["anymodu32"]]],[11,"default","competitive::math::modi64","",65,[[],["modi64"]]],[11,"default","competitive::math::modu32::modulos","",87,[[],["modulo1000000007"]]],[11,"default","","",88,[[],["modulo1000000009"]]],[11,"default","","",89,[[],["modulo998244353"]]],[11,"default","competitive::math::modu32","",67,[[],["modu32"]]],[11,"default","competitive::math::polynomial","",69,[[],["polynomial"]]],[11,"default","competitive::math::quad_double","",72,[[],["quaddouble"]]],[11,"default","competitive::tools::random","",78,[[],["self"]]],[11,"default","competitive::tree::euler_tour","",80,[[],["eulertourforedge"]]],[11,"default","","",81,[[],["eulertourforvertex"]]],[11,"default","","",82,[[],["eulertourforrichvertex"]]],[11,"cmp","competitive::algebra::effect","",4,[[["anymonoideffect"],["self"]],["ordering"]]],[11,"cmp","competitive::algebra::operations","",6,[[["maxoperation"],["self"]],["ordering"]]],[11,"cmp","","",7,[[["minoperation"],["self"]],["ordering"]]],[11,"cmp","","",8,[[["firstoperation"],["self"]],["ordering"]]],[11,"cmp","","",9,[[["self"],["lastoperation"]],["ordering"]]],[11,"cmp","","",10,[[["self"],["additiveoperation"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["multiplicativeoperation"]],["ordering"]]],[11,"cmp","","",12,[[["linearoperation"],["self"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["bitandoperation"]],["ordering"]]],[11,"cmp","","",14,[[["bitoroperation"],["self"]],["ordering"]]],[11,"cmp","competitive::data_structure::bitset","",35,[[["bitset"],["self"]],["ordering"]]],[11,"cmp","competitive::data_structure","",31,[[["self"],["rev"]],["ordering"]]],[11,"cmp","","",32,[[["totalord"],["self"]],["ordering"]]],[11,"cmp","competitive::geometry","",44,[[["self"],["ccw"]],["ordering"]]],[11,"cmp","competitive::math::modu32::modulos","",87,[[["modulo1000000007"],["self"]],["ordering"]]],[11,"cmp","","",88,[[["modulo1000000009"],["self"]],["ordering"]]],[11,"cmp","","",89,[[["modulo998244353"],["self"]],["ordering"]]],[11,"eq","competitive::algebra::effect","",4,[[["anymonoideffect"],["self"]],["bool"]]],[11,"ne","","",4,[[["anymonoideffect"],["self"]],["bool"]]],[11,"eq","competitive::algebra::operations","",6,[[["maxoperation"],["self"]],["bool"]]],[11,"ne","","",6,[[["maxoperation"],["self"]],["bool"]]],[11,"eq","","",7,[[["minoperation"],["self"]],["bool"]]],[11,"ne","","",7,[[["minoperation"],["self"]],["bool"]]],[11,"eq","","",8,[[["firstoperation"],["self"]],["bool"]]],[11,"ne","","",8,[[["firstoperation"],["self"]],["bool"]]],[11,"eq","","",9,[[["self"],["lastoperation"]],["bool"]]],[11,"ne","","",9,[[["self"],["lastoperation"]],["bool"]]],[11,"eq","","",10,[[["self"],["additiveoperation"]],["bool"]]],[11,"ne","","",10,[[["self"],["additiveoperation"]],["bool"]]],[11,"eq","","",11,[[["self"],["multiplicativeoperation"]],["bool"]]],[11,"ne","","",11,[[["self"],["multiplicativeoperation"]],["bool"]]],[11,"eq","","",12,[[["linearoperation"],["self"]],["bool"]]],[11,"ne","","",12,[[["linearoperation"],["self"]],["bool"]]],[11,"eq","","",13,[[["self"],["bitandoperation"]],["bool"]]],[11,"ne","","",13,[[["self"],["bitandoperation"]],["bool"]]],[11,"eq","","",14,[[["bitoroperation"],["self"]],["bool"]]],[11,"ne","","",14,[[["bitoroperation"],["self"]],["bool"]]],[11,"eq","competitive::algorithm::convex_hull_trick","",27,[[["self"],["chtline"]],["bool"]]],[11,"ne","","",27,[[["self"],["chtline"]],["bool"]]],[11,"eq","competitive::data_structure::bitset","",35,[[["bitset"],["self"]],["bool"]]],[11,"ne","","",35,[[["bitset"],["self"]],["bool"]]],[11,"eq","competitive::data_structure","",31,[[["self"],["rev"]],["bool"]]],[11,"ne","","",31,[[["self"],["rev"]],["bool"]]],[11,"eq","","",32,[[["totalord"],["self"]],["bool"]]],[11,"ne","","",32,[[["totalord"],["self"]],["bool"]]],[11,"eq","competitive::geometry::circle","",45,[[["self"],["circle"]],["bool"]]],[11,"ne","","",45,[[["self"],["circle"]],["bool"]]],[11,"eq","competitive::geometry::complex","",46,[[["complex"],["self"]],["bool"]]],[11,"ne","","",46,[[["complex"],["self"]],["bool"]]],[11,"eq","competitive::geometry::line","",47,[[["self"],["line"]],["bool"]]],[11,"ne","","",47,[[["self"],["line"]],["bool"]]],[11,"eq","","",48,[[["linesegment"],["self"]],["bool"]]],[11,"ne","","",48,[[["linesegment"],["self"]],["bool"]]],[11,"eq","competitive::geometry","",43,[[["real"],["self"]],["bool"]]],[11,"eq","","",44,[[["self"],["ccw"]],["bool"]]],[11,"eq","competitive::graph::base","",49,[[["adjacent"],["self"]],["bool"]]],[11,"ne","","",49,[[["adjacent"],["self"]],["bool"]]],[11,"eq","competitive::math::anymod","",60,[[["anymod"],["self"]],["bool"]]],[11,"ne","","",60,[[["anymod"],["self"]],["bool"]]],[11,"eq","competitive::math::anymodu32","",61,[[["anymodu32"],["self"]],["bool"]]],[11,"ne","","",61,[[["anymodu32"],["self"]],["bool"]]],[11,"eq","competitive::math::matrix","",64,[[["matrix"],["self"]],["bool"]]],[11,"ne","","",64,[[["matrix"],["self"]],["bool"]]],[11,"eq","competitive::math::modi64","",65,[[["self"],["modi64"]],["bool"]]],[11,"ne","","",65,[[["self"],["modi64"]],["bool"]]],[11,"eq","competitive::math::modu32::modulos","",87,[[["modulo1000000007"],["self"]],["bool"]]],[11,"eq","","",88,[[["modulo1000000009"],["self"]],["bool"]]],[11,"eq","","",89,[[["modulo998244353"],["self"]],["bool"]]],[11,"eq","competitive::math::modu32","",67,[[["self"],["modu32"]],["bool"]]],[11,"ne","","",67,[[["self"],["modu32"]],["bool"]]],[11,"eq","competitive::math::polynomial","",69,[[["self"],["polynomial"]],["bool"]]],[11,"ne","","",69,[[["self"],["polynomial"]],["bool"]]],[11,"eq","competitive::math::quad_double","",72,[[["quaddouble"],["self"]],["bool"]]],[11,"ne","","",72,[[["quaddouble"],["self"]],["bool"]]],[11,"partial_cmp","competitive::algebra::effect","",4,[[["anymonoideffect"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",4,[[["anymonoideffect"],["self"]],["bool"]]],[11,"le","","",4,[[["anymonoideffect"],["self"]],["bool"]]],[11,"gt","","",4,[[["anymonoideffect"],["self"]],["bool"]]],[11,"ge","","",4,[[["anymonoideffect"],["self"]],["bool"]]],[11,"partial_cmp","competitive::algebra::operations","",6,[[["maxoperation"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",6,[[["maxoperation"],["self"]],["bool"]]],[11,"le","","",6,[[["maxoperation"],["self"]],["bool"]]],[11,"gt","","",6,[[["maxoperation"],["self"]],["bool"]]],[11,"ge","","",6,[[["maxoperation"],["self"]],["bool"]]],[11,"partial_cmp","","",7,[[["minoperation"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",7,[[["minoperation"],["self"]],["bool"]]],[11,"le","","",7,[[["minoperation"],["self"]],["bool"]]],[11,"gt","","",7,[[["minoperation"],["self"]],["bool"]]],[11,"ge","","",7,[[["minoperation"],["self"]],["bool"]]],[11,"partial_cmp","","",8,[[["firstoperation"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",8,[[["firstoperation"],["self"]],["bool"]]],[11,"le","","",8,[[["firstoperation"],["self"]],["bool"]]],[11,"gt","","",8,[[["firstoperation"],["self"]],["bool"]]],[11,"ge","","",8,[[["firstoperation"],["self"]],["bool"]]],[11,"partial_cmp","","",9,[[["self"],["lastoperation"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",9,[[["self"],["lastoperation"]],["bool"]]],[11,"le","","",9,[[["self"],["lastoperation"]],["bool"]]],[11,"gt","","",9,[[["self"],["lastoperation"]],["bool"]]],[11,"ge","","",9,[[["self"],["lastoperation"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["additiveoperation"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",10,[[["self"],["additiveoperation"]],["bool"]]],[11,"le","","",10,[[["self"],["additiveoperation"]],["bool"]]],[11,"gt","","",10,[[["self"],["additiveoperation"]],["bool"]]],[11,"ge","","",10,[[["self"],["additiveoperation"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["multiplicativeoperation"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",11,[[["self"],["multiplicativeoperation"]],["bool"]]],[11,"le","","",11,[[["self"],["multiplicativeoperation"]],["bool"]]],[11,"gt","","",11,[[["self"],["multiplicativeoperation"]],["bool"]]],[11,"ge","","",11,[[["self"],["multiplicativeoperation"]],["bool"]]],[11,"partial_cmp","","",12,[[["linearoperation"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",12,[[["linearoperation"],["self"]],["bool"]]],[11,"le","","",12,[[["linearoperation"],["self"]],["bool"]]],[11,"gt","","",12,[[["linearoperation"],["self"]],["bool"]]],[11,"ge","","",12,[[["linearoperation"],["self"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["bitandoperation"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",13,[[["self"],["bitandoperation"]],["bool"]]],[11,"le","","",13,[[["self"],["bitandoperation"]],["bool"]]],[11,"gt","","",13,[[["self"],["bitandoperation"]],["bool"]]],[11,"ge","","",13,[[["self"],["bitandoperation"]],["bool"]]],[11,"partial_cmp","","",14,[[["bitoroperation"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",14,[[["bitoroperation"],["self"]],["bool"]]],[11,"le","","",14,[[["bitoroperation"],["self"]],["bool"]]],[11,"gt","","",14,[[["bitoroperation"],["self"]],["bool"]]],[11,"ge","","",14,[[["bitoroperation"],["self"]],["bool"]]],[11,"partial_cmp","competitive::data_structure::bitset","",35,[[["bitset"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",35,[[["bitset"],["self"]],["bool"]]],[11,"le","","",35,[[["bitset"],["self"]],["bool"]]],[11,"gt","","",35,[[["bitset"],["self"]],["bool"]]],[11,"ge","","",35,[[["bitset"],["self"]],["bool"]]],[11,"partial_cmp","competitive::data_structure","",31,[[["self"],["rev"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",32,[[["totalord"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",32,[[["totalord"],["self"]],["bool"]]],[11,"le","","",32,[[["totalord"],["self"]],["bool"]]],[11,"gt","","",32,[[["totalord"],["self"]],["bool"]]],[11,"ge","","",32,[[["totalord"],["self"]],["bool"]]],[11,"partial_cmp","competitive::geometry","",43,[[["real"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",44,[[["self"],["ccw"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","competitive::math::modu32::modulos","",87,[[["modulo1000000007"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",88,[[["modulo1000000009"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",89,[[["modulo998244353"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","competitive::math::quad_double","",72,[[["quaddouble"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",72,[[["quaddouble"],["self"]],["bool"]]],[11,"le","","",72,[[["quaddouble"],["self"]],["bool"]]],[11,"gt","","",72,[[["quaddouble"],["self"]],["bool"]]],[11,"ge","","",72,[[["quaddouble"],["self"]],["bool"]]],[11,"fmt","competitive::algebra::effect","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::algebra::operations","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",86,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::algorithm::compress","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::algorithm::convex_hull_trick","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::data_structure::binary_indexed_tree","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::data_structure::bitset","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::data_structure::disjoint_sparse_table","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::data_structure::lazy_segment_tree","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::data_structure::segment_tree","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::data_structure::sliding_winsow_aggregation","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::data_structure::union_find","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::data_structure","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::geometry::circle","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::geometry::complex","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::geometry::line","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::geometry","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::graph::base","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",50,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::graph::maximum_flow","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",54,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::graph::minimum_cost_flow","",55,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",56,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::graph::strongly_connected_component","",57,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::graph","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::anymod","",60,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::anymodu32","",61,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::factorial","",62,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",63,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::matrix","",64,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::modi64","",65,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::modu32::modulos","",87,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",88,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",89,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::modu32","",67,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::nums","",68,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::polynomial","",69,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::prime","",70,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",71,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::quad_double","",72,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::string::knuth_morris_pratt","",73,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::string::rolling_hash","",74,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",75,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::string::suffix_array","",76,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::string::z_algorithm","",77,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::tools::random","",78,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::tree::euler_tour","",80,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",81,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",82,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",83,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",79,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::tree::rerooting","",84,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::tree::tree","",85,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive::math::anymod","",60,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","competitive::math::anymodu32","",61,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","competitive::math::modi64","",65,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","competitive::math::modu32","",67,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","competitive::math::quad_double","",72,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"div","competitive::geometry::complex","",46,[[]]],[11,"div","","",46,[[["t"]]]],[11,"div","competitive::math::anymod","",60,[[]]],[11,"div","","",60,[[["anymod"]]]],[11,"div","competitive::math::anymodu32","",61,[[]]],[11,"div","","",61,[[["anymodu32"]]]],[11,"div","competitive::math::modi64","",65,[[]]],[11,"div","","",65,[[["modi64"]]]],[11,"div","competitive::math::modu32","",67,[[]]],[11,"div","","",67,[[["modu32"]]]],[11,"sub","competitive::geometry::complex","",46,[[]]],[11,"sub","","",46,[[["t"]]]],[11,"sub","competitive::math::anymod","",60,[[]]],[11,"sub","","",60,[[["anymod"]]]],[11,"sub","competitive::math::anymodu32","",61,[[]]],[11,"sub","","",61,[[["anymodu32"]]]],[11,"sub","competitive::math::modi64","",65,[[]]],[11,"sub","","",65,[[["modi64"]]]],[11,"sub","competitive::math::modu32","",67,[[]]],[11,"sub","","",67,[[["modu32"]]]],[11,"sub","competitive::math::quad_double","",72,[[]]],[11,"add","competitive::geometry::complex","",46,[[]]],[11,"add","","",46,[[["t"]]]],[11,"add","competitive::math::anymod","",60,[[]]],[11,"add","","",60,[[["anymod"]]]],[11,"add","competitive::math::anymodu32","",61,[[]]],[11,"add","","",61,[[["anymodu32"]]]],[11,"add","competitive::math::modi64","",65,[[]]],[11,"add","","",65,[[["modi64"]]]],[11,"add","competitive::math::modu32","",67,[[]]],[11,"add","","",67,[[["modu32"]]]],[11,"add","competitive::math::quad_double","",72,[[["f64"]]]],[11,"add","","",72,[[]]],[11,"mul","competitive::geometry::complex","",46,[[]]],[11,"mul","","",46,[[["t"]]]],[11,"mul","competitive::math::anymod","",60,[[]]],[11,"mul","","",60,[[["anymod"]]]],[11,"mul","competitive::math::anymodu32","",61,[[]]],[11,"mul","","",61,[[["anymodu32"]]]],[11,"mul","competitive::math::modi64","",65,[[]]],[11,"mul","","",65,[[["modi64"]]]],[11,"mul","competitive::math::modu32","",67,[[]]],[11,"mul","","",67,[[["modu32"]]]],[11,"mul","competitive::math::quad_double","",72,[[["f64"]]]],[11,"mul","","",72,[[]]],[11,"neg","competitive::geometry::complex","",46,[[]]],[11,"neg","competitive::math::anymod","",60,[[]]],[11,"neg","competitive::math::anymodu32","",61,[[]]],[11,"neg","competitive::math::modi64","",65,[[]]],[11,"neg","competitive::math::modu32","",67,[[]]],[11,"neg","competitive::math::quad_double","",72,[[]]],[11,"add_assign","competitive::math::anymod","",60,[[["self"]]]],[11,"add_assign","","",60,[[["self"],["anymod"]]]],[11,"add_assign","competitive::math::anymodu32","",61,[[["anymodu32"],["self"]]]],[11,"add_assign","","",61,[[["self"],["anymodu32"]]]],[11,"add_assign","competitive::math::modi64","",65,[[["self"]]]],[11,"add_assign","","",65,[[["self"],["modi64"]]]],[11,"add_assign","competitive::math::modu32","",67,[[["modu32"],["self"]]]],[11,"add_assign","","",67,[[["self"],["modu32"]]]],[11,"sub_assign","competitive::math::anymod","",60,[[["self"]]]],[11,"sub_assign","","",60,[[["self"],["anymod"]]]],[11,"sub_assign","competitive::math::anymodu32","",61,[[["anymodu32"],["self"]]]],[11,"sub_assign","","",61,[[["self"],["anymodu32"]]]],[11,"sub_assign","competitive::math::modi64","",65,[[["self"]]]],[11,"sub_assign","","",65,[[["self"],["modi64"]]]],[11,"sub_assign","competitive::math::modu32","",67,[[["modu32"],["self"]]]],[11,"sub_assign","","",67,[[["self"],["modu32"]]]],[11,"mul_assign","competitive::math::anymod","",60,[[["self"]]]],[11,"mul_assign","","",60,[[["self"],["anymod"]]]],[11,"mul_assign","competitive::math::anymodu32","",61,[[["anymodu32"],["self"]]]],[11,"mul_assign","","",61,[[["self"],["anymodu32"]]]],[11,"mul_assign","competitive::math::modi64","",65,[[["self"]]]],[11,"mul_assign","","",65,[[["self"],["modi64"]]]],[11,"mul_assign","competitive::math::modu32","",67,[[["modu32"],["self"]]]],[11,"mul_assign","","",67,[[["self"],["modu32"]]]],[11,"div_assign","competitive::math::anymod","",60,[[["self"]]]],[11,"div_assign","","",60,[[["self"],["anymod"]]]],[11,"div_assign","competitive::math::anymodu32","",61,[[["anymodu32"],["self"]]]],[11,"div_assign","","",61,[[["self"],["anymodu32"]]]],[11,"div_assign","competitive::math::modi64","",65,[[["self"]]]],[11,"div_assign","","",65,[[["self"],["modi64"]]]],[11,"div_assign","competitive::math::modu32","",67,[[["modu32"],["self"]]]],[11,"div_assign","","",67,[[["self"],["modu32"]]]],[11,"not","competitive::data_structure::bitset","",35,[[]]],[11,"bitand","","",35,[[["self"]]]],[11,"bitor","","",35,[[["self"]]]],[11,"bitxor","","",35,[[["self"]]]],[11,"shl","","",35,[[["usize"]]]],[11,"shr","","",35,[[["usize"]]]],[11,"bitand_assign","","",35,[[["self"],["self"]]]],[11,"bitor_assign","","",35,[[["self"],["self"]]]],[11,"bitxor_assign","","",35,[[["self"],["self"]]]],[11,"shl_assign","","",35,[[["self"],["usize"]]]],[11,"shr_assign","","",35,[[["self"],["usize"]]]],[11,"index","competitive::algorithm::compress","",26,[[["self"],["usize"]]]],[11,"index","competitive::data_structure::disjoint_sparse_table","",36,[[["self"],["usize"]]]],[11,"index","competitive::graph::strongly_connected_component","",57,[[["self"],["usize"]]]],[11,"index","competitive::math::matrix","",64,[[["self"],["usize"]]]],[11,"index","competitive::math::polynomial","",69,[[["self"],["usize"]]]],[11,"index","competitive::math::quad_double","",72,[[["self"],["usize"]]]],[11,"index","competitive::string::suffix_array","",76,[[["self"],["usize"]]]],[11,"index","competitive::string::z_algorithm","",77,[[["self"],["usize"]],["usize"]]],[11,"index_mut","competitive::math::matrix","",64,[[["self"],["usize"]]]],[11,"index_mut","competitive::math::polynomial","",69,[[["self"],["usize"]]]],[11,"hash","competitive::algebra::effect","",4,[[["self"],["__h"]]]],[11,"hash","competitive::algebra::operations","",6,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","","",13,[[["self"],["__h"]]]],[11,"hash","","",14,[[["self"],["__h"]]]],[11,"hash","competitive::data_structure::bitset","",35,[[["self"],["__h"]]]],[11,"hash","competitive::geometry::complex","",46,[[["self"],["__h"]]]],[11,"hash","competitive::math::anymod","",60,[[["self"],["__h"]]]],[11,"hash","competitive::math::anymodu32","",61,[[["self"],["__h"]]]],[11,"hash","competitive::math::modi64","",65,[[["self"],["__h"]]]],[11,"hash","competitive::math::modu32::modulos","",87,[[["self"],["__h"]]]],[11,"hash","","",88,[[["self"],["__h"]]]],[11,"hash","","",89,[[["self"],["__h"]]]],[11,"hash","competitive::math::modu32","",67,[[["self"],["__h"]]]],[11,"from_iter","competitive::algorithm::compress","",26,[[["intoiterator"]],["compress"]]],[11,"product","competitive::math::anymodu32","",61,[[["iterator"]],["self"]]],[11,"product","","",61,[[["iterator"]],["self"]]],[11,"product","competitive::math::modu32","",67,[[["iterator"]],["self"]]],[11,"product","","",67,[[["iterator"]],["self"]]],[11,"sum","competitive::math::anymodu32","",61,[[["iterator"]],["self"]]],[11,"sum","","",61,[[["iterator"]],["self"]]],[11,"sum","competitive::math::modi64","",65,[[["iterator"]],["self"]]],[11,"sum","","",65,[[["iterator"]],["self"]]],[11,"sum","competitive::math::modu32","",67,[[["iterator"]],["self"]]],[11,"sum","","",67,[[["iterator"]],["self"]]],[11,"from_str","competitive::math::anymodu32","",61,[[["str"]],["result"]]],[11,"from_str","competitive::math::modi64","",65,[[["str"]],["result"]]],[11,"from_str","competitive::math::modu32","",67,[[["str"]],["result"]]],[11,"from_str","competitive::math::quad_double","",72,[[["str"]],["result"]]]],"p":[[8,"Magma"],[8,"Unital"],[8,"Monoid"],[8,"Invertible"],[3,"AnyMonoidEffect"],[8,"MonoidEffect"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"MonoidalOperation"],[3,"GroupOperation"],[3,"AbsorbedAssocoativeOperator"],[3,"CartesianOperation"],[3,"CountingOperation"],[8,"MinimumBounded"],[8,"MaximumBounded"],[8,"AdditiveIdentity"],[8,"MultiplicativeIdentity"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"Compress"],[3,"CHTLine"],[3,"ConvexHullTrick"],[8,"Bisect"],[8,"Trisect"],[3,"Rev"],[3,"TotalOrd"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"SegmentTree"],[3,"QueueAggregation"],[3,"DequeAggregation"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"Real"],[4,"CCW"],[3,"Circle"],[3,"Complex"],[3,"Line"],[3,"LineSegment"],[3,"Adjacent"],[3,"Graph"],[3,"GraphRec"],[3,"RevEdge"],[3,"Dinic"],[3,"FordFulkerson"],[3,"RevEdge"],[3,"PrimalDual"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[3,"DirectedAcyclicGraph"],[3,"AnyMod"],[3,"AnyModu32"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"Matrix"],[3,"Modi64"],[8,"Modulo"],[3,"Modu32"],[3,"BabyStepGiantStep"],[3,"Polynomial"],[3,"PrimeTable"],[3,"EulerPhiTable"],[3,"QuadDouble"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"Xorshift"],[3,"LCAMonoid"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"ReRooting"],[3,"TreeRec"],[3,"AssocoativeOperator"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"Modulo998244353"]]};
searchIndex["dsl_2_d"] = {"doc":"","i":[[5,"main","dsl_2_d","",null,[[],["result"]]]],"p":[]};
searchIndex["dsl_2_e"] = {"doc":"","i":[[5,"main","dsl_2_e","",null,[[],["result"]]]],"p":[]};
searchIndex["dsl_2_f"] = {"doc":"","i":[[5,"main","dsl_2_f","",null,[[],["result"]]]],"p":[]};
searchIndex["dsl_2_g"] = {"doc":"","i":[[5,"main","dsl_2_g","",null,[[],["result"]]]],"p":[]};
searchIndex["dsl_2_h"] = {"doc":"","i":[[5,"main","dsl_2_h","",null,[[],["result"]]]],"p":[]};
searchIndex["dsl_2_i"] = {"doc":"","i":[[5,"main","dsl_2_i","",null,[[],["result"]]]],"p":[]};
searchIndex["lca"] = {"doc":"","i":[[5,"solve","lca","",null,[[["bufwriter"]],["result"]]],[5,"main","","",null,[[],["result"]]]],"p":[]};
searchIndex["many_aplusb"] = {"doc":"","i":[[5,"main","many_aplusb","",null,[[],["result"]]]],"p":[]};
searchIndex["point_add_range_sum_binary_indexed_tree"] = {"doc":"","i":[[5,"main","point_add_range_sum_binary_indexed_tree","",null,[[],["result"]]]],"p":[]};
searchIndex["point_add_range_sum_segment_tree"] = {"doc":"","i":[[5,"main","point_add_range_sum_segment_tree","",null,[[],["result"]]]],"p":[]};
searchIndex["point_set_range_composite"] = {"doc":"","i":[[5,"main","point_set_range_composite","",null,[[],["result"]]],[6,"M","","",null,null]],"p":[]};
searchIndex["queue_operate_all_composite"] = {"doc":"","i":[[5,"main","queue_operate_all_composite","",null,[[],["result"]]],[6,"M","","",null,null]],"p":[]};
searchIndex["range_affine_range_sum"] = {"doc":"","i":[[5,"main","range_affine_range_sum","",null,[[],["result"]]],[6,"M","","",null,null]],"p":[]};
searchIndex["scc"] = {"doc":"","i":[[5,"solve","scc","",null,[[["bufwriter"]],["result"]]],[5,"main","","",null,[[],["result"]]]],"p":[]};
searchIndex["staticrmq_disjoint_sparse_table"] = {"doc":"","i":[[5,"main","staticrmq_disjoint_sparse_table","",null,[[],["result"]]]],"p":[]};
searchIndex["staticrmq_segment_tree"] = {"doc":"","i":[[5,"main","staticrmq_segment_tree","",null,[[],["result"]]]],"p":[]};
searchIndex["suffixarray"] = {"doc":"","i":[[5,"main","suffixarray","",null,[[],["result"]]]],"p":[]};
searchIndex["two_sat"] = {"doc":"","i":[[5,"solve","two_sat","",null,[[["bufwriter"]],["result"]]],[5,"main","","",null,[[],["result"]]]],"p":[]};
searchIndex["unionfind"] = {"doc":"","i":[[5,"main","unionfind","",null,[[],["result"]]]],"p":[]};
searchIndex["zalgorithm"] = {"doc":"","i":[[5,"main","zalgorithm","",null,[[],["result"]]]],"p":[]};
addSearchOptions(searchIndex);initSearch(searchIndex);