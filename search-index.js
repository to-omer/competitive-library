var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,2,5,5,2,5,5,2,5,5,5,2,5,2,5,5,2,5,5,2,5,5,2,5,5,5,2,5,5,2,5,5,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,5,2,2,5,5,2,2,5,5,2,2,5,5,2,5,5,2,2,5,5,2,2,5,5,2,2,5,5,2,2,5,5,2,2,5,5,2,2,5,5,2,2,5,5,5,5,5,5,2,2,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,5,5,5,5,2,2,2,2,5,5,2,2,2,2,2,5,5,2,5,5,2,2,2,5,5,2,2,5,5,2,2,5,5,2,2,5,5,2,5,5,2,5,5,5,2,2,5,5,2,2,2,5,5,2,2,2,2,5,5,2,2,2,2,2,5,5,2,2,2,6,2,2,2,5,5,2,2,5,5,2,2,5,5,2,2,5,5,0,5,5],"n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","test_dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","test_dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","test_dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","test_dpl_1_d","dpl_1_e","levenshtein_distance","test_dpl_1_e","KnapsackPloblemSmallValue","dpl_1_f","test_dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","test_dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","test_dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","test_dpl_1_i","dpl_3_a","largest_square","test_dpl_3_a","dpl_3_b","largest_rectangle_in_grid","test_dpl_3_b","dpl_3_c","largest_rectangle","test_dpl_3_c","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","test_dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","test_dsl_1_b","MinOperation","SegmentTree","dsl_2_a","test_dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","test_dsl_2_b","Static2DTree","dsl_2_c","test_dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","test_dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","test_dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","test_dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","test_dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","test_dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","test_dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","test_dsl_3_a","dsl_3_b","test_dsl_3_b","dsl_3_c","test_dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","test_dsl_3_d","dsl_4_a","test_dsl_4_a","dsl_5_a","test_dsl_5_a","dsl_5_b","test_dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","test_grl_1_a","test_grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","test_grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","test_grl_1_c","EdgeListGraphScanner","grl_2_a","test_grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","test_grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","test_grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","test_grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","test_grl_3_c","DirectedGraphScanner","grl_4_a","test_grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","test_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","test_grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","test_grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","test_grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","test_grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","M","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","test_grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","test_grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","test_grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","test_grl_7_a","itp1_1_a","itp1_1_a","test_itp1_1_a"],"q":["aizu_online_judge","","","","aizu_online_judge::dpl","","","","","","","","","","","","aizu_online_judge::dpl::dpl_1_a","","aizu_online_judge::dpl::dpl_1_b","","","aizu_online_judge::dpl::dpl_1_c","","","aizu_online_judge::dpl::dpl_1_d","","","aizu_online_judge::dpl::dpl_1_e","","","aizu_online_judge::dpl::dpl_1_f","","","aizu_online_judge::dpl::dpl_1_g","","","aizu_online_judge::dpl::dpl_1_h","","","aizu_online_judge::dpl::dpl_1_i","","","aizu_online_judge::dpl::dpl_3_a","","","aizu_online_judge::dpl::dpl_3_b","","","aizu_online_judge::dpl::dpl_3_c","","","aizu_online_judge::dsl","","","","","","","","","","","","","","","","","","aizu_online_judge::dsl::dsl_1_a","","","aizu_online_judge::dsl::dsl_1_b","","","","aizu_online_judge::dsl::dsl_2_a","","","","aizu_online_judge::dsl::dsl_2_b","","","","aizu_online_judge::dsl::dsl_2_c","","","aizu_online_judge::dsl::dsl_2_d","","","","aizu_online_judge::dsl::dsl_2_e","","","","aizu_online_judge::dsl::dsl_2_f","","","","aizu_online_judge::dsl::dsl_2_g","","","","aizu_online_judge::dsl::dsl_2_h","","","","aizu_online_judge::dsl::dsl_2_i","","","","aizu_online_judge::dsl::dsl_3_a","","","","aizu_online_judge::dsl::dsl_3_b","","aizu_online_judge::dsl::dsl_3_c","","aizu_online_judge::dsl::dsl_3_d","","","","aizu_online_judge::dsl::dsl_4_a","","aizu_online_judge::dsl::dsl_5_a","","aizu_online_judge::dsl::dsl_5_b","","aizu_online_judge::grl","","","","","","","","","","","","","","","","","","aizu_online_judge::grl::grl_1_a","","","","","","","","","","aizu_online_judge::grl::grl_1_b","","","","","","aizu_online_judge::grl::grl_1_c","","","","","","","aizu_online_judge::grl::grl_2_a","","","aizu_online_judge::grl::grl_2_b","","","","","aizu_online_judge::grl::grl_3_a","","","","aizu_online_judge::grl::grl_3_b","","","","aizu_online_judge::grl::grl_3_c","","","","aizu_online_judge::grl::grl_4_a","","","aizu_online_judge::grl::grl_4_b","","","","aizu_online_judge::grl::grl_5_a","","","","aizu_online_judge::grl::grl_5_b","","","","","aizu_online_judge::grl::grl_5_c","","","","","","aizu_online_judge::grl::grl_5_d","","","","","","","aizu_online_judge::grl::grl_5_e","","","","","","","","","aizu_online_judge::grl::grl_6_a","","","","aizu_online_judge::grl::grl_6_b","","","","aizu_online_judge::grl::grl_7_a","","","","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a",""],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  1ms","","","✅  AC  1ms","","","✅  AC  3ms","","","✅  AC  6ms","","✅  AC  3ms","","","","✅  AC  0ms","","","✅  AC  7ms","","","✅  AC  46ms","","","✅  AC  0ms","","✅  AC  21ms","","","✅  AC  22ms","","","✅  AC  3ms","","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  6ms","","","","✅  AC  19ms","","","","✅  AC  17ms","","","","✅  AC  14ms","","","✅  AC  437ms","","","","✅  AC  66ms","","","","✅  AC  35ms","","","","✅  AC  70ms","","","","✅  AC  43ms","","","","✅  AC  45ms","","","","✅  AC  58ms","","","","✅  AC  4ms","","✅  AC  2ms","","✅  AC  238ms","","","","✅  AC  109ms","","✅  AC  89ms","","✅  AC  3ms","","✅  AC  12ms","","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  69ms","✅  AC  70ms","","","","","","","✅  AC  12ms","","","","","","","✅  AC  7ms","","","✅  AC  19ms","","","","","✅  AC  0ms","","","","✅  AC  2ms","","","","✅  AC  2ms","","","","✅  AC  6ms","","","✅  AC  0ms","","","✅  AC  3ms","","","","","✅  AC  9ms","","","","","✅  AC  4ms","","","","","","✅  AC  97ms","","","","","","","✅  AC  65ms","","","","","","","","","✅  AC  178ms","","","","✅  AC  0ms","","","","✅  AC  0ms","","","","✅  AC  0ms","","Hello World","✅  AC  0ms",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[]],0,[[1,2]],[[]],0,[[1,2]],[[]],0,[[1,2]],[[]],[[1,2]],0,[[]],0,[[1,2]],[[]],0,[[1,2]],[[]],0,[[1,2]],[[]],0,[[1,2]],[[]],[[1,2]],0,[[]],[[1,2]],0,[[]],[[1,2]],0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],[[1,2]],[[]],[[1,2]],[[]],0,0,[[1,2]],[[]],[[1,2]],[[]],[[1,2]],[[]],[[1,2]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],[[]],[[]],0,0,0,0,[[1,2]],[[]],0,0,0,0,0,[[1,2]],[[]],0,[[1,2]],[[]],0,0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,[[1,2]],[[]],0,[[1,2]],[[1,1,1],3],[[]],0,0,[[1,2]],[[]],0,0,0,[[1,2]],[[]],0,0,0,0,[[1,2]],[[]],0,0,0,0,0,[[1,2]],[[]],0,0,0,0,0,0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,[[1,2]],[[]]],"p":[[8,"Read"],[8,"Write"],[15,"bool"]],"a":{"verify":[16,19,22,25,27,31,34,37,40,42,45,48,70,74,78,82,85,89,93,97,101,105,109,113,115,117,121,123,125,127,153,154,161,168,171,176,180,184,188,191,194,199,204,210,217,226,230,234,238,241]}},\
"competitive":{"doc":"github","t":[14,0,0,14,14,14,14,14,14,0,14,14,0,14,14,14,14,0,0,14,14,14,14,14,0,14,14,14,14,14,14,14,0,0,14,14,14,14,14,14,14,14,0,14,0,0,8,8,16,16,3,16,3,16,16,8,8,3,8,3,8,3,3,8,3,3,8,3,3,4,8,8,8,8,16,3,3,8,3,4,3,8,8,16,3,4,3,3,3,3,3,3,3,3,3,8,8,8,16,16,3,8,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,10,10,10,10,12,14,10,12,0,12,12,12,12,0,14,12,12,10,0,0,0,10,12,12,12,10,10,8,8,8,8,8,8,8,8,8,8,8,16,8,10,11,11,10,11,11,11,11,11,11,11,11,11,11,10,16,16,16,16,16,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,3,3,3,3,3,3,3,3,3,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,12,11,11,11,11,11,11,11,11,11,11,11,8,3,12,10,11,11,11,11,11,11,11,11,11,8,3,12,10,11,11,11,11,11,11,11,11,11,8,3,12,11,11,11,11,11,11,11,11,11,11,10,3,12,11,11,11,11,11,11,11,11,11,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,11,4,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,11,3,12,11,11,11,11,11,11,11,11,11,14,3,16,8,16,8,8,16,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,0,0,4,18,11,11,11,11,11,11,11,11,11,18,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,3,8,3,3,3,3,3,3,8,3,3,3,16,16,16,16,8,3,8,3,3,16,3,8,8,8,3,8,3,16,16,16,3,3,3,16,8,3,8,3,3,12,12,12,12,12,12,12,12,12,12,10,12,0,12,0,5,0,12,10,10,10,12,12,0,12,12,0,0,12,12,12,12,12,12,0,12,12,12,12,12,12,10,5,10,10,10,10,10,10,12,12,12,12,12,12,10,0,12,10,12,12,12,10,10,10,0,12,10,10,10,10,10,10,10,12,0,5,0,10,10,10,12,12,10,10,0,12,10,5,12,10,10,12,0,5,0,0,0,5,10,10,12,12,0,0,0,3,12,12,11,11,11,11,11,11,11,11,11,11,12,17,17,8,8,5,10,10,14,14,14,5,10,10,10,10,22,22,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,8,5,5,10,10,10,10,10,5,10,5,10,10,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,3,3,6,12,12,11,11,11,11,12,12,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,16,6,16,12,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,10,11,11,11,11,11,11,11,11,16,8,10,10,11,11,10,5,5,17,16,6,8,3,3,16,16,12,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,10,11,10,11,12,11,11,11,11,11,11,11,11,3,11,11,11,11,12,11,11,12,11,11,11,11,11,3,11,11,11,12,11,11,12,11,11,11,12,11,12,5,11,11,11,12,3,8,11,11,5,10,10,11,11,11,5,11,12,5,5,10,10,12,11,11,11,11,16,16,8,3,16,12,11,11,10,12,12,11,10,10,11,11,11,11,11,11,11,11,10,10,8,14,14,14,10,10,10,5,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,6,16,8,3,3,12,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,10,11,12,11,11,11,11,11,11,11,22,22,3,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,12,12,12,12,12,12,12,12,12,0,0,5,5,5,0,5,0,0,3,3,3,3,3,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,5,5,3,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,8,16,3,3,8,3,3,3,3,3,3,3,6,6,6,6,3,6,6,6,6,8,3,3,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,16,3,8,3,3,3,3,3,3,12,12,12,12,12,10,10,0,12,12,12,12,10,0,0,14,12,12,0,0,12,12,10,0,12,12,0,12,12,12,12,0,12,12,0,0,0,12,12,12,12,12,12,10,12,12,12,12,0,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,10,10,10,0,0,0,12,12,12,12,0,12,12,12,12,12,12,0,12,12,12,12,12,12,12,10,12,12,12,12,12,12,0,0,12,12,12,12,12,12,12,0,0,12,12,12,10,12,0,0,0,12,12,12,10,10,10,10,0,12,0,12,12,0,0,3,11,11,11,12,11,11,11,11,11,11,11,11,8,3,17,3,10,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,16,3,3,8,3,3,3,3,3,3,3,3,16,8,3,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,3,8,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,10,11,10,11,11,11,11,11,12,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,8,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,3,6,6,6,6,3,12,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,6,6,3,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,18,18,18,18,6,6,6,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,12,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,3,3,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,3,4,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,12,11,3,3,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,2,2,0,0,0,3,3,3,3,16,3,3,8,8,16,12,12,12,14,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,0,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,3,8,4,3,13,13,3,3,13,13,13,6,0,10,10,12,0,0,0,5,5,5,0,12,12,12,12,0,12,3,8,17,17,10,10,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,4,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,16,16,16,16,16,16,16,16,8,8,8,3,8,8,8,3,3,8,3,3,4,6,6,3,3,3,3,4,6,6,16,16,8,16,3,3,8,8,8,8,16,8,3,3,3,3,3,3,3,8,8,3,3,8,3,3,3,16,3,3,4,6,6,3,3,16,16,3,3,3,16,8,8,8,8,16,12,12,12,12,12,12,12,12,12,12,10,12,12,10,10,10,0,12,10,10,0,12,12,12,12,12,0,12,10,10,10,12,12,12,12,12,12,12,12,0,5,0,10,12,12,12,12,12,12,10,12,10,10,10,12,12,12,12,10,12,12,12,12,12,12,0,0,0,12,12,12,12,10,12,12,12,12,12,12,12,12,12,0,12,12,12,0,0,0,10,12,12,12,0,12,12,12,0,12,12,12,0,10,0,12,12,0,12,0,12,0,10,10,12,10,10,12,10,12,12,12,12,12,12,12,12,12,12,12,12,10,12,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,4,13,13,11,5,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,3,3,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,5,3,3,12,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,16,16,16,16,16,16,16,16,8,8,8,8,8,8,8,3,3,16,16,8,16,8,8,8,8,16,8,3,16,16,3,3,3,16,8,8,8,8,16,12,12,10,10,10,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,10,10,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,10,10,11,11,10,10,4,4,13,13,13,3,4,3,3,3,13,13,13,13,13,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,12,11,11,12,11,11,12,11,12,11,12,11,11,11,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,12,12,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,12,11,12,11,11,11,11,3,3,8,8,3,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,6,6,4,6,6,6,3,3,8,3,3,4,6,6,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,3,11,11,11,11,12,11,12,11,11,11,11,12,11,11,11,12,11,12,11,11,11,11,11,12,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,3,6,4,8,3,16,3,8,8,6,6,6,3,3,3,3,3,3,3,16,12,0,5,5,12,5,0,12,12,12,0,5,5,5,5,5,5,5,12,12,0,0,0,5,5,5,0,0,5,5,5,12,12,10,0,5,5,5,10,5,0,12,0,5,5,0,5,5,5,5,10,0,0,12,12,12,0,12,0,0,5,5,0,0,12,0,5,12,12,10,12,12,10,5,8,16,16,11,11,10,10,10,10,17,17,3,3,3,7,5,5,11,11,11,11,11,11,12,12,12,5,11,11,5,5,5,11,11,11,11,11,11,12,11,5,11,11,11,11,11,11,12,12,12,12,12,12,5,5,11,12,12,5,5,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,4,4,7,17,5,5,11,5,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,3,8,8,6,6,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,5,5,5,5,5,5,5,5,5,5,5,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,14,14,5,5,5,5,5,5,5,3,6,6,6,3,8,7,7,7,7,17,17,17,17,5,5,5,5,5,5,5,5,11,11,11,11,12,11,11,11,11,11,11,12,14,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,3,11,11,11,11,5,11,11,11,5,11,5,11,12,11,11,11,11,5,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,22,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,5,3,8,8,3,18,8,3,18,18,16,3,18,18,18,18,18,18,18,18,18,8,3,3,18,16,8,18,18,18,18,18,18,18,18,18,18,18,18,3,8,8,18,18,8,18,3,18,8,3,18,3,8,16,18,8,16,3,8,12,10,10,10,10,10,10,10,10,10,10,0,0,10,10,10,0,10,10,10,10,10,10,12,0,10,10,0,10,10,10,10,10,10,10,0,10,10,10,10,10,10,12,10,10,10,12,12,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,10,10,10,10,0,0,10,10,10,10,10,10,10,10,10,0,10,12,10,10,10,10,0,0,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,12,12,12,10,0,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,14,11,12,11,11,11,11,11,11,11,11,11,11,8,14,14,11,11,11,11,10,10,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,11,11,10,11,11,11,11,10,10,10,10,10,11,11,10,11,11,11,11,14,14,10,10,10,10,10,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,5,11,11,5,11,11,5,5,11,18,18,18,18,18,18,18,18,18,18,18,18,8,3,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,10,11,11,10,11,11,10,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,14,11,11,10,11,11,10,11,11,14,10,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,8,16,3,8,3,8,16,8,16,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,14,14,14,14,14,14,14,14,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,2,2,2,0,0,0,16,3,8,8,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,14,14,14,14,11,10,11,11,10,10,10,10,10,10,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,17,17,6,6,4,4,6,6,6,6,4,4,3,4,7,7,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,4,4,4,4,8,11,11,11,11,11,11,11,11,11,11,11,11,5,14,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,4,4,6,6,6,6,4,4,3,4,14,14,6,6,6,6,4,4,4,4,8,10,10,10,10,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,5,11,5,11,11,5,5,11,11,11,11,5,5,11,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,8,8,11,11,11,11,10,11,11,11,11,10,14,4,8,3,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,14,11,11,10,5,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,4,4,4,16,3,4,4,4,8,3,16,3,10,10,10,10,10,0,12,12,12,0,12,0,12,12,0,3,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,4,4,4,16,3,3,3,4,4,4,3,8,16,7,7,7,7,7,7,17,17,17,17,17,17,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,12,12,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,8,8,3,4,3,8,3,4,3,3,8,8,8,8,3,16,16,16,3,8,3,3,8,3,3,8,3,3,3,16,3,4,3,10,12,12,12,12,12,12,10,0,0,0,0,10,10,0,12,10,12,10,10,10,10,10,0,12,12,12,12,0,10,0,12,0,0,10,0,10,12,0,0,12,10,12,0,5,5,5,5,5,12,10,14,14,0,10,12,0,12,12,12,12,12,10,10,10,10,0,5,12,12,8,16,10,11,11,11,11,11,11,11,11,11,11,8,10,10,10,10,10,10,10,10,3,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,4,13,13,8,11,11,11,11,11,11,12,12,11,5,11,10,11,11,11,14,14,11,11,11,11,11,11,5,5,5,14,14,14,11,11,11,11,12,5,11,5,11,12,11,11,11,11,5,11,10,11,11,5,11,11,11,11,11,11,11,11,11,5,12,18,18,3,11,11,11,12,11,11,11,11,11,12,12,12,11,11,12,12,11,11,11,11,12,12,12,12,11,11,11,12,8,10,14,14,5,0,14,14,14,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,10,10,10,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,2,2,2,2,17,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,12,3,8,3,3,8,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,5,14,14,12,12,14,10,11,11,11,11,11,11,11,11,11,11,11,3,4,3,3,4,3,3,8,8,16,16,3,3,3,3,4,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,14,14,10,11,11,11,11,11,11,11,11,11,11,12,5,5,5,5,5,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,10,8,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,4,8,3,3,13,3,3,3,3,4,3,13,12,0,10,12,12,12,12,12,12,0,0,12,12,12,12,12,0,0,12,12,0,12,12,12,12,10,12,0,0,0,0,12,12,12,12,10,12,3,3,3,3,4,8,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,12,17,7,5,5,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,12,11,11,12,11,11,11,11,12,3,11,11,11,11,11,11,11,12,11,11,12,11,11,12,11,11,11,11,11,12,11,11,11,11,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,18,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11],"n":["add_assign","algebra","algorithm","automaton","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","iter_print","math","max","memorize","min","minmax","mlambda","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","tools","tree","AbelianGroup","AbelianMonoid","Act","ActMonoid","AddMulOperation","Additive","AdditiveOperation","Agg","AggMonoid","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","EmptyLazy","Field","FindMajorityOperation","FirstOperation","Gf2_63","Group","Idempotent","IdempotentMonoid","Invertible","Key","LastOperation","LinearOperation","Magma","MaxOperation","Mersenne61","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","Top2Operation","Unital","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","act_agg","act_key","all_one","all_zero","bias","define_monoid","inverse","lb","magma","max","max2","min","min2","monoid_action","monoid_fold","n_max","n_min","operate","operations","ring","ring_operations","single_agg","size","sum","ub","unit","xor_zero","AbelianGroup","AbelianMonoid","Associative","Commutative","Group","Idempotent","IdempotentMonoid","Invertible","Magma","Monoid","SemiGroup","T","Unital","inverse","is_unit","is_unit","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","set_unit","set_unit","unit","Act","ActMonoid","Agg","AggMonoid","Key","MonoidAction","act_agg","act_key","act_operate","act_operate","act_operate_assign","act_operate_assign","act_unit","act_unit","agg_operate","agg_operate","agg_operate_assign","agg_operate_assign","agg_unit","agg_unit","monoid_action_impls","single_agg","toggle","toggle","EmptyLazy","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","_marker","_marker","_marker","_marker","_marker","_marker","_marker","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","add","bias","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","lb","max","max2","min","min2","n_max","n_min","operate","operate","single","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","size","sum","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ub","unit","unit","AdditiveOperation","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","CountingOperation","FindMajorityOperation","FirstOperation","LastOperation","LinearOperation","MaxOperation","MinOperation","MultiplicativeOperation","PermutationOperation","ReverseOperation","Top2Operation","additive_operation_impl","bitand_operation_impl","bitor_operation_impl","bitxor_operation_impl","bottom2_operation_impl","concatenate_operation","counting_operation_impl","find_majority_operation_impl","first_operation_impl","last_operation_impl","linear_operation_impl","max_operation_impl","min_operation_impl","multiplicative_operation_impl","permutation_operation_impl","reverse_operation_impl","top2_operation_impl","tuple_operation_impl","AdditiveOperation","_marker","borrow","borrow_mut","from","into","inverse","operate","rinv_operate","try_from","try_into","type_id","unit","BitAndIdentity","BitAndOperation","_marker","all_one","borrow","borrow_mut","from","into","operate","try_from","try_into","type_id","unit","BitOrIdentity","BitOrOperation","_marker","all_zero","borrow","borrow_mut","from","into","operate","try_from","try_into","type_id","unit","BitXorIdentity","BitXorOperation","_marker","borrow","borrow_mut","from","into","inverse","operate","try_from","try_into","type_id","unit","xor_zero","Bottom2Operation","_marker","borrow","borrow_mut","from","into","operate","try_from","try_into","type_id","unit","ConcatenateOperation","SortedConcatenateOperation","_marker","_marker","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","operate","operate","try_from","try_from","try_into","try_into","type_id","type_id","unit","unit","CountingOperation","_marker","borrow","borrow_mut","from","into","operate","try_from","try_into","type_id","unit","FindMajorityOperation","_marker","borrow","borrow_mut","from","into","operate","try_from","try_into","type_id","unit","FirstOperation","_marker","borrow","borrow_mut","from","into","operate","try_from","try_into","type_id","unit","LastOperation","_marker","borrow","borrow_mut","from","into","operate","try_from","try_into","type_id","unit","LinearOperation","_marker","borrow","borrow_mut","from","into","inverse","operate","try_from","try_into","type_id","unit","MaxOperation","_marker","borrow","borrow_mut","from","into","operate","try_from","try_into","type_id","unit","MinOperation","_marker","borrow","borrow_mut","from","into","operate","try_from","try_into","type_id","unit","MultiplicativeOperation","_marker","borrow","borrow_mut","from","into","inverse","operate","rinv_operate","try_from","try_into","type_id","unit","PermutationOperation","borrow","borrow_mut","from","into","inverse","operate","try_from","try_into","type_id","unit","ReverseOperation","_marker","borrow","borrow_mut","from","into","inverse","operate","try_from","try_into","type_id","unit","Top2Operation","_marker","borrow","borrow_mut","from","into","operate","try_from","try_into","type_id","unit","impl_tuple_operation","AddMulOperation","Additive","Field","Multiplicative","Ring","SemiRing","T","_marker","add","add","borrow","borrow_mut","div","div","from","into","inv","inv","mul","mul","neg","neg","one","one","sub","sub","try_from","try_into","type_id","zero","zero","Gf2_63","Mersenne61","gf2_63","mersenne61","Gf2_63","MOD","borrow","borrow_mut","from","into","operate","try_from","try_into","type_id","unit","MOD","Mersenne61","Mersenne61Add","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","inverse","operate","operate","try_from","try_from","try_into","try_into","type_id","type_id","unit","unit","Answer","B","BabyStepGiantStep","Bisect","BitDp","Combinations","ConvexHullTrick","DivisorTransform","EsperEstimator","EsperSolver","ImpartialGame","ImpartialGameAnalyzer","ImpartialGamer","IndependentSubSet","Iter","Iter","LIter","M","MoSolver","MultipleTransform","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SliceCombinationsExt","SliceSortExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","State","State","SubsetTransform","Subsets","SupersetTransform","T","Trisect","XorBasis","ZeroSumGame","ZeroSumGameAnalyzer","ZeroSumGamer","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","answer","baby","baby_step_giant_step","bases","binary_search","binary_search","bitdp","block_size","bubble_sort","bubble_sort_by","bucket","bucket_size","buckets","chromatic_number","class","class","combinations","convex_hull_trick","cur","cur","data","data","deq","deq","esper","f","f","f","f","feature","feature","find_bisect","floor_kernel","fold_bucket","fold_cell","for_each_combinations","for_each_combinations_with_replacement","for_each_permutations","for_each_product","g","g","game","game","game","grundy","halve","impartial_game","ind","insert","left","mask","mask","merge_sort","merge_sort_by","middle","mo","n","next_combination","next_left","next_permutation","next_right","next_section","next_state","next_state","number","other","parallel_binary_search","partisan_game","position_bisect","prev_combination","prev_permutation","primes","primes","remove","rfind_bisect","rho_path","right","rposition_bisect","run_length_encoding","scores","section_end","section_end","seq","slide_minimum","slide_minimum","sort","sqrt_decomposition","ternary_search","ternary_search","update_bucket","update_cell","width","xi","xorbasis","zero_sum_game","zeta_transform","BabyStepGiantStep","baby","block_size","borrow","borrow_mut","fmt","from","into","new","solve","try_from","try_into","type_id","xi","BISECT_SECTION_END_EPS","BISECT_SECTION_END_EPS","Bisect","SliceBisectExt","binary_search","find_bisect","halve","impl_bisect_float","impl_bisect_signed","impl_bisect_unsigned","parallel_binary_search","position_bisect","rfind_bisect","rposition_bisect","section_end","","","BitDp","Combinations","Subsets","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","combinations","cur","cur","default","elements","eq","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","is_element","is_subset","mask","mask","next","next","next_combination","next_subset","not_elements","subsets","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","IndependentSubSet","borrow","borrow_mut","chromatic_number","clone","clone_into","fmt","from","from_adj_graph","ind","into","k_colorable","n","to_owned","try_from","try_into","type_id","SliceCombinationsExt","combinations_inner","combinations_with_replacement_inner","for_each_combinations","for_each_combinations_with_replacement","for_each_permutations","for_each_product","next_combination","next_combination_inner","next_permutation","permutations_inner","prev_combination","prev_permutation","product_inner","rotate_distinct","ChtLine","ConvexHullTrick","add_line","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone","clone_into","clone_into","default","default","deq","eq","fmt","fmt","from","from","intercept","into","into","new","new","query","slope","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","EsperEstimator","EsperSolver","Marker","_marker","_marker","borrow","borrow","borrow_mut","borrow_mut","class","class","clone","clone","clone_into","clone_into","data","data","feature","feature","fmt","fmt","from","from","into","into","new","push","solve","solve","solve_checked","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ImpartialGame","ImpartialGameAnalyzer","ImpartialGamer","Iter","Marker","State","_marker","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eval","f","fmt","from","from","game","grundy","into","into","new","new","next_state","next_state","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Answer","MoSolver","answer","insert","mo_solve","mo_solve","remove","floor_kernel","run_length_encoding","FIX","LIter","Marker","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","State","_marker","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eval","f","fmt","from","from","g","game","into","into","new","new","next_left","next_left","next_right","next_right","number","simple_number","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","RhoPath","borrow","borrow_mut","build","build_rho","f","fmt","from","g","get","into","try_from","try_into","type_id","SlideMinimum","borrow","borrow_mut","build","deq","from","into","left","lsucc","new","next_minimum","right","rsucc","seq","slide_minimum","try_from","try_into","type_id","width","Run","SliceSortExt","borrow","borrow_mut","bubble_sort","bubble_sort","bubble_sort_by","clone","clone_into","from","get_and_increment","into","len","merge","merge_sort","merge_sort","merge_sort_by","start","to_owned","try_from","try_into","type_id","B","M","SqrtDecomposition","SqrtDecompositionBuckets","T","_marker","borrow","borrow_mut","bucket","bucket_size","buckets","fold","fold_bucket","fold_cell","from","into","sqrt_decomposition","sqrt_decomposition","try_from","try_into","type_id","update","update_bucket","update_cell","Trisect","impl_trisect_float","impl_trisect_signed","impl_trisect_unsigned","middle","next_section","section_end","ternary_search","XorBasis","bases","basis","borrow","borrow_mut","clone","clone_into","default","find","fmt","from","from_iter","insert","into","new","reduce","to_owned","try_from","try_into","type_id","Iter","Marker","State","ZeroSumGame","ZeroSumGameAnalyzer","ZeroSumGamer","_marker","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eval","f","fmt","from","from","game","into","into","new","new","next_state","next_state","scores","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","","","DivisorTransform","MultipleTransform","SubsetTransform","SupersetTransform","_marker","_marker","_marker","_marker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","convolve","convolve","convolve","convolve","from","from","from","from","into","into","into","into","mobius_transform","mobius_transform","mobius_transform","mobius_transform","new_with_primes","new_with_primes","primes","primes","primes_iter","primes_iter","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","a","b","dp","dp","dp","dp","gap","index","items","knapsack_problem","largest_pattern","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","levenshtein_distance","lexicographical_subsequence","longest_increasing_subsequence","Item","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","a","add","b","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dfs","dp","dp","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","gap","get","get","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","items","max_weight","neg","new","new","new","new","solve","solve","solve","solve","solve_relax","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","weight","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","LexicographicalSubsequence","borrow","borrow_mut","clone","clone_into","dp","fmt","from","index","into","kth_sequence","new","to_owned","try_from","try_into","type_id","LongestIncreasingSubsequence","borrow","borrow_mut","clone","clone_into","default","dp","extend","fmt","from","insert","into","longest_length","new","to_owned","try_from","try_into","type_id","Accumulate","Allocator","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","CompressedBinaryIndexedTree","CompressedBinaryIndexedTree1d","CompressedBinaryIndexedTree2d","CompressedBinaryIndexedTree3d","CompressedBinaryIndexedTree4d","CompressedSegmentTree","CompressedSegmentTree1d","CompressedSegmentTree2d","CompressedSegmentTree3d","CompressedSegmentTree4d","Compressor","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCompress","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MemoryPool","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTreeMap","SlopeTrick","SplayMap","SplaySequence","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","VecCompress","WaveletMatrix","WeightedUnionFind","_marker","_marker","_marker","_marker","_marker","accept","access","accumulate","addl","addr","alloc","alloc","allocate","allocator","automaton","automaton","back_stack","back_stack","binary_indexed_tree","binary_indexed_tree_2d","bit","bit","bit_length","bit_vector","bits","bits","bitset","cells","char_size","child","chunks","compress","compress","compress","compressed_binary_indexed_tree","compressed_segment_tree","counter","data","data","data","data","data","dd","deallocate","dfa","dfa","dfa","diff","disjoint_sparse_table","dp","equal","equal","fibonacci_hash","fn_accept","fn_accept","fn_accept","fn_initial","fn_initial","fn_initial","fn_next","fn_next","fn_next","front_stack","front_stack","h","index_exact","index_lower_bound","initial","kdtree","lazy_segment_tree","lazy_segment_tree_map","left","len","length","length","line_set","map","map","map","map","map","merge","merging_union_find","minval","n","n","n","n","n","ndp","next","node_size","ordering","ordering","parents","parents","pool","range_ap_add","range_map","right","root","root","seg","seg","seg","seg","segment_tree","segment_tree_map","segs","sequence","sequence","size","size","sliding_winsow_aggregation","slope_trick","splay_tree","sum","table","table","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","trie","u","union_find","unused","w","wavelet_matrix","weighted_union_find","Accumulate","accumulate","borrow","borrow_mut","data","fmt","fold","from","from_iter","into","try_from","try_into","type_id","Allocator","BoxAllocator","CAP","MemoryPool","allocate","allocate","allocate","borrow","borrow","borrow_mut","borrow_mut","chunks","deallocate","deallocate","deallocate","default","default","drop","fmt","fmt","from","from","into","into","new","pool","try_from","try_from","try_into","try_into","type_id","type_id","unused","with_capacity","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","FunctionalAutomaton","IntersectionAutomaton","LexicographicalAutomaton","MappingAutomaton","MonoidalAutomaton","ProductAutomaton","RevLexicographicalAutomaton","State","ToDigitSequence","UnionAutomaton","_marker","_marker","_marker","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dfa","dfa","dfa","dp","dp","dp","equal","equal","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_accept","fn_accept","fn_accept","fn_initial","fn_initial","fn_initial","fn_next","fn_next","fn_next","fold_accept","from","from","from","from","from","from","from","from","from","from","from","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","impl_to_digit_sequence","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","into","into","into","into","into","into","into","into","into","into","into","less_than","less_than","less_than_or_equal","less_than_or_equal","map_fold_accept","ndp","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","ordering","ordering","run","run_effect","sequence","sequence","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","BinaryIndexedTree","accumulate","accumulate0","bit","borrow","borrow_mut","clone","clone_into","fmt","fold","from","from_slice","get","into","lower_bound","n","new","set","to_owned","try_from","try_into","type_id","update","BinaryIndexedTree2D","accumulate","accumulate0","bit","borrow","borrow_mut","clone","clone_into","fmt","fold","from","get","h","into","new","set","to_owned","try_from","try_into","type_id","update","w","BitVector","RankSelectDictionaries","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","WORD_SIZE","access","access","bit_length","bit_length","borrow","borrow_mut","clone","clone_into","data","fmt","from","from_iter","impl_rank_select_for_bits","into","rank0","rank0","rank1","rank1","rank1","select0","select0","select0","select1","select1","select1","sum","to_owned","try_from","try_into","type_id","BitSet","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bits","bitxor","bitxor","bitxor_assign","borrow","borrow_mut","clone","clone_into","cmp","count_ones","count_zeros","default","eq","fmt","from","get","hash","into","new","not","not","ones","partial_cmp","set","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","to_owned","trim","try_from","try_into","type_id","Compressor","HashCompress","VecCompress","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","data","fmt","fmt","from","from","from_iter","from_iter","index_exact","index_exact","index_exact","index_lower_bound","index_lower_bound","index_lower_bound","into","into","size","size","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CompressedBinaryIndexedTree","CompressedBinaryIndexedTree1d","CompressedBinaryIndexedTree2d","CompressedBinaryIndexedTree3d","CompressedBinaryIndexedTree4d","Tag","_marker","accumulate","accumulate","accumulate","accumulate","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compress","default","fmt","fmt","from","from","from_iter","from_iter","from_iter","from_iter","impl_compressed_binary_indexed_tree","into","into","new","new","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","update","update","update","CompressedSegmentTree","CompressedSegmentTree1d","CompressedSegmentTree2d","CompressedSegmentTree3d","CompressedSegmentTree4d","Tag","_marker","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","compress","default","fmt","fmt","fold","fold","fold","fold","from","from","from_iter","from_iter","from_iter","from_iter","impl_compressed_segment_tree","into","into","new","new","new","new","segs","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update","update","update","update","BTreeCounter","HashCounter","add","add","add_count","add_count","append","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","default","default","drain","extend","extend","extend","extend","fmt","fmt","from","from","from_iter","from_iter","from_iter","from_iter","get","get","into","into","is_empty","is_empty","iter","iter","keys","keys","len","len","map","map","new","new","range","remove","remove","remove_count","remove_count","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","values","values","with_capacity","C","DisjointSparseTable","borrow","borrow_mut","clone","clone_into","fmt","fold","fold_close","from","height","index","into","most_significant_bit_place","new","table","to_owned","try_from","try_into","type_id","A","A","B","B","FibHashMap","FibHashSet","FibonacciHasher","FibonacciHasheru32","FibonacciHasheru64","borrow","borrow","borrow_mut","borrow_mut","default","default","finish","finish","fmt","fmt","from","from","hash","hash","into","into","push","push","try_from","try_from","try_into","try_into","type_id","type_id","write","write","write_i128","write_i128","write_i16","write_i16","write_i32","write_i32","write_i64","write_i64","write_i8","write_i8","write_isize","write_isize","write_u128","write_u128","write_u16","write_u16","write_u32","write_u32","write_u64","write_u64","write_u8","write_u8","write_usize","write_usize","Static2DTree","borrow","borrow_mut","build","data","from","into","new","range","range_inner","try_from","try_into","type_id","LazySegmentTree","bisect_perfect","borrow","borrow_mut","clone","clone_into","fmt","fold","fold_all","from","from_vec","get","into","n","new","position_acc","propagate","propagate_at","rbisect_perfect","recalc","recalc_at","rposition_acc","seg","set","to_owned","try_from","try_into","type_id","update","update_at","LazySegmentTreeMap","bisect_perfect","borrow","borrow_mut","clone","clone_into","fmt","fold","fold_all","from","get","get_mut","into","n","new","position_acc","propagate","propagate_at","rbisect_perfect","recalc","recalc_at","rposition_acc","seg","set","to_owned","try_from","try_into","type_id","update","update_at","Line","LineSet","Query","Slope","a","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","default","eq","eq","eq","f","fmt","fmt","fmt","fmt","from","from","from","from","insert","into","into","into","into","map","new","new","partial_cmp","partial_cmp","partial_cmp","q","query_min","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Child","MergingUnionFind","Root","RootData","UfCell","all_group_members","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cells","clone","clone","clone_into","clone_into","data","find","find_root","find_root_mut","fmt","fmt","from","from","from","into","into","into","is_root","members","merge","new","new","roots","same","size","size","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unite","RangeArithmeticProgressionAdd","borrow","borrow_mut","build_inplace","clone","clone_into","dd","fmt","from","into","new","to_owned","try_from","try_into","type_id","update","update_isize","RangeMap","RangeSet","borrow","borrow","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","contains","contains_key","default","default","drain_with","drain_with","drain_with_inner","extend","extend","fmt","fmt","from","from","from_iter","from_iter","get","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","insert","insert","insert_with","insert_with","into","into","iter","iter","iter_mut","keys","map","map","new","new","pop_left_if","pop_left_if","pop_right_if","pop_right_if","remove","remove","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","values","values_mut","SegmentTree","as_slice","bisect_perfect","borrow","borrow_mut","clone","clone_into","fmt","fold","fold_all","from","from_vec","get","into","n","new","position_acc","rbisect_perfect","rposition_acc","seg","set","to_owned","try_from","try_into","type_id","update","SegmentTreeMap","bisect_perfect","borrow","borrow_mut","clone","clone_into","fmt","fold","fold_all","from","get","get_ref","into","n","new","position_acc","rbisect_perfect","rposition_acc","seg","set","to_owned","try_from","try_into","type_id","u","update","DequeAggregation","QueueAggregation","back","back_stack","back_stack","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","fmt","fmt","fold_all","fold_all","from","from","front","front_stack","front_stack","into","into","is_empty","is_empty","last","len","len","new","new","pop","pop_back","pop_front","push","push_back","push_front","push_front","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","SlopeTrick","add_abs","add_const","add_pmar","add_ramp","addl","addr","borrow","borrow_mut","clear_left","clear_right","clone","clone_into","default","fmt","from","into","left","min_range","minimum","minval","new","peek_left","peek_right","pop_left","pop_right","push_left","push_right","right","shift","slide_minimum","to_owned","try_from","try_into","type_id","valley","SplayMap","SplaySequence","node","sequence","sized_map","Node","NodeRange","NodeRef","Root","S","SeekLeft","SeekRight","SplaySeeker","SplaySpec","T","_marker","_marker","_marker","add","append","as_ptr","back","borrow","borrow","borrow","borrow","borrow","borrow","borrow_datamut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom_up","clone","clone_into","data","data","data","data","data_mut","data_mut","default","drop","drop_rotate_left","fmt","fmt","fmt_recurse","from","from","from","from","from","from","from_data","front","front","has_bottom_up","insert_first","insert_first","insert_last","insert_last","insert_left","insert_left","insert_right","insert_right","into","into","into","into","into","into","into_data","into_dying","into_inner","is_empty","left","left","left","left_size","marker","merge","new","new","new","new","new","new","new_unchecked","next_back_checked","next_checked","node","range","reborrow","reverse","right","right","right","root","root","root","root","root_data_mut","root_mut","set_left","set_right","size","splay_by","splay_by","splay_seek","splay_seek","splay_seek","split_left","split_left_eq","split_right","split_right_eq","take_first","take_last","take_left","take_right","take_root","three_way","to_owned","top_down","traverse","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","DataMut","Dying","Immut","Mut","Owned","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","LazyAggElement","LazyAggSplay","SeekByAccCond","SeekByRaccCond","SeekBySize","SplaySequence","_marker","_marker","_marker","_marker","acc","acc","agg","alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom_up","default","drop","f","f","fmt","fmt","fold","from","from","from","from","from","from","get","has_bottom_up","index","insert","into","into","into","into","into","into","is_empty","key","lazy","len","length","modify","new","new","new","new","position_acc","propagate","range","recalc","remove","rev","reverse","reverse","root","rotate_left","rotate_right","rposition_acc","size","splay_seek","splay_seek","splay_seek","top_down","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update_lazy","with_capacity","Iter","SeekByKey","SeekBySize","SizedSplay","SplayMap","_marker","_marker","_marker","alloc","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom_up","default","drop","fmt","fmt","from","from","from","from","from","get","get_key_value","get_key_value_at","has_bottom_up","index","insert","into","into","into","into","into","into_iter","is_empty","iter","iter","key","last","len","length","max","min","new","new","new","next","next_back","range","range_at","remove","remove_at","root","splay_at","splay_by_key","splay_seek","splay_seek","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_capacity","Trie","borrow","borrow_mut","build_failure","char_size","child","clone","clone_into","edges","find","find_at","fmt","from","insert","insert_at","insert_once_at","into","new","next_node","node_size","node_size","to_owned","try_from","try_into","type_id","with_capacity","UnionFind","all_group_members","borrow","borrow_mut","clone","clone_into","find","fmt","from","into","members","new","parents","roots","same","size","to_owned","try_from","try_into","type_id","unite","WaveletMatrix","access","borrow","borrow_mut","clone","clone_into","fmt","from","into","len","new","quantile","quantile_outer","rank","rank_lessthan","rank_range","select","table","to_owned","try_from","try_into","type_id","WeightedUnionFind","all_group_members","borrow","borrow_mut","clone","clone_into","diff","find","fmt","from","get_difference","get_weight","into","is_same","members","new","parents","roots","size","to_owned","try_from","try_into","type_id","unite","Approx","ApproxOrd","Ccw","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","Point","approx","approx_cmp","approx_eq","c","ccw","circle","closest_pair","closest_pair","convex_diameter","convex_hull","line","p1","p1","p2","p2","polygon","r","Approx","ApproxOrd","EPS_F32","EPS_F64","approx_cmp","approx_eq","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","impl_approx_zero_for_int","into","partial_cmp","to_owned","try_from","try_into","type_id","Ccw","Clockwise","CounterClockwise","OnSegment","OnlineBack","OnlineFront","borrow","borrow_mut","ccw","ccw_open","clone","clone_into","cmp","eq","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","Circle","borrow","borrow_mut","c","clone","clone_into","contains_point","cross_circle","eq","fmt","from","into","new","r","to_owned","try_from","try_into","type_id","closest_pair","closest_pair_inner","Line","LineSegment","borrow","borrow","borrow_mut","borrow_mut","ccw","ccw","clone","clone","clone_into","clone_into","cross_point","dir","dir","distance","distance_point","distance_point","eq","eq","fmt","fmt","from","from","intersect","intersect_point","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","new","new","p1","p1","p2","p2","projection","projection","reflection","reflection","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","convex_diameter","convex_hull","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","_marker","add_assign","adj","adj","adjacencies","adjacencies_with_eindex","adjacencies_with_value","adjacency_list","articulation","avalue","aviews","bipartite_matching","bridge","capacities","capacities","capacities","capacities","closure","comp","construct_emap","construct_graph","construct_vmap","cost1","cost2","costs","costs","csize","deq","directed","dist","dulmage_mendelsohn_decomposition","dulmage_mendelsohn_decomposition","edge_list","edges","edges","edges","edges","edges","edges","edges","eindex","elist","emap_get","emap_get_mut","esize","esize","esize","esize","esize","eview","g","graph","graph","graph","graph","graph","graph_base","graphvis","grid","has_negedge","has_negedge","height","id","inf","iter","iter","iter","left_graph","left_match","left_size","level","low","low","low_link","map","map","matching_size","maximum_flow","minimum_cost_flow","minimum_spanning_tree","mul","n_values","ord","ord","order","potential","prev_edge","prev_vertex","project_selection_problem","rest","right_match","right_size","shortest_path","source","sparse_graph","start","start","strongly_connected_component","to","topological_sort","totalcost","two_satisfiability","vertices","vindex","visited","vmap_get","vmap_get_mut","vs","vsize","vsize","vsize","vsize","vsize","vsize","vsize","vsize","vsize","vsize","vsize","vsize","vsize","vview","width","Adjacency","AdjacencyListGraph","AdjacencyListGraphScanner","_marker","add_edge","add_undirected_edge","adjacency","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","default","directed","eq","esize","esize","fmt","fmt","from","from","from","graph","hash","id","into","into","into","mscan","new","new","new","partial_cmp","to","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vertices","vsize","vsize","BipartiteMatching","Either","Left","Right","add_edge","bfs","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dfs","fmt","from","from","from_edges","hopcroft_karp","into","into","kuhn_multi_start_bfs","left_graph","left_match","left_size","matching_size","maximum_independent_set","maximum_matching","minimum_edge_cover","minimum_vertex_cover","new","reachable","right_match","right_size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","ClosureGraph","UsizeGraph","_marker","adj","adj","adjacencies","adjacencies","adjacencies_with_value","adjacencies_with_value","aviews","aviews","borrow","borrow","borrow_mut","borrow_mut","construct_vmap","construct_vmap","from","from","into","into","new","new","try_from","try_from","try_into","try_into","type_id","type_id","vertices","vertices","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vs","vsize","vview","vview","vview","dulmage_mendelsohn_decomposition","EdgeListGraph","EdgeListGraphScanner","_marker","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","edges","edges","edges_size","esize","fmt","from","from","from_edges","index","into","into","minimum_spanning_arborescence","minimum_spanning_tree","mscan","new","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vertices","vertices_size","vsize","vsize","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","EIndex","EIndex","EIndexedGraph","EIter","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","_marker","_marker","adjacencies","adjacencies_with_eindex","adjacencies_with_value","avalue","avalue","avalue","aviews","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","construct_emap","construct_vmap","edges","eindex","eindex","eindex","emap_get","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","esize","eview","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","g","hash","hash","hash","hash","into","into","into","into","into","into","into_iter","into_iter","iter","iter","map","map","map","map","new","new","next","next","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vertices","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get_mut","vmap_set","vmap_set","vsize","vview","Adj4","Adj8","D","DL","DR","GridAdjacency","GridDirection","GridDirectionIter","GridGraph","GridVertices","L","R","U","UL","UR","_marker","_marker","_marker","adj4","adj8","adjacencies","adjacencies","adjacencies_with_value","adjacencies_with_value","aviews","aviews","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","construct_vmap","default","dir","diter","dxdy","eq","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","g","hash","height","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","move_by_diff","ndxdy","new","new_adj4","new_adj8","next","next","next","next","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vmap_get","vmap_get_mut","vview","width","xrange","xy","yrange","LowLink","articulation","borrow","borrow_mut","bridge","dfs","from","graph","into","low","new","ord","try_from","try_into","type_id","Dinic","DinicBuilder","add_edge","bfs","borrow","borrow","borrow_mut","borrow_mut","build","builder","capacities","capacities","change_edge","clone","clone","clone_into","clone_into","deq","dfs","edges","extend","fmt","fmt","from","from","gen_graph","get_flow","graph","into","into","iter","level","maximum_flow","maximum_flow_limited","minimum_cut","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vsize","PrimalDual","PrimalDualBuilder","add_edge","bellman_ford","borrow","borrow","borrow_mut","borrow_mut","build","builder","capacities","capacities","clone","clone_into","costs","costs","dijkstra","dist","edges","extend","fmt","fmt","from","from","gen_graph","get_flow","graph","has_negedge","has_negedge","into","into","minimum_cost_flow","minimum_cost_flow_limited","new","potential","prev_edge","prev_vertex","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vsize","ProjectSelectionProblem","add_cost1","add_cost2","add_cost2_01","add_cost2_10","borrow","borrow_mut","clone","clone_into","cost1","cost2","default","fmt","from","into","n_values","new","solve","start","to_owned","totalcost","try_from","try_into","type_id","with_n_values","OptionSp","PathFoldingSp","ShortestPathExt","ShortestPathSemiRing","StandardSp","T","add_assign","add_assign","add_assign","add_assign","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","from","from","from","inf","inf","inf","inf","into","into","into","mul","mul","mul","mul","source","source","source","source","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","warshall_floyd_ap","warshall_floyd_ap","Adjacency","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","Marker","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","TreeGraphScanner","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","_marker","_marker","_marker","_marker","add_edge","adjacencies","adjacencies","adjacencies_with_eindex","aviews","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","builder_with_esize","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","default","depth_dfs","depth_dfs","dfs_order","dfs_tree","edges","edges","edges_size","eindex","elist","emap_get","emap_get_mut","eq","eq","eq","eq","esize","esize","eview","eview","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from_edges","hash","hash","hash","hash","id","into","into","into","into","into","into","into","into","mscan","mscan","new","new","new","new","new_with_esize","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rest","size_dfs","size_dfs","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vertices","vertices","vertices_size","vindex","vmap_get","vmap_get_mut","vsize","vsize","vsize","vsize","vsize","vview","vview","weighted_depth_dfs","weighted_depth_dfs","weighted_tree_depth","weighted_tree_depth","StronglyConnectedComponent","borrow","borrow_mut","clone","clone_into","comp","components","csize","dfs","fmt","from","gen_cgraph","graph","has_loop","index","into","low","new","ord","size","to_owned","try_from","try_into","type_id","visited","TwoSatisfiability","add_clause","add_nand","add_or","borrow","borrow_mut","clone","clone_into","edges","fmt","from","into","new","set_false","set_true","to_owned","try_from","try_into","two_satisfiability","type_id","vsize","Convolve","Convolve998244353","ConvolveRealFft","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","MIntConvolve","Matrix","MemorizedFactorial","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","_marker","berlekamp_massey","berlekamp_massey","binary_exponentiation","c","check_primitive_root","convolve_steps","data","data","data","discrete_logarithm","discrete_logarithm","discrete_logarithm_prime_mod","divisors","euler_phi","extgcd","extgcd_binary","extgcd_recurse","fact","fact","factorial","fast_fourier_transform","floor_sum","floor_sum","floor_sum_i64","floor_sum_range_freq","formal_power_series","gcd","gcd","gcd_loop","highly_composite_number","inv_fact","inv_fact","inverse_transform","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","linear_congruence","matrix","max_n","miller_rabin","miller_rabin","miller_rabin_with_br","mod_sqrt","modinv","modinv_extgcd_binary","modinv_recurse","moebius","multiply","number_theoretic_transform","nums","p","p0","p1","polynomial","pow","prime","prime_factors","prime_factors","prime_factors_flatten","prime_list","prime_table","primes","primitive_root","primitive_root","shape","sqn","sqrt_coefficient","table","table","transform","berlekamp_massey","ConvolveSteps","F","T","convolve","convolve","inverse_transform","length","multiply","transform","A","IC","IndexCalculus","IndexCalculusWithPrimitiveRoot","QdrtPowPrec","__KEY","__getit","__init","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","br_primes","br_qdrt","coeff","discrete_logarithm","discrete_logarithm","discrete_logarithm","discrete_logarithm_prime_mod","discrete_logarithm_prime_power","factorize_smooth","fmt","fmt","fmt","from","from","from","ic","index_calculus","index_calculus_for_primitive_root","into","into","into","new","new","new","ord","p","p0","p1","p2","p3","pohlig_hellman_prime_power_order","pow","pow","prec","primes","solve_linear_congruence","solve_linear_congruences","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","MemorizedFactorial","PowPrec","SmallModMemorizedFactorial","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","c","clone","clone","clone","clone_into","clone_into","clone_into","combination","combination","default","fact","fact","factorial","fmt","fmt","fmt","from","from","from","homogeneous_product","into","into","into","inv","inv","inv_fact","inv_fact","lagrange_interpolation","new","new","new","p","p0","p1","permutation","pow","pow","powi","sqn","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ConvolveRealFft","RotateCache","__KEY","__LOCAL_KEY","__getit","__init","__local_key","bit_reverse","borrow","borrow","borrow_mut","borrow_mut","ensure","fft","from","from","ifft","into","into","inverse_transform","length","multiply","transform","try_from","try_from","try_into","try_into","type_id","type_id","choose2","floor_sum","floor_sum_i64","floor_sum_range_freq","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","_marker","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","borrow","borrow_mut","bostan_mori","clone","clone_into","count_multiset_sum","count_subset_sum","data","default","diff","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","eq","eval","even","exp","fmt","formal_power_series_impls","formal_power_series_nums","from","from","from","from","from_iter","from_vec","index","index_mut","integral","into","into_iter","inv","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","length","log","middle_product","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multipoint_evaluation","neg","neg","odd","one","pow","prefix","prefix_ref","product_all","rem","rem","rem","rem","rem_assign","rem_assign","resize","resized","reversed","shl","shl","shl_assign","shr","shr","shr_assign","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","taylor_shift","to_owned","trim_tail_zeros","truncate","try_from","try_into","type_id","zero","zeros","impl_fps_binop_addsub","impl_fps_binop_conv","impl_fps_single_binop","extgcd","extgcd_binary","extgcd_recurse","gcd","gcd_loop","lcm","modinv","modinv_extgcd_binary","modinv_recurse","lagrange_interpolation","lagrange_interpolation_polynomial","Matrix","add","borrow","borrow_mut","clone","clone_into","data","determinant","eq","eye","fmt","from","from_vec","index","index","index_mut","index_mut","into","inverse","mul","new","pow","rank","row_reduction","shape","solve_system_of_linear_equations","sub","to_owned","try_from","try_into","type_id","zeros","impl_mr","impl_test_mr","miller_rabin","miller_rabin_with_br","mr32","mr64","test_mr32","test_mr64","jacobi","Convolve","Convolve998244353","MIntConvolve","MVec","NttCache","NttModulus","__KEY","__KEY","__KEY","__KEY","__LOCAL_KEY","__LOCAL_KEY","__LOCAL_KEY","__LOCAL_KEY","__getit","__getit","__getit","__getit","__init","__init","__init","__init","borrow","borrow","borrow_mut","borrow_mut","cache","clone","clone_into","ensure","fmt","from","from","icache","impl_ntt_modulus","into","into","intt","inverse_transform","inverse_transform","length","length","multiply","multiply","new","ntt","primitive_root","to_owned","transform","transform","try_from","try_from","try_into","try_into","type_id","type_id","binary_exponentiation","linear_congruence","Polynomial","add","assign","borrow","borrow_mut","clone","clone_into","data","default","div","eq","fmt","from","from_vec","index","index_mut","into","length","mul","one","polynomial_impls","pow","rem","sub","to_owned","try_from","try_into","type_id","zero","EulerPhiTable","borrow","borrow_mut","clone","clone_into","euler_phi","fmt","from","get","highly_composite_number","into","moebius","new","table","to_owned","try_from","try_into","type_id","divisors","find_factor","prime_factors","prime_factors_flatten","PrimeList","PrimeListTrialDivision","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count_divisors","default","divisors","fmt","fmt","from","from","into","into","into_iter","is_prime","max_n","n","new","next","prime_factors","primes","primes","primes","primes_lte","reserve","to_owned","to_owned","trial_division","try_from","try_from","try_into","try_into","type_id","type_id","","PrimeTable","borrow","borrow_mut","clone","clone_into","count_divisors","divisors","fmt","from","into","is_prime","new","prime_factors","primes","table","to_owned","trial_division","try_from","try_into","type_id","check_primitive_root","primitive_root","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","Rational","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","_marker","abs","abs","acos","acosh","asin","asinh","atan","atan2","atanh","backward_checked","barrett_reduction","bounded","cbrt","ceil","classify","complex","copysign","cos","cosh","count_ones","count_zeros","delta","den","discrete_steps","div_euclid","div_euclid","double_double","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","exp","exp2","exp_m1","float","floor","forward_checked","fract","from","from_bits","from_str_radix","g","gcd","get_mod","hypot","im","im","integer","into","is_finite","is_infinite","is_nan","is_negative","is_normal","is_positive","is_sign_negative","is_sign_positive","leading_zeros","ln","ln_1p","log","log10","log2","m","max","maximum","min","minimum","mint","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_sub","mod_zero","montgomery","mul_add","num","one","pow","powf","powi","quad_double","rational","re","recip","rem_euclid","rem_euclid","reverse_bits","rotate_left","rotate_right","round","signed","signum","signum","sin","sin_cos","sinh","sqrt","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","tan","tanh","to_bits","to_degrees","to_radians","total_cmp","trailing_zeros","trunc","unsigned","x","x","y","zero","zero_one","BarrettReduction","MASK64","borrow","borrow_mut","clone","clone_into","div","div","div","div_rem","div_rem","div_rem","fmt","from","get_mod","get_mod","get_mod","im","impl_barrett","into","m","new","new","new","rem","rem","rem","to_owned","try_from","try_into","type_id","Bounded","bounded_num_impls","bounded_tuple_impls","is_maximum","is_maximum","is_minimum","is_minimum","maximum","minimum","set_maximum","set_maximum","set_minimum","set_minimum","Complex","abs","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","angle","borrow","borrow_mut","clone","clone_into","cmp","cmp_by_arg","conjugate","cross","default","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","dot","eq","fmt","from","hash","i","im","impl_complex_fold","impl_complex_op_assign","impl_complex_ref_binop","impl_complex_ref_unop","into","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","norm","one","partial_cmp","polar","pos","primitive_nth_root_of_unity","product","product","re","scan","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_owned","transpose","try_from","try_into","type_id","unit","zero","DiscreteSteps","RangeBoundsExt","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","delta","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","impl_discrete_steps_integer","impl_range_bounds_ext","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","to_range","to_range","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_checked","to_range_inclusive_checked","DoubleDouble","abs","add","add","borrow","borrow_mut","clone","clone_into","cmp","default","div","div2","eq","fmt","fmt","from","from","from_str","into","is_zero","maximum","minimum","mul","mul","neg","partial_cmp","quick_two_sum","renormalize","split","sqrt","sub","three_two_sum","to_owned","to_string","total_cmp","try_from","try_into","two_prod","two_sum","type_id","DIGITS","E","EPSILON","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","NAN","NEG_INFINITY","PI","RADIX","SQRT_2","TAU","abs","abs","abs","acos","acos","acos","acosh","acosh","acosh","add","add","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","classify","classify","classify","clone","clone","clone_into","clone_into","cmp","cmp","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","default","default","div","div","div_euclid","div_euclid","div_euclid","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","floor","floor","floor","fmt","fmt","fmt","fmt","fract","fract","fract","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","hypot","hypot","hypot","into","into","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_normal","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","min","min","min","minimum","minimum","mul","mul","mul_add","mul_add","mul_add","neg","neg","one","one","ord_float_impls","partial_cmp","partial_cmp","powf","powf","powf","powi","powi","powi","primitive_float_impls","recip","recip","recip","rem","rem","rem_euclid","rem_euclid","rem_euclid","round","round","round","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sub","sub","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_radians","to_radians","to_radians","to_string","to_string","total_cmp","total_cmp","total_cmp","trunc","trunc","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero","zero","BinaryRepr","Error","ExtendedGcd","IntBase","Saturating","Signed","Signed","Unsigned","Unsigned","Wrapping","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","eq","eq","extgcd","extgcd","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","hash","hash","impl_binary_repr","impl_binary_repr_for_saturating","impl_binary_repr_for_wrapping","impl_binop","impl_int_base","impl_int_base_for_saturating","impl_int_base_for_wrapping","impl_opassign","impl_unsigned_signed","impl_unsigned_signed_for_saturating","impl_unsigned_signed_for_wrapping","into","into","into","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","maximum","maximum","minimum","minimum","modinv","modinv","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","not","not","one","one","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","scan","scan","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_owned","to_owned","to_string","to_string","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","MInt","MIntBase","MIntConvert","mint_base","mint_basic","montgomery","Inner","MInt","MIntBase","MIntConvert","_marker","add","add","add","add","add_assign","add_assign","borrow","borrow_mut","clone","clone_into","default","div","div","div","div","div_assign","div_assign","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get_mod","get_mod","hash","impl_mint_from","impl_mint_ref_binop","impl_mint_ref_op_assign","impl_mint_ref_unop","inner","into","into","inv","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","mul","mul","mul","mul","mul_assign","mul_assign","neg","neg","new","new_unchecked","one","pow","product","product","scan","set_mod","set_mod","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub_assign","sub_assign","sum","sum","to_owned","to_string","try_from","try_into","type_id","x","zero","DYN_MODULUS_U32","DYN_MODULUS_U64","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","__KEY","__KEY","__getit","__getit","__init","__init","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","impl_to_mint_base_for_modulo2","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","rem","rem","rem","rem","rem","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","__local_key","__local_key","__local_key","__local_key","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","culculate_montgomery","define_montgomery_reduction_32","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","n1","n1","n1","n1","n1","n2","n2","n2","n2","n2","n3","n3","n3","n3","n3","primitive_root","primitive_root","primitive_root","primitive_root","r","r","r","r","r","r","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","define_basic_mint32","define_basic_mintbase","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","get_mod","n1","n2","n3","QuadDouble","abs","add","add","borrow","borrow_mut","clone","clone_into","default","div","div2","double_accumulate","eq","fmt","fmt","from","from","from_str","index","into","is_zero","mul","mul","multiple_three_sum","multiple_two_sum","neg","partial_cmp","quick_two_sum","renormalize","split","sqrt","sub","three_three_sum","three_two_sum","to_owned","to_string","try_from","try_into","two_prod","two_sum","type_id","Rational","abs","add","add_assign","borrow","borrow_mut","clone","clone_into","cmp","den","div","div_assign","eq","fmt","from","inner","into","maximum","minimum","mul","mul_assign","neg","new","new_unchecked","num","one","partial_cmp","sub","sub_assign","to_owned","try_from","try_into","type_id","zero","One","Zero","is_one","is_one","is_zero","is_zero","one","set_one","set_one","set_zero","set_zero","zero","zero_one_impls","Chars","Read","Scanner","Usize1","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","bytes","chain","clone","clone","clone","clone_into","clone_into","clone_into","flush","fmt","fmt","fmt","from","from","from","into","into","into","is_read_vectored","is_write_vectored","iter","iter","iter_print","mscan","new","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","scan","scan","scan","scan_vec","take","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_all","write_all_vectored","write_fmt","write_vectored","Gf2_63x1","Gf2_63x2","Gf2_63x3","Hash","KnuthMorrisPratt","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHasher","SuffixArray","T","Zarray","concat_hash","ensure","hash_sequence","hash_substr","init","knuth_morris_pratt","pat","pattern","rank","rolling_hash","sa","suffix_array","table","z","z_algorithm","KnuthMorrisPratt","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","pattern","search_all","table","to_owned","try_from","try_into","type_id","Gf2_63x1","Gf2_63x2","Gf2_63x3","Hash","Hashed","HashedRange","HashedSequence","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHashPrecalc","RollingHasher","T","__KEY","__KEY","__KEY","__KEY","__KEY","__KEY","__LOCAL_KEY","__LOCAL_KEY","__LOCAL_KEY","__LOCAL_KEY","__LOCAL_KEY","__LOCAL_KEY","__getit","__getit","__getit","__getit","__getit","__getit","__init","__init","__init","__init","__init","__init","__rolling_hash_local_key","__rolling_hash_local_key","__rolling_hash_local_key","__rolling_hash_local_key","__rolling_hash_local_key","__rolling_hash_local_key","_marker","_marker","_marker","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","concat","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","default","ensure","ensure","ensure","ensure","ensure","ensure","ensure","ensure_pow","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash_range","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hashed","hashed","impl_rolling_hasher","init","init","init","init","init","init","init","init_with_time","init_with_time","into","into","into","into","into","into","into","into","into","into","len","length","length","longest_common_prefix","mul1_add","muln_add","muln_sub","new","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","range","range","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_range","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","SuffixArray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","longest_common_prefix_array","new","pat","rank","sa","to_owned","try_from","try_into","type_id","Zarray","borrow","borrow_mut","clone","clone_into","fmt","from","index","into","new","search","to_owned","try_from","try_into","type_id","z","AsTotalOrd","AssociatedValue","ByteWithBase","Bytes","BytesWithBase","CharTools","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandRange","RandomSpec","Scanner","ScannerIter","SerdeByteStr","SimuratedAnnealing","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","__local_key","_marker","_marker","_marker","_marker","_marker","_marker","as_total_ord","assign_ops","associated_value","capture","char_tools","chmax","chmin","coding","data","deserialize","end_temp","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","get_distinct_mut","heuristics","inner","is_maximize","iter","iter_count","iter_print","iter_print","iterable","log_table","main","map","minmax","mlambda","mscan","now","ord_tools","partial_ignored_ord","pat","rand","rand","random","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","rng","scan","scan","scan_value","scanner","serialize","size","slice","spec","start_temp","temperture","time","time_limit","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_upper_alphabetic_number","totalord","unescape","update_interval","y","AssociatedValue","T","__local_key","get","get","modify","modify","replace","replace","set","set","with","with","CharTools","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_upper_alphabetic_number","BitReader","BitWriter","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","HuffmanTree","Leaf","Node","SerdeByteStr","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes","bytes","cmp","decode","default","deserialize","deserialize_from_bytes","deserialize_from_bytes","eq","escape","escape_branch","fmt","fmt","fmt","from","from","from","from_bytestring","huffman_coding","huffman_decoding","impl_serdebytestr_num","impl_serdebytestr_seq","impl_serdebytestr_tuple","into","into","into","into_inner","last","make_table","new","output_tree","partial_cmp","pos","push_bit","push_u64","push_u8","read_bit","read_tree","read_u8","serialize","serialize_bytestr","serialize_bytestr","to_bytestring","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unescape","w","LOG_TABLE_SIZE","SEED","SimuratedAnnealing","borrow","borrow_mut","default","end_temp","fmt","from","into","is_accepted","is_end","is_maximize","iter_count","log_table","minimize","new","now","rand","set_end_temp","set_start_temp","set_time_limit","set_update_interval","start_temp","temperture","time","time_limit","try_from","try_into","type_id","update_interval","IterPrint","iter_print","iter_print_tuple_impl","dg","main","main_macros","pp","sc","sv","BTreeMapExt","BTreeSetExt","first","first","first_mut","get_next","get_next","get_next_back","get_next_back","get_next_back_excluded","get_next_back_excluded","get_next_back_excluded_mut","get_next_back_mut","get_next_excluded","get_next_excluded","get_next_excluded_mut","get_next_mut","last","last","last_mut","pop_first","pop_first","pop_first_if","pop_first_if","pop_last","pop_last","pop_last_if","pop_last_if","pop_next","pop_next","pop_next_back","pop_next_back","pop_next_back_excluded","pop_next_back_excluded","pop_next_back_excluded_if","pop_next_back_excluded_if","pop_next_back_if","pop_next_back_if","pop_next_excluded","pop_next_excluded","pop_next_excluded_if","pop_next_excluded_if","pop_next_if","pop_next_if","PartialOrdExt","chmax","chmin","minmax","PartialIgnoredOrd","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","into","partial_cmp","to_owned","try_from","try_into","type_id","LOWER_MASK","NotEmptySegment","RandIter","RandRange","RandomSpec","UPPER_MASK","Xorshift","borrow","borrow_mut","clone","clone_into","default","fmt","from","gen","gen_bool","gen_iter","into","new","rand","rand64","randf","random_generator","rands","shuffle","time","to_owned","try_from","try_into","type_id","y","NotEmptySegment","NotEmptyStep64","RandIter","RandRange","RandomSpec","_marker","_marker","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","data","eq","eq","fmt","fmt","fmt","forward_unchecked","from","from","from","hash","hash","into","into","into","into_iter","new","next","partial_cmp","partial_cmp","rand","rand","rand","rand_iter","rand_iter","randint_uniform","random_spec_primitive_impls","random_spec_tuple_impls","rng","spec","step64_impls","steps_between","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ByteWithBase","Bytes","BytesWithBase","CharWithBase","Chars","CharsWithBase","Collect","IterScan","MarkedIterScan","Output","Output","Scanner","ScannerIter","SizedCollect","Splitted","Usize1","_marker","_marker","_marker","_marker","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","inner","into","into","into","into","into","into","into","into","into","into_iter","iter","iter_scan_impls","iter_scan_tuple_impl","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","new","new","next","pat","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","scan","scan","scan","size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","GetDistinctMut","Output","get_distinct_mut","AsTotalOrd","TotalOrd","as_total_ord","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","Two","_marker","depth","depth","dp","dst","eidx","ep","epos","euler","euler_tour","generator","graph","graph","graph","graph","head","heavy_light_decomposition","impl_lcam","par","par","rerooting","rng","root","rooting","rv","set_depth","size","tree_center","tree_dp","tree_hash","tree_order","vidx","vidx","vidx","vpos","vsize","vtrace","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","_marker","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","depth","depth","dst","edge_tour","eidx","epos","euler","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","gen_lca","graph","graph","graph","impl_lcam","into","into","into","into","into","into","lca","length","length","length","new","new","new","operate","par","path_query","path_update","path_vertex_tour","query","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vertex_tour","vidx","vidx","vpos","vsize","vsize","vtrace","DEPTH","__KEY","__getit","__init","MixedTree","PathTree","PruferSequence","StarTree","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from_prufer_sequence","into","into","into","into","rand","rand","rand","rand","rand_inner","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","HeavyLightDecomposition","borrow","borrow_mut","build","dfs_hld","dfs_size","from","head","into","lca","new","par","query","query_noncom","size","try_from","try_into","type_id","update","vidx","ReRooting","add_root","add_subroot","borrow","borrow_mut","clone","clone_into","dfs","dp","efs","eidx","ep","fmt","from","graph","into","merge","new","reidx","rerooting","rooting","to_owned","try_from","try_into","type_id","One","TreeCenter","Two","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash","into","to_owned","try_from","try_into","type_id","dfs","dfs","MASK30","MASK31","MASK61","MOD","TreeHasher","borrow","borrow_mut","default","fmt","from","hash","hash_rec","hash_rooted","into","mersenne_mod","mersenne_mul","mersenne_mul_mod","new","rng","rv","time_seeded","try_from","try_into","type_id","with_seed"],"q":["competitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebra::magma","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebra::monoid_action","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebra::monoid_action::monoid_action_impls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebra::operations","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebra::operations::additive_operation_impl","","","","","","","","","","","","","competitive::algebra::operations::bitand_operation_impl","","","","","","","","","","","","","competitive::algebra::operations::bitor_operation_impl","","","","","","","","","","","","","competitive::algebra::operations::bitxor_operation_impl","","","","","","","","","","","","","","competitive::algebra::operations::bottom2_operation_impl","","","","","","","","","","","competitive::algebra::operations::concatenate_operation","","","","","","","","","","","","","","","","","","","","","","competitive::algebra::operations::counting_operation_impl","","","","","","","","","","","competitive::algebra::operations::find_majority_operation_impl","","","","","","","","","","","competitive::algebra::operations::first_operation_impl","","","","","","","","","","","competitive::algebra::operations::last_operation_impl","","","","","","","","","","","competitive::algebra::operations::linear_operation_impl","","","","","","","","","","","","competitive::algebra::operations::max_operation_impl","","","","","","","","","","","competitive::algebra::operations::min_operation_impl","","","","","","","","","","","competitive::algebra::operations::multiplicative_operation_impl","","","","","","","","","","","","","competitive::algebra::operations::permutation_operation_impl","","","","","","","","","","","competitive::algebra::operations::reverse_operation_impl","","","","","","","","","","","","competitive::algebra::operations::top2_operation_impl","","","","","","","","","","","competitive::algebra::operations::tuple_operation_impl","competitive::algebra::ring","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebra::ring_operations","","","","competitive::algebra::ring_operations::gf2_63","","","","","","","","","","","competitive::algebra::ring_operations::mersenne61","","","","","","","","","","","","","","","","","","","","","","competitive::algorithm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algorithm::baby_step_giant_step","","","","","","","","","","","","","","competitive::algorithm::binary_search","","","","","","","","","","","","","","","competitive::algorithm::bitdp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algorithm::chromatic_number","","","","","","","","","","","","","","","","","competitive::algorithm::combinations","","","","","","","","","","","","","","","competitive::algorithm::convex_hull_trick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algorithm::esper","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algorithm::impartial_game","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algorithm::mo","","","","","","","competitive::algorithm::other","","competitive::algorithm::partisan_game","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algorithm::rho_path","","","","","","","","","","","","","","competitive::algorithm::slide_minimum","","","","","","","","","","","","","","","","","","","competitive::algorithm::sort","","","","","","","","","","","","","","","","","","","","","","competitive::algorithm::sqrt_decomposition","","","","","","","","","","","","","","","","","","","","","","","","competitive::algorithm::ternary_search","","","","","","","","competitive::algorithm::xorbasis","","","","","","","","","","","","","","","","","","","","competitive::algorithm::zero_sum_game","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algorithm::zeta_transform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","competitive::combinatorial_optimization::knapsack_problem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::combinatorial_optimization::largest_pattern","","","competitive::combinatorial_optimization::levenshtein_distance","competitive::combinatorial_optimization::lexicographical_subsequence","","","","","","","","","","","","","","","","competitive::combinatorial_optimization::longest_increasing_subsequence","","","","","","","","","","","","","","","","","","competitive::data_structurecompetitive::data_structure::accumulate","","","","","","","","","","","","","competitive::data_structure::allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::automatoncompetitive::data_structure::binary_indexed_tree","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::binary_indexed_tree_2d","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::bit_vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::bitset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::compress","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::compressed_binary_indexed_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::compressed_segment_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::counter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::disjoint_sparse_table","","","","","","","","","","","","","","","","","","","","competitive::data_structure::fibonacci_hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::kdtree","","","","","","","","","","","","","competitive::data_structure::lazy_segment_tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::lazy_segment_tree_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::line_set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::merging_union_find","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::range_ap_add","","","","","","","","","","","","","","","","","competitive::data_structure::range_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::segment_tree","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::segment_tree_map","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::sliding_winsow_aggregation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::slope_trick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::splay_tree","","","","","competitive::data_structure::splay_tree::node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::splay_tree::node::marker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::splay_tree::sequence","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::splay_tree::sized_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::trie","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::union_find","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::wavelet_matrix","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure::weighted_union_find","","","","","","","","","","","","","","","","","","","","","","","","competitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::geometry::approx","","","","","","","","","","","","","","","","","","","","","","competitive::geometry::ccw","","","","","","","","","","","","","","","","","","","","","","","competitive::geometry::circle","","","","","","","","","","","","","","","","","","competitive::geometry::closest_pair","","competitive::geometry::line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::geometry::polygon","","competitive::graphcompetitive::graph::adjacency_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::bipartite_matching","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::closure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::dulmage_mendelsohn_decomposition","competitive::graph::edge_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::graph_base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::grid","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::low_link","","","","","","","","","","","","","","","competitive::graph::maximum_flow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::minimum_cost_flow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::project_selection_problem","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::shortest_path","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::sparse_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::strongly_connected_component","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::two_satisfiability","","","","","","","","","","","","","","","","","","","","","competitive::math","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::math::berlekamp_massey","competitive::math::convolve_steps","","","","","","","","","competitive::math::discrete_logarithm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::math::factorial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::math::fast_fourier_transform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::math::floor_sum","","","","competitive::math::formal_power_series","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::math::formal_power_series::formal_power_series_nums","","","competitive::math::gcd","","","","","","","","","competitive::math::lagrange_interpolation","","competitive::math::matrix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::math::miller_rabin","","","","","","","","competitive::math::mod_sqrt","competitive::math::number_theoretic_transform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::math::nums","","competitive::math::polynomial","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::math::prime","","","","","","","","","","","","","","","","","","competitive::math::prime_factors","","","","competitive::math::prime_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::math::prime_table","","","","","","","","","","","","","","","","","","","","","competitive::math::primitive_root","","competitive::numcompetitive::num::barrett_reduction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num::bounded","","","","","","","","","","","","","competitive::num::complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num::discrete_steps","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num::double_double","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num::floatcompetitive::num::integercompetitive::num::mint","","","","","","competitive::num::mint::mint_base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num::mint::mint_basiccompetitive::num::mint::montgomery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num::mint_basic","","","","","","","","","","","","","","competitive::num::montgomery","","","","","","","","","","","","","competitive::num::quad_double","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num::rational","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num::zero_one","","","","","","","","","","","","","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string::knuth_morris_pratt","","","","","","","","","","","","","","","","competitive::string::rolling_hashcompetitive::string::suffix_array","","","","","","","","","","","","","","","","","","competitive::string::z_algorithm","","","","","","","","","","","","","","","","competitive::tools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tools::associated_value","","","","","","","","","","","","","competitive::tools::char_tools","","","","","","","","","competitive::tools::coding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tools::heuristics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tools::iter_print","","","competitive::tools::main","","","","","","competitive::tools::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tools::ord_tools","","","","competitive::tools::partial_ignored_ord","","","","","","","","","","","","","","","","competitive::tools::random","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tools::random::random_generator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tools::scanner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tools::slice","","","competitive::tools::totalord","","","","","","","","","","","","","","","","","","","competitive::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tree::euler_tour","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tree::euler_tour::impl_lcam","","","","competitive::tree::generator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tree::heavy_light_decomposition","","","","","","","","","","","","","","","","","","","","competitive::tree::rerooting","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tree::tree_center","","","","","","","","","","","","","","","","competitive::tree::tree_dp","","competitive::tree::tree_hash","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","algebra","algorithm","build automaton","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","Implement <code>AssociatedValue</code>.","","","","Print expressions with a separator.","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","string algorithems","","","tree algorithems","commutative group","commutative monoid","","","$+,\\\\times$","","$+$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","","Find majority(strict) of a sequence.","retain the first element","","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$a$ where $a \\\\circ x = e$","","algebraic traits","","","","","","","","","binary operaion: $\\\\circ$","binary operaions","","","","","","","identity element: $e$","","commutative group","commutative monoid","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","binary operaion: $T \\\\circ T \\\\to T$","associative binary operation and an identity element","associative binary operation","type of operands: $T$","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","$a$ where $a \\\\circ x = e$","","","binary operaion: $\\\\circ$","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$+$","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","&amp;","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","|","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","^","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Find majority(strict) of a sequence.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","retain the first element","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","retain the last element","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","binary operation to select larger element","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","binary operation to select smaller element","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","$\\\\times$","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","$+,\\\\times$","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","multiplicative operaion: $+$","multiplicative operaion: $+$","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","additive identity: $0$","additive identity: $0$","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","binary search helper","","","","","","","","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","","","","","ternary search helper","Basis of xor operation.","","","","","","","","","","","","","","","","","(reduced basis, coordinates, inserted basis)","","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","return between two elements","","","","","","","","","middle point of section","","","","","","","Divide into 3 sections","","","","","","","Returns the first index that satisfies a predicate. if not …","","","","","","Returns the last element that satisfies a predicate.","","","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","","the end condition of binary search","the end condition of ternary search","","","","","","","like <code>(left..=right).min_by_key(f)</code>","","","","","","","fast zeta transform and fast mobius transform","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","binary search helper","binary search for slice","binary search for monotone segment","Returns the first element that satisfies a predicate.","return between two elements","","","","","Returns the first index that satisfies a predicate. if not …","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","the end condition of binary search","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The smallest number of colors needed to color a graph.","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","return: [(elem, length)]","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","","","build rho path","rho path that index of rho path","","","Returns the argument unchanged.","","get i-th value of rho path","Calls <code>U::from(self)</code>.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","ternary search helper","","","","middle point of section","Divide into 3 sections","the end condition of ternary search","like <code>(left..=right).min_by_key(f)</code>","Basis of xor operation.","(reduced basis, coordinates, inserted basis)","Return coordinate if element can be consisted by current …","","","","","","Return coordinate if element can be consisted by current …","","Returns the argument unchanged.","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Create a empty space.","Return (reduced basis, coordinate). Coordinate means if …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","get k-th bit","","","","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","[(bit, sum)]","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","Return accumlate of [0, k)","","","","","Return fold of [l, r)","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fold [0, k]","fold [0, k)","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","fold [0, i] x [0, j]","fold [0, i) x [0, j)","","","","","","","0-indexed [i1, i2) x [j1, j2)","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","","","","","","","[(bit, sum)]","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Returns the first index that satisfies a accumlative …","","","","","","Returns the last index that satisfies a accumlative …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Returns the first index that satisfies a accumlative …","","","","","","Returns the last index that satisfies a accumlative …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","add a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","A map to control intervals that have same values.","A set to control intervals.","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","Operate and consume range-value pairs in range.","Operate and consume in range.","Operate and consume range-value pairs in range when no …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns a reference to the value corresponding to the key.","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","Inserts values into the specified range.","Inserts into the specified range.","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Remove values contained in the range.","Remove items contained in the range.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Returns the first index that satisfies a accumlative …","","Returns the last index that satisfies a accumlative …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Returns the first index that satisfies a accumlative …","","Returns the last index that satisfies a accumlative …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","f(x) += |x-a|","f(x) += a","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","right to left accumulated minimum","left to right accumulated minimum","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","argmin_x f(x)","min f(x)","","Create empty","","","","","","","","f’(x) := f(x-a)","f’(x) := min f(y) (x-a &lt;= y &lt;= x-b)","","","","","Create valley","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>cmp(key)</code>: <code>Ordering</code> between splaying and <code>key</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","get k-th value","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","get k-th smallest value in range","get k-th smallest value out of range","the number of val in range","the number of value less than val in range","the number of valrange in range","index of k-th val","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","a–b-vc","a–b-^c","a–c–b","c–a–b","a–b–c","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Roweturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","Return the number of edges.","","","Returns the argument unchanged.","Returns the argument unchanged.","Construct graph from edges.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","tarjan","","","","Construct empty graph.","","","","","","","","Return an iterator over graph vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return (flow, cost).","Return (flow, cost).","","","","","","","","","","","","","","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","Return a slice of adjacency vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the number of edges.","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct graph from edges.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","(p_x = f) | (p_y = g)","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","Sum of Floor of Linear mod 2^64","Sum of Floor of Linear mod 2^64","","","","binary gcd","","[(hcn, #divisor)]","","","","","","","","","return: (y,z)","","","","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","a^x ≡ b (mod p^e)","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","a^x ≡ b (mod n), a has order p^e","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e, c==1","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Sum of Floor of Linear mod 2^64","Sum of Floor of Linear mod 2^64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","binary gcd","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","http://miller-rabin.appspot.com/","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","return: (y,z)","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","[(hcn, #divisor)]","Calls <code>U::from(self)</code>.","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","modint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Trait for max/min bounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","","extended_gcd(a,b): ax + by = g = gcd(a,b)","Trait for basic primitive integer operations.","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationseturns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","m","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","n^1 mod m","","","","","n^2 mod m","","","","","n^3 mod m","","","","","","","","","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","m","n^1 mod m","n^2 mod m","n^3 mod m","ref: https://na-inet.jp/na/qd_ja.pdf","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","","","","","","","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","","","","","","","Flush this output stream, ensuring that all intermediately …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","","Print expressions with a separator.","","","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","","Trait for spec of generating random value.","","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","","","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","","","","","","","","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","Trait for a modifiable value associated with a type.","Type of value.","","","","","","","","","","","","","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","<code>iter_print!</code> for buffered stderr. Do nothing in release …","","","<code>iter_print!</code> for buffered stdout.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","Trait for spec of generating random value.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Return a random value.","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","implement Ord by PartialOrd","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","dp[v]: result of v-rooted tree","","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","","","","","dynamic programming on all-rooted trees","","","rooting(data, vid, (Optional)eid): add root node(vid), …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","dynamic programming on all-rooted trees","","","","","","","","dp[v]: result of v-rooted tree","","","ep[e]: result of e-subtree, if e &gt;= n then …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","rooting(data, vid, (Optional)eid): add root node(vid), …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,314,314,0,315,0,314,314,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,314,0,0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,315,0,0,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,314,314,340,341,4,0,342,4,0,6,6,6,6,0,0,6,6,316,0,0,0,314,6,6,4,343,344,0,0,0,0,0,0,0,0,0,0,0,316,0,342,343,343,316,316,316,70,70,316,316,342,342,343,343,343,314,314,314,314,314,0,314,314,314,314,314,314,314,314,314,314,314,314,314,314,0,314,314,314,0,0,0,0,0,0,0,0,0,318,319,320,321,322,323,324,318,319,320,321,322,323,324,6,318,319,320,321,322,323,324,6,4,4,318,319,320,321,322,323,324,4,6,318,319,320,321,322,323,324,4,6,4,4,4,6,4,6,4,6,318,319,320,321,322,323,324,4,6,318,319,320,321,322,323,324,4,6,4,6,6,6,6,6,6,4,6,6,318,319,320,321,322,323,324,6,6,6,4,6,318,319,320,321,322,323,324,4,6,318,319,320,321,322,323,324,4,6,318,319,320,321,322,323,324,4,6,4,4,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,329,329,329,329,329,329,329,329,329,329,329,329,0,0,332,340,332,332,332,332,332,332,332,332,332,0,0,333,341,333,333,333,333,333,333,333,333,333,0,0,334,334,334,334,334,334,334,334,334,334,334,344,0,338,338,338,338,338,338,338,338,338,338,0,0,345,346,345,346,345,346,345,346,345,346,345,346,345,346,345,346,345,346,345,346,0,335,335,335,335,335,335,335,335,335,335,0,339,339,339,339,339,339,339,339,339,339,0,327,327,327,327,327,327,327,327,327,327,0,328,328,328,328,328,328,328,328,328,328,0,331,331,331,331,331,331,331,331,331,331,331,0,325,325,325,325,325,325,325,325,325,325,0,326,326,326,326,326,326,326,326,326,326,0,330,330,330,330,330,330,330,330,330,330,330,330,0,347,347,347,347,347,347,347,347,347,347,0,336,336,336,336,336,336,336,336,336,336,336,0,337,337,337,337,337,337,337,337,337,337,0,0,315,0,315,0,0,315,317,315,315,317,317,348,348,317,317,348,348,315,315,349,349,315,315,349,349,317,317,317,315,315,0,0,0,0,0,350,350,350,350,350,350,350,350,350,350,351,0,0,352,351,352,351,352,351,352,351,352,352,351,352,351,352,351,352,351,352,351,353,354,0,0,0,0,0,0,0,0,0,0,0,0,355,356,357,354,0,0,0,0,0,357,0,0,0,0,0,0,0,355,357,356,0,0,0,354,0,0,0,0,0,29,31,35,39,358,359,40,41,25,26,353,14,0,36,0,0,0,14,360,360,354,35,35,0,25,26,0,0,16,17,25,26,22,33,0,29,31,39,32,25,26,361,0,354,354,362,362,362,362,31,32,27,30,38,27,363,0,20,353,33,16,17,360,360,364,0,20,362,357,362,357,364,355,356,30,0,0,0,361,362,362,40,41,353,361,0,33,361,0,38,363,364,33,0,0,0,0,0,0,354,354,33,14,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,361,363,0,0,0,0,361,361,361,363,0,0,0,0,0,15,16,17,15,16,17,15,16,17,15,16,17,15,16,17,15,15,15,15,16,17,15,16,17,15,16,17,16,17,15,15,16,17,16,17,15,15,15,15,15,16,17,15,16,17,15,16,17,15,16,17,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,362,362,362,362,362,0,362,0,362,362,0,0,0,0,22,24,22,24,22,24,24,22,24,22,24,22,22,24,24,22,24,22,24,24,22,24,22,22,24,24,22,24,22,24,22,24,22,24,0,0,0,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,25,25,26,25,25,26,25,26,25,26,25,26,0,0,0,355,0,355,29,29,27,29,27,27,27,27,29,27,29,27,27,27,29,27,29,27,355,29,27,29,27,29,27,29,27,353,0,353,353,353,353,353,0,0,0,357,0,0,0,0,357,357,31,31,30,31,30,30,30,30,31,30,31,30,31,30,31,30,31,30,357,31,357,31,30,30,30,31,30,31,30,31,30,0,32,32,32,32,32,32,32,32,32,32,32,32,32,0,33,33,33,33,33,33,33,33,33,33,33,33,33,0,33,33,33,33,0,0,34,34,0,360,360,34,34,34,0,34,34,0,0,360,360,34,34,34,34,34,354,354,0,0,354,35,35,35,354,35,35,35,354,354,35,35,354,354,35,35,35,35,354,354,0,0,0,0,364,364,364,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,356,0,356,0,0,0,39,39,38,39,38,38,38,38,39,38,39,38,38,39,38,39,38,356,39,38,38,39,38,39,38,39,38,0,0,0,0,0,0,358,359,40,41,358,359,40,41,358,359,40,41,358,359,40,41,358,359,40,41,358,359,40,41,358,359,40,41,40,41,40,41,40,41,358,359,40,41,358,359,40,41,358,359,40,41,358,359,40,41,0,0,0,0,0,0,46,46,44,45,49,50,47,49,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,43,46,44,45,46,47,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,43,46,43,47,44,45,44,45,46,44,45,44,45,44,44,45,46,47,43,44,45,46,47,43,43,47,44,45,44,45,46,44,45,44,45,44,44,45,46,47,43,47,44,43,44,45,46,47,44,45,46,47,47,44,45,46,47,43,44,45,46,47,43,44,45,46,47,43,44,45,46,47,43,43,43,0,0,0,0,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,0,365,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,365,0,0,0,0,0,0,0,0,78,79,59,60,61,365,155,0,128,128,142,148,366,0,0,0,127,126,0,0,68,71,155,0,78,73,0,114,152,152,53,0,78,79,0,0,0,52,103,72,75,76,119,366,66,60,61,156,0,66,62,63,0,59,60,61,59,60,61,59,60,61,127,126,71,367,367,365,0,0,0,128,154,142,148,0,81,82,110,120,121,114,0,128,68,105,106,124,125,66,365,152,62,63,156,153,53,0,0,128,142,148,105,106,124,125,0,0,79,62,63,367,73,0,0,0,72,91,154,368,368,368,368,0,125,0,53,71,0,0,0,52,52,52,52,52,52,52,52,52,52,52,52,0,0,0,0,366,53,54,53,54,53,54,53,366,53,54,53,54,53,53,54,53,54,53,54,53,53,53,54,53,54,53,54,53,53,365,0,0,0,0,0,0,0,0,0,0,0,365,0,0,59,60,61,365,56,57,58,59,60,61,62,63,64,65,66,56,57,58,59,60,61,62,63,64,65,66,56,57,58,59,60,61,62,63,64,65,66,56,57,58,59,60,61,62,63,64,65,66,56,57,58,59,60,61,62,63,64,65,64,65,66,60,61,365,365,66,62,63,66,56,57,58,59,60,61,62,63,64,65,59,60,61,59,60,61,59,60,61,66,66,56,57,58,59,60,61,62,63,64,65,62,63,62,63,0,365,56,57,58,59,60,61,62,63,64,65,66,56,57,58,59,60,61,62,63,64,65,62,63,62,63,66,66,66,59,60,61,64,65,365,56,57,58,59,60,61,62,63,64,65,62,63,66,66,62,63,66,66,368,368,368,368,66,56,57,58,59,60,61,62,63,64,65,66,56,57,58,59,60,61,62,63,64,65,66,56,57,58,59,60,61,62,63,64,65,66,56,57,58,59,60,61,62,63,64,65,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,155,72,155,72,72,72,72,72,72,72,72,72,0,72,155,155,155,155,72,155,155,72,155,155,72,72,72,72,72,72,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,0,0,75,76,75,76,75,76,75,76,75,76,75,76,75,76,75,76,367,75,76,367,75,76,75,76,367,75,76,75,76,75,76,75,76,75,76,0,0,0,0,0,0,78,78,78,78,78,78,78,77,78,77,78,77,78,77,78,78,78,77,78,77,78,78,78,78,0,78,77,78,78,78,78,78,77,78,77,78,77,78,77,78,78,78,78,0,0,0,0,0,0,79,79,80,79,80,79,80,79,80,79,79,79,80,79,79,79,79,79,80,79,79,79,79,0,79,80,79,79,79,79,79,79,80,79,80,79,80,79,80,79,79,79,79,0,0,81,82,81,82,81,81,82,81,82,81,82,81,82,81,82,81,82,81,81,81,82,82,81,82,81,82,81,81,82,82,81,82,81,82,81,82,81,82,81,82,81,82,81,82,81,82,82,81,82,81,82,81,82,81,82,81,82,81,82,81,82,81,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,93,92,93,0,0,0,0,0,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,92,93,0,103,103,103,103,103,103,103,103,103,103,103,103,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,0,0,0,107,107,109,108,107,107,107,110,109,108,107,110,109,108,107,110,109,108,107,110,109,108,107,109,108,107,110,109,108,107,0,109,108,107,110,109,108,107,110,110,109,108,107,110,110,107,110,109,108,107,107,110,109,108,107,110,109,108,107,110,109,108,107,110,109,108,107,110,115,0,115,0,0,114,114,115,116,114,115,116,114,115,116,115,116,116,114,114,114,115,116,114,115,116,114,115,116,115,114,114,114,116,114,114,114,116,115,116,114,115,116,114,115,116,114,115,116,114,0,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,0,0,120,121,120,121,120,121,120,121,120,121,121,120,120,121,120,121,120,120,121,120,121,120,121,120,121,120,120,121,121,120,120,121,120,121,120,121,120,121,120,121,120,120,120,121,120,121,120,121,120,121,120,121,120,121,120,121,120,121,120,121,120,120,0,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,0,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,0,0,126,127,126,127,126,127,126,127,126,127,126,127,126,127,126,127,126,127,126,126,127,126,127,126,127,126,127,127,126,127,126,127,126,126,127,126,127,126,127,126,127,126,127,126,127,126,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,0,0,0,0,0,0,0,0,0,369,0,0,0,0,370,139,140,130,0,129,130,136,139,140,131,130,129,136,130,139,140,131,130,130,129,136,370,130,130,130,130,130,131,130,130,129,136,136,129,136,0,139,140,131,130,129,136,130,136,136,370,130,129,130,129,130,129,130,129,139,140,131,130,129,136,130,130,130,129,130,130,131,129,0,130,139,140,131,130,129,136,130,136,136,130,129,130,130,130,130,131,129,136,129,136,129,136,130,130,129,130,129,369,139,140,129,129,129,129,129,129,130,130,129,136,130,370,130,139,140,131,130,129,136,139,140,131,130,129,136,139,140,131,130,129,136,0,0,0,0,0,132,137,135,134,133,132,137,135,134,133,132,137,135,134,133,132,137,135,134,133,132,137,135,134,133,132,137,135,134,133,132,137,135,134,133,0,0,0,0,0,0,138,144,145,146,145,146,143,142,143,138,144,145,146,142,143,138,144,145,146,142,138,142,142,145,146,143,142,142,143,138,144,145,146,142,142,138,144,142,143,138,144,145,146,142,142,143,143,142,142,142,144,145,146,142,142,138,142,138,142,143,138,142,142,142,142,142,143,144,145,146,138,143,138,144,145,146,142,143,138,144,145,146,142,143,138,144,145,146,142,142,138,142,0,0,0,0,0,147,150,151,148,147,150,151,148,149,147,150,151,148,149,147,148,148,148,149,147,150,151,148,149,148,148,148,147,151,148,147,150,151,148,149,149,148,148,149,150,149,148,148,149,149,150,151,148,149,149,148,148,148,148,148,148,148,150,151,147,150,151,148,149,147,150,151,148,149,147,150,151,148,149,148,0,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,0,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,0,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,0,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,0,0,0,0,160,160,0,0,160,160,160,0,0,371,371,161,0,0,0,0,0,0,0,162,163,162,163,0,161,0,0,0,0,371,371,158,158,158,158,158,158,158,158,158,0,158,158,158,158,158,158,0,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,0,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,0,0,0,0,162,163,162,163,162,163,162,163,162,163,163,162,163,163,162,163,162,163,162,163,162,163,163,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,162,163,0,0,372,373,374,372,373,374,375,376,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,377,378,0,379,0,0,0,0,0,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,381,0,0,0,0,0,0,0,382,383,0,0,0,384,0,0,0,0,385,168,173,176,183,184,200,205,206,186,164,381,172,173,372,373,374,0,192,375,376,0,192,194,195,197,198,0,210,380,386,385,199,199,197,198,210,195,168,198,0,0,0,379,200,174,194,197,164,211,378,164,380,380,387,168,176,205,165,388,183,192,165,195,198,210,0,0,0,197,198,186,201,381,183,184,195,169,169,169,195,192,210,0,183,184,169,0,0,0,381,199,192,210,0,198,198,198,0,200,169,169,0,381,0,199,164,0,201,0,199,0,384,383,210,385,385,173,389,168,172,176,200,205,206,165,174,194,197,164,211,390,186,0,0,0,168,165,165,165,168,166,165,168,166,165,166,165,166,165,166,166,165,168,166,168,165,166,165,168,166,165,165,166,166,168,166,165,168,168,166,165,166,166,166,165,168,166,165,168,166,165,168,166,165,165,168,165,0,0,171,171,169,0,169,171,169,171,169,171,169,171,0,169,169,171,169,169,169,171,169,169,169,169,169,169,169,169,169,169,169,169,169,169,171,169,171,169,171,169,171,0,0,173,172,173,172,173,172,173,172,173,172,173,172,173,172,173,172,173,172,173,172,173,172,173,172,173,172,173,172,173,172,173,172,173,173,172,172,172,173,0,0,0,176,176,174,176,174,174,174,174,174,174,176,174,176,174,174,174,176,174,174,174,176,176,174,174,176,174,176,174,176,174,174,174,176,174,372,373,374,372,373,374,375,376,0,0,0,0,0,0,0,0,0,377,378,0,379,0,0,0,0,380,0,0,382,383,0,0,0,384,0,0,0,0,385,183,184,372,373,374,375,177,178,376,183,184,179,180,177,178,183,184,179,180,177,178,179,180,177,178,179,180,177,178,179,180,177,178,380,385,379,378,180,178,380,380,380,380,179,180,177,178,387,388,179,180,177,178,183,184,179,179,179,180,180,177,177,178,178,183,179,180,177,178,183,184,179,180,177,178,183,184,183,184,177,178,183,184,183,184,183,184,179,180,177,178,179,180,177,178,183,184,179,180,177,178,183,184,179,180,177,178,183,184,179,180,177,178,384,383,179,180,177,178,385,385,385,385,389,390,0,0,190,190,190,0,0,0,0,0,190,190,190,190,190,186,191,187,186,186,186,186,186,186,186,186,186,189,190,185,188,191,187,186,189,190,185,188,191,187,186,189,190,185,188,191,187,186,189,190,185,188,191,187,190,186,191,191,187,190,190,186,186,189,190,185,188,191,187,186,189,190,185,188,191,187,187,190,186,186,189,190,185,188,191,187,189,191,187,186,190,186,186,186,189,191,191,187,190,186,189,190,185,188,191,187,186,189,190,185,188,191,187,186,189,190,185,188,191,187,186,189,190,185,188,191,187,186,186,186,186,186,186,189,187,189,0,192,192,192,192,192,192,192,192,192,192,192,192,192,192,0,0,194,195,194,195,194,195,194,195,194,195,195,194,195,194,195,195,195,194,194,194,195,194,195,194,195,195,194,195,195,195,195,195,195,194,194,195,194,195,194,195,194,195,194,0,0,197,198,197,198,197,198,197,198,197,198,197,197,197,198,198,198,197,197,197,198,197,198,197,198,198,197,198,197,198,198,198,197,198,198,198,197,197,198,197,198,197,198,197,0,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,0,0,0,0,0,381,381,391,392,393,394,394,394,394,394,394,394,394,391,392,393,391,392,393,394,394,394,394,391,392,393,381,391,392,393,391,392,393,381,391,392,393,381,391,392,393,391,392,393,391,392,393,391,392,393,394,394,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,205,206,164,200,164,164,164,164,164,200,205,206,202,203,204,201,164,200,205,206,202,203,204,201,164,200,164,164,202,203,204,201,164,202,203,204,201,164,202,203,204,201,164,386,202,203,204,164,201,193,164,164,164,200,164,164,201,164,164,164,202,203,204,201,164,205,164,164,202,203,204,201,164,164,200,205,206,202,203,204,201,164,164,202,203,204,201,201,200,205,206,202,203,204,201,164,205,206,200,205,206,201,200,202,203,204,201,200,193,164,164,201,207,193,196,164,164,164,202,203,204,201,164,164,193,164,193,164,193,164,193,164,164,193,164,200,205,206,202,203,204,201,164,200,205,206,202,203,204,201,164,200,205,206,202,203,204,201,164,164,164,164,201,164,164,164,200,205,206,164,164,164,193,164,193,164,0,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,0,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,0,0,0,0,0,395,0,0,0,0,0,0,0,0,0,0,0,0,0,395,225,0,0,0,220,0,0,225,227,233,0,0,0,0,0,0,0,0,219,220,0,0,0,0,0,0,0,0,0,0,0,219,220,395,0,0,0,0,395,0,0,240,0,0,0,0,0,0,0,0,395,0,0,220,221,221,0,220,0,0,0,0,0,0,240,0,0,227,221,396,239,242,395,0,0,395,395,395,395,395,395,395,395,0,0,0,0,0,0,0,0,216,218,217,216,218,217,216,218,217,0,216,217,0,0,0,216,218,217,216,218,217,216,217,0,216,218,217,216,218,217,217,217,218,218,218,218,0,0,218,217,216,0,0,216,218,217,216,218,217,216,218,217,0,0,0,219,220,221,219,220,221,220,219,220,221,219,220,221,219,220,220,219,220,220,219,220,221,219,220,221,219,219,220,221,219,221,219,220,219,219,220,221,220,221,221,219,221,220,221,221,219,220,221,219,220,221,219,220,221,219,220,221,0,0,0,0,0,0,397,0,398,397,398,397,397,0,398,397,0,398,397,398,398,398,398,398,397,398,397,398,397,0,0,0,0,0,0,0,0,0,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,0,0,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,396,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,399,229,399,229,229,229,229,229,229,399,229,229,0,399,229,229,399,399,399,399,399,399,229,229,400,229,399,399,399,229,399,229,399,229,0,0,0,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,0,233,233,233,233,233,233,233,233,0,239,239,239,239,0,239,239,239,0,239,0,239,239,239,239,239,239,0,0,0,0,0,0,240,241,240,241,240,241,240,241,240,240,240,240,241,240,241,240,241,241,240,240,241,240,241,240,240,240,241,240,240,240,241,240,240,241,240,241,240,241,0,0,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,0,0,0,0,0,0,401,0,0,401,401,402,0,401,401,401,401,401,401,401,401,401,0,0,0,401,19,0,401,401,401,401,401,401,401,401,401,401,401,401,0,0,0,401,401,0,401,0,401,0,0,401,0,0,403,401,0,404,0,0,214,401,404,401,401,401,401,401,401,401,405,0,0,401,401,401,0,401,401,401,406,406,405,255,0,401,402,0,407,407,407,407,401,401,401,0,401,405,401,408,401,402,252,403,19,401,213,159,0,408,401,401,401,404,401,404,401,401,406,401,401,401,401,401,213,401,409,401,409,0,0,19,19,408,19,19,19,19,19,19,0,401,255,237,402,401,401,0,0,159,401,401,402,406,406,406,401,403,401,404,401,401,401,401,407,407,407,407,405,401,401,401,401,401,401,406,401,404,252,214,252,234,0,0,0,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,0,213,213,213,213,213,213,213,213,213,213,213,213,0,0,0,409,409,409,409,409,409,409,409,409,409,0,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,0,0,0,0,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,0,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,0,0,405,405,405,405,405,405,405,405,407,407,407,407,405,405,405,405,405,405,405,0,0,407,407,407,407,405,407,407,407,407,407,407,407,407,0,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,0,246,0,246,246,0,246,246,0,246,246,0,0,246,401,401,401,401,401,401,401,401,401,401,401,401,0,0,0,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,401,247,248,401,247,248,401,247,248,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,247,248,247,248,401,247,248,401,247,248,401,247,248,247,248,247,248,247,248,401,247,248,401,247,248,401,247,248,247,248,247,248,401,247,248,247,248,401,247,248,401,247,248,401,247,248,401,247,248,247,247,248,248,401,247,248,247,247,248,248,401,247,248,247,248,401,247,248,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,247,248,401,247,248,247,248,247,248,401,247,248,247,248,247,248,0,247,248,401,247,248,401,247,248,0,401,247,248,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,401,247,248,247,248,401,247,248,401,247,248,401,247,248,401,247,248,247,248,401,247,248,247,248,401,247,248,401,247,248,247,248,247,248,247,248,247,248,0,402,0,0,0,0,403,0,404,0,404,250,250,250,250,250,250,251,251,251,251,251,251,403,403,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,251,250,251,250,251,250,251,250,251,250,251,252,250,251,252,250,251,250,251,250,251,250,251,406,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,406,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,251,250,251,251,251,251,251,251,251,251,251,251,251,251,250,251,251,251,251,251,251,251,251,251,251,251,251,402,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,251,403,403,250,250,251,251,252,250,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,251,250,251,402,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,252,403,250,250,250,250,250,250,251,251,251,251,251,251,250,251,0,0,0,0,0,0,0,0,0,0,0,252,250,251,404,250,250,250,250,250,250,251,251,251,251,251,251,404,250,250,250,250,250,250,251,251,251,251,251,251,403,403,406,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,251,250,251,403,403,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,250,250,250,250,250,251,251,251,251,251,251,250,251,250,251,250,251,402,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,251,251,251,251,251,251,251,251,251,251,251,251,250,251,251,251,251,251,251,251,251,251,251,251,251,402,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,406,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,406,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,406,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,251,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,403,250,250,250,250,250,250,251,251,251,251,251,251,404,250,250,250,250,250,250,251,251,251,251,251,251,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,250,251,250,251,406,250,250,250,250,250,250,250,250,250,250,250,250,251,251,251,251,251,251,251,251,251,251,251,251,252,250,251,252,250,251,252,250,251,404,250,250,250,250,250,250,251,251,251,251,251,251,252,252,250,251,0,0,0,0,0,0,19,0,0,0,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,408,214,214,214,214,214,214,214,214,214,214,214,214,214,214,19,214,214,0,0,0,0,214,408,214,214,19,19,408,19,19,19,19,19,19,19,19,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,410,411,412,413,414,415,410,411,412,413,414,415,410,410,410,410,410,410,410,410,410,410,410,410,410,411,411,411,411,411,411,411,411,411,412,412,412,412,412,412,412,412,412,413,413,413,413,413,413,413,413,413,414,414,414,414,414,414,414,414,414,415,415,415,415,415,415,415,410,411,412,413,414,415,0,410,410,410,410,410,410,410,410,410,410,410,410,410,411,411,411,411,411,411,411,411,411,412,412,412,412,412,412,412,412,412,413,413,413,413,413,413,413,413,413,414,414,414,414,414,414,414,414,414,415,415,415,415,415,415,415,410,411,412,413,414,415,410,411,412,413,414,415,410,410,410,410,410,410,410,410,410,410,410,410,411,411,411,411,411,411,411,411,412,412,412,412,412,412,412,412,413,413,413,413,413,413,413,413,414,414,414,414,414,414,414,414,415,415,415,415,415,415,410,411,412,413,414,415,410,411,412,413,414,415,410,411,412,413,414,415,410,411,412,413,414,415,410,410,411,412,413,414,415,410,411,412,413,414,415,411,412,413,414,415,416,417,414,415,410,411,412,413,414,415,410,411,412,413,414,415,410,411,412,413,414,415,0,0,0,0,0,0,0,0,0,232,231,230,228,232,231,230,228,232,231,230,228,0,0,232,231,230,228,418,232,231,230,228,232,231,230,228,418,232,231,230,228,418,232,231,230,228,418,232,231,230,228,232,231,230,228,418,418,232,231,230,228,418,418,232,231,230,228,232,231,230,228,232,231,230,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,418,418,418,418,0,254,254,254,254,254,254,254,254,254,254,0,254,254,254,254,254,254,254,254,254,254,254,0,0,254,254,0,254,0,254,254,0,0,254,254,254,254,0,0,254,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,237,237,234,234,237,237,237,234,234,234,0,0,0,0,0,0,258,259,260,258,259,260,263,419,263,263,258,259,260,258,259,260,419,258,259,260,258,259,260,258,259,260,263,419,258,258,0,258,258,263,0,263,263,263,263,263,263,258,259,260,0,258,263,258,259,260,258,259,260,258,259,260,258,259,260,419,419,419,419,419,0,0,0,420,0,0,0,0,0,0,420,0,420,420,420,420,420,0,280,271,280,0,280,0,271,281,0,0,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,0,0,0,420,0,0,0,0,0,0,0,0,420,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,272,273,274,275,276,277,268,279,267,278,268,279,267,278,272,273,274,275,276,277,268,279,267,278,272,273,274,275,276,277,267,272,273,274,275,276,277,267,272,273,274,275,276,277,272,273,274,275,276,277,267,420,272,273,274,275,276,277,278,420,272,273,274,275,276,277,278,267,272,273,274,275,276,277,268,279,267,278,272,273,274,275,276,277,268,279,267,278,272,273,274,275,276,277,279,267,272,273,274,275,276,277,267,268,420,272,273,274,275,276,277,420,272,273,274,275,276,277,268,279,0,420,272,273,274,275,276,277,420,420,268,279,267,278,272,273,274,275,276,277,267,268,279,279,278,278,278,268,279,267,278,272,273,274,275,276,277,278,268,279,267,272,273,274,275,276,277,0,268,279,267,278,272,273,274,275,276,277,268,279,267,278,272,273,274,275,276,277,268,279,267,278,272,273,274,275,276,277,0,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,0,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,167,421,422,0,0,0,0,0,0,0,0,0,0,0,423,0,0,0,423,262,289,291,297,298,299,424,0,0,0,0,425,425,0,291,426,286,427,427,427,427,422,0,262,286,258,286,0,428,0,286,0,0,425,0,421,286,0,0,299,288,286,0,0,0,0,0,0,289,167,0,0,0,426,297,0,289,286,286,286,286,427,427,427,427,0,0,286,269,0,423,423,423,423,423,423,423,423,423,423,423,423,0,427,427,427,427,427,427,427,427,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,283,283,0,283,285,284,283,285,284,285,284,283,0,285,426,426,426,283,0,0,283,285,284,283,285,284,0,0,0,0,0,0,283,285,284,285,285,0,284,0,283,284,285,285,285,284,0,284,426,426,426,0,283,285,284,283,285,284,283,285,284,0,285,286,286,0,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,0,428,0,0,0,0,0,0,0,0,0,429,430,429,429,430,429,430,429,430,429,429,429,430,429,429,429,430,429,429,430,429,430,429,430,429,430,429,430,429,430,429,430,429,430,429,430,429,430,429,430,429,430,0,425,425,425,0,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,0,0,0,0,0,0,0,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,0,269,269,269,269,269,269,269,269,0,0,0,0,0,289,291,289,290,291,289,290,291,290,291,290,291,290,291,291,290,291,289,290,291,431,289,290,291,290,291,289,290,291,289,291,289,290,291,288,290,291,288,288,0,0,0,289,289,0,431,290,291,289,290,291,289,290,291,289,290,291,0,0,0,0,0,0,0,0,0,167,421,0,0,0,0,0,262,297,298,299,262,292,293,294,295,296,297,298,299,262,292,293,294,295,296,297,298,299,292,293,294,295,296,297,298,299,292,293,294,295,296,297,298,299,292,293,294,295,296,297,298,299,262,292,293,294,295,296,297,298,299,262,262,292,293,294,295,296,297,298,299,262,258,0,0,421,292,293,294,296,297,299,299,297,299,262,299,0,0,0,0,0,167,295,298,297,292,293,294,295,296,297,298,299,262,292,293,294,295,296,297,298,299,262,292,293,294,295,296,297,298,299,262,292,293,294,295,296,297,298,299,0,422,422,0,0,424,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,0,0,0,0,0,0,0,0,0,209,0,0,0,0,0,0,209,306,0,304,312,305,301,312,301,305,0,0,301,302,303,312,311,0,0,301,311,0,313,303,312,313,304,311,0,0,0,0,302,303,311,302,304,303,0,0,0,0,0,0,0,306,301,302,303,305,432,306,301,302,303,305,432,306,301,302,303,305,306,301,302,303,305,306,304,432,305,301,301,301,305,301,302,303,305,306,301,302,303,305,432,306,303,301,302,303,0,301,302,303,305,432,306,305,301,302,303,301,302,303,306,301,302,302,302,303,303,304,432,302,302,302,301,302,303,305,306,301,302,303,305,432,306,301,302,303,305,432,306,301,302,303,305,432,306,303,302,303,302,304,432,303,0,0,0,0,0,0,0,0,307,308,309,310,307,308,309,310,307,308,309,310,0,307,308,309,310,307,308,309,310,0,307,308,309,310,307,308,309,310,307,308,309,310,0,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,0,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,209,0,209,209,209,209,209,209,209,209,209,209,209,209,209,209,0,0,313,313,313,313,0,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[]],[[]],[[]],0,0,[[]],0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,[[]],0,0,0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],2],[[],2],[[]],[[]],[[]],[3],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[[4,[5]]],[[4,[5]]]],[[[6,[5]]],[[6,[5]]]],[[]],[[]],[[[4,[7]],8],9],[[[6,[7]],8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,[[]],0,0,[[]],[[]],[3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[12,1],[3,[[13,[3]]]],[[]],[[]],[3],[3],[3],[3],0,0,0,0,0,0,[[]],0,0,[3],0,0,0,[[]],[[]],[[]],0,0,[3,2],[[]],[[],2],[[]],[[]],[[]],[[]],0,0,[3,13],0,[12,3],[3,2],[[],2],0,0,[3],[12,1],0,0,[12,3],[[],13],0,[[],2],[[],2],0,0,[3,[[13,[3]]]],0,0,0,[12],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[14,8],9],[[]],[[]],[3,14],[14,[[1,[3]]]],[[],10],[[],10],[[],11],0,0,0,0,0,[[]],[12,1],[[]],0,0,0,[3,13],[12,3],[12,1],[12,3],[[],2],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[16,16],[17,17],[[]],[[]],[[]],[[15,3],17],0,0,[[],15],[[15,3],18],[[15,15],2],[[15,8],9],[[16,8],9],[[17,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,3],2],[[3,3],2],0,0,[16,1],[17,1],[3,[[1,[3]]]],[[3,3],[[1,[3]]]],[[15,3],18],[3,16],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],0,[[]],[[]],[[[20,[19]]],3],[[[20,[[0,[5,19]]]]],[[20,[[0,[5,19]]]]]],[[]],[[[20,[[0,[7,19]]]],8],9],[[]],[[],[[20,[19]]]],0,[[]],[[[20,[19]],3],2],0,[[]],[[],10],[[],10],[[],11],0,[[3,3,13]],[[3,3,13]],[3],[3],[3],[3],[3,2],[[],2],[[],2],[[3,21,13]],[3,2],[[],2],[[3,13]],[[]],0,0,[[22,23,23]],[[]],[[]],[[]],[[]],[[24,24,24],2],[24,24],[22,22],[[]],[[]],[[],24],[[],22],0,[[24,24],2],[[24,8],9],[[22,8],9],[[]],[[]],0,[[]],[[]],[[23,23],24],[[],22],[[22,23],23],0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[24,23],23],0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,[[[25,[5,5]]],[[25,[5,5]]]],[[[26,[5,5]]],[[26,[5,5]]]],[[]],[[]],0,0,0,0,[[[25,[7,7]],8],9],[[[26,[7,7]],8],9],[[]],[[]],[[]],[[]],[[],25],[25],[25,26],[26],[25,26],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[27,27],[[]],[27,28],0,[[27,8],9],[[]],[[]],0,0,[[]],[[]],[[],29],[[],27],[[]],[29],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,[[]],[3],[3],[3],[3],[3,[[13,[3]]]],[[],13],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[30,30],[[]],[30,23],0,[[30,8],9],[[]],[[]],0,0,[[]],[[]],[[],31],[[],30],[[]],[31],[[]],[31],0,[[23,23],23],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,[[]],[[]],[[],32],[[32,3],[[32,[3]]]],0,[[[32,[7]],8],9],[[]],0,[[32,3]],[[]],[[],10],[[],10],[[],11],0,[[]],[[]],[33],0,[[]],[[]],0,[33],[3,33],[33,23],0,[33],0,[3,[[13,[3]]]],[[],10],[[],10],[[],11],0,0,0,[[]],[[]],[[]],[[]],[[]],[34,34],[[]],[[]],[[]],[[]],0,[3],[[]],[[]],[[]],0,[[]],[[],10],[[],10],[[],11],0,0,0,0,0,0,[[]],[[]],[3],0,0,[[35,3,3]],[[]],[[]],[[]],[[]],[[3,3],35],[[3,3],35],[[],10],[[],10],[[],11],[[35,3,3]],[[]],[[]],0,0,0,0,[[]],[[]],[[],2],[12],0,0,[[36,28],[[1,[[13,[28]]]]]],[[]],[[]],[36,36],[[]],[[],36],[[36,28],[[1,[28]]]],[[36,8],9],[[]],[37,36],[[36,28],2],[[]],[[],36],[[36,28]],[[]],[[],10],[[],10],[[],11],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[38,38],[[]],[38,23],0,[[38,8],9],[[]],[[]],0,[[]],[[]],[[],39],[[],38],[[]],[39],0,[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[13,13],13],[[13,13],13],[[40,13,13],13],[[41,13,13],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40],[41],[[],40],[[],41],0,0,[[40,3],18],[[41,3],18],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[40],[41],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],[[3,3,42],3],[[3,3,42],3],0,[[],3],0,0,0,0,0,0,0,0,[[43,43]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,44],[45,45],[46,46],[47,47],[43,43],[[]],[[]],[[]],[[]],[[]],[[],46],[[],43],[[47,3,43,23,23],23],0,0,[44],[45],[46],[44],[45],[44],[45],[44],[[44,8],9],[[45,8],9],[[46,8],9],[[47,8],9],[[43,8],9],[[]],[[]],[[]],[[]],[[],43],[[]],0,[[44,3],[[1,[23]]]],[[45,3],[[1,[23]]]],[[44,23,3]],[[45,3,23]],[[46,23,23]],[[44,23,3]],[[45,3,23]],[[44,23,3,3]],[[45,3,23,3]],[[44,23,3,3]],[[]],[[]],[[]],[[]],[[]],0,[44,3],[43],[3,44],[3,45],[[],46],[[],47],[44,[[1,[23]]]],[[45,23],[[1,[3]]]],[[46,23],23],[[47,23],23],[[47,3,23],[[10,[23,48]]]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,[[],3],[[3,3,42],3],[[3,3,42],3],[[],3],0,[[]],[[]],[49,49],[[]],0,[[49,8],9],[[]],0,[[]],[[49,3],[[1,[[13,[3]]]]]],[[],49],[[]],[[],10],[[],10],[[],11],0,[[]],[[]],[[[50,[5]]],[[50,[5]]]],[[]],[[],50],0,[[50,37]],[[[50,[7]],8],9],[[]],[50],[[]],[50,3],[[],50],[[]],[[],10],[[],10],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],[3,2],0,0,0,0,0,[[],51],0,0,0,0,0,0,0,0,0,[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[51],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[1,[3]]]],[[],3],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],3],0,0,0,0,0,0,0,[[],13],[3,13],[[],13],[3,13],0,0,0,0,0,0,0,0,[[52,3]],[[]],[[]],0,[[52,8],9],[[52,3,3]],[[]],[[],52],[[]],[[],10],[[],10],[[],11],0,0,0,0,[[],51],[53,51],[54,51],[[]],[[]],[[]],[[]],0,[51],[[53,51]],[[54,51]],[[],53],[[],[[54,[55]]]],[53],[[[53,[7]],8],9],[[[54,[7]],8],9],[[]],[[]],[[]],[[]],[[],53],0,[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,[3,53],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],[56,2],[57,2],[58,2],[59,2],[60,2],[61,2],[62,2],[63,2],[64,2],[65,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,66],[[[56,[5,5]]],[[56,[5,5]]]],[[[57,[5,5]]],[[57,[5,5]]]],[[[58,[5,5]]],[[58,[5,5]]]],[[[59,[5,5]]],[[59,[5,5]]]],[[[60,[5]]],[[60,[5]]]],[[[61,[5,5]]],[[61,[5,5]]]],[[[62,[5]]],[[62,[5]]]],[[[63,[5]]],[[63,[5]]]],[64,64],[[[65,[5]]],[[65,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],64],[[],65],0,0,0,[[],66],[[],66],0,0,0,[[66,8],9],[[[56,[7,7]],8],9],[[[57,[7,7]],8],9],[[[58,[7,7]],8],9],[[[59,[7,7]],8],9],[[[60,[7]],8],9],[[[61,[7,7]],8],9],[[[62,[7]],8],9],[[[63,[7]],8],9],[[64,8],9],[[[65,[7]],8],9],0,0,0,0,0,0,0,0,0,[66],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],62],[[],63],[[],62],[[],63],0,[[]],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],62],[[],63],[[],62],[[],63],[66,67],0,[[],66],[[],59],[[],60],[[],61],[[],64],[[],65],[[],1],[56,1],[57,1],[58,1],[59,1],[60,1],[61,1],[62,1],[63,1],[64,1],[65,1],0,0,[[66,3]],[[66,3]],0,0,[66],[66],[[],13],[3,13],[[],13],[3,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[68,3]],[[68,3]],0,[[]],[[]],[68,68],[[]],[[68,8],9],[[[68,[69]],3,3]],[[]],[[],68],[[[68,[69]],3]],[[]],[[[68,[70]]],3],0,[3,68],[[[68,[69]],3]],[[]],[[],10],[[],10],[[],11],[[68,3]],0,[[71,3,3]],[[71,3,3]],0,[[]],[[]],[71,71],[[]],[[71,8],9],[[71,3,3,3,3]],[[]],[[71,3,3]],0,[[]],[[3,3],71],[[71,3,3]],[[]],[[],10],[[],10],[[],11],[[71,3,3]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,2],[[72,3],2],[[],3],[72,3],[[]],[[]],[72,72],[[]],0,[[72,8],9],[[]],[37,72],0,[[]],[3,3],[3,3],[3,3],[3,3],[[72,3],3],[3,[[1,[3]]]],[3,[[1,[3]]]],[[72,3],[[1,[3]]]],[3,[[1,[3]]]],[3,[[1,[3]]]],[[72,3],[[1,[3]]]],0,[[]],[[],10],[[],10],[[],11],0,[[73,73]],[[73,73]],[[73,73]],[[73,73]],[[73,73]],[[73,73]],0,[[73,73]],[[73,73]],[[73,73]],[[]],[[]],[73,73],[[]],[[73,73],74],[73,28],[73,28],[[],73],[[73,73],2],[[73,8],9],[[]],[[73,3],2],[73],[[]],[3,73],[73],[73],[3,73],[[73,73],[[1,[74]]]],[[73,3,2]],[[73,3]],[[73,3]],[[73,3]],[[73,3]],[[73,3]],[[73,3]],0,[[]],[73],[[],10],[[],10],[[],11],0,0,0,[[]],[[]],[[]],[[]],[[[75,[5]]],[[75,[5]]]],[[[76,[5]]],[[76,[5]]]],[[]],[[]],0,0,[[[75,[7]],8],9],[[76,8],9],[[]],[[]],[[],75],[[],76],[[],[[1,[3]]]],[75,[[1,[3]]]],[76,[[1,[3]]]],[[],3],[75,3],[76,3],[[]],[[]],[[],3],[75,3],[76,3],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,0,0,0,0,0,[[[78,[[78,[77]]]]]],[[[78,[77]]]],[[[78,[[78,[[78,[77]]]]]]]],[[[78,[[78,[[78,[[78,[77]]]]]]]]]],0,[[]],[[]],[[]],[[]],[78,78],[77,77],[[]],[[]],0,[[],78],[[78,8],9],[[77,8],9],[[]],[[]],[[],[[78,[77]]]],[[],[[78,[[78,[77]]]]]],[[],[[78,[[78,[[78,[77]]]]]]]],[[],[[78,[[78,[[78,[[78,[77]]]]]]]]]],0,[[]],[[]],[[],[[78,[[78,[77]]]]]],[[],[[78,[[78,[[78,[[78,[77]]]]]]]]]],[[],[[78,[[78,[[78,[77]]]]]]]],[[],[[78,[77]]]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[[78,[[78,[[78,[77]]]]]]]],[[[78,[[78,[77]]]]]],[[[78,[77]]]],[[[78,[[78,[[78,[[78,[77]]]]]]]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[79,79],[80,80],[[]],[[]],0,[[],79],[[79,8],9],[[80,8],9],[[[79,[80]]]],[[[79,[[79,[[79,[80]]]]]]]],[[[79,[[79,[80]]]]]],[[[79,[[79,[[79,[[79,[80]]]]]]]]]],[[]],[[]],[[],[[79,[[79,[[79,[80]]]]]]]],[[],[[79,[80]]]],[[],[[79,[[79,[80]]]]]],[[],[[79,[[79,[[79,[[79,[80]]]]]]]]]],0,[[]],[[]],[[],[[79,[80]]]],[[],[[79,[[79,[[79,[80]]]]]]]],[[],[[79,[[79,[80]]]]]],[[],[[79,[[79,[[79,[[79,[80]]]]]]]]]],0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[[79,[[79,[[79,[[79,[80]]]]]]]]]],[[[79,[80]]]],[[[79,[[79,[80]]]]]],[[[79,[[79,[[79,[80]]]]]]]],0,0,[81],[82],[[81,3]],[[82,3]],[[81,81]],[[]],[[]],[[]],[[]],[81],[82],[[[81,[5]]],[[81,[5]]]],[[[82,[5]]],[[82,[5]]]],[[]],[[]],[[],81],[[],82],[81,[[83,[3]]]],[[81,37]],[[81,37]],[[82,37]],[[82,37]],[[81,8],9],[[82,8],9],[[]],[[]],[37,81],[37,81],[37,82],[37,82],[81,3],[82,3],[[]],[[]],[81,2],[82,2],[81,[[84,[3]]]],[82,[[85,[3]]]],[81,[[86,[3]]]],[82,[[87,[3]]]],[81,3],[82,3],0,0,[[],81],[[],82],[82,[[88,[3]]]],[81,2],[82,2],[[81,3],3],[[82,3],3],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[81,[[89,[3]]]],[82,[[90,[3]]]],[3,81],0,0,[[]],[[]],[91,91],[[]],[[91,8],9],[[91,3,3]],[[91,3,3]],[[]],[91,3],[[91,3]],[[]],[3,[[1,[3]]]],[13,91],0,[[]],[[],10],[[],10],[[],11],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[],92],[[],93],[92,28],[93,28],[[92,8],9],[[93,8],9],[[]],[[]],0,0,[[]],[[]],[[92,94]],[[93,28]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[92],[93],[[92,95]],[[93,95]],[[92,96]],[[93,96]],[[92,97]],[[93,97]],[[92,23]],[[93,23]],[[92,98]],[[93,98]],[[92,99]],[[93,99]],[[92,100]],[[93,100]],[[92,101]],[[93,101]],[[92,94]],[[93,94]],[[92,28]],[[93,28]],[[92,102]],[[93,102]],[[92,3]],[[93,3]],0,[[]],[[]],[[3,3,3]],0,[[]],[[]],[[],103],[[103,104,104],13],[[103,104,104,3,3,3,13]],[[],10],[[],10],[[],11],0,[[105,3]],[[]],[[]],[105,105],[[]],[[105,8],9],[[105,3,3]],[105],[[]],[13,105],[[105,3]],[[]],0,[3,105],[[105,3,3],[[1,[3]]]],[[105,3,2,2]],[[105,3]],[[105,3]],[[105,3,2,2]],[[105,3]],[[105,3,3],[[1,[3]]]],0,[[105,3]],[[]],[[],10],[[],10],[[],11],[[105,3,3]],[[105,3]],0,[[106,3]],[[]],[[]],[106,106],[[]],[[106,8],9],[[106,3,3]],[106],[[]],[[106,3]],[[106,3]],[[]],0,[3,106],[[106,3,3],[[1,[3]]]],[[106,3,2,2]],[[106,3]],[[106,3]],[[106,3,2,2]],[[106,3]],[[106,3,3],[[1,[3]]]],0,[[106,3]],[[]],[[],10],[[],10],[[],11],[[106,3,3]],[[106,3]],0,0,0,0,0,0,[[]],[[]],[107,108],[[]],[107,109],[[]],[[]],[[]],[[]],[[]],[[[109,[5]]],[[109,[5]]]],[[[108,[5]]],[[108,[5]]]],[[[107,[5]]],[[107,[5]]]],[[[110,[5]]],[[110,[5]]]],[[]],[[]],[[]],[[]],[[109,109],74],[[[108,[111]],108],74],[[107,107],74],[[],[[109,[55]]]],[[],[[108,[55]]]],[[],[[107,[55]]]],[[],110],[[[109,[112]],109],2],[[[108,[112]],108],2],[[107,107],2],[[]],[[109,8],9],[[108,8],9],[[[107,[7]],8],9],[[[110,[7]],8],9],[[]],[[]],[[]],[[]],[110],[[]],[[]],[[]],[[]],0,[[],107],[[],110],[[109,109],[[1,[74]]]],[[[108,[113]],108],[[1,[74]]]],[[107,107],[[1,[74]]]],0,[110,1],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,[[[114,[42]]],[[67,[3,[13,[3]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[115,[5]]],[[115,[5]]]],[[[116,[5]]],[[116,[5]]]],[[]],[[]],0,[[[114,[42]],3],3],[[[114,[42]],3],[[117,[116]]]],[[[114,[42]],3],[[118,[116]]]],[[[115,[7]],8],9],[[[116,[7]],8],9],[[]],[[]],[[]],[[]],[[]],[[]],[115,2],[[[114,[42]],3],[[13,[3]]]],0,[[3,42,42],[[114,[42]]]],[3,116],[[[114,[42]]],[[13,[3]]]],[[[114,[42]],3,3],2],[[[114,[42]],3],3],0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[[114,[42]],3,3],2],0,[[]],[[]],[119],[119,119],[[]],0,[[119,8],9],[[]],[[]],[3,119],[[]],[[],10],[[],10],[[],11],[[119,3,3,23,23]],[[119,99,3,23,23]],0,0,[[]],[[]],[[]],[[]],[120],[121],[[[120,[5,5]]],[[120,[5,5]]]],[[[121,[5]]],[[121,[5]]]],[[]],[[]],[121,2],[120,2],[[],120],[[],121],[120],[121],[120],[[120,37]],[[121,37]],[[[120,[7,7]],8],9],[[[121,[7]],8],9],[[]],[[]],[37,120],[37,121],[120,1],[120,1],[121,1],[121,1],[120,1],[120,1],[121,1],[120],[121],[120],[121],[[]],[[]],[120,85],[121,87],[120,122],[120,87],0,0,[[],120],[[],121],[120,1],[121,1],[120,1],[121,1],[120],[121],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[120,90],[120,123],0,[124],[[124,3]],[[]],[[]],[124,124],[[]],[[124,8],9],[124],[124],[[]],[13,124],[[124,3]],[[]],0,[3,124],[124,[[1,[3]]]],[[124,3]],[124,[[1,[3]]]],0,[[124,3]],[[]],[[],10],[[],10],[[],11],[[124,3]],0,[[125,3]],[[]],[[]],[125,125],[[]],[[125,8],9],[125],[125],[[]],[[125,3]],[[125,3]],[[]],0,[3,125],[125,[[1,[3]]]],[[125,3]],[125,[[1,[3]]]],0,[[125,3]],[[]],[[],10],[[],10],[[],11],0,[[125,3]],0,0,[126,1],0,0,[[]],[[]],[[]],[[]],[127,127],[126,126],[[]],[[]],[[],127],[[],126],[[127,8],9],[[126,8],9],[127],[126],[[]],[[]],[126,1],0,0,[[]],[[]],[127,2],[126,2],[127,1],[127,3],[126,3],[[],127],[[],126],[127,1],[126,1],[126,1],[127],[126],[127],[126],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,[[128,23]],[[128,23]],[[128,23]],[[128,23]],0,0,[[]],[[]],[128],[128],[128,128],[[]],[[],128],[[128,8],9],[[]],[[]],0,[128],[128,23],0,[[],128],[128,[[1,[23]]]],[128,[[1,[23]]]],[128,[[1,[23]]]],[128,[[1,[23]]]],[[128,23]],[[128,23]],0,[[128,23]],[[128,23,23]],[[]],[[],10],[[],10],[[],11],[[23,3],128],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[129,129]],[130,131],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[130,[132]]],[[130,[133]]]],[[]],[[]],[[]],[[]],[[[130,[132]]],[[130,[134]]]],[[]],[[]],[[[130,[133]]]],[[[130,[135]]],[[130,[135]]]],[[]],[[[130,[134]]]],[[[130,[135]]]],[[[130,[133]]]],0,[[[130,[133]]]],[[[130,[134]]]],[[],129],[136],[136],[[129,8],9],[[136,8],9],[[[130,[135]],8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[130,[132]]]],[136,129],0,[[],2],[[[130,[132]],[130,[132]]],[[130,[132]]]],[[129,[130,[132]]]],[[[130,[132]],[130,[132]]],[[130,[132]]]],[[129,[130,[132]]]],[[[130,[132]],[130,[132]]],[[130,[132]]]],[[129,[130,[132]]]],[[[130,[132]],[130,[132]]],[[130,[132]]]],[[129,[130,[132]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[130,[137]]]],[[[130,[132]]],[[130,[137]]]],[[[130,[137]]],[[51,[131]]]],[129,2],[[[130,[135]]],[[1,[[130,[135]]]]]],[[[130,[133]]],[[1,[[130,[133]]]]]],0,[[[129,[138]]],3],0,[[[130,[132]],[130,[132]]],[[130,[132]]]],[[],139],[[],140],[[],131],[[[51,[131]]],[[130,[132]]]],[[[1,[[130,[132]]]]],129],[129,136],[[[51,[131]]],130],[136,[[1,[[130,[133]]]]]],[136,[[1,[[130,[133]]]]]],0,[[129,141,141],136],[130,[[130,[135]]]],[[[130,[133]]]],[[[130,[135]]],[[1,[[130,[135]]]]]],[[[130,[133]]],[[1,[[130,[133]]]]]],0,[129,[[1,[[130,[135]]]]]],[136,129],0,0,[129,[[1,[[130,[133]]]]]],[136,129],[[[130,[134]],[1,[[130,[132]]]]]],[[[130,[134]],[1,[[130,[132]]]]]],[[[129,[138]]],3],[[[130,[132]]]],[129,[[1,[74]]]],[[[130,[135]]],74],[[139,[130,[135]]],74],[[140,[130,[135]]],74],[129,[[1,[[130,[132]]]]]],[129,[[1,[[130,[132]]]]]],[129,[[1,[[130,[132]]]]]],[129,[[1,[[130,[132]]]]]],[129,[[1,[[130,[132]]]]]],[129,[[1,[[130,[132]]]]]],[[[130,[134]]],[[1,[[130,[132]]]]]],[[[130,[134]]],[[1,[[130,[132]]]]]],[129,[[1,[[130,[132]]]]]],[[[1,[[130,[132]]]],129,[1,[[130,[132]]]]],136],[[]],[[[130,[133]]]],[[[130,[135]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[130,[133,138]]]],[[],142],[142],0,0,[[143,8],9],[[142,8],9],[142],[[]],[[]],[[]],[[]],[[]],[[]],[[142,3],1],[[],2],0,[[142,3]],[[]],[[]],[[]],[[]],[[]],[[]],[142,2],0,0,[142,3],0,[[142,3]],[3,144],[[],145],[[],146],[[],142],[142,[[1,[3]]]],[[[130,[133,138]]],[[130,[133,138]]]],[142,[[136,[138]]]],[[[130,[133,138]]],[[130,[133,138]]]],[[142,3],1],0,[[[130,[133,138]]]],[142],0,[[142,3]],[[142,3]],[142,[[1,[3]]]],0,[[144,[130,[135]]],74],[[145,[130,[135]]],74],[[146,[130,[135]]],74],[[[130,[133,138]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[142],[[[130,[133,138]]]],[3,142],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[130,[133,147]]]],[[],148],[148],[[148,8],9],[[[149,[7,7]],8],9],[[]],[[]],[[]],[[]],[[]],[148,1],[148,1],[[148,3],1],[[],2],0,[148,1],[[]],[[]],[[]],[[]],[[]],[[]],[148,2],[148,149],0,0,[149,1],[148,3],0,[149,1],[149,1],[[],150],[3,151],[[],148],[149,1],[149,1],[148,149],[148,149],[148,1],[[148,3],1],0,[[148,3],[[1,[74]]]],[148,[[1,[74]]]],[[150,[130,[135]]],74],[[151,[130,[135]]],74],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[3,148],0,[[]],[[]],[152],0,0,[152,152],[[]],[152,13],[152,[[10,[3,3]]]],[[152,3],[[10,[3,3]]]],[[152,8],9],[[]],[152,[[13,[3]]]],[[152,3],[[13,[3]]]],[[152,3,3],3],[[]],[3,152],[[152,3,3],[[1,[3]]]],[152,3],0,[[]],[[],10],[[],10],[[],11],[[3,3],152],0,[153,[[67,[3,[13,[3]]]]]],[[]],[[]],[153,153],[[]],[[153,3],3],[[153,8],9],[[]],[[]],[[153,3],[[13,[3]]]],[3,153],0,[153,[[13,[3]]]],[[153,3,3],2],[[153,3],3],[[]],[[],10],[[],10],[[],11],[[153,3,3],2],0,[[154,3],3],[[]],[[]],[154,154],[[]],[[154,8],9],[[]],[[]],0,[[[13,[[0,[5,155]]]],3],154],[[154,[104,[3]],3],3],[[154,[104,[3]],3],3],[[154,3,[104,[3]]],3],[[154,3,[104,[3]]],3],[[154,[104,[3]],[104,[3]]],3],[[154,3,3],[[1,[3]]]],0,[[]],[[],10],[[],10],[[],11],0,[156,[[67,[3,[13,[3]]]]]],[[]],[[]],[156,156],[[]],0,[[156,3],3],[[156,8],9],[[]],[[156,3,3],1],[[156,3]],[[]],[[156,3,3],2],[[156,3],[[13,[3]]]],[3,156],0,[156,[[13,[3]]]],[[156,3],3],[[]],[[],10],[[],10],[[],11],[[156,3,3],2],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],74],[[],2],0,0,0,0,[[[13,[157]]],48],[[[13,[157]]],48],[[[13,[157]]],[[13,[157]]]],0,0,0,0,0,0,0,0,0,0,0,[[],74],[[],2],[[]],[[]],[158,158],[[]],[[158,158],74],[[],158],[[158,158],2],[[158,8],9],[[]],0,[[]],[[158,158],[[1,[74]]]],[[]],[[],10],[[],10],[[],11],0,0,0,0,0,0,[[]],[[]],[[159,159,159],160],[[159,159,159],160],[160,160],[[]],[[160,160],74],[[160,160],2],[[160,8],9],[[]],[160],[[]],[[160,160],[[1,[74]]]],[[]],[[],10],[[],10],[[],11],0,[[]],[[]],0,[161,161],[[]],[[161,157],2],[[161,161],1],[[161,161],2],[[161,8],9],[[]],[[]],[[157,48],161],0,[[]],[[],10],[[],10],[[],11],[[[13,[157]]],48],[[],48],0,0,[[]],[[]],[[]],[[]],[[162,157],160],[[163,157],160],[162,162],[163,163],[[]],[[]],[[163,163],[[1,[157]]]],[162,157],[163,157],[[163,163],48],[[162,157],48],[[163,157],48],[[162,162],2],[[163,163],2],[[162,8],9],[[163,8],9],[[]],[[]],[[163,163],2],[[163,157],2],[[]],[[]],[[162,162],2],[[163,163],2],[[162,162],2],[[163,163],2],[[157,157],162],[[157,157],163],0,0,0,0,[[162,157],157],[[163,157],157],[[162,157],157],[[163,157],157],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[[13,[157]]],48],[[[13,[157]]],[[13,[157]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],2],0,0,[[]],[[]],[[]],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[3,13],164],[[]],0,0,0,0,0,0,0,0,0,[[3,3],13],0,[[]],0,0,0,0,0,0,[[]],0,[[]],[[]],[[],3],0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,[[]],[[]],0,[[]],[[]],0,[[],3],0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,[[165,3,3]],[[165,3,3]],[[165,3],13],[[]],[[]],[[]],[[]],[[]],[[]],[166,166],[165,165],[[]],[[]],[[166,166],74],[[],166],[[],165],0,[[166,166],2],0,0,[[166,8],9],[[165,8],9],[[]],[[]],[[]],0,[166],0,[[]],[[]],[[]],[[[168,[167,167]]],1],[[3,3,2],[[168,[167,167]]]],[[3,3],166],[3,165],[[166,166],[[1,[74]]]],0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[165,[[104,[3]]]],0,0,0,0,0,0,[[169,3,3]],[[169,170]],[[]],[[]],[[]],[[]],[169,169],[171,171],[[]],[[]],[[169,3],2],[[169,8],9],[[]],[[]],[[3,3],169],[169],[[]],[[]],[169],0,0,0,0,[169],[169,13],[169,13],[169],[[3,3],169],[169],0,0,[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,0,0,0,[172],[173],[172],[173],[172],[173],[[]],[[]],[[]],[[]],[172],[173],[[]],[[]],[[]],[[]],[3,172],[[],173],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[172],[173],[172],[173],[172],[173],0,0,[[172,13]],[172],[173],[[3,3],13],0,0,0,[[]],[[]],[[]],[[]],[174,174],[[]],[174,175],0,[174,3],0,[[174,8],9],[[]],[[]],[[3,13],174],[[174,3]],[[]],[[]],[[174,3],1],[[174,42],[[13,[2]]]],[[[176,[167,167]]],1],[[3,3],[[176,[167,167]]]],[3,174],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[174,[[104,[3]]]],[174,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[177],[178],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[179,[5]]],[[179,[5]]]],[[[180,[5,5]]],[[180,[5,5]]]],[[[177,[5,5]]],[[177,[5,5]]]],[[[178,[5,5,5]]],[[178,[5,5,5]]]],[[]],[[]],[[]],[[]],[[[179,[111]],179],74],[[[180,[111,111]],180],74],[[[177,[111,111]],177],74],[[[178,[111,111,111]],178],74],[[]],[[]],[[]],[[]],[180],[178],[[]],[[]],[[]],[[]],[[[179,[112]],179],2],[[[180,[112,112]],180],2],[[[177,[112,112]],177],2],[[[178,[112,112,112]],178],2],[[],3],[[]],[[[179,[7]],8],9],[[[180,[7,7]],8],9],[[[177,[7,7]],8],9],[[[178,[7,7,7]],8],9],[[]],[[]],[[]],[181],[[],179],[[]],[[],180],[[],177],[[]],[[]],[[],178],0,[[[179,[182]]]],[[[180,[182,182]]]],[[[177,[182,182]]]],[[[178,[182,182,182]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[177,177],[178,178],0,0,[[],183],[[],184],[183,1],[184,1],[[[179,[113]],179],[[1,[74]]]],[[[180,[113,113]],180],[[1,[74]]]],[[[177,[113,113]],177],[[1,[74]]]],[[[178,[113,113,113]],178],[[1,[74]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[179],[180],[177],[178],[[]],[[]],[[]],[[]],[[],3],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[186,[185]]],[[187,[185]]]],[[[186,[188]]],[[187,[188]]]],[[[186,[185]]]],[[[186,[188]]]],[[[186,[188]]]],[[[186,[185]]]],[[[186,[188]]]],[[[186,[185]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[186,[5]]],[[186,[5]]]],[189,189],[190,190],[185,185],[188,188],[[[191,[5]]],[[191,[5]]]],[[[187,[5]]],[[187,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[190,190],74],[186],[[],191],0,0,[190],[[190,190],2],[186,3],[[[186,[7]],8],9],[[189,8],9],[[190,8],9],[[185,8],9],[[188,8],9],[[[191,[7]],8],9],[[[187,[7]],8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[190],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[186,1],[[190,3]],[[3,3],186],[[3,3],[[186,[185]]]],[[3,3],[[186,[188]]]],[189,1],[[[191,[185]]],1],[[[191,[188]]],1],[187,1],[[190,190],[[1,[74]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[186,3]],[186],[186],[186],[[186,13]],0,0,0,0,0,0,[[]],[[]],0,[[192,3,3,3]],[[]],0,[[]],0,[193,192],0,[[],10],[[],10],[[],11],0,0,[[194,3,3,28]],[[195,3,3],2],[[]],[[]],[[]],[[]],[[194,196],195],[[3,3],194],0,0,[[195,3,28,28]],[194,194],[195,195],[[]],[[]],0,[[195,3,3,28],28],0,[[194,37]],[[194,8],9],[[195,8],9],[[]],[[]],[194,196],[[195,3],28],0,[[]],[[]],0,0,[[195,3,3],28],[[195,3,3,28],28],[[195,3],[[13,[2]]]],[[3,3],194],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,0,[[197,3,3,28,23]],[[198,3]],[[]],[[]],[[]],[[]],[[197,196],198],[[3,3],197],0,0,[197,197],[[]],0,0,[[198,3,3],2],0,0,[[197,37]],[[197,8],9],[[198,8],9],[[]],[[]],[197,196],[[198,3],28],0,0,0,[[]],[[]],[[198,3,3]],[[198,3,3,28]],[[3,3],197],0,0,0,[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,[[199,3,3,23]],[[199,3,3]],[[199,3,3,3,3,28]],[[199,3,3,3,3,28]],[[]],[[]],[199,199],[[]],0,0,[[],199],[[199,8],9],[[]],[[]],0,[[3,3],199],[199],0,[[]],0,[[],10],[[],10],[[],11],[[[13,[3]]],199],0,0,0,0,0,0,[[],2],[[],2],[[],2],[[],2],[2,1],[2,1],[2,1],[2,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[200,3,3]],[[164,3],[[175,[201]]]],[164],[164],[164],[[164,3],[[13,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[200],[3,200],[[3,3],200],[202,202],[203,203],[204,204],[201,201],[[[164,[5]]],[[164,[5]]]],[[]],[[]],[[]],[[]],[[]],[[202,202],74],[[203,203],74],[[204,204],74],[[201,201],74],[164],[[3,13],164],[[3,13],[[164,[202]]]],[[3,13],[[164,[203]]]],[[3,13],[[164,[204]]]],[164],[[],201],[[193,3,3,28,13]],[[[164,[203]],3,3,28,13]],[[164,3],[[13,[3]]]],[[164,3],[[13,[2]]]],0,0,[164,3],[201],0,[164],[164],[[202,202],2],[[203,203],2],[[204,204],2],[[201,201],2],[164,3],0,[164],[[164,13]],[[202,8],9],[[203,8],9],[[204,8],9],[[201,8],9],[[[164,[7]],8],9],[164],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,13],164],[202],[203],[204],[201],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[205,1],[206,1],[3,200],[[3,3],205],[3,206],[[3,3],201],[[3,3],200],[[202,202],[[1,[74]]]],[[203,203],[[1,[74]]]],[[204,204],[[1,[74]]]],[[201,201],[[1,[74]]]],0,[[193,3,3,13]],[[[164,[203]],3,3,13]],0,0,[207,208],[193,208],[196,208],[[[164,[204]]],208],[[[164,[202]]],208],[[[164,[203]]],208],[[]],[[]],[[]],[[]],[[]],[164,[[13,[3]]]],[193,209],[[[164,[203]]],209],[[193,3],[[13,[28]]]],[[[164,[203]],3],[[13,[28]]]],[[193,3]],[[[164,[203]],3]],[[193,3]],[[[164,[203]],3]],[[164,3]],[[193,3],[[13,[28]]]],[[[164,[203]],3],[[13,[28]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[164,[[104,[3]]]],[164],[164,3],[201],[164],[164],[164,3],0,0,0,0,[[164,13]],[164],[[193,3,3,13]],[[[164,[203]],3,3,13]],[[193,3,42],13],[[[164,[203]],3,42],13],0,[[]],[[]],[210,210],[[]],0,[210,[[13,[[13,[3]]]]]],0,[[210,3,3]],[[210,8],9],[[]],[210,207],0,[210,2],[[210,3]],[[]],0,[207,210],0,[210,3],[[]],[[],10],[[],10],[[],11],0,0,[[211,3,2,3,2]],[[211,3,3]],[[211,3,3]],[[]],[[]],[211,211],[[]],0,[[211,8],9],[[]],[[]],[3,211],[[211,3]],[[211,3]],[[]],[[],10],[[],10],[211,[[1,[[13,[2]]]]]],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],13],[[[0,[5,212]],3,[0,[5,212]]],[[0,[5,212]]]],0,[[28,28,213],2],0,0,0,0,0,[[28,28,28],[[1,[28]]]],[[28,28,28],[[1,[28]]]],[28,[[13,[28]]]],[3,3],[[23,23]],[[23,23]],[[23,23]],0,0,0,0,0,[[28,28,28,28],28],[[23,23,23,23,28],23],[[23,23,23,23,28,[104,[23]]],23],0,0,[[28,28],28],[[28,28],28],[100,13],0,0,[3],0,[214,214],[[],[[13,[214]]]],[[28,28],28],[[],3],[[],1],0,0,0,[28,2],[[28,213],2],0,[[28,28],28],[[28,28],28],[[28,28],28],[3,[[67,[3,23]]]],[[]],0,0,0,0,0,0,0,0,0,[28,13],[28,[[13,[28]]]],0,0,0,0,[28,28],0,0,[[],1],0,0,[3],[[],13],0,0,0,[[]],[[]],[3],[[],3],[[]],[3],0,0,0,0,0,0,[[[1,[1]]],[[1,[215]]]],[[],[[215,[216]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[28,28,28],[[1,[28]]]],[[216,28,28,28],1],[[217,28,28],1],[[28,28,28],[[1,[28]]]],[[28,28,28,94],1],[28,2],[[216,8],9],[[218,8],9],[[217,8],9],[[]],[[]],[[]],0,[[217,28],[[1,[28]]]],[[28,28,218],[[13,[28]]]],[[]],[[]],[[]],[[],216],[[28,28,213],218],[28,217],0,0,0,0,0,0,[[28,28,28,28,94],[[1,[28]]]],[[28,28,213],28],[[218,28,213],28],0,0,[[28,28,28],1],[[],1],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[219,219],[220,220],[221,221],[[]],[[]],[[]],[[219,3,3],214],[[220,3,3],214],[[],220],0,0,[[220,3]],[[219,8],9],[[220,8],9],[[221,8],9],[[]],[[]],[[]],[[219,3,3],214],[[]],[[]],[[]],[[219,3],214],[221,214],0,0,[[219,3,214],214],[3,219],[[],220],[214,221],0,0,0,[[219,3,3],214],[[221,3],214],0,[[221,99],214],0,[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],0,0,0,0,[[[1,[1]]],[[1,[222]]]],[[],[[222,[[13,[[159,[48]]]]]]]],[[],223],[[]],[[]],[[]],[[]],[[]],[3],[[]],[[]],[[]],[[]],[[]],[[]],[3],[[],3],[[]],[3],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[[224,[28]]],[[224,[28]]]],[[28,28,28,28],28],[[23,23,23,23,28],23],[[23,23,23,23,28,[104,[23]]],23],0,0,0,0,0,0,[225],[225],[[225,225]],[225],[225],[[225,225]],[[225,225]],[[225,225]],[[225,225]],[225],[225],[[225,225]],[[]],[[]],[[225,225,3]],[225,225],[[]],[[225,3],225],[[225,3],225],0,[[],[[225,[55,55]]]],[225,225],[[225,225]],[225],[225],[225],[225],[[225,225]],[[225,225]],[[225,225]],[225],[225],[[225,225]],[[225,225]],[[225,225]],[[225,225],2],[225],[225,225],[[225,3],225],[[[225,[7,7]],8],9],0,0,[181],[[]],[[],225],[13,225],[37,225],[13,225],[[225,3]],[[225,3]],[225,225],[[]],[225],[[225,3],225],[225,175],[225,226],[[13,3]],[[225,13,3]],[225,3],[[225,3],225],[[225,3],225],[225],[225],[[225,225]],[[225,225]],[[225,225]],[[225,225]],[225],[225],[225],[[225,225]],[[225,225]],[225],[225,13],[225],[225],[225,225],[[],225],[[225,3,3],225],[[225,3],225],[[225,3],225],[3,225],[[225,225]],[[225,225]],[[225,225]],[[225,225]],[[225,225]],[[225,225]],[[225,3]],[[225,3],225],[225,225],[[225,3]],[[225,3]],[[225,3]],[[225,3]],[[225,3]],[[225,3]],[[225,3],[[1,[225]]]],[[],1],[225],[225],[[225,225]],[225],[225],[[225,225]],[[225,225]],[[225,225]],[[225,225]],[[225,225]],[225],[225],[[[225,[214]],214,219],[[225,[214]]]],[[]],[225],[[225,3]],[[],10],[[],10],[[],11],[[],225],[3,225],0,0,0,[[23,23]],[[23,23]],[[23,23]],[[28,28],28],[[28,28],28],[[28,28],28],[[28,28],28],[[28,28],28],[[28,28],28],[214,214],[[],[[13,[214]]]],0,[[227,227]],[[]],[[]],[[[227,[5]]],[[227,[5]]]],[[]],0,[227],[[[227,[112]],227],2],[[],227],[[[227,[7]],8],9],[[]],[[[13,[13]]],227],[[227,3]],[227],[[227,3]],[227],[[]],[227,[[1,[227]]]],[[227,227]],[5,[[227,[5]]]],[[227,3],227],[227,3],[[227,2]],0,[227,[[1,[13]]]],[[227,227]],[[]],[[],10],[[],10],[[],11],[[],227],0,0,[28,2],[[28,213],2],[[94,213],2],[[28,213],2],[[94,213,94],2],[[28,213,28],2],[94,98],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[1]]],[[1,[222]]]],[[[1,[1]]],[[1,[222]]]],[[[1,[1]]],[[1,[222]]]],[[[1,[1]]],[[1,[222]]]],[[],[[222,[[229,[228]]]]]],[[],[[222,[[229,[230]]]]]],[[],[[222,[[229,[231]]]]]],[[],[[222,[[229,[232]]]]]],[[]],[[]],[[]],[[]],0,[229,229],[[]],[[229,3]],[[229,8],9],[[]],[[]],0,0,[[]],[[]],[[]],[3],[3],[[],3],[[],3],[[]],[[]],[[],229],[[]],[[],214],[[]],[3],[3],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[[0,[5,212]],3,[0,[5,212]]],[[0,[5,212]]]],[[],1],0,[[233,233]],[[[233,[[0,[5,234,235,236]]]],[0,[5,234,235,236]]],[[0,[5,234,235,236]]]],[[]],[[]],[[[233,[5]]],[[233,[5]]]],[[]],0,[[],[[233,[55]]]],[[233,233]],[[[233,[112]],233],2],[[[233,[7]],8],9],[[]],[13,233],[[233,3]],[[233,3]],[[]],[233,3],[[233,233]],[[],[[233,[[0,[234,237]]]]]],0,[[[233,[[0,[238,234,237,235,236]]]],3],[[233,[[0,[238,234,237,235,236]]]]]],[[233,233]],[[233,233]],[[]],[[],10],[[],10],[[],11],[[],233],0,[[]],[[]],[239,239],[[]],[3,3],[[239,8],9],[[]],[[239,3],3],[100,13],[[]],[3,[[67,[3,23]]]],[3,239],0,[[]],[[],10],[[],10],[[],11],[28,[[13,[28]]]],[28,[[1,[28]]]],[28,13],[28,[[13,[28]]]],0,0,[[]],[[]],[[]],[[]],[240,240],[241,241],[[]],[[]],[[240,28],28],[[],240],[[240,28],[[13,[28]]]],[[240,8],9],[[241,8],9],[[]],[[]],[[]],[[]],[[]],[[240,28],2],0,0,[28,240],[241,1],[[240,28],13],[240],0,0,[[240,28]],[[240,28]],[[]],[[]],[[240,28],241],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],0,0,[[]],[[]],[242,242],[[]],[[242,94],94],[[242,94],[[13,[94]]]],[[242,8],9],[[]],[[]],[[242,94],2],[94,242],[[242,94],13],[242,18],0,[[]],[[242,94]],[[],10],[[],10],[[],11],[[28,28,213],2],[28,28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],0,0,[[]],[[]],[[],243],0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],0,[[]],[[],1],[[]],[[],1],[[]],[[]],[[]],0,[[]],[[],1],[[]],[[]],[28],[[244,94],10],0,[[]],[[]],[[]],0,0,0,[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],0,[[]],[94],[[]],[97],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[]],[[],1],[[],1],[[]],[[]],[[],28],[[]],[[]],[[],74],[[]],[[]],[[]],0,0,0,[[]],0,0,0,[[]],[[]],[[[213,[5]]],[[213,[5]]]],[[]],[[[213,[28]],28],28],[[[213,[100]],100],100],[[[213,[94]],94],94],[[[213,[28]],28]],[[[213,[100]],100]],[[[213,[94]],94]],[[[213,[7]],8],9],[[]],[[[213,[28]]],28],[[[213,[100]]],100],[[[213,[94]]],94],0,0,[[]],0,[28,[[213,[28]]]],[100,[[213,[100]]]],[94,[[213,[94]]]],[[[213,[100]],100],100],[[[213,[94]],94],94],[[[213,[28]],28],28],[[]],[[],10],[[],10],[[],11],0,0,0,[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[159,[48]]],48],[159],[[159,159]],[159],[[159,159]],[[159,159]],[159],[159],[[159,159]],[[159,159]],[[159,159]],[159],[159],[[[159,[48]]],48],[[]],[[]],[[[159,[5]]],[[159,[5]]]],[[]],[[[159,[111]],159],74],[[159,159],74],[159,159],[[159,159]],[[],[[159,[55]]]],[[159,159]],[159],[[159,159]],[[159,159]],[[159,159]],[159],[159],[159],[[159,159]],[[159,159]],[159],[159],[[159,159]],[[[159,[112]],159],2],[[[159,[7]],8],9],[[]],[[[159,[182]]]],[[],159],0,0,0,0,0,[[]],[159],[[159,159]],[[159,159]],[[159,159]],[159],[159],[159],[[159,159]],[159],[159],[[159,159]],[[159,159]],[159],[159],[[],159],[159],[[],159],[[[159,[113]],159],[[1,[74]]]],[[48,48],[[159,[48]]]],[159,2],[48,[[159,[48]]]],[18,159],[18,159],0,[[],1],[159],[159],[[159,159]],[159],[159],[[159,159]],[[159,159]],[[159,159]],[[159,159]],[[159,159]],[159],[159],[18,159],[18,159],[[]],[159,159],[[],10],[[],10],[[],11],[[[159,[48]]],[[159,[48]]]],[[],159],0,0,[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[]],[[]],[[],1],[[]],[[],1],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],0,0,[[]],[[],1],[[]],[[],1],[[],1],[[],104],[[],104],[[],[[1,[104]]]],[[],[[1,[104]]]],[[],245],[[],245],[[],[[1,[245]]]],[[],[[1,[245]]]],0,[246,246],[[246,246]],[[246,48]],[[]],[[]],[246,246],[[]],[[246,246],74],[[],246],[[246,246]],[[246,48],246],[[246,246],2],[[246,8],9],[[246,8],9],[[]],[48,246],[244,[[10,[246]]]],[[]],[246,2],[[],246],[[],246],[[246,246]],[[246,48]],[246],[[246,246],[[1,[74]]]],[[48,48]],[[48,48,48],246],[48],[246,246],[[246,246]],[[48,48,48]],[[]],[[],208],[[48,48],74],[[],10],[[],10],[[48,48]],[[48,48]],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[247,247]],[[248,248]],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[]],[[247,247],247],[[248,248],248],[[]],[247,247],[248,248],[[]],[[]],[[]],[[]],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[],243],[247,243],[248,243],[247,247],[248,248],[[]],[[]],[[247,247],74],[[248,248],74],[[]],[[247,247],247],[[248,248],248],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[],247],[[],248],[[247,247]],[[248,248]],[[]],[[247,247],247],[[248,248],248],[[247,247],2],[[248,248],2],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[247,8],9],[[247,8],9],[[248,8],9],[[248,8],9],[[]],[247,247],[248,248],[249,247],[[]],[48,248],[[]],[28],[28,247],[28,248],[244,[[10,[247]]]],[244,[[10,[248]]]],[[]],[[247,247],247],[[248,248],248],[[]],[[]],[[],2],[247,2],[248,2],[[],2],[247,2],[248,2],[[],2],[247,2],[248,2],[[],2],[247,2],[248,2],[[],2],[247,2],[248,2],[[],2],[247,2],[248,2],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[]],[[247,247],247],[[248,248],248],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[]],[[247,247],247],[[248,248],248],[[],247],[[],248],[[]],[[247,247],247],[[248,248],248],[[],247],[[],248],[[247,247]],[[248,248]],[[]],[[247,247,247],247],[[248,248,248],248],[247],[248],[[],247],[[],248],0,[[247,247],[[1,[74]]]],[[248,248],[[1,[74]]]],[[]],[[247,247],247],[[248,248],248],[97],[[247,97],247],[[248,97],248],0,[[]],[247,247],[248,248],[[247,247]],[[248,248]],[[]],[[247,247],247],[[248,248],248],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[]],[247],[248],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[247,247]],[[248,248]],[[]],[247,247],[248,248],[[]],[247,247],[248,248],[[],28],[247,28],[248,28],[[]],[247,247],[248,248],[[]],[[]],[[]],[247,247],[248,248],[[],208],[[],208],[[],74],[[247,247],74],[[248,248],74],[[]],[247,247],[248,248],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],247],[[],248],0,0,0,0,0,0,0,0,0,0,[[]],[[[250,[99]]],[[250,[99]]]],[[[250,[96]]],[[250,[96]]]],[[[250,[95]]],[[250,[95]]]],[[[250,[23]]],[[250,[23]]]],[[[250,[97]]],[[250,[97]]]],[[[250,[98]]],[[250,[98]]]],[[[251,[99]]],[[251,[99]]]],[[[251,[97]]],[[251,[97]]]],[[[251,[95]]],[[251,[95]]]],[[[251,[96]]],[[251,[96]]]],[[[251,[23]]],[[251,[23]]]],[[[251,[98]]],[[251,[98]]]],[[]],[[]],[[[250,[23]],[250,[23]]]],[[[250,[28]],[250,[28]]]],[[[250,[98]],[250,[98]]]],[[[250,[95]],[250,[95]]]],[[[250,[100]],[250,[100]]]],[[[250,[99]],[250,[99]]]],[[[250,[97]],[250,[97]]]],[[[250,[102]],[250,[102]]]],[[[250,[96]],[250,[96]]]],[[[250,[3]],[250,[3]]]],[[[250,[101]],[250,[101]]]],[[[250,[94]],[250,[94]]]],[[[251,[28]],[251,[28]]]],[[[251,[97]],[251,[97]]]],[[[251,[100]],[251,[100]]]],[[[251,[99]],[251,[99]]]],[[[251,[94]],[251,[94]]]],[[[251,[96]],[251,[96]]]],[[[251,[23]],[251,[23]]]],[[[251,[102]],[251,[102]]]],[[[251,[3]],[251,[3]]]],[[[251,[95]],[251,[95]]]],[[[251,[98]],[251,[98]]]],[[[251,[101]],[251,[101]]]],[[[250,[99]],[250,[99]]]],[[[250,[97]],[250,[97]]]],[[[250,[100]],[250,[100]]]],[[[250,[23]],[250,[23]]]],[[[250,[96]],[250,[96]]]],[[[250,[95]],[250,[95]]]],[[[250,[98]],[250,[98]]]],[[[250,[3]],[250,[3]]]],[[[250,[102]],[250,[102]]]],[[[250,[101]],[250,[101]]]],[[[250,[94]],[250,[94]]]],[[[250,[28]],[250,[28]]]],[[[251,[101]],[251,[101]]]],[[[251,[99]],[251,[99]]]],[[[251,[95]],[251,[95]]]],[[[251,[102]],[251,[102]]]],[[[251,[98]],[251,[98]]]],[[[251,[97]],[251,[97]]]],[[[251,[94]],[251,[94]]]],[[[251,[3]],[251,[3]]]],[[[251,[100]],[251,[100]]]],[[[251,[96]],[251,[96]]]],[[[251,[23]],[251,[23]]]],[[[251,[28]],[251,[28]]]],[[250,250]],[[251,251]],[[250,250]],[[251,251]],[[250,250]],[[251,251]],[[250,250]],[[251,251]],[[250,250]],[[251,251]],[[250,250]],[[251,251]],[[]],[[]],[[]],[[]],[[]],[[]],[[[250,[5]]],[[250,[5]]]],[[[251,[5]]],[[251,[5]]]],[[]],[[]],[[[250,[111]],250],74],[[[251,[111]],251],74],[[]],[[[250,[94]]],94],[[[250,[99]]],94],[[[250,[23]]],94],[[[250,[101]]],94],[[[250,[95]]],94],[[[250,[98]]],94],[[[250,[3]]],94],[[[250,[100]]],94],[[[250,[28]]],94],[[[250,[96]]],94],[[[250,[102]]],94],[[[250,[97]]],94],[[[251,[99]]],94],[[[251,[94]]],94],[[[251,[23]]],94],[[[251,[98]]],94],[[[251,[95]]],94],[[[251,[96]]],94],[[[251,[97]]],94],[[[251,[101]]],94],[[[251,[100]]],94],[[[251,[28]]],94],[[[251,[102]]],94],[[[251,[3]]],94],[[]],[[[250,[102]]],94],[[[250,[96]]],94],[[[250,[23]]],94],[[[250,[98]]],94],[[[250,[100]]],94],[[[250,[101]]],94],[[[250,[95]]],94],[[[250,[3]]],94],[[[250,[28]]],94],[[[250,[99]]],94],[[[250,[97]]],94],[[[250,[94]]],94],[[[251,[94]]],94],[[[251,[23]]],94],[[[251,[101]]],94],[[[251,[95]]],94],[[[251,[97]]],94],[[[251,[3]]],94],[[[251,[28]]],94],[[[251,[98]]],94],[[[251,[100]]],94],[[[251,[102]]],94],[[[251,[99]]],94],[[[251,[96]]],94],[[],[[250,[55]]]],[[],[[251,[55]]]],[[250,250]],[[[251,[101]],[251,[101]]]],[[[251,[94]],[251,[94]]]],[[[251,[95]],[251,[95]]]],[[[251,[23]],[251,[23]]]],[[[251,[96]],[251,[96]]]],[[[251,[98]],[251,[98]]]],[[[251,[28]],[251,[28]]]],[[[251,[102]],[251,[102]]]],[[[251,[3]],[251,[3]]]],[[[251,[99]],[251,[99]]]],[[[251,[100]],[251,[100]]]],[[[251,[97]],[251,[97]]]],[[250,250]],[[[251,[94]],[251,[94]]]],[[[251,[28]],[251,[28]]]],[[[251,[96]],[251,[96]]]],[[[251,[3]],[251,[3]]]],[[[251,[99]],[251,[99]]]],[[[251,[102]],[251,[102]]]],[[[251,[95]],[251,[95]]]],[[[251,[23]],[251,[23]]]],[[[251,[98]],[251,[98]]]],[[[251,[97]],[251,[97]]]],[[[251,[101]],[251,[101]]]],[[[251,[100]],[251,[100]]]],[[]],[[[250,[99]],[250,[99]]],[[250,[99]]]],[[[250,[102]],[250,[102]]],[[250,[102]]]],[[[250,[28]],[250,[28]]],[[250,[28]]]],[[[250,[97]],[250,[97]]],[[250,[97]]]],[[[250,[98]],[250,[98]]],[[250,[98]]]],[[[250,[101]],[250,[101]]],[[250,[101]]]],[[[250,[96]],[250,[96]]],[[250,[96]]]],[[[250,[95]],[250,[95]]],[[250,[95]]]],[[[250,[94]],[250,[94]]],[[250,[94]]]],[[[250,[100]],[250,[100]]],[[250,[100]]]],[[[250,[3]],[250,[3]]],[[250,[3]]]],[[[250,[23]],[250,[23]]],[[250,[23]]]],[[[251,[23]],[251,[23]]],[[251,[23]]]],[[[251,[3]],[251,[3]]],[[251,[3]]]],[[[251,[95]],[251,[95]]],[[251,[95]]]],[[[251,[96]],[251,[96]]],[[251,[96]]]],[[[251,[99]],[251,[99]]],[[251,[99]]]],[[[251,[100]],[251,[100]]],[[251,[100]]]],[[[251,[101]],[251,[101]]],[[251,[101]]]],[[[251,[28]],[251,[28]]],[[251,[28]]]],[[[251,[98]],[251,[98]]],[[251,[98]]]],[[[251,[97]],[251,[97]]],[[251,[97]]]],[[[251,[102]],[251,[102]]],[[251,[102]]]],[[[251,[94]],[251,[94]]],[[251,[94]]]],[[[250,[112]],250],2],[[[251,[112]],251],2],[[],252],[[],252],[[250,8],9],[[250,8],9],[[251,8],9],[[251,8],9],[[]],[23,[[250,[23]]]],[98,[[250,[98]]]],[101,[[250,[101]]]],[99,[[250,[99]]]],[[]],[96,[[250,[96]]]],[102,[[250,[102]]]],[94,[[250,[94]]]],[95,[[250,[95]]]],[100,[[250,[100]]]],[97,[[250,[97]]]],[3,[[250,[3]]]],[28,[[250,[28]]]],[28,[[251,[28]]]],[102,[[251,[102]]]],[101,[[251,[101]]]],[99,[[251,[99]]]],[3,[[251,[3]]]],[[]],[94,[[251,[94]]]],[96,[[251,[96]]]],[23,[[251,[23]]]],[100,[[251,[100]]]],[98,[[251,[98]]]],[95,[[251,[95]]]],[97,[[251,[97]]]],[244,[[10,[250]]]],[244,[[10,[251]]]],[[244,94],10],[[244,94],[[10,[[250,[28]]]]]],[[244,94],[[10,[[250,[102]]]]]],[[244,94],[[10,[[250,[98]]]]]],[[244,94],[[10,[[250,[97]]]]]],[[244,94],[[10,[[250,[95]]]]]],[[244,94],[[10,[[250,[101]]]]]],[[244,94],[[10,[[250,[99]]]]]],[[244,94],[[10,[[250,[100]]]]]],[[244,94],[[10,[[250,[94]]]]]],[[244,94],[[10,[[250,[96]]]]]],[[244,94],[[10,[[250,[23]]]]]],[[244,94],[[10,[[250,[3]]]]]],[[244,94],[[10,[[251,[3]]]]]],[[244,94],[[10,[[251,[28]]]]]],[[244,94],[[10,[[251,[99]]]]]],[[244,94],[[10,[[251,[100]]]]]],[[244,94],[[10,[[251,[96]]]]]],[[244,94],[[10,[[251,[94]]]]]],[[244,94],[[10,[[251,[102]]]]]],[[244,94],[[10,[[251,[95]]]]]],[[244,94],[[10,[[251,[97]]]]]],[[244,94],[[10,[[251,[98]]]]]],[[244,94],[[10,[[251,[101]]]]]],[[244,94],[[10,[[251,[23]]]]]],0,[[]],[[[250,[28]],[250,[28]]],[[250,[28]]]],[[[250,[100]],[250,[100]]],[[250,[100]]]],[[[250,[94]],[250,[94]]],[[250,[94]]]],[[[250,[3]],[250,[3]]],[[250,[3]]]],[[[250,[102]],[250,[102]]],[[250,[102]]]],[[[250,[101]],[250,[101]]],[[250,[101]]]],[[[251,[3]],[251,[3]]],[[251,[3]]]],[[[251,[100]],[251,[100]]],[[251,[100]]]],[[[251,[28]],[251,[28]]],[[251,[28]]]],[[[251,[94]],[251,[94]]],[[251,[94]]]],[[[251,[101]],[251,[101]]],[[251,[101]]]],[[[251,[102]],[251,[102]]],[[251,[102]]]],[[[250,[182]]]],[[[251,[182]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[],2],[[[250,[96]]],2],[[[250,[98]]],2],[[[250,[99]]],2],[[[250,[95]]],2],[[[250,[23]]],2],[[[250,[97]]],2],[[[251,[95]]],2],[[[251,[99]]],2],[[[251,[23]]],2],[[[251,[97]]],2],[[[251,[98]]],2],[[[251,[96]]],2],[[],2],[[[250,[99]]],2],[[[250,[98]]],2],[[[250,[96]]],2],[[[250,[97]]],2],[[[250,[23]]],2],[[[250,[95]]],2],[[[251,[96]]],2],[[[251,[98]]],2],[[[251,[97]]],2],[[[251,[99]]],2],[[[251,[23]]],2],[[[251,[95]]],2],[[]],[[]],[[]],[[[250,[3]]],94],[[[250,[100]]],94],[[[250,[98]]],94],[[[250,[28]]],94],[[[250,[95]]],94],[[[250,[101]]],94],[[[250,[99]]],94],[[[250,[23]]],94],[[[250,[102]]],94],[[[250,[94]]],94],[[[250,[96]]],94],[[[250,[97]]],94],[[[251,[96]]],94],[[[251,[99]]],94],[[[251,[101]]],94],[[[251,[3]]],94],[[[251,[97]]],94],[[[251,[28]]],94],[[[251,[100]]],94],[[[251,[95]]],94],[[[251,[23]]],94],[[[251,[102]]],94],[[[251,[94]]],94],[[[251,[98]]],94],[[],250],[[],251],[[],250],[[],251],[[]],[[]],[[[250,[96]],[250,[96]]]],[[[250,[95]],[250,[95]]]],[[[250,[28]],[250,[28]]]],[[[250,[98]],[250,[98]]]],[[[250,[3]],[250,[3]]]],[[[250,[97]],[250,[97]]]],[[[250,[23]],[250,[23]]]],[[[250,[99]],[250,[99]]]],[[[250,[102]],[250,[102]]]],[[[250,[100]],[250,[100]]]],[[[250,[94]],[250,[94]]]],[[[250,[101]],[250,[101]]]],[[[251,[102]],[251,[102]]]],[[[251,[99]],[251,[99]]]],[[[251,[3]],[251,[3]]]],[[[251,[95]],[251,[95]]]],[[[251,[97]],[251,[97]]]],[[[251,[23]],[251,[23]]]],[[[251,[101]],[251,[101]]]],[[[251,[100]],[251,[100]]]],[[[251,[28]],[251,[28]]]],[[[251,[94]],[251,[94]]]],[[[251,[96]],[251,[96]]]],[[[251,[98]],[251,[98]]]],[[[250,[97]],[250,[97]]]],[[[250,[101]],[250,[101]]]],[[[250,[100]],[250,[100]]]],[[[250,[99]],[250,[99]]]],[[[250,[3]],[250,[3]]]],[[[250,[95]],[250,[95]]]],[[[250,[98]],[250,[98]]]],[[[250,[102]],[250,[102]]]],[[[250,[96]],[250,[96]]]],[[[250,[94]],[250,[94]]]],[[[250,[28]],[250,[28]]]],[[[250,[23]],[250,[23]]]],[[[251,[96]],[251,[96]]]],[[[251,[23]],[251,[23]]]],[[[251,[99]],[251,[99]]]],[[[251,[28]],[251,[28]]]],[[[251,[101]],[251,[101]]]],[[[251,[97]],[251,[97]]]],[[[251,[98]],[251,[98]]]],[[[251,[3]],[251,[3]]]],[[[251,[100]],[251,[100]]]],[[[251,[94]],[251,[94]]]],[[[251,[102]],[251,[102]]]],[[[251,[95]],[251,[95]]]],[[[250,[97]]]],[[[250,[23]]]],[[[250,[98]]]],[[[250,[95]]]],[[[250,[96]]]],[[[250,[99]]]],[[[251,[96]]]],[[[251,[99]]]],[[[251,[98]]]],[[[251,[97]]]],[[[251,[23]]]],[[[251,[95]]]],[250],[251],[[],250],[[],251],[[[250,[113]],250],[[1,[74]]]],[[[251,[113]],251],[[1,[74]]]],[94],[[[250,[99]],94],[[250,[99]]]],[[[250,[97]],94],[[250,[97]]]],[[[250,[102]],94],[[250,[102]]]],[[[250,[28]],94],[[250,[28]]]],[[[250,[100]],94],[[250,[100]]]],[[[250,[98]],94],[[250,[98]]]],[[[250,[3]],94],[[250,[3]]]],[[[250,[101]],94],[[250,[101]]]],[[[250,[94]],94],[[250,[94]]]],[[[250,[23]],94],[[250,[23]]]],[[[250,[96]],94],[[250,[96]]]],[[[250,[95]],94],[[250,[95]]]],[[[251,[96]],94],[[251,[96]]]],[[[251,[28]],94],[[251,[28]]]],[[[251,[23]],94],[[251,[23]]]],[[[251,[102]],94],[[251,[102]]]],[[[251,[101]],94],[[251,[101]]]],[[[251,[3]],94],[[251,[3]]]],[[[251,[95]],94],[[251,[95]]]],[[[251,[99]],94],[[251,[99]]]],[[[251,[94]],94],[[251,[94]]]],[[[251,[98]],94],[[251,[98]]]],[[[251,[100]],94],[[251,[100]]]],[[[251,[97]],94],[[251,[97]]]],[[250,250]],[[[251,[99]],[251,[99]]]],[[[251,[100]],[251,[100]]]],[[[251,[94]],[251,[94]]]],[[[251,[101]],[251,[101]]]],[[[251,[97]],[251,[97]]]],[[[251,[3]],[251,[3]]]],[[[251,[23]],[251,[23]]]],[[[251,[102]],[251,[102]]]],[[[251,[95]],[251,[95]]]],[[[251,[98]],[251,[98]]]],[[[251,[28]],[251,[28]]]],[[[251,[96]],[251,[96]]]],[[250,250]],[[[251,[97]],[251,[97]]]],[[[251,[96]],[251,[96]]]],[[[251,[98]],[251,[98]]]],[[[251,[100]],[251,[100]]]],[[[251,[3]],[251,[3]]]],[[[251,[28]],[251,[28]]]],[[[251,[23]],[251,[23]]]],[[[251,[99]],[251,[99]]]],[[[251,[102]],[251,[102]]]],[[[251,[101]],[251,[101]]]],[[[251,[95]],[251,[95]]]],[[[251,[94]],[251,[94]]]],[[]],[[[250,[95]],[250,[95]]],[[250,[95]]]],[[[250,[100]],[250,[100]]],[[250,[100]]]],[[[250,[96]],[250,[96]]],[[250,[96]]]],[[[250,[23]],[250,[23]]],[[250,[23]]]],[[[250,[3]],[250,[3]]],[[250,[3]]]],[[[250,[28]],[250,[28]]],[[250,[28]]]],[[[250,[99]],[250,[99]]],[[250,[99]]]],[[[250,[97]],[250,[97]]],[[250,[97]]]],[[[250,[102]],[250,[102]]],[[250,[102]]]],[[[250,[98]],[250,[98]]],[[250,[98]]]],[[[250,[101]],[250,[101]]],[[250,[101]]]],[[[250,[94]],[250,[94]]],[[250,[94]]]],[[[251,[23]],[251,[23]]],[[251,[23]]]],[[[251,[28]],[251,[28]]],[[251,[28]]]],[[[251,[101]],[251,[101]]],[[251,[101]]]],[[[251,[95]],[251,[95]]],[[251,[95]]]],[[[251,[3]],[251,[3]]],[[251,[3]]]],[[[251,[99]],[251,[99]]],[[251,[99]]]],[[[251,[94]],[251,[94]]],[[251,[94]]]],[[[251,[98]],[251,[98]]],[[251,[98]]]],[[[251,[100]],[251,[100]]],[[251,[100]]]],[[[251,[96]],[251,[96]]],[[251,[96]]]],[[[251,[102]],[251,[102]]],[[251,[102]]]],[[[251,[97]],[251,[97]]],[[251,[97]]]],[[]],[[[250,[97]]],[[250,[97]]]],[[[250,[101]]],[[250,[101]]]],[[[250,[23]]],[[250,[23]]]],[[[250,[98]]],[[250,[98]]]],[[[250,[100]]],[[250,[100]]]],[[[250,[96]]],[[250,[96]]]],[[[250,[99]]],[[250,[99]]]],[[[250,[28]]],[[250,[28]]]],[[[250,[102]]],[[250,[102]]]],[[[250,[94]]],[[250,[94]]]],[[[250,[3]]],[[250,[3]]]],[[[250,[95]]],[[250,[95]]]],[[[251,[23]]],[[251,[23]]]],[[[251,[99]]],[[251,[99]]]],[[[251,[3]]],[[251,[3]]]],[[[251,[98]]],[[251,[98]]]],[[[251,[100]]],[[251,[100]]]],[[[251,[102]]],[[251,[102]]]],[[[251,[97]]],[[251,[97]]]],[[[251,[96]]],[[251,[96]]]],[[[251,[101]]],[[251,[101]]]],[[[251,[95]]],[[251,[95]]]],[[[251,[28]]],[[251,[28]]]],[[[251,[94]]],[[251,[94]]]],[[]],[[[250,[97]],94],[[250,[97]]]],[[[250,[94]],94],[[250,[94]]]],[[[250,[99]],94],[[250,[99]]]],[[[250,[3]],94],[[250,[3]]]],[[[250,[98]],94],[[250,[98]]]],[[[250,[28]],94],[[250,[28]]]],[[[250,[23]],94],[[250,[23]]]],[[[250,[101]],94],[[250,[101]]]],[[[250,[100]],94],[[250,[100]]]],[[[250,[96]],94],[[250,[96]]]],[[[250,[95]],94],[[250,[95]]]],[[[250,[102]],94],[[250,[102]]]],[[[251,[97]],94],[[251,[97]]]],[[[251,[94]],94],[[251,[94]]]],[[[251,[28]],94],[[251,[28]]]],[[[251,[23]],94],[[251,[23]]]],[[[251,[100]],94],[[251,[100]]]],[[[251,[3]],94],[[251,[3]]]],[[[251,[98]],94],[[251,[98]]]],[[[251,[102]],94],[[251,[102]]]],[[[251,[99]],94],[[251,[99]]]],[[[251,[96]],94],[[251,[96]]]],[[[251,[101]],94],[[251,[101]]]],[[[251,[95]],94],[[251,[95]]]],[[]],[[[250,[100]],94],[[250,[100]]]],[[[250,[99]],94],[[250,[99]]]],[[[250,[96]],94],[[250,[96]]]],[[[250,[98]],94],[[250,[98]]]],[[[250,[23]],94],[[250,[23]]]],[[[250,[101]],94],[[250,[101]]]],[[[250,[3]],94],[[250,[3]]]],[[[250,[94]],94],[[250,[94]]]],[[[250,[97]],94],[[250,[97]]]],[[[250,[95]],94],[[250,[95]]]],[[[250,[102]],94],[[250,[102]]]],[[[250,[28]],94],[[250,[28]]]],[[[251,[98]],94],[[251,[98]]]],[[[251,[97]],94],[[251,[97]]]],[[[251,[94]],94],[[251,[94]]]],[[[251,[100]],94],[[251,[100]]]],[[[251,[3]],94],[[251,[3]]]],[[[251,[101]],94],[[251,[101]]]],[[[251,[99]],94],[[251,[99]]]],[[[251,[95]],94],[[251,[95]]]],[[[251,[102]],94],[[251,[102]]]],[[[251,[23]],94],[[251,[23]]]],[[[251,[28]],94],[[251,[28]]]],[[[251,[96]],94],[[251,[96]]]],[[],1],[[],1],[[[250,[97]],94]],[[[250,[98]],94]],[[[250,[3]],94]],[[[250,[94]],94]],[[[250,[99]],94]],[[[250,[96]],94]],[[[250,[28]],94]],[[[250,[95]],94]],[[[250,[101]],94]],[[[250,[100]],94]],[[[250,[102]],94]],[[[250,[23]],94]],[[[251,[102]],94]],[[[251,[97]],94]],[[[251,[100]],94]],[[[251,[28]],94]],[[[251,[3]],94]],[[[251,[95]],94]],[[[251,[23]],94]],[[[251,[94]],94]],[[[251,[99]],94]],[[[251,[98]],94]],[[[251,[96]],94]],[[[251,[101]],94]],[[[250,[97]],94]],[[[250,[95]],94]],[[[250,[101]],94]],[[[250,[100]],94]],[[[250,[23]],94]],[[[250,[99]],94]],[[[250,[3]],94]],[[[250,[98]],94]],[[[250,[96]],94]],[[[250,[28]],94]],[[[250,[94]],94]],[[[250,[102]],94]],[[[251,[97]],94]],[[[251,[3]],94]],[[[251,[99]],94]],[[[251,[101]],94]],[[[251,[95]],94]],[[[251,[98]],94]],[[[251,[96]],94]],[[[251,[102]],94]],[[[251,[100]],94]],[[[251,[94]],94]],[[[251,[28]],94]],[[[251,[23]],94]],[[[250,[23]],94]],[[[250,[95]],94]],[[[250,[3]],94]],[[[250,[94]],94]],[[[250,[102]],94]],[[[250,[99]],94]],[[[250,[98]],94]],[[[250,[96]],94]],[[[250,[28]],94]],[[[250,[101]],94]],[[[250,[100]],94]],[[[250,[97]],94]],[[[251,[94]],94]],[[[251,[100]],94]],[[[251,[3]],94]],[[[251,[98]],94]],[[[251,[102]],94]],[[[251,[96]],94]],[[[251,[97]],94]],[[[251,[99]],94]],[[[251,[28]],94]],[[[251,[95]],94]],[[[251,[101]],94]],[[[251,[23]],94]],[[[250,[97]],94]],[[[250,[23]],94]],[[[250,[96]],94]],[[[250,[3]],94]],[[[250,[99]],94]],[[[250,[101]],94]],[[[250,[100]],94]],[[[250,[102]],94]],[[[250,[95]],94]],[[[250,[28]],94]],[[[250,[94]],94]],[[[250,[98]],94]],[[[251,[94]],94]],[[[251,[3]],94]],[[[251,[96]],94]],[[[251,[95]],94]],[[[251,[98]],94]],[[[251,[97]],94]],[[[251,[28]],94]],[[[251,[101]],94]],[[[251,[102]],94]],[[[251,[23]],94]],[[[251,[99]],94]],[[[251,[100]],94]],[[]],[[[250,[94]]]],[[[250,[102]]]],[[[250,[101]]]],[[[250,[3]]]],[[[250,[100]]]],[[[250,[28]]]],[[[251,[28]]]],[[[251,[102]]]],[[[251,[100]]]],[[[251,[101]]]],[[[251,[94]]]],[[[251,[3]]]],[[]],[[[250,[99]]],[[250,[99]]]],[[[250,[95]]],[[250,[95]]]],[[[250,[23]]],[[250,[23]]]],[[[250,[97]]],[[250,[97]]]],[[[250,[96]]],[[250,[96]]]],[[[250,[98]]],[[250,[98]]]],[[[251,[98]]],[[251,[98]]]],[[[251,[99]]],[[251,[99]]]],[[[251,[95]]],[[251,[95]]]],[[[251,[23]]],[[251,[23]]]],[[[251,[97]]],[[251,[97]]]],[[[251,[96]]],[[251,[96]]]],[[[250,[23]],[250,[23]]]],[[[250,[100]],[250,[100]]]],[[[250,[96]],[250,[96]]]],[[[250,[98]],[250,[98]]]],[[[250,[94]],[250,[94]]]],[[[250,[102]],[250,[102]]]],[[[250,[101]],[250,[101]]]],[[[250,[99]],[250,[99]]]],[[[250,[97]],[250,[97]]]],[[[250,[3]],[250,[3]]]],[[[250,[95]],[250,[95]]]],[[[250,[28]],[250,[28]]]],[[[251,[3]],[251,[3]]]],[[[251,[23]],[251,[23]]]],[[[251,[102]],[251,[102]]]],[[[251,[100]],[251,[100]]]],[[[251,[95]],[251,[95]]]],[[[251,[99]],[251,[99]]]],[[[251,[96]],[251,[96]]]],[[[251,[101]],[251,[101]]]],[[[251,[94]],[251,[94]]]],[[[251,[97]],[251,[97]]]],[[[251,[98]],[251,[98]]]],[[[251,[28]],[251,[28]]]],[[[250,[23]],[250,[23]]]],[[[250,[28]],[250,[28]]]],[[[250,[101]],[250,[101]]]],[[[250,[99]],[250,[99]]]],[[[250,[3]],[250,[3]]]],[[[250,[96]],[250,[96]]]],[[[250,[98]],[250,[98]]]],[[[250,[102]],[250,[102]]]],[[[250,[95]],[250,[95]]]],[[[250,[94]],[250,[94]]]],[[[250,[100]],[250,[100]]]],[[[250,[97]],[250,[97]]]],[[[251,[102]],[251,[102]]]],[[[251,[98]],[251,[98]]]],[[[251,[97]],[251,[97]]]],[[[251,[28]],[251,[28]]]],[[[251,[23]],[251,[23]]]],[[[251,[99]],[251,[99]]]],[[[251,[100]],[251,[100]]]],[[[251,[101]],[251,[101]]]],[[[251,[95]],[251,[95]]]],[[[251,[96]],[251,[96]]]],[[[251,[3]],[251,[3]]]],[[[251,[94]],[251,[94]]]],[[]],[[]],[[],208],[[],208],[[]],[[[250,[23]]],94],[[[250,[97]]],94],[[[250,[99]]],94],[[[250,[3]]],94],[[[250,[96]]],94],[[[250,[102]]],94],[[[250,[94]]],94],[[[250,[101]]],94],[[[250,[95]]],94],[[[250,[98]]],94],[[[250,[100]]],94],[[[250,[28]]],94],[[[251,[23]]],94],[[[251,[102]]],94],[[[251,[95]]],94],[[[251,[99]]],94],[[[251,[98]]],94],[[[251,[3]]],94],[[[251,[28]]],94],[[[251,[101]]],94],[[[251,[100]]],94],[[[251,[96]]],94],[[[251,[94]]],94],[[[251,[97]]],94],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[]],[[[250,[95]]]],[[[250,[99]]]],[[[250,[98]]]],[[[250,[96]]]],[[[250,[97]]]],[[[250,[23]]]],[[[251,[99]]]],[[[251,[95]]]],[[[251,[23]]]],[[[251,[97]]]],[[[251,[96]]]],[[[251,[98]]]],0,0,[[],250],[[],251],0,0,0,0,0,0,0,0,0,0,0,[[214,214]],[[214,214]],[[214,214]],[[214,214]],[[214,214]],[[214,214]],[[]],[[]],[214,214],[[]],[[],214],[[214,214]],[[214,214]],[[214,214]],[[214,214]],[[214,214]],[[214,214]],[[214,214],2],[[214,8],9],[[214,8],[[10,[253]]]],[[]],[3,214],[100,214],[98,214],[96,214],[97,214],[23,214],[95,214],[99,214],[[]],[28,214],[94,214],[101,214],[102,214],[244,[[10,[214]]]],[[]],[[]],[214],0,0,0,0,[214],[[]],[[]],[214,214],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[3],[[]],[[]],[[214,214]],[[214,214]],[[214,214]],[[214,214]],[[214,214]],[[214,214]],[214],[214],[[],214],[[],214],[[],214],[[214,3],214],[18,214],[18,214],[[],1],[28],[94],[214,[[1,[214]]]],[214,[[1,[214]]]],[[214,214]],[[214,214]],[[214,214]],[[214,214]],[[214,214]],[[214,214]],[18,214],[18,214],[[]],[[],208],[[],10],[[],10],[[],11],0,[[],214],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[1]]],[[1,[215]]]],[[[1,[1]]],[[1,[215]]]],[[],[[215,[[213,[100]]]]]],[[],[[215,[[213,[28]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[98],[23],[97],[102],[95],[96],[101],[[]],[94],[99],[28],[100],[[]],[3],[94],[23],[28],[99],[95],[97],[100],[99],[3],[97],[23],[95],[100],[28],[94],[[]],[100],[23],[95],[97],[99],[3],[94],[[]],[28],[99],[28],[97],[3],[23],[95],[[]],[100],[94],[28],[99],[100],[95],[23],[[]],[3],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],100],[[],23],[[]],[[],28],[[],3],[[],99],[[],94],[[],95],[[],97],[[],96],[[],101],[[],98],[[],102],[[],94],[[],28],[[],100],[[]],[[],3],[[],99],[[],95],[[],23],[[],97],[[],94],[[],23],[[],28],[[],97],[[],95],[[],3],[[],99],[[],100],[[]],[[],94],[[],28],[[],100],[[]],[[],95],[[],99],[[],3],[[],97],[[],23],[[],95],[[],100],[[],97],[[]],[[],23],[[],94],[[],99],[[],3],[[],28],[[],23],[[],95],[[],99],[[]],[[],28],[[],100],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],99],[[],28],[[],3],[[],102],[[],98],[[],96],[[],100],[[],97],[[],101],[[],23],[[],94],[[],95],[[],95],[[],23],[[],28],[[],94],[[],97],[[],99],[[],100],[[],3],[[],97],[[],99],[[],100],[[],95],[[],28],[[],3],[[],94],[[],23],[[],97],[[],94],[[],99],[[],95],[[],100],[[],28],[[],23],[[],3],[[],28],[[],3],[[],95],[[],99],[[],23],[[],100],[[],94],[[],97],[[],100],[[],3],[[],28],[[],23],[[],95],[[],99],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,28],[28,28],[28,28],[28,28],[100,100],[94],[28],[94],[28],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,[[],223],[[],223],[[],223],[[],223],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],94],[[],94],[[],94],[[],94],[[],94],[[]],[[]],[[]],[[]],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[[],[[214,[232]]]],[[],[[214,[231]]]],[[],[[214,[230]]]],[[],[[214,[228]]]],[[],94],[[],94],[[],94],[[],94],[[],94],[[],94],[28,94],[28,94],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],94],[[],94],[[],94],[[],94],0,[254,254],[[254,48]],[[254,254]],[[]],[[]],[254,254],[[]],[[],254],[[254,254]],[[254,48],254],[[48,48,48]],[[254,254],2],[[254,8],9],[[254,8],9],[48,254],[[]],[244,[[10,[254]]]],[[254,3]],[[]],[254,2],[[254,254]],[[254,48]],[[]],[[]],[254],[[254,254],[[1,[74]]]],[[48,48]],[[48,48,48,48,48],254],[48],[254,254],[[254,254]],[[48,48,48]],[[48,48,48]],[[]],[[],208],[[],10],[[],10],[[48,48]],[[48,48]],[[],11],0,[255,255],[[255,255]],[[255,255]],[[]],[[]],[255,255],[[]],[[255,255],74],0,[[255,255]],[[255,255]],[[255,255],2],[[255,8],9],[[]],[255],[[]],[[],255],[[],255],[[255,255]],[[255,255]],[255],[[],255],[[],255],0,[[],255],[[255,255],[[1,[74]]]],[[255,255]],[[255,255]],[[]],[[],10],[[],10],[[],11],[[],255],0,0,[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],256],[[],257],[258,258],[259,259],[260,260],[[]],[[]],[[]],[[],[[10,[261]]]],[[258,8],9],[[259,8],9],[[260,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[258,262],0,0,[258],[244,258],[[],[[10,[3,261]]]],[263,208],[264,[[10,[261]]]],[264,[[10,[261]]]],[[],[[10,[261]]]],[13,[[10,[3,261]]]],[208,[[10,[3,261]]]],[[],[[10,[3,261]]]],[258],[[],1],[[],1],0,[[258,3],13],[28,265],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],[[10,[3,261]]]],[[],[[10,[261]]]],[[],[[10,[261]]]],[266,[[10,[261]]]],[[],[[10,[3,261]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[267,267],267],[3],[[],268],[[],267],[[3,269]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[271,[[0,[5,270]]]]],[[271,[[0,[5,270]]]]]],[[]],[[[271,[[0,[7,270]]]],8],9],[[]],[[]],[[[13,[270]]],[[271,[270]]]],0,[[[271,[270]]],[[13,[3]]]],0,[[]],[[],10],[[],10],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[1]]],[[1,[222]]]],[[[1,[1]]],[[1,[222]]]],[[[1,[1]]],[[1,[222]]]],[[[1,[1]]],[[1,[222]]]],[[[1,[1]]],[[1,[222]]]],[[[1,[1]]],[[1,[222]]]],[[],222],[[],222],[[],222],[[],222],[[],222],[[],222],[[],223],[[],223],[[],223],[[],223],[[],223],[[],223],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[267,267],[272,272],[273,273],[274,274],[275,275],[276,276],[277,277],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[272,272],74],[[273,273],74],[[274,274],74],[[275,275],74],[[276,276],74],[[277,277],74],[[267,267],267],[[267,267],267],[[267,267],[[267,[272]]]],[[267,267],[[267,[273]]]],[[267,267],[[267,[274]]]],[[267,267],[[267,[275]]]],[[267,267],[[267,[276]]]],[[267,267],[[267,[277]]]],[[],278],[3],[3],[3],[3],[3],[3],[3],[[278,3]],[[267,267],2],[[272,272],2],[[273,273],2],[[274,274],2],[[275,275],2],[[276,276],2],[[277,277],2],[[268,8],9],[[279,8],9],[[267,8],9],[[278,8],9],[[272,8],9],[[273,8],9],[[274,8],9],[[275,8],9],[[276,8],9],[[277,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[279,267],[267],[272],[273],[274],[275],[276],[277],0,[268,267],[[],268],[[],[[268,[272]]]],[[],[[268,[273]]]],[[],[[268,[274]]]],[[],[[268,[275]]]],[[],[[268,[276]]]],[[],[[268,[277]]]],[[],267],[[],[[267,[272]]]],[[],[[267,[273]]]],[[],[[267,[274]]]],[[],[[267,[275]]]],[[],[[267,[276]]]],[[],[[267,[277]]]],0,0,0,[[3,269]],[[3,269]],[[3,269]],[[3,269]],[[3,269]],[[3,269]],[[3,269]],[3],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[268,3],[279,3],[[279,279],3],[278],[[278,3]],[[278,3]],[13,268],[[],279],[3,267],[[],278],[[272,272],[[1,[74]]]],[[273,273],[[1,[74]]]],[[274,274],[[1,[74]]]],[[275,275],[[1,[74]]]],[[276,276],[[1,[74]]]],[[277,277],[[1,[74]]]],0,[268,279],[279,279],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[245,[3]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],[[[280,[5]]],[[280,[5]]]],[[]],[[[280,[7]],8],9],[[]],[[280,3]],[[]],[[[280,[111]]],[[13,[3]]]],[[[13,[111]]],[[280,[111]]]],0,0,0,[[]],[[],10],[[],10],[[],11],0,[[]],[[]],[281,281],[[]],[[281,8],9],[[]],[[281,3],3],[[]],[[],281],[270,[[13,[3]]]],[[]],[[],10],[[],10],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],223],0,0,0,0,0,0,[[],282],0,0,0,0,[[]],[[]],0,0,[[]],0,[94,1],[94,1],[94,1],[94,1],[[]],0,0,0,0,0,0,[2,[[10,[261]]]],0,0,0,0,[[]],0,[[],1],0,0,0,0,[269],0,0,[263,208],[263,208],[[],208],[[],208],[[],208],0,[[],1],0,0,0,[13],0,0,0,0,0,0,0,[[],[[1,[94]]]],[[],[[1,[94]]]],[[],[[1,[94]]]],[[],[[1,[94]]]],0,[[],[[13,[102]]]],0,0,0,0,[[],223],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[94,1],[94,1],[94,1],[94,1],[[],[[1,[94]]]],[[],[[1,[94]]]],[[],[[1,[94]]]],[[],[[1,[94]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[283,283],74],[[283,284],102],[[],285],[[]],[[]],[[]],[[283,283],2],0,0,[[283,8],9],[[285,8],9],[[284,8],9],[[]],[[]],[[]],[[],[[13,[102]]]],[[],[[13,[102]]]],[[],[[13,[102]]]],0,0,0,[[]],[[]],[[]],[285,[[13,[102]]]],0,[[283,28,94]],[[],284],[[283,285]],[[283,283],[[1,[74]]]],0,[[285,2]],[[285,28,94]],[[285,102]],[284,2],[284,283],[284,102],[13],[[],208],[[],208],[[],208],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],[[13,[102]]]],0,0,0,0,[[]],[[]],[[],286],0,[[286,8],9],[[]],[[]],[[286,48,48],2],[286,2],0,0,0,[286,286],[[],286],0,0,[[286,48],286],[[286,48],286],[[286,48],286],[[286,3],286],0,0,0,0,[[],10],[[],10],[[],11],0,0,[2,[[10,[261]]]],0,0,[[]],0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],0,[[]],[[]],[[]],0,[[]],[[]],[[[287,[5,5]]],[[287,[5,5]]]],[[]],[[287,287],74],[[],[[287,[55,55]]]],[[287,287],2],[[[287,[7,7]],8],9],[[]],[[]],[[287,287],[[1,[74]]]],[[]],[[],10],[[],10],[[],11],0,0,0,0,0,0,0,[[]],[[]],[269,269],[[]],[[],269],[[269,8],9],[[]],[[269,288]],[[269,48],2],[[269,288],[[289,[288]]]],[[]],[28,269],[[269,28],28],[269,28],[269,48],0,[[269,28,3],[[13,[28]]]],[269],[[],269],[[]],[[],10],[[],10],[[],11],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[290,[5]]],[[290,[5]]]],[[[291,[5,5]]],[[291,[5,5]]]],[[]],[[]],[[[290,[111]],290],74],[[[291,[111,111]],291],74],0,[[[290,[112]],290],2],[[[291,[112,112]],291],2],[[[289,[7,[0,[7,[288,[7]]]]]],8],9],[[[290,[7]],8],9],[[[291,[7,7]],8],9],[28],[[]],[[]],[[]],[[[290,[182]]]],[[[291,[182,182]]]],[[]],[[]],[[]],[[]],[[],291],[[[289,[288]]],1],[[[290,[113]],290],[[1,[74]]]],[[[291,[113,113]],291],[[1,[74]]]],[269],[[290,269]],[[291,269]],[269,289],[269,289],[[269,28],28],0,0,0,0,0,[[],28],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[292,292],[293,293],[294,294],[295,295],[296,296],[297,297],[298,298],[[[299,[5]]],[[299,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[292,8],9],[[293,8],9],[[294,8],9],[[295,8],9],[[296,8],9],[[297,8],9],[[298,8],9],[[[299,[7]],8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],1],[292,1],[293,1],[294,1],[296,1],[297,1],[[[299,[300]]],1],[[[299,[244]]],1],[3,297],[[],299],[262,1],0,[263,208],[263,208],[[],208],[[],208],[[],208],[[],1],[[],1],[[],1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,[[]],0,0,[[],282],[[]],[[]],[[[282,[5]]],[[282,[5]]]],[[]],[[282,282],74],[[],[[282,[55]]]],[[282,282],2],[[[282,[7]],8],9],[[]],[282],[[]],[[282,282],[[1,[74]]]],[[]],[[],10],[[],10],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[13,[28]]]],0,0,0,0,0,0,0,0,0,[[],3],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[301,301],[302,302],[303,303],[[[305,[[0,[5,304]]]]],[[305,[[0,[5,304]]]]]],[[[306,[[0,[5,304]]]]],[[306,[[0,[5,304]]]]]],[[]],[[]],[[]],[[]],[[]],[3,28],[3,28],0,[[301,3,3]],0,0,0,[[301,8],9],[[302,8],9],[[303,8],9],[[[305,[[0,[7,304]]]],8],9],[[[306,[[0,[7,304]]]],8],9],[[]],[[]],[[]],[[]],[[]],[[]],[303,[[305,[304]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[305,[304]],3,3],3],[301,3],[302,3],[303,3],[[3,193],301],[193,302],[[3,193],303],[[]],0,[[302,3,3,12]],[[302,3,12]],[[302,3,3]],[[303,3,3,12]],0,[[[13,[28]]]],[[[13,[28]]]],[[302,3,12]],[[302,3,12]],[[302,3,3]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[303,3,3]],0,0,0,[[],3],[[],3],0,0,0,[[[1,[1]]],[[1,[222]]]],[[],[[222,[[13,[28]]]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,13],[[]],[[]],[[]],[[]],[[[307,[[288,[3]]]],269],193],[[[308,[[288,[3]]]],269],193],[[[309,[[288,[3]]]],269],193],[[[310,[[288,[3]]]],269],193],[[3,269],13],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],[[311,3,193]],[[311,3,3,3,193]],[[311,3,3,193]],[[]],0,[[]],[[311,3,3],3],[[3,193],311],0,[[311,3,3,2,12]],[[311,3,3,2,12,12]],0,[[],10],[[],10],[[],11],[[311,3,3,2,12]],0,0,[[312,3]],[[312,3,3]],[[]],[[]],[[[312,[[0,[5,70]],[0,[5,42]]]]],[[312,[[0,[5,70]],[0,[5,42]]]]]],[[]],[[312,201,3]],0,[[312,3,3]],[[312,3,201],3],0,[[[312,[[0,[7,70]],[0,[7,42]]]],8],9],[[]],0,[[]],[312],[193,312],[[312,3,201],3],[312],0,[[]],[[],10],[[],10],[[],11],0,0,0,[[]],[[]],[209,209],[[]],[[209,209],2],[[209,8],9],[[]],[209],[[]],[[]],[[],10],[[],10],[[],11],[[193,3,3]],[[193,3,3]],0,0,0,0,0,[[]],[[]],[[],313],[[313,8],9],[[]],[[313,193],28],[[313,193,3,3,3],28],[[313,193,3,3],28],[[]],[28,28],[[28,28],28],[[28,28],28],[[],313],0,0,[[],313],[[],10],[[],10],[[],11],[28,313]],"p":[[4,"Option"],[15,"bool"],[15,"usize"],[3,"RangeChminChmaxAdd"],[8,"Clone"],[3,"RangeSumRangeChminChmaxAdd"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"FnMut"],[3,"Vec"],[3,"BabyStepGiantStep"],[3,"BitDp"],[3,"Subsets"],[3,"Combinations"],[8,"Iterator"],[8,"MIntBase"],[3,"IndependentSubSet"],[3,"BTreeSet"],[3,"ConvexHullTrick"],[15,"i64"],[3,"ChtLine"],[3,"EsperEstimator"],[3,"EsperSolver"],[3,"ImpartialGameAnalyzer"],[15,"u64"],[3,"ImpartialGamer"],[3,"PartisanGameAnalyzer"],[3,"PartisanGamer"],[3,"RhoPath"],[3,"SlideMinimum"],[3,"Run"],[3,"SqrtDecompositionBuckets"],[3,"XorBasis"],[8,"IntoIterator"],[3,"ZeroSumGameAnalyzer"],[3,"ZeroSumGamer"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"Fn"],[3,"Item"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[15,"f64"],[3,"LexicographicalSubsequence"],[3,"LongestIncreasingSubsequence"],[3,"NonNull"],[3,"Accumulate"],[3,"MemoryPool"],[3,"BoxAllocator"],[8,"Default"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"FunctionalAutomaton"],[3,"MappingAutomaton"],[3,"AlphabetMappingAutomaton"],[3,"LexicographicalAutomaton"],[3,"RevLexicographicalAutomaton"],[3,"MonoidalAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"Automatondp"],[3,"HashMap"],[3,"BinaryIndexedTree"],[8,"Group"],[8,"Monoid"],[3,"BinaryIndexedTree2D"],[3,"BitVector"],[3,"BitSet"],[4,"Ordering"],[3,"VecCompress"],[3,"HashCompress"],[3,"Tag"],[3,"CompressedBinaryIndexedTree"],[3,"CompressedSegmentTree"],[3,"Tag"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"Drain"],[3,"Iter"],[3,"Iter"],[3,"Keys"],[3,"Keys"],[3,"Range"],[3,"Values"],[3,"Values"],[3,"DisjointSparseTable"],[3,"FibonacciHasheru32"],[3,"FibonacciHasheru64"],[15,"u32"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u8"],[3,"Static2DTree"],[3,"Range"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"Line"],[3,"Query"],[3,"Slope"],[3,"LineSet"],[8,"Ord"],[8,"PartialEq"],[8,"PartialOrd"],[3,"MergingUnionFind"],[4,"UfCell"],[3,"RootData"],[3,"Ref"],[3,"RefMut"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"IterMut"],[3,"ValuesMut"],[3,"SegmentTree"],[3,"SegmentTreeMap"],[3,"DequeAggregation"],[3,"QueueAggregation"],[3,"SlopeTrick"],[3,"Root"],[3,"NodeRef"],[3,"Node"],[4,"Owned"],[3,"DataMut"],[3,"Mut"],[3,"Immut"],[3,"NodeRange"],[4,"Dying"],[3,"LazyAggSplay"],[3,"SeekLeft"],[3,"SeekRight"],[4,"Bound"],[3,"SplaySequence"],[3,"LazyAggElement"],[3,"SeekBySize"],[3,"SeekByAccCond"],[3,"SeekByRaccCond"],[3,"SizedSplay"],[3,"SplayMap"],[3,"Iter"],[3,"SeekByKey"],[3,"SeekBySize"],[3,"Trie"],[3,"UnionFind"],[3,"WaveletMatrix"],[8,"RankSelectDictionaries"],[3,"WeightedUnionFind"],[6,"Point"],[3,"Approx"],[3,"Complex"],[4,"Ccw"],[3,"Circle"],[3,"Line"],[3,"LineSegment"],[3,"SparseGraph"],[3,"AdjacencyListGraph"],[3,"Adjacency"],[8,"IterScan"],[3,"AdjacencyListGraphScanner"],[3,"BipartiteMatching"],[3,"VecDeque"],[4,"Either"],[3,"UsizeGraph"],[3,"ClosureGraph"],[3,"EdgeListGraph"],[3,"Iter"],[3,"EdgeListGraphScanner"],[3,"VIndexWithValue"],[3,"VIndexWithEIndexValue"],[3,"VIndex"],[3,"VIndexWithEIndex"],[15,"never"],[8,"Hash"],[3,"AdjacencyViewIterFromEindex"],[3,"AdjacencyViewIterFromValue"],[4,"Adj4"],[3,"GridGraph"],[3,"GridAdjacency"],[4,"Adj8"],[3,"GridVertices"],[4,"GridDirection"],[3,"GridDirectionIter"],[3,"LowLink"],[6,"UndirectedSparseGraph"],[3,"DinicBuilder"],[3,"Dinic"],[6,"BidirectionalSparseGraph"],[3,"PrimalDualBuilder"],[3,"PrimalDual"],[3,"ProjectSelectionProblem"],[3,"SparseGraphBuilder"],[3,"Adjacency"],[4,"DirectedEdge"],[4,"UndirectedEdge"],[4,"BidirectionalEdge"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[6,"DirectedSparseGraph"],[3,"String"],[4,"TreeCenter"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[8,"MulAssign"],[3,"BarrettReduction"],[3,"MInt"],[3,"UnsafeCell"],[3,"IndexCalculus"],[3,"IndexCalculusWithPrimitiveRoot"],[3,"QdrtPowPrec"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"PowPrec"],[3,"Cell"],[3,"LocalKey"],[3,"Wrapping"],[3,"FormalPowerSeries"],[3,"IterMut"],[3,"Matrix"],[4,"Modulo2013265921"],[3,"NttCache"],[4,"Modulo1811939329"],[4,"Modulo2113929217"],[4,"Modulo998244353"],[3,"Polynomial"],[8,"Zero"],[8,"Add"],[8,"Mul"],[8,"One"],[8,"Copy"],[3,"EulerPhiTable"],[3,"PrimeList"],[3,"PrimeListTrialDivision"],[3,"PrimeTable"],[4,"FpCategory"],[15,"str"],[3,"RangeInclusive"],[3,"DoubleDouble"],[3,"Float32"],[3,"Float64"],[15,"f32"],[3,"Saturating"],[3,"Wrapping"],[3,"ExtendedGcd"],[3,"Error"],[3,"QuadDouble"],[3,"Rational"],[3,"Bytes"],[3,"Chain"],[3,"Scanner"],[4,"Usize1"],[4,"Chars"],[3,"Error"],[3,"ScannerIter"],[8,"Read"],[3,"BorrowedCursor"],[3,"Take"],[3,"Arguments"],[3,"Hashed"],[3,"HashedSequence"],[3,"Xorshift"],[8,"Eq"],[3,"KnuthMorrisPratt"],[4,"Mersenne61x1"],[4,"Mersenne61x2"],[4,"Mersenne61x3"],[4,"Gf2_63x1"],[4,"Gf2_63x2"],[4,"Gf2_63x3"],[3,"RollingHashPrecalc"],[3,"HashedRange"],[3,"SuffixArray"],[3,"Zarray"],[3,"TotalOrd"],[4,"HuffmanTree"],[3,"BitReader"],[3,"BitWriter"],[3,"SimuratedAnnealing"],[3,"PartialIgnoredOrd"],[8,"RandomSpec"],[3,"RandIter"],[3,"NotEmptySegment"],[3,"RandRange"],[3,"CharWithBase"],[3,"CharsWithBase"],[3,"ByteWithBase"],[4,"Bytes"],[3,"BytesWithBase"],[3,"Collect"],[3,"SizedCollect"],[3,"Splitted"],[15,"char"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[8,"LcaMonoidDispatch"],[3,"LowestCommonAncestor"],[3,"LcaMonoid"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[3,"HeavyLightDecomposition"],[3,"ReRooting"],[3,"TreeHasher"],[8,"MonoidAction"],[8,"SemiRing"],[8,"Magma"],[3,"AddMulOperation"],[3,"EmptyLazy"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[3,"FindMajorityOperation"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[8,"Invertible"],[8,"Unital"],[8,"BitXorIdentity"],[3,"ConcatenateOperation"],[3,"SortedConcatenateOperation"],[4,"PermutationOperation"],[8,"Field"],[8,"Ring"],[4,"Gf2_63"],[4,"Mersenne61"],[4,"Mersenne61Add"],[8,"MoSolver"],[8,"SqrtDecomposition"],[8,"ImpartialGame"],[8,"ZeroSumGame"],[8,"PartisanGame"],[3,"SubsetTransform"],[3,"SupersetTransform"],[8,"SliceSortExt"],[8,"SliceBisectExt"],[8,"SliceCombinationsExt"],[8,"Bisect"],[8,"Trisect"],[8,"Automaton"],[8,"Allocator"],[8,"Compressor"],[8,"ToDigitSequence"],[8,"SplaySeeker"],[8,"SplaySpec"],[8,"ApproxOrd"],[8,"Adjacencies"],[8,"AdjacenciesWithEindex"],[8,"AdjacenciesWithValue"],[8,"AdjacencyIndexWithValue"],[8,"AdjacencyView"],[8,"EIndexedGraph"],[8,"AdjacencyIndexWithEindex"],[8,"Edges"],[8,"EdgeMap"],[8,"ShortestPathSemiRing"],[8,"GraphBase"],[8,"AdjacencyIndex"],[8,"Vertices"],[8,"VertexMap"],[8,"SparseGraphConstruction"],[8,"EdgeSize"],[8,"EdgeView"],[8,"VertexSize"],[8,"VertexView"],[3,"StandardSp"],[3,"OptionSp"],[3,"PathFoldingSp"],[8,"ShortestPathExt"],[8,"ConvolveSteps"],[8,"FormalPowerSeriesCoefficientSqrt"],[4,"RotateCache"],[4,"ConvolveRealFft"],[3,"Convolve"],[8,"NttModulus"],[8,"Float"],[8,"IntBase"],[8,"Unsigned"],[8,"Signed"],[8,"DiscreteSteps"],[8,"BinaryRepr"],[8,"RangeBoundsExt"],[8,"MIntConvert"],[8,"Bounded"],[3,"Modulo2"],[4,"Modulo998244353"],[4,"Modulo1000000007"],[4,"Modulo1000000009"],[4,"DynModuloU32"],[4,"DynModuloU64"],[6,"DynMIntU32"],[6,"DynMIntU64"],[8,"MontgomeryReduction32"],[8,"Write"],[8,"RollingHasher"],[8,"MarkedIterScan"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[8,"AsTotalOrd"],[8,"PartialOrdExt"],[8,"SerdeByteStr"],[8,"CharTools"],[8,"IterPrint"],[8,"BTreeMapExt"],[8,"BTreeSetExt"],[8,"NotEmptyStep64"],[4,"LcaMonoidDefaultId"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,5,2,2,2,5,5,2,5,5,2,2,2,5,5,5,5,2,2,2,2,5,5,2,2,2,2,5,5,2,2,2,2,2,5,5,2,2,2,2,5,5,2,5,5,2,2,2,5,5,5,5,2,5,5,2,2,2,2,5,5,2,2,2,2,5,5,2,2,2,2,2,2,2,5,5,0,0,0,0,2,2,5,5,5,5,2,2,5,5,2,2,2,2,5,5,5,5,2,2,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,5,2,2,6,2,2,2,5,5,2,5,5,2,5,5,2,2,5,5,5,2,5,2,2,5,5,2,2,5,5,2,2,2,5,5,2,2,5,5,2,2,5,5,2,2,5,5,2,2,2,5,5,2,2,5,5,2,2,2,2,2,5,5,2,5,5,2,2,5,5,2,5,5,2,5,5,0,0,5,5,5,5,0,0,0,2,5,5,2,5,5,2,5,5],"n":["datastructure","graph","math","sample","string","deque_operate_all_composite","dynamic_sequence_range_affine_range_sum","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_chmin_chmax_add_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","DequeAggregation","LinearOperation","MInt","MInt998244353","deque_operate_all_composite","test_deque_operate_all_composite","MInt998244353","RangeSumRangeLinear","SplaySequence","dynamic_sequence_range_affine_range_sum","test_dynamic_sequence_range_affine_range_sum","LineSet","line_add_get_min","test_line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","test_point_add_range_sum_binary_indexed_tree","test_point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","test_point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","test_queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","test_range_affine_range_sum","LazySegmentTree","RangeChminChmaxAdd","RangeSumRangeChminChmaxAdd","Saturating","range_chmin_chmax_add_range_sum","test_range_chmin_chmax_add_range_sum","WaveletMatrix","range_kth_smallest","test_range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","test_staticrmq_disjoint_sparse_table","test_staticrmq_segment_tree","UnionFind","test_unionfind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","test_vertex_add_path_sum","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","test_vertex_add_subtree_sum","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","test_vertex_set_path_composite","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","test_bipartitematching","test_bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","test_directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","test_lca_euler_tour","test_lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","test_scc","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","log_of_formal_power_series","min_of_mod_of_linear","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","test_convolution_mod","Convolve","ConvolveSteps","M","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","test_convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","test_discrete_logarithm_mod","PrimeList","enumerate_primes","test_enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","test_exp_of_formal_power_series","factorize","prime_factors_flatten","test_factorize","MInt998244353","berlekamp_massey","find_linear_recurrence","test_find_linear_recurrence","Fps998244353","MInt998244353","inv_of_formal_power_series","test_inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","test_kth_term_of_linearly_recurrent_sequence","Fps998244353","MInt998244353","log_of_formal_power_series","test_log_of_formal_power_series","binary_search","floor_sum_range_freq","min_of_mod_of_linear","test_min_of_mod_of_linear","Fps998244353","MInt998244353","multipoint_evaluation","test_multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","test_polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","test_pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","test_sharp_p_subset_sum","DynMIntU32","sqrt_mod","test_sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","test_sqrt_of_formal_power_series","floor_sum","sum_of_floor_of_linear","test_sum_of_floor_of_linear","TwoSatisfiability","test_two_sat","two_sat","aplusb","many_aplusb","aplusb","test_aplusb","many_aplusb","test_many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","test_number_of_substrings","SuffixArray","suffixarray","test_suffixarray","Zarray","test_zalgorithm","zalgorithm"],"q":["library_checker","","","","","library_checker::datastructure","","","","","","","","","","","","","","library_checker::datastructure::deque_operate_all_composite","","","","","","library_checker::datastructure::dynamic_sequence_range_affine_range_sum","","","","","library_checker::datastructure::line_add_get_min","","","library_checker::datastructure::point_add_range_sum","","","","","","","library_checker::datastructure::point_set_range_composite","","","","","","library_checker::datastructure::queue_operate_all_composite","","","","","","library_checker::datastructure::range_affine_range_sum","","","","","","","library_checker::datastructure::range_chmin_chmax_add_range_sum","","","","","","library_checker::datastructure::range_kth_smallest","","","library_checker::datastructure::staticrmq","","","","","","","library_checker::datastructure::unionfind","","","library_checker::datastructure::vertex_add_path_sum","","","","","","library_checker::datastructure::vertex_add_subtree_sum","","","","","","library_checker::datastructure::vertex_set_path_composite","","","","","","","","","library_checker::graph","","","","library_checker::graph::bipartitematching","","","","","","library_checker::graph::directedmst","","","","library_checker::graph::lca","","","","","","","","library_checker::graph::scc","","","","library_checker::math","","","","","","","","","","","","","","","","","","","library_checker::math::convolution_mod","","","","","","library_checker::math::convolution_mod_1000000007","","","","","","","","library_checker::math::discrete_logarithm_mod","","","library_checker::math::enumerate_primes","","","library_checker::math::exp_of_formal_power_series","","","","library_checker::math::factorize","","","library_checker::math::find_linear_recurrence","","","","library_checker::math::inv_of_formal_power_series","","","","library_checker::math::kth_term_of_linearly_recurrent_sequence","","","","","library_checker::math::log_of_formal_power_series","","","","library_checker::math::min_of_mod_of_linear","","","","library_checker::math::multipoint_evaluation","","","","library_checker::math::polynomial_taylor_shift","","","","","library_checker::math::pow_of_formal_power_series","","","","library_checker::math::sharp_p_subset_sum","","","","","","","library_checker::math::sqrt_mod","","","library_checker::math::sqrt_of_formal_power_series","","","","library_checker::math::sum_of_floor_of_linear","","","library_checker::math::two_sat","","","library_checker::sample","","library_checker::sample::aplusb","","library_checker::sample::many_aplusb","","library_checker::string","","","library_checker::string::number_of_substrings","","","library_checker::string::suffixarray","","","library_checker::string::zalgorithm","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","✅  AC  50ms","","","","","✅  AC  3121ms","","","✅  AC  399ms","","","","","✅  AC  81ms","✅  AC  122ms","","","","","","","✅  AC  204ms","","","","","","✅  AC  48ms","","","","","","","✅  AC  919ms","","","","","","✅  AC  1325ms","","","✅  AC  372ms","","","","","✅  AC  165ms","✅  AC  138ms","","","","","✅  AC  21ms","","","","","","✅  AC  348ms","","","","","","✅  AC  185ms","","","","","","","","","✅  AC  211ms","","","","","","","✅  AC  157ms","✅  AC  1155ms","","","","","✅  AC  149ms","","","","","","✅  AC  535ms","✅  AC  597ms","","","","","✅  AC  222ms","","","","","","","","","","","","","","","","","","","","","","","","","✅  AC  206ms","","","","","","","","✅  AC  307ms","","","✅  AC  3ms","","","✅  AC  1448ms","","","","✅  AC  471ms","","✅  AC  104ms","","","","","✅  AC  96ms","","","","✅  AC  137ms","","","","","✅  AC  1500ms","","","","✅  AC  210ms","","","","✅  AC  1264ms","","","","✅  AC  571ms","","","","","✅  AC  134ms","","","","✅  AC  751ms","","","","","","","✅  AC  505ms","","","✅  AC  93ms","","","","✅  AC  320ms","","","✅  AC  39ms","","","","✅  AC  272ms","","","✅  AC  0ms","","✅  AC  175ms","","","","","","✅  AC  589ms","","","✅  AC  624ms","","","","✅  AC  34ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[]],0,0,0,[[1,2]],[[]],0,[[1,2]],[[]],0,0,0,[[1,2]],[[1,2]],[[]],[[]],0,0,0,0,[[1,2]],[[]],0,0,0,0,[[1,2]],[[]],0,0,0,0,0,[[1,2]],[[]],0,0,0,0,[[1,2]],[[]],0,[[1,2]],[[]],0,0,0,[[1,2]],[[1,2]],[[]],[[]],0,[[]],[[1,2]],0,0,0,0,[[]],[[1,2]],0,0,0,0,[[]],[[1,2]],0,0,0,0,0,0,0,[[]],[[1,2]],0,0,0,0,0,0,[[1,2]],[[1,2]],[[]],[[]],0,0,[[1,2]],[[]],0,0,0,0,[[1,2]],[[1,2]],[[]],[[]],0,0,[[1,2]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[]],0,0,0,0,0,0,[[1,2]],[[]],0,[[1,2]],[[]],0,[[1,2]],[[]],0,0,[[1,2]],[[]],[[1,2]],0,[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,0,0,0,0,[[1,2]],[[]],0,[[1,2]],[[]],0,0,[[1,2]],[[]],0,[[1,2]],[[]],0,[[]],[[1,2]],0,0,[[1,2]],[[]],[[1,2]],[[]],0,0,0,0,[[1,2]],[[]],0,[[1,2]],[[]],0,[[]],[[1,2]]],"p":[[8,"Read"],[8,"Write"]],"a":{"verify":[23,28,31,36,37,44,50,57,63,66,71,72,77,83,89,98,105,106,111,117,118,123,148,156,159,162,166,168,173,177,182,186,190,194,199,203,210,213,217,220,224,227,229,235,238,242]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
