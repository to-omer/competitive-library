var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,5,2,5,2,5,5,2,2,5,2,5,2,5,2,5,5,2,5,2,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,2,5,2,2,5,2,2,5,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,5,5,2,2,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,5,5,2,2,2,2,5,2,2,2,2,2,5,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,5,2,5,5,2,2,5,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,2,2,5,2,2,5,2,2,5,2,2,5,0,5],"n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","dpl_1_e","levenshtein_distance","KnapsackPloblemSmallValue","dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","dpl_3_a","largest_square","dpl_3_b","largest_rectangle_in_grid","dpl_3_c","largest_rectangle","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","MinOperation","SegmentTree","dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","Static2DTree","dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","dsl_3_b","dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","EdgeListGraphScanner","grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","DirectedGraphScanner","grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","itp1_1_a","itp1_1_a"],"q":["aizu_online_judge","","","","aizu_online_judge::dpl","","","","","","","","","","","","aizu_online_judge::dpl::dpl_1_a","aizu_online_judge::dpl::dpl_1_b","","aizu_online_judge::dpl::dpl_1_c","","aizu_online_judge::dpl::dpl_1_d","","aizu_online_judge::dpl::dpl_1_e","","aizu_online_judge::dpl::dpl_1_f","","aizu_online_judge::dpl::dpl_1_g","","aizu_online_judge::dpl::dpl_1_h","","aizu_online_judge::dpl::dpl_1_i","","aizu_online_judge::dpl::dpl_3_a","","aizu_online_judge::dpl::dpl_3_b","","aizu_online_judge::dpl::dpl_3_c","","aizu_online_judge::dsl","","","","","","","","","","","","","","","","","","aizu_online_judge::dsl::dsl_1_a","","aizu_online_judge::dsl::dsl_1_b","","","aizu_online_judge::dsl::dsl_2_a","","","aizu_online_judge::dsl::dsl_2_b","","","aizu_online_judge::dsl::dsl_2_c","","aizu_online_judge::dsl::dsl_2_d","","","aizu_online_judge::dsl::dsl_2_e","","","aizu_online_judge::dsl::dsl_2_f","","","aizu_online_judge::dsl::dsl_2_g","","","aizu_online_judge::dsl::dsl_2_h","","","aizu_online_judge::dsl::dsl_2_i","","","aizu_online_judge::dsl::dsl_3_a","","","aizu_online_judge::dsl::dsl_3_b","aizu_online_judge::dsl::dsl_3_c","aizu_online_judge::dsl::dsl_3_d","","","aizu_online_judge::dsl::dsl_4_a","aizu_online_judge::dsl::dsl_5_a","aizu_online_judge::dsl::dsl_5_b","aizu_online_judge::grl","","","","","","","","","","","","","","","","","","aizu_online_judge::grl::grl_1_a","","","","","","","","aizu_online_judge::grl::grl_1_b","","","","","aizu_online_judge::grl::grl_1_c","","","","","","aizu_online_judge::grl::grl_2_a","","aizu_online_judge::grl::grl_2_b","","","","aizu_online_judge::grl::grl_3_a","","","aizu_online_judge::grl::grl_3_b","","","aizu_online_judge::grl::grl_3_c","","","aizu_online_judge::grl::grl_4_a","","aizu_online_judge::grl::grl_4_b","","","aizu_online_judge::grl::grl_5_a","","","aizu_online_judge::grl::grl_5_b","","","","aizu_online_judge::grl::grl_5_c","","","","","aizu_online_judge::grl::grl_5_d","","","","","","aizu_online_judge::grl::grl_5_e","","","","","","","aizu_online_judge::grl::grl_6_a","","","aizu_online_judge::grl::grl_6_b","","","aizu_online_judge::grl::grl_7_a","","","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a"],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  2ms","","✅  AC  1ms","","✅  AC  3ms","","✅  AC  6ms","✅  AC  5ms","","","✅  AC  1ms","","✅  AC  6ms","","✅  AC  68ms","","✅  AC  0ms","✅  AC  23ms","","✅  AC  28ms","","✅  AC  2ms","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  8ms","","","✅  AC  22ms","","","✅  AC  14ms","","","✅  AC  17ms","","✅  AC  484ms","","","✅  AC  80ms","","","✅  AC  36ms","","","✅  AC  88ms","","","✅  AC  42ms","","","✅  AC  40ms","","","✅  AC  66ms","","","✅  AC  4ms","✅  AC  2ms","✅  AC  288ms","","","✅  AC  96ms","✅  AC  70ms","✅  AC  4ms","✅  AC  8ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  74ms","✅  AC  84ms","","","","","✅  AC  11ms","","","","","","✅  AC  8ms","","✅  AC  26ms","","","","✅  AC  0ms","","","✅  AC  2ms","","","✅  AC  2ms","","","✅  AC  7ms","","✅  AC  0ms","","✅  AC  3ms","","","","✅  AC  9ms","","","","✅  AC  2ms","","","","","✅  AC  107ms","","","","","","✅  AC  41ms","","","","","","","✅  AC  207ms","","","✅  AC  0ms","","","✅  AC  0ms","","","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,[[1,2]],0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,1,1],3],0,0,[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"],[15,"bool"]],"a":{"verify":[16,18,20,22,23,26,28,30,32,33,35,37,58,61,64,67,69,72,75,78,81,84,87,90,91,92,95,96,97,98,123,124,129,135,137,141,144,147,150,152,154,158,162,167,173,180,183,186,189,191]}},\
"competitive":{"doc":"github","t":[14,0,0,14,14,14,14,14,14,0,14,14,0,14,14,14,14,0,0,14,14,14,14,14,0,14,14,14,14,14,14,14,0,0,14,14,14,14,14,14,14,14,0,14,0,0,16,16,8,8,3,16,3,8,8,3,8,3,8,3,3,8,3,8,3,3,8,8,8,8,3,3,16,16,8,3,3,8,8,16,3,4,3,3,3,3,3,3,3,8,8,8,16,16,3,8,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,16,16,3,8,3,3,3,3,3,16,16,8,3,8,3,3,16,3,8,3,8,3,16,3,3,3,16,8,3,11,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,12,11,10,5,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,5,5,10,5,11,11,10,10,10,5,10,10,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,16,3,3,8,3,3,3,3,3,3,3,3,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,16,3,8,3,3,3,3,3,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,8,4,3,13,13,3,3,13,13,13,6,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,16,16,16,16,16,8,8,8,3,8,8,8,3,3,8,3,3,4,6,6,3,3,3,3,4,6,6,16,16,8,16,3,3,8,8,8,8,16,8,3,3,3,3,3,3,3,8,8,3,3,8,3,3,3,16,3,3,4,6,6,3,3,16,16,3,3,3,16,8,8,8,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,12,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,12,11,11,10,11,11,11,12,10,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,12,11,3,6,8,3,16,3,8,8,6,6,6,18,18,3,3,3,3,3,3,3,3,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,12,12,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,5,5,5,11,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,11,5,11,5,5,10,11,11,11,11,5,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,8,8,3,18,8,3,18,18,16,3,18,18,18,18,18,18,18,18,18,8,3,3,18,16,8,18,18,18,18,18,18,18,18,18,18,18,18,3,8,8,18,18,8,18,3,18,8,18,3,8,16,18,8,16,3,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,10,11,11,10,11,11,11,11,11,0,10,10,10,10,10,10,10,11,11,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,6,6,4,4,6,6,6,6,4,4,3,4,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,4,4,4,4,8,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,3,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,10,5,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,18,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,8,8,3,4,3,8,3,4,3,3,8,8,8,18,8,3,16,16,16,3,8,3,8,18,3,3,3,3,3,16,3,4,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,12,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,10,11,11,12,11,11,11,11,11,5,5,5,5,5,10,11,11,14,14,11,11,11,11,11,11,11,12,12,11,12,12,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,3,3,3,3,3,4,8,3,3,13,3,3,3,3,4,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,12,12,12],"n":["add_assign","algebra","algorithm","automaton","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","iter_print","math","max","memorize","min","minmax","mlambda","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","tools","tree","A","AT","AbelianGroup","AbelianMonoid","AddMulOperation","Additive","AdditiveOperation","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","Field","FindMajorityOperation","FirstOperation","Group","Idempotent","IdempotentMonoid","Invertible","LastOperation","LinearOperation","M","MT","Magma","MaxOperation","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","Top2Operation","Unital","act","act","act","act","act","act","act","add","add","all_one","all_zero","aoperate","aoperate","aunit","aunit","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_monoid","div","div","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","moperate","moperate","mul","mul","munit","munit","neg","neg","one","one","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","sub","sub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","zero","zero","0","Answer","B","BabyStepGiantStep","Bisect","BitDp","Combinations","ConvexHullTrick","DivisorTransform","IndependentSubSet","LIter","M","MoSolver","MultipleTransform","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","SubsetTransform","Subsets","SupersetTransform","T","Trisect","XorBasis","add_line","answer","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","combinations","combinations_with_replacement","convolve","convolve","convolve","convolve","default","default","default","elements","eq","eval","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_bucket","fold_cell","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","halve","ind","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_element","is_subset","k_colorable","middle","mo_solve","mo_solve","mobius_transform","mobius_transform","mobius_transform","mobius_transform","n","ne","new","new","new","new","new","new","new_with_primes","new_with_primes","next","next","next_left","next_left","next_minimum","next_right","next_right","next_section","not_elements","parallel_binary_search","permutations","position_bisect","product","query","reduce","remove","rfind_bisect","rposition_bisect","run_length_encoding","section_end","section_end","slide_minimum","solve","sqrt_decomposition","sqrt_decomposition","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_bucket","update_cell","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","1","1","1","Accumulate","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTree2D","SegmentTreeMap","SlopeTrick","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","append","as_slice","automaton","back","bit_length","bit_length","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_inplace","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count_ones","count_zeros","dd","default","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","edges","eq","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get_difference","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert","insert_at","insert_once_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","iter","iter","iter_mut","keys","keys","keys","last","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next_node","node_size","not","not","ones","partial_cmp","pop","pop_back","pop_front","pop_left_if","pop_left_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","quantile_outer","query_min","range","range","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove_count","remove_count","reverse","roots","roots","roots","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update_isize","valley","values","values","values","values_mut","with_capacity","with_capacity","0","Approx","ApproxOrd","Ccw","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","Point","approx_cmp","approx_eq","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","ccw_open","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","default","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","ne","ne","ne","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","add_assign","add_assign","add_assign","add_assign","add_clause","add_cost1","add_cost2","add_cost2_01","add_cost2_10","add_edge","add_edge","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adj4","adj8","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies_with_eindex","adjacencies_with_eindex","adjacencies_with_value","adjacencies_with_value","adjacencies_with_value","adjacency","articulation","avalue","avalue","avalue","aviews","aviews","aviews","aviews","aviews","aviews","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","build","builder","builder","builder","builder_with_esize","change_edge","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","components","construct_emap","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","construct_vmap","construct_vmap","construct_vmap","construct_vmap","default","default","default","dfs_order","dfs_tree","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","dulmage_mendelsohn_decomposition","edges","edges","edges","edges_size","edges_size","eindex","eindex","eindex","eindex","elist","emap_get","emap_get","emap_get_mut","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","eq","eq","eq","eq","esize","esize","esize","eview","eview","eview","extend","extend","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","hash","hash","hash","height","hopcroft_karp","id","index","index","inf","inf","inf","inf","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","kuhn_multi_start_bfs","low","map","map","maximum_flow","maximum_flow_limited","maximum_independent_set","maximum_matching","minimum_cost_flow","minimum_cost_flow_limited","minimum_cut","minimum_edge_cover","minimum_spanning_arborescence","minimum_spanning_tree","minimum_vertex_cover","move_by_diff","mscan","mscan","mscan","mscan","mul","mul","mul","mul","ne","ne","ne","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_adj4","new_adj8","new_with_esize","next","next","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","solve","source","source","source","source","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices_size","vertices_size","vindex","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_set","vmap_set","vsize","vsize","vsize","vview","vview","vview","vview","vview","vview","vview","warshall_floyd_ap","warshall_floyd_ap","weighted_tree_depth","weighted_tree_depth","width","with_n_values","Convolve","Convolve998244353","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","MIntConvolve","MOD","MOD","Matrix","MemorizedFactorial","Mersenne127","Mersenne61","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","assign","berlekamp_massey","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","check_primitive_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convolve","convolve","convolve_fft","count_divisors","count_divisors","count_multiset_sum","count_subset_sum","data","data","data","default","default","default","default","determinant","diff","discrete_logarithm","discrete_logarithm_prime_mod","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","divisors","divisors","divisors","eq","eq","eq","euler_phi","eval","even","exp","extgcd","extgcd_binary","extgcd_recurse","eye","fact","factorial","floor_sum","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_loop","get","get_mod","get_mod","highly_composite_number","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","inv","inv","inv","inv_fact","inverse","inverse_transform","inverse_transform","inverse_transform","is_prime","is_prime","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","length","length","length","linear_congruence","log","miller_rabin","miller_rabin_with_br","mod_add","mod_add","mod_div","mod_div","mod_inv","mod_inv","mod_mul","mod_mul","mod_neg","mod_neg","mod_one","mod_one","mod_sub","mod_sub","mod_zero","mod_zero","modinv","modinv_extgcd_binary","modinv_recurse","moebius","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply","multipoint_evaluation","ne","ne","neg","neg","new","new","new","new","new","new","new","odd","one","one","permutation","pow","pow","pow","pow","powi","prefix","prefix_ref","prime_factors","prime_factors","prime_factors","prime_factors_flatten","primes","primes_lte","primitive_root","product_all","rank","rem","rem","rem","rem","rem","rem_assign","rem_assign","reserve","resize","resized","reversed","row_reduction","shape","shl","shl","shl_assign","shr","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","taylor_shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","trial_division","trial_division","trim_tail_zeros","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zeros","zeros","0","0","0","0","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp_by_arg","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","default","delta","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_rem","div_rem","div_rem","dot","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","get_mod","get_mod","get_mod","hash","hash","hash","hash","hypot","hypot","hypot","i","im","index","inner","into","into","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","is_zero","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","minimum","minimum","minimum","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","ne","ne","ne","ne","ne","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new_unchecked","norm","not","not","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","scan","scan","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_mod","set_mod","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","local_key","local_key","local_key","local_key","n1","n1","n1","n1","n1","n2","n2","n2","n2","n2","n3","n3","n3","n3","n3","r","r","r","r","r","r","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Chars","Read","Scanner","Usize1","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","bytes","chain","clone","clone","clone","clone_into","clone_into","clone_into","flush","fmt","fmt","fmt","from","from","from","into","into","into","is_read_vectored","is_write_vectored","iter","iter_print","mscan","new","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","scan","scan","scan","scan_vec","take","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_all","write_all_vectored","write_fmt","write_vectored","KnuthMorrisPratt","MOD","MultipleRollingHash","RollingHash","SuffixArray","Zarray","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","find","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash_once","index","index","into","into","into","into","into","longest_common_prefix_array","mersenne_mod","mersenne_mul","mersenne_mul_mod","new","new","new","new","new","new_rand","search","search_all","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","1","AsTotalOrd","AssociatedValue","ByteWithBase","Bytes","BytesWithBase","CharTools","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","LOG_TABLE_SIZE","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandomSpec","SEED","Scanner","ScannerIter","SimuratedAnnealing","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","end_temp","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_accepted","is_end","is_maximize","iter_count","iter_print","local_key","log_table","minimize","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","ne","new","new","new","new","next","next","now","partial_cmp","partial_cmp","partial_cmp","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","scan","scan","scan","scan","scan_value","set","set","set_end_temp","set_start_temp","set_time_limit","set_update_interval","shuffle","start_temp","temperture","time","time","time_limit","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_upper_alphabetic_number","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_interval","with","with","0","0","0","0","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","TreeRec","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dfs","dp","eidx","ep","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","n","ne","new","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","time_seeded","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vidx","vsize","vsize","with_seed","0","0","1"],"q":["competitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algorithmcompetitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structurecompetitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graphcompetitive::math","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::numcompetitive::num::mint_basiccompetitive::num::montgomery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::toolscompetitive::treecompetitive::tree::TreeCenter","",""],"d":["","algebra","algorithm","build automaton","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","Implement <code>AssociatedValue</code>.","","","","Print expressions with a separator.","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","string algorithems","","","tree algorithems","","","commutative group","commutative monoid","$+,\\\\times$","","$+$","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","Find majority(strict) of a sequence.","retain the first element","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","","","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","$a$ where $a \\\\circ x = e$","","","","","","","","","","","","multiplicative operaion: $+$","multiplicative operaion: $+$","","","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","additive identity: $0$","additive identity: $0$","","","","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","binary search helper","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","ternary search helper","Basis of xor operation.","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","","","choose distinct <code>r</code> elements from <code>n</code> in sorted order","","choose <code>r</code> elements from <code>n</code> in sorted order","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","get i-th value of rho path","return between two elements","","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","middle point of section","","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","","","Create a empty space.","","","","","","","","","","Divide into 3 sections","","","choose distinct <code>r</code> elements from <code>n</code> in any order","Returns the first index that satisfies a predicate. if not …","choose <code>r</code> elements from <code>n</code> independently","","Return (reduced basis, coordinate). Coordinate means if …","","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","the end condition of binary search","the end condition of ternary search","","","","","","like <code>(left..=right).min_by_key(f)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return accumlate of [0, k)","fold [0, k]","fold [0, i] x [0, j]","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of [l, r)","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Create empty","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","get k-th smallest value in range","get k-th smallest value out of range","","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-b)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","add a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(p_x = f) | (p_y = g)","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","","","","","","","","","Return a slice of adjacency verticeseturn the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","","Return an iterator over graph vertices.","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e","Sum of Floor of Linear","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","binary gcd","","","","","[(hcn, #divisor)]","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","return: (y,z)","","","","","","","","","","","","","","","","","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationseturns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","m","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","n^1 mod m","","","","","n^2 mod m","","","","","n^3 mod m","","","","","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","","","","","","","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","","","","","","","Flush this output stream, ensuring that all intermediately …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","","","","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>buf</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","","","","","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","S [l, r)","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","Trait for spec of generating random value.","","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","","","","","","","","","","","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","","","","","","","","","","","","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,231,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,231,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,233,232,0,0,231,234,235,236,237,238,239,232,232,240,241,231,231,231,231,242,234,235,236,237,238,239,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,242,234,235,236,237,238,239,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,0,259,259,242,234,235,236,237,238,239,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,242,234,235,236,237,238,239,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,259,260,247,248,249,252,254,257,261,261,0,231,231,232,232,231,231,262,262,232,232,233,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,233,233,85,85,233,233,260,260,247,248,261,261,262,262,242,234,235,236,237,238,239,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,242,234,235,236,237,238,239,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,242,234,235,236,237,238,239,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,261,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,263,232,232,14,264,265,0,0,0,0,0,0,0,266,265,0,0,0,0,0,266,0,0,0,0,0,266,0,0,0,265,0,0,6,264,8,0,29,27,267,268,19,20,24,14,15,16,13,6,18,11,30,8,29,27,267,268,19,20,24,14,15,16,13,6,18,11,30,8,265,11,11,13,14,15,16,13,6,18,8,14,15,16,13,6,18,8,0,14,0,267,268,19,20,14,6,8,14,14,18,11,8,269,0,24,14,15,16,13,6,18,11,8,27,265,265,29,27,267,268,19,20,24,14,15,16,13,6,18,11,30,8,13,8,11,11,270,13,264,8,29,27,267,268,19,20,24,14,15,16,13,6,18,11,30,8,15,16,14,14,13,271,264,264,267,268,19,20,13,14,29,24,6,18,30,8,19,20,15,16,266,29,30,266,29,271,14,0,0,269,0,6,8,264,269,269,0,270,271,0,24,265,265,14,0,14,15,16,13,6,18,8,29,27,267,268,19,20,24,14,15,16,13,6,18,11,30,8,29,27,267,268,19,20,24,14,15,16,13,6,18,11,30,8,29,27,267,268,19,20,24,14,15,16,13,6,18,11,30,8,27,265,265,267,268,19,20,0,0,0,0,0,0,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,33,36,31,32,36,31,32,33,36,31,32,31,32,31,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,36,31,32,31,32,31,31,32,33,34,35,36,35,0,0,0,0,36,31,31,32,33,34,35,36,31,32,33,34,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,38,39,40,38,39,40,0,272,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,272,38,39,40,41,42,43,44,45,46,47,87,48,49,50,51,52,51,52,53,54,55,55,53,54,55,55,56,58,59,53,60,0,61,87,48,62,62,62,62,62,62,62,62,62,50,51,52,66,86,67,68,56,60,69,70,71,61,58,72,38,39,40,41,42,43,44,45,46,47,48,62,53,54,73,63,64,65,55,74,59,49,50,51,52,66,86,67,68,56,60,69,70,71,61,58,72,38,39,40,41,42,43,44,45,46,47,48,62,53,54,73,63,64,65,55,74,59,49,63,53,54,64,65,55,55,51,52,66,67,68,60,69,70,71,61,58,72,38,39,40,41,42,43,44,45,46,47,48,62,53,54,73,63,64,65,55,74,59,49,51,52,66,67,68,60,69,70,71,61,58,72,38,39,40,41,42,43,44,45,46,47,48,62,53,54,73,63,64,65,55,74,59,49,62,65,64,62,62,63,71,61,46,47,62,53,54,73,64,65,55,272,272,72,53,64,65,74,62,53,53,54,54,64,65,56,58,74,59,74,56,56,50,51,52,66,67,68,60,69,70,71,61,58,72,38,39,40,41,42,43,44,45,46,47,48,62,53,54,73,63,64,65,55,74,59,49,50,51,52,66,67,68,60,69,70,72,67,68,60,70,71,61,66,50,51,52,66,86,67,68,56,60,69,70,71,61,58,72,38,39,40,41,42,43,44,45,46,47,48,62,53,54,73,63,64,65,55,74,59,49,50,48,53,53,54,54,64,65,51,67,60,61,51,52,67,68,60,70,62,53,54,64,58,64,65,65,64,64,65,58,44,45,44,45,62,66,66,272,38,39,40,41,42,43,44,45,46,47,73,64,65,74,74,74,64,65,50,51,52,66,86,67,68,56,60,69,70,71,61,58,72,38,39,40,41,42,43,44,45,46,47,48,62,53,54,73,63,64,65,55,74,59,49,71,61,53,54,58,53,54,64,65,64,53,54,64,71,71,61,53,54,44,45,44,45,51,72,56,58,59,55,55,62,51,52,66,86,67,68,56,60,69,70,71,61,58,72,41,42,43,46,47,62,53,54,73,63,64,65,55,74,59,49,272,38,39,40,41,42,43,44,45,46,47,74,74,62,62,62,62,71,61,61,64,65,64,65,67,68,60,70,71,61,61,49,49,73,86,54,49,87,87,87,87,48,49,49,53,54,64,65,53,54,61,56,58,59,67,68,60,70,72,72,56,59,49,87,87,48,87,87,48,51,52,67,68,60,70,62,55,62,62,62,62,62,62,56,58,59,55,72,72,273,273,273,273,51,52,66,67,68,60,69,70,71,61,58,72,38,39,40,41,42,43,44,45,46,47,48,62,53,54,73,63,64,65,55,74,59,49,50,51,52,66,86,67,68,56,60,69,70,71,61,58,72,38,39,40,41,42,43,44,45,46,47,48,62,53,54,73,63,64,65,55,74,59,49,50,51,52,66,86,67,68,56,60,69,70,71,61,58,72,38,39,40,41,42,43,44,45,46,47,48,62,53,54,73,63,64,65,55,74,59,49,50,51,52,66,86,67,68,56,60,69,70,71,61,58,72,38,39,40,41,42,43,44,45,46,47,48,62,53,54,73,63,64,65,55,74,59,49,56,58,59,51,52,67,68,60,69,70,63,63,55,53,54,64,64,53,74,99,0,0,0,0,95,95,0,0,95,95,95,0,274,274,99,95,100,96,98,99,95,100,96,98,95,96,98,95,99,95,100,96,98,99,95,100,96,98,0,99,95,100,0,0,100,98,99,96,98,98,96,98,99,95,100,96,98,99,95,100,96,98,99,95,100,96,98,95,98,98,99,95,100,96,98,96,98,96,98,100,96,98,100,96,98,99,95,96,98,96,98,99,95,100,96,98,99,95,100,96,98,99,95,100,96,98,99,95,100,96,98,275,276,277,275,276,277,278,279,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,280,281,0,282,0,0,0,0,0,0,283,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,284,0,0,0,0,0,0,0,285,286,0,0,0,287,0,0,0,0,288,284,289,290,291,103,104,104,104,104,105,106,107,108,109,103,103,106,110,110,275,111,112,110,110,113,113,276,113,277,111,112,106,141,278,116,117,279,111,112,110,110,113,292,292,292,292,292,292,292,292,113,134,111,112,135,138,139,141,289,290,291,105,136,137,106,107,121,122,123,116,117,110,108,119,109,120,104,124,125,126,114,113,127,103,134,111,112,135,138,139,141,289,290,291,105,136,137,106,107,121,122,123,116,117,110,108,119,109,120,104,124,125,126,114,113,127,103,141,105,108,109,119,120,113,113,119,106,107,121,122,123,116,117,110,108,119,109,104,124,125,126,114,113,127,103,106,107,121,122,123,116,117,110,108,119,109,104,124,125,126,114,113,127,103,122,123,116,117,124,125,126,114,127,283,113,293,124,125,126,288,111,112,110,113,106,104,114,113,113,292,292,292,292,0,282,121,113,121,113,281,123,117,114,113,283,113,283,113,283,283,122,123,116,117,124,125,126,114,294,113,106,295,113,113,108,109,110,106,107,121,122,123,116,117,110,108,119,109,120,104,124,125,126,114,113,127,103,113,134,111,112,135,138,139,141,289,290,291,105,136,137,106,107,121,122,122,122,123,123,116,116,117,117,110,108,119,109,120,104,124,125,126,114,113,127,103,107,121,113,127,108,109,119,120,106,127,122,123,116,117,124,125,126,114,110,107,114,121,127,284,289,290,291,134,111,112,135,138,139,141,289,290,291,105,136,137,106,107,121,122,123,116,117,110,108,119,109,120,104,124,125,126,114,113,127,103,138,139,107,141,116,117,119,119,107,107,120,120,119,107,121,121,107,110,134,135,136,137,284,289,290,291,122,123,116,117,114,134,111,112,135,138,139,141,105,136,137,106,107,121,110,108,109,104,114,127,103,110,110,105,138,139,141,122,123,116,117,124,125,126,114,103,103,127,104,284,289,290,291,113,114,131,140,118,113,113,113,106,107,121,122,123,116,117,110,108,119,109,104,124,125,126,114,113,127,103,113,140,113,140,113,140,113,140,113,113,140,113,134,111,112,135,138,139,141,289,290,291,105,136,137,106,107,121,122,123,116,117,110,108,119,109,120,104,124,125,126,114,113,127,103,134,111,112,135,138,139,141,289,290,291,105,136,137,106,107,121,122,123,116,117,110,108,119,109,120,104,124,125,126,114,113,127,103,103,134,111,112,135,138,139,141,289,290,291,105,136,137,106,107,121,122,123,116,117,110,108,119,109,120,104,124,125,126,114,113,127,103,110,287,111,112,106,121,110,113,113,121,113,286,122,123,116,117,114,288,111,112,110,113,288,111,112,110,113,288,288,296,113,106,297,111,111,112,110,113,113,292,292,140,113,110,104,0,0,0,0,298,0,0,0,0,0,0,299,300,0,0,0,0,0,0,0,0,0,298,145,145,145,145,145,145,145,145,146,147,145,145,145,145,147,0,0,301,299,300,153,154,155,145,146,147,156,157,158,301,299,300,153,154,155,145,146,147,156,157,158,145,0,153,154,155,145,146,147,156,157,158,153,154,155,145,146,147,156,157,158,153,154,298,298,0,157,158,145,145,145,146,147,154,145,147,157,146,145,0,0,145,145,145,145,145,145,145,145,147,145,145,145,145,145,0,157,158,145,146,147,0,145,145,145,0,0,0,146,153,154,0,153,154,155,145,146,147,156,157,158,301,299,300,153,154,155,145,145,145,145,146,147,156,157,158,145,145,146,147,0,0,156,299,300,0,153,145,146,146,147,145,146,146,147,145,301,299,300,153,154,155,145,146,147,156,157,158,145,153,155,145,153,146,298,301,301,157,158,145,145,145,145,0,153,0,0,298,301,301,145,147,0,145,0,0,299,300,299,300,299,300,299,300,299,300,299,300,299,300,299,300,0,0,0,0,145,145,145,145,145,145,145,145,146,147,145,145,145,145,298,301,301,145,146,147,145,145,153,154,155,146,156,157,158,145,145,147,153,155,145,146,147,155,145,145,0,157,158,0,157,157,0,145,146,145,145,145,145,147,145,145,157,145,145,145,146,146,145,145,145,145,145,145,146,145,302,145,145,145,145,145,145,145,145,146,147,145,145,145,145,145,153,154,155,145,146,147,156,157,158,298,301,301,157,158,145,145,301,299,300,153,154,155,145,146,147,156,157,158,301,299,300,153,154,155,145,146,147,156,157,158,301,299,300,153,154,155,145,146,147,156,157,158,145,147,145,146,166,167,169,173,0,0,0,0,303,0,0,303,303,304,0,303,303,303,303,303,303,303,303,303,0,0,0,303,12,0,303,303,303,303,303,303,303,303,303,303,303,303,0,0,0,303,303,0,303,0,303,0,303,0,0,305,303,0,306,0,0,303,306,94,165,166,167,169,169,169,169,169,169,173,173,173,173,173,173,174,305,305,303,166,167,303,166,167,159,159,159,159,94,94,94,94,94,94,94,94,165,165,166,167,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,174,174,159,159,94,94,94,94,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,94,303,166,167,303,166,167,303,166,167,303,166,167,303,166,167,307,307,307,307,307,307,307,169,173,169,173,169,173,169,173,169,173,169,173,178,159,152,94,165,166,167,169,173,174,178,159,152,94,165,166,167,169,173,174,303,166,167,303,166,167,303,166,167,159,152,94,165,166,167,169,173,174,159,152,94,165,166,167,169,173,174,94,165,166,167,169,173,94,94,303,166,167,303,166,167,303,166,167,308,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,308,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,94,159,94,165,166,167,169,173,174,307,159,159,159,159,152,152,152,94,94,94,94,94,94,94,94,165,166,167,169,173,173,173,173,173,173,173,173,173,173,173,173,174,159,159,94,94,94,94,169,173,173,173,173,173,173,173,173,173,173,173,173,303,304,166,167,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,152,152,152,94,309,309,309,309,159,94,165,166,167,169,173,174,303,166,167,303,166,167,303,166,167,305,305,303,166,167,159,159,152,94,165,165,166,166,167,167,169,169,173,173,174,174,307,307,307,307,307,307,307,303,166,167,310,178,159,159,159,159,159,159,159,159,159,159,159,159,159,152,94,165,165,166,166,167,167,169,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,173,174,174,303,166,167,159,165,166,167,169,173,174,304,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,178,305,169,169,169,169,169,169,173,173,173,173,173,173,12,159,152,152,152,159,94,169,173,303,166,167,94,94,174,159,310,178,159,152,94,165,166,167,169,173,174,159,303,166,167,303,166,167,311,311,311,311,303,166,167,306,169,169,169,169,169,169,173,173,173,173,173,173,303,166,167,163,163,306,169,169,169,169,169,169,173,173,173,173,173,173,303,166,167,303,166,167,148,148,165,174,305,305,308,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,303,166,167,303,166,167,303,166,167,303,166,167,303,166,167,303,166,167,311,165,166,167,169,173,303,166,167,311,165,166,167,169,173,0,12,12,310,12,12,12,12,12,12,12,12,305,305,0,159,159,159,159,94,94,94,94,94,94,94,94,165,165,166,167,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,174,174,303,166,167,159,159,94,94,94,94,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,94,165,166,167,169,173,174,159,159,94,94,165,166,167,169,169,169,169,169,169,173,173,173,173,173,173,174,159,152,152,152,94,159,94,169,173,163,159,94,166,167,169,173,94,165,166,167,169,173,174,94,304,159,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,303,166,167,303,166,167,159,159,94,94,94,303,166,167,152,152,152,166,167,169,173,173,173,173,173,173,173,173,173,173,173,173,169,173,173,173,173,173,173,173,173,173,173,173,173,303,304,166,167,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,308,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,308,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,308,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,303,166,167,159,94,169,173,311,311,311,311,159,159,163,163,148,148,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,305,169,169,169,169,169,169,173,173,173,173,173,173,303,306,166,167,169,169,169,169,169,169,173,173,173,173,173,173,303,166,167,303,166,167,303,166,167,303,159,165,166,167,174,159,309,309,309,309,307,159,159,159,159,94,94,94,94,94,94,94,94,165,166,167,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,174,159,159,94,94,94,94,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,159,159,94,94,303,166,167,303,166,167,303,166,167,303,166,167,159,152,94,165,166,167,169,173,174,303,166,167,309,309,309,309,309,309,309,309,159,165,166,167,169,173,174,303,166,167,308,169,169,169,169,169,169,169,169,169,169,169,169,173,173,173,173,173,173,173,173,173,173,173,173,94,303,166,167,178,159,152,94,165,166,167,169,173,174,178,159,152,94,165,166,167,169,173,174,178,159,152,94,165,166,167,169,173,174,94,306,169,169,169,169,169,169,173,173,173,173,173,173,178,178,148,159,94,166,167,169,173,0,0,0,0,0,0,0,0,0,0,0,0,312,313,314,315,316,317,312,313,314,315,316,317,0,0,312,312,312,312,312,312,312,312,312,312,312,312,312,313,313,313,313,313,313,313,313,313,314,314,314,314,314,314,314,314,314,315,315,315,315,315,315,315,315,315,316,316,316,316,316,316,316,316,316,317,317,317,317,317,317,317,312,313,314,315,316,317,312,312,312,312,312,312,312,312,312,312,312,312,312,313,313,313,313,313,313,313,313,313,314,314,314,314,314,314,314,314,314,315,315,315,315,315,315,315,315,315,316,316,316,316,316,316,316,316,316,317,317,317,317,317,317,317,312,313,314,315,316,317,312,313,314,315,316,317,312,312,312,312,312,312,312,312,312,312,312,312,313,313,313,313,313,313,313,313,314,314,314,314,314,314,314,314,315,315,315,315,315,315,315,315,316,316,316,316,316,316,316,316,317,317,317,317,317,317,312,313,314,315,316,317,312,313,314,315,316,317,312,313,314,315,316,317,312,313,314,315,316,317,312,312,313,314,315,316,317,312,313,314,315,316,317,318,319,316,317,312,313,314,315,316,317,312,313,314,315,316,317,312,313,314,315,316,317,0,0,0,0,0,0,0,0,0,320,321,322,323,320,321,322,323,320,321,322,323,324,320,321,322,323,320,321,322,323,320,321,322,323,324,320,321,322,323,324,320,321,322,323,324,320,321,322,323,324,324,320,321,322,323,324,324,320,321,322,323,320,321,322,323,320,321,322,323,0,0,0,0,0,186,187,188,186,187,188,191,325,191,191,186,187,188,186,187,188,325,186,187,188,186,187,188,186,187,188,191,325,186,0,186,186,191,0,191,191,191,191,191,191,0,186,187,188,186,191,186,187,188,186,187,188,186,187,188,186,187,188,325,325,325,325,325,0,197,0,0,0,0,196,197,198,199,200,196,197,198,199,200,196,197,198,199,200,196,197,198,199,200,197,198,197,198,196,197,198,199,200,196,197,198,199,200,197,199,200,196,197,198,199,200,199,197,197,197,196,197,198,199,200,198,200,196,196,197,198,199,200,196,197,198,199,200,196,197,198,199,200,196,197,198,199,200,201,202,204,205,206,207,209,202,0,0,0,0,0,0,0,0,0,0,0,0,0,213,0,0,133,326,327,0,0,0,0,213,0,0,0,0,0,328,0,0,0,329,190,201,213,202,203,215,204,205,206,207,208,209,210,211,212,190,201,213,202,203,215,204,205,206,207,208,209,210,211,212,330,330,202,203,204,205,206,207,208,209,210,211,212,202,203,204,205,206,207,208,209,210,211,212,201,202,204,213,202,203,213,201,202,204,213,202,203,215,204,205,206,207,208,209,210,211,212,190,201,213,202,203,215,204,205,206,207,208,209,210,211,212,331,331,331,331,203,203,203,328,328,327,204,190,201,213,202,203,215,204,205,206,207,208,209,210,211,212,190,215,213,213,213,213,332,328,213,213,330,328,328,326,205,206,207,209,210,212,212,204,213,203,210,212,190,215,213,201,202,204,214,203,204,213,203,214,214,203,203,0,0,0,0,0,133,208,211,0,0,328,328,213,213,213,213,203,213,213,203,213,213,331,331,331,202,203,204,205,206,207,208,209,210,211,212,331,190,201,213,202,203,215,204,205,206,207,208,209,210,211,212,190,201,213,202,203,215,204,205,206,207,208,209,210,211,212,190,201,213,202,203,215,204,205,206,207,208,209,210,211,212,213,328,328,227,228,229,230,0,0,0,0,0,0,0,0,0,144,0,0,0,0,0,0,0,144,227,228,229,230,217,218,219,221,333,222,226,223,144,225,224,227,228,229,230,217,218,219,221,333,222,226,223,144,225,224,217,218,219,221,222,223,144,224,217,218,219,221,222,223,144,224,225,220,333,224,223,217,223,144,217,218,219,221,222,223,144,225,224,227,228,229,230,217,218,219,221,333,222,226,223,144,225,224,219,144,225,225,0,227,228,229,230,217,218,219,221,333,222,226,223,144,225,224,221,226,217,218,219,224,144,217,218,219,226,223,225,224,222,217,226,218,218,218,219,226,226,227,228,229,230,219,220,333,218,218,218,225,217,218,219,221,222,223,144,224,227,228,229,230,217,218,219,221,333,222,226,223,144,225,224,227,228,229,230,217,218,219,221,333,222,226,223,144,225,224,227,228,229,230,217,218,219,221,333,222,226,223,144,225,224,226,218,219,226,220,333,225,334,335,335],"fp":[[4,"Option"],[15,"bool"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"ConvexHullTrick"],[15,"i64"],[3,"XorBasis"],[15,"u64"],[3,"Vec"],[3,"RhoPath"],[8,"MIntBase"],[3,"IndependentSubSet"],[3,"BitDp"],[3,"Subsets"],[3,"Combinations"],[8,"Clone"],[3,"PartisanGameAnalyzer"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"Iterator"],[8,"FnMut"],[8,"Debug"],[3,"BabyStepGiantStep"],[3,"Formatter"],[6,"Result"],[3,"SqrtDecompositionBuckets"],[8,"IntoIterator"],[3,"PartisanGamer"],[3,"SlideMinimum"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"LexicographicalSubsequence"],[3,"LongestIncreasingSubsequence"],[8,"Fn"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"FunctionalAutomaton"],[3,"MappingAutomaton"],[3,"AlphabetMappingAutomaton"],[3,"LexicographicalAutomaton"],[3,"RevLexicographicalAutomaton"],[3,"MonoidalAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BitVector"],[3,"WaveletMatrix"],[3,"Accumulate"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"SlopeTrick"],[3,"MergingUnionFind"],[3,"HashMap"],[3,"WeightedUnionFind"],[3,"UnionFind"],[3,"SegmentTree"],[3,"DequeAggregation"],[3,"BitSet"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"SegmentTree2D"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"Automatondp"],[3,"LineSet"],[3,"Trie"],[4,"Ordering"],[3,"Drain"],[3,"Ref"],[3,"RefMut"],[8,"Group"],[3,"Iter"],[3,"Iter"],[3,"Keys"],[3,"IterMut"],[3,"Keys"],[8,"Monoid"],[3,"Static2DTree"],[8,"RankSelectDictionaries"],[3,"Range"],[3,"Range"],[15,"isize"],[3,"Values"],[3,"Values"],[3,"ValuesMut"],[3,"Complex"],[4,"Ccw"],[3,"Line"],[6,"Point"],[3,"LineSegment"],[3,"Approx"],[3,"Circle"],[15,"f64"],[8,"Default"],[3,"TwoSatisfiability"],[3,"ProjectSelectionProblem"],[3,"SparseGraphBuilder"],[3,"AdjacencyListGraph"],[3,"BipartiteMatching"],[3,"DinicBuilder"],[3,"PrimalDualBuilder"],[3,"GridGraph"],[3,"UsizeGraph"],[3,"ClosureGraph"],[3,"SparseGraph"],[3,"Adjacency"],[3,"Iter"],[3,"VIndexWithValue"],[3,"VIndexWithEIndexValue"],[6,"BidirectionalSparseGraph"],[3,"Dinic"],[3,"PrimalDual"],[3,"EdgeListGraph"],[3,"VIndex"],[3,"VIndexWithEIndex"],[4,"DirectedEdge"],[4,"UndirectedEdge"],[4,"BidirectionalEdge"],[3,"StronglyConnectedComponent"],[8,"Ord"],[8,"PartialEq"],[15,"never"],[6,"DirectedSparseGraph"],[8,"Hash"],[8,"IterScan"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraphScanner"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"AdjacencyViewIterFromEindex"],[3,"AdjacencyViewIterFromValue"],[6,"UndirectedSparseGraph"],[3,"LowLink"],[8,"PartialOrd"],[3,"String"],[4,"TreeCenter"],[3,"FormalPowerSeries"],[3,"Matrix"],[3,"Polynomial"],[8,"Zero"],[8,"Add"],[8,"Mul"],[8,"MulAssign"],[3,"BarrettReduction"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"PowPrec"],[3,"EulerPhiTable"],[3,"PrimeList"],[3,"PrimeTable"],[3,"MInt"],[15,"u32"],[15,"u128"],[3,"IterMut"],[8,"One"],[8,"Copy"],[3,"DoubleDouble"],[3,"Float32"],[3,"Float64"],[15,"i32"],[3,"Saturating"],[15,"i16"],[15,"i8"],[15,"i128"],[3,"Wrapping"],[3,"QuadDouble"],[15,"u8"],[15,"u16"],[4,"FpCategory"],[3,"ExtendedGcd"],[3,"Error"],[15,"f32"],[15,"str"],[3,"RangeInclusive"],[3,"LocalKey"],[3,"Bytes"],[3,"Chain"],[3,"Scanner"],[4,"Usize1"],[4,"Chars"],[3,"Error"],[3,"ScannerIter"],[8,"Read"],[3,"ReadBuf"],[3,"Take"],[3,"Arguments"],[8,"Eq"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"TotalOrd"],[3,"PartialIgnoredOrd"],[3,"Xorshift"],[3,"NotEmptySegment"],[3,"CharWithBase"],[3,"CharsWithBase"],[3,"ByteWithBase"],[4,"Bytes"],[3,"BytesWithBase"],[3,"Collect"],[3,"SizedCollect"],[3,"Splitted"],[3,"SimuratedAnnealing"],[8,"RandomSpec"],[3,"RandIter"],[15,"char"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[8,"LcaMonoidDispatch"],[3,"LowestCommonAncestor"],[3,"LcaMonoid"],[3,"ReRooting"],[3,"TreeRec"],[3,"TreeHasher"],[3,"HeavyLightDecomposition"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[8,"MonoidAction"],[8,"SemiRing"],[8,"Magma"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"AddMulOperation"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[4,"PermutationOperation"],[3,"FindMajorityOperation"],[8,"Field"],[8,"Invertible"],[8,"Unital"],[8,"Ring"],[8,"BitXorIdentity"],[8,"MoSolver"],[8,"SqrtDecomposition"],[8,"PartisanGame"],[3,"SubsetTransform"],[3,"SupersetTransform"],[8,"SliceBisectExt"],[8,"Bisect"],[8,"Trisect"],[8,"Automaton"],[8,"ToDigitSequence"],[8,"ApproxOrd"],[8,"Adjacencies"],[8,"AdjacenciesWithEindex"],[8,"AdjacenciesWithValue"],[8,"AdjacencyIndexWithValue"],[8,"AdjacencyView"],[8,"EIndexedGraph"],[8,"AdjacencyIndexWithEindex"],[8,"Edges"],[8,"EdgeMap"],[8,"ShortestPathSemiRing"],[8,"GraphBase"],[8,"AdjacencyIndex"],[8,"Vertices"],[8,"VertexMap"],[3,"StandardSp"],[3,"OptionSp"],[3,"PathFoldingSp"],[8,"ShortestPathExt"],[8,"SparseGraphConstruction"],[8,"EdgeSize"],[8,"EdgeView"],[8,"VertexSize"],[8,"VertexView"],[8,"ConvolveSteps"],[3,"Mersenne61"],[3,"Mersenne127"],[3,"Convolve"],[8,"FormalPowerSeriesCoefficientSqrt"],[8,"Float"],[8,"IntBase"],[8,"Unsigned"],[8,"Signed"],[8,"DiscreteSteps"],[8,"BinaryRepr"],[8,"RangeBoundsExt"],[8,"MIntConvert"],[8,"Bounded"],[3,"Modulo2"],[4,"Modulo998244353"],[4,"Modulo1000000007"],[4,"Modulo1000000009"],[4,"DynModuloU32"],[4,"DynModuloU64"],[6,"DynMIntU32"],[6,"DynMIntU64"],[4,"Modulo998244353"],[4,"Modulo2113929217"],[4,"Modulo1811939329"],[4,"Modulo2013265921"],[8,"MontgomeryReduction32"],[8,"Write"],[8,"MarkedIterScan"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[8,"AsTotalOrd"],[8,"PartialOrdExt"],[8,"CharTools"],[8,"IterPrint"],[4,"LcaMonoidDefaultId"],[13,"One"],[13,"Two"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,2,2,5,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,5,2,2,2,5,5,2,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,2,2,5,0,0,0,0,2,2,5,5,2,2,5,2,2,2,2,5,5,2,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,2,2,2,2,2,5,2,5,2,5,2,2,5,5,2,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,2,2,2,5,2,5,2,2,5,2,5,2,5,0,0,5,5,0,0,0,2,5,2,5,2,5],"n":["datastructure","graph","math","sample","string","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","LineSet","line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","WaveletMatrix","range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","UnionFind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","log_of_formal_power_series","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","Convolve","ConvolveSteps","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","PrimeList","enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","factorize","prime_factors_flatten","MInt998244353","berlekamp_massey","find_linear_recurrence","Fps998244353","MInt998244353","inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","Fps998244353","MInt998244353","log_of_formal_power_series","Fps998244353","MInt998244353","multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","DynMIntU32","sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","floor_sum","sum_of_floor_of_linear","TwoSatisfiability","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","SuffixArray","suffixarray","Zarray","zalgorithm"],"q":["library_checker","","","","","library_checker::datastructure","","","","","","","","","","","library_checker::datastructure::line_add_get_min","","library_checker::datastructure::point_add_range_sum","","","","","library_checker::datastructure::point_set_range_composite","","","","","library_checker::datastructure::queue_operate_all_composite","","","","","library_checker::datastructure::range_affine_range_sum","","","","","","library_checker::datastructure::range_kth_smallest","","library_checker::datastructure::staticrmq","","","","","library_checker::datastructure::unionfind","","library_checker::datastructure::vertex_add_path_sum","","","","","library_checker::datastructure::vertex_add_subtree_sum","","","","","library_checker::datastructure::vertex_set_path_composite","","","","","","","","library_checker::graph","","","","library_checker::graph::bipartitematching","","","","library_checker::graph::directedmst","","","library_checker::graph::lca","","","","","","library_checker::graph::scc","","","library_checker::math","","","","","","","","","","","","","","","","","","library_checker::math::convolution_mod","","","","","library_checker::math::convolution_mod_1000000007","","","","","","library_checker::math::discrete_logarithm_mod","","library_checker::math::enumerate_primes","","library_checker::math::exp_of_formal_power_series","","","library_checker::math::factorize","","library_checker::math::find_linear_recurrence","","","library_checker::math::inv_of_formal_power_series","","","library_checker::math::kth_term_of_linearly_recurrent_sequence","","","","library_checker::math::log_of_formal_power_series","","","library_checker::math::multipoint_evaluation","","","library_checker::math::polynomial_taylor_shift","","","","library_checker::math::pow_of_formal_power_series","","","library_checker::math::sharp_p_subset_sum","","","","","","library_checker::math::sqrt_mod","","library_checker::math::sqrt_of_formal_power_series","","","library_checker::math::sum_of_floor_of_linear","","library_checker::math::two_sat","","library_checker::sample","","library_checker::sample::aplusb","library_checker::sample::many_aplusb","library_checker::string","","","library_checker::string::number_of_substrings","","library_checker::string::suffixarray","","library_checker::string::zalgorithm",""],"d":["","","","","","","","","","","","","","","","","","✅  AC  392ms","","","","✅  AC  77ms","✅  AC  135ms","","","","","✅  AC  216ms","","","","","✅  AC  44ms","","","","","","✅  AC  879ms","","✅  AC  286ms","","","","✅  AC  162ms","✅  AC  159ms","","✅  AC  16ms","","","","","✅  AC  496ms","","","","","✅  AC  189ms","","","","","","","","✅  AC  243ms","","","","","","","✅  AC  96ms","✅  AC  1841ms","","","✅  AC  176ms","","","","","✅  AC  547ms","✅  AC  682ms","","","✅  AC  279ms","","","","","","","","","","","","","","","","","","","","","","","✅  AC  154ms","","","","","","✅  AC  382ms","","✅  AC  3ms","","✅  AC  1701ms","","","✅  AC  519ms","✅  AC  83ms","","","","✅  AC  140ms","","","✅  AC  160ms","","","","✅  AC  1813ms","","","✅  AC  199ms","","","✅  AC  782ms","","","","✅  AC  115ms","","","✅  AC  596ms","","","","","","✅  AC  504ms","","✅  AC  90ms","","","✅  AC  322ms","","✅  AC  62ms","","✅  AC  252ms","","","✅  AC  0ms","✅  AC  171ms","","","","","✅  AC  1361ms","","✅  AC  1954ms","","✅  AC  31ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"]],"a":{"verify":[17,21,22,27,32,38,40,44,45,47,52,57,65,72,73,76,81,82,85,108,114,116,118,121,122,126,129,133,136,139,143,146,152,154,157,159,161,164,165,170,172,174]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
