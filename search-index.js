var searchIndex = JSON.parse('{\
"competitive":{"doc":"github","i":[[0,"algebra","competitive","algebra",null,null],[3,"MaxOperation","competitive::algebra","binary operation to select larger element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"FirstOperation","","retain the first element",null,null],[3,"LastOperation","","retain the last element",null,null],[3,"AdditiveOperation","","$+$",null,null],[3,"MultiplicativeOperation","","$\\\\times$",null,null],[3,"LinearOperation","","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"BitAndOperation","","&",null,null],[3,"BitOrOperation","","|",null,null],[3,"MonoidalOperation","","",null,null],[3,"GroupOperation","","",null,null],[3,"AssocoativeOperator","","",null,null],[3,"AbsorbedAssocoativeOperator","","",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"CountingOperation","","",null,null],[3,"ReverseOperation","","",null,null],[11,"new","","",0,[[]]],[11,"new","","",1,[[]]],[11,"new","","",2,[[]]],[11,"new","","",3,[[]]],[11,"new","","",4,[[]]],[11,"new","","",5,[[]]],[11,"new","","",6,[[]]],[11,"new","","",7,[[]]],[11,"new","","",8,[[]]],[11,"new","","",9,[[]]],[11,"new","","",10,[[]]],[11,"new","","",11,[[]]],[11,"new","","",12,[[]]],[11,"new","","",13,[[]]],[11,"new","","",14,[[]]],[8,"Magma","","binary operaion: $T \\\\circ T \\\\to T$",null,null],[16,"T","","type of operands: $T$",15,null],[10,"operate","","binary operaion: $\\\\circ$",15,[[]]],[11,"reverse_operate","","",15,[[]]],[8,"Associative","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c…",null,null],[8,"SemiGroup","","associative binary operation",null,null],[8,"Unital","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e =…",null,null],[10,"unit","","identity element: $e$",16,[[]]],[8,"Monoid","","associative binary operation and an identity element",null,null],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",17,[[]]],[8,"Invertible","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b…",null,null],[10,"inverse","","$a$ where $a \\\\circ x = e$",18,[[]]],[8,"RightInvertibleMagma","","short cut of right inverse binary operation",null,null],[10,"rinv_operation","","right inverse binary operation: $\\\\cdot \\\\circ (\\\\cdot^{-1})$",19,[[]]],[8,"Group","","associative binary operation and an identity element and…",null,null],[8,"Commutative","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$",null,null],[8,"AbelianMonoid","","commutative monoid",null,null],[8,"AbelianGroup","","commutative group",null,null],[8,"Idempotent","","$\\\\forall a \\\\in T, a \\\\circ a = a$",null,null],[8,"IdempotentMonoid","","idempotent monoid",null,null],[8,"MinimumBounded","","",null,null],[10,"minimum","","",20,[[]]],[8,"MaximumBounded","","",null,null],[10,"maximum","","",21,[[]]],[8,"AdditiveIdentity","","",null,null],[10,"zero","","",22,[[]]],[8,"MultiplicativeIdentity","","",null,null],[10,"one","","",23,[[]]],[8,"BitAndIdentity","","",null,null],[10,"all_one","","",24,[[]]],[8,"BitOrIdentity","","",null,null],[10,"all_zero","","",25,[[]]],[0,"algorithm","competitive","algorithm",null,null],[3,"Compress","competitive::algorithm","",null,null],[3,"CHTLine","","",null,null],[3,"ConvexHullTrick","","",null,null],[3,"SlideMinimum","","",null,null],[3,"SubsetTransform","","",null,null],[3,"SupersetTransform","","",null,null],[3,"DivisorTransform","","",null,null],[3,"MultipleTransform","","",null,null],[5,"binary_search","","",null,[[["bisect",8],["fn",8]],["bisect",8]]],[5,"lower_bound","","",null,[[["bisect",8],["ord",8]]]],[5,"upper_bound","","",null,[[["bisect",8],["ord",8]]]],[5,"ternary_search","","",null,[[["trisect",8],["fn",8]],["trisect",8]]],[5,"slide_minimum","","",null,[[["vec",3]],["vec",3]]],[11,"get","","",26,[[]]],[11,"len","","",26,[[]]],[11,"new","","",27,[[]]],[11,"value","","",27,[[]]],[11,"check","","",27,[[]]],[11,"new","","",28,[[]]],[11,"add_line","","k-th add_line(a_k, b_k): a_k >= a_{k+1}",28,[[]]],[11,"query","","",28,[[]]],[11,"new","","",29,[[]]],[11,"next","","",29,[[]]],[11,"new","","",30,[[]]],[11,"zeta_transform","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$",30,[[]]],[11,"mobius_transform","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$",30,[[]]],[11,"convolve","","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$",30,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",31,[[]]],[11,"zeta_transform","","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$",31,[[]]],[11,"mobius_transform","","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$",31,[[]]],[11,"convolve","","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$",31,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",32,[[["vec",3]]]],[11,"zeta_transform","","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$",32,[[]]],[11,"mobius_transform","","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$",32,[[]]],[11,"convolve","","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$",32,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",33,[[["vec",3]]]],[11,"zeta_transform","","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$",33,[[]]],[11,"mobius_transform","","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$",33,[[]]],[11,"convolve","","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$",33,[[["vec",3],["monoid",8]],["vec",3]]],[8,"MoSolver","","",null,null],[16,"Answer","","",34,null],[10,"insert","","",34,[[]]],[10,"remove","","",34,[[]]],[10,"answer","","",34,[[]]],[11,"mo_solve","","",34,[[]]],[8,"Bisect","","binary search helper",null,null],[10,"halve","","return between two elements",35,[[]]],[10,"section_end","","the end condition of binary search",35,[[]]],[8,"Trisect","","",null,null],[10,"next","","",36,[[]]],[10,"section_end","","",36,[[]]],[0,"data_structure","competitive","data structures",null,null],[3,"IntersectionAutomaton","competitive::data_structure","",null,null],[3,"UnionAutomaton","","",null,null],[3,"ProductAutomaton","","",null,null],[3,"LessThanAutomaton","","",null,null],[3,"GreaterThanAutomaton","","",null,null],[3,"ContainAutomaton","","",null,null],[3,"ContainCounterAutomaton","","",null,null],[3,"AlwaysAcceptingAutomaton","","",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"BinaryIndexedTree2D","","",null,null],[3,"BitVector","","",null,null],[3,"BitSet","","",null,null],[3,"DisjointSparseTable","","",null,null],[3,"Static2DTree","","",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"SegmentTree","","",null,null],[3,"DequeAggregation","","",null,null],[3,"QueueAggregation","","",null,null],[3,"Trie","","",null,null],[3,"UnionFind","","",null,null],[3,"WeightedUnionFind","","",null,null],[3,"MergingUnionFind","","",null,null],[3,"WaveletMatrix","","",null,null],[5,"automaton_dp","","",null,[[]]],[11,"new","","",37,[[]]],[11,"new","","",38,[[]]],[11,"new","","",39,[[]]],[11,"new","","",40,[[]]],[11,"accumulate0","","fold [0, k)",40,[[]]],[11,"accumulate","","fold [0, k]",40,[[]]],[11,"update","","",40,[[]]],[11,"fold","","",40,[[]]],[11,"get","","",40,[[]]],[11,"set","","",40,[[]]],[11,"lower_bound","","",40,[[]]],[11,"new","","",41,[[]]],[11,"accumulate0","","fold [0, i) x [0, j)",41,[[]]],[11,"accumulate","","fold [0, i] x [0, j]",41,[[]]],[11,"update","","",41,[[]]],[11,"fold","","0-indexed [i1, i2) x [j1, j2)",41,[[]]],[11,"get","","",41,[[]]],[11,"set","","",41,[[]]],[11,"new","","",42,[[]]],[11,"ones","","",42,[[]]],[11,"get","","",42,[[]]],[11,"set","","",42,[[]]],[11,"count_ones","","",42,[[]]],[11,"count_zeros","","",42,[[]]],[11,"shl_bitor_assign","","",42,[[]]],[11,"shr_bitor_assign","","",42,[[]]],[11,"new","","",43,[[["vec",3]]]],[11,"len","","",43,[[]]],[11,"fold_close","","",43,[[]]],[11,"fold","","",43,[[]]],[11,"new","","",44,[[]]],[11,"range","","",44,[[["range",3],["range",3]],["vec",3]]],[11,"new","","",45,[[]]],[11,"from_vec","","",45,[[["vec",3]]]],[11,"update","","",45,[[]]],[11,"fold","","",45,[[]]],[11,"get","","",45,[[]]],[11,"fold_all","","",45,[[]]],[11,"new","","",46,[[]]],[11,"from_vec","","",46,[[["vec",3]]]],[11,"set","","",46,[[]]],[11,"update","","",46,[[]]],[11,"get","","",46,[[]]],[11,"fold","","",46,[[]]],[11,"fold_all","","",46,[[]]],[11,"lower_bound_all","","left most index [0, r) that satisfies monotonic condition",46,[[["fn",8]]]],[11,"lower_bound","","left most index [l, r) that satisfies monotonic condition",46,[[["fn",8]]]],[11,"new","","",47,[[]]],[11,"len","","",47,[[]]],[11,"is_empty","","",47,[[]]],[11,"fold_all","","",47,[[]]],[11,"last","","",47,[[],["option",4]]],[11,"push","","",47,[[]]],[11,"pop","","",47,[[],["option",4]]],[11,"new","","",48,[[]]],[11,"len","","",48,[[]]],[11,"is_empty","","",48,[[]]],[11,"fold_all","","",48,[[]]],[11,"front","","",48,[[],["option",4]]],[11,"back","","",48,[[],["option",4]]],[11,"push_front","","",48,[[]]],[11,"push_back","","",48,[[]]],[11,"pop_front","","",48,[[],["option",4]]],[11,"pop_back","","",48,[[],["option",4]]],[11,"reverse","","",48,[[]]],[11,"new","","",49,[[]]],[11,"insert_at","","",49,[[],["vec",3]]],[11,"insert","","",49,[[],["vec",3]]],[11,"find_at","","",49,[[],["result",4]]],[11,"find","","",49,[[],["result",4]]],[11,"next_node","","",49,[[],["option",4]]],[11,"count","","",49,[[]]],[11,"next_count","","",49,[[]]],[11,"new","","",50,[[["fn",8]]]],[11,"find","","",50,[[]]],[11,"find_root","","",50,[[],[["rootdata",3],["ref",3]]]],[11,"find_root_mut","","",50,[[],[["rootdata",3],["refmut",3]]]],[11,"unite","","",50,[[]]],[11,"size","","",50,[[]]],[11,"same","","",50,[[]]],[11,"members","","",50,[[],["vec",3]]],[11,"roots","","",50,[[],["vec",3]]],[11,"all_group_members","","",50,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",51,[[]]],[11,"find","","",51,[[]]],[11,"unite","","",51,[[]]],[11,"size","","",51,[[]]],[11,"same","","",51,[[]]],[11,"members","","",51,[[],["vec",3]]],[11,"roots","","",51,[[],["vec",3]]],[11,"all_group_members","","",51,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",52,[[]]],[11,"find","","",52,[[]]],[11,"get_weight","","",52,[[]]],[11,"unite","","",52,[[]]],[11,"size","","",52,[[]]],[11,"is_same","","",52,[[]]],[11,"get_difference","","",52,[[],["option",4]]],[11,"members","","",52,[[],["vec",3]]],[11,"roots","","",52,[[],["vec",3]]],[11,"all_group_members","","",52,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",53,[[["rankselectdictionaries",8],["vec",3],["clone",8]]]],[11,"access","","get k-th value",53,[[]]],[11,"rank","","the number of val in range",53,[[["range",3]]]],[11,"select","","index of k-th val",53,[[],["option",4]]],[11,"quantile","","get k-th smallest value in range",53,[[["range",3]]]],[11,"rank_lessthan","","the number of value less than val in range",53,[[["range",3]]]],[11,"rank_range","","the number of valrange in range",53,[[["range",3]]]],[8,"Automaton","","",null,null],[16,"Alphabet","","",54,null],[16,"State","","",54,null],[10,"initial","","",54,[[]]],[10,"next","","",54,[[],["option",4]]],[10,"accept","","",54,[[]]],[8,"RankSelectDictionaries","","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1",null,null],[10,"bit_length","","",55,[[]]],[10,"access","","get k-th bit",55,[[]]],[11,"rank1","","the number of 1 in [0, k)",55,[[]]],[11,"rank0","","the number of 0 in [0, k)",55,[[]]],[11,"select1","","index of k-th 1",55,[[],["option",4]]],[11,"select0","","index of k-th 0",55,[[],["option",4]]],[0,"geometry","competitive","",null,null],[3,"Circle","competitive::geometry","",null,null],[3,"Line","","",null,null],[3,"LineSegment","","",null,null],[3,"Real","","",null,null],[12,"0","","",56,null],[4,"CCW","","",null,null],[13,"OnlineFront","","a--b--c",57,null],[13,"Clockwise","","a--b-vc",57,null],[13,"OnSegment","","a--c--b",57,null],[13,"CounterClockwise","","a--b-^c",57,null],[13,"OnlineBack","","c--a--b",57,null],[5,"closest_pair","","",null,[[["vec",3],["point",6]]]],[5,"convex_hull","","",null,[[["vec",3],["point",6]],[["vec",3],["point",6]]]],[5,"convex_diameter","","",null,[[["vec",3],["point",6]]]],[5,"ccw","","",null,[[["point",6]],["ccw",4]]],[11,"new","","",58,[[["point",6]]]],[11,"cross_circle","","",58,[[],["option",4]]],[11,"contains_point","","",58,[[["point",6]]]],[11,"new","","",59,[[["point",6]]]],[11,"dir","","",59,[[],["point",6]]],[11,"ccw","","",59,[[["point",6]],["ccw",4]]],[11,"projection","","",59,[[["point",6]],["point",6]]],[11,"reflection","","",59,[[["point",6]],["point",6]]],[11,"distance_point","","",59,[[["point",6]]]],[11,"is_parallel","","",59,[[]]],[11,"is_orthogonal","","",59,[[]]],[11,"new","","",60,[[["point",6]]]],[11,"dir","","",60,[[],["point",6]]],[11,"ccw","","",60,[[["point",6]],["ccw",4]]],[11,"projection","","",60,[[["point",6]],["point",6]]],[11,"reflection","","",60,[[["point",6]],["point",6]]],[11,"is_parallel","","",60,[[]]],[11,"is_orthogonal","","",60,[[]]],[11,"intersect","","",60,[[]]],[11,"intersect_point","","",60,[[["point",6]]]],[11,"cross_point","","",60,[[],[["point",6],["option",4]]]],[11,"distance_point","","",60,[[["point",6]]]],[11,"distance","","",60,[[]]],[6,"Point","","",null,null],[17,"EPS","","",null,null],[0,"graph","competitive","graph structures and algorithms",null,null],[3,"Adjacent","competitive::graph","",null,null],[12,"id","","",61,null],[12,"to","","",61,null],[3,"Graph","","",null,null],[12,"vsize","","",62,null],[12,"esize","","",62,null],[12,"graph","","",62,null],[3,"GraphScanner","","",null,null],[3,"GraphRec","","",null,null],[12,"n","","",63,null],[12,"visited","","",63,null],[12,"cost","","",63,null],[3,"GraphEidCache","","",null,null],[3,"GridGraph","","",null,null],[3,"Adjacent4","","",null,null],[3,"Adjacent8","","",null,null],[3,"RevGraph","","",null,null],[12,"vsize","","",64,null],[12,"esize","","",64,null],[12,"graph","","",64,null],[12,"rgraph","","",64,null],[3,"RevGraphScanner","","",null,null],[3,"LowLink","","",null,null],[12,"ord","","",65,null],[12,"low","","",65,null],[12,"articulation","","",65,null],[12,"bridge","","",65,null],[3,"RevEdge","","",null,null],[12,"to","","",66,null],[12,"rev","","",66,null],[12,"cap","","",66,null],[3,"FordFulkerson","","",null,null],[3,"Dinic","","",null,null],[12,"graph","","",67,null],[3,"RevCEdge","","",null,null],[12,"to","","",68,null],[12,"rev","","",68,null],[12,"cap","","",68,null],[12,"cost","","",68,null],[3,"PrimalDual","","",null,null],[3,"StronglyConnectedComponent","","",null,null],[3,"TwoSatisfiability","","",null,null],[11,"new","","",61,[[],["adjacent",3]]],[11,"new","","",62,[[],["graph",3]]],[11,"add_edge","","",62,[[]]],[11,"add_undirected_edge","","",62,[[]]],[11,"vertices","","",62,[[],["range",3]]],[11,"adjacency","","",62,[[],["vec",3]]],[11,"eid_cache","","",62,[[],["grapheidcache",3]]],[11,"new","","",69,[[]]],[11,"new","","",63,[[]]],[11,"dfs","","",63,[[["graph",3]]]],[11,"new","","",70,[[]]],[11,"adjacency4","","",70,[[],["adjacent4",3]]],[11,"adjacency8","","",70,[[],["adjacent8",3]]],[11,"new","","",64,[[],["revgraph",3]]],[11,"add_edge","","",64,[[]]],[11,"vertices","","",64,[[],["range",3]]],[11,"adjacency","","",64,[[],["vec",3]]],[11,"radjacency","","",64,[[],["vec",3]]],[11,"new","","",71,[[]]],[11,"new","","",65,[[["graph",3]]]],[11,"new","","",66,[[]]],[11,"new","","",72,[[]]],[11,"add_edge","","",72,[[]]],[11,"dfs","","",72,[[]]],[11,"maximum_flow","","",72,[[]]],[11,"new","","",67,[[]]],[11,"add_edge","","",67,[[]]],[11,"maximum_flow","","",67,[[]]],[11,"new","","",68,[[]]],[11,"new","","",73,[[]]],[11,"add_edge","","",73,[[]]],[11,"minimum_cost_flow","","",73,[[],["option",4]]],[11,"minimum_spanning_tree","","",62,[[["fn",8]],["vec",3]]],[11,"chu_liu_edmond","","minimum_spanning_arborescence: O(|E||V|)",64,[[["group",8]],["option",4]]],[11,"minimum_spanning_arborescence","","tarjan",62,[[["group",8],["fn",8]],["option",4]]],[11,"dijkstra","","",62,[[["fn",8],["monoid",8]],[["option",4],["vec",3]]]],[11,"bellman_ford","","",62,[[["fn",8],["monoid",8]]]],[11,"warshall_floyd","","",62,[[["fn",8],["monoid",8]],[["vec",3],["vec",3]]]],[11,"new","","",74,[[["revgraph",3]]]],[11,"gen_cgraph","","",74,[[["revgraph",3]],["revgraph",3]]],[11,"components","","",74,[[],[["vec",3],["vec",3]]]],[11,"has_loop","","",74,[[]]],[11,"size","","",74,[[]]],[11,"add_inner","","",75,[[["revgraph",3]]]],[11,"add_or","","",75,[[["revgraph",3]]]],[11,"add_nand","","",75,[[["revgraph",3]]]],[11,"set_true","","",75,[[["revgraph",3]]]],[11,"set_false","","",75,[[["revgraph",3]]]],[11,"build","","",75,[[["revgraph",3]],[["option",4],["vec",3]]]],[11,"topological_sort","","",62,[[],["vec",3]]],[0,"math","competitive","mathematical datas",null,null],[3,"MemorizedFactorial","competitive::math","",null,null],[12,"fact","","",76,null],[12,"inv_fact","","",76,null],[3,"SmallModMemorizedFactorial","","",null,null],[3,"Matrix","","",null,null],[12,"shape","","",77,null],[12,"data","","",77,null],[3,"NumberTheoreticTransform","","",null,null],[3,"BabyStepGiantStep","","",null,null],[3,"Polynomial","","",null,null],[12,"0","","",78,null],[12,"1","","",78,null],[3,"PrimeTable","","",null,null],[3,"EulerPhiTable","","",null,null],[5,"fast_fourier_transform","","",null,[[["complex",3],["vec",3]],[["complex",3],["vec",3]]]],[5,"convolve_i64","","",null,[[["vec",3]],["vec",3]]],[5,"gcd","","",null,[[]]],[5,"gcd_binary","","",null,[[]]],[5,"lcm","","",null,[[]]],[5,"extgcd","","",null,[[]]],[5,"extgcd_loop","","",null,[[]]],[5,"extgcd_binary","","",null,[[]]],[5,"modinv","","",null,[[]]],[5,"modinv_loop","","",null,[[]]],[5,"modinv_extgcd_binary","","0 < a < p, gcd(a, p) == 1, p is prime > 2",null,[[]]],[5,"lagrange_interpolation","","",null,[[["mint",3],["modulus",8]],[["mint",3],["modulus",8]]]],[5,"convolve2","","max(a.len(), b.len()) * max(a) * max(b) < 3.64 * 10^18",null,[[["vec",3]],["vec",3]]],[5,"convolve3","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],[["vec",3],["mint",3]]]],[5,"convolve3_128","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],["vec",3]]],[5,"binary_exponentiation","","",null,[[["mulassign",8],["clone",8]],[["mulassign",8],["clone",8]]]],[5,"poly_add","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_sub","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_mul","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_div","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_mod","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_assign","","",null,[[["polynomial",3]]]],[5,"prime_factors","","",null,[[],["vec",3]]],[5,"divisors","","",null,[[],["vec",3]]],[5,"primes","","",null,[[],["vec",3]]],[5,"pow","","",null,[[]]],[5,"miller_rabin","","",null,[[]]],[5,"find_factor","","",null,[[]]],[5,"find_factor2","","",null,[[]]],[5,"prime_factors_rho","","",null,[[],["vec",3]]],[5,"euler_phi","","",null,[[]]],[5,"moebius","","g(d) = Sigma mu(d) * f(n/d)",null,[[],["hashmap",3]]],[5,"segmented_sieve_primes","","",null,[[],["vec",3]]],[11,"new","","",76,[[]]],[11,"combination","","",76,[[],["mint",3]]],[11,"permutation","","",76,[[],["mint",3]]],[11,"homogeneous_product","","",76,[[],["mint",3]]],[11,"inv","","",76,[[],["mint",3]]],[11,"new","","",79,[[]]],[11,"factorial","","n! = a * p^e",79,[[]]],[11,"combination","","",79,[[],["mint",3]]],[11,"lagrange_interpolation","","Lagrange interpolation with (i, f(i)) (0 <= i <= n)",76,[[["mint",3]],["mint",3]]],[11,"new","","",77,[[]]],[11,"from_vec","","",77,[[["vec",3],["vec",3]]]],[11,"zeros","","",77,[[]]],[11,"eye","","",77,[[]]],[11,"pow","","",77,[[]]],[11,"gauss_jordan","","",77,[[["vec",3]],[["option",4],["vec",3]]]],[11,"convert","","",80,[[["intoiterator",8]],[["vec",3],["mint",3]]]],[11,"ntt","","",80,[[["vec",3],["mint",3]],[["vec",3],["mint",3]]]],[11,"convolve","","",80,[[["vec",3],["mint",3]],[["vec",3],["mint",3]]]],[11,"convolve_it","","",80,[[["intoiterator",8]],[["vec",3],["mint",3]]]],[11,"new","","",81,[[]]],[11,"solve","","",81,[[],["option",4]]],[11,"len","","",78,[[]]],[11,"new","","",82,[[]]],[11,"is_prime","","",82,[[]]],[11,"prime_factors","","",82,[[],["vec",3]]],[11,"new","","",83,[[]]],[11,"get","","",83,[[]]],[0,"poly_mod_poly","","",null,null],[5,"poly_mulmod","competitive::math::poly_mod_poly","",null,[[["poly",6]],["poly",6]]],[5,"poly_pow","","",null,[[["poly",6]],["poly",6]]],[6,"Poly","","",null,null],[8,"NTTModulus","competitive::math","",null,null],[10,"primitive_root","","",84,[[]]],[0,"num","competitive","",null,null],[3,"Complex","competitive::num","",null,null],[12,"re","","",85,null],[12,"im","","",85,null],[3,"MInt","","",null,null],[3,"QuadDouble","","ref: https://na-inet.jp/na/qd_ja.pdf",null,null],[12,"0","","",86,null],[11,"new","","",85,[[]]],[11,"transpose","","",85,[[]]],[11,"conjugate","","",85,[[]]],[11,"dot","","",85,[[]]],[11,"cross","","",85,[[]]],[11,"norm","","",85,[[]]],[11,"polar","","",85,[[]]],[11,"abs","","",85,[[]]],[11,"unit","","",85,[[]]],[11,"angle","","",85,[[]]],[11,"new","","",87,[[]]],[11,"new_unchecked","","",87,[[]]],[11,"inner","","",87,[[]]],[11,"one","","",87,[[]]],[11,"zero","","",87,[[]]],[11,"get_mod","","",87,[[]]],[11,"pow","","",87,[[]]],[11,"inv","","only prime modulus",87,[[]]],[11,"new","","",86,[[]]],[11,"renormalize","","",86,[[]]],[11,"is_zero","","",86,[[]]],[11,"is_sign_negative","","",86,[[]]],[11,"sqrt","","",86,[[]]],[11,"abs","","",86,[[]]],[11,"div2","","",86,[[]]],[0,"modulus","","",null,null],[3,"Modulo1000000007","competitive::num::modulus","",null,null],[3,"Modulo1000000009","","",null,null],[3,"Modulo998244353","","",null,null],[3,"DynModulo","","",null,null],[5,"set_dyn_modulus","","",null,[[]]],[8,"Modulus","competitive::num","",null,null],[10,"get_modulus","","",88,[[]]],[11,"modulo","","",88,[[]]],[0,"string","competitive","string algorithems",null,null],[3,"KnuthMorrisPratt","competitive::string","",null,null],[3,"MultipleRollingHash","","",null,null],[3,"RollingHash","","",null,null],[3,"SuffixArray","","",null,null],[3,"Zarray","","",null,null],[11,"new","","",89,[[["vec",3]]]],[11,"search_all","","",89,[[["vec",3]],["vec",3]]],[18,"MOD","","",90,null],[11,"mersenne_mod","","",90,[[]]],[11,"mersenne_mul","","",90,[[]]],[11,"mersenne_mul_mod","","",90,[[]]],[11,"new","","",90,[[["vec",3]]]],[11,"hash_once","","",90,[[["vec",3]]]],[11,"find","","S [l, r)",90,[[]]],[11,"concat","","",90,[[]]],[11,"new","","",91,[[["vec",3]]]],[11,"new_rand","","",91,[[["vec",3]]]],[11,"find","","",91,[[],["vec",3]]],[11,"concat","","",91,[[["vec",3]],["vec",3]]],[11,"new","","",92,[[["vec",3]]]],[11,"len","","",92,[[]]],[11,"longest_common_prefix_array","","",92,[[],["vec",3]]],[11,"new","","",93,[[]]],[11,"search","","",93,[[["vec",3],["eq",8]],["vec",3]]],[0,"tools","competitive","",null,null],[3,"Counter","competitive::tools","",null,null],[3,"SimuratedAnnealing","","",null,null],[12,"iter_count","","",94,null],[12,"now","","",94,null],[12,"time","","",94,null],[12,"temperture","","",94,null],[12,"log_table","","",94,null],[12,"rand","","",94,null],[3,"Xorshift","","",null,null],[3,"Scanner","","",null,null],[3,"TotalOrd","","implement Ord by PartialOrd",null,null],[12,"0","","",95,null],[5,"read_stdin_all","","",null,[[],["string",3]]],[5,"read_all","","",null,[[],["string",3]]],[11,"new","","",96,[[]]],[11,"get","","",96,[[]]],[11,"add","","",96,[[]]],[11,"keys","","",96,[[],["keys",3]]],[11,"values","","",96,[[],["values",3]]],[11,"iter","","",96,[[],["iter",3]]],[18,"IS_MAXIMIZE","","",94,null],[18,"START_TEMP","","",94,null],[18,"END_TEMP","","",94,null],[18,"TEMP_RATIO","","",94,null],[18,"TIME_LIMIT","","",94,null],[18,"LOG_TABLE_SIZE","","",94,null],[18,"UPDATE_INTERVAL","","",94,null],[18,"SEED","","",94,null],[11,"new","","",94,[[]]],[11,"is_accepted","","",94,[[]]],[11,"is_end","","",94,[[]]],[11,"new","","",97,[[]]],[11,"time","","",97,[[]]],[11,"next","","",97,[[]]],[11,"rand","","",97,[[]]],[11,"rands","","",97,[[],["vec",3]]],[11,"randf","","",97,[[]]],[11,"gen_bool","","",97,[[]]],[11,"iter","","",98,[[],[["scanneriter",3],["iterscan",8]]]],[11,"new","","",98,[[]]],[11,"scan","","",98,[[]]],[11,"mscan","","",98,[[["markediterscan",8]]]],[11,"scan_vec","","",98,[[],["vec",3]]],[11,"scan_chars","","",98,[[],["vec",3]]],[11,"scan_chars_with","","",98,[[],["vec",3]]],[0,"marker","","",null,null],[3,"Usize1","competitive::tools::marker","",null,null],[3,"Isize1","","",null,null],[8,"IterScan","competitive::tools","",null,null],[16,"Output","","",99,null],[10,"scan","","",99,[[],["option",4]]],[8,"MarkedIterScan","","",null,null],[16,"Output","","",100,null],[10,"mscan","","",100,[[],["option",4]]],[0,"tree","competitive","tree algorithems",null,null],[3,"EulerTourForEdge","competitive::tree","",null,null],[12,"eidx","","",101,null],[12,"par","","",101,null],[3,"EulerTourForVertex","","",null,null],[12,"vidx","","",102,null],[3,"EulerTourForRichVertex","","",null,null],[3,"LowestCommonAncestor","","",null,null],[3,"LCAMonoid","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",103,null],[12,"vidx","","",103,null],[3,"ReRooting","","dynamic programming on all-rooted trees",null,null],[12,"n","","vertex size",104,null],[12,"monoid","","merge subtree",104,null],[12,"dp","","dp[v]: result of v-rooted tree",104,null],[12,"ep","","ep[e]: result of e-subtree, if e >= n then…",104,null],[12,"rooting","","rooting(data, vid, (Optional)eid): add root node(vid),…",104,null],[3,"TreeRec","","",null,null],[12,"n","","",105,null],[11,"tree_depth","competitive::graph","",62,[[],["vec",3]]],[11,"weighted_tree_depth","","",62,[[["fn",8],["monoid",8]],["vec",3]]],[11,"tree_size","","",62,[[],["vec",3]]],[11,"new","competitive::tree","",106,[[["graph",3]]]],[11,"ancestor","","",106,[[]]],[11,"new","","",101,[[]]],[11,"len","","",101,[[]]],[11,"edge_tour","","",101,[[["graph",3]]]],[11,"new","","",102,[[]]],[11,"len","","",102,[[]]],[11,"subtree_vertex_tour","","",102,[[["graph",3]]]],[11,"path_vertex_tour","","",102,[[["graph",3]]]],[11,"subtree_query","","",102,[[["fnmut",8]]]],[11,"subtree_update","","",102,[[["fnmut",8]]]],[11,"path_query","","",102,[[["fnmut",8]]]],[11,"path_update","","",102,[[["fnmut",8]]]],[11,"new","","",107,[[]]],[11,"len","","",107,[[]]],[11,"vertex_tour","","",107,[[["graph",3]]]],[11,"query","","",107,[[["fnmut",8]]]],[11,"gen_lca","","",107,[[["graph",3]],["lowestcommonancestor",3]]],[11,"lca","","",108,[[]]],[11,"new","","",103,[[["graph",3]]]],[11,"lca","","",103,[[]]],[11,"update","","",103,[[["fnmut",8]]]],[11,"query","","",103,[[["fnmut",8]]]],[11,"query_noncom","","",103,[[["fnmut",8]]]],[11,"new","","",104,[[]]],[11,"rerooting","","",104,[[["graph",3]]]],[11,"new","","",105,[[]]],[11,"dfs","","",105,[[["graph",3]]]],[0,"impl_lcam","","",null,null],[0,"aizu_online_judge","competitive","Aizu Online Judge",null,null],[0,"dsl","competitive::aizu_online_judge","",null,null],[0,"dsl_1_a","competitive::aizu_online_judge::dsl","",null,null],[3,"UnionFind","competitive::aizu_online_judge::dsl::dsl_1_a","",null,null],[5,"dsl_1_a","","✅  AC  9ms",null,[[]]],[0,"dsl_1_b","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_1_b","$+$",null,null],[3,"WeightedUnionFind","","",null,null],[5,"dsl_1_b","","✅  AC  24ms",null,[[]]],[0,"dsl_2_a","competitive::aizu_online_judge::dsl","",null,null],[3,"MinOperation","competitive::aizu_online_judge::dsl::dsl_2_a","binary operation to select smaller element",null,null],[3,"SegmentTree","","",null,null],[5,"dsl_2_a","","✅  AC  17ms",null,[[]]],[0,"dsl_2_b","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_b","$+$",null,null],[3,"SegmentTree","","",null,null],[5,"dsl_2_b","","✅  AC  22ms",null,[[]]],[0,"dsl_2_c","competitive::aizu_online_judge::dsl","",null,null],[3,"Static2DTree","competitive::aizu_online_judge::dsl::dsl_2_c","",null,null],[5,"dsl_2_c","","✅  AC  362ms",null,[[]]],[0,"dsl_2_d","competitive::aizu_online_judge::dsl","",null,null],[3,"LastOperation","competitive::aizu_online_judge::dsl::dsl_2_d","retain the last element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_d","","✅  AC  53ms",null,[[]]],[0,"dsl_2_e","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_e","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_e","","✅  AC  47ms",null,[[]]],[0,"dsl_2_f","competitive::aizu_online_judge::dsl","",null,null],[3,"LastOperation","competitive::aizu_online_judge::dsl::dsl_2_f","retain the last element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_f","","✅  AC  64ms",null,[[]]],[0,"dsl_2_g","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_g","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_g","","✅  AC  53ms",null,[[]]],[0,"dsl_2_h","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_h","$+$",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_h","","✅  AC  68ms",null,[[]]],[0,"dsl_2_i","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_i","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LastOperation","","retain the last element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_i","","✅  AC  92ms",null,[[]]],[0,"dsl_3_a","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_3_a","$+$",null,null],[3,"QueueAggregation","","",null,null],[5,"dsl_3_a","","✅  AC  5ms",null,[[]]],[0,"dsl_3_b","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_3_b","competitive::aizu_online_judge::dsl::dsl_3_b","✅  AC  3ms",null,[[]]],[0,"dsl_3_c","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_3_c","competitive::aizu_online_judge::dsl::dsl_3_c","✅  AC  248ms",null,[[]]],[0,"dsl_3_d","competitive::aizu_online_judge::dsl","",null,null],[3,"MinOperation","competitive::aizu_online_judge::dsl::dsl_3_d","binary operation to select smaller element",null,null],[3,"QueueAggregation","","",null,null],[5,"dsl_3_d","","✅  AC  125ms",null,[[]]],[0,"dsl_4_a","competitive::aizu_online_judge::dsl","",null,null],[3,"Compress","competitive::aizu_online_judge::dsl::dsl_4_a","",null,null],[5,"dsl_4_a","","✅  AC  68ms",null,[[]]],[0,"dsl_5_a","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_5_a","competitive::aizu_online_judge::dsl::dsl_5_a","✅  AC  6ms",null,[[]]],[0,"dsl_5_b","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_5_b","competitive::aizu_online_judge::dsl::dsl_5_b","✅  AC  11ms",null,[[]]],[0,"grl","competitive::aizu_online_judge","",null,null],[0,"grl_1_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_1_a","$+$",null,null],[3,"GraphScanner","","",null,null],[5,"grl_1_a","","✅  AC  92ms",null,[[]]],[0,"grl_1_b","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_1_b","$+$",null,null],[3,"GraphScanner","","",null,null],[5,"grl_1_b","","✅  AC  7ms",null,[[]]],[0,"grl_1_c","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_1_c","$+$",null,null],[3,"GraphScanner","","",null,null],[5,"grl_1_c","","✅  AC  3ms",null,[[]]],[0,"grl_2_a","competitive::aizu_online_judge::grl","",null,null],[3,"GraphScanner","competitive::aizu_online_judge::grl::grl_2_a","",null,null],[5,"grl_2_a","","✅  AC  24ms",null,[[]]],[0,"grl_2_b","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_2_b","$+$",null,null],[3,"GraphScanner","","",null,null],[5,"grl_2_b","","✅  AC  0ms",null,[[]]],[0,"grl_3_a","competitive::aizu_online_judge::grl","",null,null],[3,"GraphScanner","competitive::aizu_online_judge::grl::grl_3_a","",null,null],[3,"LowLink","","",null,null],[12,"ord","","",65,null],[12,"low","","",65,null],[12,"articulation","","",65,null],[12,"bridge","","",65,null],[5,"grl_3_a","","✅  AC  5ms",null,[[]]],[0,"grl_3_b","competitive::aizu_online_judge::grl","",null,null],[3,"GraphScanner","competitive::aizu_online_judge::grl::grl_3_b","",null,null],[3,"LowLink","","",null,null],[12,"ord","","",65,null],[12,"low","","",65,null],[12,"articulation","","",65,null],[12,"bridge","","",65,null],[5,"grl_3_b","","✅  AC  6ms",null,[[]]],[0,"grl_3_c","competitive::aizu_online_judge::grl","",null,null],[3,"RevGraphScanner","competitive::aizu_online_judge::grl::grl_3_c","",null,null],[3,"StronglyConnectedComponent","","",null,null],[5,"grl_3_c","","✅  AC  11ms",null,[[]]],[0,"grl_4_a","competitive::aizu_online_judge::grl","",null,null],[3,"GraphScanner","competitive::aizu_online_judge::grl::grl_4_a","",null,null],[5,"grl_4_a","","✅  AC  0ms",null,[[]]],[0,"grl_4_b","competitive::aizu_online_judge::grl","",null,null],[3,"GraphScanner","competitive::aizu_online_judge::grl::grl_4_b","",null,null],[5,"grl_4_b","","✅  AC  4ms",null,[[]]],[5,"judge_grl_4_b","","",null,[[]]],[0,"grl_5_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_5_a","$+$",null,null],[3,"GraphScanner","","",null,null],[5,"grl_5_a","","✅  AC  22ms",null,[[]]],[0,"grl_5_b","competitive::aizu_online_judge::grl","",null,null],[3,"MaxOperation","competitive::aizu_online_judge::grl::grl_5_b","binary operation to select larger element",null,null],[3,"GraphScanner","","",null,null],[3,"ReRooting","","dynamic programming on all-rooted trees",null,null],[12,"n","","vertex size",104,null],[12,"monoid","","merge subtree",104,null],[12,"dp","","dp[v]: result of v-rooted tree",104,null],[12,"ep","","ep[e]: result of e-subtree, if e >= n then…",104,null],[12,"rooting","","rooting(data, vid, (Optional)eid): add root node(vid),…",104,null],[5,"grl_5_b","","✅  AC  5ms",null,[[]]],[0,"grl_5_c","competitive::aizu_online_judge::grl","",null,null],[3,"Graph","competitive::aizu_online_judge::grl::grl_5_c","",null,null],[12,"vsize","","",62,null],[12,"esize","","",62,null],[12,"graph","","",62,null],[3,"EulerTourForRichVertex","","",null,null],[5,"grl_5_c","","✅  AC  135ms",null,[[]]],[0,"grl_5_d","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_5_d","$+$",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"Graph","","",null,null],[12,"vsize","","",62,null],[12,"esize","","",62,null],[12,"graph","","",62,null],[3,"EulerTourForEdge","","",null,null],[12,"eidx","","",101,null],[12,"par","","",101,null],[5,"grl_5_d","","✅  AC  54ms",null,[[]]],[0,"grl_5_e","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_5_e","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"Graph","","",null,null],[12,"vsize","","",62,null],[12,"esize","","",62,null],[12,"graph","","",62,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",103,null],[12,"vidx","","",103,null],[5,"grl_5_e","","✅  AC  227ms",null,[[]]],[0,"grl_6_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_6_a","$+$",null,null],[3,"Dinic","","",null,null],[12,"graph","","",67,null],[5,"grl_6_a","","✅  AC  0ms",null,[[]]],[0,"grl_6_b","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_6_b","$+$",null,null],[3,"PrimalDual","","",null,null],[5,"grl_6_b","","✅  AC  1ms",null,[[]]],[0,"grl_7_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_7_a","$+$",null,null],[3,"Dinic","","",null,null],[12,"graph","","",67,null],[5,"grl_7_a","","✅  AC  1ms",null,[[]]],[0,"itp1","competitive::aizu_online_judge","",null,null],[0,"itp1_1_a","competitive::aizu_online_judge::itp1","",null,null],[5,"itp1_1_a","competitive::aizu_online_judge::itp1::itp1_1_a","✅  AC  0ms",null,[[]]],[0,"library_checker","competitive","Library-Checker",null,null],[0,"datastructure","competitive::library_checker","",null,null],[0,"point_add_range_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::point_add_range_sum","$+$",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"SegmentTree","","",null,null],[5,"point_add_range_sum_binary_indexed_tree","","✅  AC  84ms",null,[[]]],[5,"point_add_range_sum_segment_tree","","✅  AC  114ms",null,[[]]],[0,"point_set_range_composite","competitive::library_checker::datastructure","",null,null],[3,"LinearOperation","competitive::library_checker::datastructure::point_set_range_composite","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"SegmentTree","","",null,null],[3,"Modulo998244353","","",null,null],[3,"MInt","","",null,null],[5,"point_set_range_composite","","✅  AC  170ms",null,[[]]],[0,"queue_operate_all_composite","competitive::library_checker::datastructure","",null,null],[3,"LinearOperation","competitive::library_checker::datastructure::queue_operate_all_composite","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"QueueAggregation","","",null,null],[3,"Modulo998244353","","",null,null],[3,"MInt","","",null,null],[5,"queue_operate_all_composite","","✅  AC  45ms",null,[[]]],[0,"range_affine_range_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::range_affine_range_sum","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LinearOperation","","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"Modulo998244353","","",null,null],[3,"MInt","","",null,null],[5,"range_affine_range_sum","","✅  AC  870ms",null,[[]]],[0,"range_kth_smallest","competitive::library_checker::datastructure","",null,null],[3,"WaveletMatrix","competitive::library_checker::datastructure::range_kth_smallest","",null,null],[5,"range_kth_smallest","","✅  AC  338ms",null,[[]]],[0,"staticrmq","competitive::library_checker::datastructure","",null,null],[3,"MinOperation","competitive::library_checker::datastructure::staticrmq","binary operation to select smaller element",null,null],[3,"DisjointSparseTable","","",null,null],[3,"SegmentTree","","",null,null],[5,"staticrmq_disjoint_sparse_table","","✅  AC  178ms",null,[[]]],[5,"staticrmq_segment_tree","","✅  AC  170ms",null,[[]]],[0,"unionfind","competitive::library_checker::datastructure","",null,null],[3,"UnionFind","competitive::library_checker::datastructure::unionfind","",null,null],[5,"unionfind","","✅  AC  20ms",null,[[]]],[0,"vertex_add_path_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::vertex_add_path_sum","$+$",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"GraphScanner","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",103,null],[12,"vidx","","",103,null],[5,"vertex_add_path_sum","","✅  AC  1054ms",null,[[]]],[0,"vertex_add_subtree_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::vertex_add_subtree_sum","$+$",null,null],[3,"SegmentTree","","",null,null],[3,"Graph","","",null,null],[12,"vsize","","",62,null],[12,"esize","","",62,null],[12,"graph","","",62,null],[3,"EulerTourForVertex","","",null,null],[12,"vidx","","",102,null],[5,"vertex_add_subtree_sum","","✅  AC  229ms",null,[[]]],[0,"vertex_set_path_composite","competitive::library_checker::datastructure","",null,null],[3,"LinearOperation","competitive::library_checker::datastructure::vertex_set_path_composite","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"ReverseOperation","","",null,null],[3,"SegmentTree","","",null,null],[3,"GraphScanner","","",null,null],[3,"Modulo998244353","","",null,null],[3,"MInt","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",103,null],[12,"vidx","","",103,null],[5,"vertex_set_path_composite","","✅  AC  306ms",null,[[]]],[0,"graph","competitive::library_checker","",null,null],[0,"bipartitematching","competitive::library_checker::graph","",null,null],[3,"Dinic","competitive::library_checker::graph::bipartitematching","",null,null],[12,"graph","","",67,null],[3,"RevEdge","","",null,null],[12,"to","","",66,null],[12,"rev","","",66,null],[12,"cap","","",66,null],[5,"bipartitematching","","✅  AC  520ms",null,[[]]],[0,"directedmst","competitive::library_checker::graph","",null,null],[3,"AdditiveOperation","competitive::library_checker::graph::directedmst","$+$",null,null],[3,"GraphScanner","","",null,null],[5,"directedmst","","✅  AC  174ms",null,[[]]],[0,"lca","competitive::library_checker::graph","",null,null],[3,"Graph","competitive::library_checker::graph::lca","",null,null],[12,"vsize","","",62,null],[12,"esize","","",62,null],[12,"graph","","",62,null],[3,"EulerTourForRichVertex","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",103,null],[12,"vidx","","",103,null],[5,"lca_euler_tour","","✅  AC  646ms",null,[[]]],[5,"lca_hld","","✅  AC  569ms",null,[[]]],[0,"scc","competitive::library_checker::graph","",null,null],[3,"RevGraphScanner","competitive::library_checker::graph::scc","",null,null],[3,"StronglyConnectedComponent","","",null,null],[5,"scc","","✅  AC  562ms",null,[[]]],[0,"math","competitive::library_checker","",null,null],[0,"convolution_mod","competitive::library_checker::math","",null,null],[3,"NumberTheoreticTransform","competitive::library_checker::math::convolution_mod","",null,null],[3,"Modulo998244353","","",null,null],[3,"MInt","","",null,null],[5,"convolution_mod","","✅  AC  296ms",null,[[]]],[0,"convolution_mod_1000000007","competitive::library_checker::math","",null,null],[3,"Modulo1000000007","competitive::library_checker::math::convolution_mod_1000000007","",null,null],[5,"convolve3","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],[["vec",3],["mint",3]]]],[5,"convolution_mod_1000000007","","✅  AC  1256ms",null,[[]]],[0,"enumerate_primes","competitive::library_checker::math","",null,null],[5,"segmented_sieve_primes","competitive::library_checker::math::enumerate_primes","",null,[[],["vec",3]]],[5,"enumerate_primes","","✅  AC  1802ms",null,[[]]],[0,"factorize","competitive::library_checker::math","",null,null],[5,"prime_factors_rho","competitive::library_checker::math::factorize","",null,[[],["vec",3]]],[5,"factorize","","✅  AC  1003ms",null,[[]]],[0,"two_sat","competitive::library_checker::math","",null,null],[3,"RevGraph","competitive::library_checker::math::two_sat","",null,null],[12,"vsize","","",64,null],[12,"esize","","",64,null],[12,"graph","","",64,null],[12,"rgraph","","",64,null],[3,"TwoSatisfiability","","",null,null],[5,"two_sat","","✅  AC  1260ms",null,[[]]],[0,"sample","competitive::library_checker","",null,null],[0,"aplusb","competitive::library_checker::sample","",null,null],[5,"aplusb","competitive::library_checker::sample::aplusb","✅  AC  0ms",null,[[]]],[0,"many_aplusb","competitive::library_checker::sample","",null,null],[5,"many_aplusb","competitive::library_checker::sample::many_aplusb","✅  AC  215ms",null,[[]]],[0,"string","competitive::library_checker","",null,null],[0,"suffixarray","competitive::library_checker::string","",null,null],[3,"SuffixArray","competitive::library_checker::string::suffixarray","",null,null],[5,"suffixarray","","✅  AC  919ms",null,[[]]],[0,"zalgorithm","competitive::library_checker::string","",null,null],[3,"Zarray","competitive::library_checker::string::zalgorithm","",null,null],[5,"zalgorithm","","✅  AC  33ms",null,[[]]],[14,"impl_additive_identity","competitive","",null,null],[14,"impl_multiplicative_identity","","",null,null],[14,"impl_bitand_identity","","",null,null],[14,"impl_bitor_identity","","",null,null],[14,"read_value","","",null,null],[14,"input_inner","","",null,null],[14,"input","","",null,null],[14,"comprehension","","",null,null],[14,"min","","",null,null],[14,"chmin","","",null,null],[14,"max","","",null,null],[14,"chmax","","",null,null],[14,"echo","","",null,null],[14,"scan_value","","",null,null],[14,"scan","","",null,null],[11,"from","competitive::algebra","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","competitive::algorithm","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","competitive::data_structure","",110,[[]]],[11,"into","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","competitive::geometry","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","competitive::graph","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"into_iter","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"into_iter","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","competitive::math","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","competitive::num","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"to_string","","",87,[[],["string",3]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"to_string","","",86,[[],["string",3]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","competitive::num::modulus","",119,[[]]],[11,"into","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","competitive::string","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","competitive::tools","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","competitive::tools::marker","",123,[[]]],[11,"into","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from","competitive::tree","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"operate","competitive::algebra","",0,[[]]],[11,"operate","","",1,[[]]],[11,"operate","","",2,[[]]],[11,"operate","","",3,[[]]],[11,"operate","","",4,[[]]],[11,"operate","","",5,[[]]],[11,"operate","","",6,[[]]],[11,"operate","","",7,[[]]],[11,"operate","","",8,[[]]],[11,"operate","","",9,[[]]],[11,"operate","","",10,[[]]],[11,"operate","","",109,[[]]],[11,"operate","","",11,[[]]],[11,"operate","","",12,[[]]],[11,"operate","","",13,[[]]],[11,"operate","","",14,[[]]],[11,"operate","competitive::tree","",106,[[]]],[11,"unit","competitive::algebra","",0,[[]]],[11,"unit","","",1,[[]]],[11,"unit","","",2,[[]]],[11,"unit","","",3,[[]]],[11,"unit","","",4,[[]]],[11,"unit","","",5,[[]]],[11,"unit","","",6,[[]]],[11,"unit","","",7,[[]]],[11,"unit","","",8,[[]]],[11,"unit","","",9,[[]]],[11,"unit","","",10,[[]]],[11,"unit","","",11,[[]]],[11,"unit","","",12,[[]]],[11,"unit","","",13,[[]]],[11,"unit","","",14,[[]]],[11,"inverse","","",4,[[]]],[11,"inverse","","",5,[[]]],[11,"inverse","","",10,[[]]],[11,"inverse","","",12,[[]]],[11,"inverse","","",14,[[]]],[11,"rinv_operation","","",4,[[]]],[11,"rinv_operation","","",5,[[]]],[11,"zero","competitive::num","",87,[[]]],[11,"one","","",87,[[]]],[11,"initial","competitive::data_structure","",110,[[]]],[11,"next","","",110,[[],["option",4]]],[11,"accept","","",110,[[]]],[11,"initial","","",111,[[]]],[11,"next","","",111,[[],["option",4]]],[11,"accept","","",111,[[]]],[11,"initial","","",112,[[]]],[11,"next","","",112,[[],["option",4]]],[11,"accept","","",112,[[]]],[11,"initial","","",37,[[]]],[11,"next","","",37,[[],["option",4]]],[11,"accept","","",37,[[]]],[11,"initial","","",38,[[]]],[11,"next","","",38,[[],["option",4]]],[11,"accept","","",38,[[]]],[11,"initial","","",113,[[]]],[11,"next","","",113,[[],["option",4]]],[11,"accept","","",113,[[]]],[11,"initial","","",114,[[]]],[11,"next","","",114,[[],["option",4]]],[11,"accept","","",114,[[]]],[11,"initial","","",39,[[]]],[11,"next","","",39,[[],["option",4]]],[11,"accept","","",39,[[]]],[11,"bit_length","","",115,[[]]],[11,"access","","",115,[[]]],[11,"rank1","","",115,[[]]],[11,"select1","","",115,[[],["option",4]]],[11,"select0","","",115,[[],["option",4]]],[11,"primitive_root","competitive::num::modulus","",121,[[]]],[11,"get_modulus","","",119,[[]]],[11,"get_modulus","","",120,[[]]],[11,"get_modulus","","",121,[[]]],[11,"get_modulus","","",122,[[]]],[11,"scan","competitive::num","",87,[[],["option",4]]],[11,"scan","competitive::tools::marker","",123,[[],["option",4]]],[11,"scan","","",124,[[],["option",4]]],[11,"mscan","competitive::graph","",69,[[],["option",4]]],[11,"mscan","","",71,[[],["option",4]]],[11,"from","competitive::num","",87,[[]]],[11,"from","","",87,[[]]],[11,"from","","",87,[[]]],[11,"from","","",87,[[]]],[11,"from","","",87,[[]]],[11,"from","","",87,[[]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"next","competitive::graph","",117,[[],["option",4]]],[11,"next","","",118,[[],["option",4]]],[11,"clone","competitive::algebra","",0,[[],["maxoperation",3]]],[11,"clone","","",1,[[],["minoperation",3]]],[11,"clone","","",2,[[],["firstoperation",3]]],[11,"clone","","",3,[[],["lastoperation",3]]],[11,"clone","","",4,[[],["additiveoperation",3]]],[11,"clone","","",5,[[],["multiplicativeoperation",3]]],[11,"clone","","",6,[[],["linearoperation",3]]],[11,"clone","","",7,[[],["bitandoperation",3]]],[11,"clone","","",8,[[],["bitoroperation",3]]],[11,"clone","","",9,[[],["monoidaloperation",3]]],[11,"clone","","",10,[[],["groupoperation",3]]],[11,"clone","","",109,[[],["assocoativeoperator",3]]],[11,"clone","","",11,[[],["absorbedassocoativeoperator",3]]],[11,"clone","","",12,[[],["cartesianoperation",3]]],[11,"clone","","",13,[[],["countingoperation",3]]],[11,"clone","","",14,[[],["reverseoperation",3]]],[11,"clone","competitive::algorithm","",26,[[],["compress",3]]],[11,"clone","","",27,[[],["chtline",3]]],[11,"clone","","",28,[[],["convexhulltrick",3]]],[11,"clone","competitive::data_structure","",40,[[],["binaryindexedtree",3]]],[11,"clone","","",41,[[],["binaryindexedtree2d",3]]],[11,"clone","","",42,[[],["bitset",3]]],[11,"clone","","",43,[[],["disjointsparsetable",3]]],[11,"clone","","",45,[[],["lazysegmenttree",3]]],[11,"clone","","",46,[[],["segmenttree",3]]],[11,"clone","","",47,[[],["queueaggregation",3]]],[11,"clone","","",48,[[],["dequeaggregation",3]]],[11,"clone","","",51,[[],["unionfind",3]]],[11,"clone","","",52,[[],["weightedunionfind",3]]],[11,"clone","competitive::geometry","",58,[[],["circle",3]]],[11,"clone","","",59,[[],["line",3]]],[11,"clone","","",60,[[],["linesegment",3]]],[11,"clone","","",56,[[],["real",3]]],[11,"clone","","",57,[[],["ccw",4]]],[11,"clone","competitive::graph","",61,[[],["adjacent",3]]],[11,"clone","","",62,[[],["graph",3]]],[11,"clone","","",116,[[],["grapheidcache",3]]],[11,"clone","","",70,[[],["gridgraph",3]]],[11,"clone","","",64,[[],["revgraph",3]]],[11,"clone","","",66,[[],["revedge",3]]],[11,"clone","","",68,[[],["revcedge",3]]],[11,"clone","competitive::math","",76,[[],["memorizedfactorial",3]]],[11,"clone","","",79,[[],["smallmodmemorizedfactorial",3]]],[11,"clone","","",77,[[],["matrix",3]]],[11,"clone","","",81,[[],["babystepgiantstep",3]]],[11,"clone","","",78,[[],["polynomial",3]]],[11,"clone","","",82,[[],["primetable",3]]],[11,"clone","","",83,[[],["eulerphitable",3]]],[11,"clone","competitive::num","",85,[[],["complex",3]]],[11,"clone","","",87,[[]]],[11,"clone","","",86,[[],["quaddouble",3]]],[11,"clone","competitive::string","",89,[[],["knuthmorrispratt",3]]],[11,"clone","","",90,[[],["rollinghash",3]]],[11,"clone","","",91,[[],["multiplerollinghash",3]]],[11,"clone","","",92,[[],["suffixarray",3]]],[11,"clone","","",93,[[],["zarray",3]]],[11,"clone","competitive::tools","",96,[[],["counter",3]]],[11,"clone","","",97,[[],["xorshift",3]]],[11,"clone","competitive::tree","",101,[[],["eulertourforedge",3]]],[11,"clone","","",102,[[],["eulertourforvertex",3]]],[11,"clone","","",107,[[],["eulertourforrichvertex",3]]],[11,"clone","","",108,[[],["lowestcommonancestor",3]]],[11,"clone","","",106,[[],["lcamonoid",3]]],[11,"clone","","",104,[[],["rerooting",3]]],[11,"clone","","",105,[[],["treerec",3]]],[11,"default","competitive::algebra","",0,[[],["maxoperation",3]]],[11,"default","","",1,[[],["minoperation",3]]],[11,"default","","",2,[[],["firstoperation",3]]],[11,"default","","",3,[[],["lastoperation",3]]],[11,"default","","",4,[[],["additiveoperation",3]]],[11,"default","","",5,[[],["multiplicativeoperation",3]]],[11,"default","","",6,[[],["linearoperation",3]]],[11,"default","","",7,[[],["bitandoperation",3]]],[11,"default","","",8,[[],["bitoroperation",3]]],[11,"default","competitive::algorithm","",27,[[],["chtline",3]]],[11,"default","competitive::data_structure","",42,[[],["bitset",3]]],[11,"default","competitive::graph","",61,[[],["adjacent",3]]],[11,"default","","",62,[[],["graph",3]]],[11,"default","","",64,[[],["revgraph",3]]],[11,"default","competitive::math","",78,[[],["polynomial",3]]],[11,"default","competitive::num","",85,[[],["complex",3]]],[11,"default","","",87,[[]]],[11,"default","","",86,[[],["quaddouble",3]]],[11,"default","competitive::tools","",96,[[]]],[11,"default","","",97,[[]]],[11,"default","competitive::tree","",101,[[],["eulertourforedge",3]]],[11,"default","","",102,[[],["eulertourforvertex",3]]],[11,"default","","",107,[[],["eulertourforrichvertex",3]]],[11,"cmp","competitive::algebra","",0,[[["maxoperation",3]],["ordering",4]]],[11,"cmp","","",1,[[["minoperation",3]],["ordering",4]]],[11,"cmp","","",2,[[["firstoperation",3]],["ordering",4]]],[11,"cmp","","",3,[[["lastoperation",3]],["ordering",4]]],[11,"cmp","","",4,[[["additiveoperation",3]],["ordering",4]]],[11,"cmp","","",5,[[["multiplicativeoperation",3]],["ordering",4]]],[11,"cmp","","",6,[[["linearoperation",3]],["ordering",4]]],[11,"cmp","","",7,[[["bitandoperation",3]],["ordering",4]]],[11,"cmp","","",8,[[["bitoroperation",3]],["ordering",4]]],[11,"cmp","competitive::data_structure","",42,[[["bitset",3]],["ordering",4]]],[11,"cmp","competitive::geometry","",57,[[["ccw",4]],["ordering",4]]],[11,"cmp","competitive::graph","",61,[[["adjacent",3]],["ordering",4]]],[11,"cmp","","",70,[[["gridgraph",3]],["ordering",4]]],[11,"cmp","competitive::num","",87,[[],["ordering",4]]],[11,"cmp","competitive::tools","",95,[[["totalord",3]],["ordering",4]]],[11,"eq","competitive::algebra","",0,[[["maxoperation",3]]]],[11,"ne","","",0,[[["maxoperation",3]]]],[11,"eq","","",1,[[["minoperation",3]]]],[11,"ne","","",1,[[["minoperation",3]]]],[11,"eq","","",2,[[["firstoperation",3]]]],[11,"ne","","",2,[[["firstoperation",3]]]],[11,"eq","","",3,[[["lastoperation",3]]]],[11,"ne","","",3,[[["lastoperation",3]]]],[11,"eq","","",4,[[["additiveoperation",3]]]],[11,"ne","","",4,[[["additiveoperation",3]]]],[11,"eq","","",5,[[["multiplicativeoperation",3]]]],[11,"ne","","",5,[[["multiplicativeoperation",3]]]],[11,"eq","","",6,[[["linearoperation",3]]]],[11,"ne","","",6,[[["linearoperation",3]]]],[11,"eq","","",7,[[["bitandoperation",3]]]],[11,"ne","","",7,[[["bitandoperation",3]]]],[11,"eq","","",8,[[["bitoroperation",3]]]],[11,"ne","","",8,[[["bitoroperation",3]]]],[11,"eq","competitive::algorithm","",27,[[["chtline",3]]]],[11,"ne","","",27,[[["chtline",3]]]],[11,"eq","competitive::data_structure","",42,[[["bitset",3]]]],[11,"ne","","",42,[[["bitset",3]]]],[11,"eq","competitive::geometry","",58,[[["circle",3]]]],[11,"ne","","",58,[[["circle",3]]]],[11,"eq","","",59,[[["line",3]]]],[11,"ne","","",59,[[["line",3]]]],[11,"eq","","",60,[[["linesegment",3]]]],[11,"ne","","",60,[[["linesegment",3]]]],[11,"eq","","",56,[[["real",3]]]],[11,"eq","","",57,[[["ccw",4]]]],[11,"eq","competitive::graph","",61,[[["adjacent",3]]]],[11,"ne","","",61,[[["adjacent",3]]]],[11,"eq","","",70,[[["gridgraph",3]]]],[11,"ne","","",70,[[["gridgraph",3]]]],[11,"eq","competitive::math","",77,[[["matrix",3]]]],[11,"ne","","",77,[[["matrix",3]]]],[11,"eq","","",78,[[["polynomial",3]]]],[11,"ne","","",78,[[["polynomial",3]]]],[11,"eq","competitive::num","",85,[[["complex",3]]]],[11,"ne","","",85,[[["complex",3]]]],[11,"eq","","",87,[[]]],[11,"eq","","",86,[[["quaddouble",3]]]],[11,"ne","","",86,[[["quaddouble",3]]]],[11,"eq","competitive::tools","",95,[[["totalord",3]]]],[11,"ne","","",95,[[["totalord",3]]]],[11,"partial_cmp","competitive::algebra","",0,[[["maxoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["maxoperation",3]]]],[11,"le","","",0,[[["maxoperation",3]]]],[11,"gt","","",0,[[["maxoperation",3]]]],[11,"ge","","",0,[[["maxoperation",3]]]],[11,"partial_cmp","","",1,[[["minoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["minoperation",3]]]],[11,"le","","",1,[[["minoperation",3]]]],[11,"gt","","",1,[[["minoperation",3]]]],[11,"ge","","",1,[[["minoperation",3]]]],[11,"partial_cmp","","",2,[[["firstoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["firstoperation",3]]]],[11,"le","","",2,[[["firstoperation",3]]]],[11,"gt","","",2,[[["firstoperation",3]]]],[11,"ge","","",2,[[["firstoperation",3]]]],[11,"partial_cmp","","",3,[[["lastoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["lastoperation",3]]]],[11,"le","","",3,[[["lastoperation",3]]]],[11,"gt","","",3,[[["lastoperation",3]]]],[11,"ge","","",3,[[["lastoperation",3]]]],[11,"partial_cmp","","",4,[[["additiveoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["additiveoperation",3]]]],[11,"le","","",4,[[["additiveoperation",3]]]],[11,"gt","","",4,[[["additiveoperation",3]]]],[11,"ge","","",4,[[["additiveoperation",3]]]],[11,"partial_cmp","","",5,[[["multiplicativeoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["multiplicativeoperation",3]]]],[11,"le","","",5,[[["multiplicativeoperation",3]]]],[11,"gt","","",5,[[["multiplicativeoperation",3]]]],[11,"ge","","",5,[[["multiplicativeoperation",3]]]],[11,"partial_cmp","","",6,[[["linearoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["linearoperation",3]]]],[11,"le","","",6,[[["linearoperation",3]]]],[11,"gt","","",6,[[["linearoperation",3]]]],[11,"ge","","",6,[[["linearoperation",3]]]],[11,"partial_cmp","","",7,[[["bitandoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["bitandoperation",3]]]],[11,"le","","",7,[[["bitandoperation",3]]]],[11,"gt","","",7,[[["bitandoperation",3]]]],[11,"ge","","",7,[[["bitandoperation",3]]]],[11,"partial_cmp","","",8,[[["bitoroperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["bitoroperation",3]]]],[11,"le","","",8,[[["bitoroperation",3]]]],[11,"gt","","",8,[[["bitoroperation",3]]]],[11,"ge","","",8,[[["bitoroperation",3]]]],[11,"partial_cmp","competitive::data_structure","",42,[[["bitset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",42,[[["bitset",3]]]],[11,"le","","",42,[[["bitset",3]]]],[11,"gt","","",42,[[["bitset",3]]]],[11,"ge","","",42,[[["bitset",3]]]],[11,"partial_cmp","competitive::geometry","",56,[[["real",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",57,[[["ccw",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::graph","",61,[[["adjacent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",61,[[["adjacent",3]]]],[11,"le","","",61,[[["adjacent",3]]]],[11,"gt","","",61,[[["adjacent",3]]]],[11,"ge","","",61,[[["adjacent",3]]]],[11,"partial_cmp","","",70,[[["gridgraph",3]],[["option",4],["ordering",4]]]],[11,"lt","","",70,[[["gridgraph",3]]]],[11,"le","","",70,[[["gridgraph",3]]]],[11,"gt","","",70,[[["gridgraph",3]]]],[11,"ge","","",70,[[["gridgraph",3]]]],[11,"partial_cmp","competitive::num","",87,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",86,[[["quaddouble",3]],[["option",4],["ordering",4]]]],[11,"lt","","",86,[[["quaddouble",3]]]],[11,"le","","",86,[[["quaddouble",3]]]],[11,"gt","","",86,[[["quaddouble",3]]]],[11,"ge","","",86,[[["quaddouble",3]]]],[11,"partial_cmp","competitive::tools","",95,[[["totalord",3]],[["option",4],["ordering",4]]]],[11,"lt","","",95,[[["totalord",3]]]],[11,"le","","",95,[[["totalord",3]]]],[11,"gt","","",95,[[["totalord",3]]]],[11,"ge","","",95,[[["totalord",3]]]],[11,"fmt","competitive::algebra","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::algorithm","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree","",101,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",108,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",87,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",86,[[["formatter",3]],[["result",4],["error",3]]]],[11,"div","","",85,[[]]],[11,"div","","",85,[[]]],[11,"div","","",87,[[]]],[11,"div","","",87,[[["mint",3]]]],[11,"div","","",86,[[]]],[11,"sub","","",85,[[]]],[11,"sub","","",85,[[]]],[11,"sub","","",87,[[]]],[11,"sub","","",87,[[["mint",3]]]],[11,"sub","","",86,[[]]],[11,"add","","",85,[[]]],[11,"add","","",85,[[]]],[11,"add","","",87,[[]]],[11,"add","","",87,[[["mint",3]]]],[11,"add","","",86,[[]]],[11,"add","","",86,[[]]],[11,"mul","","",85,[[]]],[11,"mul","","",85,[[]]],[11,"mul","","",87,[[]]],[11,"mul","","",87,[[["mint",3]]]],[11,"mul","","",86,[[]]],[11,"mul","","",86,[[]]],[11,"neg","","",85,[[]]],[11,"neg","","",87,[[]]],[11,"neg","","",86,[[]]],[11,"add_assign","","",87,[[["mint",3]]]],[11,"add_assign","","",87,[[["mint",3]]]],[11,"sub_assign","","",87,[[["mint",3]]]],[11,"sub_assign","","",87,[[["mint",3]]]],[11,"mul_assign","","",87,[[["mint",3]]]],[11,"mul_assign","","",87,[[["mint",3]]]],[11,"div_assign","","",87,[[["mint",3]]]],[11,"div_assign","","",87,[[["mint",3]]]],[11,"not","competitive::data_structure","",42,[[]]],[11,"bitand","","",42,[[]]],[11,"bitor","","",42,[[]]],[11,"bitxor","","",42,[[]]],[11,"shl","","",42,[[]]],[11,"shr","","",42,[[]]],[11,"bitand_assign","","",42,[[]]],[11,"bitor_assign","","",42,[[]]],[11,"bitxor_assign","","",42,[[]]],[11,"shl_assign","","",42,[[]]],[11,"shr_assign","","",42,[[]]],[11,"index","competitive::algorithm","",26,[[]]],[11,"index","competitive::data_structure","",43,[[]]],[11,"index","competitive::graph","",116,[[]]],[11,"index","","",74,[[]]],[11,"index","competitive::math","",77,[[]]],[11,"index","","",78,[[]]],[11,"index","competitive::num","",86,[[]]],[11,"index","competitive::string","",92,[[]]],[11,"index","","",93,[[]]],[11,"index_mut","competitive::math","",77,[[]]],[11,"index_mut","","",78,[[]]],[11,"hash","competitive::algebra","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","competitive::data_structure","",42,[[]]],[11,"hash","competitive::graph","",61,[[]]],[11,"hash","","",70,[[]]],[11,"hash","competitive::num","",85,[[]]],[11,"hash","","",87,[[]]],[11,"from_iter","competitive::algorithm","",26,[[["intoiterator",8]]]],[11,"from_iter","competitive::data_structure","",115,[[["intoiterator",8]]]],[11,"from_iter","competitive::tools","",96,[[["intoiterator",8]]]],[11,"product","competitive::num","",87,[[["iterator",8]]]],[11,"product","","",87,[[["iterator",8]]]],[11,"sum","","",87,[[["iterator",8]]]],[11,"sum","","",87,[[["iterator",8]]]],[11,"from_str","","",87,[[],["result",4]]],[11,"from_str","","",86,[[],["result",4]]],[11,"reverse_operate","competitive::algebra","",15,[[]]],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",17,[[]]],[11,"mo_solve","competitive::algorithm","",34,[[]]],[11,"rank1","competitive::data_structure","the number of 1 in [0, k)",55,[[]]],[11,"rank0","","the number of 0 in [0, k)",55,[[]]],[11,"select1","","index of k-th 1",55,[[],["option",4]]],[11,"select0","","index of k-th 0",55,[[],["option",4]]],[11,"modulo","competitive::num","",88,[[]]]],"p":[[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"MonoidalOperation"],[3,"GroupOperation"],[3,"AbsorbedAssocoativeOperator"],[3,"CartesianOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[8,"Magma"],[8,"Unital"],[8,"Monoid"],[8,"Invertible"],[8,"RightInvertibleMagma"],[8,"MinimumBounded"],[8,"MaximumBounded"],[8,"AdditiveIdentity"],[8,"MultiplicativeIdentity"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"Compress"],[3,"CHTLine"],[3,"ConvexHullTrick"],[3,"SlideMinimum"],[3,"SubsetTransform"],[3,"SupersetTransform"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"MoSolver"],[8,"Bisect"],[8,"Trisect"],[3,"LessThanAutomaton"],[3,"GreaterThanAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"Static2DTree"],[3,"LazySegmentTree"],[3,"SegmentTree"],[3,"QueueAggregation"],[3,"DequeAggregation"],[3,"Trie"],[3,"MergingUnionFind"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"WaveletMatrix"],[8,"Automaton"],[8,"RankSelectDictionaries"],[3,"Real"],[4,"CCW"],[3,"Circle"],[3,"Line"],[3,"LineSegment"],[3,"Adjacent"],[3,"Graph"],[3,"GraphRec"],[3,"RevGraph"],[3,"LowLink"],[3,"RevEdge"],[3,"Dinic"],[3,"RevCEdge"],[3,"GraphScanner"],[3,"GridGraph"],[3,"RevGraphScanner"],[3,"FordFulkerson"],[3,"PrimalDual"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[3,"MemorizedFactorial"],[3,"Matrix"],[3,"Polynomial"],[3,"SmallModMemorizedFactorial"],[3,"NumberTheoreticTransform"],[3,"BabyStepGiantStep"],[3,"PrimeTable"],[3,"EulerPhiTable"],[8,"NTTModulus"],[3,"Complex"],[3,"QuadDouble"],[3,"MInt"],[8,"Modulus"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"SimuratedAnnealing"],[3,"TotalOrd"],[3,"Counter"],[3,"Xorshift"],[3,"Scanner"],[8,"IterScan"],[8,"MarkedIterScan"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"HeavyLightDecomposition"],[3,"ReRooting"],[3,"TreeRec"],[3,"LCAMonoid"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"AssocoativeOperator"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"ContainAutomaton"],[3,"ContainCounterAutomaton"],[3,"BitVector"],[3,"GraphEidCache"],[3,"Adjacent4"],[3,"Adjacent8"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"Modulo998244353"],[3,"DynModulo"],[3,"Usize1"],[3,"Isize1"]],"a":{"verify":[654,658,662,666,669,674,679,684,689,694,700,704,706,708,712,715,717,719,724,728,732,735,739,747,755,759,762,765,770,780,787,798,810,815,819,824,827,834,835,841,847,855,858,863,864,867,875,885,896,905,909,919,920,924,930,934,937,940,948,951,953,957,960]}}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);