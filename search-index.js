var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,5,2,5,2,5,5,2,2,5,2,5,2,5,2,5,5,2,5,2,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,2,5,2,2,5,2,2,5,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,5,5,2,2,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,5,5,2,2,2,2,5,2,2,2,2,2,5,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,5,2,5,5,2,2,5,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,2,2,5,2,2,5,2,2,5,2,2,5,0,5],"n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","dpl_1_e","levenshtein_distance","KnapsackPloblemSmallValue","dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","dpl_3_a","largest_square","dpl_3_b","largest_rectangle_in_grid","dpl_3_c","largest_rectangle","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","MinOperation","SegmentTree","dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","Static2DTree","dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","dsl_3_b","dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","EdgeListGraphScanner","grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","DirectedGraphScanner","grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","itp1_1_a","itp1_1_a"],"q":["aizu_online_judge","","","","aizu_online_judge::dpl","","","","","","","","","","","","aizu_online_judge::dpl::dpl_1_a","aizu_online_judge::dpl::dpl_1_b","","aizu_online_judge::dpl::dpl_1_c","","aizu_online_judge::dpl::dpl_1_d","","aizu_online_judge::dpl::dpl_1_e","","aizu_online_judge::dpl::dpl_1_f","","aizu_online_judge::dpl::dpl_1_g","","aizu_online_judge::dpl::dpl_1_h","","aizu_online_judge::dpl::dpl_1_i","","aizu_online_judge::dpl::dpl_3_a","","aizu_online_judge::dpl::dpl_3_b","","aizu_online_judge::dpl::dpl_3_c","","aizu_online_judge::dsl","","","","","","","","","","","","","","","","","","aizu_online_judge::dsl::dsl_1_a","","aizu_online_judge::dsl::dsl_1_b","","","aizu_online_judge::dsl::dsl_2_a","","","aizu_online_judge::dsl::dsl_2_b","","","aizu_online_judge::dsl::dsl_2_c","","aizu_online_judge::dsl::dsl_2_d","","","aizu_online_judge::dsl::dsl_2_e","","","aizu_online_judge::dsl::dsl_2_f","","","aizu_online_judge::dsl::dsl_2_g","","","aizu_online_judge::dsl::dsl_2_h","","","aizu_online_judge::dsl::dsl_2_i","","","aizu_online_judge::dsl::dsl_3_a","","","aizu_online_judge::dsl::dsl_3_b","aizu_online_judge::dsl::dsl_3_c","aizu_online_judge::dsl::dsl_3_d","","","aizu_online_judge::dsl::dsl_4_a","aizu_online_judge::dsl::dsl_5_a","aizu_online_judge::dsl::dsl_5_b","aizu_online_judge::grl","","","","","","","","","","","","","","","","","","aizu_online_judge::grl::grl_1_a","","","","","","","","aizu_online_judge::grl::grl_1_b","","","","","aizu_online_judge::grl::grl_1_c","","","","","","aizu_online_judge::grl::grl_2_a","","aizu_online_judge::grl::grl_2_b","","","","aizu_online_judge::grl::grl_3_a","","","aizu_online_judge::grl::grl_3_b","","","aizu_online_judge::grl::grl_3_c","","","aizu_online_judge::grl::grl_4_a","","aizu_online_judge::grl::grl_4_b","","","aizu_online_judge::grl::grl_5_a","","","aizu_online_judge::grl::grl_5_b","","","","aizu_online_judge::grl::grl_5_c","","","","","aizu_online_judge::grl::grl_5_d","","","","","","aizu_online_judge::grl::grl_5_e","","","","","","","aizu_online_judge::grl::grl_6_a","","","aizu_online_judge::grl::grl_6_b","","","aizu_online_judge::grl::grl_7_a","","","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a"],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  2ms","","✅  AC  0ms","","✅  AC  3ms","","✅  AC  8ms","✅  AC  5ms","","","✅  AC  1ms","","✅  AC  7ms","","✅  AC  55ms","","✅  AC  0ms","✅  AC  23ms","","✅  AC  18ms","","✅  AC  3ms","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  6ms","","","✅  AC  22ms","","","✅  AC  17ms","","","✅  AC  16ms","","✅  AC  419ms","","","✅  AC  65ms","","","✅  AC  44ms","","","✅  AC  73ms","","","✅  AC  60ms","","","✅  AC  58ms","","","✅  AC  59ms","","","✅  AC  3ms","✅  AC  3ms","✅  AC  218ms","","","✅  AC  96ms","✅  AC  62ms","✅  AC  4ms","✅  AC  9ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  83ms","✅  AC  72ms","","","","","✅  AC  9ms","","","","","","✅  AC  7ms","","✅  AC  18ms","","","","✅  AC  0ms","","","✅  AC  4ms","","","✅  AC  2ms","","","✅  AC  6ms","","✅  AC  0ms","","✅  AC  2ms","","","","✅  AC  9ms","","","","✅  AC  2ms","","","","","✅  AC  103ms","","","","","","✅  AC  48ms","","","","","","","✅  AC  243ms","","","✅  AC  0ms","","","✅  AC  0ms","","","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,[[1,2]],0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,1,1],3],0,0,[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"],[15,"bool"]],"a":{"verify":[16,18,20,22,23,26,28,30,32,33,35,37,58,61,64,67,69,72,75,78,81,84,87,90,91,92,95,96,97,98,123,124,129,135,137,141,144,147,150,152,154,158,162,167,173,180,183,186,189,191]}},\
"competitive":{"doc":"github","t":[14,0,0,14,14,14,14,14,14,0,14,14,0,14,14,14,14,0,0,14,14,14,14,14,0,14,14,14,14,14,14,14,0,0,14,14,14,14,14,14,14,14,0,14,0,0,8,8,16,16,3,16,3,16,16,8,8,3,8,3,8,3,3,8,3,8,3,3,8,8,8,8,16,3,3,8,3,3,8,8,16,3,4,3,3,3,3,3,3,3,3,3,8,8,8,16,16,3,8,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,16,16,3,8,3,3,3,3,3,16,16,8,3,8,3,3,16,3,8,3,8,3,16,3,3,3,16,8,3,11,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,12,11,10,5,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,5,5,10,5,11,11,10,10,10,5,10,10,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,8,16,3,3,8,3,3,3,3,3,3,3,6,6,6,6,8,3,3,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,16,3,8,3,3,3,3,3,3,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,14,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,8,4,3,13,13,3,3,13,13,13,6,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,16,16,16,16,16,8,8,8,3,8,8,8,3,3,8,3,3,4,6,6,3,3,3,3,4,6,6,16,16,8,16,3,3,8,8,8,8,16,8,3,3,3,3,3,3,3,8,8,3,3,8,3,3,3,16,3,3,4,6,6,3,3,16,16,3,3,3,16,8,8,8,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,12,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,12,11,11,10,11,11,11,12,10,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,12,11,3,6,4,8,3,16,3,8,8,6,6,6,18,18,3,3,3,3,3,3,3,3,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,5,5,5,11,12,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,11,11,5,11,5,5,10,11,11,11,11,11,5,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,8,8,3,18,8,3,18,18,16,3,18,18,18,18,18,18,18,18,18,8,3,3,18,16,8,18,18,18,18,18,18,18,18,18,18,18,18,3,8,8,18,18,8,18,3,18,8,18,3,8,16,18,8,16,3,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,10,11,11,10,11,11,11,11,11,0,10,10,10,10,10,10,10,11,11,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,6,6,4,4,6,6,6,6,4,4,3,4,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,4,4,4,4,8,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,3,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,10,5,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,18,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,8,8,3,4,3,8,3,4,3,3,8,8,8,18,8,3,16,16,16,3,8,3,3,8,18,3,3,3,3,3,16,3,4,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,12,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,12,11,11,11,11,11,5,5,5,5,5,10,11,11,14,14,11,11,11,11,11,11,11,12,12,11,12,12,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,3,3,3,3,3,4,8,3,3,13,3,3,3,3,4,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,12,12,12],"n":["add_assign","algebra","algorithm","automaton","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","iter_print","math","max","memorize","min","minmax","mlambda","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","tools","tree","AbelianGroup","AbelianMonoid","Act","ActMonoid","AddMulOperation","Additive","AdditiveOperation","Agg","AggMonoid","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","Field","FindMajorityOperation","FirstOperation","Group","Idempotent","IdempotentMonoid","Invertible","Key","LastOperation","LinearOperation","Magma","MaxOperation","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","Top2Operation","Unital","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_operate","act_operate","act_operate_assign","act_operate_assign","act_unit","act_unit","add","add","add","agg_operate","agg_operate","agg_operate_assign","agg_operate_assign","agg_unit","agg_unit","all_one","all_zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone_into","clone_into","define_monoid","div","div","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","mul","mul","neg","neg","one","one","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","single","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","sub","sub","sum","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","zero","zero","0","Answer","B","BabyStepGiantStep","Bisect","BitDp","Combinations","ConvexHullTrick","DivisorTransform","IndependentSubSet","LIter","M","MoSolver","MultipleTransform","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","SubsetTransform","Subsets","SupersetTransform","T","Trisect","XorBasis","add_line","answer","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","combinations","combinations_with_replacement","convolve","convolve","convolve","convolve","default","default","default","elements","eq","eval","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_bucket","fold_cell","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","halve","ind","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_element","is_subset","k_colorable","middle","mo_solve","mo_solve","mobius_transform","mobius_transform","mobius_transform","mobius_transform","n","new","new","new","new","new","new","new_with_primes","new_with_primes","next","next","next_left","next_left","next_minimum","next_right","next_right","next_section","not_elements","parallel_binary_search","permutations","position_bisect","product","query","reduce","remove","rfind_bisect","rposition_bisect","run_length_encoding","section_end","section_end","slide_minimum","solve","sqrt_decomposition","sqrt_decomposition","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_bucket","update_cell","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","1","1","1","Accumulate","Allocator","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","CompressedSegmentTree","CompressedSegmentTree1d","CompressedSegmentTree2d","CompressedSegmentTree3d","CompressedSegmentTree4d","Compressor","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCompress","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MemoryPool","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTreeMap","SlopeTrick","SplayMap","SplaySequence","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","VecCompress","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","allocate","allocate","append","as_slice","automaton","back","bit_length","bit_length","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_failure","build_inplace","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count_ones","count_zeros","dd","deallocate","deallocate","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","drop","drop","drop","edges","eq","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get","get","get_difference","get_key_value","get_key_value_at","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","index_exact","index_exact","index_exact","index_lower_bound","index_lower_bound","index_lower_bound","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert","insert","insert","insert_at","insert_once_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","iter","iter","iter","iter_mut","keys","keys","keys","last","len","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","modify","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next_node","node_size","not","not","ones","partial_cmp","pop","pop_back","pop_front","pop_left_if","pop_left_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","quantile_outer","query_min","range","range","range","range_at","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove","remove","remove_at","remove_count","remove_count","reverse","reverse","roots","roots","roots","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update","update","update","update","update_isize","valley","values","values","values","values_mut","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","0","Approx","ApproxOrd","Ccw","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","Point","approx_cmp","approx_eq","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","ccw_open","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","default","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","add_assign","add_assign","add_assign","add_assign","add_clause","add_cost1","add_cost2","add_cost2_01","add_cost2_10","add_edge","add_edge","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adj4","adj8","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies_with_eindex","adjacencies_with_eindex","adjacencies_with_value","adjacencies_with_value","adjacencies_with_value","adjacency","articulation","avalue","avalue","avalue","aviews","aviews","aviews","aviews","aviews","aviews","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","build","builder","builder","builder","builder_with_esize","change_edge","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","components","construct_emap","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","construct_vmap","construct_vmap","construct_vmap","construct_vmap","default","default","default","dfs_order","dfs_tree","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","dulmage_mendelsohn_decomposition","edges","edges","edges","edges_size","edges_size","eindex","eindex","eindex","eindex","elist","emap_get","emap_get","emap_get_mut","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","eq","eq","eq","eq","esize","esize","esize","eview","eview","eview","extend","extend","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","hash","hash","hash","height","hopcroft_karp","id","index","index","inf","inf","inf","inf","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","kuhn_multi_start_bfs","low","map","map","maximum_flow","maximum_flow_limited","maximum_independent_set","maximum_matching","minimum_cost_flow","minimum_cost_flow_limited","minimum_cut","minimum_edge_cover","minimum_spanning_arborescence","minimum_spanning_tree","minimum_vertex_cover","move_by_diff","mscan","mscan","mscan","mscan","mul","mul","mul","mul","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_adj4","new_adj8","new_with_esize","next","next","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","solve","source","source","source","source","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices_size","vertices_size","vindex","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_set","vmap_set","vsize","vsize","vsize","vview","vview","vview","vview","vview","vview","vview","warshall_floyd_ap","warshall_floyd_ap","weighted_tree_depth","weighted_tree_depth","width","with_n_values","Convolve","Convolve998244353","ConvolveRealFft","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","MIntConvolve","MOD","MOD","Matrix","MemorizedFactorial","Mersenne127","Mersenne61","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","assign","berlekamp_massey","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","check_primitive_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convolve","convolve","count_divisors","count_divisors","count_multiset_sum","count_subset_sum","data","data","data","default","default","default","default","determinant","diff","discrete_logarithm","discrete_logarithm_prime_mod","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","divisors","divisors","divisors","eq","eq","eq","euler_phi","eval","even","exp","extgcd","extgcd_binary","extgcd_recurse","eye","fact","factorial","floor_sum","floor_sum_i64","floor_sum_range_freq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_loop","get","get_mod","get_mod","highly_composite_number","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","inv","inv","inv","inv_fact","inverse","inverse_transform","inverse_transform","inverse_transform","inverse_transform","is_prime","is_prime","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","length","length","length","length","linear_congruence","log","miller_rabin","miller_rabin_with_br","mod_add","mod_add","mod_div","mod_div","mod_inv","mod_inv","mod_mul","mod_mul","mod_neg","mod_neg","mod_one","mod_one","mod_sub","mod_sub","mod_zero","mod_zero","modinv","modinv_extgcd_binary","modinv_recurse","moebius","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply","multiply","multipoint_evaluation","neg","neg","new","new","new","new","new","new","new","odd","one","one","permutation","pow","pow","pow","pow","powi","prefix","prefix_ref","prime_factors","prime_factors","prime_factors","prime_factors_flatten","primes","primes_lte","primitive_root","product_all","rank","rem","rem","rem","rem","rem","rem_assign","rem_assign","reserve","resize","resized","reversed","row_reduction","shape","shl","shl","shl_assign","shr","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","taylor_shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","transform","trial_division","trial_division","trim_tail_zeros","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zeros","zeros","0","0","0","0","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp_by_arg","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","default","delta","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_rem","div_rem","div_rem","dot","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","get_mod","get_mod","get_mod","hash","hash","hash","hash","hypot","hypot","hypot","i","im","index","inner","into","into","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","is_zero","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","minimum","minimum","minimum","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new_unchecked","norm","not","not","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","primitive_nth_root_of_unity","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","scan","scan","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_mod","set_mod","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","local_key","local_key","local_key","local_key","n1","n1","n1","n1","n1","n2","n2","n2","n2","n2","n3","n3","n3","n3","n3","r","r","r","r","r","r","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Chars","Read","Scanner","Usize1","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","bytes","chain","clone","clone","clone","clone_into","clone_into","clone_into","flush","fmt","fmt","fmt","from","from","from","into","into","into","is_read_vectored","is_write_vectored","iter","iter_print","mscan","new","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","scan","scan","scan","scan_vec","take","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_all","write_all_vectored","write_fmt","write_vectored","KnuthMorrisPratt","MOD","MultipleRollingHash","RollingHash","SuffixArray","Zarray","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","find","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash_once","index","index","into","into","into","into","into","longest_common_prefix_array","mersenne_mod","mersenne_mul","mersenne_mul_mod","new","new","new","new","new","new_rand","search","search_all","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","1","AsTotalOrd","AssociatedValue","ByteWithBase","Bytes","BytesWithBase","CharTools","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","LOG_TABLE_SIZE","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandRange","RandomSpec","SEED","Scanner","ScannerIter","SimuratedAnnealing","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","end_temp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_accepted","is_end","is_maximize","iter_count","iter_print","local_key","log_table","minimize","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","new","new","new","new","new","next","next","now","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rand","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","scan","scan","scan","scan","scan_value","set","set","set_end_temp","set_start_temp","set_time_limit","set_update_interval","shuffle","start_temp","temperture","time","time","time_limit","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_upper_alphabetic_number","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_interval","with","with","0","0","0","0","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","TreeRec","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dfs","dp","eidx","ep","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","n","new","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","time_seeded","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vidx","vsize","vsize","with_seed","0","0","1"],"q":["competitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebracompetitive::algorithmcompetitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structurecompetitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graphcompetitive::mathcompetitive::num","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num::mint_basiccompetitive::num::montgomery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::toolscompetitive::treecompetitive::tree::TreeCenter","",""],"d":["","algebra","algorithm","build automaton","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","Implement <code>AssociatedValue</code>.","","","","Print expressions with a separator.","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","string algorithems","","","tree algorithems","commutative group","commutative monoid","","","$+,\\\\times$","","$+$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","Find majority(strict) of a sequence.","retain the first element","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","$a$ where $a \\\\circ x = e$","","","","","","","","","","multiplicative operaion: $+$","multiplicative operaion: $+$","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","additive identity: $0$","additive identity: $0$","","","","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","binary search helper","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","ternary search helper","Basis of xor operation.","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","","","choose distinct <code>r</code> elements from <code>n</code> in sorted order","","choose <code>r</code> elements from <code>n</code> in sorted order","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","get i-th value of rho path","return between two elements","","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","middle point of section","","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","","Create a empty space.","","","","","","","","","","Divide into 3 sections","","","choose distinct <code>r</code> elements from <code>n</code> in any order","Returns the first index that satisfies a predicate. if not …","choose <code>r</code> elements from <code>n</code> independently","","Return (reduced basis, coordinate). Coordinate means if …","","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","the end condition of binary search","the end condition of ternary search","","","","","","like <code>(left..=right).min_by_key(f)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return accumlate of [0, k)","fold [0, k]","fold [0, i] x [0, j]","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of [l, r)","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Create empty","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","get k-th smallest value in range","get k-th smallest value out of range","","","","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-badd a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(p_x = f) | (p_y = g)","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","","","","","","","","Return a slice of adjacency verticeseturn the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","","Return an iterator over graph vertices.","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e","Sum of Floor of Linear mod 2^64","Sum of Floor of Linear mod 2^64","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","binary gcd","","","","","[(hcn, #divisor)]","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","","return: (y,z)","","","","","","","","","","","","","","","","","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationseturns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","m","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","n^1 mod m","","","","","n^2 mod m","","","","","n^3 mod m","","","","","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","","","","","","","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","","","","","","","Flush this output stream, ensuring that all intermediately …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","","","","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","","","","","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","S [l, r)","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","Left-close Right-open No Empty Segment","Trait for spec of generating random value.","","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","","","","","","","","","","","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","","","","","","","","","","","","","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,240,0,241,0,240,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,0,0,0,0,0,241,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,241,0,0,240,243,244,245,246,247,248,4,240,243,244,245,246,247,248,4,240,240,240,240,240,240,241,241,2,240,240,240,240,240,240,249,250,251,243,244,245,246,247,248,2,4,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,251,243,244,245,246,247,248,2,4,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,2,2,2,4,2,4,0,268,268,2,4,251,243,244,245,246,247,248,2,4,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,251,243,244,245,246,247,248,2,4,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,268,269,256,257,258,261,263,266,270,270,0,241,241,271,271,241,241,242,2,4,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,242,242,93,93,242,242,269,269,256,257,270,270,4,240,243,244,245,246,247,248,4,271,271,4,2,4,240,240,251,243,244,245,246,247,248,2,4,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,251,243,244,245,246,247,248,2,4,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,251,243,244,245,246,247,248,2,4,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,270,2,4,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,272,241,241,20,273,274,0,0,0,0,0,0,0,275,274,0,0,0,0,0,275,0,0,0,0,0,275,0,0,0,274,0,0,12,273,14,0,31,29,276,277,24,25,28,20,21,22,19,12,23,17,32,14,31,29,276,277,24,25,28,20,21,22,19,12,23,17,32,14,274,17,17,19,20,21,22,19,12,23,14,20,21,22,19,12,23,14,0,20,0,276,277,24,25,20,12,14,20,20,23,17,14,278,0,28,20,21,22,19,12,23,17,14,29,274,274,31,29,276,277,24,25,28,20,21,22,19,12,23,17,32,14,19,14,17,17,279,19,273,14,31,29,276,277,24,25,28,20,21,22,19,12,23,17,32,14,21,22,20,20,19,280,273,273,276,277,24,25,19,31,28,12,23,32,14,24,25,21,22,275,31,32,275,31,280,20,0,0,278,0,12,14,273,278,278,0,279,280,0,28,274,274,20,0,20,21,22,19,12,23,14,31,29,276,277,24,25,28,20,21,22,19,12,23,17,32,14,31,29,276,277,24,25,28,20,21,22,19,12,23,17,32,14,31,29,276,277,24,25,28,20,21,22,19,12,23,17,32,14,29,274,274,276,277,24,25,0,0,0,0,0,0,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,35,38,33,34,38,33,34,35,38,33,34,33,34,33,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,38,33,34,33,34,33,33,34,35,36,37,38,37,0,0,0,0,38,33,33,34,35,36,37,38,33,34,35,36,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,40,41,42,40,41,42,0,0,281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,281,0,0,0,0,0,0,0,0,281,40,41,42,43,44,45,46,47,48,49,95,50,51,52,53,54,53,54,55,56,57,57,55,56,57,57,58,60,61,282,63,55,64,0,65,95,50,66,66,66,66,66,66,66,66,66,52,53,54,71,72,94,73,74,58,64,75,76,65,82,83,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,78,79,55,56,80,68,69,70,57,67,61,51,52,53,54,71,72,94,73,74,58,64,75,76,65,82,83,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,78,79,55,56,80,68,69,70,57,67,61,51,67,68,55,56,69,70,57,57,53,54,71,72,73,74,64,75,76,65,60,77,40,41,42,43,44,45,46,47,48,49,50,66,78,79,55,56,80,68,69,70,57,67,61,51,53,54,71,72,73,74,64,75,76,65,60,77,40,41,42,43,44,45,46,47,48,49,50,66,78,79,55,56,80,68,69,70,57,67,61,51,66,70,69,66,66,68,282,63,71,76,65,82,83,63,48,49,66,55,56,80,69,70,57,281,281,77,55,69,70,82,83,63,67,66,55,55,56,56,69,70,58,60,67,61,67,58,58,52,53,54,71,72,73,74,64,75,76,65,82,83,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,78,79,55,56,80,68,69,70,57,67,61,51,52,53,54,71,71,71,71,72,73,74,64,75,82,77,73,74,64,75,76,65,72,52,53,54,71,72,94,73,74,58,64,75,76,65,82,83,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,78,79,55,56,80,68,69,70,57,67,61,51,52,50,78,79,55,55,56,56,69,70,53,73,64,65,53,54,73,74,64,75,82,83,66,55,56,69,60,83,83,69,70,70,69,69,70,60,46,47,46,47,66,72,72,283,78,79,283,78,79,281,40,41,42,43,44,45,46,47,48,49,82,83,80,69,70,67,67,67,69,70,52,53,54,71,72,94,73,74,58,64,75,76,65,82,83,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,78,79,55,56,80,68,69,70,57,67,61,51,76,65,83,55,56,60,83,55,56,69,70,69,55,56,69,76,76,65,83,55,56,46,47,46,47,53,77,58,60,61,57,57,82,53,54,71,71,71,71,72,94,73,74,58,64,75,76,65,82,83,60,63,77,43,44,45,48,49,66,55,56,80,68,69,70,57,67,61,51,281,40,41,42,43,44,45,46,47,48,49,67,67,66,66,66,66,76,65,65,69,70,69,70,73,74,64,75,76,65,65,51,51,80,94,83,56,83,51,95,95,95,95,50,51,51,82,83,55,56,69,70,83,55,56,65,82,58,60,61,73,74,64,75,77,77,58,61,51,95,95,50,95,95,50,53,54,73,74,64,75,66,57,66,66,66,66,66,66,283,58,60,78,79,61,57,77,77,284,284,284,284,53,54,71,72,73,74,64,75,76,65,60,77,40,41,42,43,44,45,46,47,48,49,50,66,78,79,55,56,80,68,69,70,57,67,61,51,52,53,54,71,72,94,73,74,58,64,75,76,65,82,83,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,78,79,55,56,80,68,69,70,57,67,61,51,52,53,54,71,72,94,73,74,58,64,75,76,65,82,83,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,78,79,55,56,80,68,69,70,57,67,61,51,52,53,54,71,72,94,73,74,58,64,75,76,65,82,83,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,78,79,55,56,80,68,69,70,57,67,61,51,58,60,61,53,54,71,71,71,71,73,74,64,75,82,68,68,57,55,56,69,69,82,83,63,55,67,107,0,0,0,0,103,103,0,0,103,103,103,0,285,285,107,103,108,104,106,107,103,108,104,106,103,104,106,103,107,103,108,104,106,107,103,108,104,106,0,107,103,108,0,0,108,106,107,104,106,106,104,106,107,103,108,104,106,107,103,108,104,106,107,103,108,104,106,103,106,106,107,103,108,104,106,104,106,104,106,108,104,106,107,103,104,106,104,106,107,103,108,104,106,107,103,108,104,106,107,103,108,104,106,107,103,108,104,106,286,287,288,286,287,288,289,290,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,291,292,0,293,0,0,0,0,0,0,294,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,296,297,0,0,0,298,0,0,0,0,299,295,300,301,302,111,112,112,112,112,113,114,115,116,117,111,111,114,118,118,286,119,120,118,118,121,121,287,121,288,119,120,114,149,289,124,125,290,119,120,118,118,121,303,303,303,303,303,303,303,303,121,142,119,120,143,146,147,149,300,301,302,113,144,145,114,115,129,130,131,124,125,118,116,127,117,128,112,132,133,134,122,121,135,111,142,119,120,143,146,147,149,300,301,302,113,144,145,114,115,129,130,131,124,125,118,116,127,117,128,112,132,133,134,122,121,135,111,149,113,116,117,127,128,121,121,127,114,115,129,130,131,124,125,118,116,127,117,112,132,133,134,122,121,135,111,114,115,129,130,131,124,125,118,116,127,117,112,132,133,134,122,121,135,111,130,131,124,125,132,133,134,122,135,294,121,304,132,133,134,299,119,120,118,121,114,112,122,121,121,303,303,303,303,0,293,129,121,129,121,292,131,125,122,121,294,121,294,121,294,294,130,131,124,125,132,133,134,122,305,121,114,306,121,121,116,117,118,114,115,129,130,131,124,125,118,116,127,117,128,112,132,133,134,122,121,135,111,121,142,119,120,143,146,147,149,300,301,302,113,144,145,114,115,129,130,130,130,131,131,124,124,125,125,118,116,127,117,128,112,132,133,134,122,121,135,111,115,129,121,135,116,117,127,128,114,135,130,131,124,125,132,133,134,122,118,115,122,129,135,295,300,301,302,142,119,120,143,146,147,149,300,301,302,113,144,145,114,115,129,130,131,124,125,118,116,127,117,128,112,132,133,134,122,121,135,111,146,147,115,149,124,125,127,127,115,115,128,128,127,115,129,129,115,118,142,143,144,145,295,300,301,302,142,119,120,143,146,147,149,113,144,145,114,115,129,118,116,117,112,122,135,111,118,118,113,146,147,149,130,131,124,125,132,133,134,122,111,111,135,112,295,300,301,302,121,122,139,148,126,121,121,121,114,115,129,130,131,124,125,118,116,127,117,112,132,133,134,122,121,135,111,121,148,121,148,121,148,121,148,121,121,148,121,142,119,120,143,146,147,149,300,301,302,113,144,145,114,115,129,130,131,124,125,118,116,127,117,128,112,132,133,134,122,121,135,111,142,119,120,143,146,147,149,300,301,302,113,144,145,114,115,129,130,131,124,125,118,116,127,117,128,112,132,133,134,122,121,135,111,111,142,119,120,143,146,147,149,300,301,302,113,144,145,114,115,129,130,131,124,125,118,116,127,117,128,112,132,133,134,122,121,135,111,118,298,119,120,114,129,118,121,121,129,121,297,130,131,124,125,122,299,119,120,118,121,299,119,120,118,121,299,299,307,121,114,308,119,119,120,118,121,121,303,303,148,121,118,112,0,0,0,0,0,309,0,0,0,0,0,0,310,311,0,0,0,0,0,0,0,0,0,309,153,153,153,153,153,153,153,153,154,155,153,153,153,153,155,0,0,312,313,310,311,161,162,163,153,154,155,164,165,166,312,313,310,311,161,162,163,153,154,155,164,165,166,153,0,161,162,163,153,154,155,164,165,166,161,162,163,153,154,155,164,165,166,161,162,309,309,165,166,153,153,153,154,155,162,153,155,165,154,153,0,0,153,153,153,153,153,153,153,153,155,153,153,153,153,153,0,165,166,153,154,155,0,153,153,153,0,0,0,154,161,162,0,0,0,161,162,163,153,154,155,164,165,166,312,313,310,311,161,162,163,153,153,153,153,154,155,164,165,166,153,153,154,155,0,0,164,310,311,0,161,153,154,154,155,153,154,154,155,153,312,313,310,311,161,162,163,153,154,155,164,165,166,153,161,163,153,161,154,309,312,313,313,165,166,153,153,153,153,0,161,0,0,309,312,313,313,153,155,0,153,0,0,310,311,310,311,310,311,310,311,310,311,310,311,310,311,310,311,0,0,0,0,153,153,153,153,153,153,153,153,154,155,153,153,153,153,309,312,313,313,153,153,153,161,162,163,154,164,165,166,153,153,155,161,163,153,154,155,163,153,153,0,165,166,0,165,165,0,153,154,153,153,153,153,155,153,153,165,153,153,153,154,154,153,153,153,153,153,153,154,153,314,153,153,153,153,153,153,153,153,154,155,153,153,153,153,153,161,162,163,153,154,155,164,165,166,309,312,313,313,165,166,153,153,312,313,310,311,161,162,163,153,154,155,164,165,166,312,313,310,311,161,162,163,153,154,155,164,165,166,312,313,310,311,161,162,163,153,154,155,164,165,166,153,155,153,154,174,175,176,181,0,0,0,0,315,0,0,315,315,316,0,315,315,315,315,315,315,315,315,315,0,0,0,315,18,0,315,315,315,315,315,315,315,315,315,315,315,315,0,0,0,315,315,0,315,0,315,0,315,0,0,317,315,0,318,0,0,315,318,102,173,174,175,176,176,176,176,176,176,181,181,181,181,181,181,182,317,317,315,174,175,315,174,175,167,167,167,167,102,102,102,102,102,102,102,102,173,173,174,175,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,182,182,167,167,102,102,102,102,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,102,315,174,175,315,174,175,315,174,175,315,174,175,315,174,175,319,319,319,319,319,319,319,176,181,176,181,176,181,176,181,176,181,176,181,186,167,160,102,173,174,175,176,181,182,186,167,160,102,173,174,175,176,181,182,315,174,175,315,174,175,315,174,175,167,160,102,173,174,175,176,181,182,167,160,102,173,174,175,176,181,182,102,173,174,175,176,181,102,102,315,174,175,315,174,175,315,174,175,320,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,320,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,102,167,102,173,174,175,176,181,182,319,167,167,167,167,160,160,160,102,102,102,102,102,102,102,102,173,174,175,176,181,181,181,181,181,181,181,181,181,181,181,181,182,167,167,102,102,102,102,176,181,181,181,181,181,181,181,181,181,181,181,181,315,316,174,175,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,160,160,160,102,321,321,321,321,167,102,173,174,175,176,181,182,315,174,175,315,174,175,315,174,175,317,317,315,174,175,167,167,160,102,173,173,174,174,175,175,176,176,181,181,182,182,319,319,319,319,319,319,319,315,174,175,322,186,167,167,167,167,167,167,167,167,167,167,167,167,167,160,102,173,173,174,174,175,175,176,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,181,182,182,315,174,175,167,173,174,175,176,181,182,316,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,186,317,176,176,176,176,176,176,181,181,181,181,181,181,18,167,160,160,160,167,102,176,181,315,174,175,102,102,182,167,322,186,167,160,102,173,174,175,176,181,182,167,315,174,175,315,174,175,323,323,323,323,315,174,175,318,176,176,176,176,176,176,181,181,181,181,181,181,315,174,175,171,171,318,176,176,176,176,176,176,181,181,181,181,181,181,315,174,175,315,174,175,156,156,173,182,317,317,320,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,315,174,175,315,174,175,315,174,175,315,174,175,315,174,175,315,174,175,323,173,174,175,176,181,315,174,175,323,173,174,175,176,181,0,18,18,322,18,18,18,18,18,18,18,18,317,317,0,167,167,167,167,102,102,102,102,102,102,102,102,173,173,174,175,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,182,182,315,174,175,167,167,102,102,102,102,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,167,167,102,102,173,174,175,176,176,176,176,176,176,181,181,181,181,181,181,182,167,160,160,160,102,167,102,176,181,171,167,102,174,175,176,181,102,173,174,175,176,181,182,102,316,167,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,315,174,175,315,174,175,102,167,167,102,102,102,315,174,175,160,160,160,174,175,176,181,181,181,181,181,181,181,181,181,181,181,181,176,181,181,181,181,181,181,181,181,181,181,181,181,315,316,174,175,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,320,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,320,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,320,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,315,174,175,167,102,176,181,323,323,323,323,167,167,171,171,156,156,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,317,176,176,176,176,176,176,181,181,181,181,181,181,315,318,174,175,176,176,176,176,176,176,181,181,181,181,181,181,315,174,175,315,174,175,315,174,175,315,167,173,174,175,182,167,321,321,321,321,319,167,167,167,167,102,102,102,102,102,102,102,102,173,174,175,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,182,167,167,102,102,102,102,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,167,167,102,102,315,174,175,315,174,175,315,174,175,315,174,175,167,160,102,173,174,175,176,181,182,315,174,175,321,321,321,321,321,321,321,321,167,173,174,175,176,181,182,315,174,175,320,176,176,176,176,176,176,176,176,176,176,176,176,181,181,181,181,181,181,181,181,181,181,181,181,102,315,174,175,186,167,160,102,173,174,175,176,181,182,186,167,160,102,173,174,175,176,181,182,186,167,160,102,173,174,175,176,181,182,102,318,176,176,176,176,176,176,181,181,181,181,181,181,186,186,156,167,102,174,175,176,181,0,0,0,0,0,0,0,0,0,0,0,0,324,325,326,327,328,329,324,325,326,327,328,329,0,0,324,324,324,324,324,324,324,324,324,324,324,324,324,325,325,325,325,325,325,325,325,325,326,326,326,326,326,326,326,326,326,327,327,327,327,327,327,327,327,327,328,328,328,328,328,328,328,328,328,329,329,329,329,329,329,329,324,325,326,327,328,329,324,324,324,324,324,324,324,324,324,324,324,324,324,325,325,325,325,325,325,325,325,325,326,326,326,326,326,326,326,326,326,327,327,327,327,327,327,327,327,327,328,328,328,328,328,328,328,328,328,329,329,329,329,329,329,329,324,325,326,327,328,329,324,325,326,327,328,329,324,324,324,324,324,324,324,324,324,324,324,324,325,325,325,325,325,325,325,325,326,326,326,326,326,326,326,326,327,327,327,327,327,327,327,327,328,328,328,328,328,328,328,328,329,329,329,329,329,329,324,325,326,327,328,329,324,325,326,327,328,329,324,325,326,327,328,329,324,325,326,327,328,329,324,324,325,326,327,328,329,324,325,326,327,328,329,330,331,328,329,324,325,326,327,328,329,324,325,326,327,328,329,324,325,326,327,328,329,0,0,0,0,0,0,0,0,0,332,333,334,335,332,333,334,335,332,333,334,335,336,332,333,334,335,332,333,334,335,332,333,334,335,336,332,333,334,335,336,332,333,334,335,336,332,333,334,335,336,336,332,333,334,335,336,336,332,333,334,335,332,333,334,335,332,333,334,335,0,0,0,0,0,194,195,196,194,195,196,199,337,199,199,194,195,196,194,195,196,337,194,195,196,194,195,196,194,195,196,199,337,194,0,194,194,199,0,199,199,199,199,199,199,0,194,195,196,194,199,194,195,196,194,195,196,194,195,196,194,195,196,337,337,337,337,337,0,205,0,0,0,0,204,205,206,207,208,204,205,206,207,208,204,205,206,207,208,204,205,206,207,208,205,206,205,206,204,205,206,207,208,204,205,206,207,208,205,207,208,204,205,206,207,208,207,205,205,205,204,205,206,207,208,206,208,204,204,205,206,207,208,204,205,206,207,208,204,205,206,207,208,204,205,206,207,208,209,210,212,214,215,216,218,210,0,0,0,0,0,0,0,0,0,0,0,0,0,222,0,0,141,338,339,0,0,0,0,0,222,0,0,0,0,0,340,0,0,0,341,198,209,222,210,211,224,212,213,214,215,216,217,218,219,220,221,198,209,222,210,211,224,212,213,214,215,216,217,218,219,220,221,342,342,210,211,212,213,214,215,216,217,218,219,220,221,210,211,212,213,214,215,216,217,218,219,220,221,209,210,212,213,222,210,211,222,209,210,212,213,222,210,211,224,212,213,214,215,216,217,218,219,220,221,198,209,222,210,211,224,212,213,214,215,216,217,218,219,220,221,343,343,343,343,211,211,211,340,340,339,212,213,198,209,222,210,211,224,212,213,214,215,216,217,218,219,220,221,198,224,222,222,222,222,344,340,222,222,342,340,340,338,214,215,216,218,219,221,221,222,211,213,219,221,198,224,222,209,210,212,213,223,211,212,213,222,211,223,223,211,211,0,0,0,0,0,141,217,220,0,0,340,340,222,222,222,222,211,222,222,211,222,222,343,343,343,210,211,212,213,214,215,216,217,218,219,220,221,343,198,209,222,210,211,224,212,213,214,215,216,217,218,219,220,221,198,209,222,210,211,224,212,213,214,215,216,217,218,219,220,221,198,209,222,210,211,224,212,213,214,215,216,217,218,219,220,221,222,340,340,236,237,238,239,0,0,0,0,0,0,0,0,0,152,0,0,0,0,0,0,0,152,236,237,238,239,226,227,228,230,345,231,235,232,152,234,233,236,237,238,239,226,227,228,230,345,231,235,232,152,234,233,226,227,228,230,231,232,152,233,226,227,228,230,231,232,152,233,234,229,345,233,232,226,232,152,226,227,228,230,231,232,152,234,233,236,237,238,239,226,227,228,230,345,231,235,232,152,234,233,228,152,234,234,0,236,237,238,239,226,227,228,230,345,231,235,232,152,234,233,230,235,226,227,228,233,226,227,228,235,232,234,233,231,226,235,227,227,227,228,235,235,236,237,238,239,228,229,345,227,227,227,234,226,227,228,230,231,232,152,233,236,237,238,239,226,227,228,230,345,231,235,232,152,234,233,236,237,238,239,226,227,228,230,345,231,235,232,152,234,233,236,237,238,239,226,227,228,230,345,231,235,232,152,234,233,235,227,228,235,229,345,234,346,347,347],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[[2,[3]]],[[2,[3]]]],[[[4,[3]]],[[4,[3]]]],[[]],[[]],0,[[]],[[]],[[[2,[5]],6],7],[[[4,[5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[12,13,13]],[[]],[[14,15],[[1,[[16,[15]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[],17],[[17,9],[[17,[9]]]],[[[19,[18]]],9],[20,20],[21,21],[22,22],[[[19,[[0,[3,18]]]]],[[19,[[0,[3,18]]]]]],[12,12],[[[23,[3]]],[[23,[3]]]],[14,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[20,9],22],[9],[[16,16],16],[[16,16],16],[[24,16,16],16],[[25,16,16],16],[[],20],[[],12],[[],14],[[20,9],26],[[20,20],8],[23,13],0,[[14,15],[[1,[15]]]],[27,1],[9,[[16,[9]]]],[[[28,[5]],6],7],[[20,6],7],[[21,6],7],[[22,6],7],[[[19,[[0,[5,18]]]],6],7],[[12,6],7],[[[23,[5]],6],7],[[[17,[5]],6],7],[[14,6],7],[[29,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[18]]]],[30,14],0,[[17,9]],[[]],0,[9],[[14,15],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],8],[[9,9],8],[[[19,[18]],9],8],[[]],[9],[9],[[]],[[]],[24],[25],0,[[],31],[9,28],[[],12],[[],23],[9,32],[[],14],[[],24],[[],25],[21,1],[22,1],[[]],[31],[32,13],[[]],[31],[[]],[[20,9],26],[9,16],[9],[27,9],[9],[[12,13],13],[[14,15]],[9],[27,1],[27,9],[[],16],[[],8],[[],8],[9,[[16,[9]]]],[28,[[1,[9]]]],[[9,9],29],[[9,9],29],[9,21],[27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[29,9,9]],[[]],[[]],[[]],[[]],[24],[25],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[34,34],[35,35],[36,36],[37,37],[[[38,[3]]],[[38,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],38],0,0,0,[33],[34],[35],[[38,30]],[33],[34],[33],[34],[33],[[33,6],7],[[34,6],7],[[35,6],7],[[36,6],7],[[37,6],7],[[[38,[5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[33,9,9]],[[34,9,9]],[[35,15,15]],[38],[[33,9,9]],[[34,9,9]],[[33,9,9,9]],[[34,9,9,9]],[[33,9,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[37,9],[[1,[[16,[9]]]]]],[[],9],[[9,9,39],9],[[9,9,39],9],[[],9],[38,9],[33,9],[9,33],[9,34],[[],35],[30,36],[[],37],[[],38],[33,9],[[34,9],9],[[35,15],15],[[36,15],15],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[40,8],[41,8],[42,8],[43,8],[44,8],[45,8],[46,8],[47,8],[48,8],[49,8],[9,8],[[50,9],8],[[51,9],9],[[52,9]],[[53,9]],[[54,9,9]],[[53,9]],[[54,9,9]],[55],[56],[[57,13]],[[57,13]],[[55,9]],[[56,9]],[[57,13]],[[57,13]],[[[58,[39]]],[[59,[9,[16,[9]]]]]],[60,[[59,[9,[16,[9]]]]]],[61,[[59,[9,[16,[9]]]]]],[[],62],[63,62],[[55,55]],[64],0,[65,1],[[],9],[50,9],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[67],[68],[55],[56],[69],[70],[57],[57],[53,53],[54,54],[71,71],[72,72],[73,73],[74,74],[64,64],[75,75],[76,76],[65,65],[60,60],[[[77,[3,3]]],[[77,[3,3]]]],[[[40,[3,3]]],[[40,[3,3]]]],[[[41,[3,3]]],[[41,[3,3]]]],[[[42,[3,3]]],[[42,[3,3]]]],[[[43,[3,3,3,3,3]]],[[43,[3,3,3,3,3]]]],[[[44,[3,3,3,3,3]]],[[44,[3,3,3,3,3]]]],[[[45,[3,3,3,3,3,3]]],[[45,[3,3,3,3,3,3]]]],[[[46,[3]]],[[46,[3]]]],[[[47,[3]]],[[47,[3]]]],[[[48,[3]]],[[48,[3]]]],[[[49,[3]]],[[49,[3]]]],[50,50],[66,66],[[[78,[3]]],[[78,[3]]]],[[[79,[3]]],[[79,[3]]]],[[[55,[3]]],[[55,[3]]]],[[[56,[3]]],[[56,[3]]]],[[[80,[3]]],[[80,[3]]]],[68,68],[[[69,[3,3]]],[[69,[3,3]]]],[[[70,[3]]],[[70,[3]]]],[57,57],[67,67],[61,61],[51,51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[66,66],81],[70,8],[69,8],[66,15],[66,15],0,[62],[[63,62]],[[],71],[[],76],[[],65],[[],82],[[],83],[[],63],[[],48],[[],49],[[],66],[[],55],[[],56],[[],80],[[],69],[[],70],[[],57],[[],77],[[],77],0,[55,[[84,[9]]]],[69],[70],[82],[83],[63],[67,16],[[66,66],8],[[55,30]],[[55,30]],[[56,30]],[[56,30]],[[69,30]],[[70,30]],[[[58,[39]],9],9],[[60,9],9],[67,[[10,[9,9]]]],[[61,9],9],[[67,9],[[10,[9,9]]]],[[[58,[39]],9],[[85,[0]]]],[[[58,[39]],9],[[86,[0]]]],[[52,6],7],[[53,6],7],[[54,6],7],[[71,6],7],[[72,6],7],[[73,6],7],[[74,6],7],[[64,6],7],[[75,6],7],[[76,6],7],[[65,6],7],[[82,6],7],[[83,6],7],[[60,6],7],[[[63,[5]],6],7],[[77,6],7],[[[40,[5,5]],6],7],[[[41,[5,5]],6],7],[[[42,[5,5]],6],7],[[[43,[5,5,5,5,5]],6],7],[[[44,[5,5,5,5,5]],6],7],[[[45,[5,5,5,5,5,5]],6],7],[[[46,[5]],6],7],[[[47,[5]],6],7],[[[48,[5]],6],7],[[[49,[5]],6],7],[[50,6],7],[[66,6],7],[[[78,[5]],6],7],[[79,6],7],[[55,6],7],[[56,6],7],[[[80,[5]],6],7],[[68,6],7],[[[69,[5,5]],6],7],[[[70,[5]],6],7],[[57,6],7],[[67,6],7],[[61,6],7],[[51,6],7],[[52,9,9]],[[[53,[87]],9,9]],[[54,9,9,9,9]],[[[71,[[71,[[71,[0]]]]]]]],[[[71,[0]]]],[[[71,[[71,[0]]]]]],[[[71,[[71,[[71,[[71,[0]]]]]]]]]],[[72,9,9]],[[73,9,9]],[[74,9,9]],[[64,9,9]],[[75,9,9]],[82],[77],[73],[74],[64],[75],[76],[65],[[72,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],52],[30,50],[[],78],[[],79],[30,55],[30,55],[30,56],[30,56],[30,69],[30,70],[[],53],[16,73],[16,64],[65,1],[[[53,[87]],9]],[[54,9,9]],[[73,9]],[[74,9]],[[64,9]],[[75,9]],[[82,9],1],[83,1],[[66,9],8],[55,9],[56,9],[69,1],[[60,9,9],1],[83,1],[[83,9],1],[69,1],[70,1],[70,1],[69,1],[69,1],[70,1],[[60,9]],[[],46],[[],47],[[],46],[[],47],[66],[72,9],[[72,9]],[[],[[1,[9]]]],[78,[[1,[9]]]],[79,[[1,[9]]]],[[],9],[78,9],[79,9],[[]],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[[82,9]],[83,1],[80],[69],[70],[67,[[16,[9]]]],[[67,9],[[16,[9]]]],[[67,9,9],9],[69],[70],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[76,8],[65,8],[83,8],[55,8],[56,8],[[60,9,9],8],0,[55,[[88,[9]]]],[56,[[89,[9]]]],[69,89],[70,90],[69,91],[55,[[92,[9]]]],[56,[[90,[9]]]],[69,90],[76,1],[76,9],[65,9],[83,9],[55,9],[56,9],[[],46],[[],47],[[],46],[[],47],[[[53,[93]]],9],[77,59],[[[58,[39]],9],[[16,[9]]]],[[60,9],[[16,[9]]]],[[61,9],[[16,[9]]]],[57],[57,13],[[82,9]],[9,53],[[9,9],54],[[],[[71,[0]]]],[[],[[71,[[71,[[71,[0]]]]]]]],[[],[[71,[[71,[0]]]]]],[[],[[71,[[71,[[71,[[71,[0]]]]]]]]]],[16,72],[[],94],[9,73],[9,74],[[9,39,39],[[58,[39]]]],[9,64],[9,75],[[],76],[[],65],[[],82],[[],83],[9,60],[[],63],[[],77],[[],43],[[],44],[[],45],[[],48],[[],49],[9,66],[[],55],[[],56],[[],80],[9,68],[[],69],[[],70],[[],57],[9,67],[9,61],[[[16,[[0,[3,95]]]],9],51],[[],1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[[67,9,9],[[1,[9]]]],[67,9],[66],[66],[9,66],[[66,66],[[1,[81]]]],[76,1],[65,1],[65,1],[69,1],[70,1],[69,1],[70,1],[[73,9,9],[[1,[9]]]],[[74,9,9],[[1,[9]]]],[[64,9,9],[[1,[9]]]],[[75,9,9],[[1,[9]]]],[76],[65],[65],[[51,[96,[9]],9],9],[[51,[96,[9]],9],9],[80,1],[[94,96,96],16],0,[56,[[97,[9]]]],0,[[51,9,[96,[9]]],9],[9,9],[9,9],[9,9],[9,9],[[50,9],9],[[51,9,[96,[9]]],9],[[51,[96,[9]],[96,[9]]],9],[[82,9],1],[83,1],[55,8],[56,8],[69],[70],[[83,9],1],[[55,9],9],[[56,9],9],[65],[82],[[[58,[39]]],[[16,[9]]]],[60,[[16,[9]]]],[61,[[16,[9]]]],[[73,9,9],[[1,[9]]]],[[74,9,9],[[1,[9]]]],[[64,9,9],[[1,[9]]]],[[75,9,9],[[1,[9]]]],[[77,9]],[[77,9]],[[[58,[39]],9,9],8],[[61,9,9],8],[[51,9,9],[[1,[9]]]],[9,[[1,[9]]]],[9,[[1,[9]]]],[[50,9],[[1,[9]]]],[9,[[1,[9]]]],[9,[[1,[9]]]],[[50,9],[[1,[9]]]],[[[53,[87]],9]],[[54,9,9]],[[73,9]],[[74,9]],[[64,9]],[[75,9]],[[66,9,8]],[[57,13]],[[66,9]],[[66,9]],[[66,9]],[[66,9]],[[66,9]],[[66,9]],[[],9],[[[58,[39]],9],9],[[60,9],9],[78,9],[79,9],[[61,9],9],[[57,13,13]],[77],[77],[[],16],[9,16],[[],16],[9,16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[58,[39]],9,9],8],[[60,9,9],8],[[61,9,9],8],[[53,9]],[[54,9,9]],[[[71,[[71,[[71,[[71,[0]]]]]]]]]],[[[71,[[71,[[71,[0]]]]]]]],[[[71,[[71,[0]]]]]],[[[71,[0]]]],[[73,9,9]],[[74,9,9]],[[64,9]],[[75,9]],[82],[[68,9,9,13,13]],[[68,98,9,13,13]],[[13,9],57],[55,[[99,[9]]]],[56,[[100,[9]]]],[69,100],[69,101],[9,82],[9,83],[9,63],[9,55],[[9,9],67],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],81],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[102,102,102],103],[[104,105],103],[[106,105],103],[[102,102,102],103],[[[107,[3]]],[[107,[3]]]],[103,103],[108,108],[104,104],[106,106],[[]],[[]],[[]],[[]],[[]],[[[16,[105]]],109],[[107,107],81],[[103,103],81],[[108,105],8],[[[16,[105]]],109],[[[16,[105]]],[[16,[105]]]],[[108,108],1],[[106,106],[[1,[105]]]],[[],[[107,[110]]]],[104,105],[106,105],[[106,106],109],[[104,105],109],[[106,105],109],[[107,107],8],[[103,103],8],[[108,108],8],[[104,104],8],[[106,106],8],[[[107,[5]],6],7],[[103,6],7],[[108,6],7],[[104,6],7],[[106,6],7],[[]],[[]],[[]],[[]],[[]],[103],[[106,106],8],[[106,105],8],[[]],[[]],[[]],[[]],[[]],[[104,104],8],[[106,106],8],[[104,104],8],[[106,106],8],[[105,109],108],[[105,105],104],[[105,105],106],[[107,107],[[1,[81]]]],[[103,103],[[1,[81]]]],[[104,105],105],[[106,105],105],[[104,105],105],[[106,105],105],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[111,9,8,9,8]],[[112,9,9,13]],[[112,9,9]],[[112,9,9,9,9,15]],[[112,9,9,9,9,15]],[[113,9,9]],[[114,9,9]],[[115,9,9]],[[116,9,9,15]],[[117,9,9,15,13]],[[111,9,9]],[[111,9,9]],[[114,9,9]],[[[118,[0]]],[[0,[0]]]],[[[118,[0]]],[[0,[0]]]],[[]],[119],[120],[[[118,[0]]]],[[[118,[0]]]],[[121,9],[[123,[122]]]],[121],[[]],[121],[[]],[119],[120],[[114,9],16],0,[[]],[124],[125],[[]],[119],[120],[[[118,[0]]]],[[[118,[0]]]],[121],[8,1],[8,1],[8,1],[8,1],[[]],[[]],[[]],[[]],[[121,9],[[16,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[113],[[116,126],127],[[117,126],128],[[9,9],116],[[9,9],117],[9,113],[[9,9],113],[[127,9,15,15]],[114,114],[115,115],[129,129],[[[130,[3]]],[[130,[3]]]],[[[131,[3,3]]],[[131,[3,3]]]],[[[124,[3,3]]],[[124,[3,3]]]],[[[125,[3,3,3]]],[[125,[3,3,3]]]],[[[118,[3]]],[[118,[3]]]],[116,116],[127,127],[117,117],[112,112],[132,132],[133,133],[134,134],[122,122],[[[121,[3]]],[[121,[3]]]],[135,135],[111,111],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[130,[136]],130],81],[[[131,[136,136]],131],81],[[[124,[136,136]],124],81],[[[125,[136,136,136]],125],81],[[132,132],81],[[133,133],81],[[134,134],81],[[122,122],81],[135,[[16,[[16,[9]]]]]],[[]],[121],[[9,16],121],[[9,16],[[121,[132]]]],[[9,16],[[121,[133]]]],[[9,16],[[121,[134]]]],[[]],[119],[120],[118],[121],[[],114],[[],112],[[],122],[[121,9],[[16,[9]]]],[[121,9],[[16,[8]]]],[[]],[[]],[[]],[[]],[[9,9],16],[[]],[129,123],0,[129,9],[121,9],[[]],[131],[125],[122],0,[[]],[121],[[]],[121],[[]],[[]],[[[130,[137]],130],8],[[[131,[137,137]],131],8],[[[124,[137,137]],124],8],[[[125,[137,137,137]],125],8],[[132,132],8],[[133,133],8],[[134,134],8],[[122,122],8],[[],9],[121,9],0,[[]],[121],[[121,16]],[[116,30]],[[117,30]],[118,9],[[114,6],7],[[115,6],7],[[129,6],7],[[[130,[5]],6],7],[[[131,[5,5]],6],7],[[[124,[5,5]],6],7],[[[125,[5,5,5]],6],7],[[[118,[5]],6],7],[[116,6],7],[[127,6],7],[[117,6],7],[[128,6],7],[[112,6],7],[[132,6],7],[[133,6],7],[[134,6],7],[[122,6],7],[[[121,[5]],6],7],[[135,6],7],[[111,6],7],[121],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[138],[[],130],[[],131],[[]],[[]],[[],124],[[],125],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],115],[[9,16],129],[[9,16],121],[135,139],[116,126],[117,126],[[127,9],15],[[128,9],15],0,[135,8],[[[130,[140]]]],[[[131,[140,140]]]],[[[124,[140,140]]]],[[[125,[140,140,140]]]],[132],[133],[134],[122],0,[115],0,[[129,9]],[[135,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[115],0,[124,124],[125,125],[[127,9,9],15],[[127,9,9,15],15],[115],[115,16],[[128,9,9]],[[128,9,9,15]],[[127,9],[[16,[8]]]],[115,16],[[129,9],1],[[129,39],[[16,[8]]]],[115],[118,1],[[[142,[141,141]]],1],[[[143,[141,141]]],1],[144,1],[145,1],[[]],[[]],[[]],[[]],[[9,9,8],[[142,[141,141]]]],[9,119],[[],120],[[9,9],[[143,[141,141]]]],[[],146],[[],147],[148,149],[9,113],[[9,9],144],[9,145],[9,114],[[9,9],115],[9,129],[[9,9],118],[[9,9],116],[[9,9],117],[[9,9],112],[[9,9],122],[139,135],[9,111],[[9,9],[[118,[0]]]],[[9,9],[[118,[0]]]],[[9,9],113],[146,1],[147,1],0,[[[130,[150]],130],[[1,[81]]]],[[[131,[150,150]],131],[[1,[81]]]],[[[124,[150,150]],124],[[1,[81]]]],[[[125,[150,150,150]],125],[[1,[81]]]],[[132,132],[[1,[81]]]],[[133,133],[[1,[81]]]],[[134,134],[[1,[81]]]],[[122,122],[[1,[81]]]],[[111,9]],[[111,9]],[135,9],[112],[[]],[[]],[[]],[[]],0,0,[139,151],[148,151],[126,151],[[[121,[132]]],151],[[[121,[133]]],151],[[[121,[134]]],151],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[121,[[16,[9]]]],[148,152],[[[121,[133]]],152],[[148,9],[[16,[15]]]],[[[121,[133]],9],[[16,[15]]]],[[148,9]],[[[121,[133]],9]],[[148,9]],[[[121,[133]],9]],[[121,9]],[[148,9],[[16,[15]]]],[[[121,[133]],9],[[16,[15]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[111,[[1,[[16,[8]]]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[118,9]],[[]],[119],[120],[114,[[96,[9]]]],[129,[[96,[9]]]],[118],[121],[121,[[96,[9]]]],[129,9],[121,9],[[]],[130],[131],[124],[125],[122],[[]],[119],[120],[118],[121],[[]],[119],[120],[118],[121],[[]],[[]],[[],9],[121,9],0,[[]],[[119,16]],[119],[120],[[118,16]],[121],[[121,16]],[[]],[[]],[[148,9,39],16],[[[121,[133]],9,39],16],0,[[[16,[9]]],112],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[153],[153],[153],[153],[[153,153]],[[153,153]],[[153,153]],[[153,153]],[[154,154]],[[155,155]],[153],[[153,153]],[[153,153]],[153],[[[155,[[0,[3,156,157,158]]]],[0,[3,156,157,158]]],[[0,[3,156,157,158]]]],[[],16],[[[0,[3,159]],9,[0,[3,159]]],[[0,[3,159]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[153,153,9]],[[15,15,160],8],[[[161,[3]]],[[161,[3]]]],[[[162,[3]]],[[162,[3]]]],[[[163,[3]]],[[163,[3]]]],[153,153],[[[154,[3]]],[[154,[3]]]],[[[155,[3]]],[[155,[3]]]],[164,164],[165,165],[166,166],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[161,9,9],167],[[162,9,9],167],[[]],[[]],[[165,15],15],[[166,168],168],[[153,9],153],[[153,9],153],0,0,0,[[],162],[[],[[153,[110,110]]]],[[],[[155,[110]]]],[[],165],[154],[153,153],[[15,15,15],[[1,[15]]]],[[15,15,15],[[1,[15]]]],[153],[153],[[153,153]],[[153,153]],[[153,153]],[153],[[153,153]],[153],[[155,155]],[153],[[153,153]],[153],[[153,153]],[[153,153]],[15,[[16,[15]]]],[[165,15],[[16,[15]]]],[[166,168],[[16,[168]]]],[[153,153],8],[[[154,[137]],154],8],[[[155,[137]],155],8],[9,9],[153],[153,153],[[153,9],153],[[13,13]],[[13,13]],[[13,13]],[[],154],0,[[162,9]],[[15,15,15,15],15],[[13,13,13,13,15],13],[[13,13,13,13,15,[96,[13]]],13],[[[161,[5]],6],7],[[[162,[5]],6],7],[[[163,[5]],6],7],[[[153,[5,5]],6],7],[[[154,[5]],6],7],[[[155,[5]],6],7],[[164,6],7],[[165,6],7],[[166,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,153],[[],153],[138],[[]],[[]],[[]],[[]],[[]],[30,153],[16,153],[[[16,[16]]],154],[16,155],[[15,15],15],[[15,15],15],[[164,9],9],[[]],[[]],[169,16],[[161,9,9],167],[[153,9]],[[154,9]],[154],[[155,9]],[[153,9]],[154],[[154,9]],[[155,9]],[153,153],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[153],[[161,9],167],[163,167],[[153,9],153],0,[154,[[1,[154]]]],[9],[9],[9],[9],[[165,15],8],[[166,168],8],[153,123],[153,170],[[16,9]],[[153,16,9]],[167,167],[[161,9,167],167],[[],[[16,[167]]]],[[15,15],15],[[],9],[[],9],[[],9],[[],9],[153,9],[155,9],[[],1],[[153,9],153],[15,8],[[15,160],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[15,15],15],[[15,15],15],[[15,15],15],[9,[[59,[9,13]]]],[[153,153]],[[153,153]],[[153,153]],[153],[153],[153],[153],[[153,153]],[[154,154]],[[155,155]],[153],[[153,153]],[[153,153]],[153],[[]],[[]],[[]],[[]],[153,16],[153],[153],[9,161],[[],162],[167,163],[3,[[154,[3]]]],[9,164],[15,165],[168,166],[153,153],[[],153],[[],[[155,[[0,[156,171]]]]]],[[161,9,9],167],[[163,9],167],[[153,9,9],153],[[154,9],154],[[[155,[[0,[172,156,171,157,158]]]],9],[[155,[[0,[172,156,171,157,158]]]]]],[[163,98],167],[[153,9],153],[[153,9],153],[15,16],[[165,15],16],[[166,168],16],[15,[[16,[15]]]],[165],[[165,15]],[15,15],[9,153],[154,9],[[153,153]],[[153,153]],[[153,153]],[[153,153]],[[155,155]],[[153,153]],[[153,153]],[[165,15]],[[153,9]],[[153,9],153],[153,153],[[154,8]],0,[[153,9]],[[153,9]],[[153,9]],[[153,9]],[[153,9]],[[153,9]],[154,[[1,[16]]]],[[153,9],[[1,[153]]]],[[],1],[[153,153]],[[153,153]],[[153,153]],[153],[153],[[153,153]],[153],[153],[[154,154]],[[155,155]],[153],[153],[[153,153]],[[153,153]],[[[153,[167]],167,161],[[153,[167]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[9],[9],0,[[166,168]],[153],[[153,9]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],153],[[],155],[9,153],[[],154],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[102,[109]]],109],[173,173],[174,174],[175,175],[[[176,[13]]],[[176,[13]]]],[[[176,[177]]],[[176,[177]]]],[[[176,[178]]],[[176,[178]]]],[[[176,[179]]],[[176,[179]]]],[[[176,[180]]],[[176,[180]]]],[[[176,[98]]],[[176,[98]]]],[[[181,[177]]],[[181,[177]]]],[[[181,[180]]],[[181,[180]]]],[[[181,[178]]],[[181,[178]]]],[[[181,[13]]],[[181,[13]]]],[[[181,[98]]],[[181,[98]]]],[[[181,[179]]],[[181,[179]]]],[182,182],[[]],[[]],[[]],[174,174],[175,175],[[]],[174,174],[175,175],[[167,167]],[[167,167]],[[167,167]],[[167,167]],[102],[[102,102]],[102],[102],[[102,102]],[102],[[102,102]],[[102,102]],[[173,109]],[[173,173]],[[174,174]],[[175,175]],[[[176,[183]],[176,[183]]]],[[[176,[180]],[176,[180]]]],[[[176,[177]],[176,[177]]]],[[[176,[168]],[176,[168]]]],[[[176,[178]],[176,[178]]]],[[[176,[98]],[176,[98]]]],[[[176,[169]],[176,[169]]]],[[[176,[184]],[176,[184]]]],[[[176,[179]],[176,[179]]]],[[[176,[13]],[176,[13]]]],[[[176,[15]],[176,[15]]]],[[[176,[9]],[176,[9]]]],[[[181,[183]],[181,[183]]]],[[[181,[184]],[181,[184]]]],[[[181,[168]],[181,[168]]]],[[[181,[9]],[181,[9]]]],[[[181,[177]],[181,[177]]]],[[[181,[13]],[181,[13]]]],[[[181,[15]],[181,[15]]]],[[[181,[180]],[181,[180]]]],[[[181,[179]],[181,[179]]]],[[[181,[178]],[181,[178]]]],[[[181,[98]],[181,[98]]]],[[[181,[169]],[181,[169]]]],[[182,109]],[[182,182]],[[167,167]],[[167,167]],[[102,102]],[[102,102]],[102],[102],[[[176,[179]],[176,[179]]]],[[[176,[13]],[176,[13]]]],[[[176,[178]],[176,[178]]]],[[[176,[183]],[176,[183]]]],[[[176,[168]],[176,[168]]]],[[[176,[169]],[176,[169]]]],[[[176,[15]],[176,[15]]]],[[[176,[9]],[176,[9]]]],[[[176,[177]],[176,[177]]]],[[[176,[98]],[176,[98]]]],[[[176,[180]],[176,[180]]]],[[[176,[184]],[176,[184]]]],[[[181,[179]],[181,[179]]]],[[[181,[15]],[181,[15]]]],[[[181,[98]],[181,[98]]]],[[[181,[183]],[181,[183]]]],[[[181,[180]],[181,[180]]]],[[[181,[13]],[181,[13]]]],[[[181,[177]],[181,[177]]]],[[[181,[178]],[181,[178]]]],[[[181,[184]],[181,[184]]]],[[[181,[9]],[181,[9]]]],[[[181,[169]],[181,[169]]]],[[[181,[168]],[181,[168]]]],[[[102,[109]]],109],[[]],[174,174],[175,175],[[]],[174,174],[175,175],[[]],[174,174],[175,175],[[]],[[174,174],174],[[175,175],175],[[]],[174,174],[175,175],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[176,176]],[[181,181]],[[176,176]],[[181,181]],[[176,176]],[[181,181]],[[176,176]],[[181,181]],[[176,176]],[[181,181]],[[176,176]],[[181,181]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[174,174],[175,175],[[]],[174,174],[175,175],[[],185],[174,185],[175,185],[167,167],[[[160,[3]]],[[160,[3]]]],[[[102,[3]]],[[102,[3]]]],[173,173],[174,174],[175,175],[[[176,[3]]],[[176,[3]]]],[[[181,[3]]],[[181,[3]]]],[182,182],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[102,[136]],102],81],[[173,173],81],[[174,174],81],[[175,175],81],[[[176,[136]],176],81],[[[181,[136]],181],81],[[102,102],81],[102,102],[[]],[[174,174],174],[[175,175],175],[[]],[174,174],[175,175],[[]],[174,174],[175,175],[[]],[[[176,[169]]],168],[[[176,[177]]],168],[[[176,[183]]],168],[[[176,[9]]],168],[[[176,[178]]],168],[[[176,[168]]],168],[[[176,[98]]],168],[[[176,[184]]],168],[[[176,[15]]],168],[[[176,[179]]],168],[[[176,[180]]],168],[[[176,[13]]],168],[[[181,[13]]],168],[[[181,[9]]],168],[[[181,[180]]],168],[[[181,[168]]],168],[[[181,[179]]],168],[[[181,[169]]],168],[[[181,[184]]],168],[[[181,[15]]],168],[[[181,[98]]],168],[[[181,[178]]],168],[[[181,[183]]],168],[[[181,[177]]],168],[[]],[[[176,[178]]],168],[[[176,[9]]],168],[[[176,[15]]],168],[[[176,[180]]],168],[[[176,[13]]],168],[[[176,[177]]],168],[[[176,[169]]],168],[[[176,[168]]],168],[[[176,[98]]],168],[[[176,[179]]],168],[[[176,[183]]],168],[[[176,[184]]],168],[[[181,[180]]],168],[[[181,[184]]],168],[[[181,[169]]],168],[[[181,[178]]],168],[[[181,[13]]],168],[[[181,[168]]],168],[[[181,[183]]],168],[[[181,[179]]],168],[[[181,[9]]],168],[[[181,[15]]],168],[[[181,[98]]],168],[[[181,[177]]],168],[[102,102]],[[],167],[[],[[102,[110]]]],[[],173],[[],174],[[],175],[[],[[176,[110]]]],[[],[[181,[110]]]],[[],182],[[]],[[167,167]],[[167,167]],[[167,167]],[[167,167]],[[[160,[169]],169],169],[[[160,[15]],15],15],[[[160,[168]],168],168],[102],[[102,102]],[[102,102]],[[102,102]],[[102,102]],[102],[102],[102],[[173,173]],[[174,174]],[[175,175]],[[176,176]],[[[181,[168]],[181,[168]]]],[[[181,[179]],[181,[179]]]],[[[181,[13]],[181,[13]]]],[[[181,[177]],[181,[177]]]],[[[181,[9]],[181,[9]]]],[[[181,[15]],[181,[15]]]],[[[181,[98]],[181,[98]]]],[[[181,[183]],[181,[183]]]],[[[181,[169]],[181,[169]]]],[[[181,[178]],[181,[178]]]],[[[181,[180]],[181,[180]]]],[[[181,[184]],[181,[184]]]],[[182,182]],[[167,167]],[[167,167]],[[102,102]],[[102,102]],[102],[102],[[176,176]],[[[181,[180]],[181,[180]]]],[[[181,[168]],[181,[168]]]],[[[181,[13]],[181,[13]]]],[[[181,[179]],[181,[179]]]],[[[181,[169]],[181,[169]]]],[[[181,[183]],[181,[183]]]],[[[181,[184]],[181,[184]]]],[[[181,[15]],[181,[15]]]],[[[181,[98]],[181,[98]]]],[[[181,[9]],[181,[9]]]],[[[181,[178]],[181,[178]]]],[[[181,[177]],[181,[177]]]],[[]],[[]],[[174,174],174],[[175,175],175],[[[176,[183]],[176,[183]]],[[176,[183]]]],[[[176,[179]],[176,[179]]],[[176,[179]]]],[[[176,[178]],[176,[178]]],[[176,[178]]]],[[[176,[9]],[176,[9]]],[[176,[9]]]],[[[176,[184]],[176,[184]]],[[176,[184]]]],[[[176,[169]],[176,[169]]],[[176,[169]]]],[[[176,[180]],[176,[180]]],[[176,[180]]]],[[[176,[15]],[176,[15]]],[[176,[15]]]],[[[176,[13]],[176,[13]]],[[176,[13]]]],[[[176,[177]],[176,[177]]],[[176,[177]]]],[[[176,[98]],[176,[98]]],[[176,[98]]]],[[[176,[168]],[176,[168]]],[[176,[168]]]],[[[181,[178]],[181,[178]]],[[181,[178]]]],[[[181,[179]],[181,[179]]],[[181,[179]]]],[[[181,[169]],[181,[169]]],[[181,[169]]]],[[[181,[184]],[181,[184]]],[[181,[184]]]],[[[181,[98]],[181,[98]]],[[181,[98]]]],[[[181,[15]],[181,[15]]],[[181,[15]]]],[[[181,[9]],[181,[9]]],[[181,[9]]]],[[[181,[13]],[181,[13]]],[[181,[13]]]],[[[181,[183]],[181,[183]]],[[181,[183]]]],[[[181,[180]],[181,[180]]],[[181,[180]]]],[[[181,[177]],[181,[177]]],[[181,[177]]]],[[[181,[168]],[181,[168]]],[[181,[168]]]],[[[160,[15]],15]],[[[160,[168]],168]],[[[160,[169]],169]],[[102,102]],[[]],[[],1],[[]],[[],1],[[167,167],8],[[[102,[137]],102],8],[[173,173],8],[[174,174],8],[[175,175],8],[[[176,[137]],176],8],[[[181,[137]],181],8],[[182,182],8],[[]],[174,174],[175,175],[[]],[174,174],[175,175],[[]],[174,174],[175,175],[[],186],[[],186],[[]],[174,174],[175,175],[[167,6],[[10,[187]]]],[[167,6],7],[[[160,[5]],6],7],[[[102,[5]],6],7],[[173,6],7],[[173,6],7],[[174,6],7],[[174,6],7],[[175,6],7],[[175,6],7],[[176,6],7],[[176,6],7],[[181,6],7],[[181,6],7],[[182,6],7],[[182,6],7],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[]],[174,174],[175,175],[[]],[[]],[98,167],[184,167],[179,167],[180,167],[13,167],[178,167],[9,167],[169,167],[[]],[177,167],[15,167],[168,167],[183,167],[[]],[[]],[109,173],[[]],[188,174],[[]],[[]],[109,175],[[]],[168,[[176,[168]]]],[180,[[176,[180]]]],[177,[[176,[177]]]],[98,[[176,[98]]]],[9,[[176,[9]]]],[15,[[176,[15]]]],[184,[[176,[184]]]],[13,[[176,[13]]]],[169,[[176,[169]]]],[178,[[176,[178]]]],[179,[[176,[179]]]],[183,[[176,[183]]]],[178,[[181,[178]]]],[184,[[181,[184]]]],[180,[[181,[180]]]],[13,[[181,[13]]]],[15,[[181,[15]]]],[183,[[181,[183]]]],[98,[[181,[98]]]],[9,[[181,[9]]]],[168,[[181,[168]]]],[177,[[181,[177]]]],[[]],[179,[[181,[179]]]],[169,[[181,[169]]]],[109,182],[[]],[15],[15,174],[15,175],[189,[[10,[167]]]],[189,[[10,[173]]]],[189,[[10,[174]]]],[189,[[10,[175]]]],[189,[[10,[176]]]],[189,[[10,[181]]]],[189,[[10,[182]]]],[[189,168],10],[[189,168],[[10,[[176,[178]]]]]],[[189,168],[[10,[[176,[179]]]]]],[[189,168],[[10,[[176,[13]]]]]],[[189,168],[[10,[[176,[183]]]]]],[[189,168],[[10,[[176,[98]]]]]],[[189,168],[[10,[[176,[15]]]]]],[[189,168],[[10,[[176,[169]]]]]],[[189,168],[[10,[[176,[9]]]]]],[[189,168],[[10,[[176,[180]]]]]],[[189,168],[[10,[[176,[168]]]]]],[[189,168],[[10,[[176,[177]]]]]],[[189,168],[[10,[[176,[184]]]]]],[[189,168],[[10,[[181,[9]]]]]],[[189,168],[[10,[[181,[184]]]]]],[[189,168],[[10,[[181,[177]]]]]],[[189,168],[[10,[[181,[169]]]]]],[[189,168],[[10,[[181,[13]]]]]],[[189,168],[[10,[[181,[168]]]]]],[[189,168],[[10,[[181,[98]]]]]],[[189,168],[[10,[[181,[183]]]]]],[[189,168],[[10,[[181,[179]]]]]],[[189,168],[[10,[[181,[180]]]]]],[[189,168],[[10,[[181,[178]]]]]],[[189,168],[[10,[[181,[15]]]]]],0,[[]],[[[176,[184]],[176,[184]]],[[176,[184]]]],[[[176,[168]],[176,[168]]],[[176,[168]]]],[[[176,[9]],[176,[9]]],[[176,[9]]]],[[[176,[183]],[176,[183]]],[[176,[183]]]],[[[176,[15]],[176,[15]]],[[176,[15]]]],[[[176,[169]],[176,[169]]],[[176,[169]]]],[[[181,[169]],[181,[169]]],[[181,[169]]]],[[[181,[9]],[181,[9]]],[[181,[9]]]],[[[181,[15]],[181,[15]]],[[181,[15]]]],[[[181,[184]],[181,[184]]],[[181,[184]]]],[[[181,[183]],[181,[183]]],[[181,[183]]]],[[[181,[168]],[181,[168]]],[[181,[168]]]],[[]],[[]],[[[160,[168]]],168],[[[160,[15]]],15],[[[160,[169]]],169],[167],[[[102,[140]]]],[[[176,[140]]]],[[[181,[140]]]],[[]],[[174,174],174],[[175,175],175],[[],102],0,[[182,9]],[167],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[167,167],[[],8],[174,8],[175,8],[[],8],[174,8],[175,8],[[],8],[[],8],[[],8],[[],8],[[],8],[174,8],[175,8],[[],8],[[[176,[178]]],8],[[[176,[177]]],8],[[[176,[13]]],8],[[[176,[98]]],8],[[[176,[180]]],8],[[[176,[179]]],8],[[[181,[177]]],8],[[[181,[180]]],8],[[[181,[178]]],8],[[[181,[179]]],8],[[[181,[13]]],8],[[[181,[98]]],8],[[],8],[174,8],[175,8],[[],8],[[],8],[[],8],[[[176,[13]]],8],[[[176,[178]]],8],[[[176,[180]]],8],[[[176,[98]]],8],[[[176,[179]]],8],[[[176,[177]]],8],[[[181,[180]]],8],[[[181,[177]]],8],[[[181,[13]]],8],[[[181,[178]]],8],[[[181,[98]]],8],[[[181,[179]]],8],[[],8],[174,8],[175,8],[[],8],[174,8],[175,8],[[],8],[[],8],[173,8],[182,8],[[]],[[]],[[]],[[[176,[184]]],168],[[[176,[169]]],168],[[[176,[15]]],168],[[[176,[179]]],168],[[[176,[98]]],168],[[[176,[178]]],168],[[[176,[183]]],168],[[[176,[13]]],168],[[[176,[180]]],168],[[[176,[168]]],168],[[[176,[177]]],168],[[[176,[9]]],168],[[[181,[168]]],168],[[[181,[9]]],168],[[[181,[169]]],168],[[[181,[98]]],168],[[[181,[15]]],168],[[[181,[183]]],168],[[[181,[179]]],168],[[[181,[13]]],168],[[[181,[180]]],168],[[[181,[177]]],168],[[[181,[184]]],168],[[[181,[178]]],168],[[]],[174,174],[175,175],[[]],[174,174],[175,175],[[]],[[174,174],174],[[175,175],175],[[]],[174,174],[175,175],[[]],[174,174],[175,175],[[]],[[174,174],174],[[175,175],175],[[]],[[],173],[[],174],[[],175],[[],176],[[],181],[[]],[[174,174],174],[[175,175],175],[[]],[[],173],[[],174],[[],175],[[],176],[[],181],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[[]],[[]],0,[[167,167]],[[167,167]],[[167,167]],[[167,167]],[102],[[102,102]],[[102,102]],[[102,102]],[102],[[102,102]],[102],[102],[[173,109]],[[173,173]],[[174,174]],[[175,175]],[[[176,[179]],[176,[179]]]],[[[176,[184]],[176,[184]]]],[[[176,[177]],[176,[177]]]],[[[176,[9]],[176,[9]]]],[[[176,[180]],[176,[180]]]],[[[176,[168]],[176,[168]]]],[[[176,[15]],[176,[15]]]],[[[176,[13]],[176,[13]]]],[[[176,[183]],[176,[183]]]],[[[176,[169]],[176,[169]]]],[[[176,[98]],[176,[98]]]],[[[176,[178]],[176,[178]]]],[[[181,[178]],[181,[178]]]],[[[181,[177]],[181,[177]]]],[[[181,[9]],[181,[9]]]],[[[181,[179]],[181,[179]]]],[[[181,[169]],[181,[169]]]],[[[181,[183]],[181,[183]]]],[[[181,[168]],[181,[168]]]],[[[181,[180]],[181,[180]]]],[[[181,[13]],[181,[13]]]],[[[181,[15]],[181,[15]]]],[[[181,[98]],[181,[98]]]],[[[181,[184]],[181,[184]]]],[[182,109]],[[182,182]],[[]],[[174,174,174],174],[[175,175,175],175],[[167,167]],[[167,167]],[102],[102],[[102,102]],[[102,102]],[[[176,[168]],[176,[168]]]],[[[176,[98]],[176,[98]]]],[[[176,[9]],[176,[9]]]],[[[176,[177]],[176,[177]]]],[[[176,[15]],[176,[15]]]],[[[176,[179]],[176,[179]]]],[[[176,[184]],[176,[184]]]],[[[176,[183]],[176,[183]]]],[[[176,[178]],[176,[178]]]],[[[176,[169]],[176,[169]]]],[[[176,[180]],[176,[180]]]],[[[176,[13]],[176,[13]]]],[[[181,[179]],[181,[179]]]],[[[181,[168]],[181,[168]]]],[[[181,[178]],[181,[178]]]],[[[181,[180]],[181,[180]]]],[[[181,[183]],[181,[183]]]],[[[181,[9]],[181,[9]]]],[[[181,[177]],[181,[177]]]],[[[181,[13]],[181,[13]]]],[[[181,[169]],[181,[169]]]],[[[181,[98]],[181,[98]]]],[[[181,[15]],[181,[15]]]],[[[181,[184]],[181,[184]]]],[167],[167],[102],[102],[173],[174],[175],[[[176,[180]]]],[[[176,[177]]]],[[[176,[179]]]],[[[176,[98]]]],[[[176,[13]]]],[[[176,[178]]]],[[[181,[177]]]],[[[181,[180]]]],[[[181,[98]]]],[[[181,[179]]]],[[[181,[178]]]],[[[181,[13]]]],[182],[[],167],[15,[[160,[15]]]],[168,[[160,[168]]]],[169,[[160,[169]]]],[[],102],[[],167],[102],[176],[181],[[]],[[],167],[[],102],[[],174],[[],175],[[],176],[[],181],[[[102,[150]],102],[[1,[81]]]],[[173,173],[[1,[81]]]],[[174,174],[[1,[81]]]],[[175,175],[[1,[81]]]],[[[176,[150]],176],[[1,[81]]]],[[[181,[150]],181],[[1,[81]]]],[[182,182],[[1,[81]]]],[[109,109],[[102,[109]]]],[168],[[167,9],167],[[[176,[183]],168],[[176,[183]]]],[[[176,[178]],168],[[176,[178]]]],[[[176,[9]],168],[[176,[9]]]],[[[176,[13]],168],[[176,[13]]]],[[[176,[184]],168],[[176,[184]]]],[[[176,[98]],168],[[176,[98]]]],[[[176,[15]],168],[[176,[15]]]],[[[176,[177]],168],[[176,[177]]]],[[[176,[169]],168],[[176,[169]]]],[[[176,[168]],168],[[176,[168]]]],[[[176,[179]],168],[[176,[179]]]],[[[176,[180]],168],[[176,[180]]]],[[[181,[9]],168],[[181,[9]]]],[[[181,[98]],168],[[181,[98]]]],[[[181,[183]],168],[[181,[183]]]],[[[181,[169]],168],[[181,[169]]]],[[[181,[13]],168],[[181,[13]]]],[[[181,[177]],168],[[181,[177]]]],[[[181,[15]],168],[[181,[15]]]],[[[181,[168]],168],[[181,[168]]]],[[[181,[179]],168],[[181,[179]]]],[[[181,[180]],168],[[181,[180]]]],[[[181,[178]],168],[[181,[178]]]],[[[181,[184]],168],[[181,[184]]]],[[]],[[174,174],174],[[175,175],175],[178],[[174,178],174],[[175,178],175],[109,[[102,[109]]]],[26,167],[26,167],[26,102],[26,102],0,[[]],[174,174],[175,175],[[[160,[169]],169],169],[[[160,[15]],15],15],[[[160,[168]],168],168],[[174,174]],[[175,175]],[[176,176]],[[[181,[13]],[181,[13]]]],[[[181,[179]],[181,[179]]]],[[[181,[180]],[181,[180]]]],[[[181,[169]],[181,[169]]]],[[[181,[177]],[181,[177]]]],[[[181,[15]],[181,[15]]]],[[[181,[178]],[181,[178]]]],[[[181,[9]],[181,[9]]]],[[[181,[183]],[181,[183]]]],[[[181,[184]],[181,[184]]]],[[[181,[168]],[181,[168]]]],[[[181,[98]],[181,[98]]]],[[176,176]],[[[181,[168]],[181,[168]]]],[[[181,[15]],[181,[15]]]],[[[181,[179]],[181,[179]]]],[[[181,[178]],[181,[178]]]],[[[181,[184]],[181,[184]]]],[[[181,[9]],[181,[9]]]],[[[181,[177]],[181,[177]]]],[[[181,[183]],[181,[183]]]],[[[181,[98]],[181,[98]]]],[[[181,[169]],[181,[169]]]],[[[181,[180]],[181,[180]]]],[[[181,[13]],[181,[13]]]],[[]],[[]],[[174,174],174],[[175,175],175],[[[176,[168]],[176,[168]]],[[176,[168]]]],[[[176,[178]],[176,[178]]],[[176,[178]]]],[[[176,[169]],[176,[169]]],[[176,[169]]]],[[[176,[9]],[176,[9]]],[[176,[9]]]],[[[176,[13]],[176,[13]]],[[176,[13]]]],[[[176,[177]],[176,[177]]],[[176,[177]]]],[[[176,[183]],[176,[183]]],[[176,[183]]]],[[[176,[179]],[176,[179]]],[[176,[179]]]],[[[176,[98]],[176,[98]]],[[176,[98]]]],[[[176,[180]],[176,[180]]],[[176,[180]]]],[[[176,[15]],[176,[15]]],[[176,[15]]]],[[[176,[184]],[176,[184]]],[[176,[184]]]],[[[181,[168]],[181,[168]]],[[181,[168]]]],[[[181,[179]],[181,[179]]],[[181,[179]]]],[[[181,[178]],[181,[178]]],[[181,[178]]]],[[[181,[9]],[181,[9]]],[[181,[9]]]],[[[181,[15]],[181,[15]]],[[181,[15]]]],[[[181,[184]],[181,[184]]],[[181,[184]]]],[[[181,[183]],[181,[183]]],[[181,[183]]]],[[[181,[98]],[181,[98]]],[[181,[98]]]],[[[181,[180]],[181,[180]]],[[181,[180]]]],[[[181,[13]],[181,[13]]],[[181,[13]]]],[[[181,[169]],[181,[169]]],[[181,[169]]]],[[[181,[177]],[181,[177]]],[[181,[177]]]],[[]],[[[176,[9]]],[[176,[9]]]],[[[176,[178]]],[[176,[178]]]],[[[176,[183]]],[[176,[183]]]],[[[176,[98]]],[[176,[98]]]],[[[176,[13]]],[[176,[13]]]],[[[176,[184]]],[[176,[184]]]],[[[176,[169]]],[[176,[169]]]],[[[176,[168]]],[[176,[168]]]],[[[176,[177]]],[[176,[177]]]],[[[176,[15]]],[[176,[15]]]],[[[176,[179]]],[[176,[179]]]],[[[176,[180]]],[[176,[180]]]],[[[181,[169]]],[[181,[169]]]],[[[181,[179]]],[[181,[179]]]],[[[181,[9]]],[[181,[9]]]],[[[181,[177]]],[[181,[177]]]],[[[181,[184]]],[[181,[184]]]],[[[181,[13]]],[[181,[13]]]],[[[181,[15]]],[[181,[15]]]],[[[181,[183]]],[[181,[183]]]],[[[181,[180]]],[[181,[180]]]],[[[181,[98]]],[[181,[98]]]],[[[181,[178]]],[[181,[178]]]],[[[181,[168]]],[[181,[168]]]],[[]],[[[176,[183]],168],[[176,[183]]]],[[[176,[168]],168],[[176,[168]]]],[[[176,[184]],168],[[176,[184]]]],[[[176,[169]],168],[[176,[169]]]],[[[176,[13]],168],[[176,[13]]]],[[[176,[98]],168],[[176,[98]]]],[[[176,[9]],168],[[176,[9]]]],[[[176,[177]],168],[[176,[177]]]],[[[176,[178]],168],[[176,[178]]]],[[[176,[180]],168],[[176,[180]]]],[[[176,[179]],168],[[176,[179]]]],[[[176,[15]],168],[[176,[15]]]],[[[181,[9]],168],[[181,[9]]]],[[[181,[15]],168],[[181,[15]]]],[[[181,[183]],168],[[181,[183]]]],[[[181,[184]],168],[[181,[184]]]],[[[181,[178]],168],[[181,[178]]]],[[[181,[169]],168],[[181,[169]]]],[[[181,[98]],168],[[181,[98]]]],[[[181,[179]],168],[[181,[179]]]],[[[181,[13]],168],[[181,[13]]]],[[[181,[177]],168],[[181,[177]]]],[[[181,[168]],168],[[181,[168]]]],[[[181,[180]],168],[[181,[180]]]],[[]],[[[176,[179]],168],[[176,[179]]]],[[[176,[169]],168],[[176,[169]]]],[[[176,[98]],168],[[176,[98]]]],[[[176,[13]],168],[[176,[13]]]],[[[176,[180]],168],[[176,[180]]]],[[[176,[168]],168],[[176,[168]]]],[[[176,[177]],168],[[176,[177]]]],[[[176,[15]],168],[[176,[15]]]],[[[176,[178]],168],[[176,[178]]]],[[[176,[9]],168],[[176,[9]]]],[[[176,[183]],168],[[176,[183]]]],[[[176,[184]],168],[[176,[184]]]],[[[181,[178]],168],[[181,[178]]]],[[[181,[15]],168],[[181,[15]]]],[[[181,[179]],168],[[181,[179]]]],[[[181,[180]],168],[[181,[180]]]],[[[181,[98]],168],[[181,[98]]]],[[[181,[13]],168],[[181,[13]]]],[[[181,[168]],168],[[181,[168]]]],[[[181,[177]],168],[[181,[177]]]],[[[181,[184]],168],[[181,[184]]]],[[[181,[169]],168],[[181,[169]]]],[[[181,[9]],168],[[181,[9]]]],[[[181,[183]],168],[[181,[183]]]],[[]],[174,174],[175,175],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[15],[168],[[]],[[]],[[]],[[]],[[[176,[180]],168]],[[[176,[169]],168]],[[[176,[177]],168]],[[[176,[183]],168]],[[[176,[13]],168]],[[[176,[9]],168]],[[[176,[184]],168]],[[[176,[178]],168]],[[[176,[168]],168]],[[[176,[179]],168]],[[[176,[98]],168]],[[[176,[15]],168]],[[[181,[168]],168]],[[[181,[184]],168]],[[[181,[9]],168]],[[[181,[15]],168]],[[[181,[178]],168]],[[[181,[13]],168]],[[[181,[169]],168]],[[[181,[98]],168]],[[[181,[179]],168]],[[[181,[180]],168]],[[[181,[177]],168]],[[[181,[183]],168]],[[[176,[183]],168]],[[[176,[180]],168]],[[[176,[168]],168]],[[[176,[9]],168]],[[[176,[179]],168]],[[[176,[178]],168]],[[[176,[184]],168]],[[[176,[177]],168]],[[[176,[98]],168]],[[[176,[169]],168]],[[[176,[15]],168]],[[[176,[13]],168]],[[[181,[184]],168]],[[[181,[98]],168]],[[[181,[178]],168]],[[[181,[180]],168]],[[[181,[177]],168]],[[[181,[179]],168]],[[[181,[168]],168]],[[[181,[15]],168]],[[[181,[169]],168]],[[[181,[9]],168]],[[[181,[13]],168]],[[[181,[183]],168]],[[[176,[98]],168]],[[[176,[178]],168]],[[[176,[184]],168]],[[[176,[9]],168]],[[[176,[13]],168]],[[[176,[15]],168]],[[[176,[168]],168]],[[[176,[169]],168]],[[[176,[183]],168]],[[[176,[180]],168]],[[[176,[179]],168]],[[[176,[177]],168]],[[[181,[183]],168]],[[[181,[98]],168]],[[[181,[177]],168]],[[[181,[184]],168]],[[[181,[169]],168]],[[[181,[15]],168]],[[[181,[180]],168]],[[[181,[179]],168]],[[[181,[178]],168]],[[[181,[168]],168]],[[[181,[13]],168]],[[[181,[9]],168]],[[[176,[15]],168]],[[[176,[177]],168]],[[[176,[183]],168]],[[[176,[180]],168]],[[[176,[184]],168]],[[[176,[98]],168]],[[[176,[169]],168]],[[[176,[13]],168]],[[[176,[168]],168]],[[[176,[178]],168]],[[[176,[179]],168]],[[[176,[9]],168]],[[[181,[98]],168]],[[[181,[9]],168]],[[[181,[15]],168]],[[[181,[13]],168]],[[[181,[178]],168]],[[[181,[183]],168]],[[[181,[169]],168]],[[[181,[184]],168]],[[[181,[177]],168]],[[[181,[168]],168]],[[[181,[179]],168]],[[[181,[180]],168]],[[]],[[[176,[15]]]],[[[176,[168]]]],[[[176,[9]]]],[[[176,[169]]]],[[[176,[184]]]],[[[176,[183]]]],[[[181,[183]]]],[[[181,[15]]]],[[[181,[184]]]],[[[181,[9]]]],[[[181,[169]]]],[[[181,[168]]]],[[]],[[]],[174,174],[175,175],[[[176,[179]]],[[176,[179]]]],[[[176,[180]]],[[176,[180]]]],[[[176,[98]]],[[176,[98]]]],[[[176,[178]]],[[176,[178]]]],[[[176,[177]]],[[176,[177]]]],[[[176,[13]]],[[176,[13]]]],[[[181,[179]]],[[181,[179]]]],[[[181,[98]]],[[181,[98]]]],[[[181,[13]]],[[181,[13]]]],[[[181,[180]]],[[181,[180]]]],[[[181,[177]]],[[181,[177]]]],[[[181,[178]]],[[181,[178]]]],[[]],[174,174],[175,175],[[]],[174],[175],[[]],[174,174],[175,175],[[]],[167,[[1,[167]]]],[173,173],[174,174],[175,175],[182,182],[167,[[1,[167]]]],[[]],[[],1],[[]],[[],1],[[],1],[[167,167]],[[167,167]],[[167,167]],[[167,167]],[102],[102],[102],[[102,102]],[[102,102]],[102],[[102,102]],[[102,102]],[[173,173]],[[174,174]],[[175,175]],[[[176,[178]],[176,[178]]]],[[[176,[179]],[176,[179]]]],[[[176,[177]],[176,[177]]]],[[[176,[9]],[176,[9]]]],[[[176,[98]],[176,[98]]]],[[[176,[183]],[176,[183]]]],[[[176,[180]],[176,[180]]]],[[[176,[169]],[176,[169]]]],[[[176,[184]],[176,[184]]]],[[[176,[13]],[176,[13]]]],[[[176,[168]],[176,[168]]]],[[[176,[15]],[176,[15]]]],[[[181,[178]],[181,[178]]]],[[[181,[168]],[181,[168]]]],[[[181,[177]],[181,[177]]]],[[[181,[98]],[181,[98]]]],[[[181,[183]],[181,[183]]]],[[[181,[180]],[181,[180]]]],[[[181,[9]],[181,[9]]]],[[[181,[184]],[181,[184]]]],[[[181,[169]],[181,[169]]]],[[[181,[13]],[181,[13]]]],[[[181,[179]],[181,[179]]]],[[[181,[15]],[181,[15]]]],[[182,182]],[[167,167]],[[167,167]],[[102,102]],[102],[102],[[102,102]],[[[176,[183]],[176,[183]]]],[[[176,[180]],[176,[180]]]],[[[176,[98]],[176,[98]]]],[[[176,[9]],[176,[9]]]],[[[176,[13]],[176,[13]]]],[[[176,[15]],[176,[15]]]],[[[176,[178]],[176,[178]]]],[[[176,[168]],[176,[168]]]],[[[176,[177]],[176,[177]]]],[[[176,[179]],[176,[179]]]],[[[176,[169]],[176,[169]]]],[[[176,[184]],[176,[184]]]],[[[181,[179]],[181,[179]]]],[[[181,[178]],[181,[178]]]],[[[181,[13]],[181,[13]]]],[[[181,[168]],[181,[168]]]],[[[181,[9]],[181,[9]]]],[[[181,[98]],[181,[98]]]],[[[181,[177]],[181,[177]]]],[[[181,[15]],[181,[15]]]],[[[181,[183]],[181,[183]]]],[[[181,[184]],[181,[184]]]],[[[181,[180]],[181,[180]]]],[[[181,[169]],[181,[169]]]],[26,167],[26,167],[26,102],[26,102],[[]],[174,174],[175,175],[[]],[174,174],[175,175],[[],15],[174,15],[175,15],[[]],[174,174],[175,175],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[174,174],[175,175],[[],96],[[],96],[[],[[1,[96]]]],[[],[[1,[96]]]],[[],190],[[],190],[[],[[1,[190]]]],[[],[[1,[190]]]],[[],151],[[],151],[[],151],[[],151],[[],151],[[],151],[[],151],[[],81],[[174,174],81],[[175,175],81],[[]],[[[176,[184]]],168],[[[176,[180]]],168],[[[176,[98]]],168],[[[176,[9]]],168],[[[176,[179]]],168],[[[176,[169]]],168],[[[176,[177]]],168],[[[176,[13]]],168],[[[176,[168]]],168],[[[176,[183]]],168],[[[176,[15]]],168],[[[176,[178]]],168],[[[181,[13]]],168],[[[181,[184]]],168],[[[181,[177]]],168],[[[181,[15]]],168],[[[181,[98]]],168],[[[181,[178]]],168],[[[181,[169]]],168],[[[181,[179]]],168],[[[181,[183]]],168],[[[181,[9]]],168],[[[181,[180]]],168],[[[181,[168]]],168],[102,102],[[]],[174,174],[175,175],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[102,[109]]],[[102,[109]]]],[[]],[[[176,[177]]]],[[[176,[178]]]],[[[176,[13]]]],[[[176,[180]]]],[[[176,[179]]]],[[[176,[98]]]],[[[181,[177]]]],[[[181,[13]]]],[[[181,[180]]]],[[[181,[178]]]],[[[181,[98]]]],[[[181,[179]]]],0,0,[[]],[[],167],[[],102],[[],174],[[],175],[[],176],[[],181],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[183],[184],[9],[169],[98],[15],[168],[[]],[179],[180],[178],[177],[13],[13],[15],[179],[168],[[]],[98],[178],[9],[169],[168],[[]],[179],[13],[178],[9],[169],[15],[98],[169],[9],[178],[13],[179],[98],[[]],[168],[15],[9],[168],[13],[179],[178],[15],[169],[98],[[]],[9],[13],[179],[98],[169],[[]],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],183],[[],179],[[],184],[[],13],[[],168],[[],98],[[],15],[[],177],[[],169],[[],178],[[],9],[[],180],[[],168],[[]],[[],15],[[],169],[[],9],[[],178],[[],13],[[],179],[[],98],[[],168],[[],15],[[],169],[[],9],[[],178],[[],13],[[],179],[[],98],[[]],[[],179],[[],168],[[],15],[[],169],[[],9],[[],178],[[],13],[[]],[[],98],[[],169],[[]],[[],168],[[],15],[[],13],[[],9],[[],98],[[],178],[[],179],[[]],[[],98],[[],179],[[],13],[[],15],[[],9],[[],169],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],168],[[],178],[[],179],[[],184],[[],9],[[],180],[[],15],[[],98],[[],13],[[],169],[[],177],[[],183],[[],9],[[],178],[[],13],[[],179],[[],168],[[],98],[[],169],[[],15],[[],98],[[],179],[[],13],[[],168],[[],178],[[],15],[[],9],[[],169],[[],15],[[],13],[[],168],[[],98],[[],179],[[],169],[[],9],[[],178],[[],178],[[],168],[[],13],[[],15],[[],169],[[],98],[[],179],[[],9],[[],169],[[],15],[[],9],[[],13],[[],179],[[],98],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[168],[15],[168],[15],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],168],[[],168],[[],168],[[],168],[[],168],[[]],[[]],[[]],[[]],[[],191],[[],191],[[],191],[[],191],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[[],168],[15,168],[15,168],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],192],[[],193],[194,194],[195,195],[196,196],[[]],[[]],[[]],[[],[[10,[197]]]],[[194,6],7],[[195,6],7],[[196,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[194,198],0,[194],[189,194],[[],[[10,[9,197]]]],[199,151],[200,[[10,[197]]]],[200,[[10,[197]]]],[[],[[10,[197]]]],[16,[[10,[9,197]]]],[151,[[10,[9,197]]]],[[],[[10,[9,197]]]],0,[194],[[],1],[[],1],[[194,9],16],[15,201],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],[[10,[9,197]]]],[[],[[10,[197]]]],[[],[[10,[197]]]],[202,[[10,[197]]]],[[],[[10,[9,197]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[204,[[0,[3,203]]]]],[[204,[[0,[3,203]]]]]],[205,205],[206,206],[[[207,[3]]],[[207,[3]]]],[208,208],[[]],[[]],[[]],[[]],[[]],[[205,15,15,9],15],[[206,9],[[16,[15]]]],[[205,9,9],15],[[206,9,9],[[16,[15]]]],[[[204,[[0,[5,203]]]],6],7],[[205,6],7],[[206,6],7],[[[207,[5]],6],7],[[208,6],7],[[]],[[]],[[]],[[]],[[]],[205,15],[[207,9]],[[208,9],9],[[]],[[]],[[]],[[]],[[]],[[[207,[136]]],[[16,[9]]]],[15,15],[[15,15],15],[[15,15],15],[[[16,[203]]],[[204,[203]]]],[15,205],[[],206],[[[16,[136]]],[[207,[136]]]],[[],208],[9,206],[203,[[16,[9]]]],[[[204,[203]]],[[16,[9]]]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],209],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[210,[3,3]]],[[210,[3,3]]]],[211,211],[[[212,[3]]],[[212,[3]]]],[[[213,[3,3]]],[[213,[3,3]]]],[214,214],[215,215],[216,216],[217,217],[218,218],[[[219,[3,3]]],[[219,[3,3]]]],[[[220,[3,3]]],[[220,[3,3]]]],[[[221,[3,3]]],[[221,[3,3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[209,209],81],[[210,210],81],[[[212,[136]],212],81],[[[213,[136,136]],213],81],[[],222],[[],[[210,[110,110]]]],[[],211],0,[[209,209],8],[[210,210],8],[[[212,[137]],212],8],[[[213,[137,137]],213],8],[[222,6],7],[[[210,[5,5]],6],7],[[211,6],7],[[[224,[5,[0,[5,[223,[5]]]]]],6],7],[[[212,[5]],6],7],[[[213,[5,5]],6],7],[[214,6],7],[[215,6],7],[[216,6],7],[[217,6],7],[[218,6],7],[[[219,[5,5]],6],7],[[[220,[5,5]],6],7],[[[221,[5,5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[168,1],[168,1],[168,1],[168,1],[[211,223]],[[211,109],8],[[211,223],[[224,[223]]]],[[]],[[]],[[]],[[[212,[140]]]],[[[213,[140,140]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[222,109,109],8],[222,8],0,0,[8,[[10,[197]]]],[[],191],0,[222,222],[[]],[[]],[[]],[[],1],[214,1],[215,1],[216,1],[218,1],[219,1],[[[221,[189]]],1],[[[221,[225]]],1],[[],222],[15,211],[[],213],[9,219],[[],221],[198,1],[[[224,[223]]],1],0,[[209,209],[[1,[81]]]],[[210,210],[[1,[81]]]],[[[212,[150]],212],[[1,[81]]]],[[[213,[150,150]],213],[[1,[81]]]],[211],[[211,15],15],[[212,211]],[[213,211]],0,[211,15],[211,224],[211,224],[211,109],[[211,15,9],[[16,[15]]]],[199,151],[199,151],[[],151],[[],151],[[],151],[[],1],[[],1],[[],1],0,0,[[]],[[]],[[222,109],222],[[222,109],222],[[222,109],222],[[222,9],222],[211],0,0,[[],211],0,0,[[],[[1,[168]]]],[[],[[1,[168]]]],[[],[[1,[168]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[1,[168]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[226,226],[227,227],[228,228],[[[230,[[0,[3,229]]]]],[[230,[[0,[3,229]]]]]],[[[231,[[0,[3,229]]]]],[[231,[[0,[3,229]]]]]],[[[232,[[0,[3,93]],[0,[3,39]]]]],[[232,[[0,[3,93]],[0,[3,39]]]]]],[152,152],[233,233],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],234],[9,15],[9,15],[[233,9,9,148]],0,0,0,[[152,152],8],[[226,6],7],[[227,6],7],[[228,6],7],[[[230,[[0,[5,229]]]],6],7],[[[231,[[0,[5,229]]]],6],7],[[[232,[[0,[5,93]],[0,[5,39]]]],6],7],[[152,6],7],[[234,6],7],[[233,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[228,[[230,[229]]]],[152],[[234,148],15],[[234,148,9,9],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[230,[229]],9,9],9],[[235,9,9],9],[226,9],[227,9],[228,9],0,[[9,148],226],[148,227],[[9,148],228],[[9,148],235],[148,232],[[],234],[9,233],[[]],0,0,[[227,9,9,27]],[[227,9,27]],[[227,9,9]],[[228,9,9,27]],[[235,9,9,8,27]],[[235,9,9,8,27,27]],[[[236,[[223,[9]]]],211],148],[[[237,[[223,[9]]]],211],148],[[[238,[[223,[9]]]],211],148],[[[239,[[223,[9]]]],211],148],0,[[[16,[15]]]],[[[16,[15]]]],[[227,9,27]],[[227,9,27]],[[227,9,9]],[[],234],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[235,9,9,8,27]],0,0,0,[[],9],[[],9],[15,234],0,0,0],"p":[[4,"Option"],[3,"RangeChminChmaxAdd"],[8,"Clone"],[3,"RangeSumRangeChminChmaxAdd"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"ConvexHullTrick"],[15,"i64"],[3,"XorBasis"],[15,"u64"],[3,"Vec"],[3,"RhoPath"],[8,"MIntBase"],[3,"IndependentSubSet"],[3,"BitDp"],[3,"Subsets"],[3,"Combinations"],[3,"PartisanGameAnalyzer"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"Iterator"],[8,"FnMut"],[3,"BabyStepGiantStep"],[3,"SqrtDecompositionBuckets"],[8,"IntoIterator"],[3,"PartisanGamer"],[3,"SlideMinimum"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"LexicographicalSubsequence"],[3,"LongestIncreasingSubsequence"],[8,"Fn"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"FunctionalAutomaton"],[3,"MappingAutomaton"],[3,"AlphabetMappingAutomaton"],[3,"LexicographicalAutomaton"],[3,"RevLexicographicalAutomaton"],[3,"MonoidalAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BitVector"],[3,"WaveletMatrix"],[3,"Accumulate"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"SlopeTrick"],[3,"MergingUnionFind"],[3,"HashMap"],[3,"WeightedUnionFind"],[3,"UnionFind"],[3,"NonNull"],[3,"MemoryPool"],[3,"SegmentTree"],[3,"DequeAggregation"],[3,"BitSet"],[3,"Trie"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"CompressedSegmentTree"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"Automatondp"],[3,"VecCompress"],[3,"HashCompress"],[3,"LineSet"],[4,"Ordering"],[3,"SplaySequence"],[3,"SplayMap"],[3,"Drain"],[3,"Ref"],[3,"RefMut"],[8,"Group"],[3,"Iter"],[3,"Iter"],[3,"Keys"],[3,"IterMut"],[3,"Keys"],[8,"Monoid"],[3,"Static2DTree"],[8,"RankSelectDictionaries"],[3,"Range"],[3,"Range"],[15,"isize"],[3,"Values"],[3,"Values"],[3,"ValuesMut"],[3,"Complex"],[4,"Ccw"],[3,"Line"],[6,"Point"],[3,"LineSegment"],[3,"Approx"],[3,"Circle"],[15,"f64"],[8,"Default"],[3,"TwoSatisfiability"],[3,"ProjectSelectionProblem"],[3,"SparseGraphBuilder"],[3,"AdjacencyListGraph"],[3,"BipartiteMatching"],[3,"DinicBuilder"],[3,"PrimalDualBuilder"],[3,"GridGraph"],[3,"UsizeGraph"],[3,"ClosureGraph"],[3,"SparseGraph"],[3,"Adjacency"],[3,"Iter"],[3,"VIndexWithValue"],[3,"VIndexWithEIndexValue"],[6,"BidirectionalSparseGraph"],[3,"Dinic"],[3,"PrimalDual"],[3,"EdgeListGraph"],[3,"VIndex"],[3,"VIndexWithEIndex"],[4,"DirectedEdge"],[4,"UndirectedEdge"],[4,"BidirectionalEdge"],[3,"StronglyConnectedComponent"],[8,"Ord"],[8,"PartialEq"],[15,"never"],[6,"DirectedSparseGraph"],[8,"Hash"],[8,"IterScan"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraphScanner"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"AdjacencyViewIterFromEindex"],[3,"AdjacencyViewIterFromValue"],[6,"UndirectedSparseGraph"],[3,"LowLink"],[8,"PartialOrd"],[3,"String"],[4,"TreeCenter"],[3,"FormalPowerSeries"],[3,"Matrix"],[3,"Polynomial"],[8,"Zero"],[8,"Add"],[8,"Mul"],[8,"MulAssign"],[3,"BarrettReduction"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"PowPrec"],[3,"EulerPhiTable"],[3,"PrimeList"],[3,"PrimeTable"],[3,"MInt"],[15,"u32"],[15,"u128"],[3,"IterMut"],[8,"One"],[8,"Copy"],[3,"DoubleDouble"],[3,"Float32"],[3,"Float64"],[3,"Saturating"],[15,"i16"],[15,"i32"],[15,"i128"],[15,"i8"],[3,"Wrapping"],[3,"QuadDouble"],[15,"u8"],[15,"u16"],[4,"FpCategory"],[3,"ExtendedGcd"],[3,"Error"],[15,"f32"],[15,"str"],[3,"RangeInclusive"],[3,"LocalKey"],[3,"Bytes"],[3,"Chain"],[3,"Scanner"],[4,"Usize1"],[4,"Chars"],[3,"Error"],[3,"ScannerIter"],[8,"Read"],[3,"BorrowedCursor"],[3,"Take"],[3,"Arguments"],[8,"Eq"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"TotalOrd"],[3,"PartialIgnoredOrd"],[3,"Xorshift"],[3,"NotEmptySegment"],[3,"RandRange"],[3,"CharWithBase"],[3,"CharsWithBase"],[3,"ByteWithBase"],[4,"Bytes"],[3,"BytesWithBase"],[3,"Collect"],[3,"SizedCollect"],[3,"Splitted"],[3,"SimuratedAnnealing"],[8,"RandomSpec"],[3,"RandIter"],[15,"char"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[8,"LcaMonoidDispatch"],[3,"LowestCommonAncestor"],[3,"LcaMonoid"],[3,"ReRooting"],[3,"TreeRec"],[3,"TreeHasher"],[3,"HeavyLightDecomposition"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[8,"MonoidAction"],[8,"SemiRing"],[8,"Magma"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"AddMulOperation"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[4,"PermutationOperation"],[3,"FindMajorityOperation"],[8,"Field"],[8,"Invertible"],[8,"Unital"],[8,"Ring"],[8,"BitXorIdentity"],[8,"MoSolver"],[8,"SqrtDecomposition"],[8,"PartisanGame"],[3,"SubsetTransform"],[3,"SupersetTransform"],[8,"SliceBisectExt"],[8,"Bisect"],[8,"Trisect"],[8,"Automaton"],[8,"Allocator"],[8,"Compressor"],[8,"ToDigitSequence"],[8,"ApproxOrd"],[8,"Adjacencies"],[8,"AdjacenciesWithEindex"],[8,"AdjacenciesWithValue"],[8,"AdjacencyIndexWithValue"],[8,"AdjacencyView"],[8,"EIndexedGraph"],[8,"AdjacencyIndexWithEindex"],[8,"Edges"],[8,"EdgeMap"],[8,"ShortestPathSemiRing"],[8,"GraphBase"],[8,"AdjacencyIndex"],[8,"Vertices"],[8,"VertexMap"],[3,"StandardSp"],[3,"OptionSp"],[3,"PathFoldingSp"],[8,"ShortestPathExt"],[8,"SparseGraphConstruction"],[8,"EdgeSize"],[8,"EdgeView"],[8,"VertexSize"],[8,"VertexView"],[8,"ConvolveSteps"],[3,"Mersenne61"],[3,"Mersenne127"],[4,"ConvolveRealFft"],[3,"Convolve"],[8,"FormalPowerSeriesCoefficientSqrt"],[8,"Float"],[8,"IntBase"],[8,"Unsigned"],[8,"Signed"],[8,"DiscreteSteps"],[8,"BinaryRepr"],[8,"RangeBoundsExt"],[8,"MIntConvert"],[8,"Bounded"],[3,"Modulo2"],[4,"Modulo998244353"],[4,"Modulo1000000007"],[4,"Modulo1000000009"],[4,"DynModuloU32"],[4,"DynModuloU64"],[6,"DynMIntU32"],[6,"DynMIntU64"],[4,"Modulo998244353"],[4,"Modulo2113929217"],[4,"Modulo1811939329"],[4,"Modulo2013265921"],[8,"MontgomeryReduction32"],[8,"Write"],[8,"MarkedIterScan"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[8,"AsTotalOrd"],[8,"PartialOrdExt"],[8,"CharTools"],[8,"IterPrint"],[4,"LcaMonoidDefaultId"],[13,"One"],[13,"Two"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,5,2,5,2,2,2,5,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,5,2,5,2,2,2,5,5,2,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,2,2,5,0,0,0,0,2,2,5,5,2,2,5,2,2,2,2,5,5,2,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,2,2,2,2,2,5,2,5,2,5,2,2,5,5,2,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,2,2,2,5,2,5,2,2,5,2,5,2,5,0,0,5,5,0,0,0,2,5,2,5,2,5],"n":["datastructure","graph","math","sample","string","dynamic_sequence_range_affine_range_sum","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_chmin_chmax_add_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","MInt998244353","RangeSumRangeLinear","SplaySequence","dynamic_sequence_range_affine_range_sum","LineSet","line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","LazySegmentTree","RangeChminChmaxAdd","RangeSumRangeChminChmaxAdd","Saturating","range_chmin_chmax_add_range_sum","WaveletMatrix","range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","UnionFind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","log_of_formal_power_series","min_of_mod_of_linear","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","Convolve","ConvolveSteps","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","PrimeList","enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","factorize","prime_factors_flatten","MInt998244353","berlekamp_massey","find_linear_recurrence","Fps998244353","MInt998244353","inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","Fps998244353","MInt998244353","log_of_formal_power_series","binary_search","floor_sum_range_freq","min_of_mod_of_linear","Fps998244353","MInt998244353","multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","DynMIntU32","sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","floor_sum","sum_of_floor_of_linear","TwoSatisfiability","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","SuffixArray","suffixarray","Zarray","zalgorithm"],"q":["library_checker","","","","","library_checker::datastructure","","","","","","","","","","","","","library_checker::datastructure::dynamic_sequence_range_affine_range_sum","","","","library_checker::datastructure::line_add_get_min","","library_checker::datastructure::point_add_range_sum","","","","","library_checker::datastructure::point_set_range_composite","","","","","library_checker::datastructure::queue_operate_all_composite","","","","","library_checker::datastructure::range_affine_range_sum","","","","","","library_checker::datastructure::range_chmin_chmax_add_range_sum","","","","","library_checker::datastructure::range_kth_smallest","","library_checker::datastructure::staticrmq","","","","","library_checker::datastructure::unionfind","","library_checker::datastructure::vertex_add_path_sum","","","","","library_checker::datastructure::vertex_add_subtree_sum","","","","","library_checker::datastructure::vertex_set_path_composite","","","","","","","","library_checker::graph","","","","library_checker::graph::bipartitematching","","","","library_checker::graph::directedmst","","","library_checker::graph::lca","","","","","","library_checker::graph::scc","","","library_checker::math","","","","","","","","","","","","","","","","","","","library_checker::math::convolution_mod","","","","","library_checker::math::convolution_mod_1000000007","","","","","","library_checker::math::discrete_logarithm_mod","","library_checker::math::enumerate_primes","","library_checker::math::exp_of_formal_power_series","","","library_checker::math::factorize","","library_checker::math::find_linear_recurrence","","","library_checker::math::inv_of_formal_power_series","","","library_checker::math::kth_term_of_linearly_recurrent_sequence","","","","library_checker::math::log_of_formal_power_series","","","library_checker::math::min_of_mod_of_linear","","","library_checker::math::multipoint_evaluation","","","library_checker::math::polynomial_taylor_shift","","","","library_checker::math::pow_of_formal_power_series","","","library_checker::math::sharp_p_subset_sum","","","","","","library_checker::math::sqrt_mod","","library_checker::math::sqrt_of_formal_power_series","","","library_checker::math::sum_of_floor_of_linear","","library_checker::math::two_sat","","library_checker::sample","","library_checker::sample::aplusb","library_checker::sample::many_aplusb","library_checker::string","","","library_checker::string::number_of_substrings","","library_checker::string::suffixarray","","library_checker::string::zalgorithm",""],"d":["","","","","","","","","","","","","","","","","","","","","","✅  AC  3107ms","","✅  AC  498ms","","","","✅  AC  80ms","✅  AC  95ms","","","","","✅  AC  229ms","","","","","✅  AC  46ms","","","","","","✅  AC  802ms","","","","","✅  AC  1288ms","","✅  AC  343ms","","","","✅  AC  172ms","✅  AC  151ms","","✅  AC  16ms","","","","","✅  AC  564ms","","","","","✅  AC  150ms","","","","","","","","✅  AC  181ms","","","","","","","✅  AC  113ms","✅  AC  1150ms","","","✅  AC  100ms","","","","","✅  AC  535ms","✅  AC  551ms","","","✅  AC  167ms","","","","","","","","","","","","","","","","","","","","","","","","✅  AC  158ms","","","","","","✅  AC  309ms","","✅  AC  3ms","","✅  AC  1653ms","","","✅  AC  569ms","✅  AC  85ms","","","","✅  AC  130ms","","","✅  AC  135ms","","","","✅  AC  1573ms","","","✅  AC  247ms","","","❌  IE  0ms","","","✅  AC  563ms","","","","✅  AC  116ms","","","✅  AC  711ms","","","","","","✅  AC  480ms","","✅  AC  79ms","","","✅  AC  322ms","","❌  RE  37ms","","✅  AC  256ms","","","✅  AC  0ms","✅  AC  139ms","","","","","✅  AC  917ms","","✅  AC  593ms","","✅  AC  21ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"]],"a":{"verify":[21,23,27,28,33,38,44,49,51,55,56,58,63,68,76,83,84,87,92,93,96,120,126,128,130,133,134,138,141,145,148,151,154,158,161,167,169,172,174,176,179,180,185,187,189]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
