var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5],"n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","judge_grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","itp1_1_a","itp1_1_a"],"q":["aizu_online_judge","","","","aizu_online_judge::dpl","","","","","","","","","","","","aizu_online_judge::dpl::dpl_1_a","aizu_online_judge::dpl::dpl_1_b","aizu_online_judge::dpl::dpl_1_c","aizu_online_judge::dpl::dpl_1_d","aizu_online_judge::dpl::dpl_1_e","aizu_online_judge::dpl::dpl_1_f","aizu_online_judge::dpl::dpl_1_g","aizu_online_judge::dpl::dpl_1_h","aizu_online_judge::dpl::dpl_1_i","aizu_online_judge::dpl::dpl_3_a","aizu_online_judge::dpl::dpl_3_b","aizu_online_judge::dpl::dpl_3_c","aizu_online_judge::dsl","","","","","","","","","","","","","","","","","","aizu_online_judge::dsl::dsl_1_a","aizu_online_judge::dsl::dsl_1_b","aizu_online_judge::dsl::dsl_2_a","aizu_online_judge::dsl::dsl_2_b","aizu_online_judge::dsl::dsl_2_c","aizu_online_judge::dsl::dsl_2_d","aizu_online_judge::dsl::dsl_2_e","aizu_online_judge::dsl::dsl_2_f","aizu_online_judge::dsl::dsl_2_g","aizu_online_judge::dsl::dsl_2_h","aizu_online_judge::dsl::dsl_2_i","aizu_online_judge::dsl::dsl_3_a","aizu_online_judge::dsl::dsl_3_b","aizu_online_judge::dsl::dsl_3_c","aizu_online_judge::dsl::dsl_3_d","aizu_online_judge::dsl::dsl_4_a","aizu_online_judge::dsl::dsl_5_a","aizu_online_judge::dsl::dsl_5_b","aizu_online_judge::grl","","","","","","","","","","","","","","","","","","aizu_online_judge::grl::grl_1_a","aizu_online_judge::grl::grl_1_b","aizu_online_judge::grl::grl_1_c","aizu_online_judge::grl::grl_2_a","aizu_online_judge::grl::grl_2_b","aizu_online_judge::grl::grl_3_a","aizu_online_judge::grl::grl_3_b","aizu_online_judge::grl::grl_3_c","aizu_online_judge::grl::grl_4_a","aizu_online_judge::grl::grl_4_b","","aizu_online_judge::grl::grl_5_a","aizu_online_judge::grl::grl_5_b","aizu_online_judge::grl::grl_5_c","aizu_online_judge::grl::grl_5_d","aizu_online_judge::grl::grl_5_e","aizu_online_judge::grl::grl_6_a","aizu_online_judge::grl::grl_6_b","aizu_online_judge::grl::grl_7_a","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a"],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  2ms","✅  AC  2ms","✅  AC  2ms","✅  AC  7ms","✅  AC  8ms","✅  AC  1ms","✅  AC  8ms","✅  AC  61ms","✅  AC  4ms","✅  AC  25ms","✅  AC  19ms","✅  AC  6ms","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","✅  AC  9ms","✅  AC  25ms","✅  AC  17ms","✅  AC  15ms","✅  AC  451ms","✅  AC  38ms","✅  AC  49ms","✅  AC  44ms","✅  AC  57ms","✅  AC  70ms","✅  AC  51ms","✅  AC  4ms","✅  AC  3ms","✅  AC  195ms","✅  AC  190ms","✅  AC  78ms","✅  AC  4ms","✅  AC  9ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","✅  AC  66ms","✅  AC  6ms","✅  AC  8ms","✅  AC  27ms","✅  AC  0ms","✅  AC  4ms","✅  AC  3ms","✅  AC  8ms","✅  AC  0ms","✅  AC  3ms","","✅  AC  9ms","✅  AC  7ms","✅  AC  134ms","✅  AC  59ms","✅  AC  255ms","✅  AC  0ms","✅  AC  0ms","✅  AC  1ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]]],"p":[],"a":{"verify":[16,17,18,19,20,21,22,23,24,25,26,27,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,102]}},\
"competitive":{"doc":"github","t":[14,0,0,14,14,14,14,14,14,0,14,14,0,14,14,14,0,0,14,14,14,14,14,0,14,14,14,14,14,14,0,0,14,14,14,14,14,14,14,14,0,14,0,0,16,16,8,8,3,8,8,3,8,3,8,3,3,8,3,3,3,8,8,8,8,3,3,16,16,8,3,3,8,8,3,3,3,3,3,3,3,3,3,8,16,3,8,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,14,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,16,3,8,3,3,3,3,3,8,3,3,8,3,3,3,3,8,3,11,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,12,11,10,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,10,11,5,10,5,11,11,10,10,10,5,10,10,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,16,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,16,3,8,3,3,3,3,3,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,4,3,13,13,17,3,3,13,13,13,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,6,6,3,3,3,6,6,3,3,3,3,3,3,3,8,3,3,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,3,3,3,8,8,8,6,6,18,18,3,3,3,3,6,8,3,3,3,3,3,16,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,5,5,5,11,5,11,11,11,12,12,12,11,11,11,11,11,11,11,11,5,11,11,11,5,11,11,5,5,5,11,12,11,0,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,11,5,5,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,5,11,11,11,11,5,11,5,0,5,10,11,11,11,11,11,5,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,8,8,3,18,18,8,18,18,18,18,16,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,3,3,18,18,16,8,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,8,8,18,18,18,18,8,18,18,3,18,18,8,18,18,3,8,16,18,18,8,16,3,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,12,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,0,10,10,10,10,10,10,10,11,11,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,6,6,3,3,6,6,6,6,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,8,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,3,8,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,18,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,8,3,3,3,8,3,3,3,3,18,8,18,8,18,8,3,16,16,16,8,3,8,18,18,3,3,3,3,16,18,18,3,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,12,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,10,11,11,12,11,11,11,11,11,5,5,5,5,5,10,11,11,14,14,11,11,11,12,11,12,10,10,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,3,3,3,3,8,3,3,13,3,3,3,3,4,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,12,12,12,11,11,11,11,11,11],"n":["add_assign","algebra","algorithm","automaton","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","div_assign","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","iter_print","math","max","memorize","min","minmax","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","tools","tree","A","AT","AbelianGroup","AbelianMonoid","AdditiveOperation","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","FindMajorityOperation","FirstOperation","Group","Idempotent","IdempotentMonoid","Invertible","LastOperation","LinearOperation","M","MT","Magma","MaxOperation","MinOperation","Monoid","MonoidAction","MultiplicativeOperation","PermutationOperation","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","SemiGroup","T","Top2Operation","Unital","act","act","act","act","act","act","act","act_assign","act_assign","all_one","all_zero","aoperate","aoperate","aunit","aunit","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","moperate","moperate","munit","munit","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","0","Answer","BabyStepGiantStep","Bisect","BitDp","Combinations","ConvexHullTrick","DivisorTransform","IndependentSubSet","MoSolver","MultipleTransform","RhoPath","SliceBisectExt","SlideMinimum","SubsetTransform","Subsets","SupersetTransform","Trisect","XorBasis","add_line","answer","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","combinations","combinations_with_replacement","convolve","convolve","convolve","convolve","default","default","default","elements","eq","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","halve","ind","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_element","is_subset","k_colorable","middle","mo_solve","mo_solve","mobius_transform","mobius_transform","mobius_transform","mobius_transform","n","ne","new","new","new","new","new","new","next","next","next_minimum","next_section","not_elements","permutations","position_bisect","product","query","reduce","remove","rfind_bisect","rposition_bisect","run_length_encoding","section_end","section_end","slide_minimum","solve","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","from","from","from","from","from","from","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","1","1","1","Accumulate","Alphabet","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","DequeAggregation","DisjointSparseTable","FunctionalAutomaton","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","MappingAutomaton","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTree2D","SegmentTreeMap","SlopeTrick","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","append","as_slice","automaton","back","bit_length","bit_length","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_inplace","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count","count_ones","count_zeros","dd","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","eq","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get_difference","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","keys","keys","last","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next_count","next_node","not","ones","partial_cmp","pop","pop_back","pop_front","pop_left_if","pop_left_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","range","range","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove_count","remove_count","reverse","roots","roots","roots","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update_isize","valley","values","values","with_capacity","0","Ccw","Circle","Clockwise","CounterClockwise","EPS","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","Point","Real","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","ne","ne","ne","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Adjacency","AdjacencyListGraph","AdjacencyListGraphScanner","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EdgeListGraph","EdgeListGraphScanner","GridGraph","LowLink","PrimalDual","PrimalDualBuilder","SparseGraph","SparseGraphConstruction","SparseGraphScanner","StronglyConnectedComponent","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","add_clause","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adjacencies","adjacency","adjacency4","adjacency8","articulation","bellman_ford","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","builder","builder","change_edge","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","components","construct_graph","construct_graph","construct_graph","construct_graph","default","default","default","default","default","dfs_order","dfs_tree","dijkstra","edges","edges","edges_size","edges_size","elist","eq","eq","eq","eq","eq","esize","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","id","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","low","maximum_flow","maximum_flow_limited","minimum_cost_flow","minimum_cost_flow_limited","minimum_spanning_arborescence","minimum_spanning_tree","mscan","mscan","mscan","mscan","ne","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_depth","tree_dp_bottom_up","tree_dp_top_down","tree_order","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vertices","vertices","vertices","vertices_size","vertices_size","vsize","warshall_floyd","weighted_tree_depth","DefaultFormalPowerSeriesMultiplier","EulerPhiTable","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","FormalPowerSeriesMultiplier","Fps","Fps998244353","MOD","MOD","Matrix","MemorizedFactorial","Mersenne127","Mersenne61","Ntt998244353","NttModulus","NumberTheoreticTransform","Polynomial","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","add","add","add_assign","add_assign","assign","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convert","convolve","convolve","convolve","convolve2","convolve3","convolve_fft","convolve_it","convolve_mint","convolve_ref","count_divisors","count_subset_sum","data","data","data","default","default","default","diff","div","div","div_assign","div_assign","divisors","eq","eq","eq","euler_phi","even","exp","extgcd","extgcd_binary","extgcd_loop","eye","fact","factorial","fast_fourier_transform_impls","find_factor","floor_sum","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_binary","get","get_mod","get_mod","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inv_fact","inverse","is_prime","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","linear_congruence","log","miller_rabin","mod_add","mod_add","mod_div","mod_div","mod_inv","mod_inv","mod_mul","mod_mul","mod_neg","mod_neg","mod_one","mod_one","mod_sub","mod_sub","mod_zero","mod_zero","modinv","modinv_extgcd_binary","modinv_loop","moebius","mul","mul","mul_assign","mul_assign","ne","ne","neg","new","new","new","new","new","number_theoretic_transform_impls","odd","one","one","permutation","pow","pow","pow","pow","prefix","prime_factors","prime_factors","prime_factors_rho","prime_list","primes","primitive_root","rank","rem","rem_assign","resize","row_reduction","segmented_sieve_primes","shape","shl","shl_assign","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","trial_division","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zeros","zeros","convolve_fft","fast_fourier_transform","MInt1811939329","MInt2013265921","MInt2113929217","Modulo1811939329","Modulo2013265921","Modulo2113929217","NttCache","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","local_key","local_key","local_key","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","primitive_root","primitive_root","primitive_root","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","PrimeList","PrimeListTrialDivision","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","into","into","into_iter","is_prime","new","next","prime_factors","primes","to_owned","to_owned","trial_division","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","BinaryRepr","Bounded","Complex","DIGITS","DIGITS","DiscreteSteps","E","E","EPSILON","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_2","FRAC_PI_3","FRAC_PI_3","FRAC_PI_4","FRAC_PI_4","FRAC_PI_6","FRAC_PI_6","FRAC_PI_8","FRAC_PI_8","Float","Float32","Float64","INFINITY","INFINITY","Inner","IntBase","LN_10","LN_10","LN_2","LN_2","LOG10_E","LOG10_E","LOG2_E","LOG2_E","MANTISSA_DIGITS","MANTISSA_DIGITS","MAX","MAX","MAX_10_EXP","MAX_10_EXP","MAX_EXP","MAX_EXP","MIN","MIN","MIN_10_EXP","MIN_10_EXP","MIN_EXP","MIN_EXP","MIN_POSITIVE","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NAN","NEG_INFINITY","NEG_INFINITY","One","PI","PI","QuadDouble","RADIX","RADIX","RangeBoundsExt","SQRT_2","SQRT_2","Saturating","Signed","Signed","TAU","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","delta","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div2","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","dot","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","hash","hash","hash","hash","hypot","hypot","hypot","i","im","index","inner","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","ne","ne","ne","ne","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new_unchecked","norm","not","not","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","renormalize","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","local_key","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","primitive_root","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt998244353","Modulo998244353","MontgomeryReduction32","borrow","borrow_mut","from","from","from","from","get_mod","get_mod","into","into","into","into","mod_into","mod_into","mod_into","n1","n1","n2","n2","n3","n3","r","r","r","reduce","reduce","try_from","try_into","type_id","Chars","Read","Scanner","Usize1","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","bytes","chain","clone","clone","clone","clone_into","clone_into","clone_into","flush","fmt","fmt","fmt","from","from","from","initializer","into","into","into","is_read_vectored","is_write_vectored","iter","mscan","new","read","read_all_unchecked","read_exact","read_to_end","read_to_string","read_vectored","scan","scan","scan","scan_vec","take","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_all","write_all_vectored","write_fmt","write_vectored","KnuthMorrisPratt","MOD","MultipleRollingHash","RollingHash","SuffixArray","Zarray","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","find","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash_once","index","index","into","into","into","into","into","longest_common_prefix_array","mersenne_mod","mersenne_mul","mersenne_mul_mod","new","new","new","new","new","new_rand","search","search_all","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","AssociatedValue","ByteWithBase","Bytes","BytesWithBase","CharTools","CharWithBase","Chars","CharsWithBase","Collect","END_TEMP","GetDistinctMut","IS_MAXIMIZE","IterScan","LOG_TABLE_SIZE","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialOrdExt","RandIter","RandomSpec","SEED","START_TEMP","Scanner","ScannerIter","SimuratedAnnealing","SizedCollect","T","TEMP_RATIO","TIME_LIMIT","TotalOrd","UPDATE_INTERVAL","Usize1","Xorshift","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_accepted","is_end","iter_count","local_key","log_table","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","ne","ne","new","new","new","next","next","now","partial_cmp","partial_cmp","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","scan","scan","scan","scan","scan_value","set","set","shuffle","temperture","time","time","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_upper_alphabetic_number","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with","with","0","0","0","0","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","TreeRec","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dfs","dp","eidx","ep","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","n","ne","new","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","time_seeded","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vsize","vsize","with_seed","0","0","1","tree_depth","tree_size","weighted_tree_depth","tree_center","tree_dp_bottom_up","tree_dp_top_down"],"q":["competitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebracompetitive::algorithmcompetitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structurecompetitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graphcompetitive::mathcompetitive::math::fast_fourier_transform_impls","","competitive::math::number_theoretic_transform_impls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::math::prime_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::numcompetitive::num::mint_basiccompetitive::num::montgomery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::toolscompetitive::treecompetitive::tree::TreeCenter","","","competitive::tree::depth","","","competitive::tree::tree_center","competitive::tree::tree_dp",""],"d":["","algebra","algorithm","build automaton","","","","","","","","Macro that returns a recursive function that automatically …","data structures","","","","","graph structures and algorithms","Implement <code>AssociatedValue</code>.","","","","Print expressions with a separator.","mathematical datas","","Automatic memorization for recursive functions.","","","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","string algorithems","","","tree algorithems","","","commutative group","commutative monoid","$+$","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","Find majority(strict) of a sequence.","retain the first element","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","","","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","binary operation to select smaller element","associative binary operation and an identity element","","$\\\\times$","","","","","","","","","associative binary operation","type of operands: $T$","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$a$ where $a \\\\circ x = e$","","","","","","","","","","","","","","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","binary search helper","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","ternary search helper","Basis of xor operation.","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","choose distinct <code>r</code> elements from <code>n</code> in sorted order","","choose <code>r</code> elements from <code>n</code> in sorted order","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","","","","","","","","","","","","","get i-th value of rho path","return between two elements","","","Return true if inserted element cannot be consisted by …","","","","","","","","","","","","","","","","","","","middle point of section","","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","Create a empty space.","","","","","","Divide into 3 sections","","choose distinct <code>r</code> elements from <code>n</code> in any order","Returns the first index that satisfies a predicate. if not …","choose <code>r</code> elements from <code>n</code> independently","","Return (reduced basis, coordinate). Coordinate means if …","","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","the end condition of binary search","the end condition of ternary search","","","","like <code>(left..=right).min_by_key(f)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return accumlate of [0, k)","fold [0, k]","fold [0, i] x [0, j]","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of [l, r)","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","Insert values and operate old range-value pairs.","Insert and operate old range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","","","","","Create empty","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","get k-th smallest value in range","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-b)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","add a, a+d, …, a+(k-1)d into [l, l + k)","","","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","a–b-vc","a–b-^c","","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","(p_x = f) | (p_y = g)","","","","","","","Return a slice of adjacency vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","","","","","","","","","","","","","","","","","","","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","tarjan","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","Return an iterator over graph vertices.","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","max(a.len(), b.len()) * max(a) * max(b) &lt; 3.64 * 10^18","max(a.len(), b.len()) * max(a) * max(b) &lt; 1.81 * 10^27","","","max(a.len(), b.len()) * max(a) * max(b) &lt; 1.81 * 10^27","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e","","","Sum of Floor of Linear","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","return: (y,z)","","","","","","","","","","","","","","","","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/drait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationsgcdm is prime, n = 2^32","","","","","","","m","","","","","","","","","n^1 mod m","","n^2 mod m","","n^3 mod m","","","(-m)^{-1} mod n","(-m)^{-1} mod n","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","","","","","","","Creates a “by reference” adapter for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","","","","","","","Flush this output stream, ensuring that all intermediately …","","","","","","","Determines if this <code>Read</code>er can work with buffers of …","","","","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","","","Pull some bytes from this source into the specified …","","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","","","","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","S [l, r)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","Trait for spec of generating random value.","","","","","","","Type of value.","","","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","","","","","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","","","","","","","","","","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,3,4,5,6,7,8,1,1,9,10,1,1,1,1,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,15,16,17,20,22,25,28,28,0,1,1,1,1,2,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,2,2,29,29,2,2,27,27,15,16,28,28,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,30,31,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,32,34,0,35,31,36,37,38,33,39,40,34,41,42,43,44,35,31,36,37,38,33,39,40,34,41,42,43,44,39,39,38,31,36,37,38,33,34,31,36,37,38,33,34,0,31,0,41,42,43,44,31,33,34,31,31,39,34,45,0,35,31,36,37,38,33,39,34,35,31,36,37,38,33,39,40,34,41,42,43,44,38,34,39,39,46,38,32,34,35,31,36,37,38,33,39,40,34,41,42,43,44,36,37,31,31,38,47,32,32,41,42,43,44,38,31,35,33,40,34,43,44,36,37,40,47,31,0,45,0,33,34,32,45,45,0,46,47,0,35,31,0,31,36,37,38,33,34,35,31,36,37,38,33,39,40,34,41,42,43,44,35,31,36,37,38,33,39,40,34,41,42,43,44,35,31,36,37,38,33,39,40,34,41,42,43,44,41,42,43,44,0,0,0,0,0,0,48,49,50,51,52,53,48,49,50,51,52,53,50,52,53,50,52,53,50,53,48,49,53,48,49,50,53,48,49,48,49,48,50,52,53,48,49,50,51,52,53,48,49,50,53,48,49,48,49,48,48,49,50,51,52,53,52,0,0,0,0,53,48,48,49,50,51,52,53,48,49,50,51,50,52,53,48,49,50,51,52,53,48,49,50,51,52,53,48,49,50,51,52,53,54,55,56,54,55,56,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,57,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,68,69,70,71,72,72,70,71,72,72,73,74,75,70,76,0,77,64,65,78,78,78,78,78,78,79,73,80,81,67,82,54,55,56,58,59,60,61,62,63,68,69,65,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,79,73,80,81,67,82,54,55,56,58,59,60,61,62,63,68,69,65,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,86,70,71,87,88,72,72,67,82,54,55,56,58,59,60,61,62,63,68,69,65,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,67,82,54,55,56,58,59,60,61,62,63,68,69,65,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,78,88,87,81,78,78,86,62,63,78,70,71,87,88,90,77,72,57,57,82,70,87,88,78,70,70,71,71,87,88,73,81,74,75,81,73,73,67,82,54,55,56,58,59,60,61,62,63,68,69,65,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,80,67,68,69,83,84,85,76,89,82,84,85,76,89,90,77,83,79,73,80,81,67,82,54,55,56,58,59,60,61,62,63,68,69,65,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,67,65,70,70,71,71,87,88,84,76,77,68,69,78,70,71,84,85,87,76,89,75,87,88,88,87,87,88,75,60,61,60,61,78,83,83,57,54,55,56,58,59,60,61,62,63,81,87,88,81,87,88,79,73,80,81,67,82,54,55,56,58,59,60,61,62,63,68,69,65,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,70,71,90,77,75,70,71,70,71,90,70,71,90,77,60,61,60,61,68,82,73,74,75,72,72,78,79,73,80,81,82,58,59,62,63,68,69,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,57,54,55,56,58,59,60,61,62,63,81,81,78,78,78,90,77,77,87,88,87,88,84,85,76,89,90,77,77,66,79,71,66,64,64,64,64,65,66,66,70,71,87,88,70,71,77,73,74,75,84,85,76,89,82,82,73,74,66,64,64,65,64,64,65,68,69,78,84,85,76,89,72,78,78,78,78,78,78,73,74,75,72,82,82,91,91,91,91,67,82,54,55,56,58,59,60,61,62,63,68,69,65,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,79,73,80,81,67,82,54,55,56,58,59,60,61,62,63,68,69,65,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,79,73,80,81,67,82,54,55,56,58,59,60,61,62,63,68,69,65,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,79,73,80,81,67,82,54,55,56,58,59,60,61,62,63,68,69,65,78,70,71,83,84,85,86,87,88,76,89,90,77,72,74,66,75,73,74,75,80,68,69,84,85,86,76,89,86,72,70,71,70,92,0,0,93,93,0,0,0,93,93,93,0,0,94,95,96,92,93,94,95,96,92,93,95,96,93,94,95,96,92,93,94,95,96,92,93,0,93,94,0,0,94,96,95,96,96,95,96,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,96,96,94,95,96,92,93,95,96,95,96,94,95,96,94,95,96,92,93,95,96,95,96,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,94,95,96,92,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,98,99,100,97,97,98,101,98,102,102,103,101,101,104,105,103,106,107,98,108,102,99,109,100,110,111,112,113,114,101,115,97,104,105,103,106,107,98,108,102,99,109,100,110,111,112,113,114,101,115,97,103,99,100,109,110,109,98,108,102,99,109,100,111,112,113,114,101,115,97,98,108,102,99,109,100,111,112,113,114,101,115,97,102,111,112,113,114,115,116,111,112,113,98,111,112,113,114,101,101,101,108,101,108,101,101,102,111,112,113,114,98,99,100,98,108,102,99,109,100,110,111,112,113,114,101,115,97,101,104,105,103,106,107,98,108,102,99,109,100,110,111,112,113,114,101,115,97,108,101,115,99,100,109,110,98,115,102,111,112,113,114,114,108,115,104,105,103,106,107,98,108,102,99,109,100,110,111,112,113,114,101,115,97,103,109,109,110,110,108,108,104,105,106,107,102,114,104,105,103,106,107,98,108,102,99,100,114,115,97,103,102,111,112,113,114,97,97,115,101,114,117,118,119,101,101,101,98,108,102,99,109,100,111,112,113,114,101,115,97,101,101,101,101,101,101,101,104,105,103,106,107,98,108,102,99,109,100,110,111,112,113,114,101,115,97,104,105,103,106,107,98,108,102,99,109,100,110,111,112,113,114,101,115,97,97,104,105,103,106,107,98,108,102,99,109,100,110,111,112,113,114,101,115,97,98,108,101,108,101,98,101,101,0,0,0,0,0,0,0,0,120,121,0,0,0,0,0,0,0,0,0,0,0,122,123,123,123,123,124,0,125,126,120,121,127,128,123,129,124,130,131,125,126,120,121,127,128,123,129,124,130,131,123,127,128,123,129,124,130,131,127,128,123,129,124,130,131,127,128,126,122,125,126,0,0,0,126,0,126,130,123,123,129,124,128,123,124,123,123,123,123,123,0,123,129,124,0,123,123,0,0,0,129,127,128,0,0,0,127,128,123,129,124,130,131,125,126,120,121,127,128,123,123,123,123,129,124,130,131,123,123,129,124,0,0,131,120,121,127,123,129,129,124,123,129,129,124,123,125,126,120,121,127,128,123,129,124,130,131,127,123,127,129,130,0,127,0,0,123,124,0,123,0,120,121,120,121,120,121,120,121,120,121,120,121,120,121,120,121,0,0,0,0,123,123,123,123,129,124,123,127,128,129,130,131,0,123,123,124,127,0,123,129,124,123,0,130,0,0,0,132,129,123,123,123,129,0,129,123,123,123,123,129,123,133,123,123,123,123,127,128,123,129,124,130,131,130,123,125,126,120,121,127,128,123,129,124,130,131,125,126,120,121,127,128,123,129,124,130,131,125,126,120,121,127,128,123,129,124,130,131,123,124,123,129,0,0,0,0,0,0,0,0,0,134,135,136,137,134,135,136,137,137,137,137,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,136,137,134,135,136,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,136,137,134,135,136,134,135,136,134,135,136,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,134,135,136,134,135,136,134,135,136,134,135,136,134,135,136,134,135,136,134,135,136,137,134,135,136,137,134,135,136,137,134,135,136,137,0,0,138,139,138,139,138,139,138,139,138,138,139,138,139,138,139,139,138,138,139,138,138,138,139,138,138,139,138,139,138,139,140,141,142,143,144,0,0,0,145,145,0,145,145,145,145,146,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,0,0,145,145,147,0,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,0,0,0,145,145,145,145,0,145,145,0,145,145,0,145,145,0,0,148,145,145,0,149,0,0,145,149,150,140,141,142,142,142,142,142,142,143,143,143,143,143,143,144,148,148,145,140,141,145,140,141,150,150,150,150,140,141,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,151,151,144,144,150,150,150,150,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,151,151,150,145,140,141,145,140,141,145,140,141,145,140,141,145,140,141,152,152,152,152,152,152,152,142,143,142,143,142,143,142,143,142,143,142,143,153,150,140,141,142,143,151,144,153,150,140,141,142,143,151,144,145,140,141,145,140,141,145,140,141,150,140,141,142,143,151,144,150,140,141,142,143,151,144,140,141,142,143,150,145,140,141,145,140,141,145,140,141,154,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,154,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,150,150,140,141,142,143,151,144,152,150,150,150,150,140,141,142,143,143,143,143,143,143,143,143,143,143,143,143,151,151,144,144,150,150,150,150,142,143,143,143,143,143,143,143,143,143,143,143,143,151,151,145,146,140,141,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,150,155,155,155,155,150,140,141,142,143,151,144,145,140,141,145,140,141,145,140,141,148,148,145,140,141,150,140,140,141,141,142,142,143,143,151,151,144,144,152,152,152,152,152,152,152,145,140,141,156,153,150,140,140,141,141,142,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,143,151,151,151,151,151,151,151,151,151,151,151,151,151,144,144,145,140,141,140,141,142,143,151,144,146,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,153,148,142,142,142,142,142,142,143,143,143,143,143,143,147,151,150,142,143,151,145,140,141,150,150,144,151,156,153,150,140,141,142,143,151,144,151,145,140,141,145,140,141,157,157,157,157,145,140,141,149,142,142,142,142,142,142,143,143,143,143,143,143,145,140,141,158,158,149,142,142,142,142,142,142,143,143,143,143,143,143,145,140,141,144,145,140,141,159,159,144,148,148,154,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,145,140,141,145,140,141,145,140,141,145,140,141,145,140,141,145,140,141,157,142,143,145,140,141,157,142,143,0,147,147,156,147,147,147,147,147,147,147,147,148,148,0,150,150,150,150,140,141,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,151,151,144,144,145,140,141,150,150,150,150,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,151,151,150,140,141,142,143,144,150,140,141,142,142,142,142,142,142,143,143,143,143,143,143,151,144,150,151,144,151,150,142,143,158,150,140,141,142,143,151,140,141,142,143,144,150,146,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,151,145,140,141,145,140,141,150,150,151,151,150,145,140,141,140,141,142,143,143,143,143,143,143,143,143,143,143,143,143,142,143,143,143,143,143,143,143,143,143,143,143,143,145,146,140,141,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,144,154,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,154,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,154,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,145,140,141,151,157,157,157,157,158,158,159,159,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,148,142,142,142,142,142,142,143,143,143,143,143,143,145,149,140,141,142,142,142,142,142,142,143,143,143,143,143,143,145,140,141,145,140,141,145,140,141,145,140,141,151,144,151,155,155,155,155,152,150,150,150,150,140,141,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,151,151,144,150,150,150,150,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,151,151,150,150,151,151,145,140,141,145,140,141,145,140,141,145,140,141,150,140,141,142,143,151,144,145,140,141,155,155,155,155,155,155,155,155,140,141,142,143,151,144,145,140,141,154,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,150,145,140,141,153,150,140,141,142,143,151,144,153,150,140,141,142,143,151,144,153,150,140,141,142,143,151,144,150,149,142,142,142,142,142,142,143,143,143,143,143,143,153,153,159,150,140,141,142,143,151,0,0,0,0,0,0,0,0,0,0,0,0,160,161,162,163,164,165,160,161,162,163,164,165,0,0,160,160,160,160,160,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,162,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,160,161,162,163,164,165,160,160,160,160,160,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,162,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,161,160,161,162,163,164,165,160,161,162,163,164,165,160,160,160,160,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,165,165,165,165,165,165,160,161,162,163,164,165,160,161,162,163,164,165,160,161,162,163,164,165,160,161,162,163,164,165,160,160,161,162,163,164,165,160,161,162,163,164,165,161,164,165,160,161,162,163,164,165,160,161,162,163,164,165,160,161,162,163,164,165,0,0,0,166,166,166,166,166,166,167,166,166,166,166,166,166,166,166,167,166,167,166,167,166,166,167,167,167,167,166,166,166,0,0,0,0,0,168,169,170,168,169,170,171,172,171,171,168,169,170,168,169,170,172,168,169,170,168,169,170,171,168,169,170,171,172,168,168,168,171,0,171,171,171,171,168,169,170,168,171,168,169,170,168,169,170,168,169,170,168,169,170,172,172,172,172,172,0,173,0,0,0,0,174,173,175,176,177,174,173,175,176,177,174,173,175,176,177,174,173,175,176,177,173,175,173,175,174,173,175,176,177,174,173,175,176,177,173,176,177,174,173,175,176,177,176,173,173,173,174,173,175,176,177,175,177,174,174,173,175,176,177,174,173,175,176,177,174,173,175,176,177,174,173,175,176,177,178,179,180,181,182,183,0,0,0,0,0,0,0,0,0,184,0,184,0,184,0,0,185,186,187,0,0,0,184,184,0,0,0,0,188,184,184,0,184,0,0,189,184,190,191,178,179,180,181,192,182,193,194,183,189,184,190,191,178,179,180,181,192,182,193,194,183,195,195,190,178,179,180,181,192,182,193,194,190,178,179,180,181,192,182,193,194,178,183,184,190,178,183,184,190,191,178,179,180,181,192,182,193,194,189,184,190,191,178,179,180,181,192,182,193,194,183,196,196,196,196,190,190,190,188,188,187,178,189,184,190,191,178,179,180,181,192,182,193,194,183,189,191,184,184,184,188,184,195,188,188,186,179,180,181,182,193,178,183,184,190,193,189,191,184,178,183,197,190,178,184,190,197,197,190,190,0,0,0,0,0,185,192,194,0,0,188,188,190,184,190,184,196,196,196,190,178,179,180,181,192,182,193,194,196,189,184,190,191,178,179,180,181,192,182,193,194,183,189,184,190,191,178,179,180,181,192,182,193,194,183,189,184,190,191,178,179,180,181,192,182,193,194,183,188,188,198,199,200,201,0,0,0,0,0,0,0,0,0,202,0,0,0,0,0,0,0,202,198,199,200,201,203,204,205,206,207,208,209,210,202,211,212,198,199,200,201,203,204,205,206,207,208,209,210,202,211,212,203,204,205,206,208,210,202,212,203,204,205,206,208,210,202,212,211,213,207,212,210,203,210,202,203,204,205,206,208,210,202,211,212,198,199,200,201,203,204,205,206,207,208,209,210,202,211,212,205,202,211,211,0,198,199,200,201,203,204,205,206,207,208,209,210,202,211,212,206,209,203,204,205,212,202,203,204,205,209,210,211,212,208,203,209,204,204,204,205,209,209,198,199,200,201,213,207,204,204,204,211,203,204,205,206,208,210,202,212,198,199,200,201,203,204,205,206,207,208,209,210,202,211,212,198,199,200,201,203,204,205,206,207,208,209,210,202,211,212,198,199,200,201,203,204,205,206,207,208,209,210,202,211,212,209,204,209,213,207,211,214,215,215,118,118,118,118,118,118],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullbool",15]],[[],["bool",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i64",15],["i64",15]]],[[]],[[["u64",15]],["option",4,[["vec",3,[["u64",15]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["rhopath",3,[["usize",15]]]],[[],["usize",15]],[[],["bitdp",3]],[[],["subsets",3]],[[],["combinations",3]],[[],["independentsubset",3]],[[],["convexhulltrick",3]],[[],["xorbasis",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]],["combinations",3]],[[["usize",15]]],[[["vec",3],["vec",3]],["vec",3]],[[["vec",3],["vec",3]],["vec",3]],[[["vec",3],["vec",3]],["vec",3]],[[["vec",3],["vec",3]],["vec",3]],[[],["bitdp",3]],[[],["convexhulltrick",3]],[[],["xorbasis",3]],[[["usize",15]]],[[["bitdp",3]],["bool",15]],null,[[["u64",15]],["option",4,[["u64",15]]]],[[],["option",4]],[[["usize",15]],["vec",3,[["usize",15]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],null,[[["usize",15]]],[[]],null,[[["usize",15]]],[[["u64",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["usize",15]],["bool",15]],[[["usize",15],["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],null,[[["bitdp",3]],["bool",15]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[["vec",3,[["usize",15]]]]],[[["vec",3,[["usize",15]]]]],[[],["option",4]],[[],["option",4]],[[],["i64",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]]],[[["i64",15]],["i64",15]],[[["u64",15]]],[[["usize",15]]],[[],["option",4]],[[],["usize",15]],[[["iterator",8]],["vec",3]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["vec",3,[["usize",15]]]],[[],["option",4,[["usize",15]]]],[[["usize",15]],["subsets",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["zerooneknapsackproblemsmallitems",3]],[[],["lexicographicalsubsequence",3]],[[],["longestincreasingsubsequence",3]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["u64",15],["u64",15]]],[[]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15],["usize",15]]],[[["usize",15],["usize",15],["usize",15]]],[[["usize",15],["usize",15],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["option",4,[["vec",3,[["usize",15]]]]]],[[],["usize",15]],[[["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[]],[[]],[[["i64",15]]],[[["i64",15]]],[[["usize",15]]],[[["usize",15]]],[[["i64",15]]],[[["i64",15]]],[[],["hashmap",3,[["usize",15],["vec",3,[["usize",15]]]]]],[[],["hashmap",3,[["usize",15],["vec",3,[["usize",15]]]]]],[[],["hashmap",3,[["usize",15],["vec",3,[["usize",15]]]]]],[[]],[[]],null,[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["accumulate",3]],[[],["automatondp",3]],[[],["intersectionautomaton",3]],[[],["unionautomaton",3]],[[],["productautomaton",3]],[[],["functionalautomaton",3]],[[],["mappingautomaton",3]],[[],["lexicographicalautomaton",3]],[[],["revlexicographicalautomaton",3]],[[],["monoidalautomaton",3]],[[],["alwaysacceptingautomaton",3]],[[],["binaryindexedtree",3]],[[],["binaryindexedtree2d",3]],[[],["bitvector",3]],[[],["bitset",3]],[[],["hashcounter",3]],[[],["btreecounter",3]],[[],["disjointsparsetable",3]],[[],["lazysegmenttree",3]],[[],["lazysegmenttreemap",3]],[[],["rangearithmeticprogressionadd",3]],[[],["rangemap",3]],[[],["rangeset",3]],[[],["segmenttree",3]],[[],["segmenttreemap",3]],[[],["queueaggregation",3]],[[],["dequeaggregation",3]],[[],["slopetrick",3]],[[],["unionfind",3]],[[],["waveletmatrix",3]],[[],["weightedunionfind",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bitset",3]],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["usize",15]],[[],["u64",15]],[[],["u64",15]],null,[[]],[[]],[[],["bitset",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["slopetrick",3]],[[],["automatondp",3]],[[],["automatondp",3]],null,[[],["drain",3,[["usize",15]]]],[[]],[[]],[[["bitset",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["usize",15]],["usize",15]],[[],["result",4,[["usize",15],["usize",15]]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["result",4,[["usize",15],["usize",15]]]],[[["usize",15]],["ref",3,[["rootdata",3]]]],[[["usize",15]],["refmut",3,[["rootdata",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15],["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["vec",3]]],[[["vec",3]]],[[],["option",4]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["usize",15]]]],[[]],[[]],[[["usize",15]],["vec",3,[["usize",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15],["usize",15]],["bool",15]],[[],["iter",3,[["usize",15]]]],[[],["iter",3,[["usize",15]]]],[[],["keys",3,[["usize",15]]]],[[],["keys",3,[["usize",15]]]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["hashmap",3]],[[["usize",15]],["vec",3,[["usize",15]]]],[[["usize",15]],["vec",3,[["usize",15]]]],[[["usize",15]],["vec",3,[["usize",15]]]],[[]],[[],["i64",15]],[[["bitset",3]],["bool",15]],[[]],[[["usize",15],["fn",8]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15]]],[[]],[[]],[[["vec",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["vec",3,[["",26,[["clone",8],["rankselectdictionaries",8]]]]],["usize",15]]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["option",4,[["usize",15]]]],[[]],[[["usize",15]]],[[["bitset",3]],["option",4,[["ordering",4]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15],["usize",15]],["option",4,[["usize",15]]]],[[["usize",15],["usize",15]],["option",4,[["usize",15]]]],[[["usize",15],["usize",15]],["option",4,[["usize",15]]]],[[["usize",15],["usize",15]],["option",4,[["usize",15]]]],[[]],[[]],[[]],[[["range",3,[["usize",15]]],["usize",15]],["usize",15]],[[["range",3],["range",3]],["vec",3]],[[],["range",3,[["usize",15]]]],[[["usize",15],["range",3,[["usize",15]]]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15],["range",3,[["usize",15]]]],["usize",15]],[[["range",3,[["usize",15]]],["range",3,[["usize",15]]]],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[],["vec",3,[["usize",15]]]],[[],["vec",3,[["usize",15]]]],[[],["vec",3,[["usize",15]]]],[[["usize",15],["usize",15]],["option",4,[["usize",15]]]],[[["usize",15],["usize",15]],["option",4,[["usize",15]]]],[[["usize",15],["usize",15]],["option",4,[["usize",15]]]],[[["usize",15],["usize",15]],["option",4,[["usize",15]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["usize",15]],["bool",15]],[[["usize",15],["usize",15]],["bool",15]],[[["usize",15],["usize",15]],["option",4,[["usize",15]]]],[[["usize",15]],["option",4,[["usize",15]]]],[[["usize",15]],["option",4,[["usize",15]]]],[[["usize",15]],["option",4,[["usize",15]]]],[[["usize",15]],["option",4,[["usize",15]]]],[[["usize",15]],["option",4,[["usize",15]]]],[[["usize",15]],["option",4,[["usize",15]]]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["i64",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["i64",15],["i64",15]]],[[]],[[]],[[],["vec",3]],[[["usize",15]],["vec",3]],[[],["vec",3]],[[["usize",15]],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["usize",15]],["bool",15]],[[["usize",15],["usize",15]],["bool",15]],[[["usize",15],["usize",15]],["bool",15]],[[]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15],["i64",15],["i64",15]]],[[["usize",15]]],[[["usize",15]]],[[["isize",15],["usize",15],["i64",15],["i64",15]]],[[["i64",15],["usize",15]]],[[],["values",3,[["usize",15]]]],[[],["values",3,[["usize",15]]]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point",6]],["ccw",4]],[[["point",6]],["ccw",4]],[[["point",6],["point",6],["point",6]]],[[],["circle",3]],[[],["line",3]],[[],["linesegment",3]],[[],["real",3]],[[],["ccw",4]],[[]],[[]],[[]],[[]],[[]],[[["vec",3,[["point",6]]]],["f64",15]],[[["ccw",4]],["ordering",4]],[[["point",6]],["bool",15]],[[["vec",3,[["point",6]]]],["f64",15]],[[["vec",3,[["point",6]]]],["vec",3,[["point",6]]]],[[],["option",4]],[[],["option",4,[["point",6]]]],[[],["point",6]],[[],["point",6]],[[],["f64",15]],[[["point",6]],["f64",15]],[[["point",6]],["f64",15]],[[["circle",3]],["bool",15]],[[["line",3]],["bool",15]],[[["linesegment",3]],["bool",15]],[[["real",3]],["bool",15]],[[["ccw",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["point",6]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["circle",3]],["bool",15]],[[["line",3]],["bool",15]],[[["linesegment",3]],["bool",15]],[[["point",6],["f64",15]]],[[["point",6],["point",6]]],[[["point",6],["point",6]]],[[["real",3]],["option",4,[["ordering",4]]]],[[["ccw",4]],["option",4,[["ordering",4]]]],[[["point",6]],["point",6]],[[["point",6]],["point",6]],[[["point",6]],["point",6]],[[["point",6]],["point",6]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["bool",15],["usize",15],["bool",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15],["u64",15]]],[[["usize",15],["usize",15],["u64",15],["i64",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15]],["iter",3,[["adjacency",3]]]],[[["usize",15]],["vec",3]],[[["usize",15],["usize",15]],["adjacency4",3]],[[["usize",15],["usize",15]],["adjacency8",3]],null,[[["usize",15]]],[[["usize",15]],["vec",3,[["usize",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["bidirectionalsparsegraph",6]],["dinic",3]],[[["bidirectionalsparsegraph",6]],["primaldual",3]],[[["usize",15],["usize",15]],["dinicbuilder",3]],[[["usize",15],["usize",15]],["primaldualbuilder",3]],[[["usize",15],["u64",15],["u64",15]]],[[],["adjacencylistgraph",3]],[[],["edgelistgraph",3]],[[],["gridgraph",3]],[[],["dinicbuilder",3]],[[],["dinic",3]],[[],["primaldualbuilder",3]],[[],["directededge",3]],[[],["undirectededge",3]],[[],["bidirectionaledge",3]],[[],["adjacency",3]],[[],["sparsegraph",3]],[[],["stronglyconnectedcomponent",3]],[[],["twosatisfiability",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["gridgraph",3]],["ordering",4]],[[["directededge",3]],["ordering",4]],[[["undirectededge",3]],["ordering",4]],[[["bidirectionaledge",3]],["ordering",4]],[[["adjacency",3]],["ordering",4]],[[],["vec",3,[["vec",3,[["usize",15]]]]]],[[["usize",15],["vec",3]],["sparsegraph",3]],[[["usize",15],["vec",3]],["sparsegraph",3]],[[["usize",15],["vec",3]],["sparsegraph",3]],[[["usize",15],["vec",3]],["sparsegraph",3]],[[],["adjacencylistgraph",3]],[[],["directededge",3]],[[],["undirectededge",3]],[[],["bidirectionaledge",3]],[[],["adjacency",3]],[[["usize",15]],["vec",3,[["usize",15]]]],[[["usize",15]],["vec",3,[["bool",15]]]],[[["usize",15]],["vec",3,[["option",4]]]],[[],["iter",3]],null,[[],["usize",15]],[[],["usize",15]],null,[[["gridgraph",3]],["bool",15]],[[["directededge",3]],["bool",15]],[[["undirectededge",3]],["bool",15]],[[["bidirectionaledge",3]],["bool",15]],[[["adjacency",3]],["bool",15]],null,[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["vec",3]]],[[["usize",15],["vec",3]]],[[],["directedsparsegraph",6]],[[],["bidirectionalsparsegraph",6]],[[],["bidirectionalsparsegraph",6]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],null,[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["usize",15],["usize",15]],["u64",15]],[[["usize",15],["usize",15],["u64",15]],["u64",15]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15],["u64",15]]],[[["usize",15]],["option",4]],[[],["vec",3,[["bool",15]]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["gridgraph",3]],["bool",15]],[[["adjacency",3]],["bool",15]],[[["usize",15],["usize",15],["bool",15]]],[[["usize",15],["usize",15]]],[[["undirectedsparsegraph",6]]],[[["usize",15],["usize",15]]],[[["usize",15]]],[[["usize",15]],["adjacencylistgraph",3]],[[["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15]],["adjacency",3]],[[["directedsparsegraph",6]]],[[["usize",15]]],null,[[["gridgraph",3]],["option",4,[["ordering",4]]]],[[["directededge",3]],["option",4,[["ordering",4]]]],[[["undirectededge",3]],["option",4,[["ordering",4]]]],[[["bidirectionaledge",3]],["option",4,[["ordering",4]]]],[[["adjacency",3]],["option",4,[["ordering",4]]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],null,null,[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["usize",15]]]],[[],["treecenter",4]],[[["usize",15]],["vec",3,[["u64",15]]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["vec",3,[["u64",15]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["option",4,[["vec",3,[["bool",15]]]]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["range",3,[["usize",15]]]],[[],["range",3,[["usize",15]]]],[[],["range",3,[["usize",15]]]],[[],["usize",15]],[[],["usize",15]],null,[[],["vec",3,[["vec",3,[["option",4]]]]]],[[["usize",15],["fn",8]],["vec",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["",26,[["clone",8],["mulassign",8]]],["usize",15],["",26,[["clone",8],["mulassign",8]]]],["",26,[["clone",8],["mulassign",8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["memorizedfactorial",3]],[[],["smallmodmemorizedfactorial",3]],[[]],[[],["matrix",3]],[[],["polynomial",3]],[[],["primetable",3]],[[],["eulerphitable",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["usize",15]],["mint",3]],[[["usize",15],["usize",15]],["mint",3]],[[["intoiterator",8]],["vec",3,[["mint",3]]]],[[["formalpowerseries",3],["formalpowerseries",3]],["formalpowerseries",3]],[[["formalpowerseries",3],["formalpowerseries",3]],["formalpowerseries",3]],[[["vec",3,[["mint",3]]],["vec",3,[["mint",3]]]],["vec",3,[["mint",3]]]],[[],["vec",3,[["u64",15]]]],[[["vec",3],["vec",3]],["vec",3,[["u128",15]]]],[[],["vec",3,[["i64",15]]]],[[],["vec",3,[["mint",3]]]],[[],["vec",3,[["mint",3]]]],[[],["vec",3,[["mint",3]]]],[[["u32",15]],["u32",15]],[[["usize",15]]],null,null,null,[[]],[[],["formalpowerseries",3]],[[],["polynomial",3]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["vec",3,[["u64",15]]]],[[],["bool",15]],[[["matrix",3]],["bool",15]],[[["polynomial",3]],["bool",15]],[[["usize",15]],["usize",15]],[[]],[[["usize",15]]],[[["i64",15],["i64",15]]],[[["i64",15],["i64",15]]],[[["i64",15],["i64",15]]],[[]],null,[[["usize",15]]],null,[[["u64",15]],["u64",15]],[[["u64",15],["u64",15],["u64",15],["u64",15]],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["never",15]]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["vec",3]]],[[["vec",3,[["vec",3]]]]],[[["vec",3]]],[[["u64",15],["u64",15]],["u64",15]],[[["u64",15],["u64",15]],["u64",15]],[[["usize",15]],["usize",15]],[[]],[[]],[[["usize",15],["usize",15]],["mint",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["mint",3]],[[["usize",15]]],null,[[],["option",4,[["matrix",3]]]],[[["u32",15]],["bool",15]],[[["mint",3,[["mintbase",8]]]],["mint",3,[["mintbase",8]]]],[[["usize",15],["mint",3]],["mint",3]],[[],["vec",3,[["mint",3,[["mintbase",8]]]]]],[[["u64",15],["u64",15]],["u64",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[["usize",15]]],[[["u64",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15],["i64",15]],["i64",15]],[[["u64",15],["u64",15]],["u64",15]],[[["i64",15],["i64",15]],["i64",15]],[[["usize",15]],["hashmap",3,[["usize",15],["i64",15]]]],[[]],[[]],[[]],[[]],[[["matrix",3]],["bool",15]],[[["polynomial",3]],["bool",15]],[[]],[[["usize",15]]],[[]],[[]],[[["u32",15]]],[[["usize",15]]],null,[[]],[[]],[[]],[[["usize",15],["usize",15]],["mint",3]],[[["u64",15],["u64",15],["u64",15]],["u64",15]],[[["usize",15],["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]],["vec",3]],[[["u32",15]],["vec",3]],[[["u64",15]],["vec",3,[["u64",15]]]],null,[[["usize",15]],["vec",3,[["usize",15]]]],[[],["mint",3]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]],["vec",3,[["usize",15]]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["option",4,[["vec",3]]]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["usize",15]]],[[]],[[],["vec",3,[["i64",15]]]],[[["vec",3,[["complex",3,[["f64",15]]]]],["bool",15]],["vec",3,[["complex",3,[["f64",15]]]]]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["i128",15]]],[[]],[[["isize",15]]],[[["u128",15]]],[[["u64",15]]],[[["u32",15]]],[[["usize",15]]],[[["i64",15]]],[[["i32",15]]],[[["i32",15]]],[[["u64",15]]],[[["u32",15]]],[[["u128",15]]],[[["i64",15]]],[[["i128",15]]],[[]],[[["isize",15]]],[[["usize",15]]],[[["u128",15]]],[[["isize",15]]],[[["i64",15]]],[[]],[[["i32",15]]],[[["i128",15]]],[[["usize",15]]],[[["u64",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["u128",15]],[[],["i128",15]],[[],["usize",15]],[[]],[[],["i64",15]],[[],["u64",15]],[[],["isize",15]],[[],["u32",15]],[[],["usize",15]],[[],["i64",15]],[[],["u32",15]],[[],["u128",15]],[[],["i128",15]],[[],["u64",15]],[[],["isize",15]],[[],["i32",15]],[[]],[[],["u128",15]],[[],["u64",15]],[[],["usize",15]],[[],["i32",15]],[[]],[[],["i64",15]],[[],["i128",15]],[[],["u32",15]],[[],["isize",15]],[[]],[[],["localkey",3]],[[],["localkey",3]],[[],["localkey",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["isize",15]],[[],["u64",15]],[[],["i128",15]],[[],["i64",15]],[[],["i32",15]],[[],["u128",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[],["i32",15]],[[],["i64",15]],[[],["i128",15]],[[],["usize",15]],[[],["isize",15]],[[],["isize",15]],[[],["u64",15]],[[],["i128",15]],[[],["i64",15]],[[],["i32",15]],[[],["usize",15]],[[],["u32",15]],[[],["u128",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mint",3]],[[],["mint",3]],[[],["mint",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[],["primelist",3]],[[],["primelisttrialdivision",3]],[[]],[[]],[[],["primelist",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["bool",15]],[[["u64",15]]],[[],["option",4]],[[["u64",15]],["vec",3]],[[]],[[]],[[]],[[["u64",15]],["primelisttrialdivision",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[]],[[["f64",15]]],[[]],[[["complex",3]]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[],["complex",3]],[[],["float32",3]],[[],["float64",3]],[[],["saturating",3]],[[],["wrapping",3]],[[]],[[],["quaddouble",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[["saturating",3]],["ordering",4]],[[["wrapping",3]],["ordering",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[],["complex",3]],[[],["float32",3]],[[],["float64",3]],[[],["saturating",3]],[[],["wrapping",3]],[[]],[[],["quaddouble",3]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[]],[[]],[[["f64",15]]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[["complex",3]],["bool",15]],[[["float32",3]],["bool",15]],[[["float64",3]],["bool",15]],[[["saturating",3]],["bool",15]],[[["wrapping",3]],["bool",15]],[[],["bool",15]],[[["quaddouble",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["extendedgcd",3]],[[],["extendedgcd",3]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f32",15]]],[[]],[[["f64",15]]],[[]],[[["u64",15]]],[[["i32",15]]],[[["i64",15]]],[[["isize",15]]],[[["u32",15]]],[[["i16",15]]],[[["u16",15]]],[[["u128",15]]],[[["i128",15]]],[[["i8",15]]],[[["u8",15]]],[[["usize",15]]],[[]],[[["i8",15]]],[[["u32",15]]],[[["u8",15]]],[[]],[[["isize",15]]],[[["usize",15]]],[[["i128",15]]],[[["u16",15]]],[[["u128",15]]],[[["i64",15]]],[[["i32",15]]],[[["i16",15]]],[[["u64",15]]],[[["i16",15]]],[[["i128",15]]],[[["i64",15]]],[[["isize",15]]],[[]],[[["i32",15]]],[[["i8",15]]],[[["usize",15]]],[[["u128",15]]],[[["u64",15]]],[[["u32",15]]],[[["u8",15]]],[[["u16",15]]],[[]],[[["f64",15]]],[[["u64",15]]],[[["u64",15]]],[[["u64",15]]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],[[["str",15],["u32",15]],["result",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],null,[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[["complex",3]],["bool",15]],[[["float32",3]],["bool",15]],[[["float64",3]],["bool",15]],[[["saturating",3]],["bool",15]],[[["wrapping",3]],["bool",15]],[[["quaddouble",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[["saturating",3]],["option",4,[["ordering",4]]]],[[["wrapping",3]],["option",4,[["ordering",4]]]],[[["quaddouble",3]],["option",4,[["ordering",4]]]],[[["f64",15],["f64",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[["i32",15]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15],["f64",15],["f64",15],["f64",15],["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["u64",15]],[[],["u64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["range",3]],[[],["range",3]],[[],["option",4,[["range",3]]]],[[],["option",4,[["range",3]]]],[[],["rangeinclusive",3]],[[],["rangeinclusive",3]],[[],["option",4,[["rangeinclusive",3]]]],[[],["option",4,[["rangeinclusive",3]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["ordering",4]],[[],["ordering",4]],[[],["ordering",4]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["i128",15]]],[[["i32",15]]],[[["u32",15]]],[[["i64",15]]],[[["u16",15]]],[[["u8",15]]],[[["i8",15]]],[[["usize",15]]],[[]],[[["i16",15]]],[[["isize",15]]],[[["u128",15]]],[[["u64",15]]],[[["usize",15]]],[[["i32",15]]],[[["u32",15]]],[[["i64",15]]],[[]],[[["i128",15]]],[[["isize",15]]],[[["u64",15]]],[[["u128",15]]],[[["i32",15]]],[[["i64",15]]],[[["i128",15]]],[[["usize",15]]],[[]],[[["u128",15]]],[[["u64",15]]],[[["u32",15]]],[[["isize",15]]],[[["u32",15]]],[[["i32",15]]],[[["isize",15]]],[[["i128",15]]],[[["u128",15]]],[[]],[[["u64",15]]],[[["i64",15]]],[[["usize",15]]],[[["isize",15]]],[[]],[[["u64",15]]],[[["u128",15]]],[[["usize",15]]],[[["i32",15]]],[[["i64",15]]],[[["u32",15]]],[[["i128",15]]],[[["i128",15]]],[[["i64",15]]],[[["usize",15]]],[[]],[[["u128",15]]],[[["u64",15]]],[[["isize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["isize",15]],[[],["u32",15]],[[],["i16",15]],[[],["i32",15]],[[],["i64",15]],[[]],[[],["u16",15]],[[],["u64",15]],[[],["usize",15]],[[],["i8",15]],[[],["u128",15]],[[],["u8",15]],[[],["i128",15]],[[],["isize",15]],[[],["i64",15]],[[],["i32",15]],[[]],[[],["u64",15]],[[],["u32",15]],[[],["i128",15]],[[],["usize",15]],[[],["u128",15]],[[],["isize",15]],[[],["i128",15]],[[],["u64",15]],[[],["u32",15]],[[]],[[],["usize",15]],[[],["i32",15]],[[],["i64",15]],[[],["u128",15]],[[],["i128",15]],[[],["isize",15]],[[],["u64",15]],[[]],[[],["u32",15]],[[],["usize",15]],[[],["i32",15]],[[],["u128",15]],[[],["i64",15]],[[],["i128",15]],[[],["usize",15]],[[],["u32",15]],[[],["isize",15]],[[]],[[],["u64",15]],[[],["i64",15]],[[],["i32",15]],[[],["u128",15]],[[],["isize",15]],[[],["i64",15]],[[],["i128",15]],[[]],[[],["usize",15]],[[],["u64",15]],[[],["u128",15]],[[],["localkey",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["i64",15]],[[],["i128",15]],[[],["isize",15]],[[],["i16",15]],[[],["i8",15]],[[],["usize",15]],[[],["u64",15]],[[],["u128",15]],[[],["u32",15]],[[],["u8",15]],[[],["i32",15]],[[],["u64",15]],[[],["u32",15]],[[],["i32",15]],[[],["i128",15]],[[],["usize",15]],[[],["isize",15]],[[],["i64",15]],[[],["u128",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[],["usize",15]],[[],["i32",15]],[[],["i64",15]],[[],["i128",15]],[[],["isize",15]],[[],["u128",15]],[[],["i64",15]],[[],["isize",15]],[[],["i128",15]],[[],["i32",15]],[[],["usize",15]],[[],["u32",15]],[[],["u64",15]],[[],["i128",15]],[[],["isize",15]],[[],["u128",15]],[[],["usize",15]],[[],["i64",15]],[[],["i32",15]],[[],["u64",15]],[[],["u32",15]],[[],["usize",15]],[[],["i64",15]],[[],["isize",15]],[[],["u64",15]],[[],["i128",15]],[[],["u128",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mint",3]],[[["u32",15]]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[["isize",15]]],[[["i32",15]]],[[]],[[["i64",15]]],[[],["u32",15]],[[],["u32",15]],[[],["i64",15]],[[]],[[],["isize",15]],[[],["i32",15]],[[],["isize",15]],[[],["i64",15]],[[],["i32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u64",15]],["u32",15]],[[["u64",15]],["u32",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bytes",3]],[[],["chain",3]],[[],["scanner",3]],[[],["usize1",3]],[[],["chars",3]],[[]],[[]],[[]],[[],["result",4,[["error",3]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["initializer",3]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["scanneriter",3]],[[]],[[["str",15]]],[[],["result",4,[["usize",15],["error",3]]]],[[],["string",3]],[[],["result",4,[["error",3]]]],[[["vec",3]],["result",4,[["usize",15],["error",3]]]],[[["string",3]],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],[[]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["vec",3]],[[["u64",15]],["take",3]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["result",4,[["usize",15],["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["arguments",3]],["result",4,[["error",3]]]],[[],["result",4,[["usize",15],["error",3]]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["knuthmorrispratt",3]],[[],["rollinghash",3]],[[],["multiplerollinghash",3]],[[],["suffixarray",3]],[[],["zarray",3]],[[]],[[]],[[]],[[]],[[]],[[["u64",15],["u64",15],["usize",15]],["u64",15]],[[["usize",15]],["vec",3,[["u64",15]]]],[[["usize",15],["usize",15]],["u64",15]],[[["usize",15],["usize",15]],["vec",3,[["u64",15]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["usize",15]]]],[[["u64",15]],["u64",15]],[[["u64",15],["u64",15]],["u64",15]],[[["u64",15],["u64",15]],["u64",15]],[[["vec",3]]],[[["u64",15]]],[[]],[[["vec",3]]],[[]],[[["usize",15]]],[[["eq",8]],["vec",3,[["usize",15]]]],[[],["vec",3,[["usize",15]]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["xorshift",3]],[[],["notemptysegment",3]],[[],["charwithbase",3]],[[],["charswithbase",3]],[[],["bytewithbase",3]],[[],["bytes",3]],[[],["byteswithbase",3]],[[],["collect",3]],[[],["sizedcollect",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["notemptysegment",3]],["ordering",4]],[[["totalord",3]],["ordering",4]],[[]],[[]],[[["notemptysegment",3]],["bool",15]],[[["totalord",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[["randomspec",8]]],[[["f64",15]],["bool",15]],[[["randomspec",8]],["randiter",3,[["randomspec",8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15],["f64",15]],["bool",15]],[[],["bool",15]],null,[[],["localkey",3]],null,[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["notemptysegment",3]],["bool",15]],[[["totalord",3]],["bool",15]],[[]],[[["u64",15]]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],null,[[["notemptysegment",3]],["option",4,[["ordering",4]]]],[[["totalord",3]],["option",4,[["ordering",4]]]],[[["xorshift",3]]],[[["u64",15]],["u64",15]],[[["xorshift",3]]],null,[[],["u64",15]],[[["xorshift",3]],["randiter",3]],[[["xorshift",3]],["randiter",3]],[[],["f64",15]],[[["u64",15],["usize",15]],["vec",3,[["u64",15]]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],null,null,[[]],[[]],[[]],null,[[]],null,[[],["option",4,[["u32",15]]]],[[],["option",4,[["u32",15]]]],[[],["option",4,[["u32",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4,[["u32",15]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["eulertourforedge",3]],[[],["eulertourforvertex",3]],[[],["eulertourforrichvertex",3]],[[],["lowestcommonancestor",3]],[[],["lcamonoid",3]],[[],["rerooting",3]],[[],["treecenter",4]],[[],["treerec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["treehasher",3]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15],["usize",15],["undirectedsparsegraph",6]]],null,null,null,[[["treecenter",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["lowestcommonancestor",3,[["lcamonoiddispatch",8]]]],[[]],[[["undirectedsparsegraph",6]],["u64",15]],[[["undirectedsparsegraph",6],["usize",15],["usize",15]],["u64",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["usize",15]],["usize",15]],[[["usize",15],["usize",15]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[["treecenter",4]],["bool",15]],[[["usize",15],["undirectedsparsegraph",6]]],[[["undirectedsparsegraph",6]]],[[["usize",15],["undirectedsparsegraph",6]]],[[["usize",15],["undirectedsparsegraph",6]]],[[["undirectedsparsegraph",6]]],[[]],[[["usize",15]]],[[]],null,null,[[["usize",15],["usize",15],["fnmut",8]]],[[["usize",15],["fnmut",8]]],[[["usize",15],["usize",15]]],[[["usize",15],["usize",15],["fnmut",8]]],[[["usize",15],["usize",15],["bool",15],["fnmut",8]]],[[["usize",15],["usize",15],["bool",15],["fnmut",8],["fnmut",8]]],[[["xorshift",3]],["undirectedsparsegraph",6]],[[["xorshift",3]],["undirectedsparsegraph",6]],[[["xorshift",3]],["undirectedsparsegraph",6]],[[["xorshift",3]],["undirectedsparsegraph",6]],[[["vec",3,[["u64",15]]]]],[[["vec",3,[["u64",15]]]]],[[["usize",15],["fnmut",8]]],[[["usize",15],["fnmut",8]]],[[["usize",15],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["usize",15],["bool",15],["fnmut",8]]],null,null,[[],["usize",15]],[[],["usize",15]],[[["u64",15]]],null,null,null,[[["usize",15]],["vec",3,[["u64",15]]]],[[["usize",15]],["vec",3,[["u64",15]]]],[[["usize",15],["fn",8]],["vec",3]],[[],["treecenter",4]],[[["usize",15]]],[[["usize",15]]]],"p":[[8,"MonoidAction"],[8,"Magma"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[3,"PermutationOperation"],[3,"FindMajorityOperation"],[8,"Invertible"],[8,"Unital"],[8,"Monoid"],[8,"BitXorIdentity"],[3,"BitDp"],[8,"MoSolver"],[3,"ConvexHullTrick"],[3,"XorBasis"],[3,"BabyStepGiantStep"],[3,"Subsets"],[3,"Combinations"],[3,"IndependentSubSet"],[3,"RhoPath"],[3,"SlideMinimum"],[3,"SubsetTransform"],[3,"SupersetTransform"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"SliceBisectExt"],[8,"Bisect"],[8,"Trisect"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"LexicographicalSubsequence"],[3,"LongestIncreasingSubsequence"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[8,"Automaton"],[3,"FunctionalAutomaton"],[3,"MappingAutomaton"],[3,"LexicographicalAutomaton"],[3,"RevLexicographicalAutomaton"],[3,"MonoidalAutomaton"],[3,"AlwaysAcceptingAutomaton"],[8,"RankSelectDictionaries"],[3,"BitVector"],[3,"WaveletMatrix"],[3,"Accumulate"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"SlopeTrick"],[3,"MergingUnionFind"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"SegmentTree"],[3,"DequeAggregation"],[3,"BitSet"],[3,"Static2DTree"],[3,"SegmentTree2D"],[3,"Trie"],[3,"Automatondp"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[8,"ToDigitSequence"],[3,"Real"],[4,"Ccw"],[3,"Circle"],[3,"Line"],[3,"LineSegment"],[3,"TwoSatisfiability"],[3,"AdjacencyListGraph"],[3,"DinicBuilder"],[3,"PrimalDualBuilder"],[3,"SparseGraph"],[3,"GridGraph"],[3,"LowLink"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraphScanner"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"EdgeListGraph"],[3,"Dinic"],[3,"PrimalDual"],[3,"DirectedEdge"],[3,"UndirectedEdge"],[3,"BidirectionalEdge"],[3,"Adjacency"],[3,"StronglyConnectedComponent"],[8,"SparseGraphConstruction"],[6,"DirectedSparseGraph"],[6,"UndirectedSparseGraph"],[6,"BidirectionalSparseGraph"],[3,"Mersenne61"],[3,"Mersenne127"],[8,"FormalPowerSeriesMultiplier"],[3,"FormalPowerSeries"],[3,"Polynomial"],[3,"DefaultFormalPowerSeriesMultiplier"],[3,"NumberTheoreticTransform"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"Matrix"],[3,"PrimeTable"],[3,"EulerPhiTable"],[8,"NttModulus"],[8,"FormalPowerSeriesCoefficientSqrt"],[3,"Modulo2113929217"],[3,"Modulo1811939329"],[3,"Modulo2013265921"],[3,"NttCache"],[3,"PrimeList"],[3,"PrimeListTrialDivision"],[3,"Float32"],[3,"Float64"],[3,"Saturating"],[3,"Wrapping"],[3,"QuadDouble"],[8,"Float"],[8,"IntBase"],[8,"MIntBase"],[8,"Unsigned"],[8,"Signed"],[3,"Complex"],[3,"MInt"],[8,"DiscreteSteps"],[3,"ExtendedGcd"],[8,"BinaryRepr"],[8,"RangeBoundsExt"],[8,"MIntConvert"],[8,"Bounded"],[8,"One"],[8,"Zero"],[3,"Modulo2"],[3,"Modulo998244353"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"DynModuloU32"],[3,"DynModuloU64"],[3,"Modulo998244353"],[8,"MontgomeryReduction32"],[3,"Scanner"],[3,"Usize1"],[3,"Chars"],[8,"Read"],[8,"Write"],[3,"RollingHash"],[3,"KnuthMorrisPratt"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"NotEmptySegment"],[3,"CharWithBase"],[3,"CharsWithBase"],[3,"ByteWithBase"],[3,"BytesWithBase"],[3,"TotalOrd"],[3,"SimuratedAnnealing"],[8,"IterScan"],[8,"MarkedIterScan"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[3,"ScannerIter"],[3,"Xorshift"],[3,"RandIter"],[3,"Bytes"],[3,"Collect"],[3,"SizedCollect"],[8,"PartialOrdExt"],[8,"CharTools"],[8,"RandomSpec"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[4,"TreeCenter"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"LcaMonoidDefaultId"],[3,"LcaMonoid"],[3,"HeavyLightDecomposition"],[3,"ReRooting"],[3,"TreeHasher"],[3,"TreeRec"],[8,"LcaMonoidDispatch"],[13,"One"],[13,"Two"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,5,5,0,0,0,5,5,5],"n":["datastructure","graph","math","sample","string","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_kth_smallest","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","bipartitematching","directedmst","lca_euler_tour","lca_hld","scc","convolution_mod","convolution_mod_1000000007","enumerate_primes","exp_of_formal_power_series","factorize","inv_of_formal_power_series","log_of_formal_power_series","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","convolution_mod","convolution_mod_1000000007","enumerate_primes","exp_of_formal_power_series","factorize","inv_of_formal_power_series","log_of_formal_power_series","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","number_of_substrings","suffixarray","zalgorithm"],"q":["library_checker","","","","","library_checker::datastructure","","","","","","","","","","library_checker::datastructure::point_add_range_sum","","library_checker::datastructure::point_set_range_composite","library_checker::datastructure::queue_operate_all_composite","library_checker::datastructure::range_affine_range_sum","library_checker::datastructure::range_kth_smallest","library_checker::datastructure::staticrmq","","library_checker::datastructure::unionfind","library_checker::datastructure::vertex_add_path_sum","library_checker::datastructure::vertex_add_subtree_sum","library_checker::datastructure::vertex_set_path_composite","library_checker::graph","","","","library_checker::graph::bipartitematching","library_checker::graph::directedmst","library_checker::graph::lca","","library_checker::graph::scc","library_checker::math","","","","","","","","","","","","","library_checker::math::convolution_mod","library_checker::math::convolution_mod_1000000007","library_checker::math::enumerate_primes","library_checker::math::exp_of_formal_power_series","library_checker::math::factorize","library_checker::math::inv_of_formal_power_series","library_checker::math::log_of_formal_power_series","library_checker::math::pow_of_formal_power_series","library_checker::math::sharp_p_subset_sum","library_checker::math::sqrt_mod","library_checker::math::sqrt_of_formal_power_series","library_checker::math::sum_of_floor_of_linear","library_checker::math::two_sat","library_checker::sample","","library_checker::sample::aplusb","library_checker::sample::many_aplusb","library_checker::string","","","library_checker::string::number_of_substrings","library_checker::string::suffixarray","library_checker::string::zalgorithm"],"d":["","","","","","","","","","","","","","","","✅  AC  101ms","✅  AC  113ms","✅  AC  217ms","✅  AC  47ms","✅  AC  623ms","✅  AC  357ms","✅  AC  152ms","✅  AC  168ms","✅  AC  22ms","✅  AC  640ms","✅  AC  320ms","✅  AC  218ms","","","","","✅  AC  941ms","✅  AC  171ms","✅  AC  645ms","✅  AC  368ms","✅  AC  239ms","","","","","","","","","","","","","","✅  AC  320ms","✅  AC  592ms","✅  AC  2326ms","✅  AC  1442ms","✅  AC  2058ms","✅  AC  548ms","✅  AC  815ms","✅  AC  2234ms","✅  AC  1968ms","✅  AC  146ms","✅  AC  1107ms","✅  AC  75ms","✅  AC  271ms","","","✅  AC  0ms","✅  AC  182ms","","","","✅  AC  1093ms","✅  AC  792ms","✅  AC  40ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],null,null,null,[[]],[[]],[[]]],"p":[],"a":{"verify":[15,16,17,18,19,20,21,22,23,24,25,26,31,32,33,34,35,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,69,70,71]}}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};