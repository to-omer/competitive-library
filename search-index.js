var searchIndex = JSON.parse('{\
"competitive":{"doc":"github","i":[[0,"algebra","competitive","algebra",null,null],[3,"MaxOperation","competitive::algebra","binary operation to select larger element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"FirstOperation","","retain the first element",null,null],[3,"LastOperation","","retain the last element",null,null],[3,"AdditiveOperation","","$+$",null,null],[3,"MultiplicativeOperation","","$\\\\times$",null,null],[3,"LinearOperation","","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"BitAndOperation","","&",null,null],[3,"BitOrOperation","","|",null,null],[3,"BitXorOperation","","^",null,null],[3,"MonoidalOperation","","",null,null],[3,"GroupOperation","","",null,null],[3,"AssocoativeOperator","","",null,null],[3,"AbsorbedAssocoativeOperator","","",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"CountingOperation","","",null,null],[3,"ReverseOperation","","",null,null],[11,"new","","",0,[[]]],[11,"new","","",1,[[]]],[11,"new","","",2,[[]]],[11,"new","","",3,[[]]],[11,"new","","",4,[[]]],[11,"new","","",5,[[]]],[11,"new","","",6,[[]]],[11,"new","","",7,[[]]],[11,"new","","",8,[[]]],[11,"new","","",9,[[]]],[11,"new","","",10,[[]]],[11,"new","","",11,[[]]],[11,"new","","",12,[[]]],[11,"new","","",13,[[]]],[11,"new","","",14,[[]]],[11,"new","","",15,[[]]],[8,"Magma","","binary operaion: $T \\\\circ T \\\\to T$",null,null],[16,"T","","type of operands: $T$",16,null],[10,"operate","","binary operaion: $\\\\circ$",16,[[]]],[11,"reverse_operate","","",16,[[]]],[8,"Associative","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c…",null,null],[8,"SemiGroup","","associative binary operation",null,null],[8,"Unital","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e =…",null,null],[10,"unit","","identity element: $e$",17,[[]]],[8,"Monoid","","associative binary operation and an identity element",null,null],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",18,[[]]],[8,"Invertible","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b…",null,null],[10,"inverse","","$a$ where $a \\\\circ x = e$",19,[[]]],[11,"rinv_operate","","",19,[[]]],[8,"Group","","associative binary operation and an identity element and…",null,null],[8,"Commutative","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$",null,null],[8,"AbelianMonoid","","commutative monoid",null,null],[8,"AbelianGroup","","commutative group",null,null],[8,"Idempotent","","$\\\\forall a \\\\in T, a \\\\circ a = a$",null,null],[8,"IdempotentMonoid","","idempotent monoid",null,null],[8,"MinimumBounded","","",null,null],[10,"minimum","","",20,[[]]],[8,"MaximumBounded","","",null,null],[10,"maximum","","",21,[[]]],[8,"BitAndIdentity","","",null,null],[10,"all_one","","",22,[[]]],[8,"BitOrIdentity","","",null,null],[10,"all_zero","","",23,[[]]],[8,"BitXorIdentity","","",null,null],[10,"xor_zero","","",24,[[]]],[0,"algorithm","competitive","algorithm",null,null],[3,"CHTLine","competitive::algorithm","",null,null],[3,"ConvexHullTrick","","",null,null],[3,"SlideMinimum","","",null,null],[3,"SubsetTransform","","",null,null],[3,"SupersetTransform","","",null,null],[3,"DivisorTransform","","",null,null],[3,"MultipleTransform","","",null,null],[5,"product","","choose `r` elements from `n` independently",null,[[]]],[5,"permutations","","choose distinct `r` elements from `n` in any order",null,[[]]],[5,"combinations","","choose distinct `r` elements from `n` in sorted order",null,[[]]],[5,"combinations_with_replacement","","choose `r` elements from `n` in sorted order",null,[[]]],[5,"binary_search","","",null,[[["fn",8],["bisect",8]],["bisect",8]]],[5,"lower_bound","","",null,[[["bisect",8],["ord",8]]]],[5,"upper_bound","","",null,[[["bisect",8],["ord",8]]]],[5,"ternary_search","","",null,[[["fn",8],["trisect",8]],["trisect",8]]],[5,"slide_minimum","","",null,[[["vec",3]],["vec",3]]],[11,"new","","",25,[[]]],[11,"value","","",25,[[]]],[11,"check","","",25,[[]]],[11,"new","","",26,[[]]],[11,"add_line","","k-th add_line(a_k, b_k): a_k >= a_{k+1}",26,[[]]],[11,"query","","",26,[[]]],[11,"new","","",27,[[]]],[11,"next","","",27,[[]]],[11,"new","","",28,[[]]],[11,"zeta_transform","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$",28,[[]]],[11,"mobius_transform","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$",28,[[]]],[11,"convolve","","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$",28,[[["monoid",8],["vec",3]],["vec",3]]],[11,"new","","",29,[[]]],[11,"zeta_transform","","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$",29,[[]]],[11,"mobius_transform","","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$",29,[[]]],[11,"convolve","","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$",29,[[["monoid",8],["vec",3]],["vec",3]]],[11,"new","","",30,[[["vec",3]]]],[11,"zeta_transform","","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$",30,[[]]],[11,"mobius_transform","","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$",30,[[]]],[11,"convolve","","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$",30,[[["monoid",8],["vec",3]],["vec",3]]],[11,"new","","",31,[[["vec",3]]]],[11,"zeta_transform","","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$",31,[[]]],[11,"mobius_transform","","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$",31,[[]]],[11,"convolve","","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$",31,[[["monoid",8],["vec",3]],["vec",3]]],[8,"MoSolver","","",null,null],[16,"Answer","","",32,null],[10,"insert","","",32,[[]]],[10,"remove","","",32,[[]]],[10,"answer","","",32,[[]]],[11,"mo_solve","","",32,[[]]],[8,"Bisect","","binary search helper",null,null],[10,"halve","","return between two elements",33,[[]]],[10,"section_end","","the end condition of binary search",33,[[]]],[8,"Trisect","","",null,null],[10,"next","","",34,[[]]],[10,"section_end","","",34,[[]]],[0,"combinatorial_optimization","competitive","",null,null],[3,"KnapsackPloblemSmallWeight","competitive::combinatorial_optimization","",null,null],[12,"dp","","",35,null],[3,"KnapsackPloblemSmallValue","","",null,null],[12,"dp","","",36,null],[3,"ZeroOneKnapsackProblemSmallItems","","",null,null],[3,"ZeroOneKnapsackPloblemBranchAndBound","","",null,null],[3,"LongestIncreasingSubsequence","","",null,null],[12,"dp","","",37,null],[5,"largest_square","","",null,[[]]],[5,"largest_rectangle","","",null,[[]]],[5,"largest_rectangle_in_grid","","",null,[[]]],[5,"levenshtein_distance","","",null,[[]]],[11,"new","","",38,[[]]],[11,"solve","","",38,[[]]],[11,"new","","",35,[[]]],[11,"max_weight","","",35,[[]]],[11,"insert","","",35,[[]]],[11,"extend","","",35,[[["intoiterator",8]]]],[11,"insert01","","",35,[[]]],[11,"extend01","","",35,[[["intoiterator",8]]]],[11,"insert_limitation","","",35,[[]]],[11,"extend_limitation","","",35,[[["intoiterator",8]]]],[11,"insert_limitation2","","",35,[[]]],[11,"extend_limitation2","","",35,[[["intoiterator",8]]]],[11,"solve","","",35,[[]]],[11,"new","","",36,[[]]],[11,"insert","","",36,[[]]],[11,"extend","","",36,[[["intoiterator",8]]]],[11,"insert01","","",36,[[]]],[11,"extend01","","",36,[[["intoiterator",8]]]],[11,"insert_limitation","","",36,[[]]],[11,"extend_limitation","","",36,[[["intoiterator",8]]]],[11,"solve","","",36,[[]]],[11,"new","","",39,[[]]],[11,"insert","","",39,[[]]],[11,"extend","","",39,[[["intoiterator",8]]]],[11,"solve","","",39,[[]]],[11,"new","","",37,[[]]],[11,"len","","",37,[[]]],[11,"insert","","",37,[[]]],[11,"extend","","",37,[[["intoiterator",8]]]],[0,"data_structure","competitive","data structures",null,null],[3,"IntersectionAutomaton","competitive::data_structure","",null,null],[3,"UnionAutomaton","","",null,null],[3,"ProductAutomaton","","",null,null],[3,"LessThanAutomaton","","",null,null],[3,"GreaterThanAutomaton","","",null,null],[3,"ContainAutomaton","","",null,null],[3,"ContainCounterAutomaton","","",null,null],[3,"AlwaysAcceptingAutomaton","","",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"BinaryIndexedTree2D","","",null,null],[3,"BitVector","","",null,null],[3,"BitSet","","",null,null],[3,"DisjointSparseTable","","",null,null],[3,"Static2DTree","","",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"SegmentTree","","",null,null],[3,"DequeAggregation","","",null,null],[3,"QueueAggregation","","",null,null],[3,"Trie","","",null,null],[3,"UnionFind","","",null,null],[3,"WeightedUnionFind","","",null,null],[3,"MergingUnionFind","","",null,null],[3,"WaveletMatrix","","",null,null],[5,"automaton_dp","","",null,[[]]],[11,"new","","",40,[[]]],[11,"new","","",41,[[]]],[11,"new","","",42,[[]]],[11,"new","","",43,[[]]],[11,"accumulate0","","fold [0, k)",43,[[]]],[11,"accumulate","","fold [0, k]",43,[[]]],[11,"update","","",43,[[]]],[11,"fold","","",43,[[]]],[11,"get","","",43,[[]]],[11,"set","","",43,[[]]],[11,"lower_bound","","",43,[[]]],[11,"new","","",44,[[]]],[11,"accumulate0","","fold [0, i) x [0, j)",44,[[]]],[11,"accumulate","","fold [0, i] x [0, j]",44,[[]]],[11,"update","","",44,[[]]],[11,"fold","","0-indexed [i1, i2) x [j1, j2)",44,[[]]],[11,"get","","",44,[[]]],[11,"set","","",44,[[]]],[11,"new","","",45,[[]]],[11,"ones","","",45,[[]]],[11,"get","","",45,[[]]],[11,"set","","",45,[[]]],[11,"count_ones","","",45,[[]]],[11,"count_zeros","","",45,[[]]],[11,"shl_bitor_assign","","",45,[[]]],[11,"shr_bitor_assign","","",45,[[]]],[11,"new","","",46,[[["vec",3]]]],[11,"len","","",46,[[]]],[11,"fold_close","","",46,[[]]],[11,"fold","","",46,[[]]],[11,"new","","",47,[[]]],[11,"range","","",47,[[["range",3],["range",3]],["vec",3]]],[11,"new","","",48,[[]]],[11,"from_vec","","",48,[[["vec",3]]]],[11,"update","","",48,[[]]],[11,"fold","","",48,[[]]],[11,"set","","",48,[[]]],[11,"get","","",48,[[]]],[11,"fold_all","","",48,[[]]],[11,"as_slice","","",48,[[]]],[11,"as_slice_lazy","","",48,[[]]],[11,"new","","",49,[[]]],[11,"from_vec","","",49,[[["vec",3]]]],[11,"set","","",49,[[]]],[11,"update","","",49,[[]]],[11,"get","","",49,[[]]],[11,"fold","","",49,[[]]],[11,"fold_all","","",49,[[]]],[11,"lower_bound_all","","left most index [0, r) that satisfies monotonic condition",49,[[["fn",8]]]],[11,"lower_bound","","left most index [l, r) that satisfies monotonic condition",49,[[["fn",8]]]],[11,"as_slice","","",49,[[]]],[11,"new","","",50,[[]]],[11,"len","","",50,[[]]],[11,"is_empty","","",50,[[]]],[11,"fold_all","","",50,[[]]],[11,"last","","",50,[[],["option",4]]],[11,"push","","",50,[[]]],[11,"pop","","",50,[[],["option",4]]],[11,"new","","",51,[[]]],[11,"len","","",51,[[]]],[11,"is_empty","","",51,[[]]],[11,"fold_all","","",51,[[]]],[11,"front","","",51,[[],["option",4]]],[11,"back","","",51,[[],["option",4]]],[11,"push_front","","",51,[[]]],[11,"push_back","","",51,[[]]],[11,"pop_front","","",51,[[],["option",4]]],[11,"pop_back","","",51,[[],["option",4]]],[11,"reverse","","",51,[[]]],[11,"new","","",52,[[]]],[11,"insert_at","","",52,[[],["vec",3]]],[11,"insert","","",52,[[],["vec",3]]],[11,"find_at","","",52,[[],["result",4]]],[11,"find","","",52,[[],["result",4]]],[11,"next_node","","",52,[[],["option",4]]],[11,"count","","",52,[[]]],[11,"next_count","","",52,[[]]],[11,"new","","",53,[[["fn",8]]]],[11,"find","","",53,[[]]],[11,"find_root","","",53,[[],[["rootdata",3],["ref",3]]]],[11,"find_root_mut","","",53,[[],[["rootdata",3],["refmut",3]]]],[11,"unite","","",53,[[]]],[11,"size","","",53,[[]]],[11,"same","","",53,[[]]],[11,"members","","",53,[[],["vec",3]]],[11,"roots","","",53,[[],["vec",3]]],[11,"all_group_members","","",53,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",54,[[]]],[11,"find","","",54,[[]]],[11,"unite","","",54,[[]]],[11,"size","","",54,[[]]],[11,"same","","",54,[[]]],[11,"members","","",54,[[],["vec",3]]],[11,"roots","","",54,[[],["vec",3]]],[11,"all_group_members","","",54,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",55,[[]]],[11,"find","","",55,[[]]],[11,"get_weight","","",55,[[]]],[11,"unite","","",55,[[]]],[11,"size","","",55,[[]]],[11,"is_same","","",55,[[]]],[11,"get_difference","","",55,[[],["option",4]]],[11,"members","","",55,[[],["vec",3]]],[11,"roots","","",55,[[],["vec",3]]],[11,"all_group_members","","",55,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",56,[[["vec",3],["clone",8],["rankselectdictionaries",8]]]],[11,"access","","get k-th value",56,[[]]],[11,"rank","","the number of val in range",56,[[["range",3]]]],[11,"select","","index of k-th val",56,[[],["option",4]]],[11,"quantile","","get k-th smallest value in range",56,[[["range",3]]]],[11,"rank_lessthan","","the number of value less than val in range",56,[[["range",3]]]],[11,"rank_range","","the number of valrange in range",56,[[["range",3]]]],[8,"Automaton","","",null,null],[16,"Alphabet","","",57,null],[16,"State","","",57,null],[16,"Effect","","",57,null],[10,"initial","","",57,[[]]],[10,"next","","",57,[[],["option",4]]],[10,"accept","","",57,[[]]],[8,"RankSelectDictionaries","","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1",null,null],[10,"bit_length","","",58,[[]]],[10,"access","","get k-th bit",58,[[]]],[11,"rank1","","the number of 1 in [0, k)",58,[[]]],[11,"rank0","","the number of 0 in [0, k)",58,[[]]],[11,"select1","","index of k-th 1",58,[[],["option",4]]],[11,"select0","","index of k-th 0",58,[[],["option",4]]],[0,"geometry","competitive","",null,null],[3,"Circle","competitive::geometry","",null,null],[3,"Line","","",null,null],[3,"LineSegment","","",null,null],[3,"Real","","",null,null],[12,"0","","",59,null],[4,"CCW","","",null,null],[13,"OnlineFront","","a--b--c",60,null],[13,"Clockwise","","a--b-vc",60,null],[13,"OnSegment","","a--c--b",60,null],[13,"CounterClockwise","","a--b-^c",60,null],[13,"OnlineBack","","c--a--b",60,null],[5,"closest_pair","","",null,[[["vec",3],["point",6]]]],[5,"convex_hull","","",null,[[["vec",3],["point",6]],[["vec",3],["point",6]]]],[5,"convex_diameter","","",null,[[["vec",3],["point",6]]]],[5,"ccw","","",null,[[["point",6]],["ccw",4]]],[11,"new","","",61,[[["point",6]]]],[11,"cross_circle","","",61,[[],["option",4]]],[11,"contains_point","","",61,[[["point",6]]]],[11,"new","","",62,[[["point",6]]]],[11,"dir","","",62,[[],["point",6]]],[11,"ccw","","",62,[[["point",6]],["ccw",4]]],[11,"projection","","",62,[[["point",6]],["point",6]]],[11,"reflection","","",62,[[["point",6]],["point",6]]],[11,"distance_point","","",62,[[["point",6]]]],[11,"is_parallel","","",62,[[]]],[11,"is_orthogonal","","",62,[[]]],[11,"new","","",63,[[["point",6]]]],[11,"dir","","",63,[[],["point",6]]],[11,"ccw","","",63,[[["point",6]],["ccw",4]]],[11,"projection","","",63,[[["point",6]],["point",6]]],[11,"reflection","","",63,[[["point",6]],["point",6]]],[11,"is_parallel","","",63,[[]]],[11,"is_orthogonal","","",63,[[]]],[11,"intersect","","",63,[[]]],[11,"intersect_point","","",63,[[["point",6]]]],[11,"cross_point","","",63,[[],[["point",6],["option",4]]]],[11,"distance_point","","",63,[[["point",6]]]],[11,"distance","","",63,[[]]],[6,"Point","","",null,null],[17,"EPS","","",null,null],[0,"graph","competitive","graph structures and algorithms",null,null],[3,"Adjacent","competitive::graph","",null,null],[12,"id","","",64,null],[12,"to","","",64,null],[3,"AdjacencyListGraph","","",null,null],[12,"vsize","","",65,null],[12,"esize","","",65,null],[12,"graph","","",65,null],[3,"GraphScanner","","",null,null],[3,"GraphRec","","",null,null],[12,"n","","",66,null],[12,"visited","","",66,null],[12,"cost","","",66,null],[3,"GraphEidCache","","",null,null],[3,"GridGraph","","",null,null],[3,"Adjacent4","","",null,null],[3,"Adjacent8","","",null,null],[3,"EdgeListGraph","","Graph represented by a list of edges.",null,null],[3,"EdgeListGraphScanner","","",null,null],[3,"LowLink","","",null,null],[12,"low","","",67,null],[12,"ord","","",67,null],[12,"articulation","","",67,null],[12,"bridge","","",67,null],[3,"RevEdge","","",null,null],[12,"to","","",68,null],[12,"rev","","",68,null],[12,"cap","","",68,null],[3,"FordFulkerson","","",null,null],[3,"Dinic","","",null,null],[12,"graph","","",69,null],[3,"RevCEdge","","",null,null],[12,"to","","",70,null],[12,"rev","","",70,null],[12,"cap","","",70,null],[12,"cost","","",70,null],[3,"PrimalDual","","",null,null],[3,"DirectedEdge","","",null,null],[3,"UndirectedEdge","","",null,null],[3,"Adjacency","","",null,null],[12,"id","","",71,null],[12,"to","","",71,null],[3,"SparseGraph","","Static Sparse Graph represented as Compressed Sparse Row.",null,null],[3,"AdjacencyGraphScanner","","",null,null],[3,"TreeGraphScanner","","",null,null],[3,"StronglyConnectedComponent","","",null,null],[3,"TwoSatisfiability","","",null,null],[11,"new","","",64,[[],["adjacent",3]]],[11,"new","","",65,[[],["adjacencylistgraph",3]]],[11,"add_edge","","",65,[[]]],[11,"add_undirected_edge","","",65,[[]]],[11,"vertices","","",65,[[],["range",3]]],[11,"adjacency","","",65,[[],["vec",3]]],[11,"eid_cache","","",65,[[],["grapheidcache",3]]],[11,"new","","",72,[[]]],[11,"new","","",66,[[]]],[11,"dfs","","",66,[[["adjacencylistgraph",3]]]],[11,"new","","",73,[[]]],[11,"adjacency4","","",73,[[],["adjacent4",3]]],[11,"adjacency8","","",73,[[],["adjacent8",3]]],[11,"new","","Construct empty graph.",74,[[]]],[11,"vertices_size","","Return the number of vertices.",74,[[]]],[11,"edges_size","","Return the number of edges.",74,[[]]],[11,"vertices","","Return an iterator over graph vertices.",74,[[],["range",3]]],[11,"edges","","",74,[[],["iter",3]]],[11,"from_edges","","Construct graph from edges.",74,[[["vec",3]]]],[11,"new","","",75,[[]]],[11,"new","","",67,[[["undirectedsparsegraph",6]]]],[11,"new","","",68,[[]]],[11,"new","","",76,[[]]],[11,"add_edge","","",76,[[]]],[11,"dfs","","",76,[[]]],[11,"maximum_flow","","",76,[[]]],[11,"new","","",69,[[]]],[11,"add_edge","","",69,[[]]],[11,"maximum_flow","","",69,[[]]],[11,"new","","",70,[[]]],[11,"new","","",77,[[]]],[11,"add_edge","","",77,[[]]],[11,"minimum_cost_flow","","",77,[[],["option",4]]],[11,"minimum_spanning_tree","","",74,[[],["vec",3]]],[11,"minimum_spanning_arborescence","","tarjan",74,[[],["option",4]]],[11,"new","","",71,[[],["adjacency",3]]],[11,"new","","",78,[[]]],[11,"new","","",79,[[],[["undirectededge",3],["adjacencygraphscanner",3]]]],[11,"new","","",80,[[["directedsparsegraph",6]]]],[11,"gen_cgraph","","",80,[[],["directedsparsegraph",6]]],[11,"components","","",80,[[],[["vec",3],["vec",3]]]],[11,"has_loop","","",80,[[]]],[11,"size","","",80,[[]]],[11,"new","","",81,[[]]],[11,"add_inner","","",81,[[]]],[11,"add_or","","",81,[[]]],[11,"add_nand","","",81,[[]]],[11,"set_true","","",81,[[]]],[11,"set_false","","",81,[[]]],[11,"two_satisfiability","","",81,[[],[["option",4],["vec",3]]]],[6,"DirectedSparseGraph","","",null,null],[6,"UndirectedSparseGraph","","",null,null],[6,"DirectedGraphScanner","","",null,null],[6,"UndirectedGraphScanner","","",null,null],[8,"AdjacencyGraphDijkstraExt","","",null,null],[11,"dijkstra","","",82,[[],[["option",4],["vec",3]]]],[8,"AdjacencyGraphBellmanFordExt","","",null,null],[11,"bellman_ford","","",83,[[]]],[8,"AdjacencyGraphWarshallFloydExt","","",null,null],[11,"warshall_floyd","","",84,[[],[["vec",3],["vec",3]]]],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[8,"AdjacencyGraphTopologicalSortExt","","",null,null],[11,"topological_sort","","",86,[[],["vec",3]]],[0,"math","competitive","mathematical datas",null,null],[3,"MemorizedFactorial","competitive::math","",null,null],[12,"fact","","",87,null],[12,"inv_fact","","",87,null],[3,"SmallModMemorizedFactorial","","",null,null],[3,"Matrix","","",null,null],[12,"shape","","",88,null],[12,"data","","",88,null],[3,"NumberTheoreticTransform","","",null,null],[3,"BabyStepGiantStep","","",null,null],[3,"Polynomial","","",null,null],[12,"data","","",89,null],[3,"PrimeTable","","",null,null],[3,"EulerPhiTable","","",null,null],[5,"fast_fourier_transform","","",null,[[["complex",3],["vec",3]],[["complex",3],["vec",3]]]],[5,"convolve_i64","","",null,[[["vec",3]],["vec",3]]],[5,"gcd","","",null,[[]]],[5,"gcd_binary","","",null,[[]]],[5,"lcm","","",null,[[]]],[5,"extgcd","","",null,[[]]],[5,"extgcd_loop","","",null,[[]]],[5,"extgcd_binary","","",null,[[]]],[5,"modinv","","",null,[[]]],[5,"modinv_loop","","",null,[[]]],[5,"modinv_extgcd_binary","","0 < a < p, gcd(a, p) == 1, p is prime > 2",null,[[]]],[5,"lagrange_interpolation","","",null,[[["mint",3],["modulus",8]],[["mint",3],["modulus",8]]]],[5,"lagrange_interpolation_polynomial","","",null,[[["vec",3]],[["vec",3],["mint",3]]]],[5,"convolve2","","max(a.len(), b.len()) * max(a) * max(b) < 3.64 * 10^18",null,[[["vec",3]],["vec",3]]],[5,"convolve3","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],[["vec",3],["mint",3]]]],[5,"convolve3_128","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],["vec",3]]],[5,"binary_exponentiation","","",null,[[["clone",8],["mulassign",8]],[["clone",8],["mulassign",8]]]],[5,"floor_sum","","Sum of Floor of Linear",null,[[]]],[5,"linear_congruence","","return: (y,z)",null,[[],["option",4]]],[5,"prime_factors","","",null,[[],["vec",3]]],[5,"divisors","","",null,[[],["vec",3]]],[5,"primes","","",null,[[],["vec",3]]],[5,"pow","","",null,[[]]],[5,"miller_rabin","","",null,[[]]],[5,"find_factor","","",null,[[]]],[5,"find_factor2","","",null,[[]]],[5,"prime_factors_rho","","",null,[[],["vec",3]]],[5,"euler_phi","","",null,[[]]],[5,"moebius","","g(d) = Sigma mu(d) * f(n/d)",null,[[],["hashmap",3]]],[5,"segmented_sieve_primes","","",null,[[],["vec",3]]],[11,"new","","",87,[[]]],[11,"combination","","",87,[[],["mint",3]]],[11,"permutation","","",87,[[],["mint",3]]],[11,"homogeneous_product","","",87,[[],["mint",3]]],[11,"inv","","",87,[[],["mint",3]]],[11,"new","","",90,[[]]],[11,"factorial","","n! = a * p^e",90,[[]]],[11,"combination","","",90,[[],["mint",3]]],[11,"lagrange_interpolation","","Lagrange interpolation with (i, f(i)) (0 <= i <= n)",87,[[["mint",3]],["mint",3]]],[11,"new","","",88,[[]]],[11,"from_vec","","",88,[[["vec",3],["vec",3]]]],[11,"zeros","","",88,[[]]],[11,"eye","","",88,[[]]],[11,"pow","","",88,[[]]],[11,"row_reduction","","",88,[[]]],[11,"rank","","",88,[[]]],[11,"solve_system_of_linear_equations","","",88,[[["vec",3]],[["vec",3],["option",4]]]],[11,"inverse","","",88,[[],[["matrix",3],["option",4]]]],[11,"convert","","",91,[[["intoiterator",8]],[["vec",3],["mint",3]]]],[11,"ntt","","",91,[[["vec",3],["mint",3]],[["vec",3],["mint",3]]]],[11,"convolve","","",91,[[["vec",3],["mint",3]],[["vec",3],["mint",3]]]],[11,"convolve_it","","",91,[[["intoiterator",8]],[["vec",3],["mint",3]]]],[11,"new","","",92,[[]]],[11,"solve","","",92,[[],["option",4]]],[11,"from_vec","","",89,[[["vec",3]]]],[11,"len","","",89,[[]]],[11,"assign","","",89,[[]]],[11,"pow","","",89,[[]]],[11,"new","","",93,[[]]],[11,"is_prime","","",93,[[]]],[11,"prime_factors","","",93,[[],["vec",3]]],[11,"new","","",94,[[]]],[11,"get","","",94,[[]]],[6,"NTT998244353","","",null,null],[8,"NTTModulus","","",null,null],[10,"primitive_root","","",95,[[]]],[0,"num","competitive","",null,null],[3,"Complex","competitive::num","",null,null],[12,"re","","",96,null],[12,"im","","",96,null],[3,"MInt","","",null,null],[3,"QuadDouble","","ref: https://na-inet.jp/na/qd_ja.pdf",null,null],[12,"0","","",97,null],[11,"new","","",96,[[]]],[11,"transpose","","",96,[[]]],[11,"conjugate","","",96,[[]]],[11,"dot","","",96,[[]]],[11,"cross","","",96,[[]]],[11,"norm","","",96,[[]]],[11,"polar","","",96,[[]]],[11,"abs","","",96,[[]]],[11,"unit","","",96,[[]]],[11,"angle","","",96,[[]]],[11,"new","","",98,[[]]],[11,"new_unchecked","","",98,[[]]],[11,"inner","","",98,[[]]],[11,"get_mod","","",98,[[]]],[11,"pow","","",98,[[]]],[11,"inv","","only prime modulus",98,[[]]],[11,"new","","",97,[[]]],[11,"renormalize","","",97,[[]]],[11,"is_zero","","",97,[[]]],[11,"is_sign_negative","","",97,[[]]],[11,"sqrt","","",97,[[]]],[11,"abs","","",97,[[]]],[11,"div2","","",97,[[]]],[0,"modulus","","",null,null],[3,"Modulo1000000007","competitive::num::modulus","",null,null],[3,"Modulo1000000009","","",null,null],[3,"Modulo998244353","","",null,null],[3,"DynModulo","","",null,null],[5,"set_dyn_modulus","","",null,[[]]],[6,"MInt1000000007","","",null,null],[6,"MInt1000000009","","",null,null],[6,"MInt998244353","","",null,null],[6,"DynMInt","","",null,null],[8,"Modulus","competitive::num","",null,null],[10,"get_modulus","","",99,[[]]],[11,"modulo","","",99,[[]]],[8,"Zero","","",null,null],[10,"zero","","",100,[[]]],[11,"is_zero","","",100,[[]]],[8,"One","","",null,null],[10,"one","","",101,[[]]],[11,"is_one","","",101,[[]]],[0,"string","competitive","string algorithems",null,null],[3,"KnuthMorrisPratt","competitive::string","",null,null],[3,"MultipleRollingHash","","",null,null],[3,"RollingHash","","",null,null],[3,"SuffixArray","","",null,null],[3,"Zarray","","",null,null],[11,"new","","",102,[[["vec",3]]]],[11,"search_all","","",102,[[["vec",3]],["vec",3]]],[18,"MOD","","",103,null],[11,"mersenne_mod","","",103,[[]]],[11,"mersenne_mul","","",103,[[]]],[11,"mersenne_mul_mod","","",103,[[]]],[11,"new","","",103,[[["vec",3]]]],[11,"hash_once","","",103,[[["vec",3]]]],[11,"find","","S [l, r)",103,[[]]],[11,"concat","","",103,[[]]],[11,"new","","",104,[[["vec",3]]]],[11,"new_rand","","",104,[[["vec",3]]]],[11,"find","","",104,[[],["vec",3]]],[11,"concat","","",104,[[["vec",3]],["vec",3]]],[11,"new","","",105,[[["vec",3]]]],[11,"len","","",105,[[]]],[11,"longest_common_prefix_array","","",105,[[],["vec",3]]],[11,"new","","",106,[[]]],[11,"search","","",106,[[["eq",8],["vec",3]],["vec",3]]],[0,"tools","competitive","",null,null],[3,"Counter","competitive::tools","",null,null],[3,"SimuratedAnnealing","","",null,null],[12,"iter_count","","",107,null],[12,"now","","",107,null],[12,"time","","",107,null],[12,"temperture","","",107,null],[12,"log_table","","",107,null],[12,"rand","","",107,null],[3,"Xorshift","","",null,null],[3,"Scanner","","",null,null],[3,"TotalOrd","","implement Ord by PartialOrd",null,null],[12,"0","","",108,null],[5,"echo","","",null,[[],["result",6]]],[5,"read_stdin_all","","",null,[[],["string",3]]],[5,"read_all","","",null,[[],["string",3]]],[5,"read_all_unchecked","","",null,[[],["string",3]]],[11,"new","","",109,[[]]],[11,"get","","",109,[[]]],[11,"add","","",109,[[]]],[11,"keys","","",109,[[],["keys",3]]],[11,"values","","",109,[[],["values",3]]],[11,"iter","","",109,[[],["iter",3]]],[18,"IS_MAXIMIZE","","",107,null],[18,"START_TEMP","","",107,null],[18,"END_TEMP","","",107,null],[18,"TEMP_RATIO","","",107,null],[18,"TIME_LIMIT","","",107,null],[18,"LOG_TABLE_SIZE","","",107,null],[18,"UPDATE_INTERVAL","","",107,null],[18,"SEED","","",107,null],[11,"new","","",107,[[]]],[11,"is_accepted","","",107,[[]]],[11,"is_end","","",107,[[]]],[11,"new","","",110,[[]]],[11,"time","","",110,[[]]],[11,"next","","",110,[[]]],[11,"rand","","",110,[[]]],[11,"rands","","",110,[[],["vec",3]]],[11,"randf","","",110,[[]]],[11,"gen_bool","","",110,[[]]],[11,"new","","",111,[[]]],[11,"scan","","",111,[[]]],[11,"mscan","","",111,[[["markediterscan",8]]]],[11,"scan_vec","","",111,[[],["vec",3]]],[11,"iter","","",111,[[],[["scanneriter",3],["iterscan",8]]]],[0,"marker","","",null,null],[3,"Usize1","competitive::tools::marker","",null,null],[3,"Chars","","",null,null],[3,"CharsWithBase","","",null,null],[12,"0","","",112,null],[3,"Collect","","",null,null],[8,"IterScan","competitive::tools","",null,null],[16,"Output","","",113,null],[10,"scan","","",113,[[],["option",4]]],[8,"MarkedIterScan","","",null,null],[16,"Output","","",114,null],[10,"mscan","","",114,[[],["option",4]]],[0,"tree","competitive","tree algorithems",null,null],[3,"EulerTourForEdge","competitive::tree","",null,null],[12,"eidx","","",115,null],[12,"par","","",115,null],[3,"EulerTourForVertex","","",null,null],[12,"vidx","","",116,null],[3,"EulerTourForRichVertex","","",null,null],[3,"LowestCommonAncestor","","",null,null],[3,"LCAMonoid","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",117,null],[12,"vidx","","",117,null],[3,"ReRooting","","dynamic programming on all-rooted trees",null,null],[12,"dp","","dp[v]: result of v-rooted tree",118,null],[12,"ep","","ep[e]: result of e-subtree, if e >= n then…",118,null],[3,"TreeRec","","",null,null],[12,"n","","",119,null],[11,"tree_depth","competitive::graph","",120,[[],["vec",3]]],[11,"tree_depth","competitive::tree::depth","",121,[[],["vec",3]]],[11,"weighted_tree_depth","competitive::graph","",120,[[["monoid",8],["fn",8]],["vec",3]]],[11,"weighted_tree_depth","competitive::tree::depth","",121,[[["monoid",8],["fn",8]],["vec",3]]],[11,"tree_size","competitive::graph","",120,[[],["vec",3]]],[11,"tree_size","competitive::tree::depth","",121,[[],["vec",3]]],[11,"new","competitive::tree","",122,[[["undirectedsparsegraph",6]]]],[11,"ancestor","","",122,[[]]],[11,"new","","",115,[[["undirectedsparsegraph",6]]]],[11,"len","","",115,[[]]],[11,"new","","",116,[[["undirectedsparsegraph",6]]]],[11,"len","","",116,[[]]],[11,"subtree_vertex_tour","","",116,[[]]],[11,"path_vertex_tour","","",116,[[]]],[11,"subtree_query","","",116,[[["fnmut",8]]]],[11,"subtree_update","","",116,[[["fnmut",8]]]],[11,"path_query","","",116,[[["fnmut",8]]]],[11,"path_update","","",116,[[["fnmut",8]]]],[11,"new","","",123,[[["undirectedsparsegraph",6]]]],[11,"len","","",123,[[]]],[11,"query","","",123,[[["fnmut",8]]]],[11,"gen_lca","","",123,[[],["lowestcommonancestor",3]]],[11,"lca","","",124,[[]]],[11,"new","","",117,[[["undirectedsparsegraph",6]]]],[11,"lca","","",117,[[]]],[11,"update","","",117,[[["fnmut",8]]]],[11,"query","","",117,[[["fnmut",8]]]],[11,"query_noncom","","",117,[[["fnmut",8]]]],[11,"new","","",118,[[["undirectedsparsegraph",6]]]],[11,"new","","",119,[[]]],[11,"dfs","","",119,[[["undirectedsparsegraph",6]]]],[0,"impl_lcam","","",null,null],[0,"aizu_online_judge","competitive","Aizu Online Judge",null,null],[0,"dpl","competitive::aizu_online_judge","",null,null],[0,"dpl_1_a","competitive::aizu_online_judge::dpl","",null,null],[5,"dpl_1_a","competitive::aizu_online_judge::dpl::dpl_1_a","✅  AC  2ms",null,[[]]],[0,"dpl_1_b","competitive::aizu_online_judge::dpl","",null,null],[3,"KnapsackPloblemSmallWeight","competitive::aizu_online_judge::dpl::dpl_1_b","",null,null],[12,"dp","","",35,null],[5,"dpl_1_b","","✅  AC  2ms",null,[[]]],[0,"dpl_1_c","competitive::aizu_online_judge::dpl","",null,null],[3,"KnapsackPloblemSmallWeight","competitive::aizu_online_judge::dpl::dpl_1_c","",null,null],[12,"dp","","",35,null],[5,"dpl_1_c","","✅  AC  2ms",null,[[]]],[0,"dpl_1_d","competitive::aizu_online_judge::dpl","",null,null],[3,"LongestIncreasingSubsequence","competitive::aizu_online_judge::dpl::dpl_1_d","",null,null],[12,"dp","","",37,null],[5,"dpl_1_d","","✅  AC  9ms",null,[[]]],[0,"dpl_1_e","competitive::aizu_online_judge::dpl","",null,null],[5,"levenshtein_distance","competitive::aizu_online_judge::dpl::dpl_1_e","",null,[[]]],[5,"dpl_1_e","","✅  AC  11ms",null,[[]]],[0,"dpl_1_f","competitive::aizu_online_judge::dpl","",null,null],[3,"KnapsackPloblemSmallValue","competitive::aizu_online_judge::dpl::dpl_1_f","",null,null],[12,"dp","","",36,null],[5,"dpl_1_f","","✅  AC  1ms",null,[[]]],[0,"dpl_1_g","competitive::aizu_online_judge::dpl","",null,null],[3,"KnapsackPloblemSmallWeight","competitive::aizu_online_judge::dpl::dpl_1_g","",null,null],[12,"dp","","",35,null],[5,"dpl_1_g","","✅  AC  11ms",null,[[]]],[0,"dpl_1_h","competitive::aizu_online_judge::dpl","",null,null],[3,"ZeroOneKnapsackProblemSmallItems","competitive::aizu_online_judge::dpl::dpl_1_h","",null,null],[5,"dpl_1_h","","✅  AC  65ms",null,[[]]],[0,"dpl_1_i","competitive::aizu_online_judge::dpl","",null,null],[3,"ZeroOneKnapsackPloblemBranchAndBound","competitive::aizu_online_judge::dpl::dpl_1_i","",null,null],[5,"dpl_1_i","","✅  AC  0ms",null,[[]]],[0,"dpl_3_a","competitive::aizu_online_judge::dpl","",null,null],[5,"largest_square","competitive::aizu_online_judge::dpl::dpl_3_a","",null,[[]]],[5,"dpl_3_a","","✅  AC  26ms",null,[[]]],[0,"dpl_3_b","competitive::aizu_online_judge::dpl","",null,null],[5,"largest_rectangle_in_grid","competitive::aizu_online_judge::dpl::dpl_3_b","",null,[[]]],[5,"dpl_3_b","","✅  AC  20ms",null,[[]]],[0,"dpl_3_c","competitive::aizu_online_judge::dpl","",null,null],[5,"largest_rectangle","competitive::aizu_online_judge::dpl::dpl_3_c","",null,[[]]],[5,"dpl_3_c","","✅  AC  8ms",null,[[]]],[0,"dsl","competitive::aizu_online_judge","",null,null],[0,"dsl_1_a","competitive::aizu_online_judge::dsl","",null,null],[3,"UnionFind","competitive::aizu_online_judge::dsl::dsl_1_a","",null,null],[5,"dsl_1_a","","✅  AC  7ms",null,[[]]],[0,"dsl_1_b","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_1_b","$+$",null,null],[3,"WeightedUnionFind","","",null,null],[5,"dsl_1_b","","✅  AC  23ms",null,[[]]],[0,"dsl_2_a","competitive::aizu_online_judge::dsl","",null,null],[3,"MinOperation","competitive::aizu_online_judge::dsl::dsl_2_a","binary operation to select smaller element",null,null],[3,"SegmentTree","","",null,null],[5,"dsl_2_a","","✅  AC  20ms",null,[[]]],[0,"dsl_2_b","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_b","$+$",null,null],[3,"SegmentTree","","",null,null],[5,"dsl_2_b","","✅  AC  18ms",null,[[]]],[0,"dsl_2_c","competitive::aizu_online_judge::dsl","",null,null],[3,"Static2DTree","competitive::aizu_online_judge::dsl::dsl_2_c","",null,null],[5,"dsl_2_c","","✅  AC  546ms",null,[[]]],[0,"dsl_2_d","competitive::aizu_online_judge::dsl","",null,null],[3,"LastOperation","competitive::aizu_online_judge::dsl::dsl_2_d","retain the last element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_d","","✅  AC  63ms",null,[[]]],[0,"dsl_2_e","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_e","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_e","","✅  AC  40ms",null,[[]]],[0,"dsl_2_f","competitive::aizu_online_judge::dsl","",null,null],[3,"LastOperation","competitive::aizu_online_judge::dsl::dsl_2_f","retain the last element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_f","","✅  AC  73ms",null,[[]]],[0,"dsl_2_g","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_g","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_g","","✅  AC  60ms",null,[[]]],[0,"dsl_2_h","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_h","$+$",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_h","","✅  AC  46ms",null,[[]]],[0,"dsl_2_i","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_2_i","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LastOperation","","retain the last element",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[5,"dsl_2_i","","✅  AC  97ms",null,[[]]],[0,"dsl_3_a","competitive::aizu_online_judge::dsl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::dsl::dsl_3_a","$+$",null,null],[3,"QueueAggregation","","",null,null],[5,"dsl_3_a","","✅  AC  4ms",null,[[]]],[0,"dsl_3_b","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_3_b","competitive::aizu_online_judge::dsl::dsl_3_b","✅  AC  5ms",null,[[]]],[0,"dsl_3_c","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_3_c","competitive::aizu_online_judge::dsl::dsl_3_c","✅  AC  235ms",null,[[]]],[0,"dsl_3_d","competitive::aizu_online_judge::dsl","",null,null],[3,"MinOperation","competitive::aizu_online_judge::dsl::dsl_3_d","binary operation to select smaller element",null,null],[3,"QueueAggregation","","",null,null],[5,"dsl_3_d","","✅  AC  102ms",null,[[]]],[0,"dsl_4_a","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_4_a","competitive::aizu_online_judge::dsl::dsl_4_a","✅  AC  81ms",null,[[]]],[0,"dsl_5_a","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_5_a","competitive::aizu_online_judge::dsl::dsl_5_a","✅  AC  5ms",null,[[]]],[0,"dsl_5_b","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_5_b","competitive::aizu_online_judge::dsl::dsl_5_b","✅  AC  10ms",null,[[]]],[0,"grl","competitive::aizu_online_judge","",null,null],[0,"grl_1_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_1_a","$+$",null,null],[5,"grl_1_a","","✅  AC  78ms",null,[[]]],[6,"DirectedGraphScanner","","",null,null],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::aizu_online_judge::grl::grl_1_a","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[8,"AdjacencyGraphDijkstraExt","","",null,null],[11,"dijkstra","competitive::graph","",82,[[],[["option",4],["vec",3]]]],[0,"grl_1_b","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_1_b","$+$",null,null],[5,"grl_1_b","","✅  AC  8ms",null,[[]]],[6,"DirectedGraphScanner","","",null,null],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::aizu_online_judge::grl::grl_1_b","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[8,"AdjacencyGraphBellmanFordExt","","",null,null],[11,"bellman_ford","competitive::graph","",83,[[]]],[0,"grl_1_c","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_1_c","$+$",null,null],[5,"grl_1_c","","✅  AC  5ms",null,[[]]],[6,"DirectedGraphScanner","","",null,null],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::aizu_online_judge::grl::grl_1_c","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[8,"AdjacencyGraphWarshallFloydExt","","",null,null],[11,"warshall_floyd","competitive::graph","",84,[[],[["vec",3],["vec",3]]]],[0,"grl_2_a","competitive::aizu_online_judge::grl","",null,null],[3,"EdgeListGraphScanner","competitive::aizu_online_judge::grl::grl_2_a","",null,null],[5,"grl_2_a","","✅  AC  25ms",null,[[]]],[0,"grl_2_b","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_2_b","$+$",null,null],[3,"EdgeListGraph","","Graph represented by a list of edges.",null,null],[3,"EdgeListGraphScanner","","",null,null],[5,"grl_2_b","","✅  AC  0ms",null,[[]]],[0,"grl_3_a","competitive::aizu_online_judge::grl","",null,null],[3,"LowLink","competitive::aizu_online_judge::grl::grl_3_a","",null,null],[12,"low","","",67,null],[12,"ord","","",67,null],[12,"articulation","","",67,null],[12,"bridge","","",67,null],[5,"grl_3_a","","✅  AC  3ms",null,[[]]],[6,"UndirectedGraphScanner","","",null,null],[0,"grl_3_b","competitive::aizu_online_judge::grl","",null,null],[3,"LowLink","competitive::aizu_online_judge::grl::grl_3_b","",null,null],[12,"low","","",67,null],[12,"ord","","",67,null],[12,"articulation","","",67,null],[12,"bridge","","",67,null],[5,"grl_3_b","","✅  AC  4ms",null,[[]]],[6,"UndirectedGraphScanner","","",null,null],[0,"grl_3_c","competitive::aizu_online_judge::grl","",null,null],[3,"StronglyConnectedComponent","competitive::aizu_online_judge::grl::grl_3_c","",null,null],[5,"grl_3_c","","✅  AC  8ms",null,[[]]],[6,"DirectedGraphScanner","","",null,null],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::aizu_online_judge::grl::grl_3_c","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[0,"grl_4_a","competitive::aizu_online_judge::grl","",null,null],[5,"grl_4_a","competitive::aizu_online_judge::grl::grl_4_a","✅  AC  0ms",null,[[]]],[6,"DirectedGraphScanner","","",null,null],[8,"AdjacencyGraphTopologicalSortExt","","",null,null],[11,"topological_sort","competitive::graph","",86,[[],["vec",3]]],[0,"grl_4_b","competitive::aizu_online_judge::grl","",null,null],[5,"grl_4_b","competitive::aizu_online_judge::grl::grl_4_b","✅  AC  3ms",null,[[]]],[5,"judge_grl_4_b","","",null,[[]]],[6,"DirectedGraphScanner","","",null,null],[8,"AdjacencyGraphTopologicalSortExt","","",null,null],[11,"topological_sort","competitive::graph","",86,[[],["vec",3]]],[0,"grl_5_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_5_a","$+$",null,null],[3,"TreeGraphScanner","","",null,null],[5,"grl_5_a","","✅  AC  10ms",null,[[]]],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::aizu_online_judge::grl::grl_5_a","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[0,"grl_5_b","competitive::aizu_online_judge::grl","",null,null],[3,"MaxOperation","competitive::aizu_online_judge::grl::grl_5_b","binary operation to select larger element",null,null],[3,"TreeGraphScanner","","",null,null],[3,"ReRooting","","dynamic programming on all-rooted trees",null,null],[12,"dp","","dp[v]: result of v-rooted tree",118,null],[12,"ep","","ep[e]: result of e-subtree, if e >= n then…",118,null],[5,"grl_5_b","","✅  AC  4ms",null,[[]]],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::aizu_online_judge::grl::grl_5_b","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[0,"grl_5_c","competitive::aizu_online_judge::grl","",null,null],[3,"EulerTourForRichVertex","competitive::aizu_online_judge::grl::grl_5_c","",null,null],[5,"grl_5_c","","✅  AC  72ms",null,[[]]],[6,"UndirectedSparseGraph","","",null,null],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::aizu_online_judge::grl::grl_5_c","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[0,"grl_5_d","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_5_d","$+$",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"EulerTourForEdge","","",null,null],[12,"eidx","","",115,null],[12,"par","","",115,null],[5,"grl_5_d","","✅  AC  79ms",null,[[]]],[6,"UndirectedSparseGraph","","",null,null],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::aizu_online_judge::grl::grl_5_d","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[0,"grl_5_e","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_5_e","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",117,null],[12,"vidx","","",117,null],[5,"grl_5_e","","✅  AC  174ms",null,[[]]],[6,"UndirectedSparseGraph","","",null,null],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::aizu_online_judge::grl::grl_5_e","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[0,"grl_6_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_6_a","$+$",null,null],[3,"Dinic","","",null,null],[12,"graph","","",69,null],[5,"grl_6_a","","✅  AC  0ms",null,[[]]],[0,"grl_6_b","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_6_b","$+$",null,null],[3,"PrimalDual","","",null,null],[5,"grl_6_b","","✅  AC  1ms",null,[[]]],[0,"grl_7_a","competitive::aizu_online_judge::grl","",null,null],[3,"AdditiveOperation","competitive::aizu_online_judge::grl::grl_7_a","$+$",null,null],[3,"Dinic","","",null,null],[12,"graph","","",69,null],[5,"grl_7_a","","✅  AC  0ms",null,[[]]],[0,"itp1","competitive::aizu_online_judge","",null,null],[0,"itp1_1_a","competitive::aizu_online_judge::itp1","",null,null],[5,"itp1_1_a","competitive::aizu_online_judge::itp1::itp1_1_a","✅  AC  0ms",null,[[]]],[0,"library_checker","competitive","Library-Checker",null,null],[0,"datastructure","competitive::library_checker","",null,null],[0,"point_add_range_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::point_add_range_sum","$+$",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"SegmentTree","","",null,null],[5,"point_add_range_sum_binary_indexed_tree","","✅  AC  101ms",null,[[]]],[5,"point_add_range_sum_segment_tree","","✅  AC  137ms",null,[[]]],[0,"point_set_range_composite","competitive::library_checker::datastructure","",null,null],[3,"LinearOperation","competitive::library_checker::datastructure::point_set_range_composite","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"SegmentTree","","",null,null],[3,"MInt","","",null,null],[5,"point_set_range_composite","","✅  AC  223ms",null,[[]]],[6,"MInt998244353","","",null,null],[0,"queue_operate_all_composite","competitive::library_checker::datastructure","",null,null],[3,"LinearOperation","competitive::library_checker::datastructure::queue_operate_all_composite","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"QueueAggregation","","",null,null],[3,"MInt","","",null,null],[5,"queue_operate_all_composite","","✅  AC  58ms",null,[[]]],[6,"MInt998244353","","",null,null],[0,"range_affine_range_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::range_affine_range_sum","$+$",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"LinearOperation","","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"MInt","","",null,null],[5,"range_affine_range_sum","","✅  AC  758ms",null,[[]]],[6,"MInt998244353","","",null,null],[0,"range_kth_smallest","competitive::library_checker::datastructure","",null,null],[3,"WaveletMatrix","competitive::library_checker::datastructure::range_kth_smallest","",null,null],[5,"range_kth_smallest","","✅  AC  365ms",null,[[]]],[0,"staticrmq","competitive::library_checker::datastructure","",null,null],[3,"MinOperation","competitive::library_checker::datastructure::staticrmq","binary operation to select smaller element",null,null],[3,"DisjointSparseTable","","",null,null],[3,"SegmentTree","","",null,null],[5,"staticrmq_disjoint_sparse_table","","✅  AC  168ms",null,[[]]],[5,"staticrmq_segment_tree","","✅  AC  188ms",null,[[]]],[0,"unionfind","competitive::library_checker::datastructure","",null,null],[3,"UnionFind","competitive::library_checker::datastructure::unionfind","",null,null],[5,"unionfind","","✅  AC  19ms",null,[[]]],[0,"vertex_add_path_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::vertex_add_path_sum","$+$",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"TreeGraphScanner","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",117,null],[12,"vidx","","",117,null],[5,"vertex_add_path_sum","","✅  AC  542ms",null,[[]]],[0,"vertex_add_subtree_sum","competitive::library_checker::datastructure","",null,null],[3,"AdditiveOperation","competitive::library_checker::datastructure::vertex_add_subtree_sum","$+$",null,null],[3,"SegmentTree","","",null,null],[3,"EulerTourForVertex","","",null,null],[12,"vidx","","",116,null],[5,"vertex_add_subtree_sum","","✅  AC  243ms",null,[[]]],[6,"UndirectedSparseGraph","","",null,null],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::library_checker::datastructure::vertex_add_subtree_sum","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[0,"vertex_set_path_composite","competitive::library_checker::datastructure","",null,null],[3,"LinearOperation","competitive::library_checker::datastructure::vertex_set_path_composite","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x +…",null,null],[3,"ReverseOperation","","",null,null],[3,"SegmentTree","","",null,null],[3,"TreeGraphScanner","","",null,null],[3,"MInt","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",117,null],[12,"vidx","","",117,null],[5,"vertex_set_path_composite","","✅  AC  273ms",null,[[]]],[6,"MInt998244353","","",null,null],[0,"graph","competitive::library_checker","",null,null],[0,"bipartitematching","competitive::library_checker::graph","",null,null],[3,"Dinic","competitive::library_checker::graph::bipartitematching","",null,null],[12,"graph","","",69,null],[3,"RevEdge","","",null,null],[12,"to","","",68,null],[12,"rev","","",68,null],[12,"cap","","",68,null],[5,"bipartitematching","","✅  AC  495ms",null,[[]]],[0,"directedmst","competitive::library_checker::graph","",null,null],[3,"AdditiveOperation","competitive::library_checker::graph::directedmst","$+$",null,null],[3,"EdgeListGraphScanner","","",null,null],[5,"directedmst","","✅  AC  102ms",null,[[]]],[0,"lca","competitive::library_checker::graph","",null,null],[3,"EulerTourForRichVertex","competitive::library_checker::graph::lca","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",117,null],[12,"vidx","","",117,null],[5,"lca_euler_tour","","✅  AC  585ms",null,[[]]],[5,"lca_hld","","✅  AC  368ms",null,[[]]],[6,"UndirectedSparseGraph","","",null,null],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::library_checker::graph::lca","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[0,"scc","competitive::library_checker::graph","",null,null],[3,"StronglyConnectedComponent","competitive::library_checker::graph::scc","",null,null],[5,"scc","","✅  AC  231ms",null,[[]]],[6,"DirectedSparseGraph","","",null,null],[8,"AdjacencyGraphAbstraction","","Adjacency Graph Abstraction.",null,null],[16,"AdjIter","","",85,null],[10,"vertices_size","","Return the number of vertices.",85,[[]]],[10,"edges_size","","Return the number of edges.",85,[[]]],[11,"vertices","competitive::graph","Return an iterator over graph vertices.",85,[[],["range",3]]],[10,"adjacencies","competitive::library_checker::graph::scc","Return a slice of adjacency vertices.",85,[[]]],[10,"from_edges","","Construct graph from edges.",85,[[]]],[0,"math","competitive::library_checker","",null,null],[0,"convolution_mod","competitive::library_checker::math","",null,null],[3,"MInt","competitive::library_checker::math::convolution_mod","",null,null],[5,"convolution_mod","","✅  AC  362ms",null,[[]]],[6,"NTT998244353","","",null,null],[6,"MInt998244353","","",null,null],[0,"convolution_mod_1000000007","competitive::library_checker::math","",null,null],[3,"Modulo1000000007","competitive::library_checker::math::convolution_mod_1000000007","",null,null],[5,"convolve3","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],[["vec",3],["mint",3]]]],[5,"convolution_mod_1000000007","","✅  AC  1646ms",null,[[]]],[0,"enumerate_primes","competitive::library_checker::math","",null,null],[5,"segmented_sieve_primes","competitive::library_checker::math::enumerate_primes","",null,[[],["vec",3]]],[5,"enumerate_primes","","✅  AC  2429ms",null,[[]]],[0,"factorize","competitive::library_checker::math","",null,null],[5,"prime_factors_rho","competitive::library_checker::math::factorize","",null,[[],["vec",3]]],[5,"factorize","","✅  AC  7914ms",null,[[]]],[0,"sum_of_floor_of_linear","competitive::library_checker::math","",null,null],[5,"floor_sum","competitive::library_checker::math::sum_of_floor_of_linear","Sum of Floor of Linear",null,[[]]],[5,"sum_of_floor_of_linear","","✅  AC  73ms",null,[[]]],[0,"two_sat","competitive::library_checker::math","",null,null],[3,"TwoSatisfiability","competitive::library_checker::math::two_sat","",null,null],[5,"two_sat","","✅  AC  275ms",null,[[]]],[0,"sample","competitive::library_checker","",null,null],[0,"aplusb","competitive::library_checker::sample","",null,null],[5,"aplusb","competitive::library_checker::sample::aplusb","✅  AC  0ms",null,[[]]],[0,"many_aplusb","competitive::library_checker::sample","",null,null],[5,"many_aplusb","competitive::library_checker::sample::many_aplusb","✅  AC  176ms",null,[[]]],[0,"string","competitive::library_checker","",null,null],[0,"number_of_substrings","competitive::library_checker::string","",null,null],[3,"SuffixArray","competitive::library_checker::string::number_of_substrings","",null,null],[5,"number_of_substrings","","✅  AC  808ms",null,[[]]],[0,"suffixarray","competitive::library_checker::string","",null,null],[3,"SuffixArray","competitive::library_checker::string::suffixarray","",null,null],[5,"suffixarray","","✅  AC  925ms",null,[[]]],[0,"zalgorithm","competitive::library_checker::string","",null,null],[3,"Zarray","competitive::library_checker::string::zalgorithm","",null,null],[5,"zalgorithm","","✅  AC  29ms",null,[[]]],[14,"impl_bitand_identity","competitive","",null,null],[14,"impl_bitor_identity","","",null,null],[14,"impl_bitxor_identity","","",null,null],[14,"comprehension","","",null,null],[14,"min","","",null,null],[14,"chmin","","",null,null],[14,"max","","",null,null],[14,"chmax","","",null,null],[14,"scan_value","","",null,null],[14,"scan","","",null,null],[11,"from","competitive::algebra","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"to_owned","","",125,[[]]],[11,"clone_into","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","competitive::algorithm","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","competitive::combinatorial_optimization","",35,[[]]],[11,"into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","competitive::data_structure","",126,[[]]],[11,"into","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","competitive::geometry","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","competitive::graph","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"into_iter","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"into_iter","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"to_owned","","",135,[[]]],[11,"clone_into","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","competitive::math","",87,[[]]],[11,"into","","",87,[[]]],[11,"to_owned","","",87,[[]]],[11,"clone_into","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"to_owned","","",94,[[]]],[11,"clone_into","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","competitive::num","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"to_string","","",98,[[],["string",3]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"to_string","","",97,[[],["string",3]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","competitive::num::modulus","",137,[[]]],[11,"into","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"from","competitive::string","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","competitive::tools","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","competitive::tools::marker","",141,[[]]],[11,"into","","",141,[[]]],[11,"to_owned","","",141,[[]]],[11,"clone_into","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"from","competitive::tree","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"to_owned","","",116,[[]]],[11,"clone_into","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","","",117,[[]]],[11,"into","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"operate","competitive::algebra","",0,[[]]],[11,"operate","","",1,[[]]],[11,"operate","","",2,[[]]],[11,"operate","","",3,[[]]],[11,"operate","","",4,[[]]],[11,"operate","","",5,[[]]],[11,"operate","","",6,[[]]],[11,"operate","","",7,[[]]],[11,"operate","","",8,[[]]],[11,"operate","","",9,[[]]],[11,"operate","","",10,[[]]],[11,"operate","","",11,[[]]],[11,"operate","","",125,[[]]],[11,"operate","","",12,[[]]],[11,"operate","","",13,[[]]],[11,"operate","","",14,[[]]],[11,"operate","","",15,[[]]],[11,"operate","competitive::tree","",122,[[]]],[11,"unit","competitive::algebra","",0,[[]]],[11,"unit","","",1,[[]]],[11,"unit","","",2,[[]]],[11,"unit","","",3,[[]]],[11,"unit","","",4,[[]]],[11,"unit","","",5,[[]]],[11,"unit","","",6,[[]]],[11,"unit","","",7,[[]]],[11,"unit","","",8,[[]]],[11,"unit","","",9,[[]]],[11,"unit","","",10,[[]]],[11,"unit","","",11,[[]]],[11,"unit","","",12,[[]]],[11,"unit","","",13,[[]]],[11,"unit","","",14,[[]]],[11,"unit","","",15,[[]]],[11,"inverse","","",4,[[]]],[11,"rinv_operate","","",4,[[]]],[11,"inverse","","",5,[[]]],[11,"rinv_operate","","",5,[[]]],[11,"inverse","","",9,[[]]],[11,"inverse","","",11,[[]]],[11,"inverse","","",13,[[]]],[11,"inverse","","",15,[[]]],[11,"initial","competitive::data_structure","",126,[[]]],[11,"next","","",126,[[],["option",4]]],[11,"accept","","",126,[[]]],[11,"initial","","",127,[[]]],[11,"next","","",127,[[],["option",4]]],[11,"accept","","",127,[[]]],[11,"initial","","",128,[[]]],[11,"next","","",128,[[],["option",4]]],[11,"accept","","",128,[[]]],[11,"initial","","",40,[[]]],[11,"next","","",40,[[],["option",4]]],[11,"accept","","",40,[[]]],[11,"initial","","",41,[[]]],[11,"next","","",41,[[],["option",4]]],[11,"accept","","",41,[[]]],[11,"initial","","",129,[[]]],[11,"next","","",129,[[],["option",4]]],[11,"accept","","",129,[[]]],[11,"initial","","",130,[[]]],[11,"next","","",130,[[],["option",4]]],[11,"accept","","",130,[[]]],[11,"initial","","",42,[[]]],[11,"next","","",42,[[],["option",4]]],[11,"accept","","",42,[[]]],[11,"bit_length","","",131,[[]]],[11,"access","","",131,[[]]],[11,"rank1","","",131,[[]]],[11,"select1","","",131,[[],["option",4]]],[11,"select0","","",131,[[],["option",4]]],[11,"vertices_size","competitive::graph","",120,[[]]],[11,"edges_size","","",120,[[]]],[11,"adjacencies","","",120,[[]]],[11,"from_edges","","",120,[[]]],[11,"vertices_size","","",120,[[]]],[11,"edges_size","","",120,[[]]],[11,"adjacencies","","",120,[[]]],[11,"from_edges","","",120,[[]]],[11,"primitive_root","competitive::num::modulus","",139,[[]]],[11,"get_modulus","","",137,[[]]],[11,"get_modulus","","",138,[[]]],[11,"get_modulus","","",139,[[]]],[11,"get_modulus","","",140,[[]]],[11,"zero","competitive::math","",89,[[]]],[11,"zero","competitive::num","",98,[[]]],[11,"one","competitive::math","",89,[[]]],[11,"one","competitive::num","",98,[[]]],[11,"scan","","",98,[[],["option",4]]],[11,"scan","competitive::tools::marker","",141,[[],["option",4]]],[11,"scan","","",142,[[],["option",4]]],[11,"mscan","competitive::graph","",72,[[],["option",4]]],[11,"mscan","","",75,[[],["option",4]]],[11,"mscan","","",78,[[],["option",4]]],[11,"mscan","competitive::tools::marker","",112,[[],["option",4]]],[11,"mscan","","",143,[[],["option",4]]],[11,"from","competitive::num","",98,[[]]],[11,"from","","",98,[[]]],[11,"from","","",98,[[]]],[11,"from","","",98,[[]]],[11,"from","","",98,[[]]],[11,"from","","",98,[[]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"next","competitive::graph","",133,[[],["option",4]]],[11,"next","","",134,[[],["option",4]]],[11,"clone","competitive::algebra","",0,[[],["maxoperation",3]]],[11,"clone","","",1,[[],["minoperation",3]]],[11,"clone","","",2,[[],["firstoperation",3]]],[11,"clone","","",3,[[],["lastoperation",3]]],[11,"clone","","",4,[[],["additiveoperation",3]]],[11,"clone","","",5,[[],["multiplicativeoperation",3]]],[11,"clone","","",6,[[],["linearoperation",3]]],[11,"clone","","",7,[[],["bitandoperation",3]]],[11,"clone","","",8,[[],["bitoroperation",3]]],[11,"clone","","",9,[[],["bitxoroperation",3]]],[11,"clone","","",10,[[],["monoidaloperation",3]]],[11,"clone","","",11,[[],["groupoperation",3]]],[11,"clone","","",125,[[],["assocoativeoperator",3]]],[11,"clone","","",12,[[],["absorbedassocoativeoperator",3]]],[11,"clone","","",13,[[],["cartesianoperation",3]]],[11,"clone","","",14,[[],["countingoperation",3]]],[11,"clone","","",15,[[],["reverseoperation",3]]],[11,"clone","competitive::algorithm","",25,[[],["chtline",3]]],[11,"clone","","",26,[[],["convexhulltrick",3]]],[11,"clone","competitive::data_structure","",43,[[],["binaryindexedtree",3]]],[11,"clone","","",44,[[],["binaryindexedtree2d",3]]],[11,"clone","","",45,[[],["bitset",3]]],[11,"clone","","",46,[[],["disjointsparsetable",3]]],[11,"clone","","",48,[[],["lazysegmenttree",3]]],[11,"clone","","",49,[[],["segmenttree",3]]],[11,"clone","","",50,[[],["queueaggregation",3]]],[11,"clone","","",51,[[],["dequeaggregation",3]]],[11,"clone","","",54,[[],["unionfind",3]]],[11,"clone","","",55,[[],["weightedunionfind",3]]],[11,"clone","competitive::geometry","",61,[[],["circle",3]]],[11,"clone","","",62,[[],["line",3]]],[11,"clone","","",63,[[],["linesegment",3]]],[11,"clone","","",59,[[],["real",3]]],[11,"clone","","",60,[[],["ccw",4]]],[11,"clone","competitive::graph","",64,[[],["adjacent",3]]],[11,"clone","","",65,[[],["adjacencylistgraph",3]]],[11,"clone","","",132,[[],["grapheidcache",3]]],[11,"clone","","",73,[[],["gridgraph",3]]],[11,"clone","","",74,[[],["edgelistgraph",3]]],[11,"clone","","",68,[[],["revedge",3]]],[11,"clone","","",70,[[],["revcedge",3]]],[11,"clone","","",135,[[],["directededge",3]]],[11,"clone","","",136,[[],["undirectededge",3]]],[11,"clone","","",71,[[],["adjacency",3]]],[11,"clone","","",120,[[],["sparsegraph",3]]],[11,"clone","","",80,[[],["stronglyconnectedcomponent",3]]],[11,"clone","","",81,[[],["twosatisfiability",3]]],[11,"clone","competitive::math","",87,[[],["memorizedfactorial",3]]],[11,"clone","","",90,[[],["smallmodmemorizedfactorial",3]]],[11,"clone","","",88,[[],["matrix",3]]],[11,"clone","","",92,[[],["babystepgiantstep",3]]],[11,"clone","","",89,[[],["polynomial",3]]],[11,"clone","","",93,[[],["primetable",3]]],[11,"clone","","",94,[[],["eulerphitable",3]]],[11,"clone","competitive::num","",96,[[],["complex",3]]],[11,"clone","","",98,[[]]],[11,"clone","","",97,[[],["quaddouble",3]]],[11,"clone","competitive::string","",102,[[],["knuthmorrispratt",3]]],[11,"clone","","",103,[[],["rollinghash",3]]],[11,"clone","","",104,[[],["multiplerollinghash",3]]],[11,"clone","","",105,[[],["suffixarray",3]]],[11,"clone","","",106,[[],["zarray",3]]],[11,"clone","competitive::tools","",109,[[],["counter",3]]],[11,"clone","","",110,[[],["xorshift",3]]],[11,"clone","","",111,[[],["scanner",3]]],[11,"clone","competitive::tools::marker","",141,[[],["usize1",3]]],[11,"clone","","",142,[[],["chars",3]]],[11,"clone","","",112,[[],["charswithbase",3]]],[11,"clone","","",143,[[],["collect",3]]],[11,"clone","competitive::tree","",115,[[],["eulertourforedge",3]]],[11,"clone","","",116,[[],["eulertourforvertex",3]]],[11,"clone","","",123,[[],["eulertourforrichvertex",3]]],[11,"clone","","",124,[[],["lowestcommonancestor",3]]],[11,"clone","","",122,[[],["lcamonoid",3]]],[11,"clone","","",118,[[],["rerooting",3]]],[11,"clone","","",119,[[],["treerec",3]]],[11,"default","competitive::algebra","",0,[[],["maxoperation",3]]],[11,"default","","",1,[[],["minoperation",3]]],[11,"default","","",2,[[],["firstoperation",3]]],[11,"default","","",3,[[],["lastoperation",3]]],[11,"default","","",4,[[],["additiveoperation",3]]],[11,"default","","",5,[[],["multiplicativeoperation",3]]],[11,"default","","",6,[[],["linearoperation",3]]],[11,"default","","",7,[[],["bitandoperation",3]]],[11,"default","","",8,[[],["bitoroperation",3]]],[11,"default","","",9,[[],["bitxoroperation",3]]],[11,"default","competitive::algorithm","",25,[[],["chtline",3]]],[11,"default","competitive::data_structure","",45,[[],["bitset",3]]],[11,"default","competitive::graph","",64,[[],["adjacent",3]]],[11,"default","","",65,[[],["adjacencylistgraph",3]]],[11,"default","","",135,[[],["directededge",3]]],[11,"default","","",136,[[],["undirectededge",3]]],[11,"default","","",71,[[],["adjacency",3]]],[11,"default","competitive::math","",89,[[],["polynomial",3]]],[11,"default","competitive::num","",96,[[],["complex",3]]],[11,"default","","",98,[[]]],[11,"default","","",97,[[],["quaddouble",3]]],[11,"default","competitive::tools","",109,[[]]],[11,"default","","",110,[[]]],[11,"cmp","competitive::algebra","",0,[[["maxoperation",3]],["ordering",4]]],[11,"cmp","","",1,[[["minoperation",3]],["ordering",4]]],[11,"cmp","","",2,[[["firstoperation",3]],["ordering",4]]],[11,"cmp","","",3,[[["lastoperation",3]],["ordering",4]]],[11,"cmp","","",4,[[["additiveoperation",3]],["ordering",4]]],[11,"cmp","","",5,[[["multiplicativeoperation",3]],["ordering",4]]],[11,"cmp","","",6,[[["linearoperation",3]],["ordering",4]]],[11,"cmp","","",7,[[["bitandoperation",3]],["ordering",4]]],[11,"cmp","","",8,[[["bitoroperation",3]],["ordering",4]]],[11,"cmp","","",9,[[["bitxoroperation",3]],["ordering",4]]],[11,"cmp","competitive::data_structure","",45,[[["bitset",3]],["ordering",4]]],[11,"cmp","competitive::geometry","",60,[[["ccw",4]],["ordering",4]]],[11,"cmp","competitive::graph","",64,[[["adjacent",3]],["ordering",4]]],[11,"cmp","","",73,[[["gridgraph",3]],["ordering",4]]],[11,"cmp","","",135,[[["directededge",3]],["ordering",4]]],[11,"cmp","","",136,[[["undirectededge",3]],["ordering",4]]],[11,"cmp","","",71,[[["adjacency",3]],["ordering",4]]],[11,"cmp","competitive::num","",98,[[],["ordering",4]]],[11,"cmp","competitive::tools","",108,[[["totalord",3]],["ordering",4]]],[11,"eq","competitive::algebra","",0,[[["maxoperation",3]]]],[11,"ne","","",0,[[["maxoperation",3]]]],[11,"eq","","",1,[[["minoperation",3]]]],[11,"ne","","",1,[[["minoperation",3]]]],[11,"eq","","",2,[[["firstoperation",3]]]],[11,"ne","","",2,[[["firstoperation",3]]]],[11,"eq","","",3,[[["lastoperation",3]]]],[11,"ne","","",3,[[["lastoperation",3]]]],[11,"eq","","",4,[[["additiveoperation",3]]]],[11,"ne","","",4,[[["additiveoperation",3]]]],[11,"eq","","",5,[[["multiplicativeoperation",3]]]],[11,"ne","","",5,[[["multiplicativeoperation",3]]]],[11,"eq","","",6,[[["linearoperation",3]]]],[11,"ne","","",6,[[["linearoperation",3]]]],[11,"eq","","",7,[[["bitandoperation",3]]]],[11,"ne","","",7,[[["bitandoperation",3]]]],[11,"eq","","",8,[[["bitoroperation",3]]]],[11,"ne","","",8,[[["bitoroperation",3]]]],[11,"eq","","",9,[[["bitxoroperation",3]]]],[11,"ne","","",9,[[["bitxoroperation",3]]]],[11,"eq","competitive::algorithm","",25,[[["chtline",3]]]],[11,"ne","","",25,[[["chtline",3]]]],[11,"eq","competitive::data_structure","",45,[[["bitset",3]]]],[11,"ne","","",45,[[["bitset",3]]]],[11,"eq","competitive::geometry","",61,[[["circle",3]]]],[11,"ne","","",61,[[["circle",3]]]],[11,"eq","","",62,[[["line",3]]]],[11,"ne","","",62,[[["line",3]]]],[11,"eq","","",63,[[["linesegment",3]]]],[11,"ne","","",63,[[["linesegment",3]]]],[11,"eq","","",59,[[["real",3]]]],[11,"eq","","",60,[[["ccw",4]]]],[11,"eq","competitive::graph","",64,[[["adjacent",3]]]],[11,"ne","","",64,[[["adjacent",3]]]],[11,"eq","","",73,[[["gridgraph",3]]]],[11,"ne","","",73,[[["gridgraph",3]]]],[11,"eq","","",135,[[["directededge",3]]]],[11,"eq","","",136,[[["undirectededge",3]]]],[11,"eq","","",71,[[["adjacency",3]]]],[11,"ne","","",71,[[["adjacency",3]]]],[11,"eq","competitive::math","",88,[[["matrix",3]]]],[11,"ne","","",88,[[["matrix",3]]]],[11,"eq","","",89,[[["polynomial",3]]]],[11,"ne","","",89,[[["polynomial",3]]]],[11,"eq","competitive::num","",96,[[["complex",3]]]],[11,"ne","","",96,[[["complex",3]]]],[11,"eq","","",98,[[]]],[11,"eq","","",97,[[["quaddouble",3]]]],[11,"ne","","",97,[[["quaddouble",3]]]],[11,"eq","competitive::tools","",108,[[["totalord",3]]]],[11,"ne","","",108,[[["totalord",3]]]],[11,"partial_cmp","competitive::algebra","",0,[[["maxoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["maxoperation",3]]]],[11,"le","","",0,[[["maxoperation",3]]]],[11,"gt","","",0,[[["maxoperation",3]]]],[11,"ge","","",0,[[["maxoperation",3]]]],[11,"partial_cmp","","",1,[[["minoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["minoperation",3]]]],[11,"le","","",1,[[["minoperation",3]]]],[11,"gt","","",1,[[["minoperation",3]]]],[11,"ge","","",1,[[["minoperation",3]]]],[11,"partial_cmp","","",2,[[["firstoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",2,[[["firstoperation",3]]]],[11,"le","","",2,[[["firstoperation",3]]]],[11,"gt","","",2,[[["firstoperation",3]]]],[11,"ge","","",2,[[["firstoperation",3]]]],[11,"partial_cmp","","",3,[[["lastoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",3,[[["lastoperation",3]]]],[11,"le","","",3,[[["lastoperation",3]]]],[11,"gt","","",3,[[["lastoperation",3]]]],[11,"ge","","",3,[[["lastoperation",3]]]],[11,"partial_cmp","","",4,[[["additiveoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["additiveoperation",3]]]],[11,"le","","",4,[[["additiveoperation",3]]]],[11,"gt","","",4,[[["additiveoperation",3]]]],[11,"ge","","",4,[[["additiveoperation",3]]]],[11,"partial_cmp","","",5,[[["multiplicativeoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["multiplicativeoperation",3]]]],[11,"le","","",5,[[["multiplicativeoperation",3]]]],[11,"gt","","",5,[[["multiplicativeoperation",3]]]],[11,"ge","","",5,[[["multiplicativeoperation",3]]]],[11,"partial_cmp","","",6,[[["linearoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["linearoperation",3]]]],[11,"le","","",6,[[["linearoperation",3]]]],[11,"gt","","",6,[[["linearoperation",3]]]],[11,"ge","","",6,[[["linearoperation",3]]]],[11,"partial_cmp","","",7,[[["bitandoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["bitandoperation",3]]]],[11,"le","","",7,[[["bitandoperation",3]]]],[11,"gt","","",7,[[["bitandoperation",3]]]],[11,"ge","","",7,[[["bitandoperation",3]]]],[11,"partial_cmp","","",8,[[["bitoroperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["bitoroperation",3]]]],[11,"le","","",8,[[["bitoroperation",3]]]],[11,"gt","","",8,[[["bitoroperation",3]]]],[11,"ge","","",8,[[["bitoroperation",3]]]],[11,"partial_cmp","","",9,[[["bitxoroperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["bitxoroperation",3]]]],[11,"le","","",9,[[["bitxoroperation",3]]]],[11,"gt","","",9,[[["bitxoroperation",3]]]],[11,"ge","","",9,[[["bitxoroperation",3]]]],[11,"partial_cmp","competitive::data_structure","",45,[[["bitset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",45,[[["bitset",3]]]],[11,"le","","",45,[[["bitset",3]]]],[11,"gt","","",45,[[["bitset",3]]]],[11,"ge","","",45,[[["bitset",3]]]],[11,"partial_cmp","competitive::geometry","",59,[[["real",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",60,[[["ccw",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::graph","",64,[[["adjacent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",64,[[["adjacent",3]]]],[11,"le","","",64,[[["adjacent",3]]]],[11,"gt","","",64,[[["adjacent",3]]]],[11,"ge","","",64,[[["adjacent",3]]]],[11,"partial_cmp","","",73,[[["gridgraph",3]],[["option",4],["ordering",4]]]],[11,"lt","","",73,[[["gridgraph",3]]]],[11,"le","","",73,[[["gridgraph",3]]]],[11,"gt","","",73,[[["gridgraph",3]]]],[11,"ge","","",73,[[["gridgraph",3]]]],[11,"partial_cmp","","",135,[[["directededge",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",136,[[["undirectededge",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",71,[[["adjacency",3]],[["option",4],["ordering",4]]]],[11,"lt","","",71,[[["adjacency",3]]]],[11,"le","","",71,[[["adjacency",3]]]],[11,"gt","","",71,[[["adjacency",3]]]],[11,"ge","","",71,[[["adjacency",3]]]],[11,"partial_cmp","competitive::num","",98,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",97,[[["quaddouble",3]],[["option",4],["ordering",4]]]],[11,"lt","","",97,[[["quaddouble",3]]]],[11,"le","","",97,[[["quaddouble",3]]]],[11,"gt","","",97,[[["quaddouble",3]]]],[11,"ge","","",97,[[["quaddouble",3]]]],[11,"partial_cmp","competitive::tools","",108,[[["totalord",3]],[["option",4],["ordering",4]]]],[11,"lt","","",108,[[["totalord",3]]]],[11,"le","","",108,[[["totalord",3]]]],[11,"gt","","",108,[[["totalord",3]]]],[11,"ge","","",108,[[["totalord",3]]]],[11,"fmt","competitive::algebra","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::algorithm","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",132,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",133,[[["formatter",3]],["result",6]]],[11,"fmt","","",134,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",135,[[["formatter",3]],["result",6]]],[11,"fmt","","",136,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math","",87,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",94,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","","",111,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools::marker","",141,[[["formatter",3]],["result",6]]],[11,"fmt","","",142,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","","",143,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",98,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",97,[[["formatter",3]],[["error",3],["result",4]]]],[11,"div","","",96,[[]]],[11,"div","","",96,[[]]],[11,"div","","",98,[[]]],[11,"div","","",98,[[["mint",3]]]],[11,"div","","",97,[[]]],[11,"sub","","",96,[[]]],[11,"sub","","",96,[[]]],[11,"sub","","",98,[[]]],[11,"sub","","",98,[[["mint",3]]]],[11,"sub","","",97,[[]]],[11,"add","","",96,[[]]],[11,"add","","",96,[[]]],[11,"add","","",98,[[]]],[11,"add","","",98,[[["mint",3]]]],[11,"add","","",97,[[]]],[11,"add","","",97,[[]]],[11,"mul","","",96,[[]]],[11,"mul","","",96,[[]]],[11,"mul","","",98,[[]]],[11,"mul","","",98,[[["mint",3]]]],[11,"mul","","",97,[[]]],[11,"mul","","",97,[[]]],[11,"neg","","",96,[[]]],[11,"neg","","",98,[[]]],[11,"neg","","",97,[[]]],[11,"add_assign","","",98,[[["mint",3]]]],[11,"add_assign","","",98,[[["mint",3]]]],[11,"sub_assign","","",98,[[["mint",3]]]],[11,"sub_assign","","",98,[[["mint",3]]]],[11,"mul_assign","","",98,[[["mint",3]]]],[11,"mul_assign","","",98,[[["mint",3]]]],[11,"div_assign","","",98,[[["mint",3]]]],[11,"div_assign","","",98,[[["mint",3]]]],[11,"not","competitive::data_structure","",45,[[]]],[11,"bitand","","",45,[[]]],[11,"bitor","","",45,[[]]],[11,"bitxor","","",45,[[]]],[11,"shl","","",45,[[]]],[11,"shr","","",45,[[]]],[11,"bitand_assign","","",45,[[]]],[11,"bitor_assign","","",45,[[]]],[11,"bitxor_assign","","",45,[[]]],[11,"shl_assign","","",45,[[]]],[11,"shr_assign","","",45,[[]]],[11,"index","","",46,[[]]],[11,"index","competitive::graph","",132,[[]]],[11,"index","","",74,[[]]],[11,"index","","",80,[[]]],[11,"index","competitive::math","",88,[[]]],[11,"index","","",88,[[]]],[11,"index","","",89,[[]]],[11,"index","competitive::num","",97,[[]]],[11,"index","competitive::string","",105,[[]]],[11,"index","","",106,[[]]],[11,"index_mut","competitive::math","",88,[[]]],[11,"index_mut","","",88,[[]]],[11,"index_mut","","",89,[[]]],[11,"hash","competitive::algebra","",0,[[]]],[11,"hash","","",1,[[]]],[11,"hash","","",2,[[]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"hash","","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","competitive::data_structure","",45,[[]]],[11,"hash","competitive::graph","",64,[[]]],[11,"hash","","",73,[[]]],[11,"hash","","",135,[[]]],[11,"hash","","",136,[[]]],[11,"hash","","",71,[[]]],[11,"hash","competitive::num","",96,[[]]],[11,"hash","","",98,[[]]],[11,"from_iter","competitive::data_structure","",131,[[["intoiterator",8]]]],[11,"from_iter","competitive::tools","",109,[[["intoiterator",8]]]],[11,"product","competitive::num","",98,[[["iterator",8]]]],[11,"product","","",98,[[["iterator",8]]]],[11,"sum","","",98,[[["iterator",8]]]],[11,"sum","","",98,[[["iterator",8]]]],[11,"from_str","","",98,[[],["result",4]]],[11,"from_str","","",97,[[],["result",4]]],[11,"reverse_operate","competitive::algebra","",16,[[]]],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",18,[[]]],[11,"rinv_operate","","",19,[[]]],[11,"mo_solve","competitive::algorithm","",32,[[]]],[11,"rank1","competitive::data_structure","the number of 1 in [0, k)",58,[[]]],[11,"rank0","","the number of 0 in [0, k)",58,[[]]],[11,"select1","","index of k-th 1",58,[[],["option",4]]],[11,"select0","","index of k-th 0",58,[[],["option",4]]],[11,"dijkstra","competitive::graph","",82,[[],[["option",4],["vec",3]]]],[11,"bellman_ford","","",83,[[]]],[11,"warshall_floyd","","",84,[[],[["vec",3],["vec",3]]]],[11,"vertices","","Return an iterator over graph vertices.",85,[[],["range",3]]],[11,"topological_sort","","",86,[[],["vec",3]]],[11,"modulo","competitive::num","",99,[[]]],[11,"is_zero","","",100,[[]]],[11,"is_one","","",101,[[]]],[11,"new","competitive::tools::marker","",143,[[]]]],"p":[[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"MonoidalOperation"],[3,"GroupOperation"],[3,"AbsorbedAssocoativeOperator"],[3,"CartesianOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[8,"Magma"],[8,"Unital"],[8,"Monoid"],[8,"Invertible"],[8,"MinimumBounded"],[8,"MaximumBounded"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[8,"BitXorIdentity"],[3,"CHTLine"],[3,"ConvexHullTrick"],[3,"SlideMinimum"],[3,"SubsetTransform"],[3,"SupersetTransform"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"MoSolver"],[8,"Bisect"],[8,"Trisect"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"LongestIncreasingSubsequence"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"LessThanAutomaton"],[3,"GreaterThanAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"Static2DTree"],[3,"LazySegmentTree"],[3,"SegmentTree"],[3,"QueueAggregation"],[3,"DequeAggregation"],[3,"Trie"],[3,"MergingUnionFind"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"WaveletMatrix"],[8,"Automaton"],[8,"RankSelectDictionaries"],[3,"Real"],[4,"CCW"],[3,"Circle"],[3,"Line"],[3,"LineSegment"],[3,"Adjacent"],[3,"AdjacencyListGraph"],[3,"GraphRec"],[3,"LowLink"],[3,"RevEdge"],[3,"Dinic"],[3,"RevCEdge"],[3,"Adjacency"],[3,"GraphScanner"],[3,"GridGraph"],[3,"EdgeListGraph"],[3,"EdgeListGraphScanner"],[3,"FordFulkerson"],[3,"PrimalDual"],[3,"AdjacencyGraphScanner"],[3,"TreeGraphScanner"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[8,"AdjacencyGraphDijkstraExt"],[8,"AdjacencyGraphBellmanFordExt"],[8,"AdjacencyGraphWarshallFloydExt"],[8,"AdjacencyGraphAbstraction"],[8,"AdjacencyGraphTopologicalSortExt"],[3,"MemorizedFactorial"],[3,"Matrix"],[3,"Polynomial"],[3,"SmallModMemorizedFactorial"],[3,"NumberTheoreticTransform"],[3,"BabyStepGiantStep"],[3,"PrimeTable"],[3,"EulerPhiTable"],[8,"NTTModulus"],[3,"Complex"],[3,"QuadDouble"],[3,"MInt"],[8,"Modulus"],[8,"Zero"],[8,"One"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"SimuratedAnnealing"],[3,"TotalOrd"],[3,"Counter"],[3,"Xorshift"],[3,"Scanner"],[3,"CharsWithBase"],[8,"IterScan"],[8,"MarkedIterScan"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"HeavyLightDecomposition"],[3,"ReRooting"],[3,"TreeRec"],[3,"SparseGraph"],[6,"UndirectedSparseGraph"],[3,"LCAMonoid"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"AssocoativeOperator"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"ContainAutomaton"],[3,"ContainCounterAutomaton"],[3,"BitVector"],[3,"GraphEidCache"],[3,"Adjacent4"],[3,"Adjacent8"],[3,"DirectedEdge"],[3,"UndirectedEdge"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"Modulo998244353"],[3,"DynModulo"],[3,"Usize1"],[3,"Chars"],[3,"Collect"]],"a":{"verify":[730,734,738,742,745,749,753,756,759,762,765,768,772,776,780,784,787,792,797,802,807,812,818,822,824,826,830,832,834,836,840,853,866,879,884,891,899,903,913,918,926,940,950,965,981,994,998,1003,1006,1013,1014,1019,1025,1033,1037,1042,1043,1046,1054,1060,1078,1088,1092,1098,1099,1110,1122,1128,1131,1134,1137,1140,1143,1145,1149,1152,1155]}}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);