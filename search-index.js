var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,5,2,5,2,5,5,2,2,5,2,5,2,5,2,5,5,2,5,2,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,2,5,2,2,5,2,2,5,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,5,5,2,2,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,5,5,2,2,2,2,5,2,2,2,2,2,5,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,5,2,5,5,2,2,5,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,2,2,5,2,2,5,2,2,5,2,2,5,0,5],"n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","dpl_1_e","levenshtein_distance","KnapsackPloblemSmallValue","dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","dpl_3_a","largest_square","dpl_3_b","largest_rectangle_in_grid","dpl_3_c","largest_rectangle","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","MinOperation","SegmentTree","dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","Static2DTree","dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","dsl_3_b","dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","EdgeListGraphScanner","grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","DirectedGraphScanner","grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","itp1_1_a","itp1_1_a"],"q":["aizu_online_judge","","","","aizu_online_judge::dpl","","","","","","","","","","","","aizu_online_judge::dpl::dpl_1_a","aizu_online_judge::dpl::dpl_1_b","","aizu_online_judge::dpl::dpl_1_c","","aizu_online_judge::dpl::dpl_1_d","","aizu_online_judge::dpl::dpl_1_e","","aizu_online_judge::dpl::dpl_1_f","","aizu_online_judge::dpl::dpl_1_g","","aizu_online_judge::dpl::dpl_1_h","","aizu_online_judge::dpl::dpl_1_i","","aizu_online_judge::dpl::dpl_3_a","","aizu_online_judge::dpl::dpl_3_b","","aizu_online_judge::dpl::dpl_3_c","","aizu_online_judge::dsl","","","","","","","","","","","","","","","","","","aizu_online_judge::dsl::dsl_1_a","","aizu_online_judge::dsl::dsl_1_b","","","aizu_online_judge::dsl::dsl_2_a","","","aizu_online_judge::dsl::dsl_2_b","","","aizu_online_judge::dsl::dsl_2_c","","aizu_online_judge::dsl::dsl_2_d","","","aizu_online_judge::dsl::dsl_2_e","","","aizu_online_judge::dsl::dsl_2_f","","","aizu_online_judge::dsl::dsl_2_g","","","aizu_online_judge::dsl::dsl_2_h","","","aizu_online_judge::dsl::dsl_2_i","","","aizu_online_judge::dsl::dsl_3_a","","","aizu_online_judge::dsl::dsl_3_b","aizu_online_judge::dsl::dsl_3_c","aizu_online_judge::dsl::dsl_3_d","","","aizu_online_judge::dsl::dsl_4_a","aizu_online_judge::dsl::dsl_5_a","aizu_online_judge::dsl::dsl_5_b","aizu_online_judge::grl","","","","","","","","","","","","","","","","","","aizu_online_judge::grl::grl_1_a","","","","","","","","aizu_online_judge::grl::grl_1_b","","","","","aizu_online_judge::grl::grl_1_c","","","","","","aizu_online_judge::grl::grl_2_a","","aizu_online_judge::grl::grl_2_b","","","","aizu_online_judge::grl::grl_3_a","","","aizu_online_judge::grl::grl_3_b","","","aizu_online_judge::grl::grl_3_c","","","aizu_online_judge::grl::grl_4_a","","aizu_online_judge::grl::grl_4_b","","","aizu_online_judge::grl::grl_5_a","","","aizu_online_judge::grl::grl_5_b","","","","aizu_online_judge::grl::grl_5_c","","","","","aizu_online_judge::grl::grl_5_d","","","","","","aizu_online_judge::grl::grl_5_e","","","","","","","aizu_online_judge::grl::grl_6_a","","","aizu_online_judge::grl::grl_6_b","","","aizu_online_judge::grl::grl_7_a","","","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a"],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  2ms","","✅  AC  0ms","","✅  AC  2ms","","✅  AC  6ms","✅  AC  3ms","","","✅  AC  1ms","","✅  AC  6ms","","✅  AC  56ms","","✅  AC  0ms","✅  AC  17ms","","✅  AC  14ms","","✅  AC  2ms","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  6ms","","","✅  AC  22ms","","","✅  AC  15ms","","","✅  AC  16ms","","✅  AC  430ms","","","✅  AC  64ms","","","✅  AC  44ms","","","✅  AC  70ms","","","✅  AC  54ms","","","✅  AC  44ms","","","✅  AC  74ms","","","✅  AC  4ms","✅  AC  2ms","✅  AC  243ms","","","✅  AC  93ms","✅  AC  62ms","✅  AC  3ms","✅  AC  10ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  77ms","✅  AC  88ms","","","","","✅  AC  9ms","","","","","","✅  AC  8ms","","✅  AC  17ms","","","","✅  AC  0ms","","","✅  AC  2ms","","","✅  AC  4ms","","","✅  AC  6ms","","✅  AC  0ms","","✅  AC  2ms","","","","✅  AC  8ms","","","","✅  AC  2ms","","","","","✅  AC  104ms","","","","","","✅  AC  49ms","","","","","","","✅  AC  255ms","","","✅  AC  0ms","","","✅  AC  0ms","","","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,[[1,2]],0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,1,1],3],0,0,[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"],[15,"bool"]],"a":{"verify":[16,18,20,22,23,26,28,30,32,33,35,37,58,61,64,67,69,72,75,78,81,84,87,90,91,92,95,96,97,98,123,124,129,135,137,141,144,147,150,152,154,158,162,167,173,180,183,186,189,191]}},\
"competitive":{"doc":"github","t":[14,0,0,14,14,14,14,14,14,0,14,14,0,14,14,14,14,0,0,14,14,14,14,14,0,14,14,14,14,14,14,14,0,0,14,14,14,14,14,14,14,14,0,14,0,0,8,8,16,16,3,16,3,16,16,8,8,3,8,3,8,3,3,8,3,8,3,3,8,8,8,8,16,3,3,8,3,3,8,8,16,3,4,3,3,3,3,3,3,3,3,3,8,8,8,16,16,3,8,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,16,16,3,8,3,3,3,3,3,16,16,8,3,8,3,3,16,3,8,3,8,3,16,3,3,3,16,8,3,11,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,12,11,10,5,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,5,5,10,5,11,11,10,10,10,5,10,10,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,8,16,3,3,8,3,3,3,3,3,3,3,3,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,16,3,8,3,3,3,3,3,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,14,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,8,4,3,13,13,3,3,13,13,13,6,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,16,16,16,16,16,8,8,8,3,8,8,8,3,3,8,3,3,4,6,6,3,3,3,3,4,6,6,16,16,8,16,3,3,8,8,8,8,16,8,3,3,3,3,3,3,3,8,8,3,3,8,3,3,3,16,3,3,4,6,6,3,3,16,16,3,3,3,16,8,8,8,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,12,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,12,11,11,10,11,11,11,12,10,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,12,11,3,6,4,8,3,16,3,8,8,6,6,6,18,18,3,3,3,3,3,3,3,3,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,5,5,5,11,12,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,11,11,5,11,5,5,10,11,11,11,11,11,5,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,8,8,3,18,8,3,18,18,16,3,18,18,18,18,18,18,18,18,18,8,3,3,18,16,8,18,18,18,18,18,18,18,18,18,18,18,18,3,8,8,18,18,8,18,3,18,8,18,3,8,16,18,8,16,3,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,10,11,11,10,11,11,11,11,11,0,10,10,10,10,10,10,10,11,11,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,6,6,4,4,6,6,6,6,4,4,3,4,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,4,4,4,4,8,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,3,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,10,5,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,18,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,8,8,3,4,3,8,3,4,3,3,8,8,8,18,8,3,16,16,16,3,8,3,8,18,3,3,3,3,3,16,3,4,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,12,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,10,11,11,12,11,11,11,11,11,5,5,5,5,5,10,11,11,14,14,11,11,11,11,11,11,11,12,12,11,12,12,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,3,3,3,3,3,4,8,3,3,13,3,3,3,3,4,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,12,12,12],"n":["add_assign","algebra","algorithm","automaton","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","iter_print","math","max","memorize","min","minmax","mlambda","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","tools","tree","AbelianGroup","AbelianMonoid","Act","ActMonoid","AddMulOperation","Additive","AdditiveOperation","Agg","AggMonoid","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","Field","FindMajorityOperation","FirstOperation","Group","Idempotent","IdempotentMonoid","Invertible","Key","LastOperation","LinearOperation","Magma","MaxOperation","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","Top2Operation","Unital","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_operate","act_operate","act_operate_assign","act_operate_assign","act_unit","act_unit","add","add","add","agg_operate","agg_operate","agg_operate_assign","agg_operate_assign","agg_unit","agg_unit","all_one","all_zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone_into","clone_into","define_monoid","div","div","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","mul","mul","neg","neg","one","one","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","single","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","sub","sub","sum","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","zero","zero","0","Answer","B","BabyStepGiantStep","Bisect","BitDp","Combinations","ConvexHullTrick","DivisorTransform","IndependentSubSet","LIter","M","MoSolver","MultipleTransform","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","SubsetTransform","Subsets","SupersetTransform","T","Trisect","XorBasis","add_line","answer","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","combinations","combinations_with_replacement","convolve","convolve","convolve","convolve","default","default","default","elements","eq","eval","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_bucket","fold_cell","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","halve","ind","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_element","is_subset","k_colorable","middle","mo_solve","mo_solve","mobius_transform","mobius_transform","mobius_transform","mobius_transform","n","new","new","new","new","new","new","new_with_primes","new_with_primes","next","next","next_left","next_left","next_minimum","next_right","next_right","next_section","not_elements","parallel_binary_search","permutations","position_bisect","product","query","reduce","remove","rfind_bisect","rposition_bisect","run_length_encoding","section_end","section_end","slide_minimum","solve","sqrt_decomposition","sqrt_decomposition","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_bucket","update_cell","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","1","1","1","Accumulate","Allocator","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MemoryPool","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTree2D","SegmentTreeMap","SlopeTrick","SplayMap","SplaySequence","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","allocate","allocate","append","as_slice","automaton","back","bit_length","bit_length","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_failure","build_inplace","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count_ones","count_zeros","dd","deallocate","deallocate","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","drop","drop","drop","edges","eq","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get","get","get_difference","get_key_value","get_key_value_at","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert","insert","insert","insert_at","insert_once_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","iter","iter","iter","iter_mut","keys","keys","keys","last","len","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","modify","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next_node","node_size","not","not","ones","partial_cmp","pop","pop_back","pop_front","pop_left_if","pop_left_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","quantile_outer","query_min","range","range","range","range_at","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove","remove","remove_at","remove_count","remove_count","reverse","reverse","roots","roots","roots","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update","update_isize","valley","values","values","values","values_mut","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","0","Approx","ApproxOrd","Ccw","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","Point","approx_cmp","approx_eq","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","ccw_open","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","default","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","add_assign","add_assign","add_assign","add_assign","add_clause","add_cost1","add_cost2","add_cost2_01","add_cost2_10","add_edge","add_edge","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adj4","adj8","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies_with_eindex","adjacencies_with_eindex","adjacencies_with_value","adjacencies_with_value","adjacencies_with_value","adjacency","articulation","avalue","avalue","avalue","aviews","aviews","aviews","aviews","aviews","aviews","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","build","builder","builder","builder","builder_with_esize","change_edge","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","components","construct_emap","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","construct_vmap","construct_vmap","construct_vmap","construct_vmap","default","default","default","dfs_order","dfs_tree","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","dulmage_mendelsohn_decomposition","edges","edges","edges","edges_size","edges_size","eindex","eindex","eindex","eindex","elist","emap_get","emap_get","emap_get_mut","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","eq","eq","eq","eq","esize","esize","esize","eview","eview","eview","extend","extend","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","hash","hash","hash","height","hopcroft_karp","id","index","index","inf","inf","inf","inf","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","kuhn_multi_start_bfs","low","map","map","maximum_flow","maximum_flow_limited","maximum_independent_set","maximum_matching","minimum_cost_flow","minimum_cost_flow_limited","minimum_cut","minimum_edge_cover","minimum_spanning_arborescence","minimum_spanning_tree","minimum_vertex_cover","move_by_diff","mscan","mscan","mscan","mscan","mul","mul","mul","mul","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_adj4","new_adj8","new_with_esize","next","next","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","solve","source","source","source","source","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices_size","vertices_size","vindex","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_set","vmap_set","vsize","vsize","vsize","vview","vview","vview","vview","vview","vview","vview","warshall_floyd_ap","warshall_floyd_ap","weighted_tree_depth","weighted_tree_depth","width","with_n_values","Convolve","Convolve998244353","ConvolveRealFft","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","MIntConvolve","MOD","MOD","Matrix","MemorizedFactorial","Mersenne127","Mersenne61","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","assign","berlekamp_massey","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","check_primitive_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convolve","convolve","count_divisors","count_divisors","count_multiset_sum","count_subset_sum","data","data","data","default","default","default","default","determinant","diff","discrete_logarithm","discrete_logarithm_prime_mod","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","divisors","divisors","divisors","eq","eq","eq","euler_phi","eval","even","exp","extgcd","extgcd_binary","extgcd_recurse","eye","fact","factorial","floor_sum","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_loop","get","get_mod","get_mod","highly_composite_number","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","inv","inv","inv","inv_fact","inverse","inverse_transform","inverse_transform","inverse_transform","inverse_transform","is_prime","is_prime","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","length","length","length","length","linear_congruence","log","miller_rabin","miller_rabin_with_br","mod_add","mod_add","mod_div","mod_div","mod_inv","mod_inv","mod_mul","mod_mul","mod_neg","mod_neg","mod_one","mod_one","mod_sub","mod_sub","mod_zero","mod_zero","modinv","modinv_extgcd_binary","modinv_recurse","moebius","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply","multiply","multipoint_evaluation","neg","neg","new","new","new","new","new","new","new","odd","one","one","permutation","pow","pow","pow","pow","powi","prefix","prefix_ref","prime_factors","prime_factors","prime_factors","prime_factors_flatten","primes","primes_lte","primitive_root","product_all","rank","rem","rem","rem","rem","rem","rem_assign","rem_assign","reserve","resize","resized","reversed","row_reduction","shape","shl","shl","shl_assign","shr","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","taylor_shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","transform","trial_division","trial_division","trim_tail_zeros","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zeros","zeros","0","0","0","0","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp_by_arg","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","default","delta","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_rem","div_rem","div_rem","dot","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","get_mod","get_mod","get_mod","hash","hash","hash","hash","hypot","hypot","hypot","i","im","index","inner","into","into","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","is_zero","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","minimum","minimum","minimum","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new_unchecked","norm","not","not","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","primitive_nth_root_of_unity","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","scan","scan","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_mod","set_mod","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","local_key","local_key","local_key","local_key","n1","n1","n1","n1","n1","n2","n2","n2","n2","n2","n3","n3","n3","n3","n3","r","r","r","r","r","r","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Chars","Read","Scanner","Usize1","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","bytes","chain","clone","clone","clone","clone_into","clone_into","clone_into","flush","fmt","fmt","fmt","from","from","from","into","into","into","is_read_vectored","is_write_vectored","iter","iter_print","mscan","new","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","scan","scan","scan","scan_vec","take","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_all","write_all_vectored","write_fmt","write_vectored","KnuthMorrisPratt","MOD","MultipleRollingHash","RollingHash","SuffixArray","Zarray","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","find","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash_once","index","index","into","into","into","into","into","longest_common_prefix_array","mersenne_mod","mersenne_mul","mersenne_mul_mod","new","new","new","new","new","new_rand","search","search_all","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","1","AsTotalOrd","AssociatedValue","ByteWithBase","Bytes","BytesWithBase","CharTools","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","LOG_TABLE_SIZE","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandomSpec","SEED","Scanner","ScannerIter","SimuratedAnnealing","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","end_temp","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_accepted","is_end","is_maximize","iter_count","iter_print","local_key","log_table","minimize","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","new","new","new","new","next","next","now","partial_cmp","partial_cmp","partial_cmp","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","scan","scan","scan","scan","scan_value","set","set","set_end_temp","set_start_temp","set_time_limit","set_update_interval","shuffle","start_temp","temperture","time","time","time_limit","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_upper_alphabetic_number","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_interval","with","with","0","0","0","0","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","TreeRec","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dfs","dp","eidx","ep","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","n","new","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","time_seeded","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vidx","vsize","vsize","with_seed","0","0","1"],"q":["competitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebracompetitive::algorithmcompetitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structurecompetitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graphcompetitive::mathcompetitive::numcompetitive::num::mint_basiccompetitive::num::montgomery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::toolscompetitive::treecompetitive::tree::TreeCenter","",""],"d":["","algebra","algorithm","build automaton","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","Implement <code>AssociatedValue</code>.","","","","Print expressions with a separator.","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","string algorithems","","","tree algorithems","commutative group","commutative monoid","","","$+,\\\\times$","","$+$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","Find majority(strict) of a sequence.","retain the first element","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","$a$ where $a \\\\circ x = e$","","","","","","","","","","multiplicative operaion: $+$","multiplicative operaion: $+$","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","additive identity: $0$","additive identity: $0$","","","","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","binary search helper","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","ternary search helper","Basis of xor operation.","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","","","choose distinct <code>r</code> elements from <code>n</code> in sorted order","","choose <code>r</code> elements from <code>n</code> in sorted order","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","get i-th value of rho path","return between two elements","","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","middle point of section","","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","","Create a empty space.","","","","","","","","","","Divide into 3 sections","","","choose distinct <code>r</code> elements from <code>n</code> in any order","Returns the first index that satisfies a predicate. if not …","choose <code>r</code> elements from <code>n</code> independently","","Return (reduced basis, coordinate). Coordinate means if …","","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","the end condition of binary search","the end condition of ternary search","","","","","","like <code>(left..=right).min_by_key(f)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return accumlate of [0, k)","fold [0, k]","fold [0, i] x [0, j]","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of [l, r)","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Create empty","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","get k-th smallest value in range","get k-th smallest value out of range","","","","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-badd a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(p_x = f) | (p_y = g)","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","","","","","","","","","Return a slice of adjacency verticeseturn the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","","Return an iterator over graph vertices.","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e","Sum of Floor of Linear","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","binary gcd","","","","","[(hcn, #divisor)]","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","","return: (y,z)","","","","","","","","","","","","","","","","","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationseturns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","m","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","n^1 mod m","","","","","n^2 mod m","","","","","n^3 mod m","","","","","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","","","","","","","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","","","","","","","Flush this output stream, ensuring that all intermediately …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","","","","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","","","","","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","S [l, r)","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","Trait for spec of generating random value.","","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","","","","","","","","","","","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","","","","","","","","","","","","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,237,0,238,0,237,237,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,0,0,0,0,0,0,0,238,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,238,0,0,237,240,241,242,243,244,245,4,237,240,241,242,243,244,245,4,237,237,237,237,237,237,238,238,2,237,237,237,237,237,237,246,247,248,240,241,242,243,244,245,2,4,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,248,240,241,242,243,244,245,2,4,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,2,2,2,4,2,4,0,265,265,2,4,248,240,241,242,243,244,245,2,4,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,248,240,241,242,243,244,245,2,4,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,265,266,253,254,255,258,260,263,267,267,0,238,238,268,268,238,238,239,2,4,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,239,239,91,91,239,239,266,266,253,254,267,267,4,237,240,241,242,243,244,245,4,268,268,4,2,4,237,237,248,240,241,242,243,244,245,2,4,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,248,240,241,242,243,244,245,2,4,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,248,240,241,242,243,244,245,2,4,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,267,2,4,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,269,238,238,20,270,271,0,0,0,0,0,0,0,272,271,0,0,0,0,0,272,0,0,0,0,0,272,0,0,0,271,0,0,12,270,14,0,31,29,273,274,24,25,28,20,21,22,19,12,23,17,32,14,31,29,273,274,24,25,28,20,21,22,19,12,23,17,32,14,271,17,17,19,20,21,22,19,12,23,14,20,21,22,19,12,23,14,0,20,0,273,274,24,25,20,12,14,20,20,23,17,14,275,0,28,20,21,22,19,12,23,17,14,29,271,271,31,29,273,274,24,25,28,20,21,22,19,12,23,17,32,14,19,14,17,17,276,19,270,14,31,29,273,274,24,25,28,20,21,22,19,12,23,17,32,14,21,22,20,20,19,277,270,270,273,274,24,25,19,31,28,12,23,32,14,24,25,21,22,272,31,32,272,31,277,20,0,0,275,0,12,14,270,275,275,0,276,277,0,28,271,271,20,0,20,21,22,19,12,23,14,31,29,273,274,24,25,28,20,21,22,19,12,23,17,32,14,31,29,273,274,24,25,28,20,21,22,19,12,23,17,32,14,31,29,273,274,24,25,28,20,21,22,19,12,23,17,32,14,29,271,271,273,274,24,25,0,0,0,0,0,0,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,35,38,33,34,38,33,34,35,38,33,34,33,34,33,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,38,33,34,33,34,33,33,34,35,36,37,38,37,0,0,0,0,38,33,33,34,35,36,37,38,33,34,35,36,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,33,34,35,36,37,38,40,41,42,40,41,42,0,0,278,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,278,0,0,0,0,0,0,0,278,40,41,42,43,44,45,46,47,48,49,93,50,51,52,53,54,53,54,55,56,57,57,55,56,57,57,58,60,61,279,63,55,64,0,65,93,50,66,66,66,66,66,66,66,66,66,52,53,54,71,92,72,73,58,64,74,75,76,65,80,81,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,55,56,78,68,69,70,57,67,61,51,52,53,54,71,92,72,73,58,64,74,75,76,65,80,81,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,55,56,78,68,69,70,57,67,61,51,67,68,55,56,69,70,57,57,53,54,71,72,73,64,74,75,76,65,60,77,40,41,42,43,44,45,46,47,48,49,50,66,55,56,78,68,69,70,57,67,61,51,53,54,71,72,73,64,74,75,76,65,60,77,40,41,42,43,44,45,46,47,48,49,50,66,55,56,78,68,69,70,57,67,61,51,66,70,69,66,66,68,279,63,76,65,80,81,63,48,49,66,55,56,78,69,70,57,278,278,77,55,69,70,80,81,63,67,66,55,55,56,56,69,70,58,60,67,61,67,58,58,52,53,54,71,72,73,64,74,75,76,65,80,81,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,55,56,78,68,69,70,57,67,61,51,52,53,54,71,72,73,64,74,75,80,77,72,73,64,75,76,65,71,52,53,54,71,92,72,73,58,64,74,75,76,65,80,81,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,55,56,78,68,69,70,57,67,61,51,52,50,55,55,56,56,69,70,53,72,64,65,53,54,72,73,64,75,80,81,66,55,56,69,60,81,81,69,70,70,69,69,70,60,46,47,46,47,66,71,71,278,40,41,42,43,44,45,46,47,48,49,80,81,78,69,70,67,67,67,69,70,52,53,54,71,92,72,73,58,64,74,75,76,65,80,81,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,55,56,78,68,69,70,57,67,61,51,76,65,81,55,56,60,81,55,56,69,70,69,55,56,69,76,76,65,81,55,56,46,47,46,47,53,77,58,60,61,57,57,80,53,54,71,92,72,73,58,64,74,75,76,65,80,81,60,63,77,43,44,45,48,49,66,55,56,78,68,69,70,57,67,61,51,278,40,41,42,43,44,45,46,47,48,49,67,67,66,66,66,66,76,65,65,69,70,69,70,72,73,64,75,76,65,65,51,51,78,92,81,56,81,51,93,93,93,93,50,51,51,80,81,55,56,69,70,81,55,56,65,80,58,60,61,72,73,64,75,77,77,58,61,51,93,93,50,93,93,50,53,54,72,73,64,75,66,57,66,66,66,66,66,66,58,60,61,57,77,77,280,280,280,280,53,54,71,72,73,64,74,75,76,65,60,77,40,41,42,43,44,45,46,47,48,49,50,66,55,56,78,68,69,70,57,67,61,51,52,53,54,71,92,72,73,58,64,74,75,76,65,80,81,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,55,56,78,68,69,70,57,67,61,51,52,53,54,71,92,72,73,58,64,74,75,76,65,80,81,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,55,56,78,68,69,70,57,67,61,51,52,53,54,71,92,72,73,58,64,74,75,76,65,80,81,60,63,77,40,41,42,43,44,45,46,47,48,49,50,66,55,56,78,68,69,70,57,67,61,51,58,60,61,53,54,72,73,64,74,75,80,68,68,57,55,56,69,69,80,81,63,55,67,105,0,0,0,0,101,101,0,0,101,101,101,0,281,281,105,101,106,102,104,105,101,106,102,104,101,102,104,101,105,101,106,102,104,105,101,106,102,104,0,105,101,106,0,0,106,104,105,102,104,104,102,104,105,101,106,102,104,105,101,106,102,104,105,101,106,102,104,101,104,104,105,101,106,102,104,102,104,102,104,106,102,104,105,101,102,104,102,104,105,101,106,102,104,105,101,106,102,104,105,101,106,102,104,105,101,106,102,104,282,283,284,282,283,284,285,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,287,288,0,289,0,0,0,0,0,0,290,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,291,0,0,0,0,0,0,0,292,293,0,0,0,294,0,0,0,0,295,291,296,297,298,109,110,110,110,110,111,112,113,114,115,109,109,112,116,116,282,117,118,116,116,119,119,283,119,284,117,118,112,147,285,122,123,286,117,118,116,116,119,299,299,299,299,299,299,299,299,119,140,117,118,141,144,145,147,296,297,298,111,142,143,112,113,127,128,129,122,123,116,114,125,115,126,110,130,131,132,120,119,133,109,140,117,118,141,144,145,147,296,297,298,111,142,143,112,113,127,128,129,122,123,116,114,125,115,126,110,130,131,132,120,119,133,109,147,111,114,115,125,126,119,119,125,112,113,127,128,129,122,123,116,114,125,115,110,130,131,132,120,119,133,109,112,113,127,128,129,122,123,116,114,125,115,110,130,131,132,120,119,133,109,128,129,122,123,130,131,132,120,133,290,119,300,130,131,132,295,117,118,116,119,112,110,120,119,119,299,299,299,299,0,289,127,119,127,119,288,129,123,120,119,290,119,290,119,290,290,128,129,122,123,130,131,132,120,301,119,112,302,119,119,114,115,116,112,113,127,128,129,122,123,116,114,125,115,126,110,130,131,132,120,119,133,109,119,140,117,118,141,144,145,147,296,297,298,111,142,143,112,113,127,128,128,128,129,129,122,122,123,123,116,114,125,115,126,110,130,131,132,120,119,133,109,113,127,119,133,114,115,125,126,112,133,128,129,122,123,130,131,132,120,116,113,120,127,133,291,296,297,298,140,117,118,141,144,145,147,296,297,298,111,142,143,112,113,127,128,129,122,123,116,114,125,115,126,110,130,131,132,120,119,133,109,144,145,113,147,122,123,125,125,113,113,126,126,125,113,127,127,113,116,140,141,142,143,291,296,297,298,140,117,118,141,144,145,147,111,142,143,112,113,127,116,114,115,110,120,133,109,116,116,111,144,145,147,128,129,122,123,130,131,132,120,109,109,133,110,291,296,297,298,119,120,137,146,124,119,119,119,112,113,127,128,129,122,123,116,114,125,115,110,130,131,132,120,119,133,109,119,146,119,146,119,146,119,146,119,119,146,119,140,117,118,141,144,145,147,296,297,298,111,142,143,112,113,127,128,129,122,123,116,114,125,115,126,110,130,131,132,120,119,133,109,140,117,118,141,144,145,147,296,297,298,111,142,143,112,113,127,128,129,122,123,116,114,125,115,126,110,130,131,132,120,119,133,109,109,140,117,118,141,144,145,147,296,297,298,111,142,143,112,113,127,128,129,122,123,116,114,125,115,126,110,130,131,132,120,119,133,109,116,294,117,118,112,127,116,119,119,127,119,293,128,129,122,123,120,295,117,118,116,119,295,117,118,116,119,295,295,303,119,112,304,117,117,118,116,119,119,299,299,146,119,116,110,0,0,0,0,0,305,0,0,0,0,0,0,306,307,0,0,0,0,0,0,0,0,0,305,151,151,151,151,151,151,151,151,152,153,151,151,151,151,153,0,0,308,309,306,307,159,160,161,151,152,153,162,163,164,308,309,306,307,159,160,161,151,152,153,162,163,164,151,0,159,160,161,151,152,153,162,163,164,159,160,161,151,152,153,162,163,164,159,160,305,305,163,164,151,151,151,152,153,160,151,153,163,152,151,0,0,151,151,151,151,151,151,151,151,153,151,151,151,151,151,0,163,164,151,152,153,0,151,151,151,0,0,0,152,159,160,0,159,160,161,151,152,153,162,163,164,308,309,306,307,159,160,161,151,151,151,151,152,153,162,163,164,151,151,152,153,0,0,162,306,307,0,159,151,152,152,153,151,152,152,153,151,308,309,306,307,159,160,161,151,152,153,162,163,164,151,159,161,151,159,152,305,308,309,309,163,164,151,151,151,151,0,159,0,0,305,308,309,309,151,153,0,151,0,0,306,307,306,307,306,307,306,307,306,307,306,307,306,307,306,307,0,0,0,0,151,151,151,151,151,151,151,151,152,153,151,151,151,151,305,308,309,309,151,151,151,159,160,161,152,162,163,164,151,151,153,159,161,151,152,153,161,151,151,0,163,164,0,163,163,0,151,152,151,151,151,151,153,151,151,163,151,151,151,152,152,151,151,151,151,151,151,152,151,310,151,151,151,151,151,151,151,151,152,153,151,151,151,151,151,159,160,161,151,152,153,162,163,164,305,308,309,309,163,164,151,151,308,309,306,307,159,160,161,151,152,153,162,163,164,308,309,306,307,159,160,161,151,152,153,162,163,164,308,309,306,307,159,160,161,151,152,153,162,163,164,151,153,151,152,172,173,175,179,0,0,0,0,311,0,0,311,311,312,0,311,311,311,311,311,311,311,311,311,0,0,0,311,18,0,311,311,311,311,311,311,311,311,311,311,311,311,0,0,0,311,311,0,311,0,311,0,311,0,0,313,311,0,314,0,0,311,314,100,171,172,173,175,175,175,175,175,175,179,179,179,179,179,179,180,313,313,311,172,173,311,172,173,165,165,165,165,100,100,100,100,100,100,100,100,171,171,172,173,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,180,180,165,165,100,100,100,100,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,100,311,172,173,311,172,173,311,172,173,311,172,173,311,172,173,315,315,315,315,315,315,315,175,179,175,179,175,179,175,179,175,179,175,179,184,165,158,100,171,172,173,175,179,180,184,165,158,100,171,172,173,175,179,180,311,172,173,311,172,173,311,172,173,165,158,100,171,172,173,175,179,180,165,158,100,171,172,173,175,179,180,100,171,172,173,175,179,100,100,311,172,173,311,172,173,311,172,173,316,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,316,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,100,165,100,171,172,173,175,179,180,315,165,165,165,165,158,158,158,100,100,100,100,100,100,100,100,171,172,173,175,179,179,179,179,179,179,179,179,179,179,179,179,180,165,165,100,100,100,100,175,179,179,179,179,179,179,179,179,179,179,179,179,311,312,172,173,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,158,158,158,100,317,317,317,317,165,100,171,172,173,175,179,180,311,172,173,311,172,173,311,172,173,313,313,311,172,173,165,165,158,100,171,171,172,172,173,173,175,175,179,179,180,180,315,315,315,315,315,315,315,311,172,173,318,184,165,165,165,165,165,165,165,165,165,165,165,165,165,158,100,171,171,172,172,173,173,175,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,179,180,180,311,172,173,165,171,172,173,175,179,180,312,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,184,313,175,175,175,175,175,175,179,179,179,179,179,179,18,165,158,158,158,165,100,175,179,311,172,173,100,100,180,165,318,184,165,158,100,171,172,173,175,179,180,165,311,172,173,311,172,173,319,319,319,319,311,172,173,314,175,175,175,175,175,175,179,179,179,179,179,179,311,172,173,169,169,314,175,175,175,175,175,175,179,179,179,179,179,179,311,172,173,311,172,173,154,154,171,180,313,313,316,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,311,172,173,311,172,173,311,172,173,311,172,173,311,172,173,311,172,173,319,171,172,173,175,179,311,172,173,319,171,172,173,175,179,0,18,18,318,18,18,18,18,18,18,18,18,313,313,0,165,165,165,165,100,100,100,100,100,100,100,100,171,171,172,173,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,180,180,311,172,173,165,165,100,100,100,100,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,165,165,100,100,171,172,173,175,175,175,175,175,175,179,179,179,179,179,179,180,165,158,158,158,100,165,100,175,179,169,165,100,172,173,175,179,100,171,172,173,175,179,180,100,312,165,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,311,172,173,311,172,173,100,165,165,100,100,100,311,172,173,158,158,158,172,173,175,179,179,179,179,179,179,179,179,179,179,179,179,175,179,179,179,179,179,179,179,179,179,179,179,179,311,312,172,173,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,316,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,316,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,316,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,311,172,173,165,100,175,179,319,319,319,319,165,165,169,169,154,154,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,313,175,175,175,175,175,175,179,179,179,179,179,179,311,314,172,173,175,175,175,175,175,175,179,179,179,179,179,179,311,172,173,311,172,173,311,172,173,311,165,171,172,173,180,165,317,317,317,317,315,165,165,165,165,100,100,100,100,100,100,100,100,171,172,173,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,180,165,165,100,100,100,100,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,165,165,100,100,311,172,173,311,172,173,311,172,173,311,172,173,165,158,100,171,172,173,175,179,180,311,172,173,317,317,317,317,317,317,317,317,165,171,172,173,175,179,180,311,172,173,316,175,175,175,175,175,175,175,175,175,175,175,175,179,179,179,179,179,179,179,179,179,179,179,179,100,311,172,173,184,165,158,100,171,172,173,175,179,180,184,165,158,100,171,172,173,175,179,180,184,165,158,100,171,172,173,175,179,180,100,314,175,175,175,175,175,175,179,179,179,179,179,179,184,184,154,165,100,172,173,175,179,0,0,0,0,0,0,0,0,0,0,0,0,320,321,322,323,324,325,320,321,322,323,324,325,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,321,321,321,321,321,321,321,321,321,322,322,322,322,322,322,322,322,322,323,323,323,323,323,323,323,323,323,324,324,324,324,324,324,324,324,324,325,325,325,325,325,325,325,320,321,322,323,324,325,320,320,320,320,320,320,320,320,320,320,320,320,320,321,321,321,321,321,321,321,321,321,322,322,322,322,322,322,322,322,322,323,323,323,323,323,323,323,323,323,324,324,324,324,324,324,324,324,324,325,325,325,325,325,325,325,320,321,322,323,324,325,320,321,322,323,324,325,320,320,320,320,320,320,320,320,320,320,320,320,321,321,321,321,321,321,321,321,322,322,322,322,322,322,322,322,323,323,323,323,323,323,323,323,324,324,324,324,324,324,324,324,325,325,325,325,325,325,320,321,322,323,324,325,320,321,322,323,324,325,320,321,322,323,324,325,320,321,322,323,324,325,320,320,321,322,323,324,325,320,321,322,323,324,325,326,327,324,325,320,321,322,323,324,325,320,321,322,323,324,325,320,321,322,323,324,325,0,0,0,0,0,0,0,0,0,328,329,330,331,328,329,330,331,328,329,330,331,332,328,329,330,331,328,329,330,331,328,329,330,331,332,328,329,330,331,332,328,329,330,331,332,328,329,330,331,332,332,328,329,330,331,332,332,328,329,330,331,328,329,330,331,328,329,330,331,0,0,0,0,0,192,193,194,192,193,194,197,333,197,197,192,193,194,192,193,194,333,192,193,194,192,193,194,192,193,194,197,333,192,0,192,192,197,0,197,197,197,197,197,197,0,192,193,194,192,197,192,193,194,192,193,194,192,193,194,192,193,194,333,333,333,333,333,0,203,0,0,0,0,202,203,204,205,206,202,203,204,205,206,202,203,204,205,206,202,203,204,205,206,203,204,203,204,202,203,204,205,206,202,203,204,205,206,203,205,206,202,203,204,205,206,205,203,203,203,202,203,204,205,206,204,206,202,202,203,204,205,206,202,203,204,205,206,202,203,204,205,206,202,203,204,205,206,207,208,210,211,212,213,215,208,0,0,0,0,0,0,0,0,0,0,0,0,0,219,0,0,139,334,335,0,0,0,0,219,0,0,0,0,0,336,0,0,0,337,196,207,219,208,209,221,210,211,212,213,214,215,216,217,218,196,207,219,208,209,221,210,211,212,213,214,215,216,217,218,338,338,208,209,210,211,212,213,214,215,216,217,218,208,209,210,211,212,213,214,215,216,217,218,207,208,210,219,208,209,219,207,208,210,219,208,209,221,210,211,212,213,214,215,216,217,218,196,207,219,208,209,221,210,211,212,213,214,215,216,217,218,339,339,339,339,209,209,209,336,336,335,210,196,207,219,208,209,221,210,211,212,213,214,215,216,217,218,196,221,219,219,219,219,340,336,219,219,338,336,336,334,211,212,213,215,216,218,218,219,209,216,218,196,221,219,207,208,210,220,209,210,219,209,220,220,209,209,0,0,0,0,0,139,214,217,0,0,336,336,219,219,219,219,209,219,219,209,219,219,339,339,339,208,209,210,211,212,213,214,215,216,217,218,339,196,207,219,208,209,221,210,211,212,213,214,215,216,217,218,196,207,219,208,209,221,210,211,212,213,214,215,216,217,218,196,207,219,208,209,221,210,211,212,213,214,215,216,217,218,219,336,336,233,234,235,236,0,0,0,0,0,0,0,0,0,150,0,0,0,0,0,0,0,150,233,234,235,236,223,224,225,227,341,228,232,229,150,231,230,233,234,235,236,223,224,225,227,341,228,232,229,150,231,230,223,224,225,227,228,229,150,230,223,224,225,227,228,229,150,230,231,226,341,230,229,223,229,150,223,224,225,227,228,229,150,231,230,233,234,235,236,223,224,225,227,341,228,232,229,150,231,230,225,150,231,231,0,233,234,235,236,223,224,225,227,341,228,232,229,150,231,230,227,232,223,224,225,230,223,224,225,232,229,231,230,228,223,232,224,224,224,225,232,232,233,234,235,236,225,226,341,224,224,224,231,223,224,225,227,228,229,150,230,233,234,235,236,223,224,225,227,341,228,232,229,150,231,230,233,234,235,236,223,224,225,227,341,228,232,229,150,231,230,233,234,235,236,223,224,225,227,341,228,232,229,150,231,230,232,224,225,232,226,341,231,342,343,343],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[[2,[3]]],[[2,[3]]]],[[[4,[3]]],[[4,[3]]]],[[]],[[]],0,[[]],[[]],[[[2,[5]],6],7],[[[4,[5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[12,13,13]],[[]],[[14,15],[[1,[[16,[15]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[],17],[[17,9],[[17,[9]]]],[[[19,[18]]],9],[20,20],[21,21],[22,22],[[[19,[[0,[3,18]]]]],[[19,[[0,[3,18]]]]]],[12,12],[[[23,[3]]],[[23,[3]]]],[14,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[20,9],22],[9],[[16,16],16],[[16,16],16],[[24,16,16],16],[[25,16,16],16],[[],20],[[],12],[[],14],[[20,9],26],[[20,20],8],[23,13],0,[[14,15],[[1,[15]]]],[27,1],[9,[[16,[9]]]],[[[28,[5]],6],7],[[20,6],7],[[21,6],7],[[22,6],7],[[[19,[[0,[5,18]]]],6],7],[[12,6],7],[[[23,[5]],6],7],[[[17,[5]],6],7],[[14,6],7],[[29,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[18]]]],[30,14],0,[[17,9]],[[]],0,[9],[[14,15],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],8],[[9,9],8],[[[19,[18]],9],8],[[]],[9],[9],[[]],[[]],[24],[25],0,[[],31],[9,28],[[],12],[[],23],[9,32],[[],14],[[],24],[[],25],[21,1],[22,1],[[]],[31],[32,13],[[]],[31],[[]],[[20,9],26],[9,16],[9],[27,9],[9],[[12,13],13],[[14,15]],[9],[27,1],[27,9],[26,16],[[],8],[[],8],[9,[[16,[9]]]],[28,[[1,[9]]]],[[9,9],29],[[9,9],29],[9,21],[27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[29,9,9]],[[]],[[]],[[]],[[]],[24],[25],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[34,34],[35,35],[36,36],[37,37],[[[38,[3]]],[[38,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],38],0,0,0,[33],[34],[35],[[38,30]],[33],[34],[33],[34],[33],[[33,6],7],[[34,6],7],[[35,6],7],[[36,6],7],[[37,6],7],[[[38,[5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[33,9,9]],[[34,9,9]],[[35,15,15]],[38],[[33,9,9]],[[34,9,9]],[[33,9,9,9]],[[34,9,9,9]],[[33,9,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[37,9],[[1,[[16,[9]]]]]],[[],9],[[9,9,39],9],[[9,9,39],9],[[],9],[38,9],[33,9],[9,33],[9,34],[[],35],[30,36],[[],37],[[],38],[33,9],[[34,9],9],[[35,15],15],[[36,15],15],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[40,8],[41,8],[42,8],[43,8],[44,8],[45,8],[46,8],[47,8],[48,8],[49,8],[9,8],[[50,9],8],[[51,9],9],[[52,9]],[[53,9]],[[54,9,9]],[[53,9]],[[54,9,9]],[55],[56],[[57,13]],[[57,13]],[[55,9]],[[56,9]],[[57,13]],[[57,13]],[[[58,[39]]],[[59,[9,[16,[9]]]]]],[60,[[59,[9,[16,[9]]]]]],[61,[[59,[9,[16,[9]]]]]],[[],62],[63,62],[[55,55]],[64],0,[65,1],[[],9],[50,9],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[66,66]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[67],[68],[55],[56],[69],[70],[57],[57],[53,53],[54,54],[71,71],[72,72],[73,73],[64,64],[74,74],[75,75],[76,76],[65,65],[60,60],[[[77,[3,3]]],[[77,[3,3]]]],[[[40,[3,3]]],[[40,[3,3]]]],[[[41,[3,3]]],[[41,[3,3]]]],[[[42,[3,3]]],[[42,[3,3]]]],[[[43,[3,3,3,3,3]]],[[43,[3,3,3,3,3]]]],[[[44,[3,3,3,3,3]]],[[44,[3,3,3,3,3]]]],[[[45,[3,3,3,3,3,3]]],[[45,[3,3,3,3,3,3]]]],[[[46,[3]]],[[46,[3]]]],[[[47,[3]]],[[47,[3]]]],[[[48,[3]]],[[48,[3]]]],[[[49,[3]]],[[49,[3]]]],[50,50],[66,66],[[[55,[3]]],[[55,[3]]]],[[[56,[3]]],[[56,[3]]]],[[[78,[3]]],[[78,[3]]]],[68,68],[[[69,[3,3]]],[[69,[3,3]]]],[[[70,[3]]],[[70,[3]]]],[57,57],[67,67],[61,61],[51,51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[66,66],79],[70,8],[69,8],[66,15],[66,15],0,[62],[[63,62]],[[],76],[[],65],[[],80],[[],81],[[],63],[[],48],[[],49],[[],66],[[],55],[[],56],[[],78],[[],69],[[],70],[[],57],[[],77],[[],77],0,[55,[[82,[9]]]],[69],[70],[80],[81],[63],[67,16],[[66,66],8],[[55,30]],[[55,30]],[[56,30]],[[56,30]],[[69,30]],[[70,30]],[[[58,[39]],9],9],[[60,9],9],[67,[[10,[9,9]]]],[[61,9],9],[[67,9],[[10,[9,9]]]],[[[58,[39]],9],[[83,[0]]]],[[[58,[39]],9],[[84,[0]]]],[[52,6],7],[[53,6],7],[[54,6],7],[[71,6],7],[[72,6],7],[[73,6],7],[[64,6],7],[[74,6],7],[[75,6],7],[[76,6],7],[[65,6],7],[[80,6],7],[[81,6],7],[[60,6],7],[[[63,[5]],6],7],[[77,6],7],[[[40,[5,5]],6],7],[[[41,[5,5]],6],7],[[[42,[5,5]],6],7],[[[43,[5,5,5,5,5]],6],7],[[[44,[5,5,5,5,5]],6],7],[[[45,[5,5,5,5,5,5]],6],7],[[[46,[5]],6],7],[[[47,[5]],6],7],[[[48,[5]],6],7],[[[49,[5]],6],7],[[50,6],7],[[66,6],7],[[55,6],7],[[56,6],7],[[[78,[5]],6],7],[[68,6],7],[[[69,[5,5]],6],7],[[[70,[5]],6],7],[[57,6],7],[[67,6],7],[[61,6],7],[[51,6],7],[[52,9,9]],[[[53,[85]],9,9]],[[54,9,9,9,9]],[[71,9,9]],[[72,9,9]],[[73,9,9]],[[64,9,9]],[74],[[75,9,9]],[80],[77],[72],[73],[64],[75],[76],[65],[[71,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],52],[30,50],[30,55],[30,55],[30,56],[30,56],[30,69],[30,70],[[],53],[16,72],[16,64],[65,1],[[[53,[85]],9]],[[54,9,9]],[[72,9]],[[73,9]],[[64,9]],[[75,9]],[[80,9],1],[81,1],[[66,9],8],[55,9],[56,9],[69,1],[[60,9,9],1],[81,1],[[81,9],1],[69,1],[70,1],[70,1],[69,1],[69,1],[70,1],[[60,9]],[[],46],[[],47],[[],46],[[],47],[66],[71,9],[[71,9]],[[]],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[[80,9]],[81,1],[78],[69],[70],[67,[[16,[9]]]],[[67,9],[[16,[9]]]],[[67,9,9],9],[69],[70],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[76,8],[65,8],[81,8],[55,8],[56,8],[[60,9,9],8],0,[55,[[86,[9]]]],[56,[[87,[9]]]],[69,87],[70,88],[69,89],[55,[[90,[9]]]],[56,[[88,[9]]]],[69,88],[76,1],[76,9],[65,9],[81,9],[55,9],[56,9],[[],46],[[],47],[[],46],[[],47],[[[53,[91]]],9],[77,59],[[[58,[39]],9],[[16,[9]]]],[[60,9],[[16,[9]]]],[[61,9],[[16,[9]]]],[57],[57,13],[[80,9]],[9,53],[[9,9],54],[16,71],[[],92],[9,72],[9,73],[[9,39,39],[[58,[39]]]],[9,64],[[],74],[9,75],[[],76],[[],65],[[],80],[[],81],[9,60],[[],63],[[],77],[[],43],[[],44],[[],45],[[],48],[[],49],[9,66],[[],55],[[],56],[[],78],[9,68],[[],69],[[],70],[[],57],[9,67],[9,61],[[[16,[[0,[3,93]]]],9],51],[[],1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[[67,9,9],[[1,[9]]]],[67,9],[66],[66],[9,66],[[66,66],[[1,[79]]]],[76,1],[65,1],[65,1],[69,1],[70,1],[69,1],[70,1],[[72,9,9],[[1,[9]]]],[[73,9,9],[[1,[9]]]],[[64,9,9],[[1,[9]]]],[[75,9,9],[[1,[9]]]],[76],[65],[65],[[51,[94,[9]],9],9],[[51,[94,[9]],9],9],[78,1],[[92,94,94],16],0,[56,[[95,[9]]]],0,[[51,9,[94,[9]]],9],[9,9],[9,9],[9,9],[9,9],[[50,9],9],[[51,9,[94,[9]]],9],[[51,[94,[9]],[94,[9]]],9],[[80,9],1],[81,1],[55,8],[56,8],[69],[70],[[81,9],1],[[55,9],9],[[56,9],9],[65],[80],[[[58,[39]]],[[16,[9]]]],[60,[[16,[9]]]],[61,[[16,[9]]]],[[72,9,9],[[1,[9]]]],[[73,9,9],[[1,[9]]]],[[64,9,9],[[1,[9]]]],[[75,9,9],[[1,[9]]]],[[77,9]],[[77,9]],[[[58,[39]],9,9],8],[[61,9,9],8],[[51,9,9],[[1,[9]]]],[9,[[1,[9]]]],[9,[[1,[9]]]],[[50,9],[[1,[9]]]],[9,[[1,[9]]]],[9,[[1,[9]]]],[[50,9],[[1,[9]]]],[[[53,[85]],9]],[[54,9,9]],[[72,9]],[[73,9]],[[64,9]],[[75,9]],[[66,9,8]],[[57,13]],[[66,9]],[[66,9]],[[66,9]],[[66,9]],[[66,9]],[[66,9]],[[[58,[39]],9],9],[[60,9],9],[[61,9],9],[[57,13,13]],[77],[77],[[],16],[9,16],[[],16],[9,16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[58,[39]],9,9],8],[[60,9,9],8],[[61,9,9],8],[[53,9]],[[54,9,9]],[[72,9,9]],[[73,9,9]],[[64,9]],[74],[[75,9]],[80],[[68,9,9,13,13]],[[68,96,9,13,13]],[[13,9],57],[55,[[97,[9]]]],[56,[[98,[9]]]],[69,98],[69,99],[9,80],[9,81],[9,63],[9,55],[[9,9],67],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],79],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[100,100,100],101],[[102,103],101],[[104,103],101],[[100,100,100],101],[[[105,[3]]],[[105,[3]]]],[101,101],[106,106],[102,102],[104,104],[[]],[[]],[[]],[[]],[[]],[[[16,[103]]],107],[[105,105],79],[[101,101],79],[[106,103],8],[[[16,[103]]],107],[[[16,[103]]],[[16,[103]]]],[[106,106],1],[[104,104],[[1,[103]]]],[[],[[105,[108]]]],[102,103],[104,103],[[104,104],107],[[102,103],107],[[104,103],107],[[105,105],8],[[101,101],8],[[106,106],8],[[102,102],8],[[104,104],8],[[[105,[5]],6],7],[[101,6],7],[[106,6],7],[[102,6],7],[[104,6],7],[[]],[[]],[[]],[[]],[[]],[101],[[104,104],8],[[104,103],8],[[]],[[]],[[]],[[]],[[]],[[102,102],8],[[104,104],8],[[102,102],8],[[104,104],8],[[103,107],106],[[103,103],102],[[103,103],104],[[105,105],[[1,[79]]]],[[101,101],[[1,[79]]]],[[102,103],103],[[104,103],103],[[102,103],103],[[104,103],103],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[109,9,8,9,8]],[[110,9,9,13]],[[110,9,9]],[[110,9,9,9,9,15]],[[110,9,9,9,9,15]],[[111,9,9]],[[112,9,9]],[[113,9,9]],[[114,9,9,15]],[[115,9,9,15,13]],[[109,9,9]],[[109,9,9]],[[112,9,9]],[[[116,[0]]],[[0,[0]]]],[[[116,[0]]],[[0,[0]]]],[[]],[117],[118],[[[116,[0]]]],[[[116,[0]]]],[119],[[119,9],[[121,[120]]]],[[]],[119],[[]],[117],[118],[[112,9],16],0,[[]],[122],[123],[[]],[117],[118],[[[116,[0]]]],[[[116,[0]]]],[119],[8,1],[8,1],[8,1],[8,1],[[]],[[]],[[]],[[]],[[119,9],[[16,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[111],[[114,124],125],[[115,124],126],[[9,9],114],[[9,9],115],[9,111],[[9,9],111],[[125,9,15,15]],[112,112],[113,113],[127,127],[[[128,[3]]],[[128,[3]]]],[[[129,[3,3]]],[[129,[3,3]]]],[[[122,[3,3]]],[[122,[3,3]]]],[[[123,[3,3,3]]],[[123,[3,3,3]]]],[[[116,[3]]],[[116,[3]]]],[114,114],[125,125],[115,115],[110,110],[130,130],[131,131],[132,132],[120,120],[[[119,[3]]],[[119,[3]]]],[133,133],[109,109],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[128,[134]],128],79],[[[129,[134,134]],129],79],[[[122,[134,134]],122],79],[[[123,[134,134,134]],123],79],[[130,130],79],[[131,131],79],[[132,132],79],[[120,120],79],[133,[[16,[[16,[9]]]]]],[[]],[119],[[9,16],119],[[9,16],[[119,[130]]]],[[9,16],[[119,[131]]]],[[9,16],[[119,[132]]]],[[]],[117],[118],[116],[119],[[],112],[[],110],[[],120],[[119,9],[[16,[9]]]],[[119,9],[[16,[8]]]],[[]],[[]],[[]],[[]],[[9,9],16],[[]],[127,121],0,[127,9],[119,9],[[]],[129],[123],[120],0,[[]],[119],[[]],[119],[[]],[[]],[[[128,[135]],128],8],[[[129,[135,135]],129],8],[[[122,[135,135]],122],8],[[[123,[135,135,135]],123],8],[[130,130],8],[[131,131],8],[[132,132],8],[[120,120],8],[[],9],[119,9],0,[[]],[[119,16]],[119],[[114,30]],[[115,30]],[116,9],[[112,6],7],[[113,6],7],[[127,6],7],[[[128,[5]],6],7],[[[129,[5,5]],6],7],[[[122,[5,5]],6],7],[[[123,[5,5,5]],6],7],[[[116,[5]],6],7],[[114,6],7],[[125,6],7],[[115,6],7],[[126,6],7],[[110,6],7],[[130,6],7],[[131,6],7],[[132,6],7],[[120,6],7],[[[119,[5]],6],7],[[133,6],7],[[109,6],7],[119],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[136],[[]],[[],128],[[],129],[[]],[[]],[[],122],[[]],[[],123],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],113],[[9,16],127],[[9,16],119],[133,137],[114,124],[115,124],[[125,9],15],[[126,9],15],0,[133,8],[[[128,[138]]]],[[[129,[138,138]]]],[[[122,[138,138]]]],[[[123,[138,138,138]]]],[130],[131],[132],[120],0,[113],0,[[127,9]],[[133,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[113],0,[122,122],[123,123],[[125,9,9],15],[[125,9,9,15],15],[113],[113,16],[[126,9,9]],[[126,9,9,15]],[[125,9],[[16,[8]]]],[113,16],[[127,9],1],[[127,39],[[16,[8]]]],[113],[116,1],[[[140,[139,139]]],1],[[[141,[139,139]]],1],[142,1],[143,1],[[]],[[]],[[]],[[]],[[9,9,8],[[140,[139,139]]]],[9,117],[[],118],[[9,9],[[141,[139,139]]]],[[],144],[[],145],[146,147],[9,111],[[9,9],142],[9,143],[9,112],[[9,9],113],[9,127],[[9,9],116],[[9,9],114],[[9,9],115],[[9,9],110],[[9,9],120],[137,133],[9,109],[[9,9],[[116,[0]]]],[[9,9],[[116,[0]]]],[[9,9],111],[144,1],[145,1],0,[[[128,[148]],128],[[1,[79]]]],[[[129,[148,148]],129],[[1,[79]]]],[[[122,[148,148]],122],[[1,[79]]]],[[[123,[148,148,148]],123],[[1,[79]]]],[[130,130],[[1,[79]]]],[[131,131],[[1,[79]]]],[[132,132],[[1,[79]]]],[[120,120],[[1,[79]]]],[[109,9]],[[109,9]],[133,9],[110],[[]],[[]],[[]],[[]],0,0,[137,149],[146,149],[124,149],[[[119,[130]]],149],[[[119,[131]]],149],[[[119,[132]]],149],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[119,[[16,[9]]]],[146,150],[[[119,[131]]],150],[[146,9],[[16,[15]]]],[[[119,[131]],9],[[16,[15]]]],[[146,9]],[[[119,[131]],9]],[[146,9]],[[[119,[131]],9]],[[119,9]],[[146,9],[[16,[15]]]],[[[119,[131]],9],[[16,[15]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[109,[[1,[[16,[8]]]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[116,9]],[[]],[117],[118],[112,[[94,[9]]]],[127,[[94,[9]]]],[116],[119],[119,[[94,[9]]]],[127,9],[119,9],[[]],[128],[129],[122],[123],[120],[[]],[117],[118],[116],[119],[[]],[117],[118],[116],[119],[[]],[[]],[[],9],[119,9],0,[[]],[[117,16]],[117],[118],[[116,16]],[[119,16]],[119],[[]],[[]],[[146,9,39],16],[[[119,[131]],9,39],16],0,[[[16,[9]]],110],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[151],[[151,151]],[[151,151]],[151],[151],[[151,151]],[151],[[151,151]],[[152,152]],[[153,153]],[151],[151],[[151,151]],[[151,151]],[[[153,[[0,[3,154,155,156]]]],[0,[3,154,155,156]]],[[0,[3,154,155,156]]]],[[],16],[[[0,[3,157]],9,[0,[3,157]]],[[0,[3,157]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[151,151,9]],[[15,15,158],8],[[[159,[3]]],[[159,[3]]]],[[[160,[3]]],[[160,[3]]]],[[[161,[3]]],[[161,[3]]]],[151,151],[[[152,[3]]],[[152,[3]]]],[[[153,[3]]],[[153,[3]]]],[162,162],[163,163],[164,164],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[159,9,9],165],[[160,9,9],165],[[]],[[]],[[163,15],15],[[164,166],166],[[151,9],151],[[151,9],151],0,0,0,[[],160],[[],[[151,[108,108]]]],[[],[[153,[108]]]],[[],163],[152],[151,151],[[15,15,15],[[1,[15]]]],[[15,15,15],[[1,[15]]]],[151],[151],[151],[[151,151]],[[151,151]],[[151,151]],[[151,151]],[151],[[153,153]],[151],[151],[[151,151]],[[151,151]],[[151,151]],[15,[[16,[15]]]],[[163,15],[[16,[15]]]],[[164,166],[[16,[166]]]],[[151,151],8],[[[152,[135]],152],8],[[[153,[135]],153],8],[9,9],[151],[151,151],[[151,9],151],[[13,13]],[[13,13]],[[13,13]],[[],152],0,[[160,9]],[[15,15,15,15],15],[[[159,[5]],6],7],[[[160,[5]],6],7],[[[161,[5]],6],7],[[[151,[5,5]],6],7],[[[152,[5]],6],7],[[[153,[5]],6],7],[[162,6],7],[[163,6],7],[[164,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[136],[16,151],[[],151],[[]],[[]],[[]],[[]],[[]],[30,151],[16,151],[[[16,[16]]],152],[16,153],[[15,15],15],[[15,15],15],[[162,9],9],[[]],[[]],[167,16],[[159,9,9],165],[[151,9]],[[152,9]],[152],[[153,9]],[[151,9]],[[152,9]],[152],[[153,9]],[151,151],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[151],[[159,9],165],[161,165],[[151,9],151],0,[152,[[1,[152]]]],[9],[9],[9],[9],[[163,15],8],[[164,166],8],[151,121],[151,168],[[16,9]],[[151,16,9]],[165,165],[[159,9,165],165],[[],[[16,[165]]]],[[15,15],15],[[],9],[[],9],[[],9],[[],9],[151,9],[153,9],[[],1],[[151,9],151],[15,8],[[15,158],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[15,15],15],[[15,15],15],[[15,15],15],[9,[[59,[9,13]]]],[[151,151]],[151],[151],[151],[[151,151]],[151],[[151,151]],[[151,151]],[[152,152]],[[153,153]],[151],[151],[[151,151]],[[151,151]],[[]],[[]],[[]],[[]],[151,16],[151],[151],[9,159],[[],160],[165,161],[3,[[152,[3]]]],[9,162],[15,163],[166,164],[151,151],[[],151],[[],[[153,[[0,[154,169]]]]]],[[159,9,9],165],[[161,9],165],[[151,9,9],151],[[152,9],152],[[[153,[[0,[170,154,169,155,156]]]],9],[[153,[[0,[170,154,169,155,156]]]]]],[[161,96],165],[[151,9],151],[[151,9],151],[15,16],[[163,15],16],[[164,166],16],[15,[[16,[15]]]],[163],[[163,15]],[15,15],[9,151],[152,9],[[151,151]],[[151,151]],[[151,151]],[[151,151]],[[153,153]],[[151,151]],[[151,151]],[[163,15]],[[151,9]],[[151,9],151],[151,151],[[152,8]],0,[[151,9]],[[151,9]],[[151,9]],[[151,9]],[[151,9]],[[151,9]],[152,[[1,[16]]]],[[151,9],[[1,[151]]]],[[],1],[151],[151],[151],[[151,151]],[[151,151]],[[151,151]],[[151,151]],[151],[[152,152]],[[153,153]],[151],[[151,151]],[[151,151]],[151],[[[151,[165]],165,159],[[151,[165]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[9],[9],0,[[164,166]],[151],[[151,9]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],151],[[],153],[9,151],[[],152],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[100,[107]]],107],[171,171],[172,172],[173,173],[[[175,[174]]],[[175,[174]]]],[[[175,[96]]],[[175,[96]]]],[[[175,[176]]],[[175,[176]]]],[[[175,[177]]],[[175,[177]]]],[[[175,[13]]],[[175,[13]]]],[[[175,[178]]],[[175,[178]]]],[[[179,[176]]],[[179,[176]]]],[[[179,[178]]],[[179,[178]]]],[[[179,[177]]],[[179,[177]]]],[[[179,[96]]],[[179,[96]]]],[[[179,[174]]],[[179,[174]]]],[[[179,[13]]],[[179,[13]]]],[180,180],[[]],[[]],[[]],[172,172],[173,173],[[]],[172,172],[173,173],[[165,165]],[[165,165]],[[165,165]],[[165,165]],[100],[100],[[100,100]],[[100,100]],[[100,100]],[100],[100],[[100,100]],[[171,107]],[[171,171]],[[172,172]],[[173,173]],[[[175,[96]],[175,[96]]]],[[[175,[174]],[175,[174]]]],[[[175,[15]],[175,[15]]]],[[[175,[167]],[175,[167]]]],[[[175,[9]],[175,[9]]]],[[[175,[176]],[175,[176]]]],[[[175,[13]],[175,[13]]]],[[[175,[166]],[175,[166]]]],[[[175,[178]],[175,[178]]]],[[[175,[181]],[175,[181]]]],[[[175,[182]],[175,[182]]]],[[[175,[177]],[175,[177]]]],[[[179,[9]],[179,[9]]]],[[[179,[166]],[179,[166]]]],[[[179,[13]],[179,[13]]]],[[[179,[96]],[179,[96]]]],[[[179,[176]],[179,[176]]]],[[[179,[182]],[179,[182]]]],[[[179,[174]],[179,[174]]]],[[[179,[181]],[179,[181]]]],[[[179,[15]],[179,[15]]]],[[[179,[177]],[179,[177]]]],[[[179,[167]],[179,[167]]]],[[[179,[178]],[179,[178]]]],[[180,180]],[[180,107]],[[165,165]],[[165,165]],[100],[100],[[100,100]],[[100,100]],[[[175,[177]],[175,[177]]]],[[[175,[166]],[175,[166]]]],[[[175,[174]],[175,[174]]]],[[[175,[178]],[175,[178]]]],[[[175,[96]],[175,[96]]]],[[[175,[167]],[175,[167]]]],[[[175,[176]],[175,[176]]]],[[[175,[181]],[175,[181]]]],[[[175,[13]],[175,[13]]]],[[[175,[9]],[175,[9]]]],[[[175,[182]],[175,[182]]]],[[[175,[15]],[175,[15]]]],[[[179,[177]],[179,[177]]]],[[[179,[176]],[179,[176]]]],[[[179,[167]],[179,[167]]]],[[[179,[15]],[179,[15]]]],[[[179,[181]],[179,[181]]]],[[[179,[166]],[179,[166]]]],[[[179,[9]],[179,[9]]]],[[[179,[13]],[179,[13]]]],[[[179,[96]],[179,[96]]]],[[[179,[182]],[179,[182]]]],[[[179,[178]],[179,[178]]]],[[[179,[174]],[179,[174]]]],[[[100,[107]]],107],[[]],[172,172],[173,173],[[]],[172,172],[173,173],[[]],[172,172],[173,173],[[]],[[172,172],172],[[173,173],173],[[]],[172,172],[173,173],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[175,175]],[[179,179]],[[175,175]],[[179,179]],[[175,175]],[[179,179]],[[175,175]],[[179,179]],[[175,175]],[[179,179]],[[175,175]],[[179,179]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[172,172],[173,173],[[]],[172,172],[173,173],[[],183],[172,183],[173,183],[165,165],[[[158,[3]]],[[158,[3]]]],[[[100,[3]]],[[100,[3]]]],[171,171],[172,172],[173,173],[[[175,[3]]],[[175,[3]]]],[[[179,[3]]],[[179,[3]]]],[180,180],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[100,[134]],100],79],[[171,171],79],[[172,172],79],[[173,173],79],[[[175,[134]],175],79],[[[179,[134]],179],79],[[100,100],79],[100,100],[[]],[[172,172],172],[[173,173],173],[[]],[172,172],[173,173],[[]],[172,172],[173,173],[[]],[[[175,[178]]],166],[[[175,[174]]],166],[[[175,[182]]],166],[[[175,[176]]],166],[[[175,[96]]],166],[[[175,[13]]],166],[[[175,[166]]],166],[[[175,[9]]],166],[[[175,[167]]],166],[[[175,[181]]],166],[[[175,[15]]],166],[[[175,[177]]],166],[[[179,[174]]],166],[[[179,[96]]],166],[[[179,[178]]],166],[[[179,[9]]],166],[[[179,[176]]],166],[[[179,[177]]],166],[[[179,[167]]],166],[[[179,[13]]],166],[[[179,[15]]],166],[[[179,[182]]],166],[[[179,[166]]],166],[[[179,[181]]],166],[[]],[[[175,[166]]],166],[[[175,[178]]],166],[[[175,[9]]],166],[[[175,[167]]],166],[[[175,[96]]],166],[[[175,[181]]],166],[[[175,[177]]],166],[[[175,[174]]],166],[[[175,[13]]],166],[[[175,[182]]],166],[[[175,[15]]],166],[[[175,[176]]],166],[[[179,[9]]],166],[[[179,[177]]],166],[[[179,[96]]],166],[[[179,[166]]],166],[[[179,[174]]],166],[[[179,[182]]],166],[[[179,[176]]],166],[[[179,[178]]],166],[[[179,[13]]],166],[[[179,[181]]],166],[[[179,[15]]],166],[[[179,[167]]],166],[[100,100]],[[],165],[[],[[100,[108]]]],[[],171],[[],172],[[],173],[[],[[175,[108]]]],[[],[[179,[108]]]],[[],180],[[]],[[165,165]],[[165,165]],[[165,165]],[[165,165]],[[[158,[15]],15],15],[[[158,[166]],166],166],[[[158,[167]],167],167],[100],[100],[[100,100]],[100],[100],[[100,100]],[[100,100]],[[100,100]],[[171,171]],[[172,172]],[[173,173]],[[175,175]],[[[179,[15]],[179,[15]]]],[[[179,[177]],[179,[177]]]],[[[179,[174]],[179,[174]]]],[[[179,[181]],[179,[181]]]],[[[179,[167]],[179,[167]]]],[[[179,[178]],[179,[178]]]],[[[179,[176]],[179,[176]]]],[[[179,[13]],[179,[13]]]],[[[179,[182]],[179,[182]]]],[[[179,[96]],[179,[96]]]],[[[179,[166]],[179,[166]]]],[[[179,[9]],[179,[9]]]],[[180,180]],[[165,165]],[[165,165]],[[100,100]],[[100,100]],[100],[100],[[175,175]],[[[179,[167]],[179,[167]]]],[[[179,[177]],[179,[177]]]],[[[179,[176]],[179,[176]]]],[[[179,[182]],[179,[182]]]],[[[179,[9]],[179,[9]]]],[[[179,[166]],[179,[166]]]],[[[179,[96]],[179,[96]]]],[[[179,[178]],[179,[178]]]],[[[179,[174]],[179,[174]]]],[[[179,[181]],[179,[181]]]],[[[179,[13]],[179,[13]]]],[[[179,[15]],[179,[15]]]],[[]],[[]],[[172,172],172],[[173,173],173],[[[175,[9]],[175,[9]]],[[175,[9]]]],[[[175,[182]],[175,[182]]],[[175,[182]]]],[[[175,[177]],[175,[177]]],[[175,[177]]]],[[[175,[96]],[175,[96]]],[[175,[96]]]],[[[175,[178]],[175,[178]]],[[175,[178]]]],[[[175,[181]],[175,[181]]],[[175,[181]]]],[[[175,[176]],[175,[176]]],[[175,[176]]]],[[[175,[15]],[175,[15]]],[[175,[15]]]],[[[175,[166]],[175,[166]]],[[175,[166]]]],[[[175,[13]],[175,[13]]],[[175,[13]]]],[[[175,[167]],[175,[167]]],[[175,[167]]]],[[[175,[174]],[175,[174]]],[[175,[174]]]],[[[179,[166]],[179,[166]]],[[179,[166]]]],[[[179,[167]],[179,[167]]],[[179,[167]]]],[[[179,[15]],[179,[15]]],[[179,[15]]]],[[[179,[174]],[179,[174]]],[[179,[174]]]],[[[179,[178]],[179,[178]]],[[179,[178]]]],[[[179,[9]],[179,[9]]],[[179,[9]]]],[[[179,[13]],[179,[13]]],[[179,[13]]]],[[[179,[177]],[179,[177]]],[[179,[177]]]],[[[179,[182]],[179,[182]]],[[179,[182]]]],[[[179,[96]],[179,[96]]],[[179,[96]]]],[[[179,[176]],[179,[176]]],[[179,[176]]]],[[[179,[181]],[179,[181]]],[[179,[181]]]],[[[158,[167]],167]],[[[158,[15]],15]],[[[158,[166]],166]],[[100,100]],[[]],[[],1],[[]],[[],1],[[165,165],8],[[[100,[135]],100],8],[[171,171],8],[[172,172],8],[[173,173],8],[[[175,[135]],175],8],[[[179,[135]],179],8],[[180,180],8],[[]],[172,172],[173,173],[[]],[172,172],[173,173],[[]],[172,172],[173,173],[[],184],[[],184],[[]],[172,172],[173,173],[[165,6],7],[[165,6],[[10,[185]]]],[[[158,[5]],6],7],[[[100,[5]],6],7],[[171,6],7],[[171,6],7],[[172,6],7],[[172,6],7],[[173,6],7],[[173,6],7],[[175,6],7],[[175,6],7],[[179,6],7],[[179,6],7],[[180,6],7],[[180,6],7],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[]],[172,172],[173,173],[[]],[[]],[181,165],[167,165],[174,165],[96,165],[[]],[182,165],[166,165],[15,165],[13,165],[177,165],[176,165],[178,165],[9,165],[[]],[[]],[107,171],[[]],[186,172],[[]],[[]],[107,173],[9,[[175,[9]]]],[174,[[175,[174]]]],[166,[[175,[166]]]],[178,[[175,[178]]]],[181,[[175,[181]]]],[15,[[175,[15]]]],[167,[[175,[167]]]],[176,[[175,[176]]]],[96,[[175,[96]]]],[177,[[175,[177]]]],[182,[[175,[182]]]],[[]],[13,[[175,[13]]]],[96,[[179,[96]]]],[15,[[179,[15]]]],[177,[[179,[177]]]],[13,[[179,[13]]]],[167,[[179,[167]]]],[182,[[179,[182]]]],[176,[[179,[176]]]],[[]],[166,[[179,[166]]]],[178,[[179,[178]]]],[181,[[179,[181]]]],[174,[[179,[174]]]],[9,[[179,[9]]]],[107,180],[[]],[15],[15,172],[15,173],[187,[[10,[165]]]],[187,[[10,[171]]]],[187,[[10,[172]]]],[187,[[10,[173]]]],[187,[[10,[175]]]],[187,[[10,[179]]]],[187,[[10,[180]]]],[[187,166],10],[[187,166],[[10,[[175,[166]]]]]],[[187,166],[[10,[[175,[178]]]]]],[[187,166],[[10,[[175,[182]]]]]],[[187,166],[[10,[[175,[176]]]]]],[[187,166],[[10,[[175,[174]]]]]],[[187,166],[[10,[[175,[181]]]]]],[[187,166],[[10,[[175,[15]]]]]],[[187,166],[[10,[[175,[177]]]]]],[[187,166],[[10,[[175,[96]]]]]],[[187,166],[[10,[[175,[9]]]]]],[[187,166],[[10,[[175,[13]]]]]],[[187,166],[[10,[[175,[167]]]]]],[[187,166],[[10,[[179,[96]]]]]],[[187,166],[[10,[[179,[176]]]]]],[[187,166],[[10,[[179,[166]]]]]],[[187,166],[[10,[[179,[181]]]]]],[[187,166],[[10,[[179,[182]]]]]],[[187,166],[[10,[[179,[178]]]]]],[[187,166],[[10,[[179,[15]]]]]],[[187,166],[[10,[[179,[167]]]]]],[[187,166],[[10,[[179,[9]]]]]],[[187,166],[[10,[[179,[177]]]]]],[[187,166],[[10,[[179,[174]]]]]],[[187,166],[[10,[[179,[13]]]]]],0,[[]],[[[175,[182]],[175,[182]]],[[175,[182]]]],[[[175,[166]],[175,[166]]],[[175,[166]]]],[[[175,[181]],[175,[181]]],[[175,[181]]]],[[[175,[15]],[175,[15]]],[[175,[15]]]],[[[175,[9]],[175,[9]]],[[175,[9]]]],[[[175,[167]],[175,[167]]],[[175,[167]]]],[[[179,[167]],[179,[167]]],[[179,[167]]]],[[[179,[182]],[179,[182]]],[[179,[182]]]],[[[179,[15]],[179,[15]]],[[179,[15]]]],[[[179,[166]],[179,[166]]],[[179,[166]]]],[[[179,[181]],[179,[181]]],[[179,[181]]]],[[[179,[9]],[179,[9]]],[[179,[9]]]],[[]],[[]],[[[158,[167]]],167],[[[158,[15]]],15],[[[158,[166]]],166],[165],[[[100,[138]]]],[[[175,[138]]]],[[[179,[138]]]],[[]],[[172,172],172],[[173,173],173],[[],100],0,[[180,9]],[165],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[165,165],[[],8],[172,8],[173,8],[[],8],[172,8],[173,8],[[],8],[[],8],[[],8],[[],8],[[],8],[172,8],[173,8],[[],8],[[[175,[178]]],8],[[[175,[176]]],8],[[[175,[13]]],8],[[[175,[177]]],8],[[[175,[96]]],8],[[[175,[174]]],8],[[[179,[178]]],8],[[[179,[13]]],8],[[[179,[174]]],8],[[[179,[177]]],8],[[[179,[96]]],8],[[[179,[176]]],8],[[],8],[172,8],[173,8],[[],8],[[],8],[[],8],[[[175,[177]]],8],[[[175,[176]]],8],[[[175,[174]]],8],[[[175,[178]]],8],[[[175,[13]]],8],[[[175,[96]]],8],[[[179,[176]]],8],[[[179,[177]]],8],[[[179,[178]]],8],[[[179,[96]]],8],[[[179,[174]]],8],[[[179,[13]]],8],[[],8],[172,8],[173,8],[[],8],[172,8],[173,8],[[],8],[[],8],[171,8],[180,8],[[]],[[]],[[]],[[[175,[174]]],166],[[[175,[176]]],166],[[[175,[181]]],166],[[[175,[167]]],166],[[[175,[177]]],166],[[[175,[96]]],166],[[[175,[166]]],166],[[[175,[13]]],166],[[[175,[9]]],166],[[[175,[182]]],166],[[[175,[178]]],166],[[[175,[15]]],166],[[[179,[15]]],166],[[[179,[176]]],166],[[[179,[166]]],166],[[[179,[182]]],166],[[[179,[178]]],166],[[[179,[177]]],166],[[[179,[13]]],166],[[[179,[9]]],166],[[[179,[181]]],166],[[[179,[174]]],166],[[[179,[96]]],166],[[[179,[167]]],166],[[]],[172,172],[173,173],[[]],[172,172],[173,173],[[]],[[172,172],172],[[173,173],173],[[]],[172,172],[173,173],[[]],[172,172],[173,173],[[]],[[172,172],172],[[173,173],173],[[]],[[],171],[[],172],[[],173],[[],175],[[],179],[[]],[[172,172],172],[[173,173],173],[[]],[[],171],[[],172],[[],173],[[],175],[[],179],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[[]],[[]],0,[[165,165]],[[165,165]],[[165,165]],[[165,165]],[[100,100]],[100],[100],[[100,100]],[[100,100]],[[100,100]],[100],[100],[[171,107]],[[171,171]],[[172,172]],[[173,173]],[[[175,[9]],[175,[9]]]],[[[175,[177]],[175,[177]]]],[[[175,[178]],[175,[178]]]],[[[175,[182]],[175,[182]]]],[[[175,[96]],[175,[96]]]],[[[175,[176]],[175,[176]]]],[[[175,[181]],[175,[181]]]],[[[175,[166]],[175,[166]]]],[[[175,[13]],[175,[13]]]],[[[175,[167]],[175,[167]]]],[[[175,[15]],[175,[15]]]],[[[175,[174]],[175,[174]]]],[[[179,[177]],[179,[177]]]],[[[179,[15]],[179,[15]]]],[[[179,[167]],[179,[167]]]],[[[179,[181]],[179,[181]]]],[[[179,[174]],[179,[174]]]],[[[179,[182]],[179,[182]]]],[[[179,[9]],[179,[9]]]],[[[179,[13]],[179,[13]]]],[[[179,[176]],[179,[176]]]],[[[179,[166]],[179,[166]]]],[[[179,[96]],[179,[96]]]],[[[179,[178]],[179,[178]]]],[[180,180]],[[180,107]],[[]],[[172,172,172],172],[[173,173,173],173],[[165,165]],[[165,165]],[100],[[100,100]],[100],[[100,100]],[[[175,[176]],[175,[176]]]],[[[175,[178]],[175,[178]]]],[[[175,[15]],[175,[15]]]],[[[175,[9]],[175,[9]]]],[[[175,[13]],[175,[13]]]],[[[175,[166]],[175,[166]]]],[[[175,[177]],[175,[177]]]],[[[175,[182]],[175,[182]]]],[[[175,[181]],[175,[181]]]],[[[175,[167]],[175,[167]]]],[[[175,[96]],[175,[96]]]],[[[175,[174]],[175,[174]]]],[[[179,[96]],[179,[96]]]],[[[179,[176]],[179,[176]]]],[[[179,[177]],[179,[177]]]],[[[179,[13]],[179,[13]]]],[[[179,[166]],[179,[166]]]],[[[179,[174]],[179,[174]]]],[[[179,[9]],[179,[9]]]],[[[179,[167]],[179,[167]]]],[[[179,[181]],[179,[181]]]],[[[179,[15]],[179,[15]]]],[[[179,[182]],[179,[182]]]],[[[179,[178]],[179,[178]]]],[165],[165],[100],[100],[171],[172],[173],[[[175,[174]]]],[[[175,[96]]]],[[[175,[13]]]],[[[175,[177]]]],[[[175,[178]]]],[[[175,[176]]]],[[[179,[13]]]],[[[179,[178]]]],[[[179,[174]]]],[[[179,[176]]]],[[[179,[177]]]],[[[179,[96]]]],[180],[[],165],[15,[[158,[15]]]],[167,[[158,[167]]]],[166,[[158,[166]]]],[[],100],[[],165],[100],[175],[179],[[]],[[],165],[[],100],[[],172],[[],173],[[],175],[[],179],[[[100,[148]],100],[[1,[79]]]],[[171,171],[[1,[79]]]],[[172,172],[[1,[79]]]],[[173,173],[[1,[79]]]],[[[175,[148]],175],[[1,[79]]]],[[[179,[148]],179],[[1,[79]]]],[[180,180],[[1,[79]]]],[[107,107],[[100,[107]]]],[166],[[165,9],165],[[[175,[15]],166],[[175,[15]]]],[[[175,[178]],166],[[175,[178]]]],[[[175,[166]],166],[[175,[166]]]],[[[175,[174]],166],[[175,[174]]]],[[[175,[167]],166],[[175,[167]]]],[[[175,[177]],166],[[175,[177]]]],[[[175,[9]],166],[[175,[9]]]],[[[175,[182]],166],[[175,[182]]]],[[[175,[176]],166],[[175,[176]]]],[[[175,[181]],166],[[175,[181]]]],[[[175,[13]],166],[[175,[13]]]],[[[175,[96]],166],[[175,[96]]]],[[[179,[181]],166],[[179,[181]]]],[[[179,[13]],166],[[179,[13]]]],[[[179,[9]],166],[[179,[9]]]],[[[179,[182]],166],[[179,[182]]]],[[[179,[176]],166],[[179,[176]]]],[[[179,[15]],166],[[179,[15]]]],[[[179,[178]],166],[[179,[178]]]],[[[179,[174]],166],[[179,[174]]]],[[[179,[96]],166],[[179,[96]]]],[[[179,[167]],166],[[179,[167]]]],[[[179,[166]],166],[[179,[166]]]],[[[179,[177]],166],[[179,[177]]]],[[]],[[172,172],172],[[173,173],173],[178],[[172,178],172],[[173,178],173],[107,[[100,[107]]]],[26,165],[26,165],[26,100],[26,100],0,[[]],[172,172],[173,173],[[[158,[15]],15],15],[[[158,[167]],167],167],[[[158,[166]],166],166],[[172,172]],[[173,173]],[[175,175]],[[[179,[178]],[179,[178]]]],[[[179,[13]],[179,[13]]]],[[[179,[176]],[179,[176]]]],[[[179,[177]],[179,[177]]]],[[[179,[181]],[179,[181]]]],[[[179,[167]],[179,[167]]]],[[[179,[9]],[179,[9]]]],[[[179,[96]],[179,[96]]]],[[[179,[15]],[179,[15]]]],[[[179,[174]],[179,[174]]]],[[[179,[182]],[179,[182]]]],[[[179,[166]],[179,[166]]]],[[175,175]],[[[179,[176]],[179,[176]]]],[[[179,[9]],[179,[9]]]],[[[179,[181]],[179,[181]]]],[[[179,[182]],[179,[182]]]],[[[179,[96]],[179,[96]]]],[[[179,[174]],[179,[174]]]],[[[179,[167]],[179,[167]]]],[[[179,[178]],[179,[178]]]],[[[179,[13]],[179,[13]]]],[[[179,[166]],[179,[166]]]],[[[179,[177]],[179,[177]]]],[[[179,[15]],[179,[15]]]],[[]],[[]],[[172,172],172],[[173,173],173],[[[175,[15]],[175,[15]]],[[175,[15]]]],[[[175,[9]],[175,[9]]],[[175,[9]]]],[[[175,[182]],[175,[182]]],[[175,[182]]]],[[[175,[167]],[175,[167]]],[[175,[167]]]],[[[175,[177]],[175,[177]]],[[175,[177]]]],[[[175,[166]],[175,[166]]],[[175,[166]]]],[[[175,[176]],[175,[176]]],[[175,[176]]]],[[[175,[181]],[175,[181]]],[[175,[181]]]],[[[175,[174]],[175,[174]]],[[175,[174]]]],[[[175,[178]],[175,[178]]],[[175,[178]]]],[[[175,[96]],[175,[96]]],[[175,[96]]]],[[[175,[13]],[175,[13]]],[[175,[13]]]],[[[179,[15]],[179,[15]]],[[179,[15]]]],[[[179,[167]],[179,[167]]],[[179,[167]]]],[[[179,[182]],[179,[182]]],[[179,[182]]]],[[[179,[181]],[179,[181]]],[[179,[181]]]],[[[179,[166]],[179,[166]]],[[179,[166]]]],[[[179,[178]],[179,[178]]],[[179,[178]]]],[[[179,[96]],[179,[96]]],[[179,[96]]]],[[[179,[177]],[179,[177]]],[[179,[177]]]],[[[179,[9]],[179,[9]]],[[179,[9]]]],[[[179,[176]],[179,[176]]],[[179,[176]]]],[[[179,[13]],[179,[13]]],[[179,[13]]]],[[[179,[174]],[179,[174]]],[[179,[174]]]],[[]],[[[175,[174]]],[[175,[174]]]],[[[175,[9]]],[[175,[9]]]],[[[175,[182]]],[[175,[182]]]],[[[175,[167]]],[[175,[167]]]],[[[175,[177]]],[[175,[177]]]],[[[175,[178]]],[[175,[178]]]],[[[175,[96]]],[[175,[96]]]],[[[175,[15]]],[[175,[15]]]],[[[175,[176]]],[[175,[176]]]],[[[175,[181]]],[[175,[181]]]],[[[175,[166]]],[[175,[166]]]],[[[175,[13]]],[[175,[13]]]],[[[179,[9]]],[[179,[9]]]],[[[179,[177]]],[[179,[177]]]],[[[179,[182]]],[[179,[182]]]],[[[179,[181]]],[[179,[181]]]],[[[179,[174]]],[[179,[174]]]],[[[179,[96]]],[[179,[96]]]],[[[179,[13]]],[[179,[13]]]],[[[179,[178]]],[[179,[178]]]],[[[179,[176]]],[[179,[176]]]],[[[179,[167]]],[[179,[167]]]],[[[179,[166]]],[[179,[166]]]],[[[179,[15]]],[[179,[15]]]],[[]],[[[175,[13]],166],[[175,[13]]]],[[[175,[96]],166],[[175,[96]]]],[[[175,[178]],166],[[175,[178]]]],[[[175,[182]],166],[[175,[182]]]],[[[175,[9]],166],[[175,[9]]]],[[[175,[15]],166],[[175,[15]]]],[[[175,[166]],166],[[175,[166]]]],[[[175,[181]],166],[[175,[181]]]],[[[175,[167]],166],[[175,[167]]]],[[[175,[177]],166],[[175,[177]]]],[[[175,[174]],166],[[175,[174]]]],[[[175,[176]],166],[[175,[176]]]],[[[179,[178]],166],[[179,[178]]]],[[[179,[9]],166],[[179,[9]]]],[[[179,[167]],166],[[179,[167]]]],[[[179,[166]],166],[[179,[166]]]],[[[179,[182]],166],[[179,[182]]]],[[[179,[174]],166],[[179,[174]]]],[[[179,[176]],166],[[179,[176]]]],[[[179,[15]],166],[[179,[15]]]],[[[179,[177]],166],[[179,[177]]]],[[[179,[181]],166],[[179,[181]]]],[[[179,[96]],166],[[179,[96]]]],[[[179,[13]],166],[[179,[13]]]],[[]],[[[175,[176]],166],[[175,[176]]]],[[[175,[13]],166],[[175,[13]]]],[[[175,[15]],166],[[175,[15]]]],[[[175,[167]],166],[[175,[167]]]],[[[175,[174]],166],[[175,[174]]]],[[[175,[181]],166],[[175,[181]]]],[[[175,[9]],166],[[175,[9]]]],[[[175,[166]],166],[[175,[166]]]],[[[175,[178]],166],[[175,[178]]]],[[[175,[96]],166],[[175,[96]]]],[[[175,[182]],166],[[175,[182]]]],[[[175,[177]],166],[[175,[177]]]],[[[179,[96]],166],[[179,[96]]]],[[[179,[166]],166],[[179,[166]]]],[[[179,[177]],166],[[179,[177]]]],[[[179,[15]],166],[[179,[15]]]],[[[179,[174]],166],[[179,[174]]]],[[[179,[181]],166],[[179,[181]]]],[[[179,[9]],166],[[179,[9]]]],[[[179,[182]],166],[[179,[182]]]],[[[179,[167]],166],[[179,[167]]]],[[[179,[176]],166],[[179,[176]]]],[[[179,[13]],166],[[179,[13]]]],[[[179,[178]],166],[[179,[178]]]],[[]],[172,172],[173,173],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[166],[15],[[]],[[]],[[]],[[]],[[[175,[166]],166]],[[[175,[15]],166]],[[[175,[178]],166]],[[[175,[182]],166]],[[[175,[167]],166]],[[[175,[176]],166]],[[[175,[13]],166]],[[[175,[96]],166]],[[[175,[9]],166]],[[[175,[177]],166]],[[[175,[181]],166]],[[[175,[174]],166]],[[[179,[96]],166]],[[[179,[174]],166]],[[[179,[167]],166]],[[[179,[177]],166]],[[[179,[182]],166]],[[[179,[166]],166]],[[[179,[176]],166]],[[[179,[178]],166]],[[[179,[13]],166]],[[[179,[9]],166]],[[[179,[181]],166]],[[[179,[15]],166]],[[[175,[13]],166]],[[[175,[15]],166]],[[[175,[181]],166]],[[[175,[167]],166]],[[[175,[178]],166]],[[[175,[9]],166]],[[[175,[177]],166]],[[[175,[174]],166]],[[[175,[96]],166]],[[[175,[182]],166]],[[[175,[166]],166]],[[[175,[176]],166]],[[[179,[181]],166]],[[[179,[9]],166]],[[[179,[166]],166]],[[[179,[96]],166]],[[[179,[15]],166]],[[[179,[13]],166]],[[[179,[167]],166]],[[[179,[176]],166]],[[[179,[178]],166]],[[[179,[177]],166]],[[[179,[174]],166]],[[[179,[182]],166]],[[[175,[176]],166]],[[[175,[13]],166]],[[[175,[9]],166]],[[[175,[15]],166]],[[[175,[174]],166]],[[[175,[181]],166]],[[[175,[177]],166]],[[[175,[182]],166]],[[[175,[96]],166]],[[[175,[178]],166]],[[[175,[166]],166]],[[[175,[167]],166]],[[[179,[174]],166]],[[[179,[96]],166]],[[[179,[13]],166]],[[[179,[166]],166]],[[[179,[177]],166]],[[[179,[181]],166]],[[[179,[178]],166]],[[[179,[15]],166]],[[[179,[9]],166]],[[[179,[182]],166]],[[[179,[176]],166]],[[[179,[167]],166]],[[[175,[167]],166]],[[[175,[174]],166]],[[[175,[15]],166]],[[[175,[182]],166]],[[[175,[96]],166]],[[[175,[177]],166]],[[[175,[181]],166]],[[[175,[13]],166]],[[[175,[178]],166]],[[[175,[9]],166]],[[[175,[166]],166]],[[[175,[176]],166]],[[[179,[181]],166]],[[[179,[167]],166]],[[[179,[96]],166]],[[[179,[13]],166]],[[[179,[15]],166]],[[[179,[182]],166]],[[[179,[178]],166]],[[[179,[174]],166]],[[[179,[166]],166]],[[[179,[177]],166]],[[[179,[176]],166]],[[[179,[9]],166]],[[]],[[[175,[15]]]],[[[175,[166]]]],[[[175,[182]]]],[[[175,[181]]]],[[[175,[167]]]],[[[175,[9]]]],[[[179,[166]]]],[[[179,[167]]]],[[[179,[182]]]],[[[179,[15]]]],[[[179,[181]]]],[[[179,[9]]]],[[]],[[]],[172,172],[173,173],[[[175,[176]]],[[175,[176]]]],[[[175,[13]]],[[175,[13]]]],[[[175,[178]]],[[175,[178]]]],[[[175,[177]]],[[175,[177]]]],[[[175,[174]]],[[175,[174]]]],[[[175,[96]]],[[175,[96]]]],[[[179,[96]]],[[179,[96]]]],[[[179,[176]]],[[179,[176]]]],[[[179,[178]]],[[179,[178]]]],[[[179,[177]]],[[179,[177]]]],[[[179,[174]]],[[179,[174]]]],[[[179,[13]]],[[179,[13]]]],[[]],[172,172],[173,173],[[]],[172],[173],[[]],[172,172],[173,173],[[]],[165,[[1,[165]]]],[171,171],[172,172],[173,173],[180,180],[165,[[1,[165]]]],[[]],[[],1],[[]],[[],1],[[],1],[[165,165]],[[165,165]],[[165,165]],[[165,165]],[100],[[100,100]],[100],[100],[[100,100]],[[100,100]],[100],[[100,100]],[[171,171]],[[172,172]],[[173,173]],[[[175,[96]],[175,[96]]]],[[[175,[167]],[175,[167]]]],[[[175,[9]],[175,[9]]]],[[[175,[174]],[175,[174]]]],[[[175,[178]],[175,[178]]]],[[[175,[13]],[175,[13]]]],[[[175,[166]],[175,[166]]]],[[[175,[176]],[175,[176]]]],[[[175,[182]],[175,[182]]]],[[[175,[181]],[175,[181]]]],[[[175,[177]],[175,[177]]]],[[[175,[15]],[175,[15]]]],[[[179,[15]],[179,[15]]]],[[[179,[176]],[179,[176]]]],[[[179,[182]],[179,[182]]]],[[[179,[96]],[179,[96]]]],[[[179,[174]],[179,[174]]]],[[[179,[178]],[179,[178]]]],[[[179,[167]],[179,[167]]]],[[[179,[166]],[179,[166]]]],[[[179,[13]],[179,[13]]]],[[[179,[177]],[179,[177]]]],[[[179,[181]],[179,[181]]]],[[[179,[9]],[179,[9]]]],[[180,180]],[[165,165]],[[165,165]],[100],[[100,100]],[[100,100]],[100],[[[175,[167]],[175,[167]]]],[[[175,[13]],[175,[13]]]],[[[175,[174]],[175,[174]]]],[[[175,[15]],[175,[15]]]],[[[175,[178]],[175,[178]]]],[[[175,[182]],[175,[182]]]],[[[175,[177]],[175,[177]]]],[[[175,[96]],[175,[96]]]],[[[175,[9]],[175,[9]]]],[[[175,[181]],[175,[181]]]],[[[175,[166]],[175,[166]]]],[[[175,[176]],[175,[176]]]],[[[179,[167]],[179,[167]]]],[[[179,[96]],[179,[96]]]],[[[179,[15]],[179,[15]]]],[[[179,[174]],[179,[174]]]],[[[179,[177]],[179,[177]]]],[[[179,[181]],[179,[181]]]],[[[179,[9]],[179,[9]]]],[[[179,[13]],[179,[13]]]],[[[179,[178]],[179,[178]]]],[[[179,[176]],[179,[176]]]],[[[179,[182]],[179,[182]]]],[[[179,[166]],[179,[166]]]],[26,165],[26,165],[26,100],[26,100],[[]],[172,172],[173,173],[[]],[172,172],[173,173],[[],15],[172,15],[173,15],[[]],[172,172],[173,173],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[172,172],[173,173],[[],94],[[],94],[[],[[1,[94]]]],[[],[[1,[94]]]],[[],188],[[],188],[[],[[1,[188]]]],[[],[[1,[188]]]],[[],149],[[],149],[[],149],[[],149],[[],149],[[],149],[[],149],[[],79],[[172,172],79],[[173,173],79],[[]],[[[175,[181]]],166],[[[175,[15]]],166],[[[175,[13]]],166],[[[175,[9]]],166],[[[175,[96]]],166],[[[175,[177]]],166],[[[175,[178]]],166],[[[175,[166]]],166],[[[175,[176]]],166],[[[175,[174]]],166],[[[175,[182]]],166],[[[175,[167]]],166],[[[179,[176]]],166],[[[179,[15]]],166],[[[179,[182]]],166],[[[179,[177]]],166],[[[179,[178]]],166],[[[179,[166]]],166],[[[179,[13]]],166],[[[179,[174]]],166],[[[179,[96]]],166],[[[179,[181]]],166],[[[179,[167]]],166],[[[179,[9]]],166],[100,100],[[]],[172,172],[173,173],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[100,[107]]],[[100,[107]]]],[[]],[[[175,[174]]]],[[[175,[177]]]],[[[175,[178]]]],[[[175,[13]]]],[[[175,[176]]]],[[[175,[96]]]],[[[179,[177]]]],[[[179,[176]]]],[[[179,[13]]]],[[[179,[174]]]],[[[179,[178]]]],[[[179,[96]]]],0,0,[[]],[[],165],[[],100],[[],172],[[],173],[[],175],[[],179],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[13],[174],[166],[[]],[176],[182],[9],[177],[96],[15],[181],[178],[167],[174],[9],[166],[[]],[167],[178],[96],[15],[13],[174],[9],[167],[15],[13],[166],[[]],[178],[96],[13],[174],[96],[15],[[]],[9],[167],[178],[166],[166],[15],[[]],[96],[174],[167],[178],[13],[9],[[]],[13],[174],[96],[9],[167],[15],[[]],[[]],[[]],[[]],[[]],[[]],[[],176],[[],15],[[],177],[[],13],[[],167],[[],174],[[],96],[[],181],[[]],[[],166],[[],182],[[],178],[[],9],[[],166],[[],167],[[],178],[[]],[[],15],[[],174],[[],9],[[],96],[[],13],[[],174],[[],13],[[],178],[[],9],[[]],[[],96],[[],167],[[],15],[[],166],[[],13],[[]],[[],166],[[],15],[[],167],[[],9],[[],96],[[],174],[[],178],[[],178],[[],167],[[],9],[[],15],[[]],[[],96],[[],166],[[],13],[[],174],[[],174],[[]],[[],15],[[],9],[[],167],[[],13],[[],96],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],182],[[],176],[[],177],[[],174],[[],181],[[],96],[[],178],[[],166],[[],13],[[],15],[[],167],[[],9],[[],174],[[],178],[[],15],[[],166],[[],167],[[],96],[[],13],[[],9],[[],96],[[],174],[[],178],[[],13],[[],167],[[],9],[[],15],[[],166],[[],9],[[],96],[[],174],[[],13],[[],166],[[],178],[[],15],[[],167],[[],174],[[],13],[[],167],[[],178],[[],96],[[],166],[[],9],[[],15],[[],96],[[],174],[[],13],[[],9],[[],167],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[166],[15],[166],[15],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],166],[[],166],[[],166],[[],166],[[],166],[[]],[[]],[[]],[[]],[[],189],[[],189],[[],189],[[],189],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[[],166],[15,166],[15,166],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],190],[[],191],[192,192],[193,193],[194,194],[[]],[[]],[[]],[[],[[10,[195]]]],[[192,6],7],[[193,6],7],[[194,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[192,196],0,[192],[187,192],[[],[[10,[9,195]]]],[197,149],[198,[[10,[195]]]],[198,[[10,[195]]]],[[],[[10,[195]]]],[16,[[10,[9,195]]]],[149,[[10,[9,195]]]],[[],[[10,[9,195]]]],0,[192],[[],1],[[],1],[[192,9],16],[15,199],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],[[10,[9,195]]]],[[],[[10,[195]]]],[[],[[10,[195]]]],[200,[[10,[195]]]],[[],[[10,[9,195]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[202,[[0,[3,201]]]]],[[202,[[0,[3,201]]]]]],[203,203],[204,204],[[[205,[3]]],[[205,[3]]]],[206,206],[[]],[[]],[[]],[[]],[[]],[[203,15,15,9],15],[[204,9],[[16,[15]]]],[[203,9,9],15],[[204,9,9],[[16,[15]]]],[[[202,[[0,[5,201]]]],6],7],[[203,6],7],[[204,6],7],[[[205,[5]],6],7],[[206,6],7],[[]],[[]],[[]],[[]],[[]],[203,15],[[205,9]],[[206,9],9],[[]],[[]],[[]],[[]],[[]],[[[205,[134]]],[[16,[9]]]],[15,15],[[15,15],15],[[15,15],15],[[[16,[201]]],[[202,[201]]]],[15,203],[[],204],[[[16,[134]]],[[205,[134]]]],[[],206],[9,204],[201,[[16,[9]]]],[[[202,[201]]],[[16,[9]]]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],207],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[208,[3,3]]],[[208,[3,3]]]],[209,209],[[[210,[3]]],[[210,[3]]]],[211,211],[212,212],[213,213],[214,214],[215,215],[[[216,[3,3]]],[[216,[3,3]]]],[[[217,[3,3]]],[[217,[3,3]]]],[[[218,[3,3]]],[[218,[3,3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[207,207],79],[[208,208],79],[[[210,[134]],210],79],[[],219],[[],[[208,[108,108]]]],[[],209],0,[[207,207],8],[[208,208],8],[[[210,[135]],210],8],[[219,6],7],[[[208,[5,5]],6],7],[[209,6],7],[[[221,[5,[0,[5,[220,[5]]]]]],6],7],[[[210,[5]],6],7],[[211,6],7],[[212,6],7],[[213,6],7],[[214,6],7],[[215,6],7],[[[216,[5,5]],6],7],[[[217,[5,5]],6],7],[[[218,[5,5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[166,1],[166,1],[166,1],[166,1],[[209,220]],[[209,107],8],[[209,220],[[221,[220]]]],[[]],[[]],[[]],[[[210,[138]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[219,107,107],8],[219,8],0,0,[8,[[10,[195]]]],[[],189],0,[219,219],[[]],[[]],[[]],[[],1],[211,1],[212,1],[213,1],[215,1],[216,1],[[[218,[187]]],1],[[[218,[222]]],1],[[],219],[15,209],[9,216],[[],218],[196,1],[[[221,[220]]],1],0,[[207,207],[[1,[79]]]],[[208,208],[[1,[79]]]],[[[210,[148]],210],[[1,[79]]]],[209],[[209,15],15],[[[210,[[220,[9]]]],209]],0,[209,15],[209,221],[209,221],[209,107],[[209,15,9],[[16,[15]]]],[197,149],[197,149],[[],149],[[],149],[[],149],[[],1],[[],1],[[],1],0,0,[[]],[[]],[[219,107],219],[[219,107],219],[[219,107],219],[[219,9],219],[209],0,0,[[],209],0,0,[[],[[1,[166]]]],[[],[[1,[166]]]],[[],[[1,[166]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[1,[166]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[223,223],[224,224],[225,225],[[[227,[[0,[3,226]]]]],[[227,[[0,[3,226]]]]]],[[[228,[[0,[3,226]]]]],[[228,[[0,[3,226]]]]]],[[[229,[[0,[3,91]],[0,[3,39]]]]],[[229,[[0,[3,91]],[0,[3,39]]]]]],[150,150],[230,230],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],231],[9,15],[9,15],[[230,9,9,146]],0,0,0,[[150,150],8],[[223,6],7],[[224,6],7],[[225,6],7],[[[227,[[0,[5,226]]]],6],7],[[[228,[[0,[5,226]]]],6],7],[[[229,[[0,[5,91]],[0,[5,39]]]],6],7],[[150,6],7],[[231,6],7],[[230,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[225,[[227,[226]]]],[150],[[231,146],15],[[231,146,9,9],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[227,[226]],9,9],9],[[232,9,9],9],[223,9],[224,9],[225,9],0,[[9,146],223],[146,224],[[9,146],225],[[9,146],232],[146,229],[[],231],[9,230],[[]],0,0,[[224,9,9,27]],[[224,9,27]],[[224,9,9]],[[225,9,9,27]],[[232,9,9,8,27]],[[232,9,9,8,27,27]],[[[233,[[220,[9]]]],209],146],[[[234,[[220,[9]]]],209],146],[[[235,[[220,[9]]]],209],146],[[[236,[[220,[9]]]],209],146],0,[[[16,[15]]]],[[[16,[15]]]],[[224,9,27]],[[224,9,27]],[[224,9,9]],[[],231],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[232,9,9,8,27]],0,0,0,[[],9],[[],9],[15,231],0,0,0],"p":[[4,"Option"],[3,"RangeChminChmaxAdd"],[8,"Clone"],[3,"RangeSumRangeChminChmaxAdd"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"ConvexHullTrick"],[15,"i64"],[3,"XorBasis"],[15,"u64"],[3,"Vec"],[3,"RhoPath"],[8,"MIntBase"],[3,"IndependentSubSet"],[3,"BitDp"],[3,"Subsets"],[3,"Combinations"],[3,"PartisanGameAnalyzer"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"Iterator"],[8,"FnMut"],[3,"BabyStepGiantStep"],[3,"SqrtDecompositionBuckets"],[8,"IntoIterator"],[3,"PartisanGamer"],[3,"SlideMinimum"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"LexicographicalSubsequence"],[3,"LongestIncreasingSubsequence"],[8,"Fn"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"FunctionalAutomaton"],[3,"MappingAutomaton"],[3,"AlphabetMappingAutomaton"],[3,"LexicographicalAutomaton"],[3,"RevLexicographicalAutomaton"],[3,"MonoidalAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BitVector"],[3,"WaveletMatrix"],[3,"Accumulate"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"SlopeTrick"],[3,"MergingUnionFind"],[3,"HashMap"],[3,"WeightedUnionFind"],[3,"UnionFind"],[3,"NonNull"],[3,"MemoryPool"],[3,"SegmentTree"],[3,"DequeAggregation"],[3,"BitSet"],[3,"Trie"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"SegmentTree2D"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"Automatondp"],[3,"LineSet"],[4,"Ordering"],[3,"SplaySequence"],[3,"SplayMap"],[3,"Drain"],[3,"Ref"],[3,"RefMut"],[8,"Group"],[3,"Iter"],[3,"Iter"],[3,"Keys"],[3,"IterMut"],[3,"Keys"],[8,"Monoid"],[3,"Static2DTree"],[8,"RankSelectDictionaries"],[3,"Range"],[3,"Range"],[15,"isize"],[3,"Values"],[3,"Values"],[3,"ValuesMut"],[3,"Complex"],[4,"Ccw"],[3,"Line"],[6,"Point"],[3,"LineSegment"],[3,"Approx"],[3,"Circle"],[15,"f64"],[8,"Default"],[3,"TwoSatisfiability"],[3,"ProjectSelectionProblem"],[3,"SparseGraphBuilder"],[3,"AdjacencyListGraph"],[3,"BipartiteMatching"],[3,"DinicBuilder"],[3,"PrimalDualBuilder"],[3,"GridGraph"],[3,"UsizeGraph"],[3,"ClosureGraph"],[3,"SparseGraph"],[3,"Adjacency"],[3,"Iter"],[3,"VIndexWithValue"],[3,"VIndexWithEIndexValue"],[6,"BidirectionalSparseGraph"],[3,"Dinic"],[3,"PrimalDual"],[3,"EdgeListGraph"],[3,"VIndex"],[3,"VIndexWithEIndex"],[4,"DirectedEdge"],[4,"UndirectedEdge"],[4,"BidirectionalEdge"],[3,"StronglyConnectedComponent"],[8,"Ord"],[8,"PartialEq"],[15,"never"],[6,"DirectedSparseGraph"],[8,"Hash"],[8,"IterScan"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraphScanner"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"AdjacencyViewIterFromEindex"],[3,"AdjacencyViewIterFromValue"],[6,"UndirectedSparseGraph"],[3,"LowLink"],[8,"PartialOrd"],[3,"String"],[4,"TreeCenter"],[3,"FormalPowerSeries"],[3,"Matrix"],[3,"Polynomial"],[8,"Zero"],[8,"Add"],[8,"Mul"],[8,"MulAssign"],[3,"BarrettReduction"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"PowPrec"],[3,"EulerPhiTable"],[3,"PrimeList"],[3,"PrimeTable"],[3,"MInt"],[15,"u32"],[15,"u128"],[3,"IterMut"],[8,"One"],[8,"Copy"],[3,"DoubleDouble"],[3,"Float32"],[3,"Float64"],[15,"i128"],[3,"Saturating"],[15,"i16"],[15,"i8"],[15,"i32"],[3,"Wrapping"],[3,"QuadDouble"],[15,"u8"],[15,"u16"],[4,"FpCategory"],[3,"ExtendedGcd"],[3,"Error"],[15,"f32"],[15,"str"],[3,"RangeInclusive"],[3,"LocalKey"],[3,"Bytes"],[3,"Chain"],[3,"Scanner"],[4,"Usize1"],[4,"Chars"],[3,"Error"],[3,"ScannerIter"],[8,"Read"],[3,"BorrowedCursor"],[3,"Take"],[3,"Arguments"],[8,"Eq"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"TotalOrd"],[3,"PartialIgnoredOrd"],[3,"Xorshift"],[3,"NotEmptySegment"],[3,"CharWithBase"],[3,"CharsWithBase"],[3,"ByteWithBase"],[4,"Bytes"],[3,"BytesWithBase"],[3,"Collect"],[3,"SizedCollect"],[3,"Splitted"],[3,"SimuratedAnnealing"],[8,"RandomSpec"],[3,"RandIter"],[15,"char"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[8,"LcaMonoidDispatch"],[3,"LowestCommonAncestor"],[3,"LcaMonoid"],[3,"ReRooting"],[3,"TreeRec"],[3,"TreeHasher"],[3,"HeavyLightDecomposition"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[8,"MonoidAction"],[8,"SemiRing"],[8,"Magma"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"AddMulOperation"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[4,"PermutationOperation"],[3,"FindMajorityOperation"],[8,"Field"],[8,"Invertible"],[8,"Unital"],[8,"Ring"],[8,"BitXorIdentity"],[8,"MoSolver"],[8,"SqrtDecomposition"],[8,"PartisanGame"],[3,"SubsetTransform"],[3,"SupersetTransform"],[8,"SliceBisectExt"],[8,"Bisect"],[8,"Trisect"],[8,"Automaton"],[8,"Allocator"],[8,"ToDigitSequence"],[8,"ApproxOrd"],[8,"Adjacencies"],[8,"AdjacenciesWithEindex"],[8,"AdjacenciesWithValue"],[8,"AdjacencyIndexWithValue"],[8,"AdjacencyView"],[8,"EIndexedGraph"],[8,"AdjacencyIndexWithEindex"],[8,"Edges"],[8,"EdgeMap"],[8,"ShortestPathSemiRing"],[8,"GraphBase"],[8,"AdjacencyIndex"],[8,"Vertices"],[8,"VertexMap"],[3,"StandardSp"],[3,"OptionSp"],[3,"PathFoldingSp"],[8,"ShortestPathExt"],[8,"SparseGraphConstruction"],[8,"EdgeSize"],[8,"EdgeView"],[8,"VertexSize"],[8,"VertexView"],[8,"ConvolveSteps"],[3,"Mersenne61"],[3,"Mersenne127"],[4,"ConvolveRealFft"],[3,"Convolve"],[8,"FormalPowerSeriesCoefficientSqrt"],[8,"Float"],[8,"IntBase"],[8,"Unsigned"],[8,"Signed"],[8,"DiscreteSteps"],[8,"BinaryRepr"],[8,"RangeBoundsExt"],[8,"MIntConvert"],[8,"Bounded"],[3,"Modulo2"],[4,"Modulo998244353"],[4,"Modulo1000000007"],[4,"Modulo1000000009"],[4,"DynModuloU32"],[4,"DynModuloU64"],[6,"DynMIntU32"],[6,"DynMIntU64"],[4,"Modulo998244353"],[4,"Modulo2113929217"],[4,"Modulo1811939329"],[4,"Modulo2013265921"],[8,"MontgomeryReduction32"],[8,"Write"],[8,"MarkedIterScan"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[8,"AsTotalOrd"],[8,"PartialOrdExt"],[8,"CharTools"],[8,"IterPrint"],[4,"LcaMonoidDefaultId"],[13,"One"],[13,"Two"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,5,2,5,2,2,2,5,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,5,2,5,2,2,2,5,5,2,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,2,2,5,0,0,0,0,2,2,5,5,2,2,5,2,2,2,2,5,5,2,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,2,2,2,2,2,5,2,5,2,5,2,2,5,5,2,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,2,2,2,5,2,5,2,2,5,2,5,2,5,0,0,5,5,0,0,0,2,5,2,5,2,5],"n":["datastructure","graph","math","sample","string","dynamic_sequence_range_affine_range_sum","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_chmin_chmax_add_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","MInt998244353","RangeSumRangeLinear","SplaySequence","dynamic_sequence_range_affine_range_sum","LineSet","line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","LazySegmentTree","RangeChminChmaxAdd","RangeSumRangeChminChmaxAdd","Saturating","range_chmin_chmax_add_range_sum","WaveletMatrix","range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","UnionFind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","log_of_formal_power_series","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","Convolve","ConvolveSteps","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","PrimeList","enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","factorize","prime_factors_flatten","MInt998244353","berlekamp_massey","find_linear_recurrence","Fps998244353","MInt998244353","inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","Fps998244353","MInt998244353","log_of_formal_power_series","Fps998244353","MInt998244353","multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","DynMIntU32","sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","floor_sum","sum_of_floor_of_linear","TwoSatisfiability","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","SuffixArray","suffixarray","Zarray","zalgorithm"],"q":["library_checker","","","","","library_checker::datastructure","","","","","","","","","","","","","library_checker::datastructure::dynamic_sequence_range_affine_range_sum","","","","library_checker::datastructure::line_add_get_min","","library_checker::datastructure::point_add_range_sum","","","","","library_checker::datastructure::point_set_range_composite","","","","","library_checker::datastructure::queue_operate_all_composite","","","","","library_checker::datastructure::range_affine_range_sum","","","","","","library_checker::datastructure::range_chmin_chmax_add_range_sum","","","","","library_checker::datastructure::range_kth_smallest","","library_checker::datastructure::staticrmq","","","","","library_checker::datastructure::unionfind","","library_checker::datastructure::vertex_add_path_sum","","","","","library_checker::datastructure::vertex_add_subtree_sum","","","","","library_checker::datastructure::vertex_set_path_composite","","","","","","","","library_checker::graph","","","","library_checker::graph::bipartitematching","","","","library_checker::graph::directedmst","","","library_checker::graph::lca","","","","","","library_checker::graph::scc","","","library_checker::math","","","","","","","","","","","","","","","","","","library_checker::math::convolution_mod","","","","","library_checker::math::convolution_mod_1000000007","","","","","","library_checker::math::discrete_logarithm_mod","","library_checker::math::enumerate_primes","","library_checker::math::exp_of_formal_power_series","","","library_checker::math::factorize","","library_checker::math::find_linear_recurrence","","","library_checker::math::inv_of_formal_power_series","","","library_checker::math::kth_term_of_linearly_recurrent_sequence","","","","library_checker::math::log_of_formal_power_series","","","library_checker::math::multipoint_evaluation","","","library_checker::math::polynomial_taylor_shift","","","","library_checker::math::pow_of_formal_power_series","","","library_checker::math::sharp_p_subset_sum","","","","","","library_checker::math::sqrt_mod","","library_checker::math::sqrt_of_formal_power_series","","","library_checker::math::sum_of_floor_of_linear","","library_checker::math::two_sat","","library_checker::sample","","library_checker::sample::aplusb","library_checker::sample::many_aplusb","library_checker::string","","","library_checker::string::number_of_substrings","","library_checker::string::suffixarray","","library_checker::string::zalgorithm",""],"d":["","","","","","","","","","","","","","","","","","","","","","✅  AC  3380ms","","✅  AC  405ms","","","","✅  AC  92ms","✅  AC  102ms","","","","","✅  AC  171ms","","","","","✅  AC  40ms","","","","","","✅  AC  714ms","","","","","✅  AC  1265ms","","✅  AC  339ms","","","","✅  AC  158ms","✅  AC  140ms","","✅  AC  16ms","","","","","✅  AC  476ms","","","","","✅  AC  174ms","","","","","","","","✅  AC  184ms","","","","","","","✅  AC  103ms","✅  AC  816ms","","","✅  AC  164ms","","","","","✅  AC  599ms","✅  AC  446ms","","","✅  AC  151ms","","","","","","","","","","","","","","","","","","","","","","","✅  AC  159ms","","","","","","✅  AC  303ms","","✅  AC  3ms","","✅  AC  1524ms","","","✅  AC  602ms","✅  AC  85ms","","","","✅  AC  106ms","","","✅  AC  163ms","","","","✅  AC  1459ms","","","✅  AC  243ms","","","✅  AC  564ms","","","","✅  AC  137ms","","","✅  AC  595ms","","","","","","✅  AC  480ms","","✅  AC  66ms","","","✅  AC  319ms","","✅  AC  48ms","","✅  AC  226ms","","","✅  AC  0ms","✅  AC  186ms","","","","","✅  AC  756ms","","✅  AC  731ms","","✅  AC  31ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"]],"a":{"verify":[21,23,27,28,33,38,44,49,51,55,56,58,63,68,76,83,84,87,92,93,96,119,125,127,129,132,133,137,140,144,147,150,154,157,163,165,168,170,172,175,176,181,183,185]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
