var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,5,2,5,2,5,5,2,2,5,2,5,2,5,2,5,5,2,5,2,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,2,5,2,2,5,2,2,5,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,5,5,2,2,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,5,5,2,2,2,2,5,2,2,2,2,2,5,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,5,2,5,5,2,2,5,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,2,2,5,2,2,5,2,2,5,2,2,5,0,5],"n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","dpl_1_e","levenshtein_distance","KnapsackPloblemSmallValue","dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","dpl_3_a","largest_square","dpl_3_b","largest_rectangle_in_grid","dpl_3_c","largest_rectangle","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","MinOperation","SegmentTree","dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","Static2DTree","dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","dsl_3_b","dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","EdgeListGraphScanner","grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","DirectedGraphScanner","grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","itp1_1_a","itp1_1_a"],"q":["aizu_online_judge","","","","aizu_online_judge::dpl","","","","","","","","","","","","aizu_online_judge::dpl::dpl_1_a","aizu_online_judge::dpl::dpl_1_b","","aizu_online_judge::dpl::dpl_1_c","","aizu_online_judge::dpl::dpl_1_d","","aizu_online_judge::dpl::dpl_1_e","","aizu_online_judge::dpl::dpl_1_f","","aizu_online_judge::dpl::dpl_1_g","","aizu_online_judge::dpl::dpl_1_h","","aizu_online_judge::dpl::dpl_1_i","","aizu_online_judge::dpl::dpl_3_a","","aizu_online_judge::dpl::dpl_3_b","","aizu_online_judge::dpl::dpl_3_c","","aizu_online_judge::dsl","","","","","","","","","","","","","","","","","","aizu_online_judge::dsl::dsl_1_a","","aizu_online_judge::dsl::dsl_1_b","","","aizu_online_judge::dsl::dsl_2_a","","","aizu_online_judge::dsl::dsl_2_b","","","aizu_online_judge::dsl::dsl_2_c","","aizu_online_judge::dsl::dsl_2_d","","","aizu_online_judge::dsl::dsl_2_e","","","aizu_online_judge::dsl::dsl_2_f","","","aizu_online_judge::dsl::dsl_2_g","","","aizu_online_judge::dsl::dsl_2_h","","","aizu_online_judge::dsl::dsl_2_i","","","aizu_online_judge::dsl::dsl_3_a","","","aizu_online_judge::dsl::dsl_3_b","aizu_online_judge::dsl::dsl_3_c","aizu_online_judge::dsl::dsl_3_d","","","aizu_online_judge::dsl::dsl_4_a","aizu_online_judge::dsl::dsl_5_a","aizu_online_judge::dsl::dsl_5_b","aizu_online_judge::grl","","","","","","","","","","","","","","","","","","aizu_online_judge::grl::grl_1_a","","","","","","","","aizu_online_judge::grl::grl_1_b","","","","","aizu_online_judge::grl::grl_1_c","","","","","","aizu_online_judge::grl::grl_2_a","","aizu_online_judge::grl::grl_2_b","","","","aizu_online_judge::grl::grl_3_a","","","aizu_online_judge::grl::grl_3_b","","","aizu_online_judge::grl::grl_3_c","","","aizu_online_judge::grl::grl_4_a","","aizu_online_judge::grl::grl_4_b","","","aizu_online_judge::grl::grl_5_a","","","aizu_online_judge::grl::grl_5_b","","","","aizu_online_judge::grl::grl_5_c","","","","","aizu_online_judge::grl::grl_5_d","","","","","","aizu_online_judge::grl::grl_5_e","","","","","","","aizu_online_judge::grl::grl_6_a","","","aizu_online_judge::grl::grl_6_b","","","aizu_online_judge::grl::grl_7_a","","","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a"],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  2ms","","✅  AC  1ms","","✅  AC  2ms","","✅  AC  9ms","✅  AC  6ms","","","✅  AC  0ms","","✅  AC  7ms","","✅  AC  58ms","","✅  AC  0ms","✅  AC  29ms","","✅  AC  23ms","","✅  AC  3ms","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  6ms","","","✅  AC  18ms","","","✅  AC  17ms","","","✅  AC  14ms","","✅  AC  427ms","","","✅  AC  58ms","","","✅  AC  45ms","","","✅  AC  90ms","","","✅  AC  50ms","","","✅  AC  39ms","","","✅  AC  67ms","","","✅  AC  4ms","✅  AC  2ms","✅  AC  248ms","","","✅  AC  111ms","✅  AC  77ms","✅  AC  3ms","✅  AC  9ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  62ms","✅  AC  87ms","","","","","✅  AC  9ms","","","","","","✅  AC  9ms","","✅  AC  23ms","","","","✅  AC  0ms","","","✅  AC  2ms","","","✅  AC  2ms","","","✅  AC  6ms","","✅  AC  0ms","","✅  AC  2ms","","","","✅  AC  8ms","","","","✅  AC  4ms","","","","","✅  AC  86ms","","","","","","✅  AC  69ms","","","","","","","✅  AC  182ms","","","✅  AC  0ms","","","✅  AC  0ms","","","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,[[1,2]],0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,1,1],3],0,0,[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"],[15,"bool"]],"a":{"verify":[16,18,20,22,23,26,28,30,32,33,35,37,58,61,64,67,69,72,75,78,81,84,87,90,91,92,95,96,97,98,123,124,129,135,137,141,144,147,150,152,154,158,162,167,173,180,183,186,189,191]}},\
"competitive":{"doc":"github","t":[14,0,0,14,14,14,14,14,14,0,14,14,0,14,14,14,14,0,0,14,14,14,14,14,0,14,14,14,14,14,14,14,0,0,14,14,14,14,14,14,14,14,0,14,0,0,8,8,16,16,3,16,3,16,16,8,8,3,8,3,8,3,3,8,3,3,8,3,3,4,8,8,8,8,16,3,3,18,18,8,3,4,3,8,8,16,3,4,3,3,3,3,3,3,3,3,3,8,8,8,16,16,3,8,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,16,16,3,8,3,3,3,3,3,3,8,3,3,3,16,16,16,16,8,3,8,3,3,16,3,8,8,8,3,8,3,16,16,16,3,3,3,16,8,3,8,3,3,11,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,10,10,11,10,10,10,11,11,11,5,10,10,10,11,11,11,10,10,10,5,10,10,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,16,3,3,8,3,3,3,3,3,3,3,6,6,6,6,3,6,6,6,6,8,3,3,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,16,3,8,3,3,3,3,3,3,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,14,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,4,3,13,13,3,3,13,13,13,6,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,16,16,16,16,16,8,8,8,3,8,8,8,3,3,8,3,3,4,6,6,3,3,3,3,4,6,6,16,16,8,16,3,3,8,8,8,8,16,8,3,3,3,3,3,3,3,8,8,3,3,8,3,3,3,16,3,3,4,6,6,3,3,16,16,3,3,3,16,8,8,8,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,12,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,12,11,11,10,11,11,11,12,10,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,12,11,3,6,4,8,3,16,3,8,8,6,6,6,3,3,3,3,3,3,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,5,5,5,11,12,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,11,11,5,11,5,5,10,11,11,11,11,11,5,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,8,3,18,8,3,18,18,16,3,18,18,18,18,18,18,18,18,18,8,3,3,18,16,8,18,18,18,18,18,18,18,18,18,18,18,18,3,8,8,18,18,8,18,3,18,8,3,18,3,8,16,18,8,16,3,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,0,10,10,10,10,10,10,10,11,11,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,6,6,4,4,6,6,6,6,4,4,3,4,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,4,4,4,4,8,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,3,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,10,5,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,3,4,3,8,3,4,3,3,8,8,8,18,8,3,16,16,16,3,8,3,3,8,18,3,3,8,3,3,3,16,3,4,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,12,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,12,11,11,11,11,11,5,5,5,5,5,10,11,11,14,14,10,11,11,11,11,11,11,11,11,11,12,12,11,12,12,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,3,3,3,3,3,4,8,3,3,13,3,3,3,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11],"n":["add_assign","algebra","algorithm","automaton","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","iter_print","math","max","memorize","min","minmax","mlambda","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","tools","tree","AbelianGroup","AbelianMonoid","Act","ActMonoid","AddMulOperation","Additive","AdditiveOperation","Agg","AggMonoid","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","EmptyLazy","Field","FindMajorityOperation","FirstOperation","Gf2_63","Group","Idempotent","IdempotentMonoid","Invertible","Key","LastOperation","LinearOperation","MOD","MOD","Magma","MaxOperation","Mersenne61","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","Top2Operation","Unital","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_operate","act_operate","act_operate_assign","act_operate_assign","act_unit","act_unit","add","add","add","agg_operate","agg_operate","agg_operate_assign","agg_operate_assign","agg_unit","agg_unit","all_one","all_zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone_into","clone_into","define_monoid","div","div","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","mul","mul","neg","neg","one","one","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","single","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","sub","sub","sum","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","zero","zero","Answer","B","BabyStepGiantStep","Bisect","BitDp","Combinations","ConvexHullTrick","DivisorTransform","EsperEstimator","EsperSolver","ImpartialGame","ImpartialGameAnalyzer","ImpartialGamer","IndependentSubSet","Iter","Iter","LIter","M","MoSolver","MultipleTransform","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SliceCombinationsExt","SliceSortExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","State","State","SubsetTransform","Subsets","SupersetTransform","T","Trisect","XorBasis","ZeroSumGame","ZeroSumGameAnalyzer","ZeroSumGamer","add_line","answer","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bubble_sort","bubble_sort_by","bucket","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","convolve","convolve","convolve","convolve","default","default","default","elements","eq","eval","eval","eval","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_bucket","fold_cell","for_each_combinations","for_each_combinations_with_replacement","for_each_permutations","for_each_product","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","halve","ind","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_element","is_subset","k_colorable","merge_sort","merge_sort_by","middle","mo_solve","mo_solve","mobius_transform","mobius_transform","mobius_transform","mobius_transform","n","new","new","new","new","new","new","new","new","new","new","new","new_with_primes","new_with_primes","next","next","next_combination","next_left","next_left","next_minimum","next_permutation","next_right","next_right","next_section","next_state","next_state","next_state","next_state","not_elements","parallel_binary_search","position_bisect","prev_combination","prev_permutation","push","query","reduce","remove","rfind_bisect","rposition_bisect","run_length_encoding","section_end","section_end","slide_minimum","solve","solve","solve","solve_checked","sqrt_decomposition","sqrt_decomposition","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_bucket","update_cell","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Accumulate","Allocator","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","CompressedBinaryIndexedTree","CompressedBinaryIndexedTree1d","CompressedBinaryIndexedTree2d","CompressedBinaryIndexedTree3d","CompressedBinaryIndexedTree4d","CompressedSegmentTree","CompressedSegmentTree1d","CompressedSegmentTree2d","CompressedSegmentTree3d","CompressedSegmentTree4d","Compressor","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCompress","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MemoryPool","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTreeMap","SlopeTrick","SplayMap","SplaySequence","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","VecCompress","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","allocate","allocate","append","as_slice","automaton","back","bit_length","bit_length","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_failure","build_inplace","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count_ones","count_zeros","dd","deallocate","deallocate","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","drop","drop","drop","edges","eq","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get","get","get_difference","get_key_value","get_key_value_at","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","index_exact","index_exact","index_exact","index_lower_bound","index_lower_bound","index_lower_bound","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert","insert","insert","insert_at","insert_once_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","iter","iter","iter","iter_mut","keys","keys","keys","last","len","len","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","modify","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next_node","node_size","not","not","ones","partial_cmp","pop","pop_back","pop_front","pop_left_if","pop_left_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","quantile_outer","query_min","range","range","range","range_at","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove","remove","remove_at","remove_count","remove_count","reverse","roots","roots","roots","rotate_left","rotate_right","rposition_acc","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update_isize","valley","values","values","values","values_mut","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","Approx","ApproxOrd","Ccw","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","Point","approx_cmp","approx_eq","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","ccw_open","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","default","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","add_assign","add_assign","add_assign","add_assign","add_clause","add_cost1","add_cost2","add_cost2_01","add_cost2_10","add_edge","add_edge","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adj4","adj8","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies_with_eindex","adjacencies_with_eindex","adjacencies_with_value","adjacencies_with_value","adjacencies_with_value","adjacency","articulation","avalue","avalue","avalue","aviews","aviews","aviews","aviews","aviews","aviews","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","build","builder","builder","builder","builder_with_esize","change_edge","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","components","construct_emap","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","construct_vmap","construct_vmap","construct_vmap","construct_vmap","default","default","default","dfs_order","dfs_tree","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","dulmage_mendelsohn_decomposition","edges","edges","edges","edges_size","edges_size","eindex","eindex","eindex","eindex","elist","emap_get","emap_get","emap_get_mut","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","eq","eq","eq","eq","esize","esize","esize","eview","eview","eview","extend","extend","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","hash","hash","hash","height","hopcroft_karp","id","index","index","inf","inf","inf","inf","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","kuhn_multi_start_bfs","low","map","map","maximum_flow","maximum_flow_limited","maximum_independent_set","maximum_matching","minimum_cost_flow","minimum_cost_flow_limited","minimum_cut","minimum_edge_cover","minimum_spanning_arborescence","minimum_spanning_tree","minimum_vertex_cover","move_by_diff","mscan","mscan","mscan","mscan","mul","mul","mul","mul","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_adj4","new_adj8","new_with_esize","next","next","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","solve","source","source","source","source","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices_size","vertices_size","vindex","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_set","vmap_set","vsize","vsize","vsize","vview","vview","vview","vview","vview","vview","vview","warshall_floyd_ap","warshall_floyd_ap","weighted_tree_depth","weighted_tree_depth","width","with_n_values","Convolve","Convolve998244353","ConvolveRealFft","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","MIntConvolve","Matrix","MemorizedFactorial","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","assign","berlekamp_massey","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","check_primitive_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convolve","convolve","count_divisors","count_divisors","count_multiset_sum","count_subset_sum","data","data","data","default","default","default","default","determinant","diff","discrete_logarithm","discrete_logarithm_prime_mod","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","divisors","divisors","divisors","eq","eq","eq","euler_phi","eval","even","exp","extgcd","extgcd_binary","extgcd_recurse","eye","fact","factorial","floor_sum","floor_sum_i64","floor_sum_range_freq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_loop","get","highly_composite_number","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into_iter","inv","inv","inv","inv_fact","inverse","inverse_transform","inverse_transform","inverse_transform","inverse_transform","is_prime","is_prime","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","length","length","length","length","linear_congruence","log","miller_rabin","miller_rabin_with_br","modinv","modinv_extgcd_binary","modinv_recurse","moebius","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply","multiply","multipoint_evaluation","neg","neg","new","new","new","new","new","new","new","odd","one","one","permutation","pow","pow","pow","pow","powi","prefix","prefix_ref","prime_factors","prime_factors","prime_factors","prime_factors_flatten","primes","primes","primes_lte","primitive_root","product_all","rank","rem","rem","rem","rem","rem","rem_assign","rem_assign","reserve","resize","resized","reversed","row_reduction","shape","shl","shl","shl_assign","shr","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","taylor_shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","transform","trial_division","trial_division","trim_tail_zeros","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zeros","zeros","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","Rational","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp_by_arg","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","default","delta","den","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_rem","div_rem","div_rem","dot","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","get_mod","get_mod","get_mod","hash","hash","hash","hash","hypot","hypot","hypot","i","im","index","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","is_zero","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","maximum","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","minimum","minimum","minimum","minimum","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new_unchecked","new_unchecked","norm","not","not","num","one","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","primitive_nth_root_of_unity","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","scan","scan","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_mod","set_mod","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","local_key","local_key","local_key","local_key","n1","n1","n1","n1","n1","n2","n2","n2","n2","n2","n3","n3","n3","n3","n3","r","r","r","r","r","r","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Chars","Read","Scanner","Usize1","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","bytes","chain","clone","clone","clone","clone_into","clone_into","clone_into","flush","fmt","fmt","fmt","from","from","from","into","into","into","is_read_vectored","is_write_vectored","iter","iter_print","mscan","new","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","scan","scan","scan","scan_vec","take","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_all","write_all_vectored","write_fmt","write_vectored","KnuthMorrisPratt","MultipleRollingHash","RollingHash","SuffixArray","Zarray","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","find","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash_once","index","index","into","into","into","into","into","longest_common_prefix_array","new","new","new","new","new","new_rand","new_rand","search","search_all","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AsTotalOrd","AssociatedValue","ByteWithBase","Bytes","BytesWithBase","CharTools","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","LOG_TABLE_SIZE","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandRange","RandomSpec","SEED","Scanner","ScannerIter","SerdeByteStr","SimuratedAnnealing","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","deserialize","deserialize_from_bytes","deserialize_from_bytes","end_temp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_accepted","is_end","is_maximize","iter_count","iter_print","local_key","log_table","minimize","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","new","new","new","new","new","next","next","now","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rand","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","scan","scan","scan","scan","scan_value","serialize","serialize_bytestr","serialize_bytestr","set","set","set_end_temp","set_start_temp","set_time_limit","set_update_interval","shuffle","start_temp","temperture","time","time","time_limit","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_upper_alphabetic_number","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unescape","update_interval","with","with","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dp","eidx","ep","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","time_seeded","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vidx","vsize","vsize","with_seed"],"q":["competitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebracompetitive::algorithmcompetitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structurecompetitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graphcompetitive::mathcompetitive::numcompetitive::num::mint_basiccompetitive::num::montgomery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::toolscompetitive::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","algebra","algorithm","build automaton","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","Implement <code>AssociatedValue</code>.","","","","Print expressions with a separator.","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","string algorithems","","","tree algorithems","commutative group","commutative monoid","","","$+,\\\\times$","","$+$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","","Find majority(strict) of a sequence.","retain the first element","","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","","","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","$a$ where $a \\\\circ x = e$","","","","","","","","","","multiplicative operaion: $+$","multiplicative operaion: $+$","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","","","additive identity: $0$","additive identity: $0$","","","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","binary search helper","","","","","","","","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","","","","","ternary search helper","Basis of xor operation.","","","","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","","","","","","","","","","","","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","get i-th value of rho path","return between two elements","","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","middle point of section","","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","","","","","","Create a empty space.","","","","","","","","","","","","","Divide into 3 sections","","","","","","","Returns the first index that satisfies a predicate. if not …","","","","","Return (reduced basis, coordinate). Coordinate means if …","","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","the end condition of binary search","the end condition of ternary search","","","","","","","","","like <code>(left..=right).min_by_key(f)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return accumlate of [0, k)","fold [0, k]","fold [0, i] x [0, j]","","","","","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of [l, r)","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Create empty","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","","get k-th smallest value in range","get k-th smallest value out of range","","","","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-badd a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(p_x = f) | (p_y = g)","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","","","","","","","","","Return a slice of adjacency verticeseturn the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","","Return an iterator over graph vertices.","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e","Sum of Floor of Linear mod 2^64","Sum of Floor of Linear mod 2^64","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","binary gcd","","","[(hcn, #divisor)]","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","","return: (y,z)","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationseturns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","m","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","n^1 mod m","","","","","n^2 mod m","","","","","n^3 mod m","","","","","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","","","","","","","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","","","","","","","Flush this output stream, ensuring that all intermediately …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","Print expressions with a separator.","","","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","S [l, r)","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","","Trait for spec of generating random value.","","","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","","","","","","","","","","","","","","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","","","","","","","","","","","","","","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,247,0,248,0,247,247,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,247,0,0,249,250,0,0,0,0,0,0,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,251,248,0,0,247,252,253,254,255,256,257,258,4,247,252,253,254,255,256,257,258,4,247,247,247,247,247,247,248,248,2,247,247,247,247,247,247,259,260,261,252,253,254,255,256,257,258,2,4,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,249,250,261,252,253,254,255,256,257,258,2,4,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,249,250,2,2,2,4,2,4,0,278,278,2,4,261,252,253,254,255,256,257,258,2,4,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,249,250,261,252,253,254,255,256,257,258,2,4,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,249,250,278,278,279,266,267,268,271,273,276,280,280,0,248,248,281,281,248,248,251,2,4,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,249,250,251,251,100,100,251,251,279,279,266,267,280,280,4,247,252,253,254,255,256,257,258,4,281,281,4,2,4,247,247,261,252,253,254,255,256,257,258,2,4,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,249,250,261,252,253,254,255,256,257,258,2,4,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,249,250,261,252,253,254,255,256,257,258,2,4,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,249,250,280,2,4,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,249,250,282,248,248,283,284,0,0,0,0,0,0,0,0,0,0,0,0,285,286,287,284,0,0,0,0,0,287,0,0,0,0,0,0,0,285,287,286,0,0,0,284,0,0,0,0,0,12,283,14,0,35,36,33,37,288,289,28,29,32,20,21,22,19,12,23,24,25,26,17,38,14,27,35,36,33,37,288,289,28,29,32,20,21,22,19,12,23,24,25,26,17,38,14,27,290,290,284,17,17,19,20,21,22,19,12,23,24,25,26,14,27,20,21,22,19,12,23,24,25,26,14,27,20,288,289,28,29,20,12,14,20,20,25,26,27,17,14,291,0,32,20,21,22,19,12,23,24,25,26,17,14,27,33,284,284,292,292,292,292,35,36,33,37,288,289,28,29,32,20,21,22,19,12,23,24,25,26,17,38,14,27,19,14,17,17,293,19,283,14,35,36,33,37,288,289,28,29,32,20,21,22,19,12,23,24,25,26,17,38,14,27,21,22,20,20,19,290,290,294,283,283,288,289,28,29,19,35,36,37,32,12,23,25,26,38,14,27,28,29,21,22,292,287,36,38,292,287,36,294,285,286,35,37,20,0,291,292,292,23,12,14,283,291,291,0,293,294,0,32,23,24,23,284,284,20,0,20,21,22,19,12,23,24,25,26,14,27,35,36,33,37,288,289,28,29,32,20,21,22,19,12,23,24,25,26,17,38,14,27,35,36,33,37,288,289,28,29,32,20,21,22,19,12,23,24,25,26,17,38,14,27,35,36,33,37,288,289,28,29,32,20,21,22,19,12,23,24,25,26,17,38,14,27,33,284,284,288,289,28,29,0,0,0,0,0,0,39,40,41,42,43,44,39,40,41,42,43,44,39,40,41,42,43,44,39,40,41,42,43,44,41,44,39,40,44,39,40,41,44,39,40,39,40,39,39,40,41,42,43,44,39,40,41,42,43,44,39,40,39,40,41,44,39,40,39,40,39,39,40,41,42,43,44,43,0,0,0,0,44,39,39,40,41,42,43,44,39,40,41,42,39,40,41,42,43,44,39,40,41,42,43,44,39,40,41,42,43,44,39,40,41,42,43,44,0,0,295,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,295,46,47,48,49,50,51,52,53,54,55,102,56,57,58,59,60,61,61,61,61,59,60,62,63,64,64,62,63,64,64,65,67,68,296,70,62,71,0,72,102,56,73,73,73,73,73,73,73,73,73,58,59,60,61,78,79,101,80,81,65,71,82,83,72,89,90,67,70,84,46,47,48,49,50,51,52,53,54,55,56,73,85,86,62,63,87,75,76,77,64,74,68,57,58,59,60,61,78,79,101,80,81,65,71,82,83,72,89,90,67,70,84,46,47,48,49,50,51,52,53,54,55,56,73,85,86,62,63,87,75,76,77,64,74,68,57,74,75,62,63,76,77,64,64,59,60,61,78,79,80,81,71,82,83,72,67,84,46,47,48,49,50,51,52,53,54,55,56,73,85,86,62,63,87,75,76,77,64,74,68,57,59,60,61,78,79,80,81,71,82,83,72,67,84,46,47,48,49,50,51,52,53,54,55,56,73,85,86,62,63,87,75,76,77,64,74,68,57,73,77,76,73,73,75,296,70,61,78,83,72,89,90,70,54,55,73,62,63,87,76,77,64,295,295,84,62,76,77,89,90,70,74,73,62,62,63,63,76,77,65,67,74,68,74,65,65,58,59,60,61,78,79,80,81,71,82,83,72,89,90,67,70,84,46,47,48,49,50,51,52,53,54,55,56,73,85,86,62,63,87,75,76,77,64,74,68,57,58,59,60,78,78,78,78,79,80,81,71,82,89,84,80,81,71,82,83,72,79,58,59,60,61,78,79,101,80,81,65,71,82,83,72,89,90,67,70,84,46,47,48,49,50,51,52,53,54,55,56,73,85,86,62,63,87,75,76,77,64,74,68,57,58,56,85,86,62,62,63,63,76,77,59,80,71,72,59,60,80,81,71,82,89,90,73,62,63,76,67,90,90,76,77,77,76,76,77,67,52,53,52,53,73,79,79,297,85,86,297,85,86,295,46,47,48,49,50,51,52,53,54,55,89,90,87,76,77,74,74,74,76,77,58,59,60,61,78,79,101,80,81,65,71,82,83,72,89,90,67,70,84,46,47,48,49,50,51,52,53,54,55,56,73,85,86,62,63,87,75,76,77,64,74,68,57,83,72,89,90,62,63,67,90,62,63,76,77,76,62,63,76,83,83,72,89,90,62,63,52,53,52,53,59,84,65,67,68,64,64,89,59,60,61,61,61,61,78,78,78,78,79,101,80,81,65,71,82,83,72,89,90,67,70,84,49,50,51,54,55,73,62,63,87,75,76,77,64,74,68,57,295,46,47,48,49,50,51,52,53,54,55,74,74,73,73,73,73,83,72,72,76,77,76,77,80,81,71,82,89,83,72,72,57,57,87,101,90,63,90,57,102,102,102,102,56,57,57,89,90,62,63,76,77,90,62,63,89,65,67,68,89,89,80,81,71,82,89,84,84,65,68,57,102,102,56,102,102,56,59,60,80,81,71,82,73,64,73,73,73,73,73,73,297,65,67,85,86,68,64,84,84,298,298,298,298,59,60,61,78,79,80,81,71,82,83,72,67,84,46,47,48,49,50,51,52,53,54,55,56,73,85,86,62,63,87,75,76,77,64,74,68,57,58,59,60,61,78,79,101,80,81,65,71,82,83,72,89,90,67,70,84,46,47,48,49,50,51,52,53,54,55,56,73,85,86,62,63,87,75,76,77,64,74,68,57,58,59,60,61,78,79,101,80,81,65,71,82,83,72,89,90,67,70,84,46,47,48,49,50,51,52,53,54,55,56,73,85,86,62,63,87,75,76,77,64,74,68,57,58,59,60,61,78,79,101,80,81,65,71,82,83,72,89,90,67,70,84,46,47,48,49,50,51,52,53,54,55,56,73,85,86,62,63,87,75,76,77,64,74,68,57,65,67,68,59,60,61,61,61,61,78,78,78,78,80,81,71,82,89,75,75,64,62,63,76,76,89,90,70,62,74,0,0,0,0,110,110,0,0,110,110,110,0,299,299,114,110,115,111,113,114,110,115,111,113,110,111,113,110,114,110,115,111,113,114,110,115,111,113,0,114,110,115,0,0,115,113,114,111,113,113,111,113,114,110,115,111,113,114,110,115,111,113,114,110,115,111,113,110,113,113,114,110,115,111,113,111,113,111,113,115,111,113,114,110,111,113,111,113,114,110,115,111,113,114,110,115,111,113,114,110,115,111,113,114,110,115,111,113,300,301,302,300,301,302,303,304,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,305,306,0,307,0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,309,0,0,0,0,0,0,0,310,311,0,0,0,312,0,0,0,0,313,309,314,315,316,117,118,118,118,118,119,120,121,122,123,117,117,120,124,124,300,125,126,124,124,127,127,301,127,302,125,126,120,155,303,130,131,304,125,126,124,124,127,317,317,317,317,317,317,317,317,127,148,125,126,149,152,153,155,314,315,316,119,150,151,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,148,125,126,149,152,153,155,314,315,316,119,150,151,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,155,119,122,123,133,134,127,127,133,120,121,135,136,137,130,131,124,122,133,123,118,138,139,140,128,127,141,117,120,121,135,136,137,130,131,124,122,133,123,118,138,139,140,128,127,141,117,136,137,130,131,138,139,140,128,141,308,127,318,138,139,140,313,125,126,124,127,120,118,128,127,127,317,317,317,317,0,307,135,127,135,127,306,137,131,128,127,308,127,308,127,308,308,136,137,130,131,138,139,140,128,319,127,120,320,127,127,122,123,124,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,127,148,125,126,149,152,153,155,314,315,316,119,150,151,120,121,135,136,136,136,137,137,130,130,131,131,124,122,133,123,134,118,138,139,140,128,127,141,117,121,135,127,141,122,123,133,134,120,141,136,137,130,131,138,139,140,128,124,121,128,135,141,309,314,315,316,148,125,126,149,152,153,155,314,315,316,119,150,151,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,152,153,121,155,130,131,133,133,121,121,134,134,133,121,135,135,121,124,148,149,150,151,309,314,315,316,148,125,126,149,152,153,155,119,150,151,120,121,135,124,122,123,118,128,141,117,124,124,119,152,153,155,136,137,130,131,138,139,140,128,117,117,141,118,309,314,315,316,127,128,145,154,132,127,127,127,120,121,135,136,137,130,131,124,122,133,123,118,138,139,140,128,127,141,117,127,154,127,154,127,154,127,154,127,127,154,127,148,125,126,149,152,153,155,314,315,316,119,150,151,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,148,125,126,149,152,153,155,314,315,316,119,150,151,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,117,148,125,126,149,152,153,155,314,315,316,119,150,151,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,124,312,125,126,120,135,124,127,127,135,127,311,136,137,130,131,128,313,125,126,124,127,313,125,126,124,127,313,313,321,127,120,322,125,125,126,124,127,127,317,317,154,127,124,118,0,0,0,0,0,323,0,0,0,0,0,0,0,0,0,0,0,0,0,323,159,159,159,159,159,159,159,159,160,161,159,159,159,159,161,0,0,324,325,167,168,169,159,160,161,170,171,172,324,325,167,168,169,159,160,161,170,171,172,159,0,167,168,169,159,160,161,170,171,172,167,168,169,159,160,161,170,171,172,167,168,323,323,171,172,159,159,159,160,161,168,159,161,171,160,159,0,0,159,159,159,159,159,159,159,159,161,159,159,159,159,159,0,171,172,159,160,161,0,159,159,159,0,0,0,160,167,168,0,0,0,167,168,169,159,160,161,170,171,172,324,325,167,168,169,159,159,159,159,160,161,170,171,172,159,159,160,161,0,0,170,0,167,159,160,160,161,159,160,160,161,159,324,325,167,168,169,159,160,161,170,171,172,159,167,169,159,167,160,323,324,325,325,171,172,159,159,159,159,0,167,0,0,323,324,325,325,159,161,0,159,0,0,0,0,0,0,159,159,159,159,159,159,159,159,160,161,159,159,159,159,323,324,325,325,159,159,159,167,168,169,160,170,171,172,159,159,161,167,169,159,160,161,169,159,159,0,171,172,0,171,172,171,0,159,160,159,159,159,159,161,159,159,171,159,159,159,160,160,159,159,159,159,159,159,160,159,326,159,159,159,159,159,159,159,159,160,161,159,159,159,159,159,167,168,169,159,160,161,170,171,172,323,324,325,325,171,172,159,159,324,325,167,168,169,159,160,161,170,171,172,324,325,167,168,169,159,160,161,170,171,172,324,325,167,168,169,159,160,161,170,171,172,159,161,159,160,0,0,0,0,327,0,0,327,327,328,0,327,327,327,327,327,327,327,327,327,0,0,0,327,18,0,327,327,327,327,327,327,327,327,327,327,327,327,0,0,0,327,327,0,327,0,327,0,0,327,0,0,329,327,0,330,0,0,327,330,109,180,181,182,184,184,184,184,184,184,188,188,188,188,188,188,189,190,329,329,327,181,182,327,181,182,173,173,173,173,109,109,109,109,109,109,109,109,180,180,181,182,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,189,189,190,173,173,109,109,109,109,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,190,109,327,181,182,327,181,182,327,181,182,327,181,182,327,181,182,331,331,331,331,331,331,331,184,188,184,188,184,188,184,188,184,188,184,188,194,173,166,109,180,181,182,184,188,189,190,194,173,166,109,180,181,182,184,188,189,190,327,181,182,327,181,182,327,181,182,173,166,109,180,181,182,184,188,189,190,173,166,109,180,181,182,184,188,189,190,109,180,181,182,184,188,190,109,109,327,181,182,327,181,182,327,181,182,332,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,332,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,109,173,109,180,181,182,184,188,189,331,190,173,173,173,173,166,166,166,109,109,109,109,109,109,109,109,180,181,182,184,188,188,188,188,188,188,188,188,188,188,188,188,189,190,173,173,109,109,109,109,184,188,188,188,188,188,188,188,188,188,188,188,188,190,327,328,181,182,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,166,166,166,109,333,333,333,333,173,109,180,181,182,184,188,189,190,327,181,182,327,181,182,327,181,182,329,329,327,181,182,173,173,166,109,180,180,181,181,182,182,184,184,188,188,189,189,190,331,331,331,331,331,331,331,327,181,182,334,194,173,173,173,173,173,173,173,173,173,173,173,173,173,166,109,180,180,181,181,182,182,184,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,188,189,189,190,327,181,182,173,180,181,182,184,188,189,328,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,194,329,184,184,184,184,184,184,188,188,188,188,188,188,18,173,166,166,166,173,109,184,188,327,181,182,109,109,189,173,190,334,194,173,166,109,180,181,182,184,188,189,190,173,327,181,182,327,181,182,335,335,335,335,327,181,182,330,184,184,184,184,184,184,188,188,188,188,188,188,327,181,182,178,178,330,184,184,184,184,184,184,188,188,188,188,188,188,327,181,182,327,181,182,162,162,180,189,329,329,332,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,327,181,182,327,181,182,327,181,182,327,181,182,327,181,182,327,181,182,335,180,181,182,184,188,190,327,181,182,335,180,181,182,184,188,190,0,18,18,334,18,18,18,18,18,18,18,18,329,329,0,173,173,173,173,109,109,109,109,109,109,109,109,180,180,181,182,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,189,189,190,327,181,182,173,173,109,109,109,109,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,190,173,173,109,109,180,181,182,184,184,184,184,184,184,188,188,188,188,188,188,189,190,173,166,166,166,109,190,173,190,109,184,188,190,178,173,109,181,182,184,188,190,109,180,181,182,184,188,189,190,109,328,173,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,327,181,182,327,181,182,109,173,173,109,109,109,327,181,182,166,166,166,181,182,184,188,188,188,188,188,188,188,188,188,188,188,188,184,188,188,188,188,188,188,188,188,188,188,188,188,327,328,181,182,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,332,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,332,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,332,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,327,181,182,173,109,184,188,335,335,335,335,173,173,178,178,162,162,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,329,184,184,184,184,184,184,188,188,188,188,188,188,327,330,181,182,184,184,184,184,184,184,188,188,188,188,188,188,327,181,182,327,181,182,327,181,182,327,173,180,181,182,189,173,333,333,333,333,331,173,173,173,173,109,109,109,109,109,109,109,109,180,181,182,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,189,190,173,173,109,109,109,109,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,190,173,173,109,109,327,181,182,327,181,182,327,181,182,327,181,182,173,166,109,180,181,182,184,188,189,190,327,181,182,333,333,333,333,333,333,333,333,173,180,181,182,184,188,189,327,181,182,332,184,184,184,184,184,184,184,184,184,184,184,184,188,188,188,188,188,188,188,188,188,188,188,188,109,327,181,182,194,173,166,109,180,181,182,184,188,189,190,194,173,166,109,180,181,182,184,188,189,190,194,173,166,109,180,181,182,184,188,189,190,109,330,184,184,184,184,184,184,188,188,188,188,188,188,194,194,162,173,109,181,182,184,188,190,0,0,0,0,0,0,0,0,0,0,0,0,336,337,338,339,340,341,336,337,338,339,340,341,0,0,336,336,336,336,336,336,336,336,336,336,336,336,336,337,337,337,337,337,337,337,337,337,338,338,338,338,338,338,338,338,338,339,339,339,339,339,339,339,339,339,340,340,340,340,340,340,340,340,340,341,341,341,341,341,341,341,336,337,338,339,340,341,336,336,336,336,336,336,336,336,336,336,336,336,336,337,337,337,337,337,337,337,337,337,338,338,338,338,338,338,338,338,338,339,339,339,339,339,339,339,339,339,340,340,340,340,340,340,340,340,340,341,341,341,341,341,341,341,336,337,338,339,340,341,336,337,338,339,340,341,336,336,336,336,336,336,336,336,336,336,336,336,337,337,337,337,337,337,337,337,338,338,338,338,338,338,338,338,339,339,339,339,339,339,339,339,340,340,340,340,340,340,340,340,341,341,341,341,341,341,336,337,338,339,340,341,336,337,338,339,340,341,336,337,338,339,340,341,336,337,338,339,340,341,336,336,337,338,339,340,341,336,337,338,339,340,341,342,343,340,341,336,337,338,339,340,341,336,337,338,339,340,341,336,337,338,339,340,341,0,0,0,0,0,0,0,0,0,344,345,346,347,344,345,346,347,344,345,346,347,348,344,345,346,347,344,345,346,347,344,345,346,347,348,344,345,346,347,348,344,345,346,347,348,344,345,346,347,348,348,344,345,346,347,348,348,344,345,346,347,344,345,346,347,344,345,346,347,0,0,0,0,0,202,203,204,202,203,204,207,349,207,207,202,203,204,202,203,204,349,202,203,204,202,203,204,202,203,204,207,349,202,0,202,202,207,0,207,207,207,207,207,207,202,203,204,0,202,207,202,203,204,202,203,204,202,203,204,202,203,204,349,349,349,349,349,0,0,0,0,0,212,213,214,215,216,212,213,214,215,216,212,213,214,215,216,212,213,214,215,216,213,214,213,214,212,213,214,215,216,212,213,214,215,216,213,215,216,212,213,214,215,216,215,212,213,214,215,216,213,214,216,212,212,213,214,215,216,212,213,214,215,216,212,213,214,215,216,212,213,214,215,216,0,0,0,0,0,0,0,0,0,0,0,0,0,230,0,0,147,350,351,0,0,0,0,0,230,0,0,0,0,0,0,352,0,0,0,353,206,230,218,219,232,220,221,222,223,224,225,226,227,228,229,217,206,230,218,219,232,220,221,222,223,224,225,226,227,228,229,217,354,354,218,219,220,221,222,223,224,225,226,227,228,229,217,218,219,220,221,222,223,224,225,226,227,228,229,217,218,220,221,217,230,218,219,217,355,355,355,230,218,220,221,217,230,218,219,232,220,221,222,223,224,225,226,227,228,229,217,206,230,218,219,232,220,221,222,223,224,225,226,227,228,229,217,356,356,356,356,219,219,219,352,352,351,220,221,217,206,230,218,219,232,220,221,222,223,224,225,226,227,228,229,217,206,232,230,230,230,230,357,352,230,230,354,352,352,350,222,223,224,226,227,229,229,230,219,221,227,229,206,232,230,218,220,221,217,231,219,220,221,230,219,231,231,219,219,0,0,0,0,0,147,225,228,0,0,355,355,355,352,352,230,230,230,230,219,230,230,219,230,230,356,356,356,218,219,220,221,222,223,224,225,226,227,228,229,217,356,206,230,218,219,232,220,221,222,223,224,225,226,227,228,229,217,206,230,218,219,232,220,221,222,223,224,225,226,227,228,229,217,206,230,218,219,232,220,221,222,223,224,225,226,227,228,229,217,0,230,352,352,0,0,0,0,0,0,0,0,0,158,0,0,0,0,0,0,158,243,244,245,246,234,235,236,238,358,239,242,240,158,241,243,244,245,246,234,235,236,238,358,239,242,240,158,241,234,235,236,238,239,240,158,234,235,236,238,239,240,158,241,237,358,240,234,240,158,234,235,236,238,239,240,158,241,243,244,245,246,234,235,236,238,358,239,242,240,158,241,236,158,241,241,0,243,244,245,246,234,235,236,238,358,239,242,240,158,241,238,242,234,235,236,234,235,236,242,240,241,239,234,242,235,235,235,236,242,242,243,244,245,246,236,237,358,235,235,235,241,234,235,236,238,239,240,158,243,244,245,246,234,235,236,238,358,239,242,240,158,241,243,244,245,246,234,235,236,238,358,239,242,240,158,241,243,244,245,246,234,235,236,238,358,239,242,240,158,241,242,235,236,242,237,358,241],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[[2,[3]]],[[2,[3]]]],[[[4,[3]]],[[4,[3]]]],[[]],[[]],0,[[]],[[]],[[[2,[5]],6],7],[[[4,[5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[12,13,13]],[[]],[[14,15],[[1,[[16,[15]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[],17],[[17,9],[[17,[9]]]],[[[19,[18]]],9],[20,20],[21,21],[22,22],[[[19,[[0,[3,18]]]]],[[19,[[0,[3,18]]]]]],[12,12],[[[23,[3,3]]],[[23,[3,3]]]],[[[24,[3,3]]],[[24,[3,3]]]],[25,25],[26,26],[14,14],[27,27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[20,9],22],[[16,16],16],[[16,16],16],[[28,16,16],16],[[29,16,16],16],[[],20],[[],12],[[],14],[[20,9],30],[[20,20],8],[25,15],[26,13],[27,13],0,[[14,15],[[1,[15]]]],[31,1],[9,[[16,[9]]]],[[32,6],7],[[20,6],7],[[21,6],7],[[22,6],7],[[[19,[[0,[5,18]]]],6],7],[[12,6],7],[[[23,[5,5]],6],7],[[[24,[5,5]],6],7],[[25,6],7],[[26,6],7],[[[17,[5]],6],7],[[14,6],7],[[27,6],7],[[33,9,9]],[[]],[[]],[9],[9],[9],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[18]]]],[34,14],0,[[17,9]],[[]],0,[9],[[14,15],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],8],[[9,9],8],[[[19,[18]],9],8],[[]],[[]],[[]],[9],[9],[[]],[[]],[28],[29],0,[[],35],[[],36],[[],37],[9,32],[[],12],[[],23],[[],25],[[],26],[9,38],[[],14],[[],27],[[],28],[[],29],[21,1],[22,1],[9,8],[[]],[36],[38,13],[[],8],[[]],[36],[[]],[[]],[[]],[35],[37],[[20,9],30],[9,16],[31,9],[9,8],[[],8],[23],[[12,13],13],[[14,15]],[9],[31,1],[31,9],[[],16],[[],8],[[],8],[9,[[16,[9]]]],[32,[[1,[9]]]],[23,24],[24],[23,24],[[9,9],33],[[9,9],33],[9,21],[31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[33,9,9]],[[]],[[]],[[]],[[]],[28],[29],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,39],[40,40],[41,41],[42,42],[43,43],[[[44,[3]]],[[44,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],41],[[],44],0,0,0,[39],[40],[41],[[44,34]],[39],[40],[39],[40],[39],[[39,6],7],[[40,6],7],[[41,6],7],[[42,6],7],[[43,6],7],[[[44,[5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[39,9],[[1,[13]]]],[[40,9],[[1,[13]]]],[[39,13,9]],[[40,9,13]],[[41,13,13]],[44],[[39,13,9]],[[40,9,13]],[[39,13,9,9]],[[40,9,13,9]],[[39,13,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[43,9],[[1,[[16,[9]]]]]],[[],9],[[9,9,45],9],[[9,9,45],9],[[],9],[44,9],[39,9],[9,39],[9,40],[[],41],[[],42],[[],43],[[],44],[39,[[1,[13]]]],[[40,13],[[1,[9]]]],[[41,13],13],[[42,13],13],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[46,8],[47,8],[48,8],[49,8],[50,8],[51,8],[52,8],[53,8],[54,8],[55,8],[9,8],[[56,9],8],[[57,9],9],[[58,9]],[[59,9]],[[60,9,9]],[[[61,[[61,[[61,[0]]]]]]]],[[[61,[[61,[0]]]]]],[[[61,[0]]]],[[[61,[[61,[[61,[[61,[0]]]]]]]]]],[[59,9]],[[60,9,9]],[62],[63],[[64,13]],[[64,13]],[[62,9]],[[63,9]],[[64,13]],[[64,13]],[[[65,[45]]],[[66,[9,[16,[9]]]]]],[67,[[66,[9,[16,[9]]]]]],[68,[[66,[9,[16,[9]]]]]],[[],69],[70,69],[[62,62]],[71],0,[72,1],[[],9],[56,9],[[73,73]],[[73,73]],[[73,73]],[[73,73]],[[73,73]],[[73,73]],[[73,73]],[[73,73]],[[73,73]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[74],[75],[62],[63],[76],[77],[64],[64],[59,59],[60,60],[61,61],[78,78],[79,79],[80,80],[81,81],[71,71],[82,82],[83,83],[72,72],[67,67],[84,84],[[[46,[3,3]]],[[46,[3,3]]]],[[[47,[3,3]]],[[47,[3,3]]]],[[[48,[3,3]]],[[48,[3,3]]]],[[[49,[3,3]]],[[49,[3,3]]]],[[[50,[3]]],[[50,[3]]]],[[[51,[3,3]]],[[51,[3,3]]]],[[[52,[3]]],[[52,[3]]]],[[[53,[3]]],[[53,[3]]]],[54,54],[[[55,[3]]],[[55,[3]]]],[56,56],[73,73],[[[85,[3]]],[[85,[3]]]],[[[86,[3]]],[[86,[3]]]],[[[62,[3]]],[[62,[3]]]],[[[63,[3]]],[[63,[3]]]],[[[87,[3]]],[[87,[3]]]],[75,75],[[[76,[3,3]]],[[76,[3,3]]]],[[[77,[3]]],[[77,[3]]]],[64,64],[74,74],[68,68],[57,57],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[73,73],88],[77,8],[76,8],[73,15],[73,15],0,[69],[[70,69]],[[],61],[[],78],[[],83],[[],72],[[],89],[[],90],[[],70],[[],54],[[],55],[[],73],[[],62],[[],63],[[],87],[[],76],[[],77],[[],64],[[],84],[[],84],0,[62,[[91,[9]]]],[76],[77],[89],[90],[70],[74,16],[[73,73],8],[[62,34]],[[62,34]],[[63,34]],[[63,34]],[[76,34]],[[77,34]],[[[65,[45]],9],9],[[67,9],9],[74,[[10,[9,9]]]],[[68,9],9],[[74,9],[[10,[9,9]]]],[[[65,[45]],9],[[92,[0]]]],[[[65,[45]],9],[[93,[0]]]],[[58,6],7],[[59,6],7],[[60,6],7],[[61,6],7],[[78,6],7],[[79,6],7],[[80,6],7],[[81,6],7],[[71,6],7],[[82,6],7],[[83,6],7],[[72,6],7],[[89,6],7],[[90,6],7],[[67,6],7],[[[70,[5]],6],7],[[84,6],7],[[[46,[5,5]],6],7],[[[47,[5,5]],6],7],[[[48,[5,5]],6],7],[[[49,[5,5]],6],7],[[[50,[5]],6],7],[[[51,[5,5]],6],7],[[[52,[5]],6],7],[[[53,[5]],6],7],[[54,6],7],[[[55,[5]],6],7],[[56,6],7],[[73,6],7],[[[85,[5]],6],7],[[86,6],7],[[62,6],7],[[63,6],7],[[[87,[5]],6],7],[[75,6],7],[[[76,[5,5]],6],7],[[[77,[5]],6],7],[[64,6],7],[[74,6],7],[[68,6],7],[[57,6],7],[[58,9,9]],[[[59,[94]],9,9]],[[60,9,9,9,9]],[[[78,[[78,[[78,[[78,[0]]]]]]]]]],[[[78,[[78,[[78,[0]]]]]]]],[[[78,[[78,[0]]]]]],[[[78,[0]]]],[[79,9,9]],[[80,9,9]],[[81,9,9]],[71],[82],[89],[84],[80],[81],[71],[82],[83],[72],[[79,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],58],[34,56],[[],85],[[],86],[34,62],[34,62],[34,63],[34,63],[34,76],[34,77],[[],59],[16,80],[16,71],[72,1],[[[59,[94]],9]],[[60,9,9]],[[80,9]],[[81,9]],[[71,9]],[[82,9]],[[89,9],1],[90,1],[[73,9],8],[62,9],[63,9],[76,1],[[67,9,9],1],[90,1],[[90,9],1],[76,1],[77,1],[77,1],[76,1],[76,1],[77,1],[[67,9]],[[],52],[[],53],[[],52],[[],53],[73],[79,9],[[79,9]],[[],[[1,[9]]]],[85,[[1,[9]]]],[86,[[1,[9]]]],[[],9],[85,9],[86,9],[[]],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[[89,9]],[90,1],[87],[76],[77],[74,[[16,[9]]]],[[74,9],[[16,[9]]]],[[74,9,9],9],[76],[77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[83,8],[72,8],[89,8],[90,8],[62,8],[63,8],[[67,9,9],8],0,[62,[[95,[9]]]],[63,[[96,[9]]]],[76,96],[77,97],[76,98],[62,[[99,[9]]]],[63,[[97,[9]]]],[76,97],[83,1],[83,9],[72,9],[89,9],[90,9],[62,9],[63,9],[[],52],[[],53],[[],52],[[],53],[[[59,[100]]],9],[84,66],[[[65,[45]],9],[[16,[9]]]],[[67,9],[[16,[9]]]],[[68,9],[[16,[9]]]],[64],[64,13],[[89,9]],[9,59],[[9,9],60],[[],[[61,[[61,[[61,[[61,[0]]]]]]]]]],[[],[[61,[[61,[[61,[0]]]]]]]],[[],[[61,[[61,[0]]]]]],[[],[[61,[0]]]],[[],[[78,[0]]]],[[],[[78,[[78,[[78,[0]]]]]]]],[[],[[78,[[78,[0]]]]]],[[],[[78,[[78,[[78,[[78,[0]]]]]]]]]],[16,79],[[],101],[9,80],[9,81],[[9,45,45],[[65,[45]]]],[9,71],[9,82],[[],83],[[],72],[[],89],[[],90],[9,67],[[],70],[[],84],[[],49],[[],50],[[],51],[[],54],[[],55],[9,73],[[],62],[[],63],[[],87],[9,75],[[],76],[[],77],[[],64],[9,74],[9,68],[[[16,[[0,[3,102]]]],9],57],[[],1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[53,1],[54,1],[55,1],[[74,9,9],[[1,[9]]]],[74,9],[73],[73],[9,73],[[73,73],[[1,[88]]]],[83,1],[72,1],[72,1],[76,1],[77,1],[76,1],[77,1],[[80,9,9],[[1,[9]]]],[[81,9,9],[[1,[9]]]],[71,[[1,[9]]]],[82,[[1,[9]]]],[89,[[1,[9]]]],[83],[72],[72],[[57,[103,[9]],9],9],[[57,[103,[9]],9],9],[87,1],[[101,103,103],16],0,[63,[[104,[9]]]],0,[[57,9,[103,[9]]],9],[9,9],[9,9],[9,9],[9,9],[[56,9],9],[[57,9,[103,[9]]],9],[[57,[103,[9]],[103,[9]]],9],[[89,9],1],[90,1],[62,8],[63,8],[76],[77],[[90,9],1],[[62,9],9],[[63,9],9],[89],[[[65,[45]]],[[16,[9]]]],[67,[[16,[9]]]],[68,[[16,[9]]]],[[89,9]],[[89,9]],[[80,9,9],[[1,[9]]]],[[81,9,9],[[1,[9]]]],[71,[[1,[9]]]],[82,[[1,[9]]]],[89,[[1,[9]]]],[[84,9]],[[84,9]],[[[65,[45]],9,9],8],[[68,9,9],8],[[57,9,9],[[1,[9]]]],[9,[[1,[9]]]],[9,[[1,[9]]]],[[56,9],[[1,[9]]]],[9,[[1,[9]]]],[9,[[1,[9]]]],[[56,9],[[1,[9]]]],[[[59,[94]],9]],[[60,9,9]],[[80,9]],[[81,9]],[[71,9]],[[82,9]],[[73,9,8]],[[64,13]],[[73,9]],[[73,9]],[[73,9]],[[73,9]],[[73,9]],[[73,9]],[[],9],[[[65,[45]],9],9],[[67,9],9],[85,9],[86,9],[[68,9],9],[[64,13,13]],[84],[84],[[],16],[9,16],[[],16],[9,16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[65,[45]],9,9],8],[[67,9,9],8],[[68,9,9],8],[[59,9]],[[60,9,9]],[[[61,[[61,[[61,[0]]]]]]]],[[[61,[[61,[0]]]]]],[[[61,[0]]]],[[[61,[[61,[[61,[[61,[0]]]]]]]]]],[[[78,[[78,[[78,[0]]]]]]]],[[[78,[0]]]],[[[78,[[78,[[78,[[78,[0]]]]]]]]]],[[[78,[[78,[0]]]]]],[[80,9,9]],[[81,9,9]],[[71,9]],[[82,9]],[89],[[75,9,9,13,13]],[[75,105,9,13,13]],[[13,9],64],[62,[[106,[9]]]],[63,[[107,[9]]]],[76,107],[76,108],[9,89],[9,90],[9,70],[9,62],[[9,9],74],0,0,0,0,0,0,0,0,0,0,0,0,[[],88],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[109,109,109],110],[[111,112],110],[[113,112],110],[[109,109,109],110],[114,114],[110,110],[115,115],[111,111],[113,113],[[]],[[]],[[]],[[]],[[]],[[[16,[112]]],116],[[114,114],88],[[110,110],88],[[115,112],8],[[[16,[112]]],116],[[[16,[112]]],[[16,[112]]]],[[115,115],1],[[113,113],[[1,[112]]]],[[],114],[111,112],[113,112],[[113,113],116],[[111,112],116],[[113,112],116],[[114,114],8],[[110,110],8],[[115,115],8],[[111,111],8],[[113,113],8],[[114,6],7],[[110,6],7],[[115,6],7],[[111,6],7],[[113,6],7],[[]],[[]],[[]],[[]],[[]],[110],[[113,113],8],[[113,112],8],[[]],[[]],[[]],[[]],[[]],[[111,111],8],[[113,113],8],[[111,111],8],[[113,113],8],[[112,116],115],[[112,112],111],[[112,112],113],[[114,114],[[1,[88]]]],[[110,110],[[1,[88]]]],[[111,112],112],[[113,112],112],[[111,112],112],[[113,112],112],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[117,9,8,9,8]],[[118,9,9,13]],[[118,9,9]],[[118,9,9,9,9,15]],[[118,9,9,9,9,15]],[[119,9,9]],[[120,9,9]],[[121,9,9]],[[122,9,9,15]],[[123,9,9,15,13]],[[117,9,9]],[[117,9,9]],[[120,9,9]],[[[124,[0]]],[[0,[0]]]],[[[124,[0]]],[[0,[0]]]],[[]],[125],[126],[[[124,[0]]]],[[[124,[0]]]],[127],[[127,9],[[129,[128]]]],[[]],[127],[[]],[125],[126],[[120,9],16],0,[[]],[130],[131],[[]],[125],[126],[[[124,[0]]]],[[[124,[0]]]],[127],[8,1],[8,1],[8,1],[8,1],[[]],[[]],[[]],[[]],[[127,9],[[16,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[119],[[122,132],133],[[123,132],134],[[9,9],122],[[9,9],123],[9,119],[[9,9],119],[[133,9,15,15]],[120,120],[121,121],[135,135],[[[136,[3]]],[[136,[3]]]],[[[137,[3,3]]],[[137,[3,3]]]],[[[130,[3,3]]],[[130,[3,3]]]],[[[131,[3,3,3]]],[[131,[3,3,3]]]],[[[124,[3]]],[[124,[3]]]],[122,122],[133,133],[123,123],[118,118],[138,138],[139,139],[140,140],[128,128],[[[127,[3]]],[[127,[3]]]],[141,141],[117,117],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[136,[142]],136],88],[[[137,[142,142]],137],88],[[[130,[142,142]],130],88],[[[131,[142,142,142]],131],88],[[138,138],88],[[139,139],88],[[140,140],88],[[128,128],88],[141,[[16,[[16,[9]]]]]],[[]],[127],[[9,16],127],[[9,16],[[127,[138]]]],[[9,16],[[127,[139]]]],[[9,16],[[127,[140]]]],[[]],[125],[126],[124],[127],[[],120],[[],118],[[],128],[[127,9],[[16,[9]]]],[[127,9],[[16,[8]]]],[[]],[[]],[[]],[[]],[[9,9],16],[[]],[135,129],0,[135,9],[127,9],[[]],[137],[131],[128],0,[[]],[127],[[]],[127],[[]],[[]],[[[136,[143]],136],8],[[[137,[143,143]],137],8],[[[130,[143,143]],130],8],[[[131,[143,143,143]],131],8],[[138,138],8],[[139,139],8],[[140,140],8],[[128,128],8],[[],9],[127,9],0,[[]],[[127,16]],[127],[[122,34]],[[123,34]],[124,9],[[120,6],7],[[121,6],7],[[135,6],7],[[[136,[5]],6],7],[[[137,[5,5]],6],7],[[[130,[5,5]],6],7],[[[131,[5,5,5]],6],7],[[[124,[5]],6],7],[[122,6],7],[[133,6],7],[[123,6],7],[[134,6],7],[[118,6],7],[[138,6],7],[[139,6],7],[[140,6],7],[[128,6],7],[[[127,[5]],6],7],[[141,6],7],[[117,6],7],[127],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],136],[144],[[],137],[[]],[[],130],[[]],[[]],[[],131],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],121],[[9,16],135],[[9,16],127],[141,145],[122,132],[123,132],[[133,9],15],[[134,9],15],0,[141,8],[[[136,[146]]]],[[[137,[146,146]]]],[[[130,[146,146]]]],[[[131,[146,146,146]]]],[138],[139],[140],[128],0,[121],0,[[135,9]],[[141,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[121],0,[130,130],[131,131],[[133,9,9],15],[[133,9,9,15],15],[121],[121,16],[[134,9,9]],[[134,9,9,15]],[[133,9],[[16,[8]]]],[121,16],[[135,9],1],[[135,45],[[16,[8]]]],[121],[124,1],[[[148,[147,147]]],1],[[[149,[147,147]]],1],[150,1],[151,1],[[]],[[]],[[]],[[]],[[9,9,8],[[148,[147,147]]]],[9,125],[[],126],[[9,9],[[149,[147,147]]]],[[],152],[[],153],[154,155],[9,119],[[9,9],150],[9,151],[9,120],[[9,9],121],[9,135],[[9,9],124],[[9,9],122],[[9,9],123],[[9,9],118],[[9,9],128],[145,141],[9,117],[[9,9],[[124,[0]]]],[[9,9],[[124,[0]]]],[[9,9],119],[152,1],[153,1],0,[[[136,[156]],136],[[1,[88]]]],[[[137,[156,156]],137],[[1,[88]]]],[[[130,[156,156]],130],[[1,[88]]]],[[[131,[156,156,156]],131],[[1,[88]]]],[[138,138],[[1,[88]]]],[[139,139],[[1,[88]]]],[[140,140],[[1,[88]]]],[[128,128],[[1,[88]]]],[[117,9]],[[117,9]],[141,9],[118],[[]],[[]],[[]],[[]],0,0,[145,157],[154,157],[132,157],[[[127,[140]]],157],[[[127,[138]]],157],[[[127,[139]]],157],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[127,[[16,[9]]]],[154,158],[[[127,[139]]],158],[[154,9],[[16,[15]]]],[[[127,[139]],9],[[16,[15]]]],[[154,9]],[[[127,[139]],9]],[[154,9]],[[[127,[139]],9]],[[127,9]],[[154,9],[[16,[15]]]],[[[127,[139]],9],[[16,[15]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[117,[[1,[[16,[8]]]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[124,9]],[[]],[125],[126],[120,[[103,[9]]]],[135,[[103,[9]]]],[124],[127],[127,[[103,[9]]]],[135,9],[127,9],[[]],[136],[137],[130],[131],[128],[[]],[125],[126],[124],[127],[[]],[125],[126],[124],[127],[[]],[[]],[[],9],[127,9],0,[[]],[125],[[125,16]],[126],[[124,16]],[127],[[127,16]],[[]],[[]],[[154,9,45],16],[[[127,[139]],9,45],16],0,[[[16,[9]]],118],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[159],[[159,159]],[[159,159]],[[159,159]],[159],[[159,159]],[159],[159],[[160,160]],[[161,161]],[159],[159],[[159,159]],[[159,159]],[[[161,[[0,[3,162,163,164]]]],[0,[3,162,163,164]]],[[0,[3,162,163,164]]]],[[],16],[[[0,[3,165]],9,[0,[3,165]]],[[0,[3,165]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[159,159,9]],[[15,15,166],8],[167,167],[168,168],[169,169],[159,159],[[[160,[3]]],[[160,[3]]]],[[[161,[3]]],[[161,[3]]]],[170,170],[171,171],[172,172],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[167,9,9],173],[[168,9,9],173],[[]],[[]],[[171,15],15],[[172,174],174],[[159,9],159],[[159,9],159],0,0,0,[[],168],[[],[[159,[175,175]]]],[[],[[161,[175]]]],[[],171],[160],[159,159],[[15,15,15],[[1,[15]]]],[[15,15,15],[[1,[15]]]],[159],[159],[[159,159]],[[159,159]],[[159,159]],[159],[[159,159]],[159],[[161,161]],[[159,159]],[159],[159],[[159,159]],[[159,159]],[15,[[16,[15]]]],[[171,15],[[16,[15]]]],[[172,174],[[16,[174]]]],[[159,159],8],[[[160,[143]],160],8],[[[161,[143]],161],8],[9,9],[159],[159,159],[[159,9],159],[[13,13]],[[13,13]],[[13,13]],[[],160],0,[[168,9]],[[15,15,15,15],15],[[13,13,13,13,15],13],[[13,13,13,13,15,[103,[13]]],13],[[167,6],7],[[168,6],7],[[169,6],7],[[[159,[5,5]],6],7],[[[160,[5]],6],7],[[[161,[5]],6],7],[[170,6],7],[[171,6],7],[[172,6],7],[[]],[[]],[[]],[[]],[[]],[144],[[]],[[],159],[16,159],[[]],[[]],[[]],[[]],[[]],[34,159],[16,159],[[[16,[16]]],160],[16,161],[[15,15],15],[[15,15],15],[[170,9],9],[176,16],[[167,9,9],173],[[159,9]],[[160,9]],[160],[[161,9]],[[159,9]],[160],[[160,9]],[[161,9]],[159,159],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[159],[[167,9],173],[169,173],[[159,9],159],0,[160,[[1,[160]]]],[9],[9],[9],[9],[[171,15],8],[[172,174],8],[159,129],[159,177],[[16,9]],[[159,16,9]],[173,173],[[167,9,173],173],[[],[[16,[173]]]],[[15,15],15],[[],9],[[],9],[[],9],[[],9],[159,9],[161,9],[[],1],[[159,9],159],[15,8],[[15,166],8],[[15,15],15],[[15,15],15],[[15,15],15],[9,[[66,[9,13]]]],[[159,159]],[[159,159]],[[159,159]],[[159,159]],[159],[159],[159],[159],[[160,160]],[[161,161]],[[159,159]],[159],[159],[[159,159]],[[]],[[]],[[]],[[]],[159,16],[159],[159],[9,167],[[],168],[173,169],[3,[[160,[3]]]],[9,170],[15,171],[174,172],[159,159],[[],159],[[],[[161,[[0,[162,178]]]]]],[[167,9,9],173],[[169,9],173],[[159,9,9],159],[[160,9],160],[[[161,[[0,[179,162,178,163,164]]]],9],[[161,[[0,[179,162,178,163,164]]]]]],[[169,105],173],[[159,9],159],[[159,9],159],[15,16],[[171,15],16],[[172,174],16],[15,[[16,[15]]]],[171],[172,30],[[171,15]],[15,15],[9,159],[160,9],[[159,159]],[[159,159]],[[159,159]],[[159,159]],[[161,161]],[[159,159]],[[159,159]],[[171,15]],[[159,9]],[[159,9],159],[159,159],[[160,8]],0,[[159,9]],[[159,9]],[[159,9]],[[159,9]],[[159,9]],[[159,9]],[160,[[1,[16]]]],[[159,9],[[1,[159]]]],[[],1],[159],[159],[[159,159]],[159],[[159,159]],[159],[[159,159]],[[159,159]],[[160,160]],[[161,161]],[159],[[159,159]],[159],[[159,159]],[[[159,[173]],173,167],[[159,[173]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[9],[9],0,[[172,174]],[159],[[159,9]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],159],[[],161],[9,159],[[],160],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[109,[116]]],116],[180,180],[181,181],[182,182],[[[184,[183]]],[[184,[183]]]],[[[184,[185]]],[[184,[185]]]],[[[184,[13]]],[[184,[13]]]],[[[184,[186]]],[[184,[186]]]],[[[184,[105]]],[[184,[105]]]],[[[184,[187]]],[[184,[187]]]],[[[188,[105]]],[[188,[105]]]],[[[188,[185]]],[[188,[185]]]],[[[188,[13]]],[[188,[13]]]],[[[188,[186]]],[[188,[186]]]],[[[188,[187]]],[[188,[187]]]],[[[188,[183]]],[[188,[183]]]],[189,189],[190,190],[[]],[[]],[[]],[181,181],[182,182],[[]],[181,181],[182,182],[[173,173]],[[173,173]],[[173,173]],[[173,173]],[109],[109],[109],[[109,109]],[[109,109]],[[109,109]],[109],[[109,109]],[[180,116]],[[180,180]],[[181,181]],[[182,182]],[[[184,[183]],[184,[183]]]],[[[184,[15]],[184,[15]]]],[[[184,[176]],[184,[176]]]],[[[184,[174]],[184,[174]]]],[[[184,[13]],[184,[13]]]],[[[184,[9]],[184,[9]]]],[[[184,[191]],[184,[191]]]],[[[184,[192]],[184,[192]]]],[[[184,[187]],[184,[187]]]],[[[184,[186]],[184,[186]]]],[[[184,[105]],[184,[105]]]],[[[184,[185]],[184,[185]]]],[[[188,[15]],[188,[15]]]],[[[188,[176]],[188,[176]]]],[[[188,[187]],[188,[187]]]],[[[188,[185]],[188,[185]]]],[[[188,[183]],[188,[183]]]],[[[188,[105]],[188,[105]]]],[[[188,[186]],[188,[186]]]],[[[188,[191]],[188,[191]]]],[[[188,[174]],[188,[174]]]],[[[188,[13]],[188,[13]]]],[[[188,[192]],[188,[192]]]],[[[188,[9]],[188,[9]]]],[[189,189]],[[189,116]],[[190,190]],[[173,173]],[[173,173]],[109],[[109,109]],[109],[[109,109]],[[[184,[183]],[184,[183]]]],[[[184,[185]],[184,[185]]]],[[[184,[174]],[184,[174]]]],[[[184,[186]],[184,[186]]]],[[[184,[105]],[184,[105]]]],[[[184,[191]],[184,[191]]]],[[[184,[15]],[184,[15]]]],[[[184,[13]],[184,[13]]]],[[[184,[187]],[184,[187]]]],[[[184,[176]],[184,[176]]]],[[[184,[9]],[184,[9]]]],[[[184,[192]],[184,[192]]]],[[[188,[192]],[188,[192]]]],[[[188,[105]],[188,[105]]]],[[[188,[174]],[188,[174]]]],[[[188,[186]],[188,[186]]]],[[[188,[176]],[188,[176]]]],[[[188,[185]],[188,[185]]]],[[[188,[9]],[188,[9]]]],[[[188,[187]],[188,[187]]]],[[[188,[183]],[188,[183]]]],[[[188,[15]],[188,[15]]]],[[[188,[191]],[188,[191]]]],[[[188,[13]],[188,[13]]]],[[190,190]],[[[109,[116]]],116],[[]],[181,181],[182,182],[[]],[181,181],[182,182],[[]],[181,181],[182,182],[[]],[[181,181],181],[[182,182],182],[[]],[181,181],[182,182],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[184,184]],[[188,188]],[[184,184]],[[188,188]],[[184,184]],[[188,188]],[[184,184]],[[188,188]],[[184,184]],[[188,188]],[[184,184]],[[188,188]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[181,181],[182,182],[[]],[181,181],[182,182],[[],193],[181,193],[182,193],[173,173],[[[166,[3]]],[[166,[3]]]],[[[109,[3]]],[[109,[3]]]],[180,180],[181,181],[182,182],[[[184,[3]]],[[184,[3]]]],[[[188,[3]]],[[188,[3]]]],[189,189],[190,190],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[109,[142]],109],88],[[180,180],88],[[181,181],88],[[182,182],88],[[[184,[142]],184],88],[[[188,[142]],188],88],[[190,190],88],[[109,109],88],[109,109],[[]],[[181,181],181],[[182,182],182],[[]],[181,181],[182,182],[[]],[181,181],[182,182],[[]],[[[184,[191]]],174],[[[184,[105]]],174],[[[184,[186]]],174],[[[184,[187]]],174],[[[184,[183]]],174],[[[184,[174]]],174],[[[184,[15]]],174],[[[184,[9]]],174],[[[184,[185]]],174],[[[184,[13]]],174],[[[184,[192]]],174],[[[184,[176]]],174],[[[188,[176]]],174],[[[188,[186]]],174],[[[188,[187]]],174],[[[188,[192]]],174],[[[188,[185]]],174],[[[188,[183]]],174],[[[188,[13]]],174],[[[188,[191]]],174],[[[188,[174]]],174],[[[188,[15]]],174],[[[188,[105]]],174],[[[188,[9]]],174],[[]],[[[184,[174]]],174],[[[184,[191]]],174],[[[184,[192]]],174],[[[184,[176]]],174],[[[184,[185]]],174],[[[184,[9]]],174],[[[184,[13]]],174],[[[184,[186]]],174],[[[184,[187]]],174],[[[184,[183]]],174],[[[184,[15]]],174],[[[184,[105]]],174],[[[188,[185]]],174],[[[188,[15]]],174],[[[188,[176]]],174],[[[188,[187]]],174],[[[188,[105]]],174],[[[188,[174]]],174],[[[188,[192]]],174],[[[188,[13]]],174],[[[188,[9]]],174],[[[188,[191]]],174],[[[188,[183]]],174],[[[188,[186]]],174],[[109,109]],[[],173],[[],[[109,[175]]]],[[],180],[[],181],[[],182],[[],[[184,[175]]]],[[],[[188,[175]]]],[[],189],[[]],0,[[173,173]],[[173,173]],[[173,173]],[[173,173]],[[[166,[15]],15],15],[[[166,[176]],176],176],[[[166,[174]],174],174],[109],[109],[109],[[109,109]],[[109,109]],[109],[[109,109]],[[109,109]],[[180,180]],[[181,181]],[[182,182]],[[184,184]],[[[188,[174]],[188,[174]]]],[[[188,[185]],[188,[185]]]],[[[188,[176]],[188,[176]]]],[[[188,[9]],[188,[9]]]],[[[188,[105]],[188,[105]]]],[[[188,[186]],[188,[186]]]],[[[188,[192]],[188,[192]]]],[[[188,[187]],[188,[187]]]],[[[188,[13]],[188,[13]]]],[[[188,[191]],[188,[191]]]],[[[188,[15]],[188,[15]]]],[[[188,[183]],[188,[183]]]],[[189,189]],[[190,190]],[[173,173]],[[173,173]],[[109,109]],[[109,109]],[109],[109],[[184,184]],[[[188,[15]],[188,[15]]]],[[[188,[191]],[188,[191]]]],[[[188,[174]],[188,[174]]]],[[[188,[13]],[188,[13]]]],[[[188,[186]],[188,[186]]]],[[[188,[176]],[188,[176]]]],[[[188,[187]],[188,[187]]]],[[[188,[9]],[188,[9]]]],[[[188,[185]],[188,[185]]]],[[[188,[183]],[188,[183]]]],[[[188,[192]],[188,[192]]]],[[[188,[105]],[188,[105]]]],[[190,190]],[[]],[[]],[[181,181],181],[[182,182],182],[[[184,[192]],[184,[192]]],[[184,[192]]]],[[[184,[105]],[184,[105]]],[[184,[105]]]],[[[184,[185]],[184,[185]]],[[184,[185]]]],[[[184,[13]],[184,[13]]],[[184,[13]]]],[[[184,[183]],[184,[183]]],[[184,[183]]]],[[[184,[176]],[184,[176]]],[[184,[176]]]],[[[184,[191]],[184,[191]]],[[184,[191]]]],[[[184,[9]],[184,[9]]],[[184,[9]]]],[[[184,[186]],[184,[186]]],[[184,[186]]]],[[[184,[187]],[184,[187]]],[[184,[187]]]],[[[184,[174]],[184,[174]]],[[184,[174]]]],[[[184,[15]],[184,[15]]],[[184,[15]]]],[[[188,[105]],[188,[105]]],[[188,[105]]]],[[[188,[192]],[188,[192]]],[[188,[192]]]],[[[188,[9]],[188,[9]]],[[188,[9]]]],[[[188,[186]],[188,[186]]],[[188,[186]]]],[[[188,[174]],[188,[174]]],[[188,[174]]]],[[[188,[187]],[188,[187]]],[[188,[187]]]],[[[188,[185]],[188,[185]]],[[188,[185]]]],[[[188,[13]],[188,[13]]],[[188,[13]]]],[[[188,[183]],[188,[183]]],[[188,[183]]]],[[[188,[15]],[188,[15]]],[[188,[15]]]],[[[188,[176]],[188,[176]]],[[188,[176]]]],[[[188,[191]],[188,[191]]],[[188,[191]]]],[[[166,[176]],176]],[[[166,[174]],174]],[[[166,[15]],15]],[[109,109]],[[]],[[],1],[[]],[[],1],[[173,173],8],[[[109,[143]],109],8],[[180,180],8],[[181,181],8],[[182,182],8],[[[184,[143]],184],8],[[[188,[143]],188],8],[[189,189],8],[[190,190],8],[[]],[181,181],[182,182],[[]],[181,181],[182,182],[[]],[181,181],[182,182],[[],194],[[],194],[[]],[181,181],[182,182],[[173,6],7],[[173,6],[[10,[195]]]],[[[166,[5]],6],7],[[[109,[5]],6],7],[[180,6],7],[[180,6],7],[[181,6],7],[[181,6],7],[[182,6],7],[[182,6],7],[[184,6],7],[[184,6],7],[[188,6],7],[[188,6],7],[[189,6],7],[[189,6],7],[[190,6],7],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[]],[181,181],[182,182],[[]],[[]],[191,173],[174,173],[105,173],[[]],[15,173],[13,173],[183,173],[187,173],[192,173],[9,173],[176,173],[185,173],[186,173],[[]],[[]],[[]],[116,180],[[]],[196,181],[116,182],[[]],[176,[[184,[176]]]],[191,[[184,[191]]]],[187,[[184,[187]]]],[13,[[184,[13]]]],[183,[[184,[183]]]],[105,[[184,[105]]]],[186,[[184,[186]]]],[9,[[184,[9]]]],[15,[[184,[15]]]],[192,[[184,[192]]]],[185,[[184,[185]]]],[[]],[174,[[184,[174]]]],[105,[[188,[105]]]],[186,[[188,[186]]]],[[]],[13,[[188,[13]]]],[9,[[188,[9]]]],[191,[[188,[191]]]],[192,[[188,[192]]]],[174,[[188,[174]]]],[176,[[188,[176]]]],[187,[[188,[187]]]],[185,[[188,[185]]]],[15,[[188,[15]]]],[183,[[188,[183]]]],[116,189],[[]],[[]],[15],[15,181],[15,182],[197,[[10,[173]]]],[197,[[10,[180]]]],[197,[[10,[181]]]],[197,[[10,[182]]]],[197,[[10,[184]]]],[197,[[10,[188]]]],[197,[[10,[189]]]],[[197,174],10],[[197,174],[[10,[[184,[15]]]]]],[[197,174],[[10,[[184,[187]]]]]],[[197,174],[[10,[[184,[13]]]]]],[[197,174],[[10,[[184,[186]]]]]],[[197,174],[[10,[[184,[176]]]]]],[[197,174],[[10,[[184,[183]]]]]],[[197,174],[[10,[[184,[185]]]]]],[[197,174],[[10,[[184,[174]]]]]],[[197,174],[[10,[[184,[9]]]]]],[[197,174],[[10,[[184,[105]]]]]],[[197,174],[[10,[[184,[191]]]]]],[[197,174],[[10,[[184,[192]]]]]],[[197,174],[[10,[[188,[191]]]]]],[[197,174],[[10,[[188,[187]]]]]],[[197,174],[[10,[[188,[15]]]]]],[[197,174],[[10,[[188,[174]]]]]],[[197,174],[[10,[[188,[176]]]]]],[[197,174],[[10,[[188,[9]]]]]],[[197,174],[[10,[[188,[186]]]]]],[[197,174],[[10,[[188,[183]]]]]],[[197,174],[[10,[[188,[105]]]]]],[[197,174],[[10,[[188,[13]]]]]],[[197,174],[[10,[[188,[185]]]]]],[[197,174],[[10,[[188,[192]]]]]],0,[[]],[[[184,[176]],[184,[176]]],[[184,[176]]]],[[[184,[9]],[184,[9]]],[[184,[9]]]],[[[184,[174]],[184,[174]]],[[184,[174]]]],[[[184,[15]],[184,[15]]],[[184,[15]]]],[[[184,[192]],[184,[192]]],[[184,[192]]]],[[[184,[191]],[184,[191]]],[[184,[191]]]],[[[188,[15]],[188,[15]]],[[188,[15]]]],[[[188,[176]],[188,[176]]],[[188,[176]]]],[[[188,[191]],[188,[191]]],[[188,[191]]]],[[[188,[174]],[188,[174]]],[[188,[174]]]],[[[188,[9]],[188,[9]]],[[188,[9]]]],[[[188,[192]],[188,[192]]],[[188,[192]]]],[[]],[[]],[[[166,[176]]],176],[[[166,[15]]],15],[[[166,[174]]],174],[173],[[[109,[146]]]],[[[184,[146]]]],[[[188,[146]]]],[[]],[[181,181],181],[[182,182],182],[[],109],0,[[189,9]],[173],[190],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[173,173],[[],8],[181,8],[182,8],[[],8],[181,8],[182,8],[[],8],[[],8],[[],8],[[],8],[[],8],[181,8],[182,8],[[],8],[[[184,[186]]],8],[[[184,[187]]],8],[[[184,[185]]],8],[[[184,[183]]],8],[[[184,[105]]],8],[[[184,[13]]],8],[[[188,[187]]],8],[[[188,[183]]],8],[[[188,[13]]],8],[[[188,[186]]],8],[[[188,[105]]],8],[[[188,[185]]],8],[[],8],[181,8],[182,8],[[],8],[[],8],[[],8],[[[184,[185]]],8],[[[184,[186]]],8],[[[184,[13]]],8],[[[184,[105]]],8],[[[184,[183]]],8],[[[184,[187]]],8],[[[188,[13]]],8],[[[188,[185]]],8],[[[188,[183]]],8],[[[188,[186]]],8],[[[188,[187]]],8],[[[188,[105]]],8],[[],8],[181,8],[182,8],[[],8],[181,8],[182,8],[[],8],[[],8],[180,8],[189,8],[[]],[[]],[[]],[[[184,[186]]],174],[[[184,[105]]],174],[[[184,[192]]],174],[[[184,[176]]],174],[[[184,[9]]],174],[[[184,[185]]],174],[[[184,[174]]],174],[[[184,[13]]],174],[[[184,[187]]],174],[[[184,[191]]],174],[[[184,[183]]],174],[[[184,[15]]],174],[[[188,[9]]],174],[[[188,[191]]],174],[[[188,[185]]],174],[[[188,[176]]],174],[[[188,[187]]],174],[[[188,[192]]],174],[[[188,[13]]],174],[[[188,[183]]],174],[[[188,[174]]],174],[[[188,[15]]],174],[[[188,[186]]],174],[[[188,[105]]],174],[[]],[181,181],[182,182],[[]],[181,181],[182,182],[[]],[[181,181],181],[[182,182],182],[[]],[181,181],[182,182],[[]],[181,181],[182,182],[[]],[[181,181],181],[[182,182],182],[[]],[[],180],[[],181],[[],182],[[],184],[[],188],[[],190],[[]],[[181,181],181],[[182,182],182],[[]],[[],180],[[],181],[[],182],[[],184],[[],188],[[],190],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[[]],[[]],0,[[173,173]],[[173,173]],[[173,173]],[[173,173]],[109],[[109,109]],[109],[109],[[109,109]],[[109,109]],[[109,109]],[109],[[180,180]],[[180,116]],[[181,181]],[[182,182]],[[[184,[186]],[184,[186]]]],[[[184,[191]],[184,[191]]]],[[[184,[176]],[184,[176]]]],[[[184,[9]],[184,[9]]]],[[[184,[105]],[184,[105]]]],[[[184,[187]],[184,[187]]]],[[[184,[183]],[184,[183]]]],[[[184,[192]],[184,[192]]]],[[[184,[185]],[184,[185]]]],[[[184,[174]],[184,[174]]]],[[[184,[13]],[184,[13]]]],[[[184,[15]],[184,[15]]]],[[[188,[183]],[188,[183]]]],[[[188,[13]],[188,[13]]]],[[[188,[174]],[188,[174]]]],[[[188,[9]],[188,[9]]]],[[[188,[185]],[188,[185]]]],[[[188,[15]],[188,[15]]]],[[[188,[105]],[188,[105]]]],[[[188,[186]],[188,[186]]]],[[[188,[187]],[188,[187]]]],[[[188,[192]],[188,[192]]]],[[[188,[176]],[188,[176]]]],[[[188,[191]],[188,[191]]]],[[189,189]],[[189,116]],[[190,190]],[[]],[[181,181,181],181],[[182,182,182],182],[[173,173]],[[173,173]],[[109,109]],[109],[[109,109]],[109],[[[184,[191]],[184,[191]]]],[[[184,[185]],[184,[185]]]],[[[184,[187]],[184,[187]]]],[[[184,[174]],[184,[174]]]],[[[184,[9]],[184,[9]]]],[[[184,[176]],[184,[176]]]],[[[184,[186]],[184,[186]]]],[[[184,[183]],[184,[183]]]],[[[184,[13]],[184,[13]]]],[[[184,[192]],[184,[192]]]],[[[184,[15]],[184,[15]]]],[[[184,[105]],[184,[105]]]],[[[188,[192]],[188,[192]]]],[[[188,[185]],[188,[185]]]],[[[188,[176]],[188,[176]]]],[[[188,[15]],[188,[15]]]],[[[188,[191]],[188,[191]]]],[[[188,[183]],[188,[183]]]],[[[188,[105]],[188,[105]]]],[[[188,[13]],[188,[13]]]],[[[188,[174]],[188,[174]]]],[[[188,[9]],[188,[9]]]],[[[188,[187]],[188,[187]]]],[[[188,[186]],[188,[186]]]],[[190,190]],[173],[173],[109],[109],[180],[181],[182],[[[184,[186]]]],[[[184,[183]]]],[[[184,[185]]]],[[[184,[13]]]],[[[184,[187]]]],[[[184,[105]]]],[[[188,[185]]]],[[[188,[105]]]],[[[188,[13]]]],[[[188,[183]]]],[[[188,[186]]]],[[[188,[187]]]],[189],[190],[[],173],[174,[[166,[174]]]],[15,[[166,[15]]]],[176,[[166,[176]]]],[[],109],[[],190],[[],173],[[],190],[109],[184],[188],0,[[]],[[],173],[[],109],[[],181],[[],182],[[],184],[[],188],[[],190],[[[109,[156]],109],[[1,[88]]]],[[180,180],[[1,[88]]]],[[181,181],[[1,[88]]]],[[182,182],[[1,[88]]]],[[[184,[156]],184],[[1,[88]]]],[[[188,[156]],188],[[1,[88]]]],[[189,189],[[1,[88]]]],[[190,190],[[1,[88]]]],[[116,116],[[109,[116]]]],[174],[[173,9],173],[[[184,[191]],174],[[184,[191]]]],[[[184,[183]],174],[[184,[183]]]],[[[184,[176]],174],[[184,[176]]]],[[[184,[187]],174],[[184,[187]]]],[[[184,[13]],174],[[184,[13]]]],[[[184,[15]],174],[[184,[15]]]],[[[184,[185]],174],[[184,[185]]]],[[[184,[174]],174],[[184,[174]]]],[[[184,[105]],174],[[184,[105]]]],[[[184,[186]],174],[[184,[186]]]],[[[184,[192]],174],[[184,[192]]]],[[[184,[9]],174],[[184,[9]]]],[[[188,[191]],174],[[188,[191]]]],[[[188,[105]],174],[[188,[105]]]],[[[188,[187]],174],[[188,[187]]]],[[[188,[183]],174],[[188,[183]]]],[[[188,[174]],174],[[188,[174]]]],[[[188,[9]],174],[[188,[9]]]],[[[188,[192]],174],[[188,[192]]]],[[[188,[15]],174],[[188,[15]]]],[[[188,[176]],174],[[188,[176]]]],[[[188,[185]],174],[[188,[185]]]],[[[188,[13]],174],[[188,[13]]]],[[[188,[186]],174],[[188,[186]]]],[[]],[[181,181],181],[[182,182],182],[186],[[181,186],181],[[182,186],182],[116,[[109,[116]]]],[30,173],[30,173],[30,109],[30,109],0,[[]],[181,181],[182,182],[[[166,[176]],176],176],[[[166,[15]],15],15],[[[166,[174]],174],174],[[181,181]],[[182,182]],[[184,184]],[[[188,[9]],[188,[9]]]],[[[188,[105]],[188,[105]]]],[[[188,[176]],[188,[176]]]],[[[188,[13]],[188,[13]]]],[[[188,[191]],[188,[191]]]],[[[188,[174]],[188,[174]]]],[[[188,[192]],[188,[192]]]],[[[188,[185]],[188,[185]]]],[[[188,[15]],[188,[15]]]],[[[188,[183]],[188,[183]]]],[[[188,[187]],[188,[187]]]],[[[188,[186]],[188,[186]]]],[[184,184]],[[[188,[105]],[188,[105]]]],[[[188,[13]],[188,[13]]]],[[[188,[176]],[188,[176]]]],[[[188,[192]],[188,[192]]]],[[[188,[183]],[188,[183]]]],[[[188,[187]],[188,[187]]]],[[[188,[191]],[188,[191]]]],[[[188,[186]],[188,[186]]]],[[[188,[174]],[188,[174]]]],[[[188,[15]],[188,[15]]]],[[[188,[9]],[188,[9]]]],[[[188,[185]],[188,[185]]]],[[]],[[]],[[181,181],181],[[182,182],182],[[[184,[186]],[184,[186]]],[[184,[186]]]],[[[184,[192]],[184,[192]]],[[184,[192]]]],[[[184,[15]],[184,[15]]],[[184,[15]]]],[[[184,[13]],[184,[13]]],[[184,[13]]]],[[[184,[185]],[184,[185]]],[[184,[185]]]],[[[184,[191]],[184,[191]]],[[184,[191]]]],[[[184,[187]],[184,[187]]],[[184,[187]]]],[[[184,[105]],[184,[105]]],[[184,[105]]]],[[[184,[176]],[184,[176]]],[[184,[176]]]],[[[184,[174]],[184,[174]]],[[184,[174]]]],[[[184,[9]],[184,[9]]],[[184,[9]]]],[[[184,[183]],[184,[183]]],[[184,[183]]]],[[[188,[105]],[188,[105]]],[[188,[105]]]],[[[188,[191]],[188,[191]]],[[188,[191]]]],[[[188,[15]],[188,[15]]],[[188,[15]]]],[[[188,[176]],[188,[176]]],[[188,[176]]]],[[[188,[9]],[188,[9]]],[[188,[9]]]],[[[188,[186]],[188,[186]]],[[188,[186]]]],[[[188,[192]],[188,[192]]],[[188,[192]]]],[[[188,[183]],[188,[183]]],[[188,[183]]]],[[[188,[174]],[188,[174]]],[[188,[174]]]],[[[188,[13]],[188,[13]]],[[188,[13]]]],[[[188,[185]],[188,[185]]],[[188,[185]]]],[[[188,[187]],[188,[187]]],[[188,[187]]]],[[]],[[[184,[13]]],[[184,[13]]]],[[[184,[191]]],[[184,[191]]]],[[[184,[9]]],[[184,[9]]]],[[[184,[187]]],[[184,[187]]]],[[[184,[176]]],[[184,[176]]]],[[[184,[15]]],[[184,[15]]]],[[[184,[174]]],[[184,[174]]]],[[[184,[183]]],[[184,[183]]]],[[[184,[186]]],[[184,[186]]]],[[[184,[192]]],[[184,[192]]]],[[[184,[185]]],[[184,[185]]]],[[[184,[105]]],[[184,[105]]]],[[[188,[105]]],[[188,[105]]]],[[[188,[183]]],[[188,[183]]]],[[[188,[186]]],[[188,[186]]]],[[[188,[15]]],[[188,[15]]]],[[[188,[191]]],[[188,[191]]]],[[[188,[174]]],[[188,[174]]]],[[[188,[187]]],[[188,[187]]]],[[[188,[192]]],[[188,[192]]]],[[[188,[176]]],[[188,[176]]]],[[[188,[185]]],[[188,[185]]]],[[[188,[13]]],[[188,[13]]]],[[[188,[9]]],[[188,[9]]]],[[]],[[[184,[186]],174],[[184,[186]]]],[[[184,[191]],174],[[184,[191]]]],[[[184,[176]],174],[[184,[176]]]],[[[184,[183]],174],[[184,[183]]]],[[[184,[187]],174],[[184,[187]]]],[[[184,[174]],174],[[184,[174]]]],[[[184,[15]],174],[[184,[15]]]],[[[184,[192]],174],[[184,[192]]]],[[[184,[13]],174],[[184,[13]]]],[[[184,[105]],174],[[184,[105]]]],[[[184,[185]],174],[[184,[185]]]],[[[184,[9]],174],[[184,[9]]]],[[[188,[191]],174],[[188,[191]]]],[[[188,[185]],174],[[188,[185]]]],[[[188,[105]],174],[[188,[105]]]],[[[188,[183]],174],[[188,[183]]]],[[[188,[9]],174],[[188,[9]]]],[[[188,[192]],174],[[188,[192]]]],[[[188,[176]],174],[[188,[176]]]],[[[188,[186]],174],[[188,[186]]]],[[[188,[187]],174],[[188,[187]]]],[[[188,[13]],174],[[188,[13]]]],[[[188,[174]],174],[[188,[174]]]],[[[188,[15]],174],[[188,[15]]]],[[]],[[[184,[187]],174],[[184,[187]]]],[[[184,[174]],174],[[184,[174]]]],[[[184,[191]],174],[[184,[191]]]],[[[184,[9]],174],[[184,[9]]]],[[[184,[105]],174],[[184,[105]]]],[[[184,[15]],174],[[184,[15]]]],[[[184,[192]],174],[[184,[192]]]],[[[184,[186]],174],[[184,[186]]]],[[[184,[176]],174],[[184,[176]]]],[[[184,[185]],174],[[184,[185]]]],[[[184,[13]],174],[[184,[13]]]],[[[184,[183]],174],[[184,[183]]]],[[[188,[105]],174],[[188,[105]]]],[[[188,[174]],174],[[188,[174]]]],[[[188,[192]],174],[[188,[192]]]],[[[188,[191]],174],[[188,[191]]]],[[[188,[187]],174],[[188,[187]]]],[[[188,[13]],174],[[188,[13]]]],[[[188,[15]],174],[[188,[15]]]],[[[188,[9]],174],[[188,[9]]]],[[[188,[186]],174],[[188,[186]]]],[[[188,[176]],174],[[188,[176]]]],[[[188,[183]],174],[[188,[183]]]],[[[188,[185]],174],[[188,[185]]]],[[]],[181,181],[182,182],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[15],[174],[[]],[[]],[[]],[[]],[[[184,[105]],174]],[[[184,[186]],174]],[[[184,[176]],174]],[[[184,[192]],174]],[[[184,[187]],174]],[[[184,[185]],174]],[[[184,[174]],174]],[[[184,[183]],174]],[[[184,[13]],174]],[[[184,[9]],174]],[[[184,[15]],174]],[[[184,[191]],174]],[[[188,[191]],174]],[[[188,[15]],174]],[[[188,[13]],174]],[[[188,[183]],174]],[[[188,[186]],174]],[[[188,[185]],174]],[[[188,[192]],174]],[[[188,[105]],174]],[[[188,[187]],174]],[[[188,[9]],174]],[[[188,[176]],174]],[[[188,[174]],174]],[[[184,[105]],174]],[[[184,[186]],174]],[[[184,[192]],174]],[[[184,[176]],174]],[[[184,[174]],174]],[[[184,[15]],174]],[[[184,[185]],174]],[[[184,[13]],174]],[[[184,[183]],174]],[[[184,[187]],174]],[[[184,[9]],174]],[[[184,[191]],174]],[[[188,[15]],174]],[[[188,[186]],174]],[[[188,[13]],174]],[[[188,[187]],174]],[[[188,[176]],174]],[[[188,[174]],174]],[[[188,[185]],174]],[[[188,[105]],174]],[[[188,[9]],174]],[[[188,[192]],174]],[[[188,[191]],174]],[[[188,[183]],174]],[[[184,[13]],174]],[[[184,[9]],174]],[[[184,[15]],174]],[[[184,[185]],174]],[[[184,[187]],174]],[[[184,[176]],174]],[[[184,[174]],174]],[[[184,[183]],174]],[[[184,[105]],174]],[[[184,[191]],174]],[[[184,[186]],174]],[[[184,[192]],174]],[[[188,[174]],174]],[[[188,[186]],174]],[[[188,[187]],174]],[[[188,[192]],174]],[[[188,[176]],174]],[[[188,[183]],174]],[[[188,[13]],174]],[[[188,[15]],174]],[[[188,[185]],174]],[[[188,[191]],174]],[[[188,[105]],174]],[[[188,[9]],174]],[[[184,[191]],174]],[[[184,[192]],174]],[[[184,[176]],174]],[[[184,[183]],174]],[[[184,[185]],174]],[[[184,[15]],174]],[[[184,[186]],174]],[[[184,[187]],174]],[[[184,[9]],174]],[[[184,[105]],174]],[[[184,[174]],174]],[[[184,[13]],174]],[[[188,[191]],174]],[[[188,[9]],174]],[[[188,[185]],174]],[[[188,[187]],174]],[[[188,[176]],174]],[[[188,[105]],174]],[[[188,[183]],174]],[[[188,[15]],174]],[[[188,[186]],174]],[[[188,[192]],174]],[[[188,[13]],174]],[[[188,[174]],174]],[[]],[[[184,[9]]]],[[[184,[174]]]],[[[184,[192]]]],[[[184,[191]]]],[[[184,[15]]]],[[[184,[176]]]],[[[188,[192]]]],[[[188,[176]]]],[[[188,[15]]]],[[[188,[174]]]],[[[188,[9]]]],[[[188,[191]]]],[[]],[[]],[181,181],[182,182],[[[184,[187]]],[[184,[187]]]],[[[184,[186]]],[[184,[186]]]],[[[184,[185]]],[[184,[185]]]],[[[184,[183]]],[[184,[183]]]],[[[184,[105]]],[[184,[105]]]],[[[184,[13]]],[[184,[13]]]],[[[188,[13]]],[[188,[13]]]],[[[188,[105]]],[[188,[105]]]],[[[188,[186]]],[[188,[186]]]],[[[188,[187]]],[[188,[187]]]],[[[188,[183]]],[[188,[183]]]],[[[188,[185]]],[[188,[185]]]],[[]],[181,181],[182,182],[[]],[181],[182],[[]],[181,181],[182,182],[[]],[173,[[1,[173]]]],[180,180],[181,181],[182,182],[189,189],[173,[[1,[173]]]],[[]],[[],1],[[]],[[],1],[[],1],[[173,173]],[[173,173]],[[173,173]],[[173,173]],[109],[[109,109]],[[109,109]],[109],[109],[109],[[109,109]],[[109,109]],[[180,180]],[[181,181]],[[182,182]],[[[184,[105]],[184,[105]]]],[[[184,[9]],[184,[9]]]],[[[184,[13]],[184,[13]]]],[[[184,[186]],[184,[186]]]],[[[184,[187]],[184,[187]]]],[[[184,[15]],[184,[15]]]],[[[184,[191]],[184,[191]]]],[[[184,[174]],[184,[174]]]],[[[184,[183]],[184,[183]]]],[[[184,[176]],[184,[176]]]],[[[184,[192]],[184,[192]]]],[[[184,[185]],[184,[185]]]],[[[188,[176]],[188,[176]]]],[[[188,[187]],[188,[187]]]],[[[188,[105]],[188,[105]]]],[[[188,[191]],[188,[191]]]],[[[188,[174]],[188,[174]]]],[[[188,[183]],[188,[183]]]],[[[188,[9]],[188,[9]]]],[[[188,[185]],[188,[185]]]],[[[188,[192]],[188,[192]]]],[[[188,[186]],[188,[186]]]],[[[188,[13]],[188,[13]]]],[[[188,[15]],[188,[15]]]],[[189,189]],[[190,190]],[[173,173]],[[173,173]],[[109,109]],[[109,109]],[109],[109],[[[184,[174]],[184,[174]]]],[[[184,[105]],[184,[105]]]],[[[184,[9]],[184,[9]]]],[[[184,[187]],[184,[187]]]],[[[184,[185]],[184,[185]]]],[[[184,[176]],[184,[176]]]],[[[184,[13]],[184,[13]]]],[[[184,[192]],[184,[192]]]],[[[184,[15]],[184,[15]]]],[[[184,[183]],[184,[183]]]],[[[184,[186]],[184,[186]]]],[[[184,[191]],[184,[191]]]],[[[188,[174]],[188,[174]]]],[[[188,[105]],[188,[105]]]],[[[188,[176]],[188,[176]]]],[[[188,[183]],[188,[183]]]],[[[188,[186]],[188,[186]]]],[[[188,[9]],[188,[9]]]],[[[188,[15]],[188,[15]]]],[[[188,[185]],[188,[185]]]],[[[188,[13]],[188,[13]]]],[[[188,[187]],[188,[187]]]],[[[188,[192]],[188,[192]]]],[[[188,[191]],[188,[191]]]],[[190,190]],[30,173],[30,173],[30,109],[30,109],[[]],[181,181],[182,182],[[]],[181,181],[182,182],[[],15],[181,15],[182,15],[[]],[181,181],[182,182],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[181,181],[182,182],[[],103],[[],103],[[],[[1,[103]]]],[[],[[1,[103]]]],[[],198],[[],198],[[],[[1,[198]]]],[[],[[1,[198]]]],[[],157],[[],157],[[],157],[[],157],[[],157],[[],157],[[],157],[[],88],[[181,181],88],[[182,182],88],[[]],[[[184,[13]]],174],[[[184,[176]]],174],[[[184,[9]]],174],[[[184,[185]]],174],[[[184,[192]]],174],[[[184,[174]]],174],[[[184,[183]]],174],[[[184,[15]]],174],[[[184,[191]]],174],[[[184,[187]]],174],[[[184,[105]]],174],[[[184,[186]]],174],[[[188,[187]]],174],[[[188,[13]]],174],[[[188,[191]]],174],[[[188,[105]]],174],[[[188,[183]]],174],[[[188,[192]]],174],[[[188,[176]]],174],[[[188,[174]]],174],[[[188,[9]]],174],[[[188,[15]]],174],[[[188,[185]]],174],[[[188,[186]]],174],[109,109],[[]],[181,181],[182,182],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[109,[116]]],[[109,[116]]]],[[]],[[[184,[105]]]],[[[184,[187]]]],[[[184,[185]]]],[[[184,[186]]]],[[[184,[183]]]],[[[184,[13]]]],[[[188,[183]]]],[[[188,[186]]]],[[[188,[105]]]],[[[188,[13]]]],[[[188,[185]]]],[[[188,[187]]]],0,0,[[]],[[],173],[[],109],[[],181],[[],182],[[],184],[[],188],[[],190],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[176],[183],[192],[[]],[187],[13],[186],[15],[105],[9],[191],[174],[185],[105],[9],[[]],[176],[186],[185],[15],[13],[174],[176],[185],[174],[[]],[15],[13],[105],[9],[186],[13],[105],[186],[9],[176],[[]],[174],[185],[15],[15],[13],[[]],[174],[176],[105],[9],[186],[185],[13],[185],[176],[105],[15],[[]],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],183],[[],15],[[],187],[[],186],[[],174],[[],13],[[]],[[],185],[[],191],[[],105],[[],176],[[],192],[[],186],[[],105],[[],176],[[],185],[[]],[[],9],[[],174],[[],15],[[],13],[[],174],[[],105],[[],185],[[],13],[[],186],[[]],[[],9],[[],176],[[],15],[[],185],[[],13],[[],186],[[],9],[[],105],[[],174],[[],176],[[],15],[[]],[[],174],[[],185],[[],13],[[],186],[[],105],[[],9],[[]],[[],176],[[],15],[[]],[[],9],[[],15],[[],176],[[],105],[[],185],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],176],[[],13],[[],105],[[],185],[[],192],[[],186],[[],187],[[],183],[[],9],[[],15],[[],174],[[],191],[[],15],[[],9],[[],13],[[],186],[[],105],[[],174],[[],185],[[],176],[[],185],[[],13],[[],186],[[],9],[[],105],[[],176],[[],174],[[],15],[[],9],[[],13],[[],185],[[],186],[[],105],[[],174],[[],15],[[],176],[[],13],[[],186],[[],174],[[],15],[[],105],[[],176],[[],185],[[],9],[[],105],[[],9],[[],185],[[],15],[[],13],[[],176],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[174],[15],[174],[15],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],174],[[],174],[[],174],[[],174],[[],174],[[]],[[]],[[]],[[]],[[],199],[[],199],[[],199],[[],199],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[[],174],[15,174],[15,174],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],200],[[],201],[202,202],[203,203],[204,204],[[]],[[]],[[]],[[],[[10,[205]]]],[[202,6],7],[[203,6],7],[[204,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[202,206],0,[202],[197,202],[[],[[10,[9,205]]]],[207,157],[208,[[10,[205]]]],[208,[[10,[205]]]],[[],[[10,[205]]]],[16,[[10,[9,205]]]],[157,[[10,[9,205]]]],[[],[[10,[9,205]]]],[202],[[],1],[[],1],0,[[202,9],16],[15,209],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],[[10,[9,205]]]],[[],[[10,[205]]]],[[],[[10,[205]]]],[210,[[10,[205]]]],[[],[[10,[9,205]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[212,[[0,[3,211]]]]],[[212,[[0,[3,211]]]]]],[213,213],[214,214],[[[215,[3]]],[[215,[3]]]],[216,216],[[]],[[]],[[]],[[]],[[]],[[213,15,15,9],15],[[214,9],[[16,[15]]]],[[213,9,9],15],[[214,9,9],[[16,[15]]]],[[[212,[[0,[5,211]]]],6],7],[[213,6],7],[[214,6],7],[[[215,[5]],6],7],[[216,6],7],[[]],[[]],[[]],[[]],[[]],[213,15],[[215,9]],[[216,9],9],[[]],[[]],[[]],[[]],[[]],[[[215,[142]]],[[16,[9]]]],[[[16,[211]]],[[212,[211]]]],[15,213],[[],214],[[[16,[142]]],[[215,[142]]]],[[],216],[15,213],[[9,15],214],[211,[[16,[9]]]],[[[212,[211]]],[[16,[9]]]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],217],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[218,[3,3]]],[[218,[3,3]]]],[219,219],[[[220,[3]]],[[220,[3]]]],[[[221,[3,3]]],[[221,[3,3]]]],[222,222],[223,223],[224,224],[225,225],[226,226],[227,227],[228,228],[[[229,[3]]],[[229,[3]]]],[[[217,[3]]],[[217,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[218,218],88],[[[220,[142]],220],88],[[[221,[142,142]],221],88],[[217,217],88],[[],230],[[],[[218,[175,175]]]],[[],219],[[],[[217,[175]]]],[[]],[[]],[[]],0,[[218,218],8],[[[220,[143]],220],8],[[[221,[143,143]],221],8],[[217,217],8],[[230,6],7],[[[218,[5,5]],6],7],[[219,6],7],[[[232,[5,[0,[5,[231,[5]]]]]],6],7],[[[220,[5]],6],7],[[[221,[5,5]],6],7],[[222,6],7],[[223,6],7],[[224,6],7],[[225,6],7],[[226,6],7],[[227,6],7],[[228,6],7],[[[229,[5]],6],7],[[[217,[5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[174,1],[174,1],[174,1],[174,1],[[219,231]],[[219,116],8],[[219,231],[[232,[231]]]],[[]],[[]],[[]],[[[220,[146]]]],[[[221,[146,146]]]],[217],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[230,116,116],8],[230,8],0,0,[8,[[10,[205]]]],[[],199],0,[230,230],[[]],[[]],[[]],[[],1],[222,1],[223,1],[224,1],[226,1],[227,1],[[[229,[197]]],1],[[[229,[233]]],1],[[],230],[15,219],[[],221],[9,227],[[],229],[206,1],[[[232,[231]]],1],0,[[218,218],[[1,[88]]]],[[[220,[156]],220],[[1,[88]]]],[[[221,[156,156]],221],[[1,[88]]]],[[217,217],[[1,[88]]]],[219],[[219,15],15],[[220,219]],[[221,219]],0,[219,15],[219,232],[219,232],[219,116],[[219,15,9],[[16,[15]]]],[207,157],[207,157],[[],157],[[],157],[[],157],[[],1],[[],1],[[],1],0,0,[16],[[],157],[[],157],[[]],[[]],[[230,116],230],[[230,116],230],[[230,116],230],[[230,9],230],[219],0,0,[[],219],0,0,[[],[[1,[174]]]],[[],[[1,[174]]]],[[],[[1,[174]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[1,[174]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],[[16,[192]]]],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[234,234],[235,235],[236,236],[[[238,[[0,[3,237]]]]],[[238,[[0,[3,237]]]]]],[[[239,[[0,[3,237]]]]],[[239,[[0,[3,237]]]]]],[[[240,[[0,[3,100]],[0,[3,45]]]]],[[240,[[0,[3,100]],[0,[3,45]]]]]],[158,158],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],241],[9,15],[9,15],0,0,0,[[158,158],8],[[234,6],7],[[235,6],7],[[236,6],7],[[[238,[[0,[5,237]]]],6],7],[[[239,[[0,[5,237]]]],6],7],[[[240,[[0,[5,100]],[0,[5,45]]]],6],7],[[158,6],7],[[241,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[236,[[238,[237]]]],[158],[[241,154],15],[[241,154,9,9],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[238,[237]],9,9],9],[[242,9,9],9],[234,9],[235,9],[236,9],[[9,154],234],[154,235],[[9,154],236],[[9,154],242],[154,240],[[],241],[[]],0,0,[[235,9,9,31]],[[235,9,31]],[[235,9,9]],[[236,9,9,31]],[[242,9,9,8,31]],[[242,9,9,8,31,31]],[[[243,[[231,[9]]]],219],154],[[[244,[[231,[9]]]],219],154],[[[245,[[231,[9]]]],219],154],[[[246,[[231,[9]]]],219],154],0,[[[16,[15]]]],[[[16,[15]]]],[[235,9,31]],[[235,9,31]],[[235,9,9]],[[],241],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[242,9,9,8,31]],0,0,0,[[],9],[[],9],[15,241]],"p":[[4,"Option"],[3,"RangeChminChmaxAdd"],[8,"Clone"],[3,"RangeSumRangeChminChmaxAdd"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"ConvexHullTrick"],[15,"i64"],[3,"XorBasis"],[15,"u64"],[3,"Vec"],[3,"RhoPath"],[8,"MIntBase"],[3,"IndependentSubSet"],[3,"BitDp"],[3,"Subsets"],[3,"Combinations"],[3,"EsperEstimator"],[3,"EsperSolver"],[3,"ImpartialGameAnalyzer"],[3,"PartisanGameAnalyzer"],[3,"ZeroSumGameAnalyzer"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"Iterator"],[8,"FnMut"],[3,"BabyStepGiantStep"],[3,"SqrtDecompositionBuckets"],[8,"IntoIterator"],[3,"ImpartialGamer"],[3,"PartisanGamer"],[3,"ZeroSumGamer"],[3,"SlideMinimum"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"LexicographicalSubsequence"],[3,"LongestIncreasingSubsequence"],[8,"Fn"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"FunctionalAutomaton"],[3,"MappingAutomaton"],[3,"AlphabetMappingAutomaton"],[3,"LexicographicalAutomaton"],[3,"RevLexicographicalAutomaton"],[3,"MonoidalAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BitVector"],[3,"WaveletMatrix"],[3,"Accumulate"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"CompressedBinaryIndexedTree"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"SlopeTrick"],[3,"MergingUnionFind"],[3,"HashMap"],[3,"WeightedUnionFind"],[3,"UnionFind"],[3,"NonNull"],[3,"MemoryPool"],[3,"SegmentTree"],[3,"DequeAggregation"],[3,"BitSet"],[3,"Trie"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"CompressedSegmentTree"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"Automatondp"],[3,"VecCompress"],[3,"HashCompress"],[3,"LineSet"],[4,"Ordering"],[3,"SplaySequence"],[3,"SplayMap"],[3,"Drain"],[3,"Ref"],[3,"RefMut"],[8,"Group"],[3,"Iter"],[3,"Iter"],[3,"Keys"],[3,"IterMut"],[3,"Keys"],[8,"Monoid"],[3,"Static2DTree"],[8,"RankSelectDictionaries"],[3,"Range"],[3,"Range"],[15,"isize"],[3,"Values"],[3,"Values"],[3,"ValuesMut"],[3,"Complex"],[4,"Ccw"],[3,"Line"],[6,"Point"],[3,"LineSegment"],[3,"Approx"],[3,"Circle"],[15,"f64"],[3,"TwoSatisfiability"],[3,"ProjectSelectionProblem"],[3,"SparseGraphBuilder"],[3,"AdjacencyListGraph"],[3,"BipartiteMatching"],[3,"DinicBuilder"],[3,"PrimalDualBuilder"],[3,"GridGraph"],[3,"UsizeGraph"],[3,"ClosureGraph"],[3,"SparseGraph"],[3,"Adjacency"],[3,"Iter"],[3,"VIndexWithValue"],[3,"VIndexWithEIndexValue"],[6,"BidirectionalSparseGraph"],[3,"Dinic"],[3,"PrimalDual"],[3,"EdgeListGraph"],[3,"VIndex"],[3,"VIndexWithEIndex"],[4,"DirectedEdge"],[4,"UndirectedEdge"],[4,"BidirectionalEdge"],[3,"StronglyConnectedComponent"],[8,"Ord"],[8,"PartialEq"],[15,"never"],[6,"DirectedSparseGraph"],[8,"Hash"],[8,"IterScan"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraphScanner"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"AdjacencyViewIterFromEindex"],[3,"AdjacencyViewIterFromValue"],[6,"UndirectedSparseGraph"],[3,"LowLink"],[8,"PartialOrd"],[3,"String"],[4,"TreeCenter"],[3,"FormalPowerSeries"],[3,"Matrix"],[3,"Polynomial"],[8,"Zero"],[8,"Add"],[8,"Mul"],[8,"MulAssign"],[3,"BarrettReduction"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"PowPrec"],[3,"EulerPhiTable"],[3,"PrimeList"],[3,"PrimeTable"],[3,"MInt"],[15,"u32"],[8,"Default"],[15,"u128"],[3,"IterMut"],[8,"One"],[8,"Copy"],[3,"DoubleDouble"],[3,"Float32"],[3,"Float64"],[15,"i8"],[3,"Saturating"],[15,"i128"],[15,"i32"],[15,"i16"],[3,"Wrapping"],[3,"QuadDouble"],[3,"Rational"],[15,"u16"],[15,"u8"],[4,"FpCategory"],[3,"ExtendedGcd"],[3,"Error"],[15,"f32"],[15,"str"],[3,"RangeInclusive"],[3,"LocalKey"],[3,"Bytes"],[3,"Chain"],[3,"Scanner"],[4,"Usize1"],[4,"Chars"],[3,"Error"],[3,"ScannerIter"],[8,"Read"],[3,"BorrowedCursor"],[3,"Take"],[3,"Arguments"],[8,"Eq"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"TotalOrd"],[3,"PartialIgnoredOrd"],[3,"Xorshift"],[3,"NotEmptySegment"],[3,"RandRange"],[3,"CharWithBase"],[3,"CharsWithBase"],[3,"ByteWithBase"],[4,"Bytes"],[3,"BytesWithBase"],[3,"Collect"],[3,"SizedCollect"],[3,"Splitted"],[3,"SimuratedAnnealing"],[8,"RandomSpec"],[3,"RandIter"],[15,"char"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[8,"LcaMonoidDispatch"],[3,"LowestCommonAncestor"],[3,"LcaMonoid"],[3,"ReRooting"],[3,"TreeHasher"],[3,"HeavyLightDecomposition"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[8,"MonoidAction"],[8,"SemiRing"],[4,"Gf2_63"],[4,"Mersenne61"],[8,"Magma"],[3,"EmptyLazy"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"AddMulOperation"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[4,"PermutationOperation"],[3,"FindMajorityOperation"],[8,"Field"],[8,"Invertible"],[8,"Unital"],[8,"Ring"],[8,"BitXorIdentity"],[8,"MoSolver"],[8,"SqrtDecomposition"],[8,"ImpartialGame"],[8,"ZeroSumGame"],[8,"PartisanGame"],[3,"SubsetTransform"],[3,"SupersetTransform"],[8,"SliceSortExt"],[8,"SliceBisectExt"],[8,"SliceCombinationsExt"],[8,"Bisect"],[8,"Trisect"],[8,"Automaton"],[8,"Allocator"],[8,"Compressor"],[8,"ToDigitSequence"],[8,"ApproxOrd"],[8,"Adjacencies"],[8,"AdjacenciesWithEindex"],[8,"AdjacenciesWithValue"],[8,"AdjacencyIndexWithValue"],[8,"AdjacencyView"],[8,"EIndexedGraph"],[8,"AdjacencyIndexWithEindex"],[8,"Edges"],[8,"EdgeMap"],[8,"ShortestPathSemiRing"],[8,"GraphBase"],[8,"AdjacencyIndex"],[8,"Vertices"],[8,"VertexMap"],[3,"StandardSp"],[3,"OptionSp"],[3,"PathFoldingSp"],[8,"ShortestPathExt"],[8,"SparseGraphConstruction"],[8,"EdgeSize"],[8,"EdgeView"],[8,"VertexSize"],[8,"VertexView"],[8,"ConvolveSteps"],[4,"ConvolveRealFft"],[3,"Convolve"],[8,"FormalPowerSeriesCoefficientSqrt"],[8,"Float"],[8,"IntBase"],[8,"Unsigned"],[8,"Signed"],[8,"DiscreteSteps"],[8,"BinaryRepr"],[8,"RangeBoundsExt"],[8,"MIntConvert"],[8,"Bounded"],[3,"Modulo2"],[4,"Modulo998244353"],[4,"Modulo1000000007"],[4,"Modulo1000000009"],[4,"DynModuloU32"],[4,"DynModuloU64"],[6,"DynMIntU32"],[6,"DynMIntU64"],[4,"Modulo998244353"],[4,"Modulo2113929217"],[4,"Modulo1811939329"],[4,"Modulo2013265921"],[8,"MontgomeryReduction32"],[8,"Write"],[8,"MarkedIterScan"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[8,"AsTotalOrd"],[8,"PartialOrdExt"],[8,"SerdeByteStr"],[8,"CharTools"],[8,"IterPrint"],[4,"LcaMonoidDefaultId"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,2,2,2,5,2,5,2,2,2,5,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,5,2,5,2,2,2,5,5,2,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,2,2,5,0,0,0,0,2,2,5,5,2,2,5,2,2,2,2,5,5,2,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,2,2,2,2,2,5,2,5,2,5,2,2,5,5,2,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,2,2,2,5,2,5,2,2,5,2,5,2,5,0,0,5,5,0,0,0,2,5,2,5,2,5],"n":["datastructure","graph","math","sample","string","deque_operate_all_composite","dynamic_sequence_range_affine_range_sum","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_chmin_chmax_add_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","DequeAggregation","LinearOperation","MInt","MInt998244353","deque_operate_all_composite","MInt998244353","RangeSumRangeLinear","SplaySequence","dynamic_sequence_range_affine_range_sum","LineSet","line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","LazySegmentTree","RangeChminChmaxAdd","RangeSumRangeChminChmaxAdd","Saturating","range_chmin_chmax_add_range_sum","WaveletMatrix","range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","UnionFind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","log_of_formal_power_series","min_of_mod_of_linear","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","Convolve","ConvolveSteps","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","PrimeList","enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","factorize","prime_factors_flatten","MInt998244353","berlekamp_massey","find_linear_recurrence","Fps998244353","MInt998244353","inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","Fps998244353","MInt998244353","log_of_formal_power_series","binary_search","floor_sum_range_freq","min_of_mod_of_linear","Fps998244353","MInt998244353","multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","DynMIntU32","sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","floor_sum","sum_of_floor_of_linear","TwoSatisfiability","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","SuffixArray","suffixarray","Zarray","zalgorithm"],"q":["library_checker","","","","","library_checker::datastructure","","","","","","","","","","","","","","library_checker::datastructure::deque_operate_all_composite","","","","","library_checker::datastructure::dynamic_sequence_range_affine_range_sum","","","","library_checker::datastructure::line_add_get_min","","library_checker::datastructure::point_add_range_sum","","","","","library_checker::datastructure::point_set_range_composite","","","","","library_checker::datastructure::queue_operate_all_composite","","","","","library_checker::datastructure::range_affine_range_sum","","","","","","library_checker::datastructure::range_chmin_chmax_add_range_sum","","","","","library_checker::datastructure::range_kth_smallest","","library_checker::datastructure::staticrmq","","","","","library_checker::datastructure::unionfind","","library_checker::datastructure::vertex_add_path_sum","","","","","library_checker::datastructure::vertex_add_subtree_sum","","","","","library_checker::datastructure::vertex_set_path_composite","","","","","","","","library_checker::graph","","","","library_checker::graph::bipartitematching","","","","library_checker::graph::directedmst","","","library_checker::graph::lca","","","","","","library_checker::graph::scc","","","library_checker::math","","","","","","","","","","","","","","","","","","","library_checker::math::convolution_mod","","","","","library_checker::math::convolution_mod_1000000007","","","","","","library_checker::math::discrete_logarithm_mod","","library_checker::math::enumerate_primes","","library_checker::math::exp_of_formal_power_series","","","library_checker::math::factorize","","library_checker::math::find_linear_recurrence","","","library_checker::math::inv_of_formal_power_series","","","library_checker::math::kth_term_of_linearly_recurrent_sequence","","","","library_checker::math::log_of_formal_power_series","","","library_checker::math::min_of_mod_of_linear","","","library_checker::math::multipoint_evaluation","","","library_checker::math::polynomial_taylor_shift","","","","library_checker::math::pow_of_formal_power_series","","","library_checker::math::sharp_p_subset_sum","","","","","","library_checker::math::sqrt_mod","","library_checker::math::sqrt_of_formal_power_series","","","library_checker::math::sum_of_floor_of_linear","","library_checker::math::two_sat","","library_checker::sample","","library_checker::sample::aplusb","library_checker::sample::many_aplusb","library_checker::string","","","library_checker::string::number_of_substrings","","library_checker::string::suffixarray","","library_checker::string::zalgorithm",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","✅  AC  56ms","","","","✅  AC  2601ms","","✅  AC  434ms","","","","✅  AC  83ms","✅  AC  126ms","","","","","✅  AC  192ms","","","","","✅  AC  46ms","","","","","","✅  AC  887ms","","","","","✅  AC  1192ms","","✅  AC  408ms","","","","✅  AC  164ms","✅  AC  136ms","","✅  AC  15ms","","","","","✅  AC  499ms","","","","","✅  AC  295ms","","","","","","","","✅  AC  207ms","","","","","","","✅  AC  104ms","✅  AC  1179ms","","","✅  AC  115ms","","","","","✅  AC  640ms","✅  AC  576ms","","","✅  AC  173ms","","","","","","","","","","","","","","","","","","","","","","","","✅  AC  199ms","","","","","","✅  AC  303ms","","✅  AC  3ms","","✅  AC  1459ms","","","✅  AC  449ms","✅  AC  85ms","","","","✅  AC  123ms","","","✅  AC  187ms","","","","✅  AC  1593ms","","","✅  AC  207ms","","","✅  AC  1964ms","","","✅  AC  572ms","","","","✅  AC  141ms","","","✅  AC  611ms","","","","","","✅  AC  521ms","","✅  AC  83ms","","","✅  AC  327ms","","✅  AC  41ms","","✅  AC  211ms","","","✅  AC  0ms","✅  AC  169ms","","","","","✅  AC  766ms","","✅  AC  784ms","","✅  AC  37ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"]],"a":{"verify":[23,27,29,33,34,39,44,50,55,57,61,62,64,69,74,82,89,90,93,98,99,102,126,132,134,136,139,140,144,147,151,154,157,160,164,167,173,175,178,180,182,185,186,191,193,195]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
