var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5],"n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","judge_grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","itp1_1_a","itp1_1_a"],"q":["aizu_online_judge","","","","aizu_online_judge::dpl","","","","","","","","","","","","aizu_online_judge::dpl::dpl_1_a","aizu_online_judge::dpl::dpl_1_b","aizu_online_judge::dpl::dpl_1_c","aizu_online_judge::dpl::dpl_1_d","aizu_online_judge::dpl::dpl_1_e","aizu_online_judge::dpl::dpl_1_f","aizu_online_judge::dpl::dpl_1_g","aizu_online_judge::dpl::dpl_1_h","aizu_online_judge::dpl::dpl_1_i","aizu_online_judge::dpl::dpl_3_a","aizu_online_judge::dpl::dpl_3_b","aizu_online_judge::dpl::dpl_3_c","aizu_online_judge::dsl","","","","","","","","","","","","","","","","","","aizu_online_judge::dsl::dsl_1_a","aizu_online_judge::dsl::dsl_1_b","aizu_online_judge::dsl::dsl_2_a","aizu_online_judge::dsl::dsl_2_b","aizu_online_judge::dsl::dsl_2_c","aizu_online_judge::dsl::dsl_2_d","aizu_online_judge::dsl::dsl_2_e","aizu_online_judge::dsl::dsl_2_f","aizu_online_judge::dsl::dsl_2_g","aizu_online_judge::dsl::dsl_2_h","aizu_online_judge::dsl::dsl_2_i","aizu_online_judge::dsl::dsl_3_a","aizu_online_judge::dsl::dsl_3_b","aizu_online_judge::dsl::dsl_3_c","aizu_online_judge::dsl::dsl_3_d","aizu_online_judge::dsl::dsl_4_a","aizu_online_judge::dsl::dsl_5_a","aizu_online_judge::dsl::dsl_5_b","aizu_online_judge::grl","","","","","","","","","","","","","","","","","","aizu_online_judge::grl::grl_1_a","aizu_online_judge::grl::grl_1_b","aizu_online_judge::grl::grl_1_c","aizu_online_judge::grl::grl_2_a","aizu_online_judge::grl::grl_2_b","aizu_online_judge::grl::grl_3_a","aizu_online_judge::grl::grl_3_b","aizu_online_judge::grl::grl_3_c","aizu_online_judge::grl::grl_4_a","aizu_online_judge::grl::grl_4_b","","aizu_online_judge::grl::grl_5_a","aizu_online_judge::grl::grl_5_b","aizu_online_judge::grl::grl_5_c","aizu_online_judge::grl::grl_5_d","aizu_online_judge::grl::grl_5_e","aizu_online_judge::grl::grl_6_a","aizu_online_judge::grl::grl_6_b","aizu_online_judge::grl::grl_7_a","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a"],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  1ms","✅  AC  3ms","✅  AC  8ms","✅  AC  6ms","✅  AC  9ms","✅  AC  1ms","✅  AC  12ms","✅  AC  72ms","✅  AC  3ms","✅  AC  30ms","✅  AC  18ms","✅  AC  6ms","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","✅  AC  5ms","✅  AC  27ms","✅  AC  16ms","✅  AC  14ms","✅  AC  446ms","✅  AC  41ms","✅  AC  53ms","✅  AC  56ms","✅  AC  77ms","✅  AC  77ms","✅  AC  60ms","✅  AC  5ms","✅  AC  3ms","✅  AC  219ms","✅  AC  129ms","✅  AC  64ms","✅  AC  6ms","✅  AC  9ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","✅  AC  75ms","✅  AC  6ms","✅  AC  7ms","✅  AC  25ms","✅  AC  0ms","✅  AC  3ms","✅  AC  4ms","✅  AC  8ms","✅  AC  0ms","✅  AC  3ms","","✅  AC  9ms","✅  AC  4ms","✅  AC  115ms","✅  AC  67ms","✅  AC  196ms","✅  AC  0ms","✅  AC  1ms","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]]],"p":[],"a":{"verify":[16,17,18,19,20,21,22,23,24,25,26,27,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,82,83,84,85,86,87,88,89,90,91,93,94,95,96,97,98,99,100,102]}},\
"competitive":{"doc":"github","t":[0,0,14,14,14,0,14,14,0,14,14,0,0,14,14,14,14,0,14,14,14,14,0,0,14,14,14,14,14,0,0,0,16,16,8,8,3,8,8,3,8,3,8,3,3,8,3,3,3,8,8,8,8,3,3,16,16,8,3,3,8,8,3,3,3,3,3,3,3,3,3,8,16,3,8,10,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,16,8,3,3,3,3,3,8,3,3,8,3,3,3,8,3,11,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,12,11,10,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,10,11,5,10,5,11,11,10,10,10,5,10,10,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,16,3,8,3,3,3,3,3,3,3,3,3,16,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,16,3,3,3,3,3,3,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,4,3,13,13,17,3,3,13,13,13,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,6,6,3,3,6,6,3,3,3,3,3,3,3,3,3,3,6,6,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,0,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,6,6,3,6,6,3,8,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,8,8,8,6,6,18,18,3,3,3,3,6,8,3,3,3,3,16,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,5,5,5,11,5,11,11,12,12,12,11,11,11,11,11,11,11,11,5,11,11,11,5,11,5,5,5,11,12,11,0,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,11,5,5,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,5,11,11,11,11,5,11,5,5,10,11,11,11,11,11,5,12,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,8,3,16,3,16,8,3,8,8,8,3,3,8,16,8,16,3,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,0,10,10,10,10,10,10,10,11,11,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,6,6,3,3,6,6,6,6,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,3,8,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,3,8,3,3,8,11,11,11,11,5,10,11,11,11,10,5,11,11,11,11,11,10,11,11,11,11,3,18,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,8,3,3,3,3,18,8,18,8,18,8,3,16,16,16,8,3,8,18,18,3,3,3,16,18,18,3,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,12,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,12,11,11,10,11,11,12,11,11,11,11,11,5,5,5,5,5,10,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,3,3,3,3,8,3,3,13,3,3,3,3,4,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,11],"n":["algebra","algorithm","capture","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","math","max","min","minmax","monoid_fold","num","prelude","prepare_io","rand","rand_value","scan","scan_value","string","tools","tree","A","AT","AbelianGroup","AbelianMonoid","AdditiveOperation","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","FindMajorityOperation","FirstOperation","Group","Idempotent","IdempotentMonoid","Invertible","LastOperation","LinearOperation","M","MT","Magma","MaxOperation","MinOperation","Monoid","MonoidAction","MultiplicativeOperation","PermutationOperation","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","SemiGroup","T","Top2Operation","Unital","act","act","act","act","act","act","act","act_assign","act_assign","all_one","all_zero","aoperate","aoperate","aunit","aunit","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","moperate","moperate","munit","munit","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","0","Answer","Bisect","BitDp","ChtLine","ConvexHullTrick","DivisorTransform","IndependentSubSet","MoSolver","MultipleTransform","RhoPath","SliceBisectExt","SlideMinimum","SubsetTransform","SupersetTransform","Trisect","XorBasis","add_line","answer","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_rho","check","chromatic_number","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","combinations","combinations_with_replacement","convolve","convolve","convolve","convolve","default","default","default","default","elements","eq","eq","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","halve","ind","insert","insert","into","into","into","into","into","into","into","into","into","into","into","is_element","is_subset","k_colorable","mo_solve","mo_solve","mobius_transform","mobius_transform","mobius_transform","mobius_transform","n","ne","ne","new","new","new","new","new","new","next_minimum","next_section","not_elements","permutations","position_bisect","product","query","reduce","remove","rfind_bisect","rposition_bisect","run_length_encoding","section_end","section_end","slide_minimum","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","from","from","from","from","from","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Accumulate","Alphabet","AlwaysAcceptingAutomaton","Automaton","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","ContainAutomaton","ContainCounterAutomaton","DequeAggregation","DisjointSparseTable","Effect","GreaterThanAutomaton","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LessThanAutomaton","MergingUnionFind","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","SegmentTree","SegmentTreeMap","State","Static2DTree","Trie","UnionAutomaton","UnionFind","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_count","add_count","all_group_members","all_group_members","all_group_members","append","as_slice","automaton_dp","back","bit_length","bit_length","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_inplace","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count","count_ones","count_zeros","dd","default","default","default","default","default","default","default","default","drain","drain_with","drain_with","eq","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get_difference","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","get_weight","hash","height","index","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","keys","keys","last","len","len","len","len","lower_bound","members","members","members","ne","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next_count","next_node","not","ones","partial_cmp","pop","pop_back","pop_front","pop_left_if","pop_left_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","range","range","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove_count","remove_count","reverse","roots","roots","roots","rposition_acc","rposition_acc","rposition_acc","rposition_acc","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update_isize","values","values","with_capacity","0","Ccw","Circle","Clockwise","CounterClockwise","EPS","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","Point","Real","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","ne","ne","ne","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Adjacency","AdjacencyListGraph","AdjacencyListGraphScanner","BidirectionalGraphScanner","BidirectionalSparseGraph","Dinic","DinicBuilder","DirectedGraphScanner","DirectedSparseGraph","EdgeListGraph","EdgeListGraphScanner","GridGraph","LowLink","PrimalDual","PrimalDualBuilder","SparseGraph","StronglyConnectedComponent","TreeGraphScanner","TwoSatisfiability","UndirectedGraphScanner","UndirectedSparseGraph","add_edge","add_edge","add_inner","add_nand","add_or","adjacency_list_graph","articulation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","change_edge","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","components","edge_list_graph","edges","elist","esize","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","grid_graph","has_loop","id","index","into","into","into","into","into","into","into","low","maximum_flow","maximum_flow_limited","minimum_cost_flow","minimum_cost_flow_limited","new","new","new","new","new","ord","set_false","set_true","size","sparse_graph","start","to","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vsize","Adjacency","AdjacencyListGraph","AdjacencyListGraphScanner","add_edge","add_undirected_edge","adjacency","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","default","eq","esize","fmt","fmt","from","from","from","graph","hash","id","into","into","into","mscan","ne","new","new","new","partial_cmp","to","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vertices","vsize","EdgeListGraph","EdgeListGraphScanner","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","edges","edges_size","fmt","from","from","from_edges","index","into","into","minimum_spanning_arborescence","minimum_spanning_tree","mscan","new","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vertices","vertices_size","Adjacency4","Adjacency8","GridGraph","adjacency4","adjacency8","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","eq","fmt","fmt","fmt","from","from","from","hash","into","into","into","into_iter","into_iter","ne","new","next","next","partial_cmp","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Adjacency","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","SparseGraph","SparseGraphConstruction","SparseGraphScanner","TreeGraphScanner","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","adjacencies","bellman_ford","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","construct_graph","construct_graph","construct_graph","construct_graph","default","default","default","default","dfs_order","dfs_tree","dijkstra","edges","edges_size","elist","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from_edges","hash","hash","hash","hash","id","into","into","into","into","into","into","into","mscan","mscan","ne","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_depth","tree_dp_bottom_up","tree_dp_top_down","tree_order","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vertices","vertices_size","warshall_floyd","weighted_tree_depth","BabyStepGiantStep","DefaultFormalPowerSeriesMultiplier","EulerPhiTable","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","FormalPowerSeriesMultiplier","Fps","Fps998244353","MOD","MOD","Matrix","MemorizedFactorial","Mersenne127","Mersenne61","Ntt998244353","NttModulus","NumberTheoreticTransform","Polynomial","PrimeTable","SmallModMemorizedFactorial","T","add","add","add_assign","add_assign","assign","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convert","convolve","convolve","convolve","convolve2","convolve3","convolve_fft","convolve_it","convolve_mint","convolve_ref","count_divisors","data","data","data","default","default","default","diff","div","div","div_assign","div_assign","divisors","eq","eq","eq","euler_phi","exp","extgcd","extgcd_binary","extgcd_loop","eye","fact","factorial","fast_fourier_transform_impls","find_factor","floor_sum","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_binary","get","get_mod","get_mod","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inv_fact","inverse","is_prime","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","linear_congruence","log","miller_rabin","mod_add","mod_add","mod_div","mod_div","mod_inv","mod_inv","mod_mul","mod_mul","mod_neg","mod_neg","mod_one","mod_one","mod_sub","mod_sub","mod_zero","mod_zero","modinv","modinv_extgcd_binary","modinv_loop","moebius","mul","mul","mul_assign","mul_assign","ne","ne","neg","new","new","new","new","new","new","number_theoretic_transform_impls","one","one","permutation","pow","pow","pow","pow","prefix","prime_factors","prime_factors","prime_factors_rho","primes","primitive_root","rank","rem","rem_assign","resize","row_reduction","segmented_sieve_primes","shape","shl","shl_assign","shr","shr_assign","solve","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zeros","zeros","convolve_fft","fast_fourier_transform","MInt1811939329","MInt2013265921","MInt2113929217","Modulo1811939329","Modulo2013265921","Modulo2113929217","NttCache","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","local_key","local_key","local_key","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","primitive_root","primitive_root","primitive_root","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","BinaryRepr","Bounded","Complex","Error","ExtendedGcd","Inner","IntBase","MInt","MIntBase","MIntConvert","One","QuadDouble","Saturating","Signed","Signed","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","conjugate","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div2","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","dot","eq","eq","eq","eq","eq","extgcd","extgcd","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","hash","hash","hash","hash","i","im","index","inner","into","into","into","into","into","into","into","inv","is_maximum","is_maximum","is_minimum","is_minimum","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_zero","is_zero","is_zero","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","maximum","maximum","maximum","minimum","minimum","minimum","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","ne","ne","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new_unchecked","norm","not","not","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","product","product","re","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","renormalize","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sqrt","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","local_key","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","primitive_root","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt998244353","Modulo998244353","MontgomeryReduction32","borrow","borrow_mut","from","from","from","from","get_mod","get_mod","into","into","into","into","mod_into","mod_into","mod_into","n1","n1","n2","n2","n3","n3","r","r","r","reduce","reduce","try_from","try_into","type_id","Chars","Read","Scanner","Usize1","Write","by_ref","by_ref","bytes","chain","echo","flush","initializer","is_read_vectored","is_write_vectored","read","read_all_unchecked","read_exact","read_to_end","read_to_string","read_vectored","take","write","write_all","write_all_vectored","write_fmt","write_vectored","KnuthMorrisPratt","MOD","MultipleRollingHash","RollingHash","SuffixArray","Zarray","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","find","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash_once","index","index","into","into","into","into","into","longest_common_prefix_array","mersenne_mod","mersenne_mul","mersenne_mul_mod","new","new","new","new","new","new_rand","search","search_all","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","AssociatedValue","CharWithBase","Chars","CharsWithBase","Collect","END_TEMP","GetDistinctMut","IS_MAXIMIZE","IterScan","LOG_TABLE_SIZE","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialOrdExt","RandIter","RandomSpec","SEED","START_TEMP","Scanner","SimuratedAnnealing","SizedCollect","T","TEMP_RATIO","TIME_LIMIT","TotalOrd","UPDATE_INTERVAL","Usize1","Xorshift","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","default","echo","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_accepted","is_end","iter","iter_count","local_key","log_table","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","ne","ne","new","new","new","new","next","now","partial_cmp","partial_cmp","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","scan","scan","scan","scan","scan","scan_vec","set","set","shuffle","temperture","time","time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with","with","0","0","0","0","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","TreeRec","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dfs","dp","eidx","ep","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","n","ne","new","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","time_seeded","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vsize","vsize","with_seed","tree_depth","tree_size","weighted_tree_depth","tree_center","tree_dp_bottom_up","tree_dp_top_down"],"q":["competitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebracompetitive::algorithmcompetitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structurecompetitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::adjacency_list_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::edge_list_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::grid_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::sparse_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::mathcompetitive::math::fast_fourier_transform_impls","","competitive::math::number_theoretic_transform_impls","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num::mint_basiccompetitive::num::montgomery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::toolscompetitive::treecompetitive::tree::depth","","","competitive::tree::tree_center","competitive::tree::tree_dp",""],"d":["algebra","algorithm","","","","","","","data structures","","","","graph structures and algorithms","Implement [<code>AssociatedValue</code>].","","","","mathematical datas","","","","","","","","Declare random values using [<code>RandomSpec</code>].","Return a random value using [<code>RandomSpec</code>].","","","string algorithems","","tree algorithems","","","commutative group","commutative monoid","$+$","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","Find majority(strict) of a sequence.","retain the first element","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","","","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","binary operation to select smaller element","associative binary operation and an identity element","","$\\\\times$","","","","","","","","","associative binary operation","type of operands: $T$","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$a$ where $a \\\\circ x = e$","","","","","","","","","","","","","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","binary search helper","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","ternary search helper","Basis of xor operation.","k-th add_line(a_k, b_k): a_k >= a_{k+1}","","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","","The smallest number of colors needed to color a graph.","","","","","","","","","","","choose distinct <code>r</code> elements from <code>n</code> in sorted order","","choose <code>r</code> elements from <code>n</code> in sorted order","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","","","","","","","","","get i-th value of rho path","return between two elements","","","Return true if inserted element cannot be consisted by …","","","","","","","","","","","","","","","","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","","Create a empty space.","","","","Divide into 3 sections","","choose distinct <code>r</code> elements from <code>n</code> in any order","Returns the first index that satisfies a predicate. if …","choose <code>r</code> elements from <code>n</code> independently","","Return (reduced basis, coordinate). Coordinate means if …","","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","the end condition of binary search","the end condition of ternary search","","","like <code>(left..right).min_by_key(f)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return accumlate of [0, k)","fold [0, k]","fold [0, i] x [0, j]","fold [0, k)","fold [0, i) x [0, j)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of [l, r)","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","Insert values and operate old range-value pairs.","Insert and operate old range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","get k-th smallest value in range","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","add a, a+d, …, a+(k-1)d into [l, l + k)","","","add a, a+d, …, a+(k-1)d into [l, l + k)","","","","","","","a–b-vc","a–b-^c","","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","Return the number of edges.","","","","Construct graph from edges.","","","","tarjan","","","","Construct empty graph.","","","","","","","","Return an iterator over graph vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","Return a slice of adjacency vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the number of edges.","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","","","","","","","","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","max(a.len(), b.len()) * max(a) * max(b) < 3.64 * 10^18","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27","","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e","","","Sum of Floor of Linear","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 <= i <= n)","","","","","return: (y,z)","","","","","","","","","","","","","","","","","","","","0 < a < p, gcd(a, p) == 1, p is prime > 2","","g(d) = Sigma mu(d) * f(n/drait for operations of integer in binary representation.","Trait for max/min bounds","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","Trait for basic primitive integer operations.","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationsgcdm is prime, n = 2^32","","","","","","","m","","","","","","","","","n^1 mod m","","n^2 mod m","","n^3 mod m","","","(-m)^{-1} mod n","(-m)^{-1} mod n","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adaptor for this instance of …","Transforms this <code>Read</code> instance to an [<code>Iterator</code>] over its …","Creates an adaptor which will chain this stream with …","","Flush this output stream, ensuring that all …","Determines if this <code>Read</code>er can work with buffers of …","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Pull some bytes from this source into the specified …","","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them …","Read all bytes until EOF in this source, appending them …","Like <code>read</code>, except that it reads into a slice of buffers.","Creates an adaptor which will read at most <code>limit</code> bytes …","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","S [l, r)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","Trait for spec of generating random value.","","","","","","Type of value.","","","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e >= n then …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,1,3,4,5,6,7,8,1,1,9,10,1,1,1,1,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,15,16,17,20,22,25,28,28,1,1,1,1,2,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,2,2,29,29,2,2,27,27,15,16,28,28,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3,4,5,6,7,8,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,30,31,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,32,34,0,31,35,36,33,37,38,34,39,40,41,42,31,35,36,33,37,38,34,39,40,41,42,37,37,36,35,31,35,36,33,34,31,35,36,33,34,0,31,0,39,40,41,42,31,36,33,34,31,31,36,37,34,43,0,31,35,36,33,37,34,31,35,36,33,37,38,34,39,40,41,42,35,34,37,37,44,35,32,34,31,35,36,33,37,38,34,39,40,41,42,31,31,35,32,32,39,40,41,42,35,31,36,36,33,38,34,41,42,38,45,31,0,43,0,33,34,32,43,43,0,44,45,0,31,0,31,35,36,33,34,31,35,36,33,37,38,34,39,40,41,42,31,35,36,33,37,38,34,39,40,41,42,31,35,36,33,37,38,34,39,40,41,42,36,39,40,41,42,0,0,0,0,0,46,47,48,49,50,46,47,48,49,50,48,50,48,50,48,50,46,47,50,46,47,48,50,46,47,46,47,46,48,50,46,47,48,49,50,46,47,48,50,46,47,46,47,46,46,47,48,49,50,0,0,0,0,50,46,46,47,48,49,50,46,47,48,49,48,50,46,47,48,49,50,46,47,48,49,50,46,47,48,49,50,0,51,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,0,0,0,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,64,65,66,67,66,67,68,69,70,66,71,0,72,60,61,73,73,73,73,73,73,52,53,54,55,56,57,58,61,63,59,64,65,73,66,67,74,75,76,77,78,79,80,71,81,82,72,83,68,69,70,62,52,53,54,55,56,57,58,61,63,59,64,65,73,66,67,74,75,76,77,78,79,80,71,81,82,72,83,68,69,70,62,78,66,67,79,80,63,59,64,65,73,66,67,74,76,77,78,79,80,71,81,82,72,68,69,63,59,64,65,73,66,67,74,76,77,78,79,80,71,81,82,72,68,69,73,80,79,83,73,73,78,59,73,66,67,79,80,82,72,66,79,80,73,66,66,67,67,79,80,83,68,69,70,83,70,70,63,59,64,65,73,66,67,74,76,77,78,79,80,71,81,82,72,68,69,63,64,65,74,76,77,71,81,76,77,71,81,82,72,74,52,53,54,55,56,57,58,61,63,59,64,65,73,66,67,74,75,76,77,78,79,80,71,81,82,72,83,68,69,70,62,61,63,66,66,67,67,79,80,76,71,72,64,65,73,66,67,76,77,79,71,81,69,79,80,80,79,79,80,69,73,74,74,51,52,53,54,55,56,57,58,59,79,80,83,83,79,80,52,53,54,55,56,57,58,61,63,59,64,65,73,66,67,74,75,76,77,78,79,80,71,81,82,72,83,68,69,70,62,66,67,82,72,69,66,67,66,67,82,66,67,82,72,64,68,69,70,73,55,56,59,64,65,73,66,67,74,75,76,77,78,79,80,71,81,82,72,83,68,69,70,62,51,52,53,54,55,56,57,58,59,83,83,73,73,73,82,72,72,79,80,79,80,76,77,71,81,82,72,72,62,67,75,62,60,60,60,60,61,62,62,66,67,79,80,66,67,72,68,69,70,76,77,71,81,68,70,62,60,60,61,60,60,61,64,65,73,76,77,71,81,73,73,73,73,73,73,68,69,70,63,59,64,65,73,66,67,74,76,77,78,79,80,71,81,82,72,68,69,52,53,54,55,56,57,58,61,63,59,64,65,73,66,67,74,75,76,77,78,79,80,71,81,82,72,83,68,69,70,62,52,53,54,55,56,57,58,61,63,59,64,65,73,66,67,74,75,76,77,78,79,80,71,81,82,72,83,68,69,70,62,52,53,54,55,56,57,58,61,63,59,64,65,73,66,67,74,75,76,77,78,79,80,71,81,82,72,83,68,69,70,62,68,69,70,64,65,76,77,78,71,81,78,66,67,66,84,0,0,85,85,0,0,0,85,85,85,0,0,86,87,88,84,85,86,87,88,84,85,87,88,85,86,87,88,84,85,86,87,88,84,85,0,85,86,0,0,86,88,87,88,88,87,88,86,87,88,84,85,86,87,88,84,85,86,87,88,84,85,88,88,86,87,88,84,85,87,88,87,88,86,87,88,86,87,88,84,85,87,88,87,88,86,87,88,84,85,86,87,88,84,85,86,87,88,84,85,86,87,88,84,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,90,91,91,91,0,92,92,89,93,90,94,95,91,92,89,93,90,94,95,91,92,89,90,93,89,93,90,95,91,89,93,90,95,91,95,0,96,96,97,89,90,89,93,90,94,95,91,92,89,93,90,94,95,91,95,89,90,93,94,97,0,95,98,95,92,89,93,90,94,95,91,92,93,93,94,94,92,89,90,95,91,92,91,91,95,0,96,98,89,93,90,95,91,92,89,93,90,94,95,91,92,89,93,90,94,95,91,91,92,89,93,90,94,95,91,97,0,0,0,97,97,97,99,100,97,99,100,97,100,97,100,97,100,100,97,100,97,100,97,99,100,97,97,100,100,99,100,97,99,100,99,100,97,100,100,100,97,99,100,97,99,100,97,99,100,97,97,97,0,0,101,102,101,102,102,102,102,102,102,101,102,102,102,101,102,102,102,101,101,102,102,101,102,101,102,101,102,102,102,0,0,0,103,103,103,104,105,103,104,105,103,104,105,103,104,105,103,103,103,104,105,103,104,105,103,103,104,105,104,105,103,103,104,105,103,103,104,105,103,104,105,103,104,105,103,104,105,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,96,96,106,107,108,109,110,98,96,106,107,108,109,110,98,96,108,109,110,98,96,108,109,110,98,96,108,109,110,98,111,108,109,110,108,109,110,98,96,96,96,96,96,96,108,109,110,98,108,109,110,98,96,96,106,107,108,109,110,98,96,96,108,109,110,98,98,106,107,108,109,110,98,96,106,107,98,106,107,98,108,109,110,98,96,98,112,113,114,96,96,96,108,109,110,98,96,96,96,96,96,96,96,96,106,107,108,109,110,98,96,106,107,108,109,110,98,96,106,107,108,109,110,98,96,96,96,96,96,0,0,0,0,0,0,0,0,0,115,116,0,0,0,0,0,0,0,0,0,0,117,118,118,118,118,119,0,120,121,115,116,122,123,118,124,125,119,126,127,120,121,115,116,122,123,118,124,125,119,126,127,122,123,118,124,125,119,126,127,122,123,118,124,125,119,126,127,122,123,121,117,120,121,0,0,0,121,0,121,126,118,124,119,123,118,119,118,118,118,118,118,0,118,124,119,0,118,0,0,0,124,122,123,0,0,0,122,123,118,124,125,119,126,127,126,120,121,115,116,122,123,118,118,118,118,124,125,119,126,127,118,118,124,119,0,0,127,115,116,122,118,124,124,119,118,124,124,119,118,120,121,115,116,122,123,118,124,125,119,126,127,122,118,122,124,126,0,122,0,0,118,119,0,118,0,115,116,115,116,115,116,115,116,115,116,115,116,115,116,115,116,0,0,0,0,118,118,118,118,124,119,118,122,123,124,125,126,127,0,118,119,122,0,118,124,119,118,0,126,0,0,128,124,118,118,118,124,0,124,118,118,118,118,125,124,118,129,118,118,118,118,122,123,118,124,125,119,126,127,118,120,121,115,116,122,123,118,124,125,119,126,127,120,121,115,116,122,123,118,124,125,119,126,127,120,121,115,116,122,123,118,124,125,119,126,127,118,119,118,124,0,0,0,0,0,0,0,0,0,130,131,132,133,130,131,132,133,133,133,133,130,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,132,133,130,131,132,130,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,132,133,130,131,132,130,131,132,130,131,132,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,130,131,132,130,131,132,130,131,132,130,131,132,130,131,132,130,131,132,130,131,132,133,130,131,132,133,130,131,132,133,130,131,132,133,134,135,136,0,0,0,137,0,138,0,0,0,0,0,0,0,0,139,0,140,0,0,140,141,134,134,134,134,134,134,135,135,135,135,135,135,136,139,139,141,141,141,141,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,142,142,136,136,141,141,141,141,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,142,142,141,134,135,134,135,134,135,134,135,134,135,134,135,143,141,134,135,142,136,143,141,134,135,142,136,141,134,135,142,136,141,134,135,142,136,134,135,141,144,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,144,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,141,141,134,135,142,136,141,141,141,141,134,135,135,135,135,135,135,135,135,135,135,135,135,142,142,136,136,141,141,141,141,134,135,135,135,135,135,135,135,135,135,135,135,135,142,142,137,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,141,141,134,135,142,136,139,139,141,134,134,135,135,142,142,136,136,145,143,141,134,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,135,142,142,142,142,142,142,142,142,142,142,142,142,142,136,136,134,135,142,136,137,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,143,139,134,134,134,134,134,134,135,135,135,135,135,135,138,142,141,134,135,142,141,141,136,142,145,143,141,134,135,142,136,142,146,146,146,146,140,134,134,134,134,134,134,135,135,135,135,135,135,147,147,140,134,134,134,134,134,134,135,135,135,135,135,135,136,148,148,136,139,139,144,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,146,134,135,146,134,135,0,138,138,145,138,138,138,138,138,138,138,138,139,139,0,141,141,141,141,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,142,142,136,136,141,141,141,141,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,142,142,141,134,135,136,141,134,134,134,134,134,134,135,135,135,135,135,135,142,136,141,142,136,142,141,134,135,147,141,134,135,142,134,135,136,141,137,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,142,141,141,142,142,141,134,135,135,135,135,135,135,135,135,135,135,135,135,134,135,135,135,135,135,135,135,135,135,135,135,135,137,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,136,144,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,144,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,144,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,142,146,146,146,146,147,147,148,148,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,139,134,134,134,134,134,134,135,135,135,135,135,135,140,134,134,134,134,134,134,135,135,135,135,135,135,142,136,142,141,141,141,141,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,142,142,136,141,141,141,141,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,142,142,141,141,142,142,141,134,135,142,136,134,135,142,136,144,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,141,143,141,134,135,142,136,143,141,134,135,142,136,143,141,134,135,142,136,141,140,134,134,134,134,134,134,135,135,135,135,135,135,143,143,148,141,134,135,142,0,0,0,0,0,0,0,0,0,0,0,0,149,150,151,152,153,154,149,150,151,152,153,154,149,149,149,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,149,150,151,152,153,154,149,149,149,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,150,149,150,151,152,153,154,149,150,151,152,153,154,149,149,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,154,154,154,154,154,154,149,150,151,152,153,154,149,150,151,152,153,154,149,150,151,152,153,154,149,150,151,152,153,154,149,149,150,151,152,153,154,149,150,151,152,153,154,150,153,154,149,150,151,152,153,154,149,150,151,152,153,154,149,150,151,152,153,154,0,0,0,155,155,155,155,155,155,156,155,155,155,155,155,155,155,155,156,155,156,155,156,155,155,156,156,156,156,155,155,155,0,0,0,0,0,157,158,157,157,0,158,157,157,158,157,0,157,157,157,157,157,158,158,158,158,158,0,159,0,0,0,0,160,159,161,162,163,160,159,161,162,163,160,159,161,162,163,160,159,161,162,163,159,161,159,161,160,159,161,162,163,160,159,161,162,163,159,162,163,160,159,161,162,163,162,159,159,159,160,159,161,162,163,161,163,160,160,159,161,162,163,160,159,161,162,163,160,159,161,162,163,160,159,161,162,163,164,165,166,167,0,0,0,0,0,168,0,168,0,168,0,0,169,170,171,0,0,0,168,168,0,0,0,172,168,168,0,168,0,0,168,173,174,164,175,176,165,177,166,178,179,167,168,173,174,164,175,176,165,177,166,178,179,167,180,180,173,164,175,176,165,177,166,178,179,173,164,175,176,165,177,166,178,179,164,167,168,173,0,164,167,168,173,174,164,175,176,165,177,166,178,179,168,173,174,164,175,176,165,177,166,178,179,167,173,173,173,172,172,171,164,168,173,174,164,175,176,165,177,166,178,179,167,174,168,168,175,168,172,168,180,172,172,170,175,165,166,178,164,167,168,173,175,178,174,168,164,167,181,173,164,168,173,181,181,173,173,0,0,0,0,0,169,175,176,177,179,175,172,172,173,168,173,168,173,164,175,176,165,177,166,178,179,168,173,174,164,175,176,165,177,166,178,179,167,168,173,174,164,175,176,165,177,166,178,179,167,168,173,174,164,175,176,165,177,166,178,179,167,172,172,182,183,184,185,0,0,0,0,0,0,0,0,0,186,0,0,0,0,0,0,0,186,182,183,184,185,187,188,189,190,191,192,193,194,186,195,196,182,183,184,185,187,188,189,190,191,192,193,194,186,195,196,187,188,189,190,192,194,186,196,187,188,189,190,192,194,186,196,195,197,191,196,194,187,194,186,187,188,189,190,192,194,186,195,196,182,183,184,185,187,188,189,190,191,192,193,194,186,195,196,189,186,195,195,0,182,183,184,185,187,188,189,190,191,192,193,194,186,195,196,190,193,187,188,189,196,186,187,188,189,193,194,195,196,192,187,193,188,188,188,189,193,193,182,183,184,185,197,191,188,188,188,195,187,188,189,190,192,194,186,196,182,183,184,185,187,188,189,190,191,192,193,194,186,195,196,182,183,184,185,187,188,189,190,191,192,193,194,186,195,196,182,183,184,185,187,188,189,190,191,192,193,194,186,195,196,193,188,193,197,191,195,113,113,113,113,113,113],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullbool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["i64",15]]],[[]],[[["u64",15]],[["vec",3],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],[["usize",15],["rhopath",3]]],[[],["bool",15]],[[],["usize",15]],[[],["bitdp",3]],[[],["independentsubset",3]],[[],["chtline",3]],[[],["convexhulltrick",3]],[[],["xorbasis",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]],["combinations",3]],[[["usize",15]]],[[["vec",3]],["vec",3]],[[["vec",3]],["vec",3]],[[["vec",3]],["vec",3]],[[["vec",3]],["vec",3]],[[],["bitdp",3]],[[],["chtline",3]],[[],["convexhulltrick",3]],[[]],[[["usize",15]]],[[["bitdp",3]],["bool",15]],[[["chtline",3]],["bool",15]],null,[[["u64",15]],[["option",4],["u64",15]]],[[],["option",4]],[[["usize",15]],[["vec",3],["usize",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],null,[[["usize",15]]],[[]],null,[[["usize",15]]],[[["u64",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],null,[[["bitdp",3]],["bool",15]],[[["chtline",3]],["bool",15]],[[["i64",15]]],[[]],[[["usize",15]]],[[]],[[["vec",3],["usize",15]]],[[["vec",3],["usize",15]]],[[],["i64",15]],[[]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]]],[[["i64",15]],["i64",15]],[[["u64",15]]],[[["usize",15]]],[[],["option",4]],[[],["usize",15]],[[["iterator",8]],["vec",3]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],[["vec",3],["usize",15]]],[[["usize",15]],["subsets",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["i64",15]],["i64",15]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["zerooneknapsackproblemsmallitems",3]],[[],["longestincreasingsubsequence",3]],[[]],[[]],[[]],[[]],null,null,null,[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[],[["usize",15],["hashmap",3],["vec",3]]],[[],[["usize",15],["hashmap",3],["vec",3]]],[[],[["usize",15],["hashmap",3],["vec",3]]],[[]],[[]],[[["usize",15]]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["accumulate",3]],[[],["alwaysacceptingautomaton",3]],[[],["binaryindexedtree",3]],[[],["binaryindexedtree2d",3]],[[],["bitset",3]],[[],["hashcounter",3]],[[],["btreecounter",3]],[[],["disjointsparsetable",3]],[[],["lazysegmenttree",3]],[[],["lazysegmenttreemap",3]],[[],["rangearithmeticprogressionadd",3]],[[],["rangemap",3]],[[],["rangeset",3]],[[],["segmenttree",3]],[[],["segmenttreemap",3]],[[],["queueaggregation",3]],[[],["dequeaggregation",3]],[[],["unionfind",3]],[[],["weightedunionfind",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bitset",3]],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["usize",15]],[[],["u64",15]],[[],["u64",15]],null,[[]],[[],["bitset",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["usize",15],["drain",3]]],[[]],[[]],[[["bitset",3]],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],[["result",4],["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],[["result",4],["usize",15]]],[[["usize",15]],[["rootdata",3],["ref",3]]],[[["usize",15]],[["refmut",3],["rootdata",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["vec",3]]],[[["vec",3]]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]]],[[]],[[],["usize",15]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3],["usize",15]]],[[["usize",15]],[["vec",3],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[],[["iter",3],["usize",15]]],[[],[["usize",15],["iter",3]]],[[],[["usize",15],["keys",3]]],[[],[["usize",15],["keys",3]]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["usize",15]],[["vec",3],["usize",15]]],[[["usize",15]],[["vec",3],["usize",15]]],[[["usize",15]],[["vec",3],["usize",15]]],[[["bitset",3]],["bool",15]],[[["bool",15]]],[[["bool",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["vec",3]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["fn",8],["usize",15]]],[[["rankselectdictionaries",8],["usize",15],["vec",3],["clone",8]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["usize",15]],[[["usize",15]],[["option",4],["usize",15]]],[[]],[[["usize",15]]],[[["bitset",3]],[["option",4],["ordering",4]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[]],[[]],[[]],[[["usize",15],["range",3]],["usize",15]],[[],[["usize",15],["range",3]]],[[["range",3],["range",3]],["vec",3]],[[["usize",15],["range",3]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15],["range",3]],["usize",15]],[[["usize",15],["range",3]],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[],[["vec",3],["usize",15]]],[[],[["vec",3],["usize",15]]],[[],[["vec",3],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]],[["option",4],["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["i64",15]]],[[["usize",15]]],[[["usize",15]]],[[["i64",15],["isize",15],["usize",15]]],[[],[["values",3],["usize",15]]],[[],[["values",3],["usize",15]]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["point",6]],["ccw",4]],[[["point",6]],["ccw",4]],[[["point",6]]],[[],["circle",3]],[[],["line",3]],[[],["linesegment",3]],[[],["real",3]],[[],["ccw",4]],[[]],[[]],[[]],[[]],[[]],[[["vec",3],["point",6]],["f64",15]],[[["ccw",4]],["ordering",4]],[[["point",6]],["bool",15]],[[["vec",3],["point",6]],["f64",15]],[[["vec",3],["point",6]],[["vec",3],["point",6]]],[[],["option",4]],[[],[["point",6],["option",4]]],[[],["point",6]],[[],["point",6]],[[],["f64",15]],[[["point",6]],["f64",15]],[[["point",6]],["f64",15]],[[["circle",3]],["bool",15]],[[["line",3]],["bool",15]],[[["linesegment",3]],["bool",15]],[[["real",3]],["bool",15]],[[["ccw",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["point",6]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["circle",3]],["bool",15]],[[["line",3]],["bool",15]],[[["linesegment",3]],["bool",15]],[[["f64",15],["point",6]]],[[["point",6]]],[[["point",6]]],[[["real",3]],[["ordering",4],["option",4]]],[[["ccw",4]],[["option",4],["ordering",4]]],[[["point",6]],["point",6]],[[["point",6]],["point",6]],[[["point",6]],["point",6]],[[["point",6]],["point",6]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["u64",15]]],[[["usize",15],["u64",15],["i64",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["bidirectionalsparsegraph",6]],["dinic",3]],[[["bidirectionalsparsegraph",6]],["primaldual",3]],[[["usize",15],["u64",15]]],[[],["dinicbuilder",3]],[[],["dinic",3]],[[],["primaldualbuilder",3]],[[],["stronglyconnectedcomponent",3]],[[],["twosatisfiability",3]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3],["vec",3]]],null,null,null,null,[[["intoiterator",8]]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["directedsparsegraph",6]],[[],["bidirectionalsparsegraph",6]],[[],["bidirectionalsparsegraph",6]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],null,null,[[],["bool",15]],null,[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["usize",15]],["u64",15]],[[["usize",15],["u64",15]],["u64",15]],[[["usize",15]]],[[["usize",15],["u64",15]]],[[["undirectedsparsegraph",6]]],[[["usize",15]]],[[["usize",15]]],[[["directedsparsegraph",6]]],[[["usize",15]]],null,[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],[["option",4],["vec",3]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["vec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["adjacency",3]],[[],["adjacencylistgraph",3]],[[]],[[]],[[["adjacency",3]],["ordering",4]],[[],["adjacency",3]],[[],["adjacencylistgraph",3]],[[["adjacency",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],null,[[]],null,[[]],[[]],[[]],[[],["option",4]],[[["adjacency",3]],["bool",15]],[[["usize",15],["bool",15]]],[[["usize",15]],["adjacency",3]],[[["usize",15]],["adjacencylistgraph",3]],[[["adjacency",3]],[["option",4],["ordering",4]]],null,[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["usize",15],["range",3]]],null,null,null,[[]],[[]],[[]],[[]],[[],["edgelistgraph",3]],[[]],[[],["iter",3]],[[],["usize",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["vec",3],["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]],["option",4]],[[],[["bool",15],["vec",3]]],[[],["option",4]],[[["usize",15]]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["usize",15],["range",3]]],[[],["usize",15]],null,null,null,[[["usize",15]],["adjacency4",3]],[[["usize",15]],["adjacency8",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["gridgraph",3]],[[],["adjacency4",3]],[[],["adjacency8",3]],[[]],[[]],[[]],[[["gridgraph",3]],["ordering",4]],[[["gridgraph",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["gridgraph",3]],["bool",15]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[["gridgraph",3]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],[["adjacency",3],["iter",3]]],[[["usize",15]]],[[["usize",15]],[["vec",3],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["directededge",3]],[[],["undirectededge",3]],[[],["bidirectionaledge",3]],[[],["adjacency",3]],[[],["sparsegraph",3]],[[]],[[]],[[]],[[]],[[]],[[["directededge",3]],["ordering",4]],[[["undirectededge",3]],["ordering",4]],[[["bidirectionaledge",3]],["ordering",4]],[[["adjacency",3]],["ordering",4]],[[["vec",3],["usize",15]],["sparsegraph",3]],[[["vec",3],["usize",15]],["sparsegraph",3]],[[["vec",3],["usize",15]],["sparsegraph",3]],[[["vec",3],["usize",15]],["sparsegraph",3]],[[],["directededge",3]],[[],["undirectededge",3]],[[],["bidirectionaledge",3]],[[],["adjacency",3]],[[["usize",15]],[["vec",3],["usize",15]]],[[["usize",15]],[["bool",15],["vec",3]]],[[["usize",15]],[["vec",3],["option",4]]],null,[[],["usize",15]],null,[[["directededge",3]],["bool",15]],[[["undirectededge",3]],["bool",15]],[[["bidirectionaledge",3]],["bool",15]],[[["adjacency",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3],["usize",15]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[["adjacency",3]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["adjacency",3]],[[["directededge",3]],[["option",4],["ordering",4]]],[[["undirectededge",3]],[["option",4],["ordering",4]]],[[["bidirectionaledge",3]],[["option",4],["ordering",4]]],[[["adjacency",3]],[["option",4],["ordering",4]]],null,null,[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3],["usize",15]]],[[],["treecenter",4]],[[["usize",15]],[["vec",3],["u64",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["vec",3],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["range",3],["usize",15]]],[[],["usize",15]],[[],[["vec",3],["vec",3]]],[[["usize",15],["fn",8]],["vec",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["mulassign",8],["usize",15],["clone",8]],[["mulassign",8],["clone",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["memorizedfactorial",3]],[[],["smallmodmemorizedfactorial",3]],[[]],[[],["matrix",3]],[[],["babystepgiantstep",3]],[[],["polynomial",3]],[[],["primetable",3]],[[],["eulerphitable",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["mint",3]],[[["usize",15]],["mint",3]],[[["intoiterator",8]],[["vec",3],["mint",3]]],[[["formalpowerseries",3]],["formalpowerseries",3]],[[["formalpowerseries",3]],["formalpowerseries",3]],[[["vec",3],["mint",3]],[["vec",3],["mint",3]]],[[],[["vec",3],["u64",15]]],[[["vec",3]],[["u128",15],["vec",3]]],[[],[["i64",15],["vec",3]]],[[],[["vec",3],["mint",3]]],[[],[["vec",3],["mint",3]]],[[],[["vec",3],["mint",3]]],[[["u32",15]],["u32",15]],null,null,null,[[]],[[],["formalpowerseries",3]],[[],["polynomial",3]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],[["vec",3],["u64",15]]],[[],["bool",15]],[[["matrix",3]],["bool",15]],[[["polynomial",3]],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[["i64",15]]],[[["i64",15]]],[[["i64",15]]],[[]],null,[[["usize",15]]],null,[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["vec",3]]],[[["vec",3],["vec",3]]],[[["vec",3]]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["usize",15]],["usize",15]],[[]],[[]],[[["usize",15]],["mint",3]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["mint",3]],[[["usize",15]]],null,[[],[["option",4],["matrix",3]]],[[["u32",15]],["bool",15]],[[["mint",3],["mintbase",8]],[["mint",3],["mintbase",8]]],[[["usize",15],["mint",3]],["mint",3]],[[],[["vec",3],["mint",3]]],[[["u64",15]],["u64",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[["usize",15]]],[[["u64",15]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i64",15]],["i64",15]],[[["u64",15]],["u64",15]],[[["i64",15]],["i64",15]],[[["usize",15]],[["hashmap",3],["usize",15],["i64",15]]],[[]],[[]],[[]],[[]],[[["matrix",3]],["bool",15]],[[["polynomial",3]],["bool",15]],[[]],[[["usize",15]]],[[]],[[]],[[["u64",15]]],[[["u32",15]]],[[["usize",15]]],null,[[]],[[]],[[["usize",15]],["mint",3]],[[["u64",15]],["u64",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u32",15]],["vec",3]],[[["u32",15]],["vec",3]],[[["u64",15]],[["vec",3],["u64",15]]],[[["usize",15]],[["vec",3],["usize",15]]],[[],["mint",3]],[[],["usize",15]],[[]],[[]],[[["usize",15]]],[[]],[[["usize",15]],[["vec",3],["usize",15]]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["u64",15]],[["option",4],["u64",15]]],[[],[["option",4],["vec",3]]],[[["usize",15]],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["usize",15]]],[[]],[[],[["i64",15],["vec",3]]],[[["complex",3],["bool",15],["vec",3]],[["complex",3],["vec",3]]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["u64",15]]],[[["isize",15]]],[[["i128",15]]],[[["i64",15]]],[[["i32",15]]],[[["usize",15]]],[[["u128",15]]],[[]],[[["u32",15]]],[[["usize",15]]],[[["i128",15]]],[[["i32",15]]],[[["isize",15]]],[[["i64",15]]],[[["u128",15]]],[[["u32",15]]],[[["u64",15]]],[[]],[[["i64",15]]],[[["u128",15]]],[[["isize",15]]],[[["usize",15]]],[[["u32",15]]],[[]],[[["u64",15]]],[[["i128",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[],["isize",15]],[[],["i128",15]],[[],["i64",15]],[[],["i32",15]],[[],["usize",15]],[[]],[[],["u128",15]],[[],["u64",15]],[[],["u32",15]],[[],["i32",15]],[[],["i128",15]],[[]],[[],["usize",15]],[[],["isize",15]],[[],["u32",15]],[[],["u128",15]],[[],["i64",15]],[[],["u64",15]],[[],["usize",15]],[[],["i128",15]],[[],["u64",15]],[[],["i64",15]],[[],["isize",15]],[[],["i32",15]],[[],["u32",15]],[[]],[[],["u128",15]],[[]],[[],["localkey",3]],[[],["localkey",3]],[[],["localkey",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u32",15]],[[],["i128",15]],[[],["isize",15]],[[],["u64",15]],[[],["i64",15]],[[],["i32",15]],[[],["usize",15]],[[],["u128",15]],[[],["i128",15]],[[],["u32",15]],[[],["i32",15]],[[],["u64",15]],[[],["usize",15]],[[],["u128",15]],[[],["i64",15]],[[],["isize",15]],[[],["i128",15]],[[],["usize",15]],[[],["u64",15]],[[],["i32",15]],[[],["isize",15]],[[],["u128",15]],[[],["u32",15]],[[],["i64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mint",3]],[[],["mint",3]],[[],["mint",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[]],[[["f64",15]]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["complex",3]],[[],["saturating",3]],[[],["wrapping",3]],[[]],[[],["quaddouble",3]],[[]],[[]],[[]],[[]],[[]],[[["saturating",3]],["ordering",4]],[[["wrapping",3]],["ordering",4]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[],["complex",3]],[[],["saturating",3]],[[],["wrapping",3]],[[]],[[],["quaddouble",3]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[]],[[]],[[["f64",15]]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["complex",3]],["bool",15]],[[["saturating",3]],["bool",15]],[[["wrapping",3]],["bool",15]],[[],["bool",15]],[[["quaddouble",3]],["bool",15]],[[],["extendedgcd",3]],[[],["extendedgcd",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u16",15]]],[[["isize",15]]],[[["i16",15]]],[[["u128",15]]],[[["i8",15]]],[[["u8",15]]],[[]],[[["u32",15]]],[[["i128",15]]],[[["i64",15]]],[[["u64",15]]],[[["i32",15]]],[[["usize",15]]],[[["i8",15]]],[[["u128",15]]],[[["isize",15]]],[[["u8",15]]],[[["i16",15]]],[[["u16",15]]],[[["usize",15]]],[[["i128",15]]],[[["u32",15]]],[[["i32",15]]],[[]],[[["u64",15]]],[[["i64",15]]],[[["isize",15]]],[[["u128",15]]],[[["i128",15]]],[[]],[[["i64",15]]],[[["i32",15]]],[[["u16",15]]],[[["u8",15]]],[[["i8",15]]],[[["i16",15]]],[[["usize",15]]],[[["u32",15]]],[[["u64",15]]],[[["f64",15]]],[[]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],[[["u32",15],["str",15]],["result",4]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[]],[[["f64",15]]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[["complex",3]],["bool",15]],[[["saturating",3]],["bool",15]],[[["wrapping",3]],["bool",15]],[[["quaddouble",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["saturating",3]],[["option",4],["ordering",4]]],[[["wrapping",3]],[["option",4],["ordering",4]]],[[["quaddouble",3]],[["option",4],["ordering",4]]],[[["f64",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["usize",15]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[]],[[]],[[]],[[["complex",3]]],[[["complex",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[["u64",15]]],[[["u128",15]]],[[["i8",15]]],[[["u16",15]]],[[["u32",15]]],[[]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["i128",15]]],[[["isize",15]]],[[["usize",15]]],[[["u32",15]]],[[["u128",15]]],[[]],[[["isize",15]]],[[["i128",15]]],[[["i64",15]]],[[["i32",15]]],[[["u64",15]]],[[["usize",15]]],[[["i32",15]]],[[["usize",15]]],[[["u128",15]]],[[["u32",15]]],[[]],[[["isize",15]]],[[["u64",15]]],[[["i128",15]]],[[["i64",15]]],[[["i128",15]]],[[["i64",15]]],[[["u128",15]]],[[["u64",15]]],[[["isize",15]]],[[["u32",15]]],[[["usize",15]]],[[["i32",15]]],[[]],[[["usize",15]]],[[["u64",15]]],[[]],[[["isize",15]]],[[["i64",15]]],[[["u32",15]]],[[["u128",15]]],[[["i128",15]]],[[["i32",15]]],[[["i64",15]]],[[["i128",15]]],[[]],[[["usize",15]]],[[["u128",15]]],[[["u64",15]]],[[["isize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["i8",15]],[[],["u128",15]],[[],["u32",15]],[[],["i64",15]],[[],["u64",15]],[[],["isize",15]],[[],["i32",15]],[[],["u16",15]],[[],["i128",15]],[[],["i16",15]],[[],["u8",15]],[[]],[[],["i32",15]],[[],["i64",15]],[[],["i128",15]],[[],["u128",15]],[[],["u64",15]],[[],["usize",15]],[[],["u32",15]],[[]],[[],["isize",15]],[[],["isize",15]],[[],["i64",15]],[[],["i32",15]],[[],["usize",15]],[[],["u128",15]],[[],["u64",15]],[[],["u32",15]],[[]],[[],["i128",15]],[[],["u32",15]],[[],["i128",15]],[[],["u64",15]],[[],["u128",15]],[[],["usize",15]],[[],["i32",15]],[[]],[[],["i64",15]],[[],["isize",15]],[[],["isize",15]],[[],["i128",15]],[[],["i64",15]],[[],["i32",15]],[[],["usize",15]],[[],["u128",15]],[[],["u64",15]],[[]],[[],["u32",15]],[[],["isize",15]],[[],["u128",15]],[[],["usize",15]],[[],["u64",15]],[[],["i64",15]],[[],["i128",15]],[[]],[[],["localkey",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[],["i64",15]],[[],["u32",15]],[[],["i32",15]],[[],["i16",15]],[[],["u128",15]],[[],["i8",15]],[[],["i128",15]],[[],["isize",15]],[[],["u16",15]],[[],["usize",15]],[[],["u8",15]],[[],["i32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[],["isize",15]],[[],["i128",15]],[[],["usize",15]],[[],["i64",15]],[[],["u64",15]],[[],["isize",15]],[[],["i128",15]],[[],["i64",15]],[[],["i32",15]],[[],["usize",15]],[[],["u32",15]],[[],["u128",15]],[[],["usize",15]],[[],["i32",15]],[[],["u128",15]],[[],["u64",15]],[[],["u32",15]],[[],["i64",15]],[[],["i128",15]],[[],["isize",15]],[[],["usize",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[],["isize",15]],[[],["i32",15]],[[],["i64",15]],[[],["i128",15]],[[],["u128",15]],[[],["usize",15]],[[],["isize",15]],[[],["u64",15]],[[],["i64",15]],[[],["i128",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mint",3]],[[["u32",15]]],[[["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[["i64",15]]],[[["isize",15]]],[[]],[[["i32",15]]],[[],["u32",15]],[[],["u32",15]],[[],["i64",15]],[[],["i32",15]],[[],["isize",15]],[[]],[[],["i32",15]],[[],["i64",15]],[[],["isize",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u64",15]],["u32",15]],[[["u64",15]],["u32",15]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[],["bytes",3]],[[],["chain",3]],[[],["result",6]],[[],[["error",3],["result",4]]],[[],["initializer",3]],[[],["bool",15]],[[],["bool",15]],[[],[["error",3],["usize",15],["result",4]]],[[],["string",3]],[[],[["error",3],["result",4]]],[[["vec",3]],[["error",3],["usize",15],["result",4]]],[[["string",3]],[["error",3],["usize",15],["result",4]]],[[],[["error",3],["usize",15],["result",4]]],[[["u64",15]],["take",3]],[[],[["error",3],["usize",15],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[["arguments",3]],[["error",3],["result",4]]],[[],[["error",3],["usize",15],["result",4]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["knuthmorrispratt",3]],[[],["rollinghash",3]],[[],["multiplerollinghash",3]],[[],["suffixarray",3]],[[],["zarray",3]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["u64",15]],["u64",15]],[[["usize",15]],[["vec",3],["u64",15]]],[[["usize",15]],["u64",15]],[[["usize",15]],[["vec",3],["u64",15]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["u64",15]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],[["vec",3],["usize",15]]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["vec",3]]],[[["u64",15]]],[[]],[[["vec",3]]],[[]],[[["usize",15]]],[[["eq",8]],[["vec",3],["usize",15]]],[[],[["vec",3],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["xorshift",3]],[[],["notemptysegment",3]],[[],["scanner",3]],[[],["usize1",3]],[[],["charwithbase",3]],[[],["chars",3]],[[],["charswithbase",3]],[[],["collect",3]],[[],["sizedcollect",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["notemptysegment",3]],["ordering",4]],[[["totalord",3]],["ordering",4]],[[]],[[]],[[],["result",6]],[[["notemptysegment",3]],["bool",15]],[[["totalord",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["randomspec",8]]],[[["f64",15]],["bool",15]],[[["randomspec",8]],[["randiter",3],["randomspec",8]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]],["bool",15]],[[],["bool",15]],[[],["scanneriter",3]],null,[[],["localkey",3]],null,[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["notemptysegment",3]],["bool",15]],[[["totalord",3]],["bool",15]],[[]],[[["u64",15]]],[[["str",15]]],[[["usize",15]]],[[],["option",4]],null,[[["notemptysegment",3]],[["option",4],["ordering",4]]],[[["totalord",3]],[["ordering",4],["option",4]]],[[["xorshift",3]]],[[["u64",15]],["u64",15]],[[["xorshift",3]]],null,[[],["u64",15]],[[["xorshift",3]],["randiter",3]],[[["xorshift",3]],["randiter",3]],[[],["f64",15]],[[["usize",15],["u64",15]],[["vec",3],["u64",15]]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["option",4]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["vec",3]],[[]],[[]],[[]],null,[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["eulertourforedge",3]],[[],["eulertourforvertex",3]],[[],["eulertourforrichvertex",3]],[[],["lowestcommonancestor",3]],[[],["lcamonoid",3]],[[],["rerooting",3]],[[],["treecenter",4]],[[],["treerec",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["treehasher",3]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15],["undirectedsparsegraph",6]]],null,null,null,[[["treecenter",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["lowestcommonancestor",3],["lcamonoiddispatch",8]]],[[]],[[["undirectedsparsegraph",6]],["u64",15]],[[["undirectedsparsegraph",6],["usize",15]],["u64",15]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],null,[[["treecenter",4]],["bool",15]],[[["usize",15],["undirectedsparsegraph",6]]],[[["undirectedsparsegraph",6]]],[[["usize",15],["undirectedsparsegraph",6]]],[[["usize",15],["undirectedsparsegraph",6]]],[[["undirectedsparsegraph",6]]],[[]],[[["usize",15]]],[[]],null,null,[[["usize",15],["fnmut",8]]],[[["usize",15],["fnmut",8]]],[[["usize",15]]],[[["usize",15],["fnmut",8]]],[[["usize",15],["bool",15],["fnmut",8]]],[[["bool",15],["fnmut",8],["usize",15]]],[[["xorshift",3]],["undirectedsparsegraph",6]],[[["xorshift",3]],["undirectedsparsegraph",6]],[[["xorshift",3]],["undirectedsparsegraph",6]],[[["xorshift",3]],["undirectedsparsegraph",6]],[[["vec",3],["u64",15]]],[[["vec",3],["u64",15]]],[[["usize",15],["fnmut",8]]],[[["usize",15],["fnmut",8]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15],["bool",15],["fnmut",8]]],null,null,[[],["usize",15]],[[],["usize",15]],[[["u64",15]]],[[["usize",15]],[["vec",3],["u64",15]]],[[["usize",15]],[["vec",3],["u64",15]]],[[["usize",15],["fn",8]],["vec",3]],[[],["treecenter",4]],[[["usize",15]]],[[["usize",15]]]],"p":[[8,"MonoidAction"],[8,"Magma"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[3,"PermutationOperation"],[3,"FindMajorityOperation"],[8,"Invertible"],[8,"Unital"],[8,"Monoid"],[8,"BitXorIdentity"],[3,"BitDp"],[8,"MoSolver"],[3,"ConvexHullTrick"],[3,"XorBasis"],[3,"IndependentSubSet"],[3,"ChtLine"],[3,"RhoPath"],[3,"SlideMinimum"],[3,"SubsetTransform"],[3,"SupersetTransform"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"SliceBisectExt"],[8,"Bisect"],[8,"Trisect"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"LongestIncreasingSubsequence"],[8,"Automaton"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"LessThanAutomaton"],[3,"GreaterThanAutomaton"],[3,"ContainAutomaton"],[3,"ContainCounterAutomaton"],[3,"AlwaysAcceptingAutomaton"],[8,"RankSelectDictionaries"],[3,"BitVector"],[3,"WaveletMatrix"],[3,"Accumulate"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"MergingUnionFind"],[3,"SegmentTree"],[3,"DequeAggregation"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"Static2DTree"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"Trie"],[3,"Real"],[4,"Ccw"],[3,"Circle"],[3,"Line"],[3,"LineSegment"],[3,"DinicBuilder"],[3,"PrimalDualBuilder"],[3,"TwoSatisfiability"],[3,"LowLink"],[3,"Dinic"],[3,"PrimalDual"],[3,"StronglyConnectedComponent"],[3,"SparseGraph"],[3,"AdjacencyListGraph"],[3,"Adjacency"],[3,"AdjacencyListGraphScanner"],[3,"Adjacency"],[3,"EdgeListGraphScanner"],[3,"EdgeListGraph"],[3,"GridGraph"],[3,"Adjacency4"],[3,"Adjacency8"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"DirectedEdge"],[3,"UndirectedEdge"],[3,"BidirectionalEdge"],[8,"SparseGraphConstruction"],[6,"DirectedSparseGraph"],[6,"UndirectedSparseGraph"],[6,"BidirectionalSparseGraph"],[3,"Mersenne61"],[3,"Mersenne127"],[8,"FormalPowerSeriesMultiplier"],[3,"FormalPowerSeries"],[3,"Polynomial"],[3,"DefaultFormalPowerSeriesMultiplier"],[3,"NumberTheoreticTransform"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"Matrix"],[3,"BabyStepGiantStep"],[3,"PrimeTable"],[3,"EulerPhiTable"],[8,"NttModulus"],[8,"FormalPowerSeriesCoefficientSqrt"],[3,"Modulo2113929217"],[3,"Modulo1811939329"],[3,"Modulo2013265921"],[3,"NttCache"],[3,"Saturating"],[3,"Wrapping"],[3,"QuadDouble"],[8,"IntBase"],[8,"MIntBase"],[8,"Unsigned"],[8,"Signed"],[3,"Complex"],[3,"MInt"],[3,"ExtendedGcd"],[8,"BinaryRepr"],[8,"MIntConvert"],[8,"Bounded"],[8,"One"],[8,"Zero"],[3,"Modulo2"],[3,"Modulo998244353"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"DynModuloU32"],[3,"DynModuloU64"],[3,"Modulo998244353"],[8,"MontgomeryReduction32"],[8,"Read"],[8,"Write"],[3,"RollingHash"],[3,"KnuthMorrisPratt"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"NotEmptySegment"],[3,"CharWithBase"],[3,"CharsWithBase"],[3,"TotalOrd"],[3,"SimuratedAnnealing"],[8,"IterScan"],[8,"MarkedIterScan"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[3,"Xorshift"],[3,"RandIter"],[3,"Scanner"],[3,"Usize1"],[3,"Chars"],[3,"Collect"],[3,"SizedCollect"],[8,"PartialOrdExt"],[8,"RandomSpec"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[4,"TreeCenter"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"LcaMonoidDefaultId"],[3,"LcaMonoid"],[3,"HeavyLightDecomposition"],[3,"ReRooting"],[3,"TreeHasher"],[3,"TreeRec"],[8,"LcaMonoidDispatch"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0,5,5,0,0,0,5,5,5],"n":["datastructure","graph","math","sample","string","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_kth_smallest","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","bipartitematching","directedmst","lca_euler_tour","lca_hld","scc","convolution_mod","convolution_mod_1000000007","enumerate_primes","exp_of_formal_power_series","factorize","inv_of_formal_power_series","log_of_formal_power_series","pow_of_formal_power_series","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","convolution_mod","convolution_mod_1000000007","enumerate_primes","exp_of_formal_power_series","factorize","inv_of_formal_power_series","log_of_formal_power_series","pow_of_formal_power_series","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","number_of_substrings","suffixarray","zalgorithm"],"q":["library_checker","","","","","library_checker::datastructure","","","","","","","","","","library_checker::datastructure::point_add_range_sum","","library_checker::datastructure::point_set_range_composite","library_checker::datastructure::queue_operate_all_composite","library_checker::datastructure::range_affine_range_sum","library_checker::datastructure::range_kth_smallest","library_checker::datastructure::staticrmq","","library_checker::datastructure::unionfind","library_checker::datastructure::vertex_add_path_sum","library_checker::datastructure::vertex_add_subtree_sum","library_checker::datastructure::vertex_set_path_composite","library_checker::graph","","","","library_checker::graph::bipartitematching","library_checker::graph::directedmst","library_checker::graph::lca","","library_checker::graph::scc","library_checker::math","","","","","","","","","","","","library_checker::math::convolution_mod","library_checker::math::convolution_mod_1000000007","library_checker::math::enumerate_primes","library_checker::math::exp_of_formal_power_series","library_checker::math::factorize","library_checker::math::inv_of_formal_power_series","library_checker::math::log_of_formal_power_series","library_checker::math::pow_of_formal_power_series","library_checker::math::sqrt_mod","library_checker::math::sqrt_of_formal_power_series","library_checker::math::sum_of_floor_of_linear","library_checker::math::two_sat","library_checker::sample","","library_checker::sample::aplusb","library_checker::sample::many_aplusb","library_checker::string","","","library_checker::string::number_of_substrings","library_checker::string::suffixarray","library_checker::string::zalgorithm"],"d":["","","","","","","","","","","","","","","","✅  AC  104ms","✅  AC  140ms","✅  AC  220ms","✅  AC  49ms","✅  AC  721ms","✅  AC  383ms","✅  AC  168ms","✅  AC  140ms","✅  AC  25ms","✅  AC  631ms","✅  AC  156ms","✅  AC  187ms","","","","","✅  AC  167ms","✅  AC  160ms","✅  AC  757ms","✅  AC  403ms","✅  AC  243ms","","","","","","","","","","","","","✅  AC  306ms","✅  AC  697ms","✅  AC  2210ms","✅  AC  1606ms","✅  AC  2314ms","✅  AC  421ms","✅  AC  620ms","✅  AC  2732ms","✅  AC  148ms","✅  AC  1001ms","✅  AC  63ms","✅  AC  283ms","","","✅  AC  0ms","✅  AC  176ms","","","","✅  AC  871ms","✅  AC  1013ms","✅  AC  40ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],null,null,null,[[]],[[]],[[]]],"p":[],"a":{"verify":[15,16,17,18,19,20,21,22,23,24,25,26,31,32,33,34,35,48,49,50,51,52,53,54,55,56,57,58,59,62,63,67,68,69]}}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};