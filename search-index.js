var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":"AAAAAAAAAAAAAAAAFCFCFCFFCCFCFCFCFFCFCFCAAAAAAAAAAAAAAAAAACFCCFCCFCCFCFCCFCCFCCFCCFCCFCCFCCFFFCCFFFFAAAAAAAAAAAAAAAAAACCCCCCFFCCCCFCCCCCFCFCCCFCCFCCFCCFCFCFFCCFCCCFCCCCFCCCCCFCCCCCCFCCFCCFCCFAF","n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","dpl_1_e","levenshtein_distance","KnapsackPloblemSmallValue","dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","dpl_3_a","largest_square","dpl_3_b","largest_rectangle_in_grid","dpl_3_c","largest_rectangle","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","MinOperation","SegmentTree","dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","Static2DTree","dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","dsl_3_b","dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","EdgeListGraphScanner","grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","DirectedGraphScanner","grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","itp1_1_a","itp1_1_a"],"q":[[0,"aizu_online_judge"],[4,"aizu_online_judge::dpl"],[16,"aizu_online_judge::dpl::dpl_1_a"],[17,"aizu_online_judge::dpl::dpl_1_b"],[19,"aizu_online_judge::dpl::dpl_1_c"],[21,"aizu_online_judge::dpl::dpl_1_d"],[23,"aizu_online_judge::dpl::dpl_1_e"],[25,"aizu_online_judge::dpl::dpl_1_f"],[27,"aizu_online_judge::dpl::dpl_1_g"],[29,"aizu_online_judge::dpl::dpl_1_h"],[31,"aizu_online_judge::dpl::dpl_1_i"],[33,"aizu_online_judge::dpl::dpl_3_a"],[35,"aizu_online_judge::dpl::dpl_3_b"],[37,"aizu_online_judge::dpl::dpl_3_c"],[39,"aizu_online_judge::dsl"],[57,"aizu_online_judge::dsl::dsl_1_a"],[59,"aizu_online_judge::dsl::dsl_1_b"],[62,"aizu_online_judge::dsl::dsl_2_a"],[65,"aizu_online_judge::dsl::dsl_2_b"],[68,"aizu_online_judge::dsl::dsl_2_c"],[70,"aizu_online_judge::dsl::dsl_2_d"],[73,"aizu_online_judge::dsl::dsl_2_e"],[76,"aizu_online_judge::dsl::dsl_2_f"],[79,"aizu_online_judge::dsl::dsl_2_g"],[82,"aizu_online_judge::dsl::dsl_2_h"],[85,"aizu_online_judge::dsl::dsl_2_i"],[88,"aizu_online_judge::dsl::dsl_3_a"],[91,"aizu_online_judge::dsl::dsl_3_b"],[92,"aizu_online_judge::dsl::dsl_3_c"],[93,"aizu_online_judge::dsl::dsl_3_d"],[96,"aizu_online_judge::dsl::dsl_4_a"],[97,"aizu_online_judge::dsl::dsl_5_a"],[98,"aizu_online_judge::dsl::dsl_5_b"],[99,"aizu_online_judge::grl"],[117,"aizu_online_judge::grl::grl_1_a"],[125,"aizu_online_judge::grl::grl_1_b"],[130,"aizu_online_judge::grl::grl_1_c"],[136,"aizu_online_judge::grl::grl_2_a"],[138,"aizu_online_judge::grl::grl_2_b"],[142,"aizu_online_judge::grl::grl_3_a"],[145,"aizu_online_judge::grl::grl_3_b"],[148,"aizu_online_judge::grl::grl_3_c"],[151,"aizu_online_judge::grl::grl_4_a"],[153,"aizu_online_judge::grl::grl_4_b"],[156,"aizu_online_judge::grl::grl_5_a"],[159,"aizu_online_judge::grl::grl_5_b"],[163,"aizu_online_judge::grl::grl_5_c"],[168,"aizu_online_judge::grl::grl_5_d"],[174,"aizu_online_judge::grl::grl_5_e"],[181,"aizu_online_judge::grl::grl_6_a"],[184,"aizu_online_judge::grl::grl_6_b"],[187,"aizu_online_judge::grl::grl_7_a"],[190,"aizu_online_judge::itp1"],[191,"aizu_online_judge::itp1::itp1_1_a"],[192,"std::io"],[193,"std::io"]],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  1ms","","✅  AC  1ms","","✅  AC  3ms","","✅  AC  6ms","✅  AC  3ms","","","✅  AC  0ms","","✅  AC  6ms","","✅  AC  49ms","","✅  AC  0ms","✅  AC  23ms","","✅  AC  18ms","","✅  AC  3ms","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  6ms","","","✅  AC  20ms","","","✅  AC  14ms","","","✅  AC  14ms","","✅  AC  490ms","","","✅  AC  46ms","","","✅  AC  49ms","","","✅  AC  51ms","","","✅  AC  52ms","","","✅  AC  49ms","","","✅  AC  54ms","","","✅  AC  5ms","✅  AC  3ms","✅  AC  273ms","","","✅  AC  106ms","✅  AC  57ms","✅  AC  3ms","✅  AC  7ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  64ms","✅  AC  94ms","","","","","✅  AC  6ms","","","","","","✅  AC  4ms","","✅  AC  18ms","","","","✅  AC  0ms","","","✅  AC  2ms","","","✅  AC  3ms","","","✅  AC  6ms","","✅  AC  0ms","","✅  AC  2ms","","","","✅  AC  9ms","","","","✅  AC  2ms","","","","","✅  AC  89ms","","","","","","✅  AC  42ms","","","","","","","✅  AC  214ms","","","✅  AC  0ms","","","✅  AC  0ms","","","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,[[1,2]],0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,1,1],3],0,0,[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]]],"c":[],"p":[[8,"Read",192],[8,"Write",192],[15,"bool"]],"a":{"verify":[16,18,20,22,23,26,28,30,32,33,35,37,58,61,64,67,69,72,75,78,81,84,87,90,91,92,95,96,97,98,123,124,129,135,137,141,144,147,150,152,154,158,162,167,173,180,183,186,189,191]}},\
"competitive":{"doc":"github","t":"OAAOOOOOOOOAOOAOOOOAAAOOOOOOOAOOOOOOOOAAOOOOOOOOAOOAAIIQQDQDQQIIDIDIDDIDDDIDDDEIIIIQDDSSIDEDIIQDEDDDDDDDDDIIIQQDIKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLOLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLQIDDDDDDDDIDDDQQQDQIDDQDIIIDIDQQQDQDIDDLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLKFLLLLLLLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLMLLLLLLLLLLLLKKLLKKLKKLLLFKKKLLLKKFFLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDIQDDIDDIIDDDDDGGGGDGGGGIDDGGDDDDDDDDDDDDDDDDDIDDDDDDQDIDDDDDDKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLKLLLLOLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKKKKKKKKKLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLKKKKLLKKKKKKKKKKKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIEIDNNDDNNNKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQQQQQQQIIIDIIIDDIDDEGGDDDDEGGQQIQDDIIIIQIDDDDDDDIIDDIDDDQDDEGGDDQQDDDQIIIIQKLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLMLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLKLLLLLLLLLLLLLFKLMMMMLLKLLLMMMMKLKLLLLLLLLLLLLLLLLLLLKLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLMLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLKLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLKLLLLKLLLLLLKLMKLLLLLLLLLLLLLLMLQQSIQSQDKFLLKLLLMLLKLLLMMMLLMMLLKLLLLLLMMMMLLLLLMDGEIDQDIIGGGDDDDDDDQLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLFFLLLLLLLLLLLLLLFLLLLLLLLFLLLFFFLMLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLFLLLLLLLLLLLLLLLLLLLLLLLLLMLKLLLLLLLLLFLFFKLLLLLFLLFFFFFFLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLFLLFLLLFLLLLLLLLLLLLLLMLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLDIIDSIDDSSQDSSSSSSSSSIDDSQISSSSSSSSSSSSDIISSISDSIDSDIQSIQDIKKLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLKLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLMLLLKLLLLLLLLLLLLLKLLKLLLLLLKLLKLLLLLLLLLLLLKLLLLLLKLLLLLLLLLLLLKLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLKLLKLLKLLLLLLLKLLKLLLLLLLLLLLLLLLLAKKLLKKKKKLLKKLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKKLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLKKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLMMKLLLLLLLLLLGGEEGGGGEEDELLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGSEEEEISSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCICCILLLLKLLOKCLLLLLLOLKLLLLCCCCDCCCCDDLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLFEEEQDDDDEEEIQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIEDEDIIDEDDIIIIDQQQDIDDIDDIDDQDEDKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLKKKLKKLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLFFFFFLLKLLLLLLOOLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLDDDDDEIDDNDDDDEDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLL","n":["add_assign","algebra","algorithm","array","automaton","avx_helper","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","heuristic","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","invariant","iter_print","main","math","max","memorize","min","minmax","mlambda","mo_algorithm","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","syakutori","tools","tree","AbelianGroup","AbelianMonoid","Act","ActMonoid","AddMulOperation","Additive","AdditiveOperation","Agg","AggMonoid","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","BottomkOperation","Commutative","CountingOperation","EmptyAction","EmptyLazy","Field","FindMajorityOperation","FirstOperation","FlattenAction","Gf2_63","Group","Idempotent","IdempotentMonoid","Invertible","Key","LastOperation","LinearOperation","MOD","MOD","Magma","MaxOperation","Mersenne61","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","TopkOperation","Unital","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_operate","act_operate","act_operate_assign","act_operate_assign","act_unit","act_unit","add","add","add","agg_operate","agg_operate","agg_operate_assign","agg_operate_assign","agg_unit","agg_unit","all_one","all_zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone_into","clone_into","define_monoid","div","div","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","mul","mul","neg","neg","one","one","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","single","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","sub","sub","sum","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","zero","zero","B","Bisect","BitDp","BitwiseandConvolve","BitwiseorConvolve","Combinations","ConvexHullTrick","EsperEstimator","EsperSolver","GcdConvolve","ImpartialGame","ImpartialGameAnalyzer","ImpartialGamer","IndependentSubSet","Iter","Iter","LIter","LcmConvolve","M","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SliceCombinationsExt","SliceSortExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","State","State","Subsets","T","XorBasis","ZeroSumGame","ZeroSumGameAnalyzer","ZeroSumGamer","add_line","baby_step_giant_step","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bubble_sort","bubble_sort_by","bucket","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","default","default","default","elements","eq","equivalent","eval","eval","eval","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_bucket","fold_cell","for_each_combinations","for_each_combinations_with_replacement","for_each_permutations","for_each_product","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","ind","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","inverse_transform","inverse_transform","inverse_transform","inverse_transform","is_element","is_subset","k_colorable","length","length","length","length","merge_sort","merge_sort_by","middle_point","mobius_transform","mobius_transform","mobius_transform","mobius_transform","multiply","multiply","multiply","multiply","n","new","new","new","new","new","new","new","new","new","new","next","next","next_combination","next_left","next_left","next_minimum","next_permutation","next_right","next_right","next_state","next_state","next_state","next_state","not_elements","parallel_binary_search","position_bisect","prev_combination","prev_permutation","push","query","reduce","rfind_bisect","rposition_bisect","run_length_encoding","slide_minimum","solve","solve","solve_checked","sqrt_decomposition","sqrt_decomposition","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_bucket","update_cell","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Accumulate","Accumulate2d","Allocator","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BTreeMapExt","BTreeSetExt","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","CompressedBinaryIndexedTree","CompressedBinaryIndexedTree1d","CompressedBinaryIndexedTree2d","CompressedBinaryIndexedTree3d","CompressedBinaryIndexedTree4d","CompressedSegmentTree","CompressedSegmentTree1d","CompressedSegmentTree2d","CompressedSegmentTree3d","CompressedSegmentTree4d","Compressor","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCompress","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MemoryPool","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTreeMap","SlopeTrick","SplayMap","SplaySequence","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","VecCompress","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","allocate","allocate","append","as_slice","as_total_ord","automaton","back","bit_length","bit_length","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_failure","build_inplace","chmax","chmin","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count_ones","count_zeros","dd","deallocate","deallocate","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","drop","drop","drop","edges","eq","equivalent","extend","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","first","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fn","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get","get","get_difference","get_key_value","get_key_value_at","get_left_if","get_left_if","get_next","get_next","get_next_back","get_next_back","get_next_back_excluded","get_next_back_excluded","get_next_back_excluded_mut","get_next_back_mut","get_next_excluded","get_next_excluded","get_next_excluded_mut","get_next_mut","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","index_exact","index_exact","index_exact","index_lower_bound","index_lower_bound","index_lower_bound","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert","insert","insert","insert_at","insert_once_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","iter","iter","iter","iter_mut","keys","keys","keys","last","last","last","last_mut","len","len","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","minmax","modify","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_node","node_size","not","not","ones","partial_cmp","pop","pop_back","pop_first","pop_first","pop_first_if","pop_first_if","pop_front","pop_last","pop_last","pop_last_if","pop_last_if","pop_left_if","pop_left_if","pop_next","pop_next","pop_next_back","pop_next_back","pop_next_back_excluded","pop_next_back_excluded","pop_next_back_excluded_if","pop_next_back_excluded_if","pop_next_back_if","pop_next_back_if","pop_next_excluded","pop_next_excluded","pop_next_excluded_if","pop_next_excluded_if","pop_next_if","pop_next_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","quantile_outer","query_min","range","range","range","range_at","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove","remove","remove_at","remove_count","remove_count","reverse","roots","roots","roots","rotate_left","rotate_right","rposition_acc","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update_isize","valley","values","values","values","values_mut","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","Approx","ApproxOrd","Ccw","Ccwable","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","approx_cmp","approx_eq","as_total_ord","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","ccw_open","chmax","chmax","chmin","chmin","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","default","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","minmax","minmax","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","add_assign","add_assign","add_assign","add_assign","add_clause","add_cost1","add_cost2","add_cost2_01","add_cost2_10","add_edge","add_edge","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adj4","adj8","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies_with_eindex","adjacencies_with_eindex","adjacencies_with_value","adjacencies_with_value","adjacencies_with_value","adjacency","articulation","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","avalue","avalue","avalue","aviews","aviews","aviews","aviews","aviews","aviews","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","build","builder","builder","builder","builder_with_esize","change_edge","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","chmin","chmin","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","components","construct_emap","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","construct_vmap","construct_vmap","construct_vmap","construct_vmap","default","default","default","dfs_order","dfs_tree","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","dulmage_mendelsohn_decomposition","edges","edges","edges","edges","edges","edges","edges_size","edges_size","eindex","eindex","eindex","eindex","elist","elist","elist","elist","emap_get","emap_get","emap_get_mut","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","esize","esize","esize","eview","eview","eview","eview","extend","extend","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","hash","hash","hash","height","hopcroft_karp","id","index","index","inf","inf","inf","inf","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","kuhn_multi_start_bfs","low","map","map","maximum_flow","maximum_flow_limited","maximum_independent_set","maximum_matching","minimum_cost_flow","minimum_cost_flow_limited","minimum_cut","minimum_edge_cover","minimum_spanning_arborescence","minimum_spanning_tree","minimum_vertex_cover","minmax","minmax","minmax","minmax","minmax","minmax","minmax","minmax","move_by_diff","mscan","mscan","mscan","mscan","mul","mul","mul","mul","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_adj4","new_adj8","new_with_esize","next","next","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","solve","source","source","source","source","start","start","start","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices_size","vertices_size","vindex","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_set","vmap_set","vsize","vsize","vsize","vview","vview","vview","vview","vview","vview","vview","vview","vview","vview","vview","warshall_floyd_ap","warshall_floyd_ap","weighted_tree_depth","weighted_tree_depth","width","with_n_values","Cands","Hash","LOG_TABLE_SIZE","ModifiableState","Operation","SEED","Score","SimuratedAnnealing","accept","beam_search","borrow","borrow_mut","candidates","change","change","default","end_temp","fmt","from","hash","into","is_accepted","is_end","is_maximize","iter_count","log_table","minimize","new","now","rand","revert","revert","score","set_end_temp","set_start_temp","set_time_limit","set_update_interval","soft_update","soft_update","start_temp","temperture","time","time_limit","try_from","try_into","type_id","update","update","update_interval","Convolve","Convolve998244353","ConvolveRealFft","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","MIntConvolve","Matrix","MemorizedFactorial","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","assign","berlekamp_massey","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","check_primitive_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convolve","convolve","convolve","convolve","count_divisors","count_divisors","count_multiset_sum","count_subset_sum","data","data","data","data","data","default","default","default","default","determinant","diff","discrete_logarithm","discrete_logarithm_prime_mod","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","divisors","divisors","divisors","eq","eq","eq","equivalent","equivalent","equivalent","euler_phi","eval","even","exp","extgcd","extgcd_binary","extgcd_recurse","eye","fact","factorial","floor_sum","floor_sum_i64","floor_sum_range_freq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_loop","get","highly_composite_number","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into_iter","inv","inv","inv","inv_fact","inverse","inverse_transform","inverse_transform","inverse_transform","inverse_transform","is_prime","is_prime","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","length","length","length","length","linear_congruence","linear_sum_of_exp","log","miller_rabin","miller_rabin_with_br","modinv","modinv_extgcd_binary","modinv_recurse","moebius","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply","multiply","multipoint_evaluation","neg","neg","new","new","new","new","new","new","new","odd","one","one","permutation","pow","pow","pow","pow","powi","prefix","prefix_ref","prime_factors","prime_factors","prime_factors","prime_factors_flatten","primes","primes","primes_lte","primitive_root","product_all","rank","rem","rem","rem","rem","rem","rem_assign","rem_assign","reserve","resize","resized","reversed","row_reduction","shape","shl","shl","shl_assign","shr","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum_all_rational","taylor_shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","transform","trial_division","trial_division","trim_tail_zeros","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_prime_list","zero","zero","zeros","zeros","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","DualNumber","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","Rational","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","chmin","chmin","chmin","chmin","clamp","clamp","clamp","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp_by_arg","conjugate","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","default","default","delta","den","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_rem","div_rem","div_rem","dot","end_bound_excluded","end_bound_excluded_bounded","end_bound_excluded_checked","end_bound_included","end_bound_included_bounded","end_bound_included_checked","epsilon","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","get_mod","get_mod","get_mod","hash","hash","hash","hash","hash","hypot","hypot","hypot","i","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","im","index","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","is_zero","is_zero","lcm","lcm","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","maximum","maximum","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","minimum","minimum","minimum","minimum","minimum","minmax","minmax","minmax","minmax","minmax","minmax","minmax","minmax","minmax","mint_basic","mod_add","mod_div","mod_inner","mod_inner","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new_unchecked","new_unchecked","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","norm","not","not","num","one","one","one","one","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","primitive_nth_root_of_unity","product","product","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","root","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","scan","scan","scan","scan","scan","scan","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_mod","set_mod","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_bounded","start_bound_excluded_checked","start_bound_included","start_bound_included_bounded","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_bounded","to_range_bounded","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_bounded","to_range_inclusive_bounded","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","MOD","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","N1","N1","N2","N2","N3","N3","R","R","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_inner","mod_inner","mod_inner","mod_inner","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Bytes","Chars","Read","Scanner","Usize1","Write","by_ref","by_ref","bytes","chain","flush","is_read_vectored","is_write_vectored","iter_print","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","take","write","write_all","write_all_vectored","write_fmt","write_vectored","Gf2_63x1","Gf2_63x2","Gf2_63x3","HashedRangeChained","KnuthMorrisPratt","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHasher","SuffixArray","Zarray","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","index","index","into","into","into","longest_common_prefix_array","new","new","new","rolling_hash","search","search_all","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wildcard_pattern_matching","Gf2_63x1","Gf2_63x2","Gf2_63x3","Hash","Hashed","HashedRange","HashedRangeChained","HashedSequence","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHasher","T","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chainable","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","chmin","chmin","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","concat","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","default","ensure","ensure","ensure","ensure","ensure","ensure","ensure","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash_range","hash_range","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","init","init_with_rng","init_with_rng","init_with_rng","init_with_rng","init_with_rng","init_with_rng","init_with_rng","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","len","len","longest_common_prefix","minmax","minmax","minmax","minmax","minmax","minmax","minmax","minmax","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","push","range","range","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AsTotalOrd","AssociatedValue","Byte1","ByteWithBase","Bytes","BytesWithBase","CharConvertTryFrom","CharConvertTryInto","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandRange","RandomSpec","Scanner","ScannerIter","SerdeByteStr","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","__local_key","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","deserialize","deserialize_from_bytes","deserialize_from_bytes","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_alphabetic_number","into_iter","into_iter","into_lower_alphabetic_number","into_number","into_upper_alphabetic_number","iter","iter_print","minmax","minmax","minmax","minmax","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","new","new","new","new","new","new_with_seed","next","next","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","replace","replace","scan","scan","scan","scan","scan","scan","scan","scan","scan_value","scan_vec","serialize","serialize_bytestr","serialize_bytestr","set","set","shuffle","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unescape","with","with","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dp","eidx","ep","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vidx","vsize","vsize","with_seed"],"q":[[0,"competitive"],[53,"competitive::algebra"],[471,"competitive::algorithm"],[817,"competitive::combinatorial_optimization"],[931,"competitive::data_structure"],[1959,"competitive::geometry"],[2077,"competitive::graph"],[2805,"competitive::heuristic"],[2854,"competitive::math"],[3221,"competitive::num"],[4955,"competitive::num::mint_basic"],[5220,"competitive::num::montgomery"],[5380,"competitive::prelude"],[5409,"competitive::string"],[5463,"competitive::string::rolling_hash"],[5708,"competitive::tools"],[6062,"competitive::tree"],[6256,"core::option"],[6257,"core::clone"],[6258,"core::cmp"],[6259,"core::fmt"],[6260,"core::fmt"],[6261,"core::cmp"],[6262,"core::ops::arith"],[6263,"core::any"],[6264,"alloc::vec"],[6265,"core::ops::function"],[6266,"core::cmp"],[6267,"core::ops::function"],[6268,"core::iter::traits::collect"],[6269,"core::ops::arith"],[6270,"std::collections::hash::map"],[6271,"core::ptr::non_null"],[6272,"core::cmp"],[6273,"core::marker"],[6274,"core::cell"],[6275,"core::hash"],[6276,"alloc::collections::btree::map"],[6277,"alloc::string"],[6278,"core::ops::arith"],[6279,"core::ops::bit"],[6280,"core::ops::arith"],[6281,"core::ops::bit"],[6282,"std::io"],[6283,"std::io::readbuf"],[6284,"alloc::alloc"],[6285,"std::io"],[6286,"core::iter::traits::collect"]],"d":["","algebra","algorithm","","build automaton","","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","","Implement <code>AssociatedValue</code>.","","","","","Print expressions with a separator.","","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","solve with Mo’s algorithm","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","scan and bind values with Scanner","scan a value with Scanner","","","string algorithems","","arg:","","tree algorithems","commutative group","commutative monoid","","","$+,\\\\times$","","$+$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","","","Find majority(strict) of a sequence.","retain the first element","","","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","","","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","$a$ where $a \\\\circ x = e$","","","","","","","","","","multiplicative operaion: $+$","multiplicative operaion: $+$","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","","","","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","","","additive identity: $0$","additive identity: $0$","","binary search helper","","","","","","","","","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","","","Basis of xor operation.","","","","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","$\\\\min{0\\\\le i &lt; n | x^i=y}$","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","get i-th value of rho path","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Return between two elements if search is not end.","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","","","","","","","","","","","","","","Create a empty space.","","","","","","","","","","","","","","","","","Returns the first index that satisfies a predicate. if not …","","","","","Return (reduced basis, coordinate). Coordinate means if …","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","","","","","","","","Returns the element that gives the minimum value from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","2-dimensional accumlated data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return fold of [0, k)","Return fold of [0, x) × [0, y)","fold [0, k]","fold [0, i] x [0, j]","","","","","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of range","Return fold of range","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Create empty","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","","get k-th smallest value in range","get k-th smallest value out of range","","","","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-badd a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return norm","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(p_x = f) | (p_y = g)","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","","","","","","","","","Return a slice of adjacency verticeseturn the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","","Return an iterator over graph vertices.","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e, c==1","Sum of Floor of Linear mod 2^64","Sum of Floor of Linear mod 2^64","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","binary gcd","","","[(hcn, #divisor)]","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","","return: (y,z)","sum_i a_i exp(b_i x)","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationseturns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m","","","","","m is prime, n = 2^32","n^1 mod m","n^1 mod m","n^2 mod m","n^2 mod m","n^3 mod m","n^3 mod m","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","","Calls <code>U::from(self)</code>.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","Flush this output stream, ensuring that all intermediately …","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Print expressions with a separator.","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","scan and bind values with Scanner","Creates an adapter which will read at most <code>limit</code> bytes …","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","","Trait for spec of generating random value.","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","","","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","","","","","","","scan and bind values with Scanner","scan a value with Scanner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,103,0,312,0,103,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0,313,314,0,0,0,0,0,0,312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,315,312,0,0,103,316,317,318,319,320,321,322,323,324,6,103,316,317,318,319,320,321,322,323,324,6,103,103,103,103,103,103,312,312,4,103,103,103,103,103,103,325,326,327,316,317,318,319,320,321,322,323,324,4,6,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,313,314,327,316,317,318,319,320,321,322,323,324,4,6,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,313,314,4,4,4,6,4,6,0,344,344,4,6,4,6,4,6,327,316,317,318,319,320,321,322,323,324,4,6,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,313,314,327,316,317,318,319,320,321,322,323,324,4,6,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,313,314,344,344,345,332,333,334,337,339,342,346,346,0,312,312,347,347,312,312,315,4,6,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,313,314,315,315,71,71,315,315,345,345,332,333,346,346,6,103,316,317,318,319,320,321,322,323,324,6,347,347,6,4,6,103,103,327,316,317,318,319,320,321,322,323,324,4,6,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,313,314,327,316,317,318,319,320,321,322,323,324,4,6,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,313,314,327,316,317,318,319,320,321,322,323,324,4,6,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,313,314,346,4,6,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,313,314,348,312,312,46,0,0,0,0,0,0,0,0,0,0,0,0,0,39,43,41,0,46,0,0,0,41,0,0,0,0,0,0,0,39,41,43,0,46,0,0,0,0,21,0,23,0,349,350,351,50,352,51,47,52,34,35,36,33,21,37,38,40,42,31,53,23,44,349,350,351,50,352,51,47,52,34,35,36,33,21,37,38,40,42,31,53,23,44,353,353,46,31,31,33,34,35,36,33,21,37,38,40,42,23,44,34,35,36,33,21,37,38,40,42,23,44,34,34,21,23,34,34,34,40,42,44,31,23,354,0,34,35,36,33,21,37,38,40,42,31,23,44,47,46,46,355,355,355,355,349,350,351,50,352,51,47,52,34,35,36,33,21,37,38,40,42,31,53,23,44,33,23,31,31,33,23,349,350,351,50,352,51,47,52,34,35,36,33,21,37,38,40,42,31,53,23,44,35,36,349,350,351,352,34,34,33,349,350,351,352,353,353,27,349,350,351,352,349,350,351,352,33,50,51,52,21,37,40,42,53,23,44,35,36,355,41,51,53,355,41,51,39,43,50,52,34,0,354,355,355,37,21,23,354,354,0,0,37,38,37,46,46,34,0,34,35,36,33,21,37,38,40,42,23,44,349,350,351,352,349,350,351,50,352,51,47,52,34,35,36,33,21,37,38,40,42,31,53,23,44,349,350,351,50,352,51,47,52,34,35,36,33,21,37,38,40,42,31,53,23,44,349,350,351,50,352,51,47,52,34,35,36,33,21,37,38,40,42,31,53,23,44,47,46,46,349,350,351,352,0,0,0,0,0,0,56,57,58,59,60,61,56,57,58,59,60,61,56,57,58,59,60,61,56,57,58,59,60,61,58,61,56,57,61,56,57,58,61,56,57,56,57,56,56,57,58,59,60,61,56,57,58,59,60,61,56,57,56,57,58,61,56,57,56,57,56,56,57,58,59,60,61,60,0,0,0,0,61,56,56,57,58,59,60,61,56,57,58,59,56,57,58,59,60,61,56,57,58,59,60,61,56,57,58,59,60,61,56,57,58,59,60,61,0,0,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,0,66,62,62,62,62,62,62,63,63,63,63,63,63,64,64,64,64,64,64,65,67,68,69,70,72,73,132,74,75,76,78,79,80,81,81,81,81,79,80,82,83,84,84,82,83,84,84,85,88,89,113,91,82,92,95,0,94,132,74,95,95,95,95,95,95,95,95,95,76,78,79,80,81,100,102,131,104,105,85,92,106,107,94,115,116,88,91,108,62,63,64,65,67,68,69,70,72,73,74,95,109,110,82,83,111,97,98,99,84,96,89,75,76,78,79,80,81,100,102,131,104,105,85,92,106,107,94,115,116,88,91,108,62,63,64,65,67,68,69,70,72,73,74,95,109,110,82,83,111,97,98,99,84,96,89,75,96,97,95,95,82,83,98,99,84,84,79,80,81,100,102,104,105,92,106,107,94,88,108,62,63,64,65,67,68,69,70,72,73,74,95,109,110,82,83,111,97,98,99,84,96,89,75,79,80,81,100,102,104,105,92,106,107,94,88,108,62,63,64,65,67,68,69,70,72,73,74,95,109,110,82,83,111,97,98,99,84,96,89,75,95,99,98,95,95,97,113,91,81,100,107,94,115,116,91,72,73,95,82,83,111,98,99,84,66,66,108,82,98,99,115,116,91,96,95,95,115,82,82,83,83,98,99,85,88,96,89,96,85,85,356,357,356,76,79,80,81,100,102,104,105,92,106,107,94,115,116,88,91,108,62,63,64,65,67,68,69,70,72,73,74,95,109,110,82,83,111,97,98,99,84,96,89,75,76,78,79,80,100,100,100,100,102,104,105,92,106,115,108,104,105,92,106,107,94,102,76,78,79,80,81,100,102,131,104,105,85,92,106,107,94,115,116,88,91,108,62,63,64,65,67,68,69,70,72,73,74,95,109,110,82,83,111,97,98,99,84,96,89,75,78,76,74,109,110,82,82,83,83,98,99,79,104,92,94,79,80,104,105,92,106,115,116,95,82,83,98,88,116,116,98,99,356,357,356,357,356,357,356,356,356,357,356,356,99,98,98,99,88,69,70,69,70,95,102,102,358,109,110,358,109,110,66,62,62,62,62,62,62,63,63,63,63,63,63,64,64,64,64,64,64,65,67,68,69,70,72,73,115,116,111,98,99,96,96,96,98,99,76,78,79,80,81,100,102,131,104,105,85,92,106,107,94,115,116,88,91,108,62,63,64,65,67,68,69,70,72,73,74,95,109,110,82,83,111,97,98,99,84,96,89,75,107,94,115,116,82,83,88,116,82,83,98,99,98,82,83,98,356,357,107,356,107,94,115,116,82,83,69,70,69,70,79,108,85,88,89,84,84,95,115,78,79,80,81,81,81,81,100,100,100,100,102,131,104,105,85,92,106,107,94,115,116,88,91,108,65,67,68,72,73,95,82,83,111,97,98,99,84,96,89,75,66,62,62,62,62,62,62,63,63,63,63,63,63,64,64,64,64,64,64,65,67,68,69,70,72,73,96,96,95,95,95,95,107,94,356,357,356,357,94,356,357,356,357,98,99,356,357,356,357,356,357,356,357,356,357,356,357,356,357,356,357,98,99,104,105,92,106,115,107,94,94,75,75,111,131,116,83,116,75,132,132,132,132,74,75,75,115,116,82,83,98,99,116,82,83,115,85,88,89,115,115,104,105,92,106,115,108,108,85,89,75,132,132,74,132,132,74,79,80,104,105,92,106,95,84,95,95,95,95,95,95,358,85,88,109,110,89,84,108,108,359,359,359,359,79,80,81,100,102,104,105,92,106,107,94,88,108,62,63,64,65,67,68,69,70,72,73,74,95,109,110,82,83,111,97,98,99,84,96,89,75,76,78,79,80,81,100,102,131,104,105,85,92,106,107,94,115,116,88,91,108,62,63,64,65,67,68,69,70,72,73,74,95,109,110,82,83,111,97,98,99,84,96,89,75,76,78,79,80,81,100,102,131,104,105,85,92,106,107,94,115,116,88,91,108,62,63,64,65,67,68,69,70,72,73,74,95,109,110,82,83,111,97,98,99,84,96,89,75,76,78,79,80,81,100,102,131,104,105,85,92,106,107,94,115,116,88,91,108,62,63,64,65,67,68,69,70,72,73,74,95,109,110,82,83,111,97,98,99,84,96,89,75,85,88,89,79,80,81,81,81,81,100,100,100,100,104,105,92,106,115,97,97,84,82,83,98,98,115,116,91,82,96,0,0,0,0,0,141,141,0,0,141,141,141,144,144,145,141,145,141,146,142,143,145,141,146,142,143,141,142,143,141,145,141,145,141,145,141,146,142,143,145,141,146,142,143,0,145,141,146,0,0,146,143,145,142,143,143,142,143,145,141,146,142,143,145,141,145,141,146,142,143,145,141,146,142,143,141,143,143,145,141,146,142,143,142,143,142,143,145,141,146,142,143,145,141,142,143,142,143,145,141,146,142,143,145,141,146,142,143,145,141,146,142,143,145,141,146,142,143,360,187,189,360,187,189,361,167,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,362,363,0,364,0,0,0,0,0,0,365,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,366,0,0,0,0,0,0,0,367,368,0,0,0,165,0,0,0,0,166,366,369,370,371,150,151,151,151,151,152,153,154,155,156,150,150,153,157,157,360,158,159,157,157,160,160,187,160,189,158,159,153,192,174,175,163,164,176,177,178,161,361,163,164,167,158,159,157,157,160,372,372,372,372,372,372,372,372,160,183,158,159,184,188,190,192,369,370,371,152,185,186,153,154,173,174,175,163,164,157,155,171,156,172,151,176,177,178,161,160,179,150,183,158,159,184,188,190,192,369,370,371,152,185,186,153,154,173,174,175,163,164,157,155,171,156,172,151,176,177,178,161,160,179,150,192,152,155,156,171,172,160,160,171,174,175,163,164,176,177,178,161,174,175,163,164,176,177,178,161,153,154,173,174,175,163,164,157,155,171,156,151,176,177,178,161,160,179,150,153,154,173,174,175,163,164,157,155,171,156,151,176,177,178,161,160,179,150,174,175,163,164,176,177,178,161,179,365,160,169,176,177,178,166,158,159,157,160,153,151,161,160,160,372,372,372,372,0,364,173,181,191,170,160,173,160,363,175,164,161,181,191,170,160,365,160,365,160,365,365,174,175,163,164,176,177,178,161,174,175,163,164,176,177,178,161,373,160,153,193,160,160,160,155,156,157,153,154,173,174,175,163,164,157,155,171,156,172,151,176,177,178,161,160,179,150,160,183,158,159,184,188,190,192,369,370,371,152,185,186,153,154,173,174,174,174,175,175,163,163,164,164,157,155,171,156,172,151,176,177,178,161,160,179,150,154,173,160,179,155,156,171,172,153,179,174,175,163,164,176,177,178,161,157,154,161,173,179,366,369,370,371,183,158,159,184,188,190,192,369,370,371,152,185,186,153,154,173,174,175,163,164,157,155,171,156,172,151,176,177,178,161,160,179,150,188,190,154,192,163,164,171,171,154,154,172,172,171,154,173,173,154,174,175,163,164,176,177,178,161,157,183,184,185,186,366,369,370,371,183,158,159,184,188,190,192,152,185,186,153,154,173,157,155,156,151,161,179,150,157,157,152,188,190,192,174,175,163,164,176,177,178,161,150,150,179,151,366,369,370,371,181,191,170,160,161,181,191,170,160,160,160,153,154,173,174,175,163,164,157,155,171,156,151,176,177,178,161,160,179,150,160,191,160,191,160,191,160,191,160,160,191,160,183,158,159,184,188,190,192,369,370,371,152,185,186,153,154,173,174,175,163,164,157,155,171,156,172,151,176,177,178,161,160,179,150,183,158,159,184,188,190,192,369,370,371,152,185,186,153,154,173,174,175,163,164,157,155,171,156,172,151,176,177,178,161,160,179,150,150,183,158,159,184,188,190,192,369,370,371,152,185,186,153,154,173,174,175,163,164,157,155,171,156,172,151,176,177,178,161,160,179,150,157,165,158,159,153,173,157,160,160,173,160,368,174,175,163,164,161,166,158,159,157,160,166,158,159,157,160,166,166,168,160,153,374,158,158,158,159,159,157,157,160,160,160,372,372,191,160,157,151,196,196,197,0,196,197,196,0,196,0,197,197,196,196,196,197,197,197,197,196,197,197,197,197,197,197,197,197,197,197,196,196,196,197,197,197,197,196,196,197,197,197,197,197,197,197,196,196,197,0,0,0,0,0,203,0,0,0,0,0,0,0,0,0,0,0,0,0,203,199,199,199,199,199,199,199,199,200,201,199,199,199,199,201,0,0,375,376,207,208,209,199,200,201,210,211,212,375,376,207,208,209,199,200,201,210,211,212,199,0,207,208,209,199,200,201,210,211,212,207,208,209,199,200,201,210,211,212,207,208,203,203,376,376,211,212,199,199,377,378,199,200,201,208,199,201,211,200,199,0,0,199,199,199,199,199,199,199,199,201,199,199,199,199,199,0,211,212,199,200,201,199,200,201,0,199,199,199,0,0,0,200,207,208,0,0,0,207,208,209,199,200,201,210,211,212,375,376,207,208,209,199,199,199,199,200,201,210,211,212,199,199,200,201,0,0,210,0,207,199,200,200,201,199,200,200,201,199,375,376,207,208,209,199,200,201,210,211,212,199,207,209,199,207,200,203,375,376,376,211,212,199,199,199,199,0,207,0,0,203,375,376,376,199,201,0,199,199,0,0,0,0,0,0,199,199,199,199,199,199,199,199,200,201,199,199,199,199,203,375,376,376,199,199,199,207,208,209,200,210,211,212,199,199,201,207,209,199,200,201,209,199,199,0,211,212,0,211,212,211,0,199,200,199,199,199,199,201,199,199,211,199,199,199,200,200,199,199,199,199,199,199,200,199,216,199,199,199,199,199,199,199,199,200,201,199,199,199,199,199,199,207,208,209,199,200,201,210,211,212,203,375,376,376,211,212,199,199,375,376,207,208,209,199,200,201,210,211,212,375,376,207,208,209,199,200,201,210,211,212,375,376,207,208,209,199,200,201,210,211,212,0,199,201,199,200,0,0,0,0,148,0,0,0,148,148,379,0,148,148,148,148,148,148,148,148,148,0,0,0,148,32,0,148,148,148,148,148,148,148,148,148,148,148,148,0,0,0,148,148,0,148,0,148,0,0,148,0,0,380,148,0,227,0,0,148,227,140,217,218,219,220,220,220,220,220,220,225,225,225,225,225,225,226,228,380,227,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,148,218,219,148,218,219,213,213,213,213,140,140,140,140,140,140,140,140,217,217,231,231,231,231,231,231,231,231,218,219,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,226,226,228,213,213,140,140,140,140,231,231,231,231,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,228,140,140,217,231,218,219,220,225,226,228,148,218,219,148,218,219,148,218,219,148,218,219,148,218,219,381,381,381,381,381,381,381,220,225,220,225,220,225,220,225,220,225,220,225,241,213,205,140,217,231,218,219,220,225,226,228,241,213,205,140,217,231,218,219,220,225,226,228,148,218,219,148,218,219,140,217,231,218,219,220,225,226,228,140,217,231,218,219,220,225,226,228,148,218,219,148,218,219,213,205,140,217,231,218,219,220,225,226,228,213,205,140,217,231,218,219,220,225,226,228,140,217,231,218,219,220,225,226,228,140,140,231,148,218,219,148,218,219,148,218,219,382,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,382,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,140,213,140,217,231,218,219,220,225,226,381,228,213,213,213,213,205,205,205,140,140,140,140,140,140,140,140,217,231,231,231,231,231,231,231,231,218,219,220,225,225,225,225,225,225,225,225,225,225,225,225,226,228,213,213,140,140,140,140,231,231,231,231,220,225,225,225,225,225,225,225,225,225,225,225,225,228,148,379,218,219,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,205,205,205,140,383,383,383,383,383,383,231,213,140,217,231,218,219,220,225,226,228,213,140,217,231,218,219,220,225,226,228,231,148,218,219,148,218,219,148,218,219,380,380,148,218,219,213,213,205,140,217,217,231,218,218,219,219,220,220,225,225,226,226,228,381,381,381,381,381,381,381,148,218,219,206,241,213,213,213,213,213,213,213,213,213,213,213,213,213,205,140,217,217,231,218,218,219,219,220,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,225,226,226,228,148,218,219,213,217,218,219,220,225,226,379,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,241,380,220,220,220,220,220,220,225,225,225,225,225,225,32,213,205,205,205,213,140,231,220,225,148,218,219,140,379,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,379,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,379,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,140,226,213,228,206,241,213,205,140,217,231,218,219,220,225,226,228,213,148,218,219,148,218,219,3,3,3,3,148,218,219,227,220,220,220,220,220,220,225,225,225,225,225,225,148,218,219,14,14,217,226,227,220,220,220,220,220,220,225,225,225,225,225,225,148,218,219,148,218,219,2,2,217,226,226,380,380,382,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,382,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,148,218,219,148,218,219,148,218,219,148,218,219,148,218,219,148,218,219,3,217,218,219,220,225,226,228,148,218,219,3,217,218,219,220,225,226,228,140,217,231,218,219,220,225,226,228,0,32,32,32,32,206,32,32,32,32,32,32,32,32,380,380,0,213,213,213,213,140,140,140,140,140,140,140,140,217,217,231,231,231,231,231,231,231,231,218,219,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,226,226,228,148,218,219,213,213,140,140,140,140,231,231,231,231,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,228,213,213,140,140,217,231,231,218,219,220,220,220,220,220,220,225,225,225,225,225,225,226,228,213,205,205,205,140,228,213,228,380,220,220,220,220,220,220,225,225,225,225,225,225,140,220,225,228,14,213,140,217,231,218,219,220,225,226,228,140,217,231,218,219,220,225,226,228,140,379,213,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,148,218,219,148,218,219,140,213,213,140,140,231,231,140,148,218,219,205,205,205,218,219,220,225,225,225,225,225,225,225,225,225,225,225,225,220,225,225,225,225,225,225,225,225,225,225,225,225,148,379,218,219,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,382,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,231,382,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,382,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,148,218,219,213,140,217,218,219,220,225,226,3,3,3,3,213,213,14,14,2,2,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,380,220,220,220,220,220,220,225,225,225,225,225,225,148,227,218,219,220,220,220,220,220,220,225,225,225,225,225,225,148,218,219,148,218,219,148,218,219,148,213,217,218,219,226,213,383,383,383,383,383,383,381,213,213,213,213,140,140,140,140,140,140,140,140,217,231,231,231,231,231,231,231,231,218,219,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,226,228,213,213,140,140,140,140,231,231,231,231,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,228,213,213,140,140,231,231,382,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,148,218,219,148,218,219,148,218,219,148,218,219,213,205,140,217,231,218,219,220,225,226,228,148,218,219,383,383,383,383,383,383,383,383,383,383,383,383,213,217,218,219,220,225,226,148,218,219,382,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,382,220,220,220,220,220,220,220,220,220,220,220,220,225,225,225,225,225,225,225,225,225,225,225,225,140,231,148,218,219,241,213,205,140,217,231,218,219,220,225,226,228,241,213,205,140,217,231,218,219,220,225,226,228,241,213,205,140,217,231,218,219,220,225,226,228,140,227,220,220,220,220,220,220,225,225,225,225,225,225,241,241,2,213,140,217,231,218,219,220,225,226,228,0,0,0,0,0,0,0,0,0,0,0,0,384,385,386,387,388,389,384,385,386,387,388,389,0,0,384,384,384,384,384,384,384,384,384,384,384,384,384,385,385,385,385,385,385,385,385,385,386,386,386,386,386,386,386,386,386,387,387,387,387,387,387,387,387,387,388,388,388,388,388,388,388,388,388,389,389,389,389,389,389,389,384,385,386,387,388,389,384,384,384,384,384,384,384,384,384,384,384,384,384,385,385,385,385,385,385,385,385,385,386,386,386,386,386,386,386,386,386,387,387,387,387,387,387,387,387,387,388,388,388,388,388,388,388,388,388,389,389,389,389,389,389,389,384,385,386,387,388,389,384,385,386,387,388,389,384,384,384,384,384,384,384,384,384,384,384,384,385,385,385,385,385,385,385,385,386,386,386,386,386,386,386,386,387,387,387,387,387,387,387,387,388,388,388,388,388,388,388,388,389,389,389,389,389,389,384,385,386,387,388,389,384,385,386,387,388,389,384,385,386,387,388,389,384,385,386,387,388,389,384,384,385,386,387,388,389,384,385,386,387,388,389,390,391,388,389,384,385,386,387,388,389,384,385,386,387,388,389,384,385,386,387,388,389,0,0,0,0,392,0,0,0,0,0,392,392,392,392,392,392,392,392,393,394,395,396,393,394,395,396,393,393,393,393,393,393,393,394,394,394,394,394,394,394,395,395,395,395,395,395,395,396,396,396,396,396,396,396,393,394,395,396,393,393,393,393,393,393,393,394,394,394,394,394,394,394,395,395,395,395,395,395,395,396,396,396,396,396,396,396,393,394,395,396,393,394,395,396,393,394,395,396,393,393,393,393,393,393,394,394,394,394,394,394,395,395,395,395,395,395,396,396,396,396,396,396,393,394,395,396,393,394,395,396,393,394,395,396,393,394,395,396,393,394,395,396,393,394,395,396,392,392,393,394,395,396,393,394,395,396,393,394,395,396,0,0,0,0,0,0,251,296,251,251,296,251,296,0,251,0,251,251,251,251,251,251,0,251,296,296,296,296,296,0,0,0,0,0,0,0,0,0,0,0,260,261,262,260,261,262,260,261,262,260,261,262,260,261,262,260,261,262,261,262,260,261,262,261,260,261,262,0,262,260,260,261,262,260,261,262,260,261,262,260,261,262,0,0,0,0,263,0,0,0,0,0,0,0,0,263,264,265,267,268,269,270,271,272,264,273,265,266,267,268,269,270,271,272,264,273,265,266,267,268,269,270,271,272,264,265,264,265,267,268,269,270,271,272,264,265,267,268,269,270,271,272,264,265,266,267,268,269,270,271,272,264,265,266,267,268,269,270,271,272,264,265,267,268,269,270,271,272,266,263,267,268,269,270,271,272,264,263,267,268,269,270,271,272,264,265,266,267,268,269,270,271,272,264,265,266,267,268,269,270,271,272,264,273,265,266,267,268,269,270,271,272,264,264,273,265,266,267,268,269,270,271,272,265,266,267,268,269,270,271,272,273,265,263,267,268,269,270,271,272,263,267,268,269,270,271,272,263,263,267,268,269,270,271,272,264,273,265,266,267,268,269,270,271,272,273,265,273,265,265,264,265,267,268,269,270,271,272,264,265,267,268,269,270,271,272,264,273,265,264,265,266,267,268,269,270,271,272,264,273,265,266,267,268,269,270,271,272,264,273,265,266,267,268,269,270,271,272,264,273,265,266,267,268,269,270,271,272,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,182,297,397,0,0,0,0,0,0,0,0,0,0,398,0,0,0,398,399,277,278,279,93,295,277,294,278,279,280,281,282,283,284,285,286,287,288,290,291,292,93,274,295,277,294,278,279,280,281,282,283,284,285,286,287,288,290,291,292,93,274,400,277,278,279,93,400,277,278,279,93,277,278,279,280,281,282,283,284,285,286,287,288,290,291,292,93,274,277,278,279,280,281,282,283,284,285,286,287,288,290,291,292,93,274,277,278,279,93,277,93,274,401,401,401,277,278,279,93,277,278,279,93,277,294,278,279,280,281,282,283,284,285,286,287,288,290,291,292,93,274,295,277,294,278,279,280,281,282,283,284,285,286,287,288,290,291,292,93,274,402,402,402,402,274,274,274,398,398,397,278,279,93,295,277,294,278,279,280,281,282,283,284,285,286,287,288,290,291,292,93,274,403,295,294,403,403,403,280,404,400,277,278,279,93,398,398,297,280,282,284,286,288,290,292,292,279,280,290,292,274,274,295,294,277,278,279,93,293,278,279,274,274,293,293,274,274,0,0,0,0,0,398,398,182,280,281,283,285,287,291,0,0,280,401,401,401,398,398,274,277,278,279,280,281,282,283,284,285,286,287,288,290,291,292,93,274,295,277,294,278,279,280,281,282,283,284,285,286,287,288,290,291,292,93,274,295,277,294,278,279,280,281,282,283,284,285,286,287,288,290,291,292,93,274,295,277,294,278,279,280,281,282,283,284,285,286,287,288,290,291,292,93,274,0,398,398,0,0,0,0,0,0,0,0,0,195,0,0,0,0,0,0,195,308,309,310,311,299,300,301,303,405,304,307,305,195,306,308,309,310,311,299,300,301,303,405,304,307,305,195,306,299,300,301,303,304,305,195,299,300,301,303,304,305,195,306,302,405,305,299,305,195,195,299,300,301,303,304,305,195,306,308,309,310,311,299,300,301,303,405,304,307,305,195,306,301,195,306,306,0,308,309,310,311,299,300,301,303,405,304,307,305,195,306,303,307,299,300,301,299,300,301,307,305,306,304,299,307,300,300,300,301,307,307,308,309,310,311,301,302,405,300,300,300,299,300,301,303,304,305,195,308,309,310,311,299,300,301,303,405,304,307,305,195,306,308,309,310,311,299,300,301,303,405,304,307,305,195,306,308,309,310,311,299,300,301,303,405,304,307,305,195,306,307,300,301,307,302,405,306],"fc":[],"p":[[4,"Option",6256],[8,"Zero",3221],[8,"Bounded",3221],[3,"RangeChminChmaxAdd",53],[8,"Clone",6257],[3,"RangeSumRangeChminChmaxAdd",53],[8,"PartialEq",6258],[15,"bool"],[8,"Debug",6259],[3,"Formatter",6259],[6,"Result",6259],[15,"usize"],[8,"Copy",6260],[8,"One",3221],[8,"Ord",6258],[8,"Add",6261],[8,"Sub",6261],[8,"Mul",6261],[4,"Result",6262],[3,"TypeId",6263],[3,"ConvexHullTrick",471],[15,"i64"],[3,"XorBasis",471],[15,"u64"],[3,"Vec",6264],[8,"FnMut",6265],[8,"Bisect",471],[8,"Eq",6258],[8,"Hash",6266],[8,"Fn",6265],[3,"RhoPath",471],[8,"MIntBase",3221],[3,"IndependentSubSet",471],[3,"BitDp",471],[3,"Subsets",471],[3,"Combinations",471],[3,"EsperEstimator",471],[3,"EsperSolver",471],[8,"ImpartialGame",471],[3,"ImpartialGameAnalyzer",471],[8,"PartisanGame",471],[3,"PartisanGameAnalyzer",471],[8,"ZeroSumGame",471],[3,"ZeroSumGameAnalyzer",471],[8,"Iterator",6267],[8,"SqrtDecomposition",471],[3,"SqrtDecompositionBuckets",471],[15,"slice"],[8,"IntoIterator",6268],[3,"ImpartialGamer",471],[3,"PartisanGamer",471],[3,"ZeroSumGamer",471],[3,"SlideMinimum",471],[8,"Div",6261],[3,"RangeInclusive",6269],[3,"KnapsackPloblemSmallWeight",817],[3,"KnapsackPloblemSmallValue",817],[3,"ZeroOneKnapsackProblemSmallItems",817],[3,"ZeroOneKnapsackPloblemBranchAndBound",817],[3,"LexicographicalSubsequence",817],[3,"LongestIncreasingSubsequence",817],[3,"IntersectionAutomaton",931],[3,"UnionAutomaton",931],[3,"ProductAutomaton",931],[3,"FunctionalAutomaton",931],[8,"Automaton",931],[3,"MappingAutomaton",931],[3,"AlphabetMappingAutomaton",931],[3,"LexicographicalAutomaton",931],[3,"RevLexicographicalAutomaton",931],[8,"Monoid",53],[3,"MonoidalAutomaton",931],[3,"AlwaysAcceptingAutomaton",931],[3,"BitVector",931],[3,"WaveletMatrix",931],[3,"Accumulate",931],[8,"AbelianMonoid",53],[3,"Accumulate2d",931],[3,"BinaryIndexedTree",931],[3,"BinaryIndexedTree2D",931],[3,"CompressedBinaryIndexedTree",931],[3,"HashCounter",931],[3,"BTreeCounter",931],[3,"SlopeTrick",931],[3,"MergingUnionFind",931],[3,"HashMap",6270],[8,"Group",53],[3,"WeightedUnionFind",931],[3,"UnionFind",931],[3,"NonNull",6271],[3,"MemoryPool",931],[3,"SegmentTree",931],[3,"TotalOrd",5708],[3,"DequeAggregation",931],[3,"BitSet",931],[3,"Trie",931],[3,"RangeArithmeticProgressionAdd",931],[3,"RangeMap",931],[3,"RangeSet",931],[3,"CompressedSegmentTree",931],[8,"SemiGroup",53],[3,"DisjointSparseTable",931],[8,"MonoidAction",53],[3,"LazySegmentTree",931],[3,"LazySegmentTreeMap",931],[3,"SegmentTreeMap",931],[3,"QueueAggregation",931],[3,"Automatondp",931],[3,"VecCompress",931],[3,"HashCompress",931],[3,"LineSet",931],[4,"Ordering",6258],[8,"Allocator",931],[8,"Default",6272],[3,"SplaySequence",931],[3,"SplayMap",931],[8,"Sized",6260],[3,"Drain",6270],[3,"Ref",6273],[3,"RefMut",6273],[8,"RangeBounds",6269],[8,"AbelianGroup",53],[8,"Borrow",6274],[8,"Hasher",6266],[3,"Iter",6270],[3,"Iter",6275],[3,"Keys",6275],[3,"IterMut",6275],[3,"Keys",6270],[8,"FnOnce",6265],[3,"Static2DTree",931],[8,"RankSelectDictionaries",931],[3,"Range",6269],[3,"Range",6275],[15,"isize"],[3,"Values",6270],[3,"Values",6275],[3,"ValuesMut",6275],[8,"Ccwable",1959],[3,"Complex",3221],[4,"Ccw",1959],[3,"Line",1959],[3,"LineSegment",1959],[8,"ApproxOrd",1959],[3,"Approx",1959],[3,"Circle",1959],[15,"f64"],[8,"Float",3221],[8,"PartialOrd",6258],[3,"TwoSatisfiability",2077],[3,"ProjectSelectionProblem",2077],[3,"SparseGraphBuilder",2077],[3,"AdjacencyListGraph",2077],[3,"BipartiteMatching",2077],[3,"DinicBuilder",2077],[3,"PrimalDualBuilder",2077],[3,"GridGraph",2077],[3,"UsizeGraph",2077],[3,"ClosureGraph",2077],[3,"SparseGraph",2077],[3,"Adjacency",2077],[3,"Iter",6276],[3,"VIndexWithValue",2077],[3,"VIndexWithEIndexValue",2077],[8,"Vertices",2077],[8,"VertexMap",2077],[8,"AdjacencyView",2077],[8,"VertexSize",2077],[8,"SparseGraphConstruction",2077],[6,"BidirectionalSparseGraph",2077],[3,"Dinic",2077],[3,"PrimalDual",2077],[3,"EdgeListGraph",2077],[3,"VIndex",2077],[3,"VIndexWithEIndex",2077],[4,"DirectedEdge",2077],[4,"UndirectedEdge",2077],[4,"BidirectionalEdge",2077],[3,"StronglyConnectedComponent",2077],[15,"never"],[6,"DirectedSparseGraph",2077],[8,"IterScan",5708],[3,"AdjacencyListGraphScanner",2077],[3,"EdgeListGraphScanner",2077],[3,"SparseGraphScanner",2077],[3,"TreeGraphScanner",2077],[8,"AdjacenciesWithEindex",2077],[3,"AdjacencyViewIterFromEindex",2077],[8,"AdjacenciesWithValue",2077],[3,"AdjacencyViewIterFromValue",2077],[6,"UndirectedSparseGraph",2077],[3,"LowLink",2077],[8,"EdgeView",2077],[3,"String",6277],[4,"TreeCenter",6062],[8,"ModifiableState",2805],[3,"SimuratedAnnealing",2805],[8,"FormalPowerSeriesCoefficient",2854],[3,"FormalPowerSeries",2854],[3,"Matrix",2854],[3,"Polynomial",2854],[8,"MulAssign",6261],[8,"ConvolveSteps",2854],[15,"u128"],[3,"BarrettReduction",3221],[8,"MIntConvert",3221],[3,"MemorizedFactorial",2854],[3,"SmallModMemorizedFactorial",2854],[3,"PowPrec",2854],[3,"EulerPhiTable",2854],[3,"PrimeList",2854],[3,"PrimeTable",2854],[3,"MInt",3221],[15,"u32"],[3,"IterMut",6276],[8,"FormalPowerSeriesCoefficientSqrt",2854],[3,"DoubleDouble",3221],[3,"Float32",3221],[3,"Float64",3221],[3,"Saturating",3221],[15,"i8"],[15,"i128"],[15,"i16"],[15,"i32"],[3,"Wrapping",3221],[3,"QuadDouble",3221],[8,"Signed",3221],[3,"Rational",3221],[15,"u16"],[15,"u8"],[3,"DualNumber",3221],[8,"BitAnd",6278],[8,"BitAndAssign",6278],[8,"BitOr",6278],[8,"BitOrAssign",6278],[8,"BitXor",6278],[8,"BitXorAssign",6278],[4,"FpCategory",6279],[8,"Neg",6261],[8,"DivAssign",6261],[3,"ExtendedGcd",3221],[3,"Error",6259],[8,"Display",6259],[15,"f32"],[15,"str"],[8,"FromStr",6280],[8,"Not",6278],[8,"Rem",6261],[8,"RemAssign",6261],[3,"Bytes",6281],[8,"Read",5380],[3,"Chain",6281],[3,"Error",6282],[3,"BorrowedCursor",6283],[3,"Global",6284],[3,"IoSliceMut",6281],[3,"Take",6281],[3,"IoSlice",6281],[3,"Arguments",6259],[3,"KnuthMorrisPratt",5409],[3,"SuffixArray",5409],[3,"Zarray",5409],[8,"RollingHasher",5463],[3,"HashedRangeChained",5463],[3,"HashedRange",5463],[3,"Hashed",5463],[4,"Mersenne61x1",5463],[4,"Mersenne61x2",5463],[4,"Mersenne61x3",5463],[4,"Gf2_63x1",5463],[4,"Gf2_63x2",5463],[4,"Gf2_63x3",5463],[3,"HashedSequence",5463],[3,"Xorshift",5708],[3,"Cell",6273],[3,"LocalKey",6285],[3,"PartialIgnoredOrd",5708],[3,"NotEmptySegment",5708],[3,"RandRange",5708],[3,"Scanner",5708],[4,"Usize1",5708],[3,"CharWithBase",5708],[4,"Chars",5708],[3,"CharsWithBase",5708],[4,"Byte1",5708],[3,"ByteWithBase",5708],[4,"Bytes",5708],[3,"BytesWithBase",5708],[8,"FromIterator",6268],[3,"Collect",5708],[3,"SizedCollect",5708],[3,"Splitted",5708],[8,"RandomSpec",5708],[3,"RandIter",5708],[3,"ScannerIter",5708],[8,"Write",5380],[8,"MarkedIterScan",5708],[15,"char"],[3,"EulerTourForEdge",6062],[3,"EulerTourForVertex",6062],[3,"EulerTourForRichVertex",6062],[8,"LcaMonoidDispatch",6062],[3,"LowestCommonAncestor",6062],[3,"LcaMonoid",6062],[3,"ReRooting",6062],[3,"TreeHasher",6062],[3,"HeavyLightDecomposition",6062],[3,"PruferSequence",6062],[3,"PathTree",6062],[3,"StarTree",6062],[3,"MixedTree",6062],[8,"SemiRing",53],[4,"Gf2_63",53],[4,"Mersenne61",53],[8,"Magma",53],[3,"EmptyLazy",53],[3,"EmptyAction",53],[3,"FlattenAction",53],[3,"RangeSumRangeAdd",53],[3,"RangeSumRangeLinear",53],[3,"RangeSumRangeUpdate",53],[3,"RangeMaxRangeUpdate",53],[3,"RangeMinRangeUpdate",53],[3,"RangeMinRangeAdd",53],[8,"BitAndIdentity",53],[8,"BitOrIdentity",53],[3,"AddMulOperation",53],[3,"MaxOperation",53],[3,"MinOperation",53],[3,"FirstOperation",53],[3,"LastOperation",53],[3,"AdditiveOperation",53],[3,"MultiplicativeOperation",53],[3,"LinearOperation",53],[3,"BitAndOperation",53],[3,"BitOrOperation",53],[3,"BitXorOperation",53],[3,"CountingOperation",53],[3,"ReverseOperation",53],[3,"TopkOperation",53],[3,"BottomkOperation",53],[4,"PermutationOperation",53],[3,"FindMajorityOperation",53],[8,"Field",53],[8,"Invertible",53],[8,"Unital",53],[8,"Ring",53],[8,"BitXorIdentity",53],[3,"BitwiseandConvolve",471],[3,"BitwiseorConvolve",471],[3,"GcdConvolve",471],[3,"LcmConvolve",471],[8,"SliceSortExt",471],[8,"SliceBisectExt",471],[8,"SliceCombinationsExt",471],[8,"BTreeMapExt",931],[8,"BTreeSetExt",931],[8,"Compressor",931],[8,"ToDigitSequence",931],[8,"Adjacencies",2077],[8,"AdjacencyIndexWithValue",2077],[8,"EIndexedGraph",2077],[8,"AdjacencyIndexWithEindex",2077],[8,"Edges",2077],[8,"EdgeMap",2077],[8,"ShortestPathSemiRing",2077],[8,"GraphBase",2077],[8,"AdjacencyIndex",2077],[3,"StandardSp",2077],[3,"OptionSp",2077],[3,"PathFoldingSp",2077],[8,"ShortestPathExt",2077],[8,"EdgeSize",2077],[8,"VertexView",2077],[4,"ConvolveRealFft",2854],[3,"Convolve",2854],[6,"Fps998244353",2854],[6,"Fps",2854],[8,"IntBase",3221],[8,"Unsigned",3221],[8,"DiscreteSteps",3221],[8,"BinaryRepr",3221],[8,"RangeBoundsExt",3221],[3,"Modulo2",4955],[4,"Modulo998244353",4955],[4,"Modulo1000000007",4955],[4,"Modulo1000000009",4955],[4,"DynModuloU32",4955],[4,"DynModuloU64",4955],[6,"DynMIntU32",4955],[6,"DynMIntU64",4955],[8,"MontgomeryReduction32",5220],[4,"Modulo998244353",5220],[4,"Modulo2113929217",5220],[4,"Modulo1811939329",5220],[4,"Modulo2013265921",5220],[8,"GetDistinctMut",5708],[8,"AssociatedValue",5708],[8,"AsTotalOrd",5708],[8,"PartialOrdExt",5708],[8,"SerdeByteStr",5708],[8,"CharConvertTryFrom",5708],[8,"CharConvertTryInto",5708],[8,"IterPrint",5708],[4,"LcaMonoidDefaultId",6062]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":"AAAAAAAAAAAAAAAAAAACCCCFCCCFCFCCCFFCCCCFCCCCFCCCCCFCCCCFCFCCCFFCFCCCCFCCCCFCCCCCCCFAAAACCFFCCFCCCCFFCCFAAAAAAAAAAAAAAAAAAAAAACCCCCFFCCCCFCCCCCFCFCFCCFFCCCFCCCCFCCFCCCFCCCCFCCFCCFCCFCCCFCCFCCCCCFCFCCFCFCFAAFFAAACFCFCCCFF","n":["datastructure","graph","math","sample","string","deque_operate_all_composite","dynamic_sequence_range_affine_range_sum","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_chmin_chmax_add_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","DequeAggregation","LinearOperation","MInt","MInt998244353","deque_operate_all_composite","MInt998244353","RangeSumRangeLinear","SplaySequence","dynamic_sequence_range_affine_range_sum","LineSet","line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","LazySegmentTree","RangeChminChmaxAdd","RangeSumRangeChminChmaxAdd","Saturating","range_chmin_chmax_add_range_sum","WaveletMatrix","range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","UnionFind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","bitwise_and_convolution","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","gcd_convolution","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","lcm_convolution","log_of_formal_power_series","min_of_mod_of_linear","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","AddMulOperation","BitwiseandConvolve","BitwiseorConvolve","ConvolveSteps","MInt998244353","bitwise_and_convolution","bitwise_or_convolution","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","Convolve","ConvolveSteps","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","PrimeList","enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","factorize","prime_factors_flatten","MInt998244353","berlekamp_massey","find_linear_recurrence","AddMulOperation","ConvolveSteps","GcdConvolve","MInt998244353","gcd_convolution","Fps998244353","MInt998244353","inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","AddMulOperation","ConvolveSteps","LcmConvolve","MInt998244353","lcm_convolution","Fps998244353","MInt998244353","log_of_formal_power_series","binary_search","floor_sum_range_freq","min_of_mod_of_linear","Fps998244353","MInt998244353","multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","DynMIntU32","sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","floor_sum","sum_of_floor_of_linear","TwoSatisfiability","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","SuffixArray","suffixarray","Mersenne61x1","RollingHasher","Zarray","zalgorithm","zalgorithm_rolling_hash"],"q":[[0,"library_checker"],[5,"library_checker::datastructure"],[19,"library_checker::datastructure::deque_operate_all_composite"],[24,"library_checker::datastructure::dynamic_sequence_range_affine_range_sum"],[28,"library_checker::datastructure::line_add_get_min"],[30,"library_checker::datastructure::point_add_range_sum"],[35,"library_checker::datastructure::point_set_range_composite"],[40,"library_checker::datastructure::queue_operate_all_composite"],[45,"library_checker::datastructure::range_affine_range_sum"],[51,"library_checker::datastructure::range_chmin_chmax_add_range_sum"],[56,"library_checker::datastructure::range_kth_smallest"],[58,"library_checker::datastructure::staticrmq"],[63,"library_checker::datastructure::unionfind"],[65,"library_checker::datastructure::vertex_add_path_sum"],[70,"library_checker::datastructure::vertex_add_subtree_sum"],[75,"library_checker::datastructure::vertex_set_path_composite"],[83,"library_checker::graph"],[87,"library_checker::graph::bipartitematching"],[91,"library_checker::graph::directedmst"],[94,"library_checker::graph::lca"],[100,"library_checker::graph::scc"],[103,"library_checker::math"],[125,"library_checker::math::bitwise_and_convolution"],[132,"library_checker::math::convolution_mod"],[137,"library_checker::math::convolution_mod_1000000007"],[143,"library_checker::math::discrete_logarithm_mod"],[145,"library_checker::math::enumerate_primes"],[147,"library_checker::math::exp_of_formal_power_series"],[150,"library_checker::math::factorize"],[152,"library_checker::math::find_linear_recurrence"],[155,"library_checker::math::gcd_convolution"],[160,"library_checker::math::inv_of_formal_power_series"],[163,"library_checker::math::kth_term_of_linearly_recurrent_sequence"],[167,"library_checker::math::lcm_convolution"],[172,"library_checker::math::log_of_formal_power_series"],[175,"library_checker::math::min_of_mod_of_linear"],[178,"library_checker::math::multipoint_evaluation"],[181,"library_checker::math::polynomial_taylor_shift"],[185,"library_checker::math::pow_of_formal_power_series"],[188,"library_checker::math::sharp_p_subset_sum"],[194,"library_checker::math::sqrt_mod"],[196,"library_checker::math::sqrt_of_formal_power_series"],[199,"library_checker::math::sum_of_floor_of_linear"],[201,"library_checker::math::two_sat"],[203,"library_checker::sample"],[205,"library_checker::sample::aplusb"],[206,"library_checker::sample::many_aplusb"],[207,"library_checker::string"],[210,"library_checker::string::number_of_substrings"],[212,"library_checker::string::suffixarray"],[214,"library_checker::string::zalgorithm"],[219,"std::io"],[220,"std::io"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","✅  AC  48ms","","","","✅  AC  2263ms","","✅  AC  352ms","","","","✅  AC  100ms","✅  AC  136ms","","","","","✅  AC  184ms","","","","","✅  AC  37ms","","","","","","✅  AC  733ms","","","","","✅  AC  1392ms","","✅  AC  296ms","","","","✅  AC  147ms","✅  AC  151ms","","✅  AC  16ms","","","","","✅  AC  399ms","","","","","✅  AC  162ms","","","","","","","","✅  AC  186ms","","","","","","","✅  AC  98ms","✅  AC  1312ms","","","✅  AC  158ms","","","","","✅  AC  579ms","✅  AC  544ms","","","✅  AC  168ms","","","","","","","","","","","","","","","","","","","","","","","","","","","","✅  AC  152ms","✅  AC  157ms","","","","","✅  AC  158ms","","","","","","✅  AC  334ms","","✅  AC  4ms","","✅  AC  1412ms","","","✅  AC  415ms","✅  AC  85ms","","","","✅  AC  87ms","","","","","✅  AC  153ms","","","✅  AC  153ms","","","","✅  AC  1908ms","","","","","✅  AC  182ms","","","✅  AC  195ms","","","✅  AC  1260ms","","","✅  AC  484ms","","","","✅  AC  120ms","","","✅  AC  556ms","","","","","","✅  AC  564ms","","✅  AC  89ms","","","✅  AC  320ms","","✅  AC  33ms","","✅  AC  205ms","","","✅  AC  0ms","✅  AC  154ms","","","","","✅  AC  1414ms","","✅  AC  1918ms","","","","✅  AC  43ms","✅  AC  133ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]]],"c":[],"p":[[8,"Read",219],[8,"Write",219]],"a":{"verify":[23,27,29,33,34,39,44,50,55,57,61,62,64,69,74,82,89,90,93,98,99,102,130,131,136,142,144,146,149,150,154,159,162,166,171,174,177,180,184,187,193,195,198,200,202,205,206,211,213,217,218]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
