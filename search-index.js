var searchIndex = JSON.parse('{\
"competitive":{"doc":"","i":[[0,"algebra","competitive","",null,null],[0,"base","competitive::algebra","",null,null],[8,"Magma","competitive::algebra::base","",null,null],[16,"T","","",0,null],[10,"operate","","",0,[[]]],[8,"Associative","","",null,null],[8,"SemiGroup","","",null,null],[8,"Unital","","",null,null],[10,"unit","","",1,[[]]],[8,"Monoid","","",null,null],[11,"power","","",2,[[]]],[8,"Invertible","","",null,null],[10,"inverse","","",3,[[]]],[8,"Group","","",null,null],[8,"Commutative","","",null,null],[8,"AbelianMonoid","","",null,null],[8,"AbelianGroup","","",null,null],[8,"Idempotent","","",null,null],[8,"IdempotentMonoid","","",null,null],[0,"effect","competitive::algebra","",null,null],[3,"AnyMonoidEffect","competitive::algebra::effect","",null,null],[0,"any_monoid_effect_impl","","",null,null],[11,"new","","",4,[[]]],[8,"MonoidEffect","","",null,null],[16,"A","","",5,null],[10,"effect","","",5,[[]]],[0,"operations","competitive::algebra","",null,null],[3,"MaxOperation","competitive::algebra::operations","",null,null],[3,"MinOperation","","",null,null],[3,"FirstOperation","","",null,null],[3,"LastOperation","","",null,null],[3,"AdditiveOperation","","",null,null],[3,"MultiplicativeOperation","","",null,null],[3,"LinearOperation","","",null,null],[3,"BitAndOperation","","",null,null],[3,"BitOrOperation","","",null,null],[3,"MonoidalOperation","","",null,null],[3,"GroupOperation","","",null,null],[3,"AssocoativeOperator","","",null,null],[3,"AbsorbedAssocoativeOperator","","",null,null],[3,"CartesianOperation","","",null,null],[3,"CountingOperation","","",null,null],[0,"max_operation_impl","","",null,null],[11,"new","","",6,[[]]],[0,"min_operation_impl","","",null,null],[11,"new","","",7,[[]]],[0,"first_operation_impl","","",null,null],[11,"new","","",8,[[]]],[0,"last_operation_impl","","",null,null],[11,"new","","",9,[[]]],[0,"additive_operation_impl","","",null,null],[11,"new","","",10,[[]]],[0,"multiplicative_operation_impl","","",null,null],[11,"new","","",11,[[]]],[0,"linear_operation_impl","","",null,null],[11,"new","","",12,[[]]],[0,"bitand_operation_impl","","",null,null],[11,"new","","",13,[[]]],[0,"bitor_operation_impl","","",null,null],[11,"new","","",14,[[]]],[0,"monoidal_operation_impl","","",null,null],[11,"new","","",15,[[]]],[0,"group_operation_impl","","",null,null],[11,"new","","",16,[[]]],[0,"assocoative_operator_impl","","",null,null],[0,"absorbed_assocoative_operator_impl","","",null,null],[11,"new","","",17,[[]]],[0,"cartesian_operation_impl","","",null,null],[11,"new","","",18,[[]]],[0,"counting_operation_impl","","",null,null],[11,"new","","",19,[[]]],[8,"MinimumBounded","","",null,null],[10,"minimum","","",20,[[]]],[8,"MaximumBounded","","",null,null],[10,"maximum","","",21,[[]]],[8,"AdditiveIdentity","","",null,null],[10,"zero","","",22,[[]]],[8,"MultiplicativeIdentity","","",null,null],[10,"one","","",23,[[]]],[8,"BitAndIdentity","","",null,null],[10,"all_one","","",24,[[]]],[8,"BitOrIdentity","","",null,null],[10,"all_zero","","",25,[[]]],[0,"algorithm","competitive","",null,null],[0,"compress","competitive::algorithm","",null,null],[3,"Compress","competitive::algorithm::compress","",null,null],[11,"get","","",26,[[]]],[11,"len","","",26,[[]]],[0,"convex_hull_trick","competitive::algorithm","",null,null],[3,"CHTLine","competitive::algorithm::convex_hull_trick","",null,null],[3,"ConvexHullTrick","","",null,null],[11,"new","","",27,[[]]],[11,"value","","",27,[[]]],[11,"check","","",27,[[]]],[11,"new","","",28,[[]]],[11,"add_line","","k-th add_line(a_k, b_k): a_k >= a_{k+1}",28,[[]]],[11,"query","","",28,[[]]],[0,"search","competitive::algorithm","",null,null],[5,"binary_search","competitive::algorithm::search","",null,[[["fn",8],["bisect",8]],["bisect",8]]],[5,"lower_bound","","",null,[[["bisect",8],["ord",8]]]],[5,"upper_bound","","",null,[[["bisect",8],["ord",8]]]],[5,"ternary_search","","",null,[[["trisect",8],["fn",8]],["trisect",8]]],[0,"bisect_impl","","",null,null],[0,"trisect_impl","","",null,null],[8,"Bisect","","",null,null],[10,"halve","","",29,[[]]],[10,"section_end","","",29,[[]]],[8,"Trisect","","",null,null],[10,"next","","",30,[[]]],[10,"section_end","","",30,[[]]],[0,"slide_minimum","competitive::algorithm","",null,null],[5,"slide_minimum","competitive::algorithm::slide_minimum","",null,[[["vec",3]],["vec",3]]],[0,"data_structure","competitive","",null,null],[3,"Rev","competitive::data_structure","",null,null],[12,"0","","",31,null],[3,"TotalOrd","","",null,null],[12,"0","","",32,null],[0,"binary_indexed_tree","","",null,null],[3,"BinaryIndexedTree","competitive::data_structure::binary_indexed_tree","",null,null],[3,"BinaryIndexedTree2D","","",null,null],[11,"new","","",33,[[],["binaryindexedtree",3]]],[11,"ident","","",33,[[]]],[11,"operate","","",33,[[]]],[11,"accumulate","","0-indexed [1, k)",33,[[]]],[11,"update","","1-indexed",33,[[]]],[11,"inverse","","",33,[[]]],[11,"fold","","0-indexed [l, r)",33,[[]]],[11,"get","","1-indexed",33,[[]]],[11,"set","","1-indexed",33,[[]]],[11,"lower_bound","","1-indexed",33,[[]]],[11,"new","","",34,[[],["binaryindexedtree2d",3]]],[11,"accumulate","","0-indexed [0, i) x [0, j)",34,[[]]],[11,"update","","1-indexed",34,[[]]],[11,"fold","","0-indexed [i1, i2) x [j1, j2)",34,[[]]],[11,"get","","1-indexed",34,[[]]],[11,"set","","1-indexed",34,[[]]],[0,"bitset","competitive::data_structure","",null,null],[3,"BitSet","competitive::data_structure::bitset","",null,null],[11,"new","","",35,[[]]],[11,"get","","",35,[[]]],[11,"set","","",35,[[]]],[11,"count_ones","","",35,[[]]],[11,"count_zeros","","",35,[[]]],[11,"shl_bitor_assign","","",35,[[]]],[11,"shr_bitor_assign","","",35,[[]]],[0,"disjoint_sparse_table","competitive::data_structure","",null,null],[3,"DisjointSparseTable","competitive::data_structure::disjoint_sparse_table","",null,null],[11,"new","","",36,[[["vec",3]]]],[11,"len","","",36,[[]]],[11,"fold_close","","",36,[[]]],[11,"fold","","",36,[[]]],[0,"lazy_segment_tree","competitive::data_structure","",null,null],[3,"LazySegmentTree","competitive::data_structure::lazy_segment_tree","M: folding Monoid E: lazy Monoid effect",null,null],[11,"new","","",37,[[]]],[11,"from_vec","","",37,[[["vec",3]]]],[11,"eval","","",37,[[]]],[11,"update","","",37,[[]]],[11,"fold","","",37,[[]]],[0,"segment_tree","competitive::data_structure","",null,null],[3,"SegmentTree","competitive::data_structure::segment_tree","",null,null],[11,"new","","",38,[[],["segmenttree",3]]],[11,"from_vec","","",38,[[["vec",3]],["segmenttree",3]]],[11,"set","","",38,[[]]],[11,"update","","",38,[[]]],[11,"get","","",38,[[]]],[11,"fold","","",38,[[]]],[11,"fold_all","","",38,[[]]],[11,"lower_bound_all","","left most index [0, r) that satisfies monotonic condition",38,[[["fn",8]]]],[11,"lower_bound","","left most index [l, r) that satisfies monotonic condition",38,[[["fn",8]]]],[0,"sliding_winsow_aggregation","competitive::data_structure","",null,null],[3,"QueueAggregation","competitive::data_structure::sliding_winsow_aggregation","",null,null],[3,"DequeAggregation","","",null,null],[11,"new","","",39,[[]]],[11,"len","","",39,[[]]],[11,"is_empty","","",39,[[]]],[11,"fold_all","","",39,[[]]],[11,"last","","",39,[[],["option",4]]],[11,"push","","",39,[[]]],[11,"pop","","",39,[[],["option",4]]],[11,"new","","",40,[[]]],[11,"len","","",40,[[]]],[11,"is_empty","","",40,[[]]],[11,"fold_all","","",40,[[]]],[11,"front","","",40,[[],["option",4]]],[11,"back","","",40,[[],["option",4]]],[11,"push_front","","",40,[[]]],[11,"push_back","","",40,[[]]],[11,"pop_front","","",40,[[],["option",4]]],[11,"pop_back","","",40,[[],["option",4]]],[11,"reverse","","",40,[[]]],[0,"union_find","competitive::data_structure","",null,null],[3,"UnionFind","competitive::data_structure::union_find","",null,null],[3,"WeightedUnionFind","","",null,null],[11,"new","","",41,[[],["unionfind",3]]],[11,"find","","",41,[[]]],[11,"unite","","",41,[[]]],[11,"size","","",41,[[]]],[11,"same","","",41,[[]]],[11,"members","","",41,[[],["vec",3]]],[11,"roots","","",41,[[],["vec",3]]],[11,"all_group_members","","",41,[[],[["vec",3],["hashmap",3]]]],[11,"new","","",42,[[]]],[11,"find","","",42,[[]]],[11,"get_weight","","",42,[[]]],[11,"unite","","",42,[[]]],[11,"size","","",42,[[]]],[11,"is_same","","",42,[[]]],[11,"get_difference","","",42,[[],["option",4]]],[11,"members","","",42,[[],["vec",3]]],[11,"roots","","",42,[[],["vec",3]]],[11,"all_group_members","","",42,[[],[["vec",3],["hashmap",3]]]],[0,"geometry","competitive","",null,null],[3,"Real","competitive::geometry","",null,null],[12,"0","","",43,null],[4,"CCW","","",null,null],[13,"OnlineFront","","a--b--c",44,null],[13,"Clockwise","","a--b-vc",44,null],[13,"OnSegment","","a--c--b",44,null],[13,"CounterClockwise","","a--b-^c",44,null],[13,"OnlineBack","","c--a--b",44,null],[5,"ccw","","",null,[[["point",6]],["ccw",4]]],[0,"circle","","",null,null],[3,"Circle","competitive::geometry::circle","",null,null],[11,"new","","",45,[[["point",6]]]],[11,"cross_circle","","",45,[[],["option",4]]],[11,"contains_point","","",45,[[["point",6]]]],[0,"closest_pair","competitive::geometry","",null,null],[5,"closest_pair","competitive::geometry::closest_pair","",null,[[["vec",3],["point",6]]]],[0,"complex","competitive::geometry","",null,null],[3,"Complex","competitive::geometry::complex","",null,null],[12,"re","","",46,null],[12,"im","","",46,null],[11,"new","","",46,[[],["complex",3]]],[11,"transpose","","",46,[[],["complex",3]]],[11,"conjugate","","",46,[[],["complex",3]]],[11,"dot","","",46,[[]]],[11,"cross","","",46,[[]]],[11,"norm","","",46,[[]]],[11,"from_polar","","",46,[[]]],[11,"abs","","",46,[[]]],[11,"unit","","",46,[[]]],[11,"angle","","",46,[[]]],[0,"line","competitive::geometry","",null,null],[3,"Line","competitive::geometry::line","",null,null],[3,"LineSegment","","",null,null],[11,"new","","",47,[[["point",6]]]],[11,"dir","","",47,[[],["point",6]]],[11,"ccw","","",47,[[["point",6]],["ccw",4]]],[11,"projection","","",47,[[["point",6]],["point",6]]],[11,"reflection","","",47,[[["point",6]],["point",6]]],[11,"distance_point","","",47,[[["point",6]]]],[11,"is_parallel","","",47,[[]]],[11,"is_orthogonal","","",47,[[]]],[11,"new","","",48,[[["point",6]]]],[11,"dir","","",48,[[],["point",6]]],[11,"ccw","","",48,[[["point",6]],["ccw",4]]],[11,"projection","","",48,[[["point",6]],["point",6]]],[11,"reflection","","",48,[[["point",6]],["point",6]]],[11,"is_parallel","","",48,[[]]],[11,"is_orthogonal","","",48,[[]]],[11,"intersect","","",48,[[]]],[11,"intersect_point","","",48,[[["point",6]]]],[11,"cross_point","","",48,[[],[["option",4],["point",6]]]],[11,"distance_point","","",48,[[["point",6]]]],[11,"distance","","",48,[[]]],[0,"polygon","competitive::geometry","",null,null],[5,"convex_hull","competitive::geometry::polygon","",null,[[["vec",3],["point",6]],[["vec",3],["point",6]]]],[5,"convex_diameter","","",null,[[["vec",3],["point",6]]]],[6,"Point","competitive::geometry","",null,null],[17,"EPS","","",null,null],[0,"graph","competitive","",null,null],[3,"DirectedAcyclicGraph","competitive::graph","",null,null],[0,"base","","",null,null],[3,"Adjacent","competitive::graph::base","",null,null],[12,"to","","",49,null],[12,"id","","",49,null],[3,"Graph","","",null,null],[12,"vsize","","",50,null],[12,"esize","","",50,null],[12,"graph","","",50,null],[3,"GraphRec","","",null,null],[12,"n","","",51,null],[12,"visited","","",51,null],[12,"cost","","",51,null],[11,"new","","",49,[[],["adjacent",3]]],[11,"new","","",50,[[],["graph",3]]],[11,"add_edge","","",50,[[]]],[11,"add_undirected_edge","","",50,[[]]],[11,"vertices","","",50,[[],["range",3]]],[11,"adjacency","","",50,[[],["vec",3]]],[11,"new","","",51,[[],["graphrec",3]]],[11,"dfs","","",51,[[["graph",3]]]],[0,"maximum_flow","competitive::graph","",null,null],[3,"RevEdge","competitive::graph::maximum_flow","",null,null],[12,"to","","",52,null],[12,"rev","","",52,null],[12,"cap","","",52,null],[3,"FordFulkerson","","",null,null],[3,"Dinic","","",null,null],[12,"graph","","",53,null],[11,"new","","",52,[[],["revedge",3]]],[11,"new","","",54,[[],["fordfulkerson",3]]],[11,"add_edge","","",54,[[]]],[11,"dfs","","",54,[[]]],[11,"maximum_flow","","",54,[[]]],[11,"new","","",53,[[],["dinic",3]]],[11,"add_edge","","",53,[[]]],[11,"maximum_flow","","",53,[[]]],[0,"minimum_cost_flow","competitive::graph","",null,null],[3,"RevEdge","competitive::graph::minimum_cost_flow","",null,null],[12,"to","","",55,null],[12,"rev","","",55,null],[12,"cap","","",55,null],[12,"cost","","",55,null],[3,"PrimalDual","","",null,null],[11,"new","","",55,[[],["revedge",3]]],[11,"new","","",56,[[],["primaldual",3]]],[11,"add_edge","","",56,[[]]],[11,"minimum_cost_flow","","",56,[[],["option",4]]],[0,"strongly_connected_component","competitive::graph","",null,null],[3,"StronglyConnectedComponent","competitive::graph::strongly_connected_component","",null,null],[3,"TwoSatisfiability","","",null,null],[11,"new","","",57,[[]]],[11,"add_edge","","",57,[[]]],[11,"dfs","","",57,[[]]],[11,"rdfs","","",57,[[]]],[11,"build","","",57,[[]]],[11,"gen_cgraph","","",57,[[],[["vec",3],["vec",3]]]],[11,"component","","",57,[[],[["hashset",3],["vec",3]]]],[11,"new","","",58,[[]]],[11,"add_inner","","",58,[[]]],[11,"add_or","","",58,[[]]],[11,"add_nand","","",58,[[]]],[11,"set_true","","",58,[[]]],[11,"set_false","","",58,[[]]],[11,"build","","",58,[[],[["option",4],["vec",3]]]],[0,"topological_sort","competitive::graph","",null,null],[11,"topological_sort","competitive::graph::base","",50,[[],["vec",3]]],[11,"new","competitive::graph","",59,[[],["directedacyclicgraph",3]]],[11,"add_edge","","",59,[[]]],[11,"bfs","","",59,[[],["option",4]]],[0,"math","competitive","",null,null],[0,"anymod","competitive::math","",null,null],[3,"AnyMod","competitive::math::anymod","",null,null],[11,"new","","",60,[[]]],[11,"modulo","","",60,[[]]],[11,"pow","","",60,[[]]],[11,"inv","","",60,[[]]],[0,"anymodu32","competitive::math","",null,null],[3,"AnyModu32","competitive::math::anymodu32","",null,null],[0,"modu32_impl","","",null,null],[11,"new","","",61,[[]]],[11,"new_unchecked","","",61,[[]]],[11,"one","","",61,[[]]],[11,"zero","","",61,[[]]],[11,"get_modulo","","",61,[[]]],[11,"set_modulo","","",61,[[]]],[11,"pow","","",61,[[]]],[11,"inv","","",61,[[]]],[0,"factorial","competitive::math","",null,null],[3,"MemorizedFactorial","competitive::math::factorial","",null,null],[3,"SmallModMemorizedFactorial","","",null,null],[11,"new","","",62,[[],["memorizedfactorial",3]]],[11,"combination","","",62,[[],["modi64",3]]],[11,"permutation","","",62,[[],["modi64",3]]],[11,"homogeneous_product","","",62,[[],["modi64",3]]],[11,"new","","",63,[[],["smallmodmemorizedfactorial",3]]],[11,"factorial","","n! = a * p^e",63,[[]]],[11,"combination","","",63,[[],["anymod",3]]],[0,"gcd","competitive::math","",null,null],[5,"gcd","competitive::math::gcd","",null,[[]]],[5,"gcd_binary","","",null,[[]]],[5,"lcm","","",null,[[]]],[5,"extgcd","","",null,[[]]],[5,"extgcd_loop","","",null,[[]]],[5,"extgcd_binary","","",null,[[]]],[5,"modinv","","",null,[[]]],[5,"modinv_loop","","",null,[[]]],[5,"modinv_extgcd_binary","","0 < a < p, gcd(a, p) == 1, p is prime > 2",null,[[]]],[0,"matrix","competitive::math","",null,null],[3,"Matrix","competitive::math::matrix","",null,null],[12,"shape","","",64,null],[12,"data","","",64,null],[11,"new","","",64,[[]]],[11,"from_vec","","",64,[[["vec",3],["vec",3]]]],[11,"zeros","","",64,[[]]],[11,"eye","","",64,[[]]],[11,"pow","","",64,[[]]],[11,"gauss_jordan","","",64,[[["vec",3]],[["vec",3],["option",4]]]],[0,"modi64","competitive::math","",null,null],[3,"Modi64","competitive::math::modi64","",null,null],[12,"0","","",65,null],[11,"new","","",65,[[]]],[11,"modulo","","",65,[[]]],[11,"pow","","",65,[[]]],[11,"inv","","",65,[[]]],[0,"modu32","competitive::math","",null,null],[3,"Modu32","competitive::math::modu32","",null,null],[0,"modulos","","",null,null],[3,"Modulo1000000007","competitive::math::modu32::modulos","",null,null],[3,"Modulo1000000009","","",null,null],[3,"Modulo998244353","","",null,null],[0,"modu32_impl","competitive::math::modu32","",null,null],[8,"Modulo","","",null,null],[18,"MODULO","","",66,null],[11,"modulo","","",66,[[]]],[11,"new","","",67,[[]]],[11,"new_unchecked","","",67,[[]]],[11,"one","","",67,[[]]],[11,"zero","","",67,[[]]],[11,"get_mod","","",67,[[]]],[11,"pow","","",67,[[]]],[11,"inv","","",67,[[]]],[0,"nums","competitive::math","",null,null],[3,"BabyStepGiantStep","competitive::math::nums","",null,null],[5,"binary_exponentiation","","",null,[[["clone",8],["mulassign",8]],[["clone",8],["mulassign",8]]]],[11,"new","","",68,[[]]],[11,"solve","","",68,[[],["option",4]]],[0,"polynomial","competitive::math","",null,null],[3,"Polynomial","competitive::math::polynomial","",null,null],[12,"0","","",69,null],[12,"1","","",69,null],[5,"poly_add","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_sub","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_mul","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_div","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_mod","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_assign","","",null,[[["polynomial",3]]]],[0,"poly_mod_poly","","",null,null],[5,"poly_mulmod","competitive::math::polynomial::poly_mod_poly","",null,[[["poly",6]],["poly",6]]],[5,"poly_pow","","",null,[[["poly",6]],["poly",6]]],[6,"Poly","","",null,null],[11,"len","competitive::math::polynomial","",69,[[]]],[0,"prime","competitive::math","",null,null],[3,"PrimeTable","competitive::math::prime","",null,null],[3,"EulerPhiTable","","",null,null],[5,"prime_factors","","",null,[[],["hashmap",3]]],[5,"divisors","","",null,[[],["vec",3]]],[5,"pow","","",null,[[]]],[5,"miller_rabin","","",null,[[]]],[5,"euler_phi","","",null,[[]]],[5,"moebius","","g(d) = Sigma mu(d) * f(n/d)",null,[[],["hashmap",3]]],[11,"new","","",70,[[]]],[11,"is_prime","","",70,[[]]],[11,"prime_factors","","",70,[[],["hashmap",3]]],[11,"new","","",71,[[]]],[11,"get","","",71,[[]]],[0,"quad_double","competitive::math","",null,null],[3,"QuadDouble","competitive::math::quad_double","ref: https://na-inet.jp/na/qd_ja.pdf",null,null],[0,"quad_double_impl","","",null,null],[5,"quick_two_sum","competitive::math::quad_double::quad_double_impl","",null,[[]]],[5,"two_sum","","",null,[[]]],[5,"split","","",null,[[]]],[5,"two_prod","","",null,[[]]],[5,"three_three_sum","","",null,[[]]],[5,"three_two_sum","","",null,[[]]],[5,"multiple_three_sum","","",null,[[]]],[5,"multiple_two_sum","","",null,[[]]],[5,"double_accumulate","","",null,[[]]],[11,"new","competitive::math::quad_double","",72,[[]]],[11,"renormalize","","",72,[[]]],[0,"string","competitive","",null,null],[0,"knuth_morris_pratt","competitive::string","",null,null],[3,"KnuthMorrisPratt","competitive::string::knuth_morris_pratt","",null,null],[11,"new","","",73,[[["vec",3]],["knuthmorrispratt",3]]],[11,"search_all","","",73,[[["vec",3]],["vec",3]]],[0,"rolling_hash","competitive::string","",null,null],[3,"RollingHash","competitive::string::rolling_hash","",null,null],[3,"MultipleRollingHash","","",null,null],[18,"MOD","","",74,null],[11,"mersenne_mod","","",74,[[]]],[11,"mersenne_mul","","",74,[[]]],[11,"mersenne_mul_mod","","",74,[[]]],[11,"new","","",74,[[["vec",3]]]],[11,"hash_once","","",74,[[["vec",3]]]],[11,"find","","S [l, r)",74,[[]]],[11,"concat","","",74,[[]]],[11,"new","","",75,[[["vec",3]]]],[11,"new_rand","","",75,[[["vec",3]]]],[11,"find","","",75,[[],["vec",3]]],[11,"concat","","",75,[[["vec",3]],["vec",3]]],[0,"suffix_array","competitive::string","",null,null],[3,"SuffixArray","competitive::string::suffix_array","",null,null],[11,"new","","",76,[[["vec",3]]]],[11,"len","","",76,[[]]],[11,"longest_common_prefix_array","","",76,[[],["vec",3]]],[0,"z_algorithm","competitive::string","",null,null],[3,"Zarray","competitive::string::z_algorithm","",null,null],[11,"new","","",77,[[],["zarray",3]]],[11,"search","","",77,[[["eq",8],["vec",3]],["vec",3]]],[0,"tools","competitive","",null,null],[0,"input","competitive::tools","",null,null],[0,"iterable","","",null,null],[0,"output","","",null,null],[5,"with_bufwriter","competitive::tools::output","",null,[[],["result",6]]],[0,"random","competitive::tools","",null,null],[3,"Xorshift","competitive::tools::random","",null,null],[11,"new","","",78,[[]]],[11,"time","","",78,[[]]],[11,"next","","",78,[[]]],[11,"rand","","",78,[[]]],[11,"rands","","",78,[[],["vec",3]]],[11,"randf","","",78,[[]]],[0,"scanner","competitive::tools","",null,null],[3,"Scanner","competitive::tools::scanner","",null,null],[5,"read_stdin_all","","",null,[[],["string",3]]],[5,"read_all","","",null,[[],["string",3]]],[8,"IterScan","","",null,null],[10,"scan","","",79,[[],["option",4]]],[11,"new","","",80,[[]]],[11,"scan_from_str","","",80,[[],["fromstr",8]]],[11,"scan","","",80,[[],["iterscan",8]]],[11,"scan_vec","","",80,[[],[["vec",3],["iterscan",8]]]],[11,"scan_chars","","",80,[[],["vec",3]]],[0,"tree","competitive","",null,null],[0,"depth","competitive::tree","",null,null],[11,"tree_depth","competitive::graph::base","",50,[[],["vec",3]]],[11,"tree_size","","",50,[[],["vec",3]]],[0,"euler_tour","competitive::tree","",null,null],[3,"EulerTourForEdge","competitive::tree::euler_tour","",null,null],[3,"EulerTourForVertex","","",null,null],[3,"EulerTourForRichVertex","","",null,null],[3,"LowestCommonAncestor","","",null,null],[3,"LCAMonoid","","",null,null],[0,"impl_lcam","","",null,null],[11,"new","","",81,[[["graph",3]]]],[11,"ancestor","","",81,[[]]],[11,"new","","",82,[[]]],[11,"len","","",82,[[]]],[11,"edge_tour","","",82,[[["graph",3]]]],[11,"new","","",83,[[]]],[11,"len","","",83,[[]]],[11,"subtree_vertex_tour","","",83,[[["graph",3]]]],[11,"path_vertex_tour","","",83,[[["graph",3]]]],[11,"subtree_query","","",83,[[["fnmut",8]]]],[11,"subtree_update","","",83,[[["fnmut",8]]]],[11,"path_query","","",83,[[["fnmut",8]]]],[11,"path_update","","",83,[[["fnmut",8]]]],[11,"new","","",84,[[]]],[11,"len","","",84,[[]]],[11,"vertex_tour","","",84,[[["graph",3]]]],[11,"query","","",84,[[["fnmut",8]]]],[11,"gen_lca","","",84,[[["graph",3]],["lowestcommonancestor",3]]],[11,"lca","","",85,[[]]],[0,"rerooting","competitive::tree","",null,null],[3,"ReRooting","competitive::tree::rerooting","",null,null],[11,"new","","",86,[[]]],[11,"eidx","","",86,[[["adjacent",3]]]],[11,"reidx","","",86,[[["adjacent",3]]]],[11,"merge","","",86,[[]]],[11,"add_subroot","","",86,[[]]],[11,"add_root","","",86,[[]]],[11,"dfs","","",86,[[["adjacent",3],["graph",3]]]],[11,"efs","","",86,[[["graph",3]]]],[11,"rerooting","","",86,[[["graph",3]]]],[0,"tree","competitive::tree","",null,null],[3,"TreeRec","competitive::tree::tree","",null,null],[12,"n","","",87,null],[11,"new","","",87,[[],["treerec",3]]],[11,"dfs","","",87,[[["graph",3]]]],[0,"aizu_online_judge","competitive","",null,null],[0,"dsl","competitive::aizu_online_judge","",null,null],[0,"dsl_2_d","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_d","competitive::aizu_online_judge::dsl::dsl_2_d","✅  AC  72ms",null,[[],["result",6]]],[0,"dsl_2_e","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_e","competitive::aizu_online_judge::dsl::dsl_2_e","✅  AC  76ms",null,[[],["result",6]]],[0,"dsl_2_f","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_f","competitive::aizu_online_judge::dsl::dsl_2_f","✅  AC  88ms",null,[[],["result",6]]],[0,"dsl_2_g","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_g","competitive::aizu_online_judge::dsl::dsl_2_g","✅  AC  81ms",null,[[],["result",6]]],[0,"dsl_2_h","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_h","competitive::aizu_online_judge::dsl::dsl_2_h","✅  AC  76ms",null,[[],["result",6]]],[0,"dsl_2_i","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_i","competitive::aizu_online_judge::dsl::dsl_2_i","✅  AC  119ms",null,[[],["result",6]]],[0,"itp1","competitive::aizu_online_judge","",null,null],[0,"itp1_1_a","competitive::aizu_online_judge::itp1","",null,null],[5,"itp1_1_a","competitive::aizu_online_judge::itp1::itp1_1_a","✅  AC  0ms",null,[[],["result",6]]],[0,"library_checker","competitive","",null,null],[0,"datastructure","competitive::library_checker","",null,null],[0,"point_add_range_sum","competitive::library_checker::datastructure","",null,null],[5,"point_add_range_sum_binary_indexed_tree","competitive::library_checker::datastructure::point_add_range_sum","✅  AC  92ms",null,[[],["result",6]]],[5,"point_add_range_sum_segment_tree","","✅  AC  115ms",null,[[],["result",6]]],[0,"point_set_range_composite","competitive::library_checker::datastructure","",null,null],[5,"point_set_range_composite","competitive::library_checker::datastructure::point_set_range_composite","✅  AC  167ms",null,[[],["result",6]]],[0,"queue_operate_all_composite","competitive::library_checker::datastructure","",null,null],[5,"queue_operate_all_composite","competitive::library_checker::datastructure::queue_operate_all_composite","✅  AC  38ms",null,[[],["result",6]]],[0,"range_affine_range_sum","competitive::library_checker::datastructure","",null,null],[5,"range_affine_range_sum","competitive::library_checker::datastructure::range_affine_range_sum","✅  AC  935ms",null,[[],["result",6]]],[0,"staticrmq","competitive::library_checker::datastructure","",null,null],[5,"staticrmq_disjoint_sparse_table","competitive::library_checker::datastructure::staticrmq","✅  AC  142ms",null,[[],["result",6]]],[5,"staticrmq_segment_tree","","✅  AC  129ms",null,[[],["result",6]]],[0,"unionfind","competitive::library_checker::datastructure","",null,null],[5,"unionfind","competitive::library_checker::datastructure::unionfind","✅  AC  18ms",null,[[],["result",6]]],[0,"graph","competitive::library_checker","",null,null],[0,"bipartitematching","competitive::library_checker::graph","",null,null],[5,"bipartitematching","competitive::library_checker::graph::bipartitematching","✅  AC  455ms",null,[[],["result",6]]],[0,"lca","competitive::library_checker::graph","",null,null],[5,"lca","competitive::library_checker::graph::lca","✅  AC  555ms",null,[[],["result",6]]],[0,"scc","competitive::library_checker::graph","",null,null],[5,"scc","competitive::library_checker::graph::scc","✅  AC  544ms",null,[[],["result",6]]],[0,"math","competitive::library_checker","",null,null],[0,"two_sat","competitive::library_checker::math","",null,null],[5,"two_sat","competitive::library_checker::math::two_sat","✅  AC  732ms",null,[[],["result",6]]],[0,"sample","competitive::library_checker","",null,null],[0,"aplusb","competitive::library_checker::sample","",null,null],[5,"aplusb","competitive::library_checker::sample::aplusb","✅  AC  0ms",null,[[],["result",6]]],[0,"many_aplusb","competitive::library_checker::sample","",null,null],[5,"many_aplusb","competitive::library_checker::sample::many_aplusb","✅  AC  189ms",null,[[],["result",6]]],[0,"string","competitive::library_checker","",null,null],[0,"suffixarray","competitive::library_checker::string","",null,null],[5,"suffixarray","competitive::library_checker::string::suffixarray","✅  AC  814ms",null,[[],["result",6]]],[0,"zalgorithm","competitive::library_checker::string","",null,null],[5,"zalgorithm","competitive::library_checker::string::zalgorithm","✅  AC  24ms",null,[[],["result",6]]],[14,"impl_additive_identity","competitive","",null,null],[14,"impl_multiplicative_identity","","",null,null],[14,"impl_bitand_identity","","",null,null],[14,"impl_bitor_identity","","",null,null],[14,"read_value","","",null,null],[14,"input_inner","","",null,null],[14,"input","","",null,null],[11,"from","competitive::algebra::effect","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","competitive::algebra::operations","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","competitive::algorithm::compress","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","competitive::algorithm::convex_hull_trick","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","competitive::data_structure","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","competitive::data_structure::binary_indexed_tree","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","competitive::data_structure::bitset","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","competitive::data_structure::disjoint_sparse_table","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","competitive::data_structure::lazy_segment_tree","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","competitive::data_structure::segment_tree","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","competitive::data_structure::sliding_winsow_aggregation","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","competitive::data_structure::union_find","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","competitive::geometry","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","competitive::geometry::circle","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","competitive::geometry::complex","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","competitive::geometry::line","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","competitive::graph","",59,[[]]],[11,"into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","competitive::graph::base","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","competitive::graph::maximum_flow","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","competitive::graph::minimum_cost_flow","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","competitive::graph::strongly_connected_component","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","competitive::math::anymod","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"to_string","","",60,[[],["string",3]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","competitive::math::anymodu32","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"to_string","","",61,[[],["string",3]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","competitive::math::factorial","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","competitive::math::matrix","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","competitive::math::modi64","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"to_string","","",65,[[],["string",3]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","competitive::math::modu32","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"to_string","","",67,[[],["string",3]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","competitive::math::modu32::modulos","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"to_owned","","",91,[[]]],[11,"clone_into","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","competitive::math::nums","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","competitive::math::polynomial","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","competitive::math::prime","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","competitive::math::quad_double","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"to_string","","",72,[[],["string",3]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","competitive::string::knuth_morris_pratt","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","competitive::string::rolling_hash","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","competitive::string::suffix_array","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","competitive::string::z_algorithm","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","competitive::tools::random","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","competitive::tools::scanner","",80,[[]]],[11,"into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","competitive::tree::euler_tour","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","competitive::tree::rerooting","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","competitive::tree::tree","",87,[[]]],[11,"into","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"effect","competitive::algebra::effect","",4,[[]]],[11,"scan","competitive::math::modu32","",67,[[],["option",4]]],[11,"operate","competitive::algebra::effect","",4,[[]]],[11,"operate","competitive::algebra::operations","",6,[[]]],[11,"operate","","",7,[[]]],[11,"operate","","",8,[[]]],[11,"operate","","",9,[[]]],[11,"operate","","",10,[[]]],[11,"operate","","",11,[[]]],[11,"operate","","",12,[[]]],[11,"operate","","",13,[[]]],[11,"operate","","",14,[[]]],[11,"operate","","",15,[[]]],[11,"operate","","",16,[[]]],[11,"operate","","",88,[[]]],[11,"operate","","",17,[[]]],[11,"operate","","",18,[[]]],[11,"operate","","",19,[[]]],[11,"operate","competitive::tree::euler_tour","",81,[[]]],[11,"unit","competitive::algebra::effect","",4,[[]]],[11,"unit","competitive::algebra::operations","",6,[[]]],[11,"unit","","",7,[[]]],[11,"unit","","",8,[[]]],[11,"unit","","",9,[[]]],[11,"unit","","",10,[[]]],[11,"unit","","",11,[[]]],[11,"unit","","",12,[[]]],[11,"unit","","",13,[[]]],[11,"unit","","",14,[[]]],[11,"unit","","",15,[[]]],[11,"unit","","",16,[[]]],[11,"unit","","",17,[[]]],[11,"unit","","",18,[[]]],[11,"unit","","",19,[[]]],[11,"inverse","","",10,[[]]],[11,"inverse","","",11,[[]]],[11,"inverse","","",16,[[]]],[11,"inverse","","",18,[[]]],[11,"zero","competitive::math::anymodu32","",61,[[]]],[11,"zero","competitive::math::modu32","",67,[[]]],[11,"one","competitive::math::anymodu32","",61,[[]]],[11,"one","competitive::math::modu32","",67,[[]]],[11,"from","competitive::math::anymodu32","",61,[[]]],[11,"from","","",61,[[]]],[11,"from","competitive::math::modi64","",65,[[]]],[11,"from","competitive::math::modu32","",67,[[]]],[11,"from","","",67,[[]]],[11,"from","competitive::math::quad_double","",72,[[]]],[11,"into","","",72,[[]]],[11,"clone","competitive::algebra::effect","",4,[[],["anymonoideffect",3]]],[11,"clone","competitive::algebra::operations","",6,[[],["maxoperation",3]]],[11,"clone","","",7,[[],["minoperation",3]]],[11,"clone","","",8,[[],["firstoperation",3]]],[11,"clone","","",9,[[],["lastoperation",3]]],[11,"clone","","",10,[[],["additiveoperation",3]]],[11,"clone","","",11,[[],["multiplicativeoperation",3]]],[11,"clone","","",12,[[],["linearoperation",3]]],[11,"clone","","",13,[[],["bitandoperation",3]]],[11,"clone","","",14,[[],["bitoroperation",3]]],[11,"clone","","",15,[[],["monoidaloperation",3]]],[11,"clone","","",16,[[],["groupoperation",3]]],[11,"clone","","",88,[[],["assocoativeoperator",3]]],[11,"clone","","",17,[[],["absorbedassocoativeoperator",3]]],[11,"clone","","",18,[[],["cartesianoperation",3]]],[11,"clone","","",19,[[],["countingoperation",3]]],[11,"clone","competitive::algorithm::compress","",26,[[],["compress",3]]],[11,"clone","competitive::algorithm::convex_hull_trick","",27,[[],["chtline",3]]],[11,"clone","","",28,[[],["convexhulltrick",3]]],[11,"clone","competitive::data_structure::binary_indexed_tree","",33,[[],["binaryindexedtree",3]]],[11,"clone","","",34,[[],["binaryindexedtree2d",3]]],[11,"clone","competitive::data_structure::bitset","",35,[[],["bitset",3]]],[11,"clone","competitive::data_structure::disjoint_sparse_table","",36,[[],["disjointsparsetable",3]]],[11,"clone","competitive::data_structure::lazy_segment_tree","",37,[[],["lazysegmenttree",3]]],[11,"clone","competitive::data_structure::segment_tree","",38,[[],["segmenttree",3]]],[11,"clone","competitive::data_structure::sliding_winsow_aggregation","",39,[[],["queueaggregation",3]]],[11,"clone","","",40,[[],["dequeaggregation",3]]],[11,"clone","competitive::data_structure::union_find","",41,[[],["unionfind",3]]],[11,"clone","","",42,[[],["weightedunionfind",3]]],[11,"clone","competitive::data_structure","",31,[[],["rev",3]]],[11,"clone","competitive::geometry::circle","",45,[[],["circle",3]]],[11,"clone","competitive::geometry::complex","",46,[[],["complex",3]]],[11,"clone","competitive::geometry::line","",47,[[],["line",3]]],[11,"clone","","",48,[[],["linesegment",3]]],[11,"clone","competitive::geometry","",43,[[],["real",3]]],[11,"clone","","",44,[[],["ccw",4]]],[11,"clone","competitive::graph::base","",49,[[],["adjacent",3]]],[11,"clone","","",50,[[],["graph",3]]],[11,"clone","competitive::graph::maximum_flow","",52,[[],["revedge",3]]],[11,"clone","competitive::graph::minimum_cost_flow","",55,[[],["revedge",3]]],[11,"clone","competitive::math::anymod","",60,[[],["anymod",3]]],[11,"clone","competitive::math::anymodu32","",61,[[],["anymodu32",3]]],[11,"clone","competitive::math::factorial","",62,[[],["memorizedfactorial",3]]],[11,"clone","","",63,[[],["smallmodmemorizedfactorial",3]]],[11,"clone","competitive::math::matrix","",64,[[],["matrix",3]]],[11,"clone","competitive::math::modi64","",65,[[],["modi64",3]]],[11,"clone","competitive::math::modu32::modulos","",89,[[],["modulo1000000007",3]]],[11,"clone","","",90,[[],["modulo1000000009",3]]],[11,"clone","","",91,[[],["modulo998244353",3]]],[11,"clone","competitive::math::modu32","",67,[[],["modu32",3]]],[11,"clone","competitive::math::nums","",68,[[],["babystepgiantstep",3]]],[11,"clone","competitive::math::polynomial","",69,[[],["polynomial",3]]],[11,"clone","competitive::math::prime","",70,[[],["primetable",3]]],[11,"clone","","",71,[[],["eulerphitable",3]]],[11,"clone","competitive::math::quad_double","",72,[[],["quaddouble",3]]],[11,"clone","competitive::string::knuth_morris_pratt","",73,[[],["knuthmorrispratt",3]]],[11,"clone","competitive::string::rolling_hash","",74,[[],["rollinghash",3]]],[11,"clone","","",75,[[],["multiplerollinghash",3]]],[11,"clone","competitive::string::suffix_array","",76,[[],["suffixarray",3]]],[11,"clone","competitive::string::z_algorithm","",77,[[],["zarray",3]]],[11,"clone","competitive::tools::random","",78,[[],["xorshift",3]]],[11,"clone","competitive::tree::euler_tour","",82,[[],["eulertourforedge",3]]],[11,"clone","","",83,[[],["eulertourforvertex",3]]],[11,"clone","","",84,[[],["eulertourforrichvertex",3]]],[11,"clone","","",85,[[],["lowestcommonancestor",3]]],[11,"clone","","",81,[[],["lcamonoid",3]]],[11,"clone","competitive::tree::rerooting","",86,[[],["rerooting",3]]],[11,"default","competitive::algebra::effect","",4,[[],["anymonoideffect",3]]],[11,"default","competitive::algebra::operations","",6,[[],["maxoperation",3]]],[11,"default","","",7,[[],["minoperation",3]]],[11,"default","","",8,[[],["firstoperation",3]]],[11,"default","","",9,[[],["lastoperation",3]]],[11,"default","","",10,[[],["additiveoperation",3]]],[11,"default","","",11,[[],["multiplicativeoperation",3]]],[11,"default","","",12,[[],["linearoperation",3]]],[11,"default","","",13,[[],["bitandoperation",3]]],[11,"default","","",14,[[],["bitoroperation",3]]],[11,"default","competitive::algorithm::convex_hull_trick","",27,[[],["chtline",3]]],[11,"default","competitive::data_structure::bitset","",35,[[],["bitset",3]]],[11,"default","competitive::geometry::complex","",46,[[],["complex",3]]],[11,"default","competitive::graph::base","",49,[[],["adjacent",3]]],[11,"default","","",50,[[],["graph",3]]],[11,"default","competitive::math::anymod","",60,[[],["anymod",3]]],[11,"default","competitive::math::anymodu32","",61,[[],["anymodu32",3]]],[11,"default","competitive::math::modi64","",65,[[],["modi64",3]]],[11,"default","competitive::math::modu32::modulos","",89,[[],["modulo1000000007",3]]],[11,"default","","",90,[[],["modulo1000000009",3]]],[11,"default","","",91,[[],["modulo998244353",3]]],[11,"default","competitive::math::modu32","",67,[[],["modu32",3]]],[11,"default","competitive::math::polynomial","",69,[[],["polynomial",3]]],[11,"default","competitive::math::quad_double","",72,[[],["quaddouble",3]]],[11,"default","competitive::tools::random","",78,[[]]],[11,"default","competitive::tree::euler_tour","",82,[[],["eulertourforedge",3]]],[11,"default","","",83,[[],["eulertourforvertex",3]]],[11,"default","","",84,[[],["eulertourforrichvertex",3]]],[11,"cmp","competitive::algebra::effect","",4,[[["anymonoideffect",3]],["ordering",4]]],[11,"cmp","competitive::algebra::operations","",6,[[["maxoperation",3]],["ordering",4]]],[11,"cmp","","",7,[[["minoperation",3]],["ordering",4]]],[11,"cmp","","",8,[[["firstoperation",3]],["ordering",4]]],[11,"cmp","","",9,[[["lastoperation",3]],["ordering",4]]],[11,"cmp","","",10,[[["additiveoperation",3]],["ordering",4]]],[11,"cmp","","",11,[[["multiplicativeoperation",3]],["ordering",4]]],[11,"cmp","","",12,[[["linearoperation",3]],["ordering",4]]],[11,"cmp","","",13,[[["bitandoperation",3]],["ordering",4]]],[11,"cmp","","",14,[[["bitoroperation",3]],["ordering",4]]],[11,"cmp","competitive::data_structure::bitset","",35,[[["bitset",3]],["ordering",4]]],[11,"cmp","competitive::data_structure","",31,[[["rev",3]],["ordering",4]]],[11,"cmp","","",32,[[["totalord",3]],["ordering",4]]],[11,"cmp","competitive::geometry","",44,[[["ccw",4]],["ordering",4]]],[11,"cmp","competitive::math::modu32::modulos","",89,[[["modulo1000000007",3]],["ordering",4]]],[11,"cmp","","",90,[[["modulo1000000009",3]],["ordering",4]]],[11,"cmp","","",91,[[["modulo998244353",3]],["ordering",4]]],[11,"eq","competitive::algebra::effect","",4,[[["anymonoideffect",3]]]],[11,"ne","","",4,[[["anymonoideffect",3]]]],[11,"eq","competitive::algebra::operations","",6,[[["maxoperation",3]]]],[11,"ne","","",6,[[["maxoperation",3]]]],[11,"eq","","",7,[[["minoperation",3]]]],[11,"ne","","",7,[[["minoperation",3]]]],[11,"eq","","",8,[[["firstoperation",3]]]],[11,"ne","","",8,[[["firstoperation",3]]]],[11,"eq","","",9,[[["lastoperation",3]]]],[11,"ne","","",9,[[["lastoperation",3]]]],[11,"eq","","",10,[[["additiveoperation",3]]]],[11,"ne","","",10,[[["additiveoperation",3]]]],[11,"eq","","",11,[[["multiplicativeoperation",3]]]],[11,"ne","","",11,[[["multiplicativeoperation",3]]]],[11,"eq","","",12,[[["linearoperation",3]]]],[11,"ne","","",12,[[["linearoperation",3]]]],[11,"eq","","",13,[[["bitandoperation",3]]]],[11,"ne","","",13,[[["bitandoperation",3]]]],[11,"eq","","",14,[[["bitoroperation",3]]]],[11,"ne","","",14,[[["bitoroperation",3]]]],[11,"eq","competitive::algorithm::convex_hull_trick","",27,[[["chtline",3]]]],[11,"ne","","",27,[[["chtline",3]]]],[11,"eq","competitive::data_structure::bitset","",35,[[["bitset",3]]]],[11,"ne","","",35,[[["bitset",3]]]],[11,"eq","competitive::data_structure","",31,[[["rev",3]]]],[11,"ne","","",31,[[["rev",3]]]],[11,"eq","","",32,[[["totalord",3]]]],[11,"ne","","",32,[[["totalord",3]]]],[11,"eq","competitive::geometry::circle","",45,[[["circle",3]]]],[11,"ne","","",45,[[["circle",3]]]],[11,"eq","competitive::geometry::complex","",46,[[["complex",3]]]],[11,"ne","","",46,[[["complex",3]]]],[11,"eq","competitive::geometry::line","",47,[[["line",3]]]],[11,"ne","","",47,[[["line",3]]]],[11,"eq","","",48,[[["linesegment",3]]]],[11,"ne","","",48,[[["linesegment",3]]]],[11,"eq","competitive::geometry","",43,[[["real",3]]]],[11,"eq","","",44,[[["ccw",4]]]],[11,"eq","competitive::graph::base","",49,[[["adjacent",3]]]],[11,"ne","","",49,[[["adjacent",3]]]],[11,"eq","competitive::math::anymod","",60,[[["anymod",3]]]],[11,"ne","","",60,[[["anymod",3]]]],[11,"eq","competitive::math::anymodu32","",61,[[["anymodu32",3]]]],[11,"ne","","",61,[[["anymodu32",3]]]],[11,"eq","competitive::math::matrix","",64,[[["matrix",3]]]],[11,"ne","","",64,[[["matrix",3]]]],[11,"eq","competitive::math::modi64","",65,[[["modi64",3]]]],[11,"ne","","",65,[[["modi64",3]]]],[11,"eq","competitive::math::modu32::modulos","",89,[[["modulo1000000007",3]]]],[11,"eq","","",90,[[["modulo1000000009",3]]]],[11,"eq","","",91,[[["modulo998244353",3]]]],[11,"eq","competitive::math::modu32","",67,[[["modu32",3]]]],[11,"ne","","",67,[[["modu32",3]]]],[11,"eq","competitive::math::polynomial","",69,[[["polynomial",3]]]],[11,"ne","","",69,[[["polynomial",3]]]],[11,"eq","competitive::math::quad_double","",72,[[["quaddouble",3]]]],[11,"ne","","",72,[[["quaddouble",3]]]],[11,"partial_cmp","competitive::algebra::effect","",4,[[["anymonoideffect",3]],[["ordering",4],["option",4]]]],[11,"lt","","",4,[[["anymonoideffect",3]]]],[11,"le","","",4,[[["anymonoideffect",3]]]],[11,"gt","","",4,[[["anymonoideffect",3]]]],[11,"ge","","",4,[[["anymonoideffect",3]]]],[11,"partial_cmp","competitive::algebra::operations","",6,[[["maxoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",6,[[["maxoperation",3]]]],[11,"le","","",6,[[["maxoperation",3]]]],[11,"gt","","",6,[[["maxoperation",3]]]],[11,"ge","","",6,[[["maxoperation",3]]]],[11,"partial_cmp","","",7,[[["minoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",7,[[["minoperation",3]]]],[11,"le","","",7,[[["minoperation",3]]]],[11,"gt","","",7,[[["minoperation",3]]]],[11,"ge","","",7,[[["minoperation",3]]]],[11,"partial_cmp","","",8,[[["firstoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",8,[[["firstoperation",3]]]],[11,"le","","",8,[[["firstoperation",3]]]],[11,"gt","","",8,[[["firstoperation",3]]]],[11,"ge","","",8,[[["firstoperation",3]]]],[11,"partial_cmp","","",9,[[["lastoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",9,[[["lastoperation",3]]]],[11,"le","","",9,[[["lastoperation",3]]]],[11,"gt","","",9,[[["lastoperation",3]]]],[11,"ge","","",9,[[["lastoperation",3]]]],[11,"partial_cmp","","",10,[[["additiveoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",10,[[["additiveoperation",3]]]],[11,"le","","",10,[[["additiveoperation",3]]]],[11,"gt","","",10,[[["additiveoperation",3]]]],[11,"ge","","",10,[[["additiveoperation",3]]]],[11,"partial_cmp","","",11,[[["multiplicativeoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",11,[[["multiplicativeoperation",3]]]],[11,"le","","",11,[[["multiplicativeoperation",3]]]],[11,"gt","","",11,[[["multiplicativeoperation",3]]]],[11,"ge","","",11,[[["multiplicativeoperation",3]]]],[11,"partial_cmp","","",12,[[["linearoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",12,[[["linearoperation",3]]]],[11,"le","","",12,[[["linearoperation",3]]]],[11,"gt","","",12,[[["linearoperation",3]]]],[11,"ge","","",12,[[["linearoperation",3]]]],[11,"partial_cmp","","",13,[[["bitandoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",13,[[["bitandoperation",3]]]],[11,"le","","",13,[[["bitandoperation",3]]]],[11,"gt","","",13,[[["bitandoperation",3]]]],[11,"ge","","",13,[[["bitandoperation",3]]]],[11,"partial_cmp","","",14,[[["bitoroperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",14,[[["bitoroperation",3]]]],[11,"le","","",14,[[["bitoroperation",3]]]],[11,"gt","","",14,[[["bitoroperation",3]]]],[11,"ge","","",14,[[["bitoroperation",3]]]],[11,"partial_cmp","competitive::data_structure::bitset","",35,[[["bitset",3]],[["ordering",4],["option",4]]]],[11,"lt","","",35,[[["bitset",3]]]],[11,"le","","",35,[[["bitset",3]]]],[11,"gt","","",35,[[["bitset",3]]]],[11,"ge","","",35,[[["bitset",3]]]],[11,"partial_cmp","competitive::data_structure","",31,[[["rev",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",32,[[["totalord",3]],[["ordering",4],["option",4]]]],[11,"lt","","",32,[[["totalord",3]]]],[11,"le","","",32,[[["totalord",3]]]],[11,"gt","","",32,[[["totalord",3]]]],[11,"ge","","",32,[[["totalord",3]]]],[11,"partial_cmp","competitive::geometry","",43,[[["real",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",44,[[["ccw",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","competitive::math::modu32::modulos","",89,[[["modulo1000000007",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",90,[[["modulo1000000009",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",91,[[["modulo998244353",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","competitive::math::quad_double","",72,[[["quaddouble",3]],[["ordering",4],["option",4]]]],[11,"lt","","",72,[[["quaddouble",3]]]],[11,"le","","",72,[[["quaddouble",3]]]],[11,"gt","","",72,[[["quaddouble",3]]]],[11,"ge","","",72,[[["quaddouble",3]]]],[11,"fmt","competitive::algebra::effect","",4,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::algebra::operations","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::algorithm::compress","",26,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::algorithm::convex_hull_trick","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::binary_indexed_tree","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",34,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::bitset","",35,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::disjoint_sparse_table","",36,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::lazy_segment_tree","",37,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::segment_tree","",38,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::sliding_winsow_aggregation","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::union_find","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure","",31,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry::circle","",45,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry::complex","",46,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry::line","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::base","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::maximum_flow","",52,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::minimum_cost_flow","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::strongly_connected_component","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph","",59,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::anymod","",60,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::anymodu32","",61,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::factorial","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::matrix","",64,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::modi64","",65,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::modu32::modulos","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",91,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::modu32","",67,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::nums","",68,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::polynomial","",69,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::prime","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::quad_double","",72,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string::knuth_morris_pratt","",73,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string::rolling_hash","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string::suffix_array","",76,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string::z_algorithm","",77,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools::random","",78,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools::scanner","",80,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree::euler_tour","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",83,[[["formatter",3]],["result",6]]],[11,"fmt","","",84,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree::rerooting","",86,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree::tree","",87,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::anymod","",60,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","competitive::math::anymodu32","",61,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","competitive::math::modi64","",65,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","competitive::math::modu32","",67,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","competitive::math::quad_double","",72,[[["formatter",3]],[["result",4],["error",3]]]],[11,"div","competitive::geometry::complex","",46,[[]]],[11,"div","","",46,[[]]],[11,"div","competitive::math::anymod","",60,[[]]],[11,"div","","",60,[[["anymod",3]]]],[11,"div","competitive::math::anymodu32","",61,[[]]],[11,"div","","",61,[[["anymodu32",3]]]],[11,"div","competitive::math::modi64","",65,[[]]],[11,"div","","",65,[[["modi64",3]]]],[11,"div","competitive::math::modu32","",67,[[]]],[11,"div","","",67,[[["modu32",3]]]],[11,"sub","competitive::geometry::complex","",46,[[]]],[11,"sub","","",46,[[]]],[11,"sub","competitive::math::anymod","",60,[[]]],[11,"sub","","",60,[[["anymod",3]]]],[11,"sub","competitive::math::anymodu32","",61,[[]]],[11,"sub","","",61,[[["anymodu32",3]]]],[11,"sub","competitive::math::modi64","",65,[[]]],[11,"sub","","",65,[[["modi64",3]]]],[11,"sub","competitive::math::modu32","",67,[[]]],[11,"sub","","",67,[[["modu32",3]]]],[11,"sub","competitive::math::quad_double","",72,[[]]],[11,"add","competitive::geometry::complex","",46,[[]]],[11,"add","","",46,[[]]],[11,"add","competitive::math::anymod","",60,[[]]],[11,"add","","",60,[[["anymod",3]]]],[11,"add","competitive::math::anymodu32","",61,[[]]],[11,"add","","",61,[[["anymodu32",3]]]],[11,"add","competitive::math::modi64","",65,[[]]],[11,"add","","",65,[[["modi64",3]]]],[11,"add","competitive::math::modu32","",67,[[]]],[11,"add","","",67,[[["modu32",3]]]],[11,"add","competitive::math::quad_double","",72,[[]]],[11,"add","","",72,[[]]],[11,"mul","competitive::geometry::complex","",46,[[]]],[11,"mul","","",46,[[]]],[11,"mul","competitive::math::anymod","",60,[[]]],[11,"mul","","",60,[[["anymod",3]]]],[11,"mul","competitive::math::anymodu32","",61,[[]]],[11,"mul","","",61,[[["anymodu32",3]]]],[11,"mul","competitive::math::modi64","",65,[[]]],[11,"mul","","",65,[[["modi64",3]]]],[11,"mul","competitive::math::modu32","",67,[[]]],[11,"mul","","",67,[[["modu32",3]]]],[11,"mul","competitive::math::quad_double","",72,[[]]],[11,"mul","","",72,[[]]],[11,"neg","competitive::geometry::complex","",46,[[]]],[11,"neg","competitive::math::anymod","",60,[[]]],[11,"neg","competitive::math::anymodu32","",61,[[]]],[11,"neg","competitive::math::modi64","",65,[[]]],[11,"neg","competitive::math::modu32","",67,[[]]],[11,"neg","competitive::math::quad_double","",72,[[]]],[11,"add_assign","competitive::math::anymod","",60,[[]]],[11,"add_assign","","",60,[[["anymod",3]]]],[11,"add_assign","competitive::math::anymodu32","",61,[[["anymodu32",3]]]],[11,"add_assign","","",61,[[["anymodu32",3]]]],[11,"add_assign","competitive::math::modi64","",65,[[]]],[11,"add_assign","","",65,[[["modi64",3]]]],[11,"add_assign","competitive::math::modu32","",67,[[["modu32",3]]]],[11,"add_assign","","",67,[[["modu32",3]]]],[11,"sub_assign","competitive::math::anymod","",60,[[]]],[11,"sub_assign","","",60,[[["anymod",3]]]],[11,"sub_assign","competitive::math::anymodu32","",61,[[["anymodu32",3]]]],[11,"sub_assign","","",61,[[["anymodu32",3]]]],[11,"sub_assign","competitive::math::modi64","",65,[[]]],[11,"sub_assign","","",65,[[["modi64",3]]]],[11,"sub_assign","competitive::math::modu32","",67,[[["modu32",3]]]],[11,"sub_assign","","",67,[[["modu32",3]]]],[11,"mul_assign","competitive::math::anymod","",60,[[]]],[11,"mul_assign","","",60,[[["anymod",3]]]],[11,"mul_assign","competitive::math::anymodu32","",61,[[["anymodu32",3]]]],[11,"mul_assign","","",61,[[["anymodu32",3]]]],[11,"mul_assign","competitive::math::modi64","",65,[[]]],[11,"mul_assign","","",65,[[["modi64",3]]]],[11,"mul_assign","competitive::math::modu32","",67,[[["modu32",3]]]],[11,"mul_assign","","",67,[[["modu32",3]]]],[11,"div_assign","competitive::math::anymod","",60,[[]]],[11,"div_assign","","",60,[[["anymod",3]]]],[11,"div_assign","competitive::math::anymodu32","",61,[[["anymodu32",3]]]],[11,"div_assign","","",61,[[["anymodu32",3]]]],[11,"div_assign","competitive::math::modi64","",65,[[]]],[11,"div_assign","","",65,[[["modi64",3]]]],[11,"div_assign","competitive::math::modu32","",67,[[["modu32",3]]]],[11,"div_assign","","",67,[[["modu32",3]]]],[11,"not","competitive::data_structure::bitset","",35,[[]]],[11,"bitand","","",35,[[]]],[11,"bitor","","",35,[[]]],[11,"bitxor","","",35,[[]]],[11,"shl","","",35,[[]]],[11,"shr","","",35,[[]]],[11,"bitand_assign","","",35,[[]]],[11,"bitor_assign","","",35,[[]]],[11,"bitxor_assign","","",35,[[]]],[11,"shl_assign","","",35,[[]]],[11,"shr_assign","","",35,[[]]],[11,"index","competitive::algorithm::compress","",26,[[]]],[11,"index","competitive::data_structure::disjoint_sparse_table","",36,[[]]],[11,"index","competitive::graph::strongly_connected_component","",57,[[]]],[11,"index","competitive::math::matrix","",64,[[]]],[11,"index","competitive::math::polynomial","",69,[[]]],[11,"index","competitive::math::quad_double","",72,[[]]],[11,"index","competitive::string::suffix_array","",76,[[]]],[11,"index","competitive::string::z_algorithm","",77,[[]]],[11,"index_mut","competitive::math::matrix","",64,[[]]],[11,"index_mut","competitive::math::polynomial","",69,[[]]],[11,"hash","competitive::algebra::effect","",4,[[]]],[11,"hash","competitive::algebra::operations","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","","",14,[[]]],[11,"hash","competitive::data_structure::bitset","",35,[[]]],[11,"hash","competitive::geometry::complex","",46,[[]]],[11,"hash","competitive::math::anymod","",60,[[]]],[11,"hash","competitive::math::anymodu32","",61,[[]]],[11,"hash","competitive::math::modi64","",65,[[]]],[11,"hash","competitive::math::modu32::modulos","",89,[[]]],[11,"hash","","",90,[[]]],[11,"hash","","",91,[[]]],[11,"hash","competitive::math::modu32","",67,[[]]],[11,"from_iter","competitive::algorithm::compress","",26,[[["intoiterator",8]],["compress",3]]],[11,"product","competitive::math::anymodu32","",61,[[["iterator",8]]]],[11,"product","","",61,[[["iterator",8]]]],[11,"product","competitive::math::modu32","",67,[[["iterator",8]]]],[11,"product","","",67,[[["iterator",8]]]],[11,"sum","competitive::math::anymodu32","",61,[[["iterator",8]]]],[11,"sum","","",61,[[["iterator",8]]]],[11,"sum","competitive::math::modi64","",65,[[["iterator",8]]]],[11,"sum","","",65,[[["iterator",8]]]],[11,"sum","competitive::math::modu32","",67,[[["iterator",8]]]],[11,"sum","","",67,[[["iterator",8]]]],[11,"from_str","competitive::math::anymodu32","",61,[[],["result",4]]],[11,"from_str","competitive::math::modi64","",65,[[],["result",4]]],[11,"from_str","competitive::math::modu32","",67,[[],["result",4]]],[11,"from_str","competitive::math::quad_double","",72,[[],["result",4]]]],"p":[[8,"Magma"],[8,"Unital"],[8,"Monoid"],[8,"Invertible"],[3,"AnyMonoidEffect"],[8,"MonoidEffect"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"MonoidalOperation"],[3,"GroupOperation"],[3,"AbsorbedAssocoativeOperator"],[3,"CartesianOperation"],[3,"CountingOperation"],[8,"MinimumBounded"],[8,"MaximumBounded"],[8,"AdditiveIdentity"],[8,"MultiplicativeIdentity"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"Compress"],[3,"CHTLine"],[3,"ConvexHullTrick"],[8,"Bisect"],[8,"Trisect"],[3,"Rev"],[3,"TotalOrd"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"SegmentTree"],[3,"QueueAggregation"],[3,"DequeAggregation"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"Real"],[4,"CCW"],[3,"Circle"],[3,"Complex"],[3,"Line"],[3,"LineSegment"],[3,"Adjacent"],[3,"Graph"],[3,"GraphRec"],[3,"RevEdge"],[3,"Dinic"],[3,"FordFulkerson"],[3,"RevEdge"],[3,"PrimalDual"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[3,"DirectedAcyclicGraph"],[3,"AnyMod"],[3,"AnyModu32"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"Matrix"],[3,"Modi64"],[8,"Modulo"],[3,"Modu32"],[3,"BabyStepGiantStep"],[3,"Polynomial"],[3,"PrimeTable"],[3,"EulerPhiTable"],[3,"QuadDouble"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"Xorshift"],[8,"IterScan"],[3,"Scanner"],[3,"LCAMonoid"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"ReRooting"],[3,"TreeRec"],[3,"AssocoativeOperator"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"Modulo998244353"]],"a":{"verify":[563,565,567,569,571,573,576,580,581,583,585,587,589,590,592,595,597,599,602,605,607,610,612]}}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);