var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":"AAAAAAAAAAAAAAAAFCFCFCFFCCFCFCFCFFCFCFCAAAAAAAAAAAAAAAAAACFCCFCCFCCFCFCCFCCFCCFCCFCCFCCFCCFFFCCFFFFAAAAAAAAAAAAAAAAAACCCCCCFFCCCCFCCCCCFCFCCCFCCFCCFCCFCFCFFCCFCCCFCCCCFCCCCCFCCCCCCFCCFCCFCCFAF","n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","dpl_1_e","levenshtein_distance","KnapsackPloblemSmallValue","dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","dpl_3_a","largest_square","dpl_3_b","largest_rectangle_in_grid","dpl_3_c","largest_rectangle","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","MinOperation","SegmentTree","dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","Static2DTree","dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","dsl_3_b","dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","EdgeListGraphScanner","grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","DirectedGraphScanner","grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","itp1_1_a","itp1_1_a"],"q":["aizu_online_judge","","","","aizu_online_judge::dpl","","","","","","","","","","","","aizu_online_judge::dpl::dpl_1_a","aizu_online_judge::dpl::dpl_1_b","","aizu_online_judge::dpl::dpl_1_c","","aizu_online_judge::dpl::dpl_1_d","","aizu_online_judge::dpl::dpl_1_e","","aizu_online_judge::dpl::dpl_1_f","","aizu_online_judge::dpl::dpl_1_g","","aizu_online_judge::dpl::dpl_1_h","","aizu_online_judge::dpl::dpl_1_i","","aizu_online_judge::dpl::dpl_3_a","","aizu_online_judge::dpl::dpl_3_b","","aizu_online_judge::dpl::dpl_3_c","","aizu_online_judge::dsl","","","","","","","","","","","","","","","","","","aizu_online_judge::dsl::dsl_1_a","","aizu_online_judge::dsl::dsl_1_b","","","aizu_online_judge::dsl::dsl_2_a","","","aizu_online_judge::dsl::dsl_2_b","","","aizu_online_judge::dsl::dsl_2_c","","aizu_online_judge::dsl::dsl_2_d","","","aizu_online_judge::dsl::dsl_2_e","","","aizu_online_judge::dsl::dsl_2_f","","","aizu_online_judge::dsl::dsl_2_g","","","aizu_online_judge::dsl::dsl_2_h","","","aizu_online_judge::dsl::dsl_2_i","","","aizu_online_judge::dsl::dsl_3_a","","","aizu_online_judge::dsl::dsl_3_b","aizu_online_judge::dsl::dsl_3_c","aizu_online_judge::dsl::dsl_3_d","","","aizu_online_judge::dsl::dsl_4_a","aizu_online_judge::dsl::dsl_5_a","aizu_online_judge::dsl::dsl_5_b","aizu_online_judge::grl","","","","","","","","","","","","","","","","","","aizu_online_judge::grl::grl_1_a","","","","","","","","aizu_online_judge::grl::grl_1_b","","","","","aizu_online_judge::grl::grl_1_c","","","","","","aizu_online_judge::grl::grl_2_a","","aizu_online_judge::grl::grl_2_b","","","","aizu_online_judge::grl::grl_3_a","","","aizu_online_judge::grl::grl_3_b","","","aizu_online_judge::grl::grl_3_c","","","aizu_online_judge::grl::grl_4_a","","aizu_online_judge::grl::grl_4_b","","","aizu_online_judge::grl::grl_5_a","","","aizu_online_judge::grl::grl_5_b","","","","aizu_online_judge::grl::grl_5_c","","","","","aizu_online_judge::grl::grl_5_d","","","","","","aizu_online_judge::grl::grl_5_e","","","","","","","aizu_online_judge::grl::grl_6_a","","","aizu_online_judge::grl::grl_6_b","","","aizu_online_judge::grl::grl_7_a","","","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a"],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  2ms","","✅  AC  1ms","","✅  AC  3ms","","✅  AC  6ms","✅  AC  3ms","","","✅  AC  0ms","","✅  AC  6ms","","✅  AC  57ms","","✅  AC  0ms","✅  AC  23ms","","✅  AC  29ms","","✅  AC  2ms","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  7ms","","","✅  AC  19ms","","","✅  AC  15ms","","","✅  AC  14ms","","✅  AC  439ms","","","✅  AC  65ms","","","✅  AC  46ms","","","✅  AC  70ms","","","✅  AC  49ms","","","✅  AC  48ms","","","✅  AC  93ms","","","✅  AC  4ms","✅  AC  2ms","✅  AC  298ms","","","✅  AC  107ms","✅  AC  88ms","✅  AC  3ms","✅  AC  8ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  60ms","✅  AC  78ms","","","","","✅  AC  6ms","","","","","","✅  AC  7ms","","✅  AC  19ms","","","","✅  AC  0ms","","","✅  AC  2ms","","","✅  AC  4ms","","","✅  AC  6ms","","✅  AC  0ms","","✅  AC  2ms","","","","✅  AC  9ms","","","","✅  AC  5ms","","","","","✅  AC  91ms","","","","","","✅  AC  56ms","","","","","","","✅  AC  205ms","","","✅  AC  0ms","","","✅  AC  0ms","","","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,[[1,2]],0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,1,1],3],0,0,[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"],[15,"bool"]],"a":{"verify":[16,18,20,22,23,26,28,30,32,33,35,37,58,61,64,67,69,72,75,78,81,84,87,90,91,92,95,96,97,98,123,124,129,135,137,141,144,147,150,152,154,158,162,167,173,180,183,186,189,191]}},\
"competitive":{"doc":"github","t":"OAAOOOOOOOAOOAOOOOAAOOOOOOAOOOOOOOOAAOOOOOOOOAOOAAIIQQDQDQQIIDIDIDDIDDDIDDEIIIIQDDSSIDEDIIQDEDDDDDDDDDIIIQQDIKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLOLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLQDIDDDDDDIDDDQQQQDIDDQDIIIDIDQQQDDDQIDIDDLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLKFLLLLLLLLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLMLLLLLLLLLLLLLLLKKLLKKLKKKLLLFKKKLLLKKFKFLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIQDDIDDDDDDDGGGGDGGGGIDDGGDDDDDDDDDDDDDDDDDIDDDDDDQDIDDDDDDKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLOLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIEIDNNDDNNNKKLLLLLLLLLLLLLLLLLLLLLLLLFLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQQQQQQQIIIDIIIDDIDDEGGDDDDEGGQQIQDDIIIIQIDDDDDDDIIDDIDDDQDDEGGDDQQDDDQIIIIQKLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLMKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLKLLLLLLLLLLLLLFKLMLLKLLLMKLKLLLLLLLLLLLKLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLMLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLKLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLKLLLLKLLLLLLKLMKLLLLLLLLLLMLDGEIDQDIIGGGDDDDDDDQLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLFFLLLLLLLLLLLLLLFLLLLLFLLLFFFLMLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLFLLLLLLLLLLLLLLLLLLLLLLLLLMLKLLLLLLLLLFLFFKLLLLLFLLFFFFFFLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLFLLFLLLFLLLLLLLLLLLLLLMLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIIDSIDSSQDSSSSSSSSSIDDSQISSSSSSSSSSSSDIISSISDSIDSDIQSIQDIKKLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLLLLLKLLKLLKLLLLKLLLLLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLKLLLLLLLLKLLLMLLLKLLLLLLLLLLLLKLLKLLLLLLKLLKLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLKLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLKLLKLLKLLLLLLKLLKLLLLLLAKKKKKKKLLKKLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKKLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLMMKLLLLLLLGGEEGGGGEEDELLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGEEEEILLLLLLLLLLLLLLLLKLLLLLLLLKLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLEEIDEILLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLOLLKFLLLLLLLLLLOLLLLLLLLLLLLLLLLLLKLLLLCCCCDCCCCDDLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLFEEEQDDDDEEEIQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIEDEDIDEDDIIISIDQQQDIDDISDDIDDDQDEDKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLMMKMLKLLKLLLLLLLLLLLLLLMLLLLKLLLMLLLLLFFFFFLLKLLOOKLLLLLLLLLMMLMMKKKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLDDDDDEIDDNDDDDEDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLL","n":["add_assign","algebra","algorithm","array","automaton","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","iter_print","main","math","max","memorize","min","minmax","mlambda","mo_algorithm","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","syakutori","tools","tree","AbelianGroup","AbelianMonoid","Act","ActMonoid","AddMulOperation","Additive","AdditiveOperation","Agg","AggMonoid","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","EmptyAction","EmptyLazy","Field","FindMajorityOperation","FirstOperation","Gf2_63","Group","Idempotent","IdempotentMonoid","Invertible","Key","LastOperation","LinearOperation","MOD","MOD","Magma","MaxOperation","Mersenne61","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","Top2Operation","Unital","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_operate","act_operate","act_operate_assign","act_operate_assign","act_unit","act_unit","add","add","add","agg_operate","agg_operate","agg_operate_assign","agg_operate_assign","agg_unit","agg_unit","all_one","all_zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone_into","clone_into","define_monoid","div","div","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","mul","mul","neg","neg","one","one","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","single","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","sub","sub","sum","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","zero","zero","B","BabyStepGiantStep","Bisect","BitDp","Combinations","ConvexHullTrick","DivisorTransform","EsperEstimator","EsperSolver","ImpartialGame","ImpartialGameAnalyzer","ImpartialGamer","IndependentSubSet","Iter","Iter","LIter","M","MultipleTransform","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SliceCombinationsExt","SliceSortExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","State","State","SubsetTransform","Subsets","SupersetTransform","T","Trisect","XorBasis","ZeroSumGame","ZeroSumGameAnalyzer","ZeroSumGamer","add_line","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bubble_sort","bubble_sort_by","bucket","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","convolve","convolve","convolve","convolve","default","default","default","elements","eq","eval","eval","eval","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_bucket","fold_cell","for_each_combinations","for_each_combinations_with_replacement","for_each_permutations","for_each_product","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","ind","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_element","is_subset","k_colorable","merge_sort","merge_sort_by","middle","middle_point","mobius_transform","mobius_transform","mobius_transform","mobius_transform","n","new","new","new","new","new","new","new","new","new","new","new","new_with_primes","new_with_primes","next","next","next_combination","next_left","next_left","next_minimum","next_permutation","next_right","next_right","next_section","next_state","next_state","next_state","next_state","not_elements","parallel_binary_search","position_bisect","prev_combination","prev_permutation","push","query","reduce","rfind_bisect","rposition_bisect","run_length_encoding","section_end","slide_minimum","solve","solve","solve","solve_checked","sqrt_decomposition","sqrt_decomposition","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_bucket","update_cell","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Accumulate","Allocator","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","CompressedBinaryIndexedTree","CompressedBinaryIndexedTree1d","CompressedBinaryIndexedTree2d","CompressedBinaryIndexedTree3d","CompressedBinaryIndexedTree4d","CompressedSegmentTree","CompressedSegmentTree1d","CompressedSegmentTree2d","CompressedSegmentTree3d","CompressedSegmentTree4d","Compressor","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCompress","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MemoryPool","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTreeMap","SlopeTrick","SplayMap","SplaySequence","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","VecCompress","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","allocate","allocate","append","as_slice","automaton","back","bit_length","bit_length","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_failure","build_inplace","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count_ones","count_zeros","dd","deallocate","deallocate","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","drop","drop","drop","edges","eq","extend","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get","get","get_difference","get_key_value","get_key_value_at","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","index_exact","index_exact","index_exact","index_lower_bound","index_lower_bound","index_lower_bound","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert","insert","insert","insert_at","insert_once_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","iter","iter","iter","iter_mut","keys","keys","keys","last","len","len","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","modify","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next_node","node_size","not","not","ones","partial_cmp","pop","pop_back","pop_front","pop_left_if","pop_left_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","quantile_outer","query_min","range","range","range","range_at","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove","remove","remove_at","remove_count","remove_count","reverse","roots","roots","roots","rotate_left","rotate_right","rposition_acc","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update_isize","valley","values","values","values","values_mut","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","Approx","ApproxOrd","Ccw","Ccwable","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","approx_cmp","approx_eq","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","ccw_open","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","default","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","add_assign","add_assign","add_assign","add_assign","add_clause","add_cost1","add_cost2","add_cost2_01","add_cost2_10","add_edge","add_edge","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adj4","adj8","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies_with_eindex","adjacencies_with_eindex","adjacencies_with_value","adjacencies_with_value","adjacencies_with_value","adjacency","articulation","avalue","avalue","avalue","aviews","aviews","aviews","aviews","aviews","aviews","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","build","builder","builder","builder","builder_with_esize","change_edge","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","components","construct_emap","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","construct_vmap","construct_vmap","construct_vmap","construct_vmap","default","default","default","dfs_order","dfs_tree","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","dulmage_mendelsohn_decomposition","edges","edges","edges","edges_size","edges_size","eindex","eindex","eindex","eindex","elist","emap_get","emap_get","emap_get_mut","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","eq","eq","eq","eq","esize","esize","esize","eview","eview","eview","extend","extend","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","hash","hash","hash","height","hopcroft_karp","id","index","index","inf","inf","inf","inf","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","kuhn_multi_start_bfs","low","map","map","maximum_flow","maximum_flow_limited","maximum_independent_set","maximum_matching","minimum_cost_flow","minimum_cost_flow_limited","minimum_cut","minimum_edge_cover","minimum_spanning_arborescence","minimum_spanning_tree","minimum_vertex_cover","move_by_diff","mscan","mscan","mscan","mscan","mul","mul","mul","mul","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_adj4","new_adj8","new_with_esize","next","next","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","solve","source","source","source","source","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices_size","vertices_size","vindex","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_set","vmap_set","vsize","vsize","vsize","vview","vview","vview","vview","vview","vview","vview","warshall_floyd_ap","warshall_floyd_ap","weighted_tree_depth","weighted_tree_depth","width","with_n_values","Convolve","Convolve998244353","ConvolveRealFft","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","MIntConvolve","Matrix","MemorizedFactorial","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","assign","berlekamp_massey","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","check_primitive_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convolve","convolve","convolve","convolve","count_divisors","count_divisors","count_multiset_sum","count_subset_sum","data","data","data","default","default","default","default","determinant","diff","discrete_logarithm","discrete_logarithm_prime_mod","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","divisors","divisors","divisors","eq","eq","eq","euler_phi","eval","even","exp","extgcd","extgcd_binary","extgcd_recurse","eye","fact","factorial","floor_sum","floor_sum_i64","floor_sum_range_freq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_loop","get","highly_composite_number","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into_iter","inv","inv","inv","inv_fact","inverse","inverse_transform","inverse_transform","inverse_transform","inverse_transform","is_prime","is_prime","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","length","length","length","length","linear_congruence","linear_sum_of_exp","log","miller_rabin","miller_rabin_with_br","modinv","modinv_extgcd_binary","modinv_recurse","moebius","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply","multiply","multipoint_evaluation","neg","neg","new","new","new","new","new","new","new","odd","one","one","permutation","pow","pow","pow","pow","powi","prefix","prefix_ref","prime_factors","prime_factors","prime_factors","prime_factors_flatten","primes","primes","primes_lte","primitive_root","product_all","rank","rem","rem","rem","rem","rem","rem_assign","rem_assign","reserve","resize","resized","reversed","row_reduction","shape","shl","shl","shl_assign","shr","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum_all_rational","taylor_shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","transform","trial_division","trial_division","trim_tail_zeros","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zeros","zeros","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","Rational","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp_by_arg","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","default","delta","den","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_rem","div_rem","div_rem","dot","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","get_mod","get_mod","get_mod","hash","hash","hash","hash","hypot","hypot","hypot","i","im","index","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","is_zero","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","maximum","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","minimum","minimum","minimum","minimum","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new_unchecked","new_unchecked","norm","not","not","num","one","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","primitive_nth_root_of_unity","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","scan","scan","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_mod","set_mod","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","__local_key","__local_key","__local_key","__local_key","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","n1","n1","n1","n1","n1","n2","n2","n2","n2","n2","n3","n3","n3","n3","n3","r","r","r","r","r","r","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Bytes","Chars","Read","Scanner","Usize1","Write","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","bytes","chain","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","flush","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_read_vectored","is_write_vectored","iter","iter_print","mscan","new","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","scan","scan","scan","scan","scan_vec","take","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write_all","write_all_vectored","write_fmt","write_vectored","Gf2_63x1","Gf2_63x2","Gf2_63x3","HashedRangeChained","KnuthMorrisPratt","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHasher","SuffixArray","Zarray","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","index","index","into","into","into","longest_common_prefix_array","new","new","new","rolling_hash","search","search_all","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wildcard_pattern_matching","Gf2_63x1","Gf2_63x2","Gf2_63x3","Hash","Hashed","HashedRange","HashedRangeChained","HashedSequence","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHasher","T","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chainable","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","concat","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","default","ensure","ensure","ensure","ensure","ensure","ensure","ensure","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash_range","hash_range","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","init","init","init","init","init","init","init","init_with_time","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","len","len","longest_common_prefix","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","push","range","range","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AsTotalOrd","AssociatedValue","Byte1","ByteWithBase","Bytes","BytesWithBase","CharTools","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","LOG_TABLE_SIZE","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandRange","RandomSpec","SEED","Scanner","ScannerIter","SerdeByteStr","SimuratedAnnealing","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","__local_key","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","deserialize","deserialize_from_bytes","deserialize_from_bytes","end_temp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_accepted","is_end","is_maximize","iter_count","iter_print","log_table","minimize","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","new","new","new","new","new","next","next","now","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rand","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","replace","replace","scan","scan","scan","scan","scan_value","serialize","serialize_bytestr","serialize_bytestr","set","set","set_end_temp","set_start_temp","set_time_limit","set_update_interval","shuffle","start_temp","temperture","time","time","time_limit","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_upper_alphabetic_number","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unescape","update_interval","with","with","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dp","eidx","ep","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","time_seeded","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vidx","vsize","vsize","with_seed"],"q":["competitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebracompetitive::algorithmcompetitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::mathcompetitive::numcompetitive::num::mint_basiccompetitive::num::montgomery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string::rolling_hashcompetitive::toolscompetitive::treed":["","algebra","algorithm","","build automaton","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","Implement <code>AssociatedValue</code>.","","","","Print expressions with a separator.","","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","solve with Mo’s algorithm","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","scan and bind values with Scanner","scan a value with Scanner","","","string algorithems","","arg:","","tree algorithems","commutative group","commutative monoid","","","$+,\\\\times$","","$+$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","","","Find majority(strict) of a sequence.","retain the first element","","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","","","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","$a$ where $a \\\\circ x = e$","","","","","","","","","","multiplicative operaion: $+$","multiplicative operaion: $+$","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","","","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","","","additive identity: $0$","additive identity: $0$","","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","binary search helper","","","","","","","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","","","","","ternary search helper","Basis of xor operation.","","","","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","","","","","","","","","","","","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","get i-th value of rho path","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","middle point of section","Return between two elements if search is not end.","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","","","","","","Create a empty space.","","","","","","","","","","","","","Divide into 3 sections","","","","","","","Returns the first index that satisfies a predicate. if not …","","","","","Return (reduced basis, coordinate). Coordinate means if …","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","the end condition of ternary search","","","","","","","","","like <code>(left..=right).min_by_key(f)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return accumlate of [0, k)","fold [0, k]","fold [0, i] x [0, j]","","","","","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of [l, r)","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Create empty","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","","get k-th smallest value in range","get k-th smallest value out of range","","","","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-badd a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return norm","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(p_x = f) | (p_y = g)","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","","","","","","","","Return a slice of adjacency verticeseturn the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","","Return an iterator over graph vertices.","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e, c==1","Sum of Floor of Linear mod 2^64","Sum of Floor of Linear mod 2^64","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","binary gcd","","","[(hcn, #divisor)]","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","","return: (y,z)","sum_i a_i exp(b_i x)","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationseturns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","m","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","n^1 mod m","","","","","n^2 mod m","","","","","n^3 mod m","","","","","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","","","","","","","","","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","","","","","","","","","Flush this output stream, ensuring that all intermediately …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","Print expressions with a separator.","","","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","","","","","scan and bind values with Scanner","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","","Trait for spec of generating random value.","","","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","","","scan and bind values with Scanner","scan a value with Scanner","","","","","","","","","","","","","","","","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","","","","","","","","","","","","","","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,0,301,0,102,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,0,0,302,303,0,0,0,0,0,0,301,0,0,0,0,0,0,0,0,0,0,0,0,0,0,304,301,0,0,102,305,306,307,308,309,310,311,312,6,102,305,306,307,308,309,310,311,312,6,102,102,102,102,102,102,301,301,4,102,102,102,102,102,102,313,314,315,305,306,307,308,309,310,311,312,4,6,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,302,303,315,305,306,307,308,309,310,311,312,4,6,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,302,303,4,4,4,6,4,6,0,332,332,4,6,4,6,315,305,306,307,308,309,310,311,312,4,6,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,302,303,315,305,306,307,308,309,310,311,312,4,6,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,302,303,332,332,333,320,321,322,325,327,330,334,334,0,301,301,335,335,301,301,304,4,6,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,302,303,304,304,57,57,304,304,333,333,320,321,334,334,6,102,305,306,307,308,309,310,311,312,6,335,335,6,4,6,102,102,315,305,306,307,308,309,310,311,312,4,6,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,302,303,315,305,306,307,308,309,310,311,312,4,6,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,302,303,315,305,306,307,308,309,310,311,312,4,6,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,302,303,334,4,6,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,302,303,336,301,301,50,0,0,0,0,0,0,0,0,0,0,0,0,39,43,41,50,0,0,0,0,41,0,0,0,0,0,0,0,39,41,43,0,0,0,50,0,0,0,0,0,21,23,0,53,54,51,55,337,338,46,47,49,34,35,36,33,21,37,38,40,42,31,56,23,44,53,54,51,55,337,338,46,47,49,34,35,36,33,21,37,38,40,42,31,56,23,44,339,339,50,31,31,33,34,35,36,33,21,37,38,40,42,23,44,34,35,36,33,21,37,38,40,42,23,44,34,337,338,46,47,34,21,23,34,34,40,42,44,31,23,340,0,49,34,35,36,33,21,37,38,40,42,31,23,44,51,50,50,341,341,341,341,53,54,51,55,337,338,46,47,49,34,35,36,33,21,37,38,40,42,31,56,23,44,33,23,31,31,33,23,53,54,51,55,337,338,46,47,49,34,35,36,33,21,37,38,40,42,31,56,23,44,35,36,34,34,33,339,339,59,27,337,338,46,47,33,53,54,55,49,21,37,40,42,56,23,44,46,47,35,36,341,41,54,56,341,41,54,59,39,43,53,55,34,0,340,341,341,37,21,23,340,340,0,59,0,49,37,38,37,50,50,34,0,34,35,36,33,21,37,38,40,42,23,44,53,54,51,55,337,338,46,47,49,34,35,36,33,21,37,38,40,42,31,56,23,44,53,54,51,55,337,338,46,47,49,34,35,36,33,21,37,38,40,42,31,56,23,44,53,54,51,55,337,338,46,47,49,34,35,36,33,21,37,38,40,42,31,56,23,44,51,50,50,337,338,46,47,0,0,0,0,0,0,60,61,62,63,64,65,60,61,62,63,64,65,60,61,62,63,64,65,60,61,62,63,64,65,62,65,60,61,65,60,61,62,65,60,61,60,61,60,60,61,62,63,64,65,60,61,62,63,64,65,60,61,60,61,62,65,60,61,60,61,60,60,61,62,63,64,65,64,0,0,0,0,65,60,60,61,62,63,64,65,60,61,62,63,60,61,62,63,64,65,60,61,62,63,64,65,60,61,62,63,64,65,60,61,62,63,64,65,0,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,0,66,67,68,69,70,71,72,73,74,75,76,130,77,78,79,80,81,82,82,82,82,80,81,83,84,85,85,83,84,85,85,86,88,89,112,91,83,92,0,93,130,77,94,94,94,94,94,94,94,94,94,79,80,81,82,99,101,129,103,104,86,92,105,106,93,114,115,88,91,107,67,68,69,70,71,72,73,74,75,76,77,94,108,109,83,84,110,96,97,98,85,95,89,78,79,80,81,82,99,101,129,103,104,86,92,105,106,93,114,115,88,91,107,67,68,69,70,71,72,73,74,75,76,77,94,108,109,83,84,110,96,97,98,85,95,89,78,95,96,83,84,97,98,85,85,80,81,82,99,101,103,104,92,105,106,93,88,107,67,68,69,70,71,72,73,74,75,76,77,94,108,109,83,84,110,96,97,98,85,95,89,78,80,81,82,99,101,103,104,92,105,106,93,88,107,67,68,69,70,71,72,73,74,75,76,77,94,108,109,83,84,110,96,97,98,85,95,89,78,94,98,97,94,94,96,112,91,82,99,106,93,114,115,91,75,76,94,83,84,110,97,98,85,66,66,107,83,97,98,114,115,91,95,94,114,83,83,84,84,97,98,86,88,95,89,95,86,86,79,80,81,82,99,101,103,104,92,105,106,93,114,115,88,91,107,67,68,69,70,71,72,73,74,75,76,77,94,108,109,83,84,110,96,97,98,85,95,89,78,79,80,81,99,99,99,99,101,103,104,92,105,114,107,103,104,92,105,106,93,101,79,80,81,82,99,101,129,103,104,86,92,105,106,93,114,115,88,91,107,67,68,69,70,71,72,73,74,75,76,77,94,108,109,83,84,110,96,97,98,85,95,89,78,79,77,108,109,83,83,84,84,97,98,80,103,92,93,80,81,103,104,92,105,114,115,94,83,84,97,88,115,115,97,98,98,97,97,98,88,73,74,73,74,94,101,101,342,108,109,342,108,109,66,67,68,69,70,71,72,73,74,75,76,114,115,110,97,98,95,95,95,97,98,79,80,81,82,99,101,129,103,104,86,92,105,106,93,114,115,88,91,107,67,68,69,70,71,72,73,74,75,76,77,94,108,109,83,84,110,96,97,98,85,95,89,78,106,93,114,115,83,84,88,115,83,84,97,98,97,83,84,97,106,106,93,114,115,83,84,73,74,73,74,80,107,86,88,89,85,85,114,80,81,82,82,82,82,99,99,99,99,101,129,103,104,86,92,105,106,93,114,115,88,91,107,70,71,72,75,76,94,83,84,110,96,97,98,85,95,89,78,66,67,68,69,70,71,72,73,74,75,76,95,95,94,94,94,94,106,93,93,97,98,97,98,103,104,92,105,114,106,93,93,78,78,110,129,115,84,115,78,130,130,130,130,77,78,78,114,115,83,84,97,98,115,83,84,114,86,88,89,114,114,103,104,92,105,114,107,107,86,89,78,130,130,77,130,130,77,80,81,103,104,92,105,94,85,94,94,94,94,94,94,342,86,88,108,109,89,85,107,107,343,343,343,343,80,81,82,99,101,103,104,92,105,106,93,88,107,67,68,69,70,71,72,73,74,75,76,77,94,108,109,83,84,110,96,97,98,85,95,89,78,79,80,81,82,99,101,129,103,104,86,92,105,106,93,114,115,88,91,107,67,68,69,70,71,72,73,74,75,76,77,94,108,109,83,84,110,96,97,98,85,95,89,78,79,80,81,82,99,101,129,103,104,86,92,105,106,93,114,115,88,91,107,67,68,69,70,71,72,73,74,75,76,77,94,108,109,83,84,110,96,97,98,85,95,89,78,79,80,81,82,99,101,129,103,104,86,92,105,106,93,114,115,88,91,107,67,68,69,70,71,72,73,74,75,76,77,94,108,109,83,84,110,96,97,98,85,95,89,78,86,88,89,80,81,82,82,82,82,99,99,99,99,103,104,92,105,114,96,96,85,83,84,97,97,114,115,91,83,95,0,0,0,0,0,139,139,0,0,139,139,139,142,142,143,139,144,140,141,143,139,144,140,141,139,140,141,139,143,139,144,140,141,143,139,144,140,141,0,143,139,144,0,0,144,141,143,140,141,141,140,141,143,139,144,140,141,143,139,144,140,141,143,139,144,140,141,139,141,141,143,139,144,140,141,140,141,140,141,144,140,141,143,139,140,141,140,141,143,139,144,140,141,143,139,144,140,141,143,139,144,140,141,143,139,144,140,141,344,181,183,344,181,183,345,346,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,347,348,0,349,0,0,0,0,0,0,350,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,351,0,0,0,0,0,0,0,352,353,0,0,0,354,0,0,0,0,355,351,356,357,358,148,149,149,149,149,150,151,152,153,154,148,148,151,155,155,344,156,157,155,155,158,158,181,158,183,156,157,151,186,345,161,162,346,156,157,155,155,158,359,359,359,359,359,359,359,359,158,177,156,157,178,182,184,186,356,357,358,150,179,180,151,152,167,168,169,161,162,155,153,165,154,166,149,170,171,172,159,158,173,148,177,156,157,178,182,184,186,356,357,358,150,179,180,151,152,167,168,169,161,162,155,153,165,154,166,149,170,171,172,159,158,173,148,186,150,153,154,165,166,158,158,165,151,152,167,168,169,161,162,155,153,165,154,149,170,171,172,159,158,173,148,151,152,167,168,169,161,162,155,153,165,154,149,170,171,172,159,158,173,148,168,169,161,162,170,171,172,159,173,350,158,163,170,171,172,355,156,157,155,158,151,149,159,158,158,359,359,359,359,0,349,167,158,167,158,348,169,162,159,158,350,158,350,158,350,350,168,169,161,162,170,171,172,159,360,158,151,187,158,158,153,154,155,151,152,167,168,169,161,162,155,153,165,154,166,149,170,171,172,159,158,173,148,158,177,156,157,178,182,184,186,356,357,358,150,179,180,151,152,167,168,168,168,169,169,161,161,162,162,155,153,165,154,166,149,170,171,172,159,158,173,148,152,167,158,173,153,154,165,166,151,173,168,169,161,162,170,171,172,159,155,152,159,167,173,351,356,357,358,177,156,157,178,182,184,186,356,357,358,150,179,180,151,152,167,168,169,161,162,155,153,165,154,166,149,170,171,172,159,158,173,148,182,184,152,186,161,162,165,165,152,152,166,166,165,152,167,167,152,155,177,178,179,180,351,356,357,358,177,156,157,178,182,184,186,150,179,180,151,152,167,155,153,154,149,159,173,148,155,155,150,182,184,186,168,169,161,162,170,171,172,159,148,148,173,149,351,356,357,358,158,159,175,185,164,158,158,158,151,152,167,168,169,161,162,155,153,165,154,149,170,171,172,159,158,173,148,158,185,158,185,158,185,158,185,158,158,185,158,177,156,157,178,182,184,186,356,357,358,150,179,180,151,152,167,168,169,161,162,155,153,165,154,166,149,170,171,172,159,158,173,148,177,156,157,178,182,184,186,356,357,358,150,179,180,151,152,167,168,169,161,162,155,153,165,154,166,149,170,171,172,159,158,173,148,148,177,156,157,178,182,184,186,356,357,358,150,179,180,151,152,167,168,169,161,162,155,153,165,154,166,149,170,171,172,159,158,173,148,155,354,156,157,151,167,155,158,158,167,158,353,168,169,161,162,159,355,156,157,155,158,355,156,157,155,158,355,355,361,158,151,362,156,156,157,155,158,158,359,359,185,158,155,149,0,0,0,0,0,195,0,0,0,0,0,0,0,0,0,0,0,0,0,195,191,191,191,191,191,191,191,191,192,193,191,191,191,191,193,0,0,363,364,198,199,200,191,192,193,201,202,203,363,364,198,199,200,191,192,193,201,202,203,191,0,198,199,200,191,192,193,201,202,203,198,199,200,191,192,193,201,202,203,198,199,195,195,364,364,202,203,191,191,191,192,193,199,191,193,202,192,191,0,0,191,191,191,191,191,191,191,191,193,191,191,191,191,191,0,202,203,191,192,193,0,191,191,191,0,0,0,192,198,199,0,0,0,198,199,200,191,192,193,201,202,203,363,364,198,199,200,191,191,191,191,192,193,201,202,203,191,191,192,193,0,0,201,0,198,191,192,192,193,191,192,192,193,191,363,364,198,199,200,191,192,193,201,202,203,191,198,200,191,198,192,195,363,364,364,202,203,191,191,191,191,0,198,0,0,195,363,364,364,191,193,0,191,191,0,0,0,0,0,0,191,191,191,191,191,191,191,191,192,193,191,191,191,191,195,363,364,364,191,191,191,198,199,200,192,201,202,203,191,191,193,198,200,191,192,193,200,191,191,0,202,203,0,202,203,202,0,191,192,191,191,191,191,193,191,191,202,191,191,191,192,192,191,191,191,191,191,191,192,191,208,191,191,191,191,191,191,191,191,192,193,191,191,191,191,191,191,198,199,200,191,192,193,201,202,203,195,363,364,364,202,203,191,191,363,364,198,199,200,191,192,193,201,202,203,363,364,198,199,200,191,192,193,201,202,203,363,364,198,199,200,191,192,193,201,202,203,191,193,191,192,0,0,0,0,146,0,0,146,146,365,0,146,146,146,146,146,146,146,146,146,0,0,0,146,32,0,146,146,146,146,146,146,146,146,146,146,146,146,0,0,0,146,146,0,146,0,146,0,0,146,0,0,366,146,0,219,0,0,146,219,138,209,210,211,213,213,213,213,213,213,217,217,217,217,217,217,218,220,366,366,146,210,211,146,210,211,204,204,204,204,138,138,138,138,138,138,138,138,209,209,210,211,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,218,218,220,204,204,138,138,138,138,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,220,138,146,210,211,146,210,211,146,210,211,146,210,211,146,210,211,367,367,367,367,367,367,367,213,217,213,217,213,217,213,217,213,217,213,217,232,204,196,138,209,210,211,213,217,218,220,232,204,196,138,209,210,211,213,217,218,220,146,210,211,146,210,211,146,210,211,204,196,138,209,210,211,213,217,218,220,204,196,138,209,210,211,213,217,218,220,138,209,210,211,213,217,220,138,138,146,210,211,146,210,211,146,210,211,368,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,368,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,138,204,138,209,210,211,213,217,218,367,220,204,204,204,204,196,196,196,138,138,138,138,138,138,138,138,209,210,211,213,217,217,217,217,217,217,217,217,217,217,217,217,218,220,204,204,138,138,138,138,213,217,217,217,217,217,217,217,217,217,217,217,217,220,146,365,210,211,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,196,196,196,138,369,369,369,369,204,138,209,210,211,213,217,218,220,146,210,211,146,210,211,146,210,211,366,366,146,210,211,204,204,196,138,209,209,210,210,211,211,213,213,217,217,218,218,220,367,367,367,367,367,367,367,146,210,211,197,232,204,204,204,204,204,204,204,204,204,204,204,204,204,196,138,209,209,210,210,211,211,213,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,217,218,218,220,146,210,211,204,209,210,211,213,217,218,365,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,232,366,213,213,213,213,213,213,217,217,217,217,217,217,32,204,196,196,196,204,138,213,217,146,210,211,138,138,218,204,220,197,232,204,196,138,209,210,211,213,217,218,220,204,146,210,211,146,210,211,3,3,3,3,146,210,211,219,213,213,213,213,213,213,217,217,217,217,217,217,146,210,211,14,14,219,213,213,213,213,213,213,217,217,217,217,217,217,146,210,211,146,210,211,2,2,209,218,366,366,368,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,146,210,211,146,210,211,146,210,211,146,210,211,146,210,211,146,210,211,3,209,210,211,213,217,220,146,210,211,3,209,210,211,213,217,220,0,32,32,197,32,32,32,32,32,32,32,32,366,366,0,204,204,204,204,138,138,138,138,138,138,138,138,209,209,210,211,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,218,218,220,146,210,211,204,204,138,138,138,138,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,220,204,204,138,138,209,210,211,213,213,213,213,213,213,217,217,217,217,217,217,218,220,204,196,196,196,138,220,204,220,138,213,217,220,14,204,138,210,211,213,217,220,138,209,210,211,213,217,218,220,138,365,204,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,146,210,211,146,210,211,138,204,204,138,138,138,146,210,211,196,196,196,210,211,213,217,217,217,217,217,217,217,217,217,217,217,217,213,217,217,217,217,217,217,217,217,217,217,217,217,146,365,210,211,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,368,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,368,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,368,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,146,210,211,204,138,213,217,3,3,3,3,204,204,14,14,2,2,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,366,213,213,213,213,213,213,217,217,217,217,217,217,146,219,210,211,213,213,213,213,213,213,217,217,217,217,217,217,146,210,211,146,210,211,146,210,211,146,204,209,210,211,218,204,369,369,369,369,367,204,204,204,204,138,138,138,138,138,138,138,138,209,210,211,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,218,220,204,204,138,138,138,138,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,220,204,204,138,138,146,210,211,146,210,211,146,210,211,146,210,211,204,196,138,209,210,211,213,217,218,220,146,210,211,369,369,369,369,369,369,369,369,204,209,210,211,213,217,218,146,210,211,368,213,213,213,213,213,213,213,213,213,213,213,213,217,217,217,217,217,217,217,217,217,217,217,217,138,146,210,211,232,204,196,138,209,210,211,213,217,218,220,232,204,196,138,209,210,211,213,217,218,220,232,204,196,138,209,210,211,213,217,218,220,138,219,213,213,213,213,213,213,217,217,217,217,217,217,232,232,2,204,138,210,211,213,217,220,0,0,0,0,0,0,0,0,0,0,0,0,370,371,372,373,374,375,370,371,372,373,374,375,0,0,370,370,370,370,370,370,370,370,370,370,370,370,370,371,371,371,371,371,371,371,371,371,372,372,372,372,372,372,372,372,372,373,373,373,373,373,373,373,373,373,374,374,374,374,374,374,374,374,374,375,375,375,375,375,375,375,370,371,372,373,374,375,370,370,370,370,370,370,370,370,370,370,370,370,370,371,371,371,371,371,371,371,371,371,372,372,372,372,372,372,372,372,372,373,373,373,373,373,373,373,373,373,374,374,374,374,374,374,374,374,374,375,375,375,375,375,375,375,370,371,372,373,374,375,370,371,372,373,374,375,370,370,370,370,370,370,370,370,370,370,370,370,371,371,371,371,371,371,371,371,372,372,372,372,372,372,372,372,373,373,373,373,373,373,373,373,374,374,374,374,374,374,374,374,375,375,375,375,375,375,370,371,372,373,374,375,370,371,372,373,374,375,370,371,372,373,374,375,370,371,372,373,374,375,370,370,371,372,373,374,375,370,371,372,373,374,375,376,377,374,375,370,371,372,373,374,375,370,371,372,373,374,375,370,371,372,373,374,375,0,0,0,0,0,0,0,0,0,378,379,380,381,378,379,380,381,378,379,380,381,378,379,380,381,382,378,379,380,381,378,379,380,381,382,378,379,380,381,382,378,379,380,381,382,378,379,380,381,382,382,378,379,380,381,382,382,378,379,380,381,378,379,380,381,378,379,380,381,0,0,0,0,0,0,246,247,248,249,246,247,248,249,244,383,244,244,246,247,248,249,246,247,248,249,383,246,247,248,249,246,247,248,249,246,247,248,249,244,383,246,0,246,246,244,0,244,244,244,244,244,244,246,247,248,249,0,246,244,246,247,248,249,246,247,248,249,246,247,248,249,246,247,248,249,383,383,383,383,383,0,0,0,0,0,0,0,0,0,0,0,256,257,258,256,257,258,256,257,258,256,257,258,256,257,258,256,257,258,257,258,256,257,258,257,256,257,258,0,258,256,256,257,258,256,257,258,256,257,258,256,257,258,0,0,0,0,259,0,0,0,0,0,0,0,0,259,260,269,261,262,263,264,265,266,267,268,260,269,261,262,263,264,265,266,267,268,260,261,260,261,262,263,264,265,266,267,268,260,261,262,263,264,265,266,267,268,260,261,263,264,265,266,267,268,262,259,263,264,265,266,267,268,260,259,263,264,265,266,267,268,260,261,262,263,264,265,266,267,268,260,269,261,262,263,264,265,266,267,268,260,260,269,261,262,263,264,265,266,267,268,261,262,263,264,265,266,267,268,269,261,259,263,264,265,266,267,268,259,263,264,265,266,267,268,259,263,264,265,266,267,268,259,260,269,261,262,263,264,265,266,267,268,269,261,269,261,261,260,261,263,264,265,266,267,268,260,269,261,260,261,262,263,264,265,266,267,268,260,269,261,262,263,264,265,266,267,268,260,269,261,262,263,264,265,266,267,268,260,269,261,262,263,264,265,266,267,268,0,0,0,0,0,0,0,0,0,0,0,0,0,0,284,0,0,176,252,384,0,0,0,0,0,284,0,0,0,0,0,0,385,0,0,0,385,386,251,284,272,270,286,273,274,275,276,277,278,279,281,282,283,271,251,284,272,270,286,273,274,275,276,277,278,279,281,282,283,271,387,387,272,270,273,274,275,276,277,278,279,281,282,283,271,272,270,273,274,275,276,277,278,279,281,282,283,271,272,273,274,271,284,272,270,271,388,388,388,284,272,273,274,271,284,272,270,286,273,274,275,276,277,278,279,281,282,283,271,251,284,272,270,286,273,274,275,276,277,278,279,281,282,283,271,389,389,389,389,270,270,270,385,385,384,273,274,271,251,284,272,270,286,273,274,275,276,277,278,279,281,282,283,271,251,286,284,284,284,284,390,284,284,387,385,385,252,275,276,278,279,281,283,283,284,270,274,281,283,251,286,284,272,273,274,271,285,270,273,274,284,270,285,285,270,270,0,0,0,0,0,385,385,176,277,282,0,0,388,388,388,385,385,284,284,284,284,270,284,284,270,284,284,389,389,389,272,270,273,274,275,276,277,278,279,281,282,283,271,389,251,284,272,270,286,273,274,275,276,277,278,279,281,282,283,271,251,284,272,270,286,273,274,275,276,277,278,279,281,282,283,271,251,284,272,270,286,273,274,275,276,277,278,279,281,282,283,271,0,284,385,385,0,0,0,0,0,0,0,0,0,189,0,0,0,0,0,0,189,297,298,299,300,288,289,290,292,391,293,296,294,189,295,297,298,299,300,288,289,290,292,391,293,296,294,189,295,288,289,290,292,293,294,189,288,289,290,292,293,294,189,295,291,391,294,288,294,189,288,289,290,292,293,294,189,295,297,298,299,300,288,289,290,292,391,293,296,294,189,295,290,189,295,295,0,297,298,299,300,288,289,290,292,391,293,296,294,189,295,292,296,288,289,290,288,289,290,296,294,295,293,288,296,289,289,289,290,296,296,297,298,299,300,290,291,391,289,289,289,295,288,289,290,292,293,294,189,297,298,299,300,288,289,290,292,391,293,296,294,189,295,297,298,299,300,288,289,290,292,391,293,296,294,189,295,297,298,299,300,288,289,290,292,391,293,296,294,189,295,296,289,290,296,291,391,295],"fp":[[4,"Option"],[8,"Zero"],[8,"Bounded"],[3,"RangeChminChmaxAdd"],[8,"Clone"],[3,"RangeSumRangeChminChmaxAdd"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"usize"],[8,"Copy"],[8,"One"],[8,"Ord"],[8,"Add"],[8,"Sub"],[8,"Mul"],[4,"Result"],[3,"TypeId"],[3,"ConvexHullTrick"],[15,"i64"],[3,"XorBasis"],[15,"u64"],[3,"Vec"],[8,"FnMut"],[8,"Bisect"],[8,"Eq"],[8,"Hash"],[8,"Fn"],[3,"RhoPath"],[8,"MIntBase"],[3,"IndependentSubSet"],[3,"BitDp"],[3,"Subsets"],[3,"Combinations"],[3,"EsperEstimator"],[3,"EsperSolver"],[8,"ImpartialGame"],[3,"ImpartialGameAnalyzer"],[8,"PartisanGame"],[3,"PartisanGameAnalyzer"],[8,"ZeroSumGame"],[3,"ZeroSumGameAnalyzer"],[8,"Group"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"Iterator"],[3,"BabyStepGiantStep"],[8,"SqrtDecomposition"],[3,"SqrtDecompositionBuckets"],[8,"IntoIterator"],[3,"ImpartialGamer"],[3,"PartisanGamer"],[3,"ZeroSumGamer"],[3,"SlideMinimum"],[8,"Monoid"],[8,"Div"],[8,"Trisect"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"LexicographicalSubsequence"],[3,"LongestIncreasingSubsequence"],[8,"Automaton"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"FunctionalAutomaton"],[3,"MappingAutomaton"],[3,"AlphabetMappingAutomaton"],[3,"LexicographicalAutomaton"],[3,"RevLexicographicalAutomaton"],[3,"MonoidalAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BitVector"],[3,"WaveletMatrix"],[3,"Accumulate"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"CompressedBinaryIndexedTree"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"SlopeTrick"],[3,"MergingUnionFind"],[3,"HashMap"],[3,"WeightedUnionFind"],[3,"UnionFind"],[3,"NonNull"],[3,"MemoryPool"],[3,"SegmentTree"],[3,"DequeAggregation"],[3,"BitSet"],[3,"Trie"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"CompressedSegmentTree"],[8,"SemiGroup"],[3,"DisjointSparseTable"],[8,"MonoidAction"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"Automatondp"],[3,"VecCompress"],[3,"HashCompress"],[3,"LineSet"],[4,"Ordering"],[8,"Allocator"],[8,"Default"],[3,"SplaySequence"],[3,"SplayMap"],[3,"Drain"],[3,"Ref"],[3,"RefMut"],[8,"RangeBounds"],[8,"AbelianMonoid"],[8,"Sized"],[8,"Borrow"],[3,"Iter"],[3,"Iter"],[3,"Keys"],[3,"IterMut"],[3,"Keys"],[8,"FnOnce"],[3,"Static2DTree"],[8,"RankSelectDictionaries"],[3,"Range"],[3,"Range"],[15,"isize"],[3,"Values"],[3,"Values"],[3,"ValuesMut"],[8,"Ccwable"],[3,"Complex"],[4,"Ccw"],[3,"Line"],[3,"LineSegment"],[8,"ApproxOrd"],[3,"Approx"],[3,"Circle"],[15,"f64"],[8,"Float"],[8,"PartialOrd"],[3,"TwoSatisfiability"],[3,"ProjectSelectionProblem"],[3,"SparseGraphBuilder"],[3,"AdjacencyListGraph"],[3,"BipartiteMatching"],[3,"DinicBuilder"],[3,"PrimalDualBuilder"],[3,"GridGraph"],[3,"UsizeGraph"],[3,"ClosureGraph"],[3,"SparseGraph"],[3,"Adjacency"],[3,"Iter"],[3,"VIndexWithValue"],[3,"VIndexWithEIndexValue"],[8,"SparseGraphConstruction"],[6,"BidirectionalSparseGraph"],[3,"Dinic"],[3,"PrimalDual"],[3,"EdgeListGraph"],[3,"VIndex"],[3,"VIndexWithEIndex"],[4,"DirectedEdge"],[4,"UndirectedEdge"],[4,"BidirectionalEdge"],[3,"StronglyConnectedComponent"],[15,"never"],[6,"DirectedSparseGraph"],[8,"IterScan"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraphScanner"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[8,"AdjacenciesWithEindex"],[3,"AdjacencyViewIterFromEindex"],[8,"AdjacenciesWithValue"],[3,"AdjacencyViewIterFromValue"],[6,"UndirectedSparseGraph"],[3,"LowLink"],[8,"EdgeView"],[3,"String"],[4,"TreeCenter"],[8,"FormalPowerSeriesCoefficient"],[3,"FormalPowerSeries"],[3,"Matrix"],[3,"Polynomial"],[8,"MulAssign"],[8,"ConvolveSteps"],[3,"BarrettReduction"],[8,"MIntConvert"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"PowPrec"],[3,"EulerPhiTable"],[3,"PrimeList"],[3,"PrimeTable"],[3,"MInt"],[15,"u32"],[15,"u128"],[3,"IterMut"],[8,"FormalPowerSeriesCoefficientSqrt"],[3,"DoubleDouble"],[3,"Float32"],[3,"Float64"],[15,"i128"],[3,"Saturating"],[15,"i16"],[15,"i32"],[15,"i8"],[3,"Wrapping"],[3,"QuadDouble"],[8,"Signed"],[3,"Rational"],[15,"u16"],[15,"u8"],[8,"BitAnd"],[8,"BitAndAssign"],[8,"BitOr"],[8,"BitOrAssign"],[8,"BitXor"],[8,"BitXorAssign"],[4,"FpCategory"],[8,"Neg"],[8,"DivAssign"],[3,"ExtendedGcd"],[3,"Error"],[8,"Display"],[15,"f32"],[15,"str"],[8,"FromStr"],[8,"Not"],[8,"Rem"],[8,"RemAssign"],[3,"RangeInclusive"],[3,"LocalKey"],[3,"Bytes"],[8,"Read"],[3,"Chain"],[3,"Scanner"],[4,"Usize1"],[4,"Chars"],[4,"Bytes"],[3,"Error"],[3,"ScannerIter"],[8,"MarkedIterScan"],[3,"BorrowedCursor"],[3,"Take"],[3,"Arguments"],[3,"KnuthMorrisPratt"],[3,"SuffixArray"],[3,"Zarray"],[8,"RollingHasher"],[3,"HashedRangeChained"],[3,"HashedRange"],[3,"Hashed"],[4,"Mersenne61x1"],[4,"Mersenne61x2"],[4,"Mersenne61x3"],[4,"Gf2_63x1"],[4,"Gf2_63x2"],[4,"Gf2_63x3"],[3,"HashedSequence"],[3,"Xorshift"],[3,"TotalOrd"],[3,"PartialIgnoredOrd"],[3,"NotEmptySegment"],[3,"RandRange"],[3,"CharWithBase"],[3,"CharsWithBase"],[4,"Byte1"],[3,"ByteWithBase"],[3,"BytesWithBase"],[8,"FromIterator"],[3,"Collect"],[3,"SizedCollect"],[3,"Splitted"],[3,"SimuratedAnnealing"],[8,"RandomSpec"],[3,"RandIter"],[15,"char"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[8,"LcaMonoidDispatch"],[3,"LowestCommonAncestor"],[3,"LcaMonoid"],[3,"ReRooting"],[3,"TreeHasher"],[3,"HeavyLightDecomposition"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[8,"SemiRing"],[4,"Gf2_63"],[4,"Mersenne61"],[8,"Magma"],[3,"EmptyLazy"],[3,"EmptyAction"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"AddMulOperation"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[4,"PermutationOperation"],[3,"FindMajorityOperation"],[8,"Field"],[8,"Invertible"],[8,"Unital"],[8,"Ring"],[8,"BitXorIdentity"],[3,"SubsetTransform"],[3,"SupersetTransform"],[8,"SliceSortExt"],[8,"SliceBisectExt"],[8,"SliceCombinationsExt"],[8,"Compressor"],[8,"ToDigitSequence"],[8,"Adjacencies"],[8,"AdjacencyIndexWithValue"],[8,"AdjacencyView"],[8,"EIndexedGraph"],[8,"AdjacencyIndexWithEindex"],[8,"Edges"],[8,"EdgeMap"],[8,"ShortestPathSemiRing"],[8,"GraphBase"],[8,"AdjacencyIndex"],[8,"Vertices"],[8,"VertexMap"],[3,"StandardSp"],[3,"OptionSp"],[3,"PathFoldingSp"],[8,"ShortestPathExt"],[8,"EdgeSize"],[8,"VertexSize"],[8,"VertexView"],[4,"ConvolveRealFft"],[3,"Convolve"],[8,"IntBase"],[8,"Unsigned"],[8,"DiscreteSteps"],[8,"BinaryRepr"],[8,"RangeBoundsExt"],[3,"Modulo2"],[4,"Modulo998244353"],[4,"Modulo1000000007"],[4,"Modulo1000000009"],[4,"DynModuloU32"],[4,"DynModuloU64"],[6,"DynMIntU32"],[6,"DynMIntU64"],[4,"Modulo998244353"],[4,"Modulo2113929217"],[4,"Modulo1811939329"],[4,"Modulo2013265921"],[8,"MontgomeryReduction32"],[8,"Write"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[8,"AsTotalOrd"],[8,"PartialOrdExt"],[8,"SerdeByteStr"],[8,"CharTools"],[8,"IterPrint"],[4,"LcaMonoidDefaultId"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":"AAAAAAAAAAAAAAAAAAACCCCFCCCFCFCCCFFCCCCFCCCCFCCCCCFCCCCFCFCCCFFCFCCCCFCCCCFCCCCCCCFAAAACCFFCCFCCCCFFCCFAAAAAAAAAAAAAAAAAAACCCCFCCCCCFCFCFCCFFCCCFCCFCCCFCCFCCFCCFCCCFCCFCCCCCFCFCCFCFCFAAFFAAACFCFCCCFF","n":["datastructure","graph","math","sample","string","deque_operate_all_composite","dynamic_sequence_range_affine_range_sum","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_chmin_chmax_add_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","DequeAggregation","LinearOperation","MInt","MInt998244353","deque_operate_all_composite","MInt998244353","RangeSumRangeLinear","SplaySequence","dynamic_sequence_range_affine_range_sum","LineSet","line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","LazySegmentTree","RangeChminChmaxAdd","RangeSumRangeChminChmaxAdd","Saturating","range_chmin_chmax_add_range_sum","WaveletMatrix","range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","UnionFind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","log_of_formal_power_series","min_of_mod_of_linear","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","Convolve","ConvolveSteps","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","PrimeList","enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","factorize","prime_factors_flatten","MInt998244353","berlekamp_massey","find_linear_recurrence","Fps998244353","MInt998244353","inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","Fps998244353","MInt998244353","log_of_formal_power_series","binary_search","floor_sum_range_freq","min_of_mod_of_linear","Fps998244353","MInt998244353","multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","DynMIntU32","sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","floor_sum","sum_of_floor_of_linear","TwoSatisfiability","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","SuffixArray","suffixarray","Mersenne61x1","RollingHasher","Zarray","zalgorithm","zalgorithm_rolling_hash"],"q":["library_checker","","","","","library_checker::datastructure","","","","","","","","","","","","","","library_checker::datastructure::deque_operate_all_composite","","","","","library_checker::datastructure::dynamic_sequence_range_affine_range_sum","","","","library_checker::datastructure::line_add_get_min","","library_checker::datastructure::point_add_range_sum","","","","","library_checker::datastructure::point_set_range_composite","","","","","library_checker::datastructure::queue_operate_all_composite","","","","","library_checker::datastructure::range_affine_range_sum","","","","","","library_checker::datastructure::range_chmin_chmax_add_range_sum","","","","","library_checker::datastructure::range_kth_smallest","","library_checker::datastructure::staticrmq","","","","","library_checker::datastructure::unionfind","","library_checker::datastructure::vertex_add_path_sum","","","","","library_checker::datastructure::vertex_add_subtree_sum","","","","","library_checker::datastructure::vertex_set_path_composite","","","","","","","","library_checker::graph","","","","library_checker::graph::bipartitematching","","","","library_checker::graph::directedmst","","","library_checker::graph::lca","","","","","","library_checker::graph::scc","","","library_checker::math","","","","","","","","","","","","","","","","","","","library_checker::math::convolution_mod","","","","","library_checker::math::convolution_mod_1000000007","","","","","","library_checker::math::discrete_logarithm_mod","","library_checker::math::enumerate_primes","","library_checker::math::exp_of_formal_power_series","","","library_checker::math::factorize","","library_checker::math::find_linear_recurrence","","","library_checker::math::inv_of_formal_power_series","","","library_checker::math::kth_term_of_linearly_recurrent_sequence","","","","library_checker::math::log_of_formal_power_series","","","library_checker::math::min_of_mod_of_linear","","","library_checker::math::multipoint_evaluation","","","library_checker::math::polynomial_taylor_shift","","","","library_checker::math::pow_of_formal_power_series","","","library_checker::math::sharp_p_subset_sum","","","","","","library_checker::math::sqrt_mod","","library_checker::math::sqrt_of_formal_power_series","","","library_checker::math::sum_of_floor_of_linear","","library_checker::math::two_sat","","library_checker::sample","","library_checker::sample::aplusb","library_checker::sample::many_aplusb","library_checker::string","","","library_checker::string::number_of_substrings","","library_checker::string::suffixarray","","library_checker::string::zalgorithm","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","✅  AC  47ms","","","","✅  AC  1829ms","","✅  AC  496ms","","","","✅  AC  97ms","✅  AC  105ms","","","","","✅  AC  233ms","","","","","✅  AC  46ms","","","","","","✅  AC  862ms","","","","","✅  AC  1351ms","","✅  AC  302ms","","","","✅  AC  139ms","✅  AC  148ms","","✅  AC  16ms","","","","","✅  AC  431ms","","","","","✅  AC  202ms","","","","","","","","✅  AC  184ms","","","","","","","✅  AC  89ms","✅  AC  3696ms","","","✅  AC  190ms","","","","","✅  AC  450ms","✅  AC  628ms","","","✅  AC  223ms","","","","","","","","","","","","","","","","","","","","","","","","✅  AC  186ms","","","","","","✅  AC  278ms","","✅  AC  3ms","","✅  AC  1530ms","","","✅  AC  347ms","✅  AC  97ms","","","","✅  AC  105ms","","","✅  AC  120ms","","","","✅  AC  1055ms","","","✅  AC  171ms","","","✅  AC  2284ms","","","✅  AC  410ms","","","","✅  AC  112ms","","","✅  AC  571ms","","","","","","✅  AC  401ms","","✅  AC  94ms","","","✅  AC  248ms","","✅  AC  31ms","","✅  AC  183ms","","","✅  AC  0ms","✅  AC  150ms","","","","","✅  AC  639ms","","✅  AC  653ms","","","","✅  AC  35ms","✅  AC  175ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]]],"p":[[8,"Read"],[8,"Write"]],"a":{"verify":[23,27,29,33,34,39,44,50,55,57,61,62,64,69,74,82,89,90,93,98,99,102,126,132,134,136,139,140,144,147,151,154,157,160,164,167,173,175,178,180,182,185,186,191,193,197,198]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
