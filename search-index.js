var searchIndex={};
searchIndex["aplusb"] = {"doc":"","i":[[5,"main","aplusb","",null,[[]]]],"p":[]};
searchIndex["bipartitematching"] = {"doc":"","i":[[5,"solve","bipartitematching","",null,[[["bufwriter"]],["result"]]],[5,"main","","",null,[[],["result"]]]],"p":[]};
searchIndex["competitive_library"] = {"doc":"","i":[[0,"algebra","competitive_library","",null,null],[0,"base","competitive_library::algebra","",null,null],[8,"Magma","competitive_library::algebra::base","",null,null],[16,"T","","",0,null],[10,"operate","","",0,[[["self"]]]],[8,"Associative","","",null,null],[8,"SemiGroup","","",null,null],[8,"Unital","","",null,null],[10,"unit","","",1,[[["self"]]]],[8,"Monoid","","",null,null],[11,"power","","",2,[[["usize"],["self"]]]],[8,"Invertible","","",null,null],[10,"inverse","","",3,[[["self"]]]],[8,"Group","","",null,null],[8,"Commutative","","",null,null],[8,"AbelianMonoid","","",null,null],[8,"AbelianGroup","","",null,null],[8,"Idempotent","","",null,null],[8,"IdempotentMonoid","","",null,null],[0,"operations","competitive_library::algebra","",null,null],[3,"MaxOperation","competitive_library::algebra::operations","",null,null],[3,"MinOperation","","",null,null],[3,"FirstOperation","","",null,null],[3,"LastOperation","","",null,null],[3,"AdditiveOperation","","",null,null],[3,"MultiplicativeOperation","","",null,null],[3,"LinearOperation","","",null,null],[3,"BitAndOperation","","",null,null],[3,"BitOrOperation","","",null,null],[3,"MonoidalOperation","","",null,null],[3,"GroupOperation","","",null,null],[3,"AssocoativeOperator","","",null,null],[3,"AbsorbedAssocoativeOperator","","",null,null],[3,"CartesianOperation","","",null,null],[3,"CountingOperation","","",null,null],[0,"max_operation_impl","","",null,null],[11,"new","","",4,[[],["self"]]],[0,"min_operation_impl","","",null,null],[11,"new","","",5,[[],["self"]]],[0,"first_operation_impl","","",null,null],[11,"new","","",6,[[],["self"]]],[0,"last_operation_impl","","",null,null],[11,"new","","",7,[[],["self"]]],[0,"additive_operation_impl","","",null,null],[11,"new","","",8,[[],["self"]]],[0,"multiplicative_operation_impl","","",null,null],[11,"new","","",9,[[],["self"]]],[0,"linear_operation_impl","","",null,null],[11,"new","","",10,[[],["self"]]],[0,"bitand_operation_impl","","",null,null],[11,"new","","",11,[[],["self"]]],[0,"bitor_operation_impl","","",null,null],[11,"new","","",12,[[],["self"]]],[0,"monoidal_operation_impl","","",null,null],[11,"new","","",13,[[["t"],["f"]],["self"]]],[0,"group_operation_impl","","",null,null],[11,"new","","",14,[[["g"],["t"],["f"]],["self"]]],[0,"assocoative_operator_impl","","",null,null],[0,"absorbed_assocoative_operator_impl","","",null,null],[11,"new","","",15,[[["f"]],["self"]]],[0,"cartesian_operation_impl","","",null,null],[11,"new","","",16,[[["m2"],["m1"]],["self"]]],[0,"counting_operation_impl","","",null,null],[11,"new","","",17,[[["m"]],["self"]]],[8,"MinimumBounded","","",null,null],[10,"minimum","","",18,[[],["self"]]],[8,"MaximumBounded","","",null,null],[10,"maximum","","",19,[[],["self"]]],[8,"AdditiveIdentity","","",null,null],[10,"zero","","",20,[[],["self"]]],[8,"MultiplicativeIdentity","","",null,null],[10,"one","","",21,[[],["self"]]],[8,"BitAndIdentity","","",null,null],[10,"all_one","","",22,[[],["self"]]],[8,"BitOrIdentity","","",null,null],[10,"all_zero","","",23,[[],["self"]]],[0,"algorithm","competitive_library","",null,null],[0,"compress","competitive_library::algorithm","",null,null],[3,"Compress","competitive_library::algorithm::compress","",null,null],[11,"get","","",24,[[["self"],["t"]],["usize"]]],[11,"len","","",24,[[["self"]],["usize"]]],[0,"convex_hull_trick","competitive_library::algorithm","",null,null],[3,"CHTLine","competitive_library::algorithm::convex_hull_trick","",null,null],[3,"ConvexHullTrick","","",null,null],[11,"new","","",25,[[["i64"]],["self"]]],[11,"value","","",25,[[["i64"],["self"]],["i64"]]],[11,"check","","",25,[[["self"]],["bool"]]],[11,"new","","",26,[[],["self"]]],[11,"add_line","","k-th add_line(a_k, b_k): a_k >= a_{k+1}",26,[[["i64"],["self"]]]],[11,"query","","",26,[[["i64"],["self"]],["i64"]]],[0,"search","competitive_library::algorithm","",null,null],[5,"binary_search","competitive_library::algorithm::search","",null,[[["fn"],["bisect"]],["bisect"]]],[5,"lower_bound","","",null,[[["bisect"],["ord"]],["usize"]]],[5,"upper_bound","","",null,[[["bisect"],["ord"]],["usize"]]],[5,"ternary_search","","",null,[[["trisect"],["fn"]],["trisect"]]],[8,"Bisect","","",null,null],[10,"halve","","",27,[[],["self"]]],[10,"section_end","","",27,[[],["bool"]]],[8,"Trisect","","",null,null],[10,"next","","",28,[[]]],[10,"section_end","","",28,[[],["bool"]]],[0,"slide_minimum","competitive_library::algorithm","",null,null],[5,"slide_minimum","competitive_library::algorithm::slide_minimum","",null,[[["usize"],["vec"]],[["usize"],["vec",["usize"]]]]],[0,"data_structure","competitive_library","",null,null],[3,"Rev","competitive_library::data_structure","",null,null],[12,"0","","",29,null],[3,"TotalOrd","","",null,null],[12,"0","","",30,null],[0,"binary_indexed_tree","","",null,null],[3,"BinaryIndexedTree","competitive_library::data_structure::binary_indexed_tree","",null,null],[3,"BinaryIndexedTree2D","","",null,null],[11,"new","","",31,[[["m"],["usize"]],["binaryindexedtree"]]],[11,"ident","","",31,[[["self"]]]],[11,"operate","","",31,[[["self"]]]],[11,"accumulate","","0-indexed [1, k)",31,[[["self"],["usize"]]]],[11,"update","","1-indexed",31,[[["self"],["usize"]]]],[11,"inverse","","",31,[[["self"]]]],[11,"fold","","0-indexed [l, r)",31,[[["self"],["usize"]]]],[11,"get","","1-indexed",31,[[["self"],["usize"]]]],[11,"set","","1-indexed",31,[[["self"],["usize"]]]],[11,"lower_bound","","1-indexed",31,[[["self"]],["usize"]]],[11,"new","","",32,[[["m"],["usize"]],["binaryindexedtree2d"]]],[11,"accumulate","","0-indexed [0, i) x [0, j)",32,[[["self"],["usize"]]]],[11,"update","","1-indexed",32,[[["self"],["usize"]]]],[11,"fold","","0-indexed [i1, i2) x [j1, j2)",32,[[["self"],["usize"]]]],[11,"get","","1-indexed",32,[[["self"],["usize"]]]],[11,"set","","1-indexed",32,[[["self"],["usize"]]]],[0,"bitset","competitive_library::data_structure","",null,null],[3,"BitSet","competitive_library::data_structure::bitset","",null,null],[11,"new","","",33,[[["usize"]],["self"]]],[11,"get","","",33,[[["self"],["usize"]],["bool"]]],[11,"set","","",33,[[["self"],["usize"],["bool"]]]],[11,"count_ones","","",33,[[["self"]],["u64"]]],[11,"count_zeros","","",33,[[["self"]],["u64"]]],[11,"shl_bitor_assign","","",33,[[["self"],["usize"]]]],[11,"shr_bitor_assign","","",33,[[["self"],["usize"]]]],[0,"disjoint_sparse_table","competitive_library::data_structure","",null,null],[3,"DisjointSparseTable","competitive_library::data_structure::disjoint_sparse_table","",null,null],[11,"new","","",34,[[["vec"],["s"]],["self"]]],[11,"len","","",34,[[["self"]],["usize"]]],[11,"fold_close","","",34,[[["self"],["usize"]]]],[11,"fold","","",34,[[["self"],["usize"]]]],[0,"segment_tree","competitive_library::data_structure","",null,null],[3,"SegmentTree","competitive_library::data_structure::segment_tree","",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy folding Monoid F: forcedâ€¦",null,null],[11,"new","","",35,[[["m"],["usize"]],["segmenttree"]]],[11,"from_vec","","",35,[[["vec"],["m"]],["segmenttree"]]],[11,"set","","",35,[[["self"],["usize"]]]],[11,"update","","",35,[[["self"],["usize"]]]],[11,"get","","",35,[[["self"],["usize"]]]],[11,"fold","","",35,[[["self"],["usize"]]]],[11,"fold_all","","",35,[[["self"]]]],[11,"lower_bound_all","","left most index [0, r) that satisfies monotonic condition",35,[[["usize"],["self"],["fn"]],["usize"]]],[11,"lower_bound","","left most index [l, r) that satisfies monotonic condition",35,[[["usize"],["self"],["fn"]],["usize"]]],[11,"new","","",36,[[["usize"],["e"],["m"],["f"]],["lazysegmenttree"]]],[11,"from_vec","","",36,[[["e"],["vec"],["m"],["f"]],["lazysegmenttree"]]],[11,"eval","","",36,[[["self"],["usize"]]]],[11,"update","","",36,[[["self"],["usize"]]]],[11,"fold","","",36,[[["self"],["usize"]]]],[0,"sliding_winsow_aggregation","competitive_library::data_structure","",null,null],[3,"QueueAggregation","competitive_library::data_structure::sliding_winsow_aggregation","",null,null],[3,"DequeAggregation","","",null,null],[11,"new","","",37,[[["m"]],["self"]]],[11,"len","","",37,[[["self"]],["usize"]]],[11,"is_empty","","",37,[[["self"]],["bool"]]],[11,"fold_all","","",37,[[["self"]]]],[11,"last","","",37,[[["self"]],["option"]]],[11,"push","","",37,[[["self"]]]],[11,"pop","","",37,[[["self"]],["option"]]],[11,"new","","",38,[[["m"]],["self"]]],[11,"len","","",38,[[["self"]],["usize"]]],[11,"is_empty","","",38,[[["self"]],["bool"]]],[11,"fold_all","","",38,[[["self"]]]],[11,"front","","",38,[[["self"]],["option"]]],[11,"back","","",38,[[["self"]],["option"]]],[11,"push_front","","",38,[[["self"]]]],[11,"push_back","","",38,[[["self"]]]],[11,"pop_front","","",38,[[["self"]],["option"]]],[11,"pop_back","","",38,[[["self"]],["option"]]],[11,"reverse","","",38,[[["self"]]]],[0,"union_find","competitive_library::data_structure","",null,null],[3,"UnionFind","competitive_library::data_structure::union_find","",null,null],[3,"WeightedUnionFind","","",null,null],[11,"new","","",39,[[["usize"]],["unionfind"]]],[11,"find","","",39,[[["self"],["usize"]],["usize"]]],[11,"unite","","",39,[[["self"],["usize"]],["bool"]]],[11,"size","","",39,[[["self"],["usize"]],["usize"]]],[11,"same","","",39,[[["self"],["usize"]],["bool"]]],[11,"members","","",39,[[["self"],["usize"]],[["usize"],["vec",["usize"]]]]],[11,"roots","","",39,[[["self"]],[["usize"],["vec",["usize"]]]]],[11,"all_group_members","","",39,[[["self"]],[["hashmap",["usize","vec"]],["usize"],["vec",["usize"]]]]],[11,"new","","",40,[[["usize"],["g"]],["self"]]],[11,"find","","",40,[[["self"],["usize"]],["usize"]]],[11,"get_weight","","",40,[[["self"],["usize"]]]],[11,"unite","","",40,[[["self"],["usize"]],["bool"]]],[11,"size","","",40,[[["self"],["usize"]],["usize"]]],[11,"is_same","","",40,[[["self"],["usize"]],["bool"]]],[11,"get_difference","","",40,[[["self"],["usize"]],["option"]]],[11,"members","","",40,[[["self"],["usize"]],[["usize"],["vec",["usize"]]]]],[11,"roots","","",40,[[["self"]],[["usize"],["vec",["usize"]]]]],[11,"all_group_members","","",40,[[["self"]],[["vec",["usize"]],["hashmap",["usize","vec"]],["usize"]]]],[0,"geometry","competitive_library","",null,null],[3,"Real","competitive_library::geometry","",null,null],[12,"0","","",41,null],[4,"CCW","","",null,null],[13,"OnlineFront","","a--b--c",42,null],[13,"Clockwise","","a--b-vc",42,null],[13,"OnSegment","","a--c--b",42,null],[13,"CounterClockwise","","a--b-^c",42,null],[13,"OnlineBack","","c--a--b",42,null],[5,"ccw","","",null,[[["point"]],["ccw"]]],[0,"circle","","",null,null],[3,"Circle","competitive_library::geometry::circle","",null,null],[11,"new","","",43,[[["point"],["f64"]],["self"]]],[11,"cross_circle","","",43,[[["self"]],["option"]]],[11,"contains_point","","",43,[[["point"],["self"]],["bool"]]],[0,"closest_pair","competitive_library::geometry","",null,null],[5,"closest_pair","competitive_library::geometry::closest_pair","",null,[[["point"],["vec",["point"]]],["f64"]]],[0,"complex","competitive_library::geometry","",null,null],[3,"Complex","competitive_library::geometry::complex","",null,null],[12,"re","","",44,null],[12,"im","","",44,null],[11,"new","","",44,[[["t"]],["complex"]]],[11,"transpose","","",44,[[],["complex"]]],[11,"conjugate","","",44,[[],["complex"]]],[11,"dot","","",44,[[],["t"]]],[11,"cross","","",44,[[],["t"]]],[11,"norm","","",44,[[],["t"]]],[11,"from_polar","","",44,[[["f64"]],["self"]]],[11,"abs","","",44,[[],["f64"]]],[11,"unit","","",44,[[],["self"]]],[11,"angle","","",44,[[],["f64"]]],[0,"line","competitive_library::geometry","",null,null],[3,"Line","competitive_library::geometry::line","",null,null],[3,"LineSegment","","",null,null],[11,"new","","",45,[[["point"]],["self"]]],[11,"dir","","",45,[[["self"]],["point"]]],[11,"ccw","","",45,[[["point"],["self"]],["ccw"]]],[11,"projection","","",45,[[["point"],["self"]],["point"]]],[11,"reflection","","",45,[[["point"],["self"]],["point"]]],[11,"distance_point","","",45,[[["point"],["self"]],["f64"]]],[11,"is_parallel","","",45,[[["self"]],["bool"]]],[11,"is_orthogonal","","",45,[[["self"]],["bool"]]],[11,"new","","",46,[[["point"]],["self"]]],[11,"dir","","",46,[[["self"]],["point"]]],[11,"ccw","","",46,[[["point"],["self"]],["ccw"]]],[11,"projection","","",46,[[["point"],["self"]],["point"]]],[11,"reflection","","",46,[[["point"],["self"]],["point"]]],[11,"is_parallel","","",46,[[["self"]],["bool"]]],[11,"is_orthogonal","","",46,[[["self"]],["bool"]]],[11,"intersect","","",46,[[["self"]],["bool"]]],[11,"intersect_point","","",46,[[["point"],["self"]],["bool"]]],[11,"cross_point","","",46,[[["self"]],[["option",["point"]],["point"]]]],[11,"distance_point","","",46,[[["point"],["self"]],["f64"]]],[11,"distance","","",46,[[["self"]],["f64"]]],[0,"polygon","competitive_library::geometry","",null,null],[5,"convex_hull","competitive_library::geometry::polygon","",null,[[["point"],["vec",["point"]]],[["point"],["vec",["point"]]]]],[5,"convex_diameter","","",null,[[["point"],["vec",["point"]]],["f64"]]],[6,"Point","competitive_library::geometry","",null,null],[17,"EPS","","",null,null],[0,"graph","competitive_library","",null,null],[3,"DirectedAcyclicGraph","competitive_library::graph","",null,null],[0,"base","","",null,null],[3,"Adjacent","competitive_library::graph::base","",null,null],[12,"to","","",47,null],[12,"id","","",47,null],[3,"Graph","","",null,null],[12,"vsize","","",48,null],[12,"esize","","",48,null],[12,"graph","","",48,null],[3,"GraphRec","","",null,null],[12,"n","","",49,null],[12,"visited","","",49,null],[12,"cost","","",49,null],[11,"new","","",47,[[["usize"]],["adjacent"]]],[11,"new","","",48,[[["usize"]],["graph"]]],[11,"add_edge","","",48,[[["self"],["usize"]]]],[11,"add_undirected_edge","","",48,[[["self"],["usize"]]]],[11,"vertices","","",48,[[["self"]],[["range",["usize"]],["usize"]]]],[11,"adjacency","","",48,[[["self"],["usize"]],["vec"]]],[11,"new","","",49,[[["usize"]],["graphrec"]]],[11,"dfs","","",49,[[["self"],["usize"],["graph"]]]],[0,"maximum_flow","competitive_library::graph","",null,null],[3,"RevEdge","competitive_library::graph::maximum_flow","",null,null],[12,"to","","",50,null],[12,"rev","","",50,null],[12,"cap","","",50,null],[3,"Dinic","","",null,null],[12,"graph","","",51,null],[11,"new","","",50,[[["usize"],["u64"]],["revedge"]]],[11,"new","","",51,[[["usize"]],["dinic"]]],[11,"add_edge","","",51,[[["self"],["usize"],["u64"]]]],[11,"maximum_flow","","",51,[[["self"],["usize"]],["u64"]]],[0,"minimum_cost_flow","competitive_library::graph","",null,null],[3,"RevEdge","competitive_library::graph::minimum_cost_flow","",null,null],[12,"to","","",52,null],[12,"rev","","",52,null],[12,"cap","","",52,null],[12,"cost","","",52,null],[3,"PrimalDual","","",null,null],[11,"new","","",52,[[["i64"],["usize"],["u64"]],["revedge"]]],[11,"new","","",53,[[["usize"]],["primaldual"]]],[11,"add_edge","","",53,[[["i64"],["usize"],["self"],["u64"]]]],[11,"minimum_cost_flow","","",53,[[["self"],["usize"],["u64"]],[["option",["i64"]],["i64"]]]],[0,"strongly_connected_component","competitive_library::graph","",null,null],[3,"StronglyConnectedComponent","competitive_library::graph::strongly_connected_component","",null,null],[3,"TwoSatisfiability","","",null,null],[11,"new","","",54,[[["usize"]],["self"]]],[11,"add_edge","","",54,[[["self"],["usize"]]]],[11,"dfs","","",54,[[["self"],["usize"]]]],[11,"rdfs","","",54,[[["self"],["usize"]]]],[11,"build","","",54,[[["self"]]]],[11,"gen_cgraph","","",54,[[["self"]],[["vec",["vec"]],["vec",["usize"]]]]],[11,"component","","",54,[[["self"]],[["hashset",["usize"]],["vec",["hashset"]]]]],[11,"new","","",55,[[["usize"]],["self"]]],[11,"add_inner","","",55,[[["self"],["usize"]]]],[11,"add_or","","",55,[[["self"],["usize"]]]],[11,"add_nand","","",55,[[["self"],["usize"]]]],[11,"set_true","","",55,[[["self"],["usize"]]]],[11,"set_false","","",55,[[["self"],["usize"]]]],[11,"build","","",55,[[["self"]],[["vec",["bool"]],["option",["vec"]]]]],[0,"topological_sort","competitive_library::graph","",null,null],[11,"topological_sort","competitive_library::graph::base","",48,[[["self"]],[["usize"],["vec",["usize"]]]]],[11,"new","competitive_library::graph","",56,[[["usize"]],["directedacyclicgraph"]]],[11,"add_edge","","",56,[[["self"],["usize"]]]],[11,"bfs","","",56,[[["self"],["usize"]],[["option",["usize"]],["usize"]]]],[0,"math","competitive_library","",null,null],[0,"anymod","competitive_library::math","",null,null],[3,"AnyMod","competitive_library::math::anymod","",null,null],[11,"new","","",57,[[["i64"]],["self"]]],[11,"modulo","","",57,[[["i64"]],["i64"]]],[11,"pow","","",57,[[["usize"]],["self"]]],[11,"inv","","",57,[[],["self"]]],[0,"anymodu32","competitive_library::math","",null,null],[3,"AnyModu32","competitive_library::math::anymodu32","",null,null],[0,"modu32_impl","","",null,null],[11,"new","","",58,[[["u32"]],["self"]]],[11,"new_unchecked","","",58,[[["u32"]],["self"]]],[11,"one","","",58,[[],["self"]]],[11,"zero","","",58,[[],["self"]]],[11,"get_modulo","","",58,[[],["u32"]]],[11,"set_modulo","","",58,[[["u32"]]]],[11,"pow","","",58,[[["usize"]],["self"]]],[11,"inv","","",58,[[],["self"]]],[0,"factorial","competitive_library::math","",null,null],[3,"MemorizedFactorial","competitive_library::math::factorial","",null,null],[3,"SmallModMemorizedFactorial","","",null,null],[11,"new","","",59,[[["usize"]],["memorizedfactorial"]]],[11,"combination","","",59,[[["self"],["usize"]],["modi64"]]],[11,"permutation","","",59,[[["self"],["usize"]],["modi64"]]],[11,"homogeneous_product","","",59,[[["self"],["usize"]],["modi64"]]],[11,"new","","",60,[[["usize"]],["smallmodmemorizedfactorial"]]],[11,"factorial","","n! = a * p^e",60,[[["self"],["usize"]]]],[11,"combination","","",60,[[["self"],["usize"]],["anymod"]]],[0,"gcd","competitive_library::math","",null,null],[5,"gcd","competitive_library::math::gcd","",null,[[["u64"]],["u64"]]],[5,"gcd_binary","","",null,[[["u64"]],["u64"]]],[5,"lcm","","",null,[[["u64"]],["u64"]]],[5,"extgcd","","",null,[[["i64"]]]],[5,"extgcd_loop","","",null,[[["i64"]]]],[5,"extgcd_binary","","",null,[[["i64"]]]],[5,"modinv","","",null,[[["i64"]],["i64"]]],[5,"modinv_loop","","",null,[[["i64"]],["i64"]]],[5,"modinv_extgcd_binary","","0 < a < p, gcd(a, p) == 1, p is prime > 2",null,[[["u64"]],["u64"]]],[0,"matrix","competitive_library::math","",null,null],[3,"Matrix","competitive_library::math::matrix","",null,null],[12,"shape","","",61,null],[12,"data","","",61,null],[11,"new","","",61,[[["t"]],["self"]]],[11,"from_vec","","",61,[[["vec",["vec"]],["vec"]],["self"]]],[11,"zeros","","",61,[[],["self"]]],[11,"eye","","",61,[[["t"]],["self"]]],[11,"pow","","",61,[[["t"],["self"],["usize"]],["self"]]],[11,"gauss_jordan","","",61,[[["vec"],["self"]],[["vec",["f64"]],["option",["vec"]]]]],[0,"modi64","competitive_library::math","",null,null],[3,"Modi64","competitive_library::math::modi64","",null,null],[12,"0","","",62,null],[11,"new","","",62,[[["i64"]],["self"]]],[11,"modulo","","",62,[[["i64"]],["i64"]]],[11,"pow","","",62,[[["i64"]],["self"]]],[11,"inv","","",62,[[],["self"]]],[0,"modu32","competitive_library::math","",null,null],[3,"Modu32","competitive_library::math::modu32","",null,null],[0,"modulos","","",null,null],[3,"Modulo1000000007","competitive_library::math::modu32::modulos","",null,null],[3,"Modulo1000000009","","",null,null],[3,"Modulo998244353","","",null,null],[0,"modu32_impl","competitive_library::math::modu32","",null,null],[8,"Modulo","","",null,null],[18,"MODULO","","",63,null],[11,"modulo","","",63,[[["u32"]],["u32"]]],[11,"new","","",64,[[["u32"]],["self"]]],[11,"new_unchecked","","",64,[[["u32"]],["self"]]],[11,"one","","",64,[[],["self"]]],[11,"zero","","",64,[[],["self"]]],[11,"get_mod","","",64,[[],["u32"]]],[11,"pow","","",64,[[["usize"]],["self"]]],[11,"inv","","",64,[[],["self"]]],[0,"nums","competitive_library::math","",null,null],[3,"BabyStepGiantStep","competitive_library::math::nums","",null,null],[5,"binary_exponentiation","","",null,[[["usize"],["mulassign"],["clone"]],[["mulassign"],["clone"]]]],[11,"new","","",65,[[["u64"]],["self"]]],[11,"solve","","",65,[[["self"],["u64"]],[["u64"],["option",["u64"]]]]],[0,"polynomial","competitive_library::math","",null,null],[3,"Polynomial","competitive_library::math::polynomial","",null,null],[12,"0","","",66,null],[12,"1","","",66,null],[5,"poly_add","","",null,[[["i64"],["polynomial"]],["polynomial"]]],[5,"poly_sub","","",null,[[["i64"],["polynomial"]],["polynomial"]]],[5,"poly_mul","","",null,[[["i64"],["polynomial"]],["polynomial"]]],[5,"poly_div","","",null,[[["i64"],["polynomial"]],["polynomial"]]],[5,"poly_mod","","",null,[[["i64"],["polynomial"]],["polynomial"]]],[5,"poly_assign","","",null,[[["i64"],["polynomial"]],["i64"]]],[0,"poly_mod_poly","","",null,null],[5,"poly_mulmod","competitive_library::math::polynomial::poly_mod_poly","",null,[[["poly"]],["poly"]]],[5,"poly_pow","","",null,[[["usize"],["poly"]],["poly"]]],[6,"Poly","","",null,null],[11,"len","competitive_library::math::polynomial","",66,[[["self"]],["usize"]]],[0,"prime","competitive_library::math","",null,null],[3,"PrimeTable","competitive_library::math::prime","",null,null],[3,"EulerPhiTable","","",null,null],[5,"prime_factors","","",null,[[["usize"]],[["usize"],["hashmap",["usize","usize"]]]]],[5,"divisors","","",null,[[["usize"]],[["usize"],["vec",["usize"]]]]],[5,"pow","","",null,[[["u64"]],["u64"]]],[5,"miller_rabin","","",null,[[["u64"],["usize"]],["bool"]]],[5,"euler_phi","","",null,[[["usize"]],["usize"]]],[5,"moebius","","g(d) = Sigma mu(d) * f(n/d)",null,[[["usize"]],[["i64"],["hashmap",["usize","i64"]],["usize"]]]],[11,"new","","",67,[[["usize"]],["self"]]],[11,"is_prime","","",67,[[["self"],["usize"]],["bool"]]],[11,"prime_factors","","",67,[[["self"],["usize"]],[["usize"],["hashmap",["usize","usize"]]]]],[11,"new","","",68,[[["usize"]],["self"]]],[11,"get","","",68,[[["self"],["usize"]],["usize"]]],[0,"quad_double","competitive_library::math","",null,null],[3,"QuadDouble","competitive_library::math::quad_double","ref: https://na-inet.jp/na/qd_ja.pdf",null,null],[0,"quad_double_impl","","",null,null],[5,"quick_two_sum","competitive_library::math::quad_double::quad_double_impl","",null,[[["f64"]]]],[5,"two_sum","","",null,[[["f64"]]]],[5,"split","","",null,[[["f64"]]]],[5,"two_prod","","",null,[[["f64"]]]],[5,"three_three_sum","","",null,[[["f64"]]]],[5,"three_two_sum","","",null,[[["f64"]]]],[5,"multiple_three_sum","","",null,[[]]],[5,"multiple_two_sum","","",null,[[]]],[5,"double_accumulate","","",null,[[["f64"]]]],[11,"new","competitive_library::math::quad_double","",69,[[["f64"]],["self"]]],[11,"renormalize","","",69,[[["f64"]],["self"]]],[0,"string","competitive_library","",null,null],[0,"knuth_morris_pratt","competitive_library::string","",null,null],[3,"KnuthMorrisPratt","competitive_library::string::knuth_morris_pratt","",null,null],[11,"new","","",70,[[["vec"]],["knuthmorrispratt"]]],[11,"search_all","","",70,[[["self"],["vec"]],[["usize"],["vec",["usize"]]]]],[0,"rolling_hash","competitive_library::string","",null,null],[3,"RollingHash","competitive_library::string::rolling_hash","",null,null],[3,"MultipleRollingHash","","",null,null],[18,"MOD","","",71,null],[11,"mersenne_mod","","",71,[[["u64"]],["u64"]]],[11,"mersenne_mul","","",71,[[["u64"]],["u64"]]],[11,"mersenne_mul_mod","","",71,[[["u64"]],["u64"]]],[11,"new","","",71,[[["u64"],["vec"]],["self"]]],[11,"hash_once","","",71,[[["self"],["vec"]],["u64"]]],[11,"find","","S [l, r)",71,[[["self"],["usize"]],["u64"]]],[11,"concat","","",71,[[["usize"],["self"],["u64"]],["u64"]]],[11,"new","","",72,[[["vec"]],["self"]]],[11,"new_rand","","",72,[[["usize"],["vec"]],["self"]]],[11,"find","","",72,[[["self"],["usize"]],[["vec",["u64"]],["u64"]]]],[11,"concat","","",72,[[["usize"],["self"],["vec"]],[["vec",["u64"]],["u64"]]]],[0,"suffix_array","competitive_library::string","",null,null],[3,"SuffixArray","competitive_library::string::suffix_array","",null,null],[11,"new","","",73,[[["vec"]],["self"]]],[11,"len","","",73,[[["self"]],["usize"]]],[11,"longest_common_prefix_array","","",73,[[["self"]],[["usize"],["vec",["usize"]]]]],[0,"z_algorithm","competitive_library::string","",null,null],[3,"Zarray","competitive_library::string::z_algorithm","",null,null],[11,"new","","",74,[[],["zarray"]]],[11,"search","","",74,[[["eq"],["vec"]],[["usize"],["vec",["usize"]]]]],[0,"tools","competitive_library","",null,null],[0,"input","competitive_library::tools","",null,null],[0,"iterable","","",null,null],[0,"output","","",null,null],[5,"with_bufwriter","competitive_library::tools::output","",null,[[["f"]],["result"]]],[0,"random","competitive_library::tools","",null,null],[3,"Xorshift","competitive_library::tools::random","",null,null],[11,"new","","",75,[[["u64"]],["self"]]],[11,"time","","",75,[[],["self"]]],[11,"next","","",75,[[["self"]],["u64"]]],[11,"rand","","",75,[[["self"],["u64"]],["u64"]]],[11,"rands","","",75,[[["self"],["u64"],["usize"]],[["vec",["u64"]],["u64"]]]],[11,"randf","","",75,[[["self"]],["f64"]]],[0,"tree","competitive_library","",null,null],[0,"depth","competitive_library::tree","",null,null],[11,"tree_depth","competitive_library::graph::base","",48,[[["self"],["usize"]],[["vec",["u64"]],["u64"]]]],[11,"tree_size","","",48,[[["self"],["usize"]],[["vec",["u64"]],["u64"]]]],[0,"euler_tour","competitive_library::tree","",null,null],[3,"EulerTourForEdge","competitive_library::tree::euler_tour","",null,null],[3,"EulerTourForVertex","","",null,null],[3,"EulerTourForRichVertex","","",null,null],[3,"LowestCommonAncestor","","",null,null],[3,"LCAMonoid","","",null,null],[0,"impl_lcam","","",null,null],[11,"new","","",76,[[["graph"]],["self"]]],[11,"ancestor","","",76,[[["self"],["usize"]],["usize"]]],[11,"new","","",77,[[["usize"]],["self"]]],[11,"len","","",77,[[["self"]],["usize"]]],[11,"edge_tour","","",77,[[["self"],["usize"],["graph"]]]],[11,"new","","",78,[[["usize"]],["self"]]],[11,"len","","",78,[[["self"]],["usize"]]],[11,"subtree_vertex_tour","","",78,[[["self"],["usize"],["graph"]]]],[11,"path_vertex_tour","","",78,[[["self"],["usize"],["graph"]]]],[11,"subtree_query","","",78,[[["fnmut"],["self"],["usize"]],["t"]]],[11,"subtree_update","","",78,[[["usize"],["fnmut"],["t"],["self"]]]],[11,"path_query","","",78,[[["fnmut"],["self"],["usize"]],["t"]]],[11,"path_update","","",78,[[["usize"],["fnmut"],["t"],["self"]]]],[11,"new","","",79,[[["usize"]],["self"]]],[11,"len","","",79,[[["self"]],["usize"]]],[11,"vertex_tour","","",79,[[["self"],["usize"],["graph"]]]],[11,"query","","",79,[[["fnmut"],["self"],["usize"]],["t"]]],[11,"gen_lca","","",79,[[["graph"],["self"]],["lowestcommonancestor"]]],[11,"lca","","",80,[[["self"],["usize"]],["usize"]]],[0,"rerooting","competitive_library::tree","",null,null],[3,"ReRooting","competitive_library::tree::rerooting","",null,null],[11,"new","","",81,[[["m"],["usize"],["f"]],["self"]]],[11,"eidx","","",81,[[["adjacent"],["self"],["usize"]],["usize"]]],[11,"reidx","","",81,[[["adjacent"],["self"],["usize"]],["usize"]]],[11,"merge","","",81,[[["self"]]]],[11,"add_subroot","","",81,[[["usize"],["self"]]]],[11,"add_root","","",81,[[["self"],["usize"]]]],[11,"dfs","","",81,[[["graph"],["usize"],["self"],["adjacent"]]]],[11,"efs","","",81,[[["self"],["usize"],["graph"]]]],[11,"rerooting","","",81,[[["self"],["graph"]]]],[0,"tree","competitive_library::tree","",null,null],[3,"TreeRec","competitive_library::tree::tree","",null,null],[12,"n","","",82,null],[11,"new","","",82,[[["usize"]],["treerec"]]],[11,"dfs","","",82,[[["self"],["usize"],["graph"]]]],[14,"impl_additive_identity","competitive_library","",null,null],[14,"impl_multiplicative_identity","","",null,null],[14,"impl_bitand_identity","","",null,null],[14,"impl_bitor_identity","","",null,null],[14,"read_value","","",null,null],[14,"input_inner","","",null,null],[14,"input","","",null,null],[11,"from","competitive_library::algebra::operations","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,[[["self"],["t"]]]],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"try_into","","",83,[[],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"type_id","","",83,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","competitive_library::algorithm::compress","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","competitive_library::algorithm::convex_hull_trick","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","competitive_library::data_structure","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","competitive_library::data_structure::binary_indexed_tree","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,[[["self"],["t"]]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","competitive_library::data_structure::bitset","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","competitive_library::data_structure::disjoint_sparse_table","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","competitive_library::data_structure::segment_tree","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"to_owned","","",35,[[["self"]],["t"]]],[11,"clone_into","","",35,[[["self"],["t"]]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"to_owned","","",36,[[["self"]],["t"]]],[11,"clone_into","","",36,[[["self"],["t"]]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","competitive_library::data_structure::sliding_winsow_aggregation","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,[[["self"],["t"]]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","competitive_library::data_structure::union_find","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","competitive_library::geometry","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","competitive_library::geometry::circle","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","competitive_library::geometry::complex","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from","competitive_library::geometry::line","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph","",56,[[["t"]],["t"]]],[11,"into","","",56,[[],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"try_into","","",56,[[],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"type_id","","",56,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::base","",47,[[["t"]],["t"]]],[11,"into","","",47,[[],["u"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,[[["self"],["t"]]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[],["u"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::maximum_flow","",50,[[["t"]],["t"]]],[11,"into","","",50,[[],["u"]]],[11,"to_owned","","",50,[[["self"]],["t"]]],[11,"clone_into","","",50,[[["self"],["t"]]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[],["u"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::minimum_cost_flow","",52,[[["t"]],["t"]]],[11,"into","","",52,[[],["u"]]],[11,"to_owned","","",52,[[["self"]],["t"]]],[11,"clone_into","","",52,[[["self"],["t"]]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"try_into","","",52,[[],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",53,[[["t"]],["t"]]],[11,"into","","",53,[[],["u"]]],[11,"try_from","","",53,[[["u"]],["result"]]],[11,"try_into","","",53,[[],["result"]]],[11,"borrow","","",53,[[["self"]],["t"]]],[11,"borrow_mut","","",53,[[["self"]],["t"]]],[11,"type_id","","",53,[[["self"]],["typeid"]]],[11,"from","competitive_library::graph::strongly_connected_component","",54,[[["t"]],["t"]]],[11,"into","","",54,[[],["u"]]],[11,"try_from","","",54,[[["u"]],["result"]]],[11,"try_into","","",54,[[],["result"]]],[11,"borrow","","",54,[[["self"]],["t"]]],[11,"borrow_mut","","",54,[[["self"]],["t"]]],[11,"type_id","","",54,[[["self"]],["typeid"]]],[11,"from","","",55,[[["t"]],["t"]]],[11,"into","","",55,[[],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"try_into","","",55,[[],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"type_id","","",55,[[["self"]],["typeid"]]],[11,"from","competitive_library::math::anymod","",57,[[["t"]],["t"]]],[11,"into","","",57,[[],["u"]]],[11,"to_owned","","",57,[[["self"]],["t"]]],[11,"clone_into","","",57,[[["self"],["t"]]]],[11,"to_string","","",57,[[["self"]],["string"]]],[11,"try_from","","",57,[[["u"]],["result"]]],[11,"try_into","","",57,[[],["result"]]],[11,"borrow","","",57,[[["self"]],["t"]]],[11,"borrow_mut","","",57,[[["self"]],["t"]]],[11,"type_id","","",57,[[["self"]],["typeid"]]],[11,"from","competitive_library::math::anymodu32","",58,[[["t"]],["t"]]],[11,"into","","",58,[[],["u"]]],[11,"to_owned","","",58,[[["self"]],["t"]]],[11,"clone_into","","",58,[[["self"],["t"]]]],[11,"to_string","","",58,[[["self"]],["string"]]],[11,"try_from","","",58,[[["u"]],["result"]]],[11,"try_into","","",58,[[],["result"]]],[11,"borrow","","",58,[[["self"]],["t"]]],[11,"borrow_mut","","",58,[[["self"]],["t"]]],[11,"type_id","","",58,[[["self"]],["typeid"]]],[11,"from","competitive_library::math::factorial","",59,[[["t"]],["t"]]],[11,"into","","",59,[[],["u"]]],[11,"to_owned","","",59,[[["self"]],["t"]]],[11,"clone_into","","",59,[[["self"],["t"]]]],[11,"try_from","","",59,[[["u"]],["result"]]],[11,"try_into","","",59,[[],["result"]]],[11,"borrow","","",59,[[["self"]],["t"]]],[11,"borrow_mut","","",59,[[["self"]],["t"]]],[11,"type_id","","",59,[[["self"]],["typeid"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"to_owned","","",60,[[["self"]],["t"]]],[11,"clone_into","","",60,[[["self"],["t"]]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"from","competitive_library::math::matrix","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,[[["self"],["t"]]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"from","competitive_library::math::modi64","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"to_owned","","",62,[[["self"]],["t"]]],[11,"clone_into","","",62,[[["self"],["t"]]]],[11,"to_string","","",62,[[["self"]],["string"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"from","competitive_library::math::modu32","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"to_owned","","",64,[[["self"]],["t"]]],[11,"clone_into","","",64,[[["self"],["t"]]]],[11,"to_string","","",64,[[["self"]],["string"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from","competitive_library::math::modu32::modulos","",84,[[["t"]],["t"]]],[11,"into","","",84,[[],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,[[["self"],["t"]]]],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"try_into","","",84,[[],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"type_id","","",84,[[["self"]],["typeid"]]],[11,"from","","",85,[[["t"]],["t"]]],[11,"into","","",85,[[],["u"]]],[11,"to_owned","","",85,[[["self"]],["t"]]],[11,"clone_into","","",85,[[["self"],["t"]]]],[11,"try_from","","",85,[[["u"]],["result"]]],[11,"try_into","","",85,[[],["result"]]],[11,"borrow","","",85,[[["self"]],["t"]]],[11,"borrow_mut","","",85,[[["self"]],["t"]]],[11,"type_id","","",85,[[["self"]],["typeid"]]],[11,"from","","",86,[[["t"]],["t"]]],[11,"into","","",86,[[],["u"]]],[11,"to_owned","","",86,[[["self"]],["t"]]],[11,"clone_into","","",86,[[["self"],["t"]]]],[11,"try_from","","",86,[[["u"]],["result"]]],[11,"try_into","","",86,[[],["result"]]],[11,"borrow","","",86,[[["self"]],["t"]]],[11,"borrow_mut","","",86,[[["self"]],["t"]]],[11,"type_id","","",86,[[["self"]],["typeid"]]],[11,"from","competitive_library::math::nums","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"to_owned","","",65,[[["self"]],["t"]]],[11,"clone_into","","",65,[[["self"],["t"]]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"from","competitive_library::math::polynomial","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"to_owned","","",66,[[["self"]],["t"]]],[11,"clone_into","","",66,[[["self"],["t"]]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"from","competitive_library::math::prime","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"to_owned","","",67,[[["self"]],["t"]]],[11,"clone_into","","",67,[[["self"],["t"]]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"to_owned","","",68,[[["self"]],["t"]]],[11,"clone_into","","",68,[[["self"],["t"]]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"from","competitive_library::math::quad_double","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"to_owned","","",69,[[["self"]],["t"]]],[11,"clone_into","","",69,[[["self"],["t"]]]],[11,"to_string","","",69,[[["self"]],["string"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"from","competitive_library::string::knuth_morris_pratt","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"to_owned","","",70,[[["self"]],["t"]]],[11,"clone_into","","",70,[[["self"],["t"]]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"from","competitive_library::string::rolling_hash","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"to_owned","","",71,[[["self"]],["t"]]],[11,"clone_into","","",71,[[["self"],["t"]]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"into","","",72,[[],["u"]]],[11,"to_owned","","",72,[[["self"]],["t"]]],[11,"clone_into","","",72,[[["self"],["t"]]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"try_into","","",72,[[],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"type_id","","",72,[[["self"]],["typeid"]]],[11,"from","competitive_library::string::suffix_array","",73,[[["t"]],["t"]]],[11,"into","","",73,[[],["u"]]],[11,"to_owned","","",73,[[["self"]],["t"]]],[11,"clone_into","","",73,[[["self"],["t"]]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"try_into","","",73,[[],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"type_id","","",73,[[["self"]],["typeid"]]],[11,"from","competitive_library::string::z_algorithm","",74,[[["t"]],["t"]]],[11,"into","","",74,[[],["u"]]],[11,"to_owned","","",74,[[["self"]],["t"]]],[11,"clone_into","","",74,[[["self"],["t"]]]],[11,"try_from","","",74,[[["u"]],["result"]]],[11,"try_into","","",74,[[],["result"]]],[11,"borrow","","",74,[[["self"]],["t"]]],[11,"borrow_mut","","",74,[[["self"]],["t"]]],[11,"type_id","","",74,[[["self"]],["typeid"]]],[11,"from","competitive_library::tools::random","",75,[[["t"]],["t"]]],[11,"into","","",75,[[],["u"]]],[11,"to_owned","","",75,[[["self"]],["t"]]],[11,"clone_into","","",75,[[["self"],["t"]]]],[11,"try_from","","",75,[[["u"]],["result"]]],[11,"try_into","","",75,[[],["result"]]],[11,"borrow","","",75,[[["self"]],["t"]]],[11,"borrow_mut","","",75,[[["self"]],["t"]]],[11,"type_id","","",75,[[["self"]],["typeid"]]],[11,"from","competitive_library::tree::euler_tour","",77,[[["t"]],["t"]]],[11,"into","","",77,[[],["u"]]],[11,"to_owned","","",77,[[["self"]],["t"]]],[11,"clone_into","","",77,[[["self"],["t"]]]],[11,"try_from","","",77,[[["u"]],["result"]]],[11,"try_into","","",77,[[],["result"]]],[11,"borrow","","",77,[[["self"]],["t"]]],[11,"borrow_mut","","",77,[[["self"]],["t"]]],[11,"type_id","","",77,[[["self"]],["typeid"]]],[11,"from","","",78,[[["t"]],["t"]]],[11,"into","","",78,[[],["u"]]],[11,"to_owned","","",78,[[["self"]],["t"]]],[11,"clone_into","","",78,[[["self"],["t"]]]],[11,"try_from","","",78,[[["u"]],["result"]]],[11,"try_into","","",78,[[],["result"]]],[11,"borrow","","",78,[[["self"]],["t"]]],[11,"borrow_mut","","",78,[[["self"]],["t"]]],[11,"type_id","","",78,[[["self"]],["typeid"]]],[11,"from","","",79,[[["t"]],["t"]]],[11,"into","","",79,[[],["u"]]],[11,"to_owned","","",79,[[["self"]],["t"]]],[11,"clone_into","","",79,[[["self"],["t"]]]],[11,"try_from","","",79,[[["u"]],["result"]]],[11,"try_into","","",79,[[],["result"]]],[11,"borrow","","",79,[[["self"]],["t"]]],[11,"borrow_mut","","",79,[[["self"]],["t"]]],[11,"type_id","","",79,[[["self"]],["typeid"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,[[["self"],["t"]]]],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"try_into","","",80,[[],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"type_id","","",80,[[["self"]],["typeid"]]],[11,"from","","",76,[[["t"]],["t"]]],[11,"into","","",76,[[],["u"]]],[11,"to_owned","","",76,[[["self"]],["t"]]],[11,"clone_into","","",76,[[["self"],["t"]]]],[11,"try_from","","",76,[[["u"]],["result"]]],[11,"try_into","","",76,[[],["result"]]],[11,"borrow","","",76,[[["self"]],["t"]]],[11,"borrow_mut","","",76,[[["self"]],["t"]]],[11,"type_id","","",76,[[["self"]],["typeid"]]],[11,"from","competitive_library::tree::rerooting","",81,[[["t"]],["t"]]],[11,"into","","",81,[[],["u"]]],[11,"to_owned","","",81,[[["self"]],["t"]]],[11,"clone_into","","",81,[[["self"],["t"]]]],[11,"try_from","","",81,[[["u"]],["result"]]],[11,"try_into","","",81,[[],["result"]]],[11,"borrow","","",81,[[["self"]],["t"]]],[11,"borrow_mut","","",81,[[["self"]],["t"]]],[11,"type_id","","",81,[[["self"]],["typeid"]]],[11,"from","competitive_library::tree::tree","",82,[[["t"]],["t"]]],[11,"into","","",82,[[],["u"]]],[11,"try_from","","",82,[[["u"]],["result"]]],[11,"try_into","","",82,[[],["result"]]],[11,"borrow","","",82,[[["self"]],["t"]]],[11,"borrow_mut","","",82,[[["self"]],["t"]]],[11,"type_id","","",82,[[["self"]],["typeid"]]],[11,"operate","competitive_library::algebra::operations","",4,[[["self"]]]],[11,"operate","","",5,[[["self"]]]],[11,"operate","","",6,[[["self"]]]],[11,"operate","","",7,[[["self"]]]],[11,"operate","","",8,[[["self"]]]],[11,"operate","","",9,[[["self"]]]],[11,"operate","","",10,[[["self"]]]],[11,"operate","","",11,[[["self"]]]],[11,"operate","","",12,[[["self"]]]],[11,"operate","","",13,[[["self"]]]],[11,"operate","","",14,[[["self"]]]],[11,"operate","","",83,[[["self"]]]],[11,"operate","","",15,[[["self"]]]],[11,"operate","","",16,[[["self"]]]],[11,"operate","","",17,[[["self"]]]],[11,"operate","competitive_library::tree::euler_tour","",76,[[["self"]]]],[11,"unit","competitive_library::algebra::operations","",4,[[["self"]]]],[11,"unit","","",5,[[["self"]]]],[11,"unit","","",6,[[["self"]]]],[11,"unit","","",7,[[["self"]]]],[11,"unit","","",8,[[["self"]]]],[11,"unit","","",9,[[["self"]]]],[11,"unit","","",10,[[["self"]]]],[11,"unit","","",11,[[["self"]]]],[11,"unit","","",12,[[["self"]]]],[11,"unit","","",13,[[["self"]]]],[11,"unit","","",14,[[["self"]]]],[11,"unit","","",15,[[["self"]]]],[11,"unit","","",16,[[["self"]]]],[11,"unit","","",17,[[["self"]]]],[11,"inverse","","",8,[[["self"]]]],[11,"inverse","","",9,[[["self"]]]],[11,"inverse","","",14,[[["self"]]]],[11,"inverse","","",16,[[["self"]]]],[11,"zero","competitive_library::math::anymodu32","",58,[[],["self"]]],[11,"zero","competitive_library::math::modu32","",64,[[],["self"]]],[11,"one","competitive_library::math::anymodu32","",58,[[],["self"]]],[11,"one","competitive_library::math::modu32","",64,[[],["self"]]],[11,"from","competitive_library::math::anymodu32","",58,[[["u32"]],["self"]]],[11,"from","","",58,[[["u64"]],["self"]]],[11,"from","competitive_library::math::modi64","",62,[[["i64"]],["self"]]],[11,"from","competitive_library::math::modu32","",64,[[["u32"]],["self"]]],[11,"from","","",64,[[["u64"]],["self"]]],[11,"from","competitive_library::math::quad_double","",69,[[["f64"]],["self"]]],[11,"into","","",69,[[],["f64"]]],[11,"clone","competitive_library::algebra::operations","",4,[[["self"]],["maxoperation"]]],[11,"clone","","",5,[[["self"]],["minoperation"]]],[11,"clone","","",6,[[["self"]],["firstoperation"]]],[11,"clone","","",7,[[["self"]],["lastoperation"]]],[11,"clone","","",8,[[["self"]],["additiveoperation"]]],[11,"clone","","",9,[[["self"]],["multiplicativeoperation"]]],[11,"clone","","",10,[[["self"]],["linearoperation"]]],[11,"clone","","",11,[[["self"]],["bitandoperation"]]],[11,"clone","","",12,[[["self"]],["bitoroperation"]]],[11,"clone","","",13,[[["self"]],["monoidaloperation"]]],[11,"clone","","",14,[[["self"]],["groupoperation"]]],[11,"clone","","",83,[[["self"]],["assocoativeoperator"]]],[11,"clone","","",15,[[["self"]],["absorbedassocoativeoperator"]]],[11,"clone","","",16,[[["self"]],["cartesianoperation"]]],[11,"clone","","",17,[[["self"]],["countingoperation"]]],[11,"clone","competitive_library::algorithm::compress","",24,[[["self"]],["compress"]]],[11,"clone","competitive_library::algorithm::convex_hull_trick","",25,[[["self"]],["chtline"]]],[11,"clone","","",26,[[["self"]],["convexhulltrick"]]],[11,"clone","competitive_library::data_structure::binary_indexed_tree","",31,[[["self"]],["binaryindexedtree"]]],[11,"clone","","",32,[[["self"]],["binaryindexedtree2d"]]],[11,"clone","competitive_library::data_structure::bitset","",33,[[["self"]],["bitset"]]],[11,"clone","competitive_library::data_structure::disjoint_sparse_table","",34,[[["self"]],["disjointsparsetable"]]],[11,"clone","competitive_library::data_structure::segment_tree","",35,[[["self"]],["segmenttree"]]],[11,"clone","","",36,[[["self"]],["lazysegmenttree"]]],[11,"clone","competitive_library::data_structure::sliding_winsow_aggregation","",37,[[["self"]],["queueaggregation"]]],[11,"clone","","",38,[[["self"]],["dequeaggregation"]]],[11,"clone","competitive_library::data_structure::union_find","",39,[[["self"]],["unionfind"]]],[11,"clone","","",40,[[["self"]],["weightedunionfind"]]],[11,"clone","competitive_library::data_structure","",29,[[["self"]],["rev"]]],[11,"clone","competitive_library::geometry::circle","",43,[[["self"]],["circle"]]],[11,"clone","competitive_library::geometry::complex","",44,[[["self"]],["complex"]]],[11,"clone","competitive_library::geometry::line","",45,[[["self"]],["line"]]],[11,"clone","","",46,[[["self"]],["linesegment"]]],[11,"clone","competitive_library::geometry","",41,[[["self"]],["real"]]],[11,"clone","","",42,[[["self"]],["ccw"]]],[11,"clone","competitive_library::graph::base","",47,[[["self"]],["adjacent"]]],[11,"clone","","",48,[[["self"]],["graph"]]],[11,"clone","competitive_library::graph::maximum_flow","",50,[[["self"]],["revedge"]]],[11,"clone","competitive_library::graph::minimum_cost_flow","",52,[[["self"]],["revedge"]]],[11,"clone","competitive_library::math::anymod","",57,[[["self"]],["anymod"]]],[11,"clone","competitive_library::math::anymodu32","",58,[[["self"]],["anymodu32"]]],[11,"clone","competitive_library::math::factorial","",59,[[["self"]],["memorizedfactorial"]]],[11,"clone","","",60,[[["self"]],["smallmodmemorizedfactorial"]]],[11,"clone","competitive_library::math::matrix","",61,[[["self"]],["matrix"]]],[11,"clone","competitive_library::math::modi64","",62,[[["self"]],["modi64"]]],[11,"clone","competitive_library::math::modu32::modulos","",84,[[["self"]],["modulo1000000007"]]],[11,"clone","","",85,[[["self"]],["modulo1000000009"]]],[11,"clone","","",86,[[["self"]],["modulo998244353"]]],[11,"clone","competitive_library::math::modu32","",64,[[["self"]],["modu32"]]],[11,"clone","competitive_library::math::nums","",65,[[["self"]],["babystepgiantstep"]]],[11,"clone","competitive_library::math::polynomial","",66,[[["self"]],["polynomial"]]],[11,"clone","competitive_library::math::prime","",67,[[["self"]],["primetable"]]],[11,"clone","","",68,[[["self"]],["eulerphitable"]]],[11,"clone","competitive_library::math::quad_double","",69,[[["self"]],["quaddouble"]]],[11,"clone","competitive_library::string::knuth_morris_pratt","",70,[[["self"]],["knuthmorrispratt"]]],[11,"clone","competitive_library::string::rolling_hash","",71,[[["self"]],["rollinghash"]]],[11,"clone","","",72,[[["self"]],["multiplerollinghash"]]],[11,"clone","competitive_library::string::suffix_array","",73,[[["self"]],["suffixarray"]]],[11,"clone","competitive_library::string::z_algorithm","",74,[[["self"]],["zarray"]]],[11,"clone","competitive_library::tools::random","",75,[[["self"]],["xorshift"]]],[11,"clone","competitive_library::tree::euler_tour","",77,[[["self"]],["eulertourforedge"]]],[11,"clone","","",78,[[["self"]],["eulertourforvertex"]]],[11,"clone","","",79,[[["self"]],["eulertourforrichvertex"]]],[11,"clone","","",80,[[["self"]],["lowestcommonancestor"]]],[11,"clone","","",76,[[["self"]],["lcamonoid"]]],[11,"clone","competitive_library::tree::rerooting","",81,[[["self"]],["rerooting"]]],[11,"default","competitive_library::algebra::operations","",4,[[],["maxoperation"]]],[11,"default","","",5,[[],["minoperation"]]],[11,"default","","",6,[[],["firstoperation"]]],[11,"default","","",7,[[],["lastoperation"]]],[11,"default","","",8,[[],["additiveoperation"]]],[11,"default","","",9,[[],["multiplicativeoperation"]]],[11,"default","","",10,[[],["linearoperation"]]],[11,"default","","",11,[[],["bitandoperation"]]],[11,"default","","",12,[[],["bitoroperation"]]],[11,"default","competitive_library::algorithm::convex_hull_trick","",25,[[],["chtline"]]],[11,"default","competitive_library::data_structure::bitset","",33,[[],["bitset"]]],[11,"default","competitive_library::geometry::complex","",44,[[],["complex"]]],[11,"default","competitive_library::graph::base","",47,[[],["adjacent"]]],[11,"default","","",48,[[],["graph"]]],[11,"default","competitive_library::math::anymod","",57,[[],["anymod"]]],[11,"default","competitive_library::math::anymodu32","",58,[[],["anymodu32"]]],[11,"default","competitive_library::math::modi64","",62,[[],["modi64"]]],[11,"default","competitive_library::math::modu32::modulos","",84,[[],["modulo1000000007"]]],[11,"default","","",85,[[],["modulo1000000009"]]],[11,"default","","",86,[[],["modulo998244353"]]],[11,"default","competitive_library::math::modu32","",64,[[],["modu32"]]],[11,"default","competitive_library::math::polynomial","",66,[[],["polynomial"]]],[11,"default","competitive_library::math::quad_double","",69,[[],["quaddouble"]]],[11,"default","competitive_library::tools::random","",75,[[],["self"]]],[11,"default","competitive_library::tree::euler_tour","",77,[[],["eulertourforedge"]]],[11,"default","","",78,[[],["eulertourforvertex"]]],[11,"default","","",79,[[],["eulertourforrichvertex"]]],[11,"cmp","competitive_library::algebra::operations","",4,[[["maxoperation"],["self"]],["ordering"]]],[11,"cmp","","",5,[[["minoperation"],["self"]],["ordering"]]],[11,"cmp","","",6,[[["firstoperation"],["self"]],["ordering"]]],[11,"cmp","","",7,[[["self"],["lastoperation"]],["ordering"]]],[11,"cmp","","",8,[[["additiveoperation"],["self"]],["ordering"]]],[11,"cmp","","",9,[[["multiplicativeoperation"],["self"]],["ordering"]]],[11,"cmp","","",10,[[["self"],["linearoperation"]],["ordering"]]],[11,"cmp","","",11,[[["self"],["bitandoperation"]],["ordering"]]],[11,"cmp","","",12,[[["bitoroperation"],["self"]],["ordering"]]],[11,"cmp","competitive_library::data_structure::bitset","",33,[[["bitset"],["self"]],["ordering"]]],[11,"cmp","competitive_library::data_structure","",29,[[["rev"],["self"]],["ordering"]]],[11,"cmp","","",30,[[["self"],["totalord"]],["ordering"]]],[11,"cmp","competitive_library::geometry","",42,[[["self"],["ccw"]],["ordering"]]],[11,"cmp","competitive_library::math::modu32::modulos","",84,[[["modulo1000000007"],["self"]],["ordering"]]],[11,"cmp","","",85,[[["modulo1000000009"],["self"]],["ordering"]]],[11,"cmp","","",86,[[["self"],["modulo998244353"]],["ordering"]]],[11,"eq","competitive_library::algebra::operations","",4,[[["maxoperation"],["self"]],["bool"]]],[11,"ne","","",4,[[["maxoperation"],["self"]],["bool"]]],[11,"eq","","",5,[[["minoperation"],["self"]],["bool"]]],[11,"ne","","",5,[[["minoperation"],["self"]],["bool"]]],[11,"eq","","",6,[[["firstoperation"],["self"]],["bool"]]],[11,"ne","","",6,[[["firstoperation"],["self"]],["bool"]]],[11,"eq","","",7,[[["self"],["lastoperation"]],["bool"]]],[11,"ne","","",7,[[["self"],["lastoperation"]],["bool"]]],[11,"eq","","",8,[[["additiveoperation"],["self"]],["bool"]]],[11,"ne","","",8,[[["additiveoperation"],["self"]],["bool"]]],[11,"eq","","",9,[[["multiplicativeoperation"],["self"]],["bool"]]],[11,"ne","","",9,[[["multiplicativeoperation"],["self"]],["bool"]]],[11,"eq","","",10,[[["self"],["linearoperation"]],["bool"]]],[11,"ne","","",10,[[["self"],["linearoperation"]],["bool"]]],[11,"eq","","",11,[[["self"],["bitandoperation"]],["bool"]]],[11,"ne","","",11,[[["self"],["bitandoperation"]],["bool"]]],[11,"eq","","",12,[[["bitoroperation"],["self"]],["bool"]]],[11,"ne","","",12,[[["bitoroperation"],["self"]],["bool"]]],[11,"eq","competitive_library::algorithm::convex_hull_trick","",25,[[["self"],["chtline"]],["bool"]]],[11,"ne","","",25,[[["self"],["chtline"]],["bool"]]],[11,"eq","competitive_library::data_structure::bitset","",33,[[["bitset"],["self"]],["bool"]]],[11,"ne","","",33,[[["bitset"],["self"]],["bool"]]],[11,"eq","competitive_library::data_structure","",29,[[["rev"],["self"]],["bool"]]],[11,"ne","","",29,[[["rev"],["self"]],["bool"]]],[11,"eq","","",30,[[["self"],["totalord"]],["bool"]]],[11,"ne","","",30,[[["self"],["totalord"]],["bool"]]],[11,"eq","competitive_library::geometry::circle","",43,[[["self"],["circle"]],["bool"]]],[11,"ne","","",43,[[["self"],["circle"]],["bool"]]],[11,"eq","competitive_library::geometry::complex","",44,[[["self"],["complex"]],["bool"]]],[11,"ne","","",44,[[["self"],["complex"]],["bool"]]],[11,"eq","competitive_library::geometry::line","",45,[[["line"],["self"]],["bool"]]],[11,"ne","","",45,[[["line"],["self"]],["bool"]]],[11,"eq","","",46,[[["self"],["linesegment"]],["bool"]]],[11,"ne","","",46,[[["self"],["linesegment"]],["bool"]]],[11,"eq","competitive_library::geometry","",41,[[["self"],["real"]],["bool"]]],[11,"eq","","",42,[[["self"],["ccw"]],["bool"]]],[11,"eq","competitive_library::graph::base","",47,[[["adjacent"],["self"]],["bool"]]],[11,"ne","","",47,[[["adjacent"],["self"]],["bool"]]],[11,"eq","competitive_library::math::anymod","",57,[[["anymod"],["self"]],["bool"]]],[11,"ne","","",57,[[["anymod"],["self"]],["bool"]]],[11,"eq","competitive_library::math::anymodu32","",58,[[["anymodu32"],["self"]],["bool"]]],[11,"ne","","",58,[[["anymodu32"],["self"]],["bool"]]],[11,"eq","competitive_library::math::matrix","",61,[[["matrix"],["self"]],["bool"]]],[11,"ne","","",61,[[["matrix"],["self"]],["bool"]]],[11,"eq","competitive_library::math::modi64","",62,[[["modi64"],["self"]],["bool"]]],[11,"ne","","",62,[[["modi64"],["self"]],["bool"]]],[11,"eq","competitive_library::math::modu32::modulos","",84,[[["modulo1000000007"],["self"]],["bool"]]],[11,"eq","","",85,[[["modulo1000000009"],["self"]],["bool"]]],[11,"eq","","",86,[[["self"],["modulo998244353"]],["bool"]]],[11,"eq","competitive_library::math::modu32","",64,[[["modu32"],["self"]],["bool"]]],[11,"ne","","",64,[[["modu32"],["self"]],["bool"]]],[11,"eq","competitive_library::math::polynomial","",66,[[["self"],["polynomial"]],["bool"]]],[11,"ne","","",66,[[["self"],["polynomial"]],["bool"]]],[11,"eq","competitive_library::math::quad_double","",69,[[["quaddouble"],["self"]],["bool"]]],[11,"ne","","",69,[[["quaddouble"],["self"]],["bool"]]],[11,"partial_cmp","competitive_library::algebra::operations","",4,[[["maxoperation"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",4,[[["maxoperation"],["self"]],["bool"]]],[11,"le","","",4,[[["maxoperation"],["self"]],["bool"]]],[11,"gt","","",4,[[["maxoperation"],["self"]],["bool"]]],[11,"ge","","",4,[[["maxoperation"],["self"]],["bool"]]],[11,"partial_cmp","","",5,[[["minoperation"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",5,[[["minoperation"],["self"]],["bool"]]],[11,"le","","",5,[[["minoperation"],["self"]],["bool"]]],[11,"gt","","",5,[[["minoperation"],["self"]],["bool"]]],[11,"ge","","",5,[[["minoperation"],["self"]],["bool"]]],[11,"partial_cmp","","",6,[[["firstoperation"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",6,[[["firstoperation"],["self"]],["bool"]]],[11,"le","","",6,[[["firstoperation"],["self"]],["bool"]]],[11,"gt","","",6,[[["firstoperation"],["self"]],["bool"]]],[11,"ge","","",6,[[["firstoperation"],["self"]],["bool"]]],[11,"partial_cmp","","",7,[[["self"],["lastoperation"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",7,[[["self"],["lastoperation"]],["bool"]]],[11,"le","","",7,[[["self"],["lastoperation"]],["bool"]]],[11,"gt","","",7,[[["self"],["lastoperation"]],["bool"]]],[11,"ge","","",7,[[["self"],["lastoperation"]],["bool"]]],[11,"partial_cmp","","",8,[[["additiveoperation"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",8,[[["additiveoperation"],["self"]],["bool"]]],[11,"le","","",8,[[["additiveoperation"],["self"]],["bool"]]],[11,"gt","","",8,[[["additiveoperation"],["self"]],["bool"]]],[11,"ge","","",8,[[["additiveoperation"],["self"]],["bool"]]],[11,"partial_cmp","","",9,[[["multiplicativeoperation"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",9,[[["multiplicativeoperation"],["self"]],["bool"]]],[11,"le","","",9,[[["multiplicativeoperation"],["self"]],["bool"]]],[11,"gt","","",9,[[["multiplicativeoperation"],["self"]],["bool"]]],[11,"ge","","",9,[[["multiplicativeoperation"],["self"]],["bool"]]],[11,"partial_cmp","","",10,[[["self"],["linearoperation"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",10,[[["self"],["linearoperation"]],["bool"]]],[11,"le","","",10,[[["self"],["linearoperation"]],["bool"]]],[11,"gt","","",10,[[["self"],["linearoperation"]],["bool"]]],[11,"ge","","",10,[[["self"],["linearoperation"]],["bool"]]],[11,"partial_cmp","","",11,[[["self"],["bitandoperation"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",11,[[["self"],["bitandoperation"]],["bool"]]],[11,"le","","",11,[[["self"],["bitandoperation"]],["bool"]]],[11,"gt","","",11,[[["self"],["bitandoperation"]],["bool"]]],[11,"ge","","",11,[[["self"],["bitandoperation"]],["bool"]]],[11,"partial_cmp","","",12,[[["bitoroperation"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",12,[[["bitoroperation"],["self"]],["bool"]]],[11,"le","","",12,[[["bitoroperation"],["self"]],["bool"]]],[11,"gt","","",12,[[["bitoroperation"],["self"]],["bool"]]],[11,"ge","","",12,[[["bitoroperation"],["self"]],["bool"]]],[11,"partial_cmp","competitive_library::data_structure::bitset","",33,[[["bitset"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",33,[[["bitset"],["self"]],["bool"]]],[11,"le","","",33,[[["bitset"],["self"]],["bool"]]],[11,"gt","","",33,[[["bitset"],["self"]],["bool"]]],[11,"ge","","",33,[[["bitset"],["self"]],["bool"]]],[11,"partial_cmp","competitive_library::data_structure","",29,[[["rev"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",30,[[["self"],["totalord"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",30,[[["self"],["totalord"]],["bool"]]],[11,"le","","",30,[[["self"],["totalord"]],["bool"]]],[11,"gt","","",30,[[["self"],["totalord"]],["bool"]]],[11,"ge","","",30,[[["self"],["totalord"]],["bool"]]],[11,"partial_cmp","competitive_library::geometry","",41,[[["self"],["real"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",42,[[["self"],["ccw"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","competitive_library::math::modu32::modulos","",84,[[["modulo1000000007"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",85,[[["modulo1000000009"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",86,[[["self"],["modulo998244353"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","competitive_library::math::quad_double","",69,[[["quaddouble"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",69,[[["quaddouble"],["self"]],["bool"]]],[11,"le","","",69,[[["quaddouble"],["self"]],["bool"]]],[11,"gt","","",69,[[["quaddouble"],["self"]],["bool"]]],[11,"ge","","",69,[[["quaddouble"],["self"]],["bool"]]],[11,"fmt","competitive_library::algebra::operations","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",83,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::algorithm::compress","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::algorithm::convex_hull_trick","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::data_structure::binary_indexed_tree","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",32,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::data_structure::bitset","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::data_structure::disjoint_sparse_table","",34,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::data_structure::segment_tree","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::data_structure::sliding_winsow_aggregation","",37,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",38,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::data_structure::union_find","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::data_structure","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::geometry::circle","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::geometry::complex","",44,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::geometry::line","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::geometry","",41,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::graph::base","",47,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",48,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",49,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::graph::maximum_flow","",50,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",51,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::graph::minimum_cost_flow","",52,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",53,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::graph::strongly_connected_component","",54,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",55,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::graph","",56,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::anymod","",57,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::anymodu32","",58,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::factorial","",59,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",60,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::matrix","",61,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::modi64","",62,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::modu32::modulos","",84,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",85,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",86,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::modu32","",64,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::nums","",65,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::polynomial","",66,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::prime","",67,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",68,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::quad_double","",69,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::string::knuth_morris_pratt","",70,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::string::rolling_hash","",71,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",72,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::string::suffix_array","",73,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::string::z_algorithm","",74,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::tools::random","",75,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::tree::euler_tour","",77,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",78,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",79,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",80,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",76,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::tree::rerooting","",81,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::tree::tree","",82,[[["formatter"],["self"]],["result"]]],[11,"fmt","competitive_library::math::anymod","",57,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","competitive_library::math::anymodu32","",58,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","competitive_library::math::modi64","",62,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","competitive_library::math::modu32","",64,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"fmt","competitive_library::math::quad_double","",69,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"div","competitive_library::geometry::complex","",44,[[]]],[11,"div","","",44,[[["t"]]]],[11,"div","competitive_library::math::anymod","",57,[[]]],[11,"div","","",57,[[["anymod"]]]],[11,"div","competitive_library::math::anymodu32","",58,[[]]],[11,"div","","",58,[[["anymodu32"]]]],[11,"div","competitive_library::math::modi64","",62,[[]]],[11,"div","","",62,[[["modi64"]]]],[11,"div","competitive_library::math::modu32","",64,[[]]],[11,"div","","",64,[[["modu32"]]]],[11,"sub","competitive_library::geometry::complex","",44,[[]]],[11,"sub","","",44,[[["t"]]]],[11,"sub","competitive_library::math::anymod","",57,[[]]],[11,"sub","","",57,[[["anymod"]]]],[11,"sub","competitive_library::math::anymodu32","",58,[[]]],[11,"sub","","",58,[[["anymodu32"]]]],[11,"sub","competitive_library::math::modi64","",62,[[]]],[11,"sub","","",62,[[["modi64"]]]],[11,"sub","competitive_library::math::modu32","",64,[[]]],[11,"sub","","",64,[[["modu32"]]]],[11,"sub","competitive_library::math::quad_double","",69,[[]]],[11,"add","competitive_library::geometry::complex","",44,[[]]],[11,"add","","",44,[[["t"]]]],[11,"add","competitive_library::math::anymod","",57,[[]]],[11,"add","","",57,[[["anymod"]]]],[11,"add","competitive_library::math::anymodu32","",58,[[]]],[11,"add","","",58,[[["anymodu32"]]]],[11,"add","competitive_library::math::modi64","",62,[[]]],[11,"add","","",62,[[["modi64"]]]],[11,"add","competitive_library::math::modu32","",64,[[]]],[11,"add","","",64,[[["modu32"]]]],[11,"add","competitive_library::math::quad_double","",69,[[["f64"]]]],[11,"add","","",69,[[]]],[11,"mul","competitive_library::geometry::complex","",44,[[]]],[11,"mul","","",44,[[["t"]]]],[11,"mul","competitive_library::math::anymod","",57,[[]]],[11,"mul","","",57,[[["anymod"]]]],[11,"mul","competitive_library::math::anymodu32","",58,[[]]],[11,"mul","","",58,[[["anymodu32"]]]],[11,"mul","competitive_library::math::modi64","",62,[[]]],[11,"mul","","",62,[[["modi64"]]]],[11,"mul","competitive_library::math::modu32","",64,[[]]],[11,"mul","","",64,[[["modu32"]]]],[11,"mul","competitive_library::math::quad_double","",69,[[["f64"]]]],[11,"mul","","",69,[[]]],[11,"neg","competitive_library::geometry::complex","",44,[[]]],[11,"neg","competitive_library::math::anymod","",57,[[]]],[11,"neg","competitive_library::math::anymodu32","",58,[[]]],[11,"neg","competitive_library::math::modi64","",62,[[]]],[11,"neg","competitive_library::math::modu32","",64,[[]]],[11,"neg","competitive_library::math::quad_double","",69,[[]]],[11,"add_assign","competitive_library::math::anymod","",57,[[["self"]]]],[11,"add_assign","","",57,[[["self"],["anymod"]]]],[11,"add_assign","competitive_library::math::anymodu32","",58,[[["anymodu32"],["self"]]]],[11,"add_assign","","",58,[[["self"],["anymodu32"]]]],[11,"add_assign","competitive_library::math::modi64","",62,[[["self"]]]],[11,"add_assign","","",62,[[["self"],["modi64"]]]],[11,"add_assign","competitive_library::math::modu32","",64,[[["modu32"],["self"]]]],[11,"add_assign","","",64,[[["modu32"],["self"]]]],[11,"sub_assign","competitive_library::math::anymod","",57,[[["self"]]]],[11,"sub_assign","","",57,[[["self"],["anymod"]]]],[11,"sub_assign","competitive_library::math::anymodu32","",58,[[["anymodu32"],["self"]]]],[11,"sub_assign","","",58,[[["self"],["anymodu32"]]]],[11,"sub_assign","competitive_library::math::modi64","",62,[[["self"]]]],[11,"sub_assign","","",62,[[["self"],["modi64"]]]],[11,"sub_assign","competitive_library::math::modu32","",64,[[["modu32"],["self"]]]],[11,"sub_assign","","",64,[[["modu32"],["self"]]]],[11,"mul_assign","competitive_library::math::anymod","",57,[[["self"]]]],[11,"mul_assign","","",57,[[["self"],["anymod"]]]],[11,"mul_assign","competitive_library::math::anymodu32","",58,[[["anymodu32"],["self"]]]],[11,"mul_assign","","",58,[[["self"],["anymodu32"]]]],[11,"mul_assign","competitive_library::math::modi64","",62,[[["self"]]]],[11,"mul_assign","","",62,[[["self"],["modi64"]]]],[11,"mul_assign","competitive_library::math::modu32","",64,[[["modu32"],["self"]]]],[11,"mul_assign","","",64,[[["modu32"],["self"]]]],[11,"div_assign","competitive_library::math::anymod","",57,[[["self"]]]],[11,"div_assign","","",57,[[["self"],["anymod"]]]],[11,"div_assign","competitive_library::math::anymodu32","",58,[[["anymodu32"],["self"]]]],[11,"div_assign","","",58,[[["self"],["anymodu32"]]]],[11,"div_assign","competitive_library::math::modi64","",62,[[["self"]]]],[11,"div_assign","","",62,[[["self"],["modi64"]]]],[11,"div_assign","competitive_library::math::modu32","",64,[[["modu32"],["self"]]]],[11,"div_assign","","",64,[[["modu32"],["self"]]]],[11,"not","competitive_library::data_structure::bitset","",33,[[]]],[11,"bitand","","",33,[[["self"]]]],[11,"bitor","","",33,[[["self"]]]],[11,"bitxor","","",33,[[["self"]]]],[11,"shl","","",33,[[["usize"]]]],[11,"shr","","",33,[[["usize"]]]],[11,"bitand_assign","","",33,[[["self"],["self"]]]],[11,"bitor_assign","","",33,[[["self"],["self"]]]],[11,"bitxor_assign","","",33,[[["self"],["self"]]]],[11,"shl_assign","","",33,[[["self"],["usize"]]]],[11,"shr_assign","","",33,[[["self"],["usize"]]]],[11,"index","competitive_library::algorithm::compress","",24,[[["self"],["usize"]]]],[11,"index","competitive_library::data_structure::disjoint_sparse_table","",34,[[["self"],["usize"]]]],[11,"index","competitive_library::graph::strongly_connected_component","",54,[[["self"],["usize"]]]],[11,"index","competitive_library::math::matrix","",61,[[["self"],["usize"]]]],[11,"index","competitive_library::math::polynomial","",66,[[["self"],["usize"]]]],[11,"index","competitive_library::math::quad_double","",69,[[["self"],["usize"]]]],[11,"index","competitive_library::string::suffix_array","",73,[[["self"],["usize"]]]],[11,"index","competitive_library::string::z_algorithm","",74,[[["self"],["usize"]],["usize"]]],[11,"index_mut","competitive_library::math::matrix","",61,[[["self"],["usize"]]]],[11,"index_mut","competitive_library::math::polynomial","",66,[[["self"],["usize"]]]],[11,"hash","competitive_library::algebra::operations","",4,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"hash","","",10,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","competitive_library::data_structure::bitset","",33,[[["self"],["__h"]]]],[11,"hash","competitive_library::geometry::complex","",44,[[["self"],["__h"]]]],[11,"hash","competitive_library::math::anymod","",57,[[["self"],["__h"]]]],[11,"hash","competitive_library::math::anymodu32","",58,[[["self"],["__h"]]]],[11,"hash","competitive_library::math::modi64","",62,[[["self"],["__h"]]]],[11,"hash","competitive_library::math::modu32::modulos","",84,[[["self"],["__h"]]]],[11,"hash","","",85,[[["self"],["__h"]]]],[11,"hash","","",86,[[["self"],["__h"]]]],[11,"hash","competitive_library::math::modu32","",64,[[["self"],["__h"]]]],[11,"from_iter","competitive_library::algorithm::compress","",24,[[["intoiterator"]],["compress"]]],[11,"product","competitive_library::math::anymodu32","",58,[[["iterator"]],["self"]]],[11,"product","","",58,[[["iterator"]],["self"]]],[11,"product","competitive_library::math::modu32","",64,[[["iterator"]],["self"]]],[11,"product","","",64,[[["iterator"]],["self"]]],[11,"sum","competitive_library::math::anymodu32","",58,[[["iterator"]],["self"]]],[11,"sum","","",58,[[["iterator"]],["self"]]],[11,"sum","competitive_library::math::modi64","",62,[[["iterator"]],["self"]]],[11,"sum","","",62,[[["iterator"]],["self"]]],[11,"sum","competitive_library::math::modu32","",64,[[["iterator"]],["self"]]],[11,"sum","","",64,[[["iterator"]],["self"]]],[11,"from_str","competitive_library::math::anymodu32","",58,[[["str"]],["result"]]],[11,"from_str","competitive_library::math::modi64","",62,[[["str"]],["result"]]],[11,"from_str","competitive_library::math::modu32","",64,[[["str"]],["result"]]],[11,"from_str","competitive_library::math::quad_double","",69,[[["str"]],["result"]]]],"p":[[8,"Magma"],[8,"Unital"],[8,"Monoid"],[8,"Invertible"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"MonoidalOperation"],[3,"GroupOperation"],[3,"AbsorbedAssocoativeOperator"],[3,"CartesianOperation"],[3,"CountingOperation"],[8,"MinimumBounded"],[8,"MaximumBounded"],[8,"AdditiveIdentity"],[8,"MultiplicativeIdentity"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"Compress"],[3,"CHTLine"],[3,"ConvexHullTrick"],[8,"Bisect"],[8,"Trisect"],[3,"Rev"],[3,"TotalOrd"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"SegmentTree"],[3,"LazySegmentTree"],[3,"QueueAggregation"],[3,"DequeAggregation"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"Real"],[4,"CCW"],[3,"Circle"],[3,"Complex"],[3,"Line"],[3,"LineSegment"],[3,"Adjacent"],[3,"Graph"],[3,"GraphRec"],[3,"RevEdge"],[3,"Dinic"],[3,"RevEdge"],[3,"PrimalDual"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[3,"DirectedAcyclicGraph"],[3,"AnyMod"],[3,"AnyModu32"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"Matrix"],[3,"Modi64"],[8,"Modulo"],[3,"Modu32"],[3,"BabyStepGiantStep"],[3,"Polynomial"],[3,"PrimeTable"],[3,"EulerPhiTable"],[3,"QuadDouble"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"Xorshift"],[3,"LCAMonoid"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"ReRooting"],[3,"TreeRec"],[3,"AssocoativeOperator"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"Modulo998244353"]]};
searchIndex["lca"] = {"doc":"","i":[[5,"solve","lca","",null,[[["bufwriter"]],["result"]]],[5,"main","","",null,[[],["result"]]]],"p":[]};
searchIndex["many_aplusb"] = {"doc":"","i":[[5,"main","many_aplusb","",null,[[],["result"]]]],"p":[]};
searchIndex["point_add_range_sum_binary_indexed_tree"] = {"doc":"","i":[[5,"main","point_add_range_sum_binary_indexed_tree","",null,[[],["result"]]]],"p":[]};
searchIndex["point_add_range_sum_segment_tree"] = {"doc":"","i":[[5,"main","point_add_range_sum_segment_tree","",null,[[],["result"]]]],"p":[]};
searchIndex["point_set_range_composite"] = {"doc":"","i":[[5,"main","point_set_range_composite","",null,[[],["result"]]],[6,"M","","",null,null]],"p":[]};
searchIndex["queue_operate_all_composite"] = {"doc":"","i":[[5,"main","queue_operate_all_composite","",null,[[],["result"]]],[6,"M","","",null,null]],"p":[]};
searchIndex["range_affine_range_sum"] = {"doc":"","i":[[5,"main","range_affine_range_sum","",null,[[],["result"]]],[6,"M","","",null,null]],"p":[]};
searchIndex["scc"] = {"doc":"","i":[[5,"solve","scc","",null,[[["bufwriter"]],["result"]]],[5,"main","","",null,[[],["result"]]]],"p":[]};
searchIndex["staticrmq_disjoint_sparse_table"] = {"doc":"","i":[[5,"main","staticrmq_disjoint_sparse_table","",null,[[],["result"]]]],"p":[]};
searchIndex["staticrmq_segment_tree"] = {"doc":"","i":[[5,"main","staticrmq_segment_tree","",null,[[],["result"]]]],"p":[]};
searchIndex["suffixarray"] = {"doc":"","i":[[5,"main","suffixarray","",null,[[],["result"]]]],"p":[]};
searchIndex["two_sat"] = {"doc":"","i":[[5,"solve","two_sat","",null,[[["bufwriter"]],["result"]]],[5,"main","","",null,[[],["result"]]]],"p":[]};
searchIndex["unionfind"] = {"doc":"","i":[[5,"main","unionfind","",null,[[],["result"]]]],"p":[]};
searchIndex["zalgorithm"] = {"doc":"","i":[[5,"main","zalgorithm","",null,[[],["result"]]]],"p":[]};
addSearchOptions(searchIndex);initSearch(searchIndex);