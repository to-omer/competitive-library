var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","i":[[0,"dpl","aizu_online_judge","Discrete Optimization Problems",null,null],[0,"dpl_1_a","aizu_online_judge::dpl","Coin Changing Problem",null,null],[5,"dpl_1_a","aizu_online_judge::dpl::dpl_1_a","✅  AC  3ms",null,[[]]],[0,"dpl_1_b","aizu_online_judge::dpl","0-1 Knapsack Problem",null,null],[5,"dpl_1_b","aizu_online_judge::dpl::dpl_1_b","✅  AC  1ms",null,[[]]],[0,"dpl_1_c","aizu_online_judge::dpl","Knapsack Problem",null,null],[5,"dpl_1_c","aizu_online_judge::dpl::dpl_1_c","✅  AC  3ms",null,[[]]],[0,"dpl_1_d","aizu_online_judge::dpl","Longest Increasing Subsequence",null,null],[5,"dpl_1_d","aizu_online_judge::dpl::dpl_1_d","✅  AC  8ms",null,[[]]],[0,"dpl_1_e","aizu_online_judge::dpl","Edit Distance (Levenshtein Distance)",null,null],[5,"dpl_1_e","aizu_online_judge::dpl::dpl_1_e","✅  AC  9ms",null,[[]]],[0,"dpl_1_f","aizu_online_judge::dpl","0-1 Knapsack Problem II",null,null],[5,"dpl_1_f","aizu_online_judge::dpl::dpl_1_f","✅  AC  2ms",null,[[]]],[0,"dpl_1_g","aizu_online_judge::dpl","Knapsack Problem with Limitations",null,null],[5,"dpl_1_g","aizu_online_judge::dpl::dpl_1_g","✅  AC  7ms",null,[[]]],[0,"dpl_1_h","aizu_online_judge::dpl","Huge Knapsack Problem",null,null],[5,"dpl_1_h","aizu_online_judge::dpl::dpl_1_h","✅  AC  70ms",null,[[]]],[0,"dpl_1_i","aizu_online_judge::dpl","Knapsack Problem with Limitations II",null,null],[5,"dpl_1_i","aizu_online_judge::dpl::dpl_1_i","✅  AC  0ms",null,[[]]],[0,"dpl_3_a","aizu_online_judge::dpl","Largest Square",null,null],[5,"dpl_3_a","aizu_online_judge::dpl::dpl_3_a","✅  AC  34ms",null,[[]]],[0,"dpl_3_b","aizu_online_judge::dpl","Largest Rectangle",null,null],[5,"dpl_3_b","aizu_online_judge::dpl::dpl_3_b","✅  AC  19ms",null,[[]]],[0,"dpl_3_c","aizu_online_judge::dpl","Largest Rectangle in a Histogram",null,null],[5,"dpl_3_c","aizu_online_judge::dpl::dpl_3_c","✅  AC  3ms",null,[[]]],[0,"dsl","aizu_online_judge","Data Sets and Queries",null,null],[0,"dsl_1_a","aizu_online_judge::dsl","Disjoint Set: Union Find Tree",null,null],[5,"dsl_1_a","aizu_online_judge::dsl::dsl_1_a","✅  AC  9ms",null,[[]]],[0,"dsl_1_b","aizu_online_judge::dsl","Weighted Union Find Trees",null,null],[5,"dsl_1_b","aizu_online_judge::dsl::dsl_1_b","✅  AC  25ms",null,[[]]],[0,"dsl_2_a","aizu_online_judge::dsl","Range Minimum Query (RMQ)",null,null],[5,"dsl_2_a","aizu_online_judge::dsl::dsl_2_a","✅  AC  16ms",null,[[]]],[0,"dsl_2_b","aizu_online_judge::dsl","Range Sum Query",null,null],[5,"dsl_2_b","aizu_online_judge::dsl::dsl_2_b","✅  AC  18ms",null,[[]]],[0,"dsl_2_c","aizu_online_judge::dsl","Range Search (kD Tree)",null,null],[5,"dsl_2_c","aizu_online_judge::dsl::dsl_2_c","✅  AC  578ms",null,[[]]],[0,"dsl_2_d","aizu_online_judge::dsl","Range Update Query (RUQ)",null,null],[5,"dsl_2_d","aizu_online_judge::dsl::dsl_2_d","✅  AC  46ms",null,[[]]],[0,"dsl_2_e","aizu_online_judge::dsl","Range Add Query (RAQ)",null,null],[5,"dsl_2_e","aizu_online_judge::dsl::dsl_2_e","✅  AC  35ms",null,[[]]],[0,"dsl_2_f","aizu_online_judge::dsl","RMQ and RUQ",null,null],[5,"dsl_2_f","aizu_online_judge::dsl::dsl_2_f","✅  AC  48ms",null,[[]]],[0,"dsl_2_g","aizu_online_judge::dsl","RSQ and RAQ",null,null],[5,"dsl_2_g","aizu_online_judge::dsl::dsl_2_g","✅  AC  50ms",null,[[]]],[0,"dsl_2_h","aizu_online_judge::dsl","RMQ and RAQ",null,null],[5,"dsl_2_h","aizu_online_judge::dsl::dsl_2_h","✅  AC  49ms",null,[[]]],[0,"dsl_2_i","aizu_online_judge::dsl","RSQ and RUQ",null,null],[5,"dsl_2_i","aizu_online_judge::dsl::dsl_2_i","✅  AC  74ms",null,[[]]],[0,"dsl_3_a","aizu_online_judge::dsl","The Smallest Window I",null,null],[5,"dsl_3_a","aizu_online_judge::dsl::dsl_3_a","✅  AC  5ms",null,[[]]],[0,"dsl_3_b","aizu_online_judge::dsl","The Smallest Window II",null,null],[5,"dsl_3_b","aizu_online_judge::dsl::dsl_3_b","✅  AC  4ms",null,[[]]],[0,"dsl_3_c","aizu_online_judge::dsl","The Number of Windows",null,null],[5,"dsl_3_c","aizu_online_judge::dsl::dsl_3_c","✅  AC  241ms",null,[[]]],[0,"dsl_3_d","aizu_online_judge::dsl","Sliding Minimum Element",null,null],[5,"dsl_3_d","aizu_online_judge::dsl::dsl_3_d","✅  AC  136ms",null,[[]]],[0,"dsl_4_a","aizu_online_judge::dsl","Union of Rectangles",null,null],[5,"dsl_4_a","aizu_online_judge::dsl::dsl_4_a","✅  AC  68ms",null,[[]]],[0,"dsl_5_a","aizu_online_judge::dsl","The Maximum Number of Customers",null,null],[5,"dsl_5_a","aizu_online_judge::dsl::dsl_5_a","✅  AC  5ms",null,[[]]],[0,"dsl_5_b","aizu_online_judge::dsl","The Maximum Number of Overlaps",null,null],[5,"dsl_5_b","aizu_online_judge::dsl::dsl_5_b","✅  AC  10ms",null,[[]]],[0,"grl","aizu_online_judge","Graph Algorithms",null,null],[0,"grl_1_a","aizu_online_judge::grl","Single Source Shortest Path",null,null],[5,"grl_1_a","aizu_online_judge::grl::grl_1_a","✅  AC  79ms",null,[[]]],[0,"grl_1_b","aizu_online_judge::grl","Single Source Shortest Path (Negative Edges)",null,null],[5,"grl_1_b","aizu_online_judge::grl::grl_1_b","✅  AC  7ms",null,[[]]],[0,"grl_1_c","aizu_online_judge::grl","All Pairs Shortest Path",null,null],[5,"grl_1_c","aizu_online_judge::grl::grl_1_c","✅  AC  6ms",null,[[]]],[0,"grl_2_a","aizu_online_judge::grl","Minimum Spanning Tree",null,null],[5,"grl_2_a","aizu_online_judge::grl::grl_2_a","✅  AC  32ms",null,[[]]],[0,"grl_2_b","aizu_online_judge::grl","Minimum-Cost Arborescence",null,null],[5,"grl_2_b","aizu_online_judge::grl::grl_2_b","✅  AC  0ms",null,[[]]],[0,"grl_3_a","aizu_online_judge::grl","Articulation Points",null,null],[5,"grl_3_a","aizu_online_judge::grl::grl_3_a","✅  AC  4ms",null,[[]]],[0,"grl_3_b","aizu_online_judge::grl","Bridges",null,null],[5,"grl_3_b","aizu_online_judge::grl::grl_3_b","✅  AC  4ms",null,[[]]],[0,"grl_3_c","aizu_online_judge::grl","Strongly Connected Components",null,null],[5,"grl_3_c","aizu_online_judge::grl::grl_3_c","✅  AC  9ms",null,[[]]],[0,"grl_4_a","aizu_online_judge::grl","Cycle Detection for a Directed Graph",null,null],[5,"grl_4_a","aizu_online_judge::grl::grl_4_a","✅  AC  0ms",null,[[]]],[0,"grl_4_b","aizu_online_judge::grl","Topological Sort",null,null],[5,"grl_4_b","aizu_online_judge::grl::grl_4_b","✅  AC  3ms",null,[[]]],[5,"judge_grl_4_b","","",null,[[]]],[0,"grl_5_a","aizu_online_judge::grl","Diameter of a Tree",null,null],[5,"grl_5_a","aizu_online_judge::grl::grl_5_a","✅  AC  13ms",null,[[]]],[0,"grl_5_b","aizu_online_judge::grl","Height of a Tree",null,null],[5,"grl_5_b","aizu_online_judge::grl::grl_5_b","✅  AC  7ms",null,[[]]],[0,"grl_5_c","aizu_online_judge::grl","Lowest Common Ancestor",null,null],[5,"grl_5_c","aizu_online_judge::grl::grl_5_c","✅  AC  72ms",null,[[]]],[0,"grl_5_d","aizu_online_judge::grl","Range Query on a Tree",null,null],[5,"grl_5_d","aizu_online_judge::grl::grl_5_d","✅  AC  69ms",null,[[]]],[0,"grl_5_e","aizu_online_judge::grl","Range Query on a Tree II",null,null],[5,"grl_5_e","aizu_online_judge::grl::grl_5_e","✅  AC  164ms",null,[[]]],[0,"grl_6_a","aizu_online_judge::grl","Maximum Flow",null,null],[5,"grl_6_a","aizu_online_judge::grl::grl_6_a","✅  AC  0ms",null,[[]]],[0,"grl_6_b","aizu_online_judge::grl","Minimum Cost Flow",null,null],[5,"grl_6_b","aizu_online_judge::grl::grl_6_b","✅  AC  0ms",null,[[]]],[0,"grl_7_a","aizu_online_judge::grl","Bipartite Matching",null,null],[5,"grl_7_a","aizu_online_judge::grl::grl_7_a","✅  AC  1ms",null,[[]]],[0,"itp1","aizu_online_judge","Introduction to Programming I",null,null],[0,"itp1_1_a","aizu_online_judge::itp1","Hello World",null,null],[5,"itp1_1_a","aizu_online_judge::itp1::itp1_1_a","✅  AC  0ms",null,[[]]]],"p":[],"a":{"verify":[2,4,6,8,10,12,14,16,18,20,22,24,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,64,66,68,70,72,74,76,78,80,82,85,87,89,91,93,95,97,99,102]}},\
"competitive":{"doc":"github","i":[[0,"algebra","competitive","algebra",null,null],[8,"Magma","competitive::algebra","binary operaion: $T \\\\circ T \\\\to T$",null,null],[16,"T","","type of operands: $T$",0,null],[10,"operate","","binary operaion: $\\\\circ$",0,[[]]],[11,"reverse_operate","","",0,[[]]],[8,"Associative","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …",null,null],[8,"SemiGroup","","associative binary operation",null,null],[8,"Unital","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e …",null,null],[10,"unit","","identity element: $e$",1,[[]]],[8,"Monoid","","associative binary operation and an identity element",null,null],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",2,[[]]],[8,"Invertible","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …",null,null],[10,"inverse","","$a$ where $a \\\\circ x = e$",3,[[]]],[11,"rinv_operate","","",3,[[]]],[8,"Group","","associative binary operation and an identity element and …",null,null],[8,"Commutative","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$",null,null],[8,"AbelianMonoid","","commutative monoid",null,null],[8,"AbelianGroup","","commutative group",null,null],[8,"Idempotent","","$\\\\forall a \\\\in T, a \\\\circ a = a$",null,null],[8,"IdempotentMonoid","","idempotent monoid",null,null],[3,"MaxOperation","","binary operation to select larger element",null,null],[8,"MinimumBounded","","",null,null],[10,"minimum","","",4,[[]]],[3,"MinOperation","","binary operation to select smaller element",null,null],[8,"MaximumBounded","","",null,null],[10,"maximum","","",5,[[]]],[3,"FirstOperation","","retain the first element",null,null],[3,"LastOperation","","retain the last element",null,null],[3,"AdditiveOperation","","$+$",null,null],[3,"MultiplicativeOperation","","$\\\\times$",null,null],[3,"LinearOperation","","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …",null,null],[3,"BitAndOperation","","&",null,null],[8,"BitAndIdentity","","",null,null],[10,"all_one","","",6,[[]]],[3,"BitOrOperation","","|",null,null],[8,"BitOrIdentity","","",null,null],[10,"all_zero","","",7,[[]]],[3,"BitXorOperation","","^",null,null],[8,"BitXorIdentity","","",null,null],[10,"xor_zero","","",8,[[]]],[3,"MonoidalOperation","","",null,null],[3,"GroupOperation","","",null,null],[3,"AssocoativeOperator","","",null,null],[3,"AbsorbedAssocoativeOperator","","",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"CountingOperation","","",null,null],[3,"ReverseOperation","","",null,null],[3,"Top2Operation","","",null,null],[3,"PermutationOperation","","",null,null],[0,"algorithm","competitive","algorithm",null,null],[5,"product","competitive::algorithm","choose <code>r</code> elements from <code>n</code> independently",null,[[]]],[5,"permutations","","choose distinct <code>r</code> elements from <code>n</code> in any order",null,[[]]],[5,"combinations","","choose distinct <code>r</code> elements from <code>n</code> in sorted order",null,[[]]],[5,"combinations_with_replacement","","choose <code>r</code> elements from <code>n</code> in sorted order",null,[[]]],[3,"CHTLine","","",null,null],[3,"ConvexHullTrick","","",null,null],[8,"MoSolver","","",null,null],[16,"Answer","","",9,null],[10,"insert","","",9,[[]]],[10,"remove","","",9,[[]]],[10,"answer","","",9,[[]]],[11,"mo_solve","","",9,[[]]],[5,"run_length_encoding","","return: [(start, length)]",null,[[],["vec",3]]],[5,"rho_path","","$P_0 =$ <code>init</code>, $P_{i+1} = f(P_i)$",null,[[]]],[8,"Bisect","","binary search helper",null,null],[10,"halve","","return between two elements",10,[[]]],[10,"section_end","","the end condition of binary search",10,[[]]],[5,"binary_search","","binary search for monotone segment",null,[[]]],[8,"SliceBisectExt","","binary search for slice",null,null],[10,"find_bisect","","Returns the first element that satisfies a predicate.",11,[[],["option",4]]],[10,"rfind_bisect","","Returns the last element that satisfies a predicate.",11,[[],["option",4]]],[10,"position_bisect","","Returns the first index that satisfies a predicate. if …",11,[[]]],[10,"rposition_bisect","","Returns the last index+1 that satisfies a predicate. if …",11,[[]]],[5,"count_monotone","","Count the number of elements that meet the condition in …",null,[[]]],[8,"Trisect","","ternary search helper",null,null],[10,"next_section","","Divide into 3 sections",12,[[]]],[10,"section_end","","the end condition of ternary search",12,[[]]],[5,"ternary_search","","like <code>(left..right).min_by_key(f)</code>",null,[[]]],[5,"slide_minimum","","",null,[[],["vec",3]]],[3,"SlideMinimum","","",null,null],[3,"SubsetTransform","","",null,null],[3,"SupersetTransform","","",null,null],[3,"DivisorTransform","","",null,null],[3,"MultipleTransform","","",null,null],[0,"combinatorial_optimization","competitive","",null,null],[3,"KnapsackPloblemSmallWeight","competitive::combinatorial_optimization","",null,null],[12,"dp","","",13,null],[3,"KnapsackPloblemSmallValue","","",null,null],[12,"dp","","",14,null],[3,"ZeroOneKnapsackProblemSmallItems","","",null,null],[3,"ZeroOneKnapsackPloblemBranchAndBound","","",null,null],[5,"largest_square","","",null,[[]]],[5,"largest_rectangle","","",null,[[]]],[5,"largest_rectangle_in_grid","","",null,[[]]],[5,"levenshtein_distance","","",null,[[]]],[3,"LongestIncreasingSubsequence","","",null,null],[12,"dp","","",15,null],[0,"data_structure","competitive","data structures",null,null],[8,"Automaton","competitive::data_structure","",null,null],[16,"Alphabet","","",16,null],[16,"State","","",16,null],[16,"Effect","","",16,null],[10,"initial","","",16,[[]]],[10,"next","","",16,[[],["option",4]]],[10,"accept","","",16,[[]]],[5,"automaton_dp","","",null,[[]]],[3,"IntersectionAutomaton","","",null,null],[3,"UnionAutomaton","","",null,null],[3,"ProductAutomaton","","",null,null],[3,"LessThanAutomaton","","",null,null],[3,"GreaterThanAutomaton","","",null,null],[3,"ContainAutomaton","","",null,null],[3,"ContainCounterAutomaton","","",null,null],[3,"AlwaysAcceptingAutomaton","","",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"BinaryIndexedTree2D","","",null,null],[8,"RankSelectDictionaries","","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1",null,null],[10,"bit_length","","",17,[[]]],[10,"access","","get k-th bit",17,[[]]],[11,"rank1","","the number of 1 in [0, k)",17,[[]]],[11,"rank0","","the number of 0 in [0, k)",17,[[]]],[11,"select1","","index of k-th 1",17,[[],["option",4]]],[11,"select0","","index of k-th 0",17,[[],["option",4]]],[3,"BitVector","","",null,null],[3,"BitSet","","",null,null],[3,"DisjointSparseTable","","",null,null],[3,"Static2DTree","","",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"SegmentTree","","",null,null],[3,"DequeAggregation","","",null,null],[3,"QueueAggregation","","",null,null],[3,"Trie","","",null,null],[3,"UnionFind","","",null,null],[3,"WeightedUnionFind","","",null,null],[3,"MergingUnionFind","","",null,null],[3,"WaveletMatrix","","",null,null],[0,"geometry","competitive","",null,null],[3,"Circle","competitive::geometry","",null,null],[5,"closest_pair","","",null,[[["vec",3],["point",6]]]],[3,"Line","","",null,null],[3,"LineSegment","","",null,null],[5,"convex_diameter","","",null,[[["vec",3],["point",6]]]],[5,"convex_hull","","",null,[[["vec",3],["point",6]],[["vec",3],["point",6]]]],[6,"Point","","",null,null],[17,"EPS","","",null,null],[3,"Real","","",null,null],[12,"0","","",18,null],[4,"CCW","","",null,null],[13,"OnlineFront","","a--b--c",19,null],[13,"Clockwise","","a--b-vc",19,null],[13,"OnSegment","","a--c--b",19,null],[13,"CounterClockwise","","a--b-^c",19,null],[13,"OnlineBack","","c--a--b",19,null],[11,"ccw","","",19,[[["point",6]]]],[0,"graph","competitive","graph structures and algorithms",null,null],[0,"adjacency_list_graph","competitive::graph","",null,null],[3,"Adjacency","competitive::graph::adjacency_list_graph","",null,null],[12,"id","","",20,null],[12,"to","","",20,null],[3,"AdjacencyListGraph","","",null,null],[12,"vsize","","",21,null],[12,"esize","","",21,null],[12,"graph","","",21,null],[3,"AdjacencyListGraphScanner","","",null,null],[0,"edge_list_graph","competitive::graph","",null,null],[3,"EdgeListGraph","competitive::graph::edge_list_graph","Graph represented by a list of edges.",null,null],[3,"EdgeListGraphScanner","","",null,null],[0,"grid_graph","competitive::graph","",null,null],[3,"GridGraph","competitive::graph::grid_graph","",null,null],[3,"Adjacency4","","",null,null],[3,"Adjacency8","","",null,null],[0,"sparse_graph","competitive::graph","",null,null],[3,"DirectedEdge","competitive::graph::sparse_graph","",null,null],[3,"UndirectedEdge","","",null,null],[3,"BidirectionalEdge","","",null,null],[3,"Adjacency","","",null,null],[12,"id","","",22,null],[12,"to","","",22,null],[3,"SparseGraph","","Static Sparse Graph represented as Compressed Sparse Row.",null,null],[12,"start","","",23,null],[12,"elist","","",23,null],[12,"edges","","",23,null],[8,"SparseGraphConstruction","","",null,null],[10,"construct_graph","","",24,[[["vec",3]],["sparsegraph",3]]],[6,"DirectedSparseGraph","","",null,null],[6,"UndirectedSparseGraph","","",null,null],[6,"BidirectionalSparseGraph","","",null,null],[3,"SparseGraphScanner","","",null,null],[6,"DirectedGraphScanner","","",null,null],[6,"UndirectedGraphScanner","","",null,null],[6,"BidirectionalGraphScanner","","",null,null],[3,"TreeGraphScanner","","",null,null],[3,"AdjacencyListGraph","competitive::graph","",null,null],[12,"vsize","","",21,null],[12,"esize","","",21,null],[12,"graph","","",21,null],[3,"AdjacencyListGraphScanner","","",null,null],[3,"EdgeListGraph","","Graph represented by a list of edges.",null,null],[3,"EdgeListGraphScanner","","",null,null],[3,"GridGraph","","",null,null],[3,"LowLink","","",null,null],[12,"low","","",25,null],[12,"ord","","",25,null],[12,"articulation","","",25,null],[12,"bridge","","",25,null],[3,"DinicBuilder","","",null,null],[3,"Dinic","","",null,null],[3,"PrimalDualBuilder","","",null,null],[3,"PrimalDual","","",null,null],[3,"Adjacency","","",null,null],[12,"id","","",22,null],[12,"to","","",22,null],[6,"BidirectionalGraphScanner","","",null,null],[6,"BidirectionalSparseGraph","","",null,null],[6,"DirectedGraphScanner","","",null,null],[6,"DirectedSparseGraph","","",null,null],[3,"SparseGraph","","Static Sparse Graph represented as Compressed Sparse Row.",null,null],[12,"start","","",23,null],[12,"elist","","",23,null],[12,"edges","","",23,null],[3,"TreeGraphScanner","","",null,null],[6,"UndirectedGraphScanner","","",null,null],[6,"UndirectedSparseGraph","","",null,null],[3,"StronglyConnectedComponent","","",null,null],[3,"TwoSatisfiability","","",null,null],[0,"math","competitive","mathematical datas",null,null],[3,"MemorizedFactorial","competitive::math","",null,null],[12,"fact","","",26,null],[12,"inv_fact","","",26,null],[3,"SmallModMemorizedFactorial","","",null,null],[5,"fast_fourier_transform","","",null,[[["vec",3],["complex",3]],[["vec",3],["complex",3]]]],[5,"convolve_i64","","",null,[[["vec",3]],["vec",3]]],[3,"FormalPowerSeries","","",null,null],[12,"data","","",27,null],[6,"FPS998244353","","",null,null],[6,"FPS","","",null,null],[8,"FormalPowerSeriesCoefficient","","",null,null],[8,"FormalPowerSeriesMultiplier","","",null,null],[16,"T","","",28,null],[10,"convolve","","",28,[[["formalpowerseries",3]],["formalpowerseries",3]]],[3,"DefaultFormalPowerSeriesMultiplier","","",null,null],[8,"FormalPowerSeriesCoefficientSqrt","","",null,null],[10,"sqrt_coefficient","","",29,[[],["option",4]]],[5,"gcd","","",null,[[]]],[5,"gcd_binary","","",null,[[]]],[5,"lcm","","",null,[[]]],[5,"extgcd","","",null,[[]]],[5,"extgcd_loop","","",null,[[]]],[5,"extgcd_binary","","",null,[[]]],[5,"modinv","","",null,[[]]],[5,"modinv_loop","","",null,[[]]],[5,"modinv_extgcd_binary","","0 < a < p, gcd(a, p) == 1, p is prime > 2",null,[[]]],[5,"lagrange_interpolation","","",null,[[["mintbase",8],["mint",3]],[["mintbase",8],["mint",3]]]],[5,"lagrange_interpolation_polynomial","","",null,[[],[["vec",3],["mint",3]]]],[3,"Matrix","","",null,null],[12,"shape","","",30,null],[12,"data","","",30,null],[3,"NumberTheoreticTransform","","",null,null],[8,"NTTModulus","","",null,null],[10,"primitive_root","","",31,[[]]],[6,"NTT998244353","","",null,null],[5,"convolve2","","max(a.len(), b.len()) * max(a) * max(b) < 3.64 * 10^18",null,[[["vec",3]],["vec",3]]],[5,"convolve3","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],[["vec",3],["mint",3]]]],[5,"convolve3_128","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],["vec",3]]],[5,"binary_exponentiation","","",null,[[["mulassign",8],["clone",8]],[["mulassign",8],["clone",8]]]],[3,"BabyStepGiantStep","","",null,null],[5,"floor_sum","","Sum of Floor of Linear",null,[[]]],[5,"linear_congruence","","return: (y,z)",null,[[],["option",4]]],[3,"Polynomial","","",null,null],[12,"data","","",32,null],[3,"PrimeTable","","",null,null],[5,"prime_factors","","",null,[[],["vec",3]]],[5,"divisors","","",null,[[],["vec",3]]],[5,"primes","","",null,[[],["vec",3]]],[5,"pow","","",null,[[]]],[5,"miller_rabin","","",null,[[]]],[5,"find_factor","","",null,[[]]],[5,"prime_factors_rho","","",null,[[],["vec",3]]],[5,"euler_phi","","",null,[[]]],[3,"EulerPhiTable","","",null,null],[5,"moebius","","g(d) = Sigma mu(d) * f(n/d)",null,[[],["hashmap",3]]],[5,"segmented_sieve_primes","","",null,[[],["vec",3]]],[0,"num","competitive","",null,null],[0,"mint_basic","competitive::num","",null,null],[3,"Modulo998244353","competitive::num::mint_basic","",null,null],[6,"MInt998244353","","",null,null],[3,"Modulo1000000007","","",null,null],[6,"MInt1000000007","","",null,null],[3,"Modulo1000000009","","",null,null],[6,"MInt1000000009","","",null,null],[3,"DynModuloU32","","",null,null],[6,"DynMIntU32","","",null,null],[3,"DynModuloU64","","",null,null],[6,"DynMIntU64","","",null,null],[3,"Modulo2","","",null,null],[6,"MInt2","","",null,null],[0,"montgomery","competitive::num","",null,null],[3,"Modulo998244353","competitive::num::montgomery","",null,null],[6,"MInt998244353","","",null,null],[8,"MontgomeryReduction32","","m is prime, n = 2^32",null,null],[10,"get_mod","","m",33,[[]]],[11,"r","","(-m)^{-1} mod n",33,[[]]],[10,"n1","","n^1 mod m",33,[[]]],[10,"n2","","n^2 mod m",33,[[]]],[10,"n3","","n^3 mod m",33,[[]]],[11,"reduce","","n^{-1}x = (x + (xr mod n)m) / n",33,[[]]],[3,"Complex","competitive::num","",null,null],[12,"re","","",34,null],[12,"im","","",34,null],[3,"MInt","","",null,null],[8,"MIntBase","","",null,null],[16,"Inner","","",35,null],[10,"get_mod","","",35,[[]]],[10,"mod_zero","","",35,[[]]],[10,"mod_one","","",35,[[]]],[10,"mod_add","","",35,[[]]],[10,"mod_sub","","",35,[[]]],[10,"mod_mul","","",35,[[]]],[10,"mod_div","","",35,[[]]],[10,"mod_neg","","",35,[[]]],[10,"mod_inv","","",35,[[]]],[11,"mod_pow","","",35,[[]]],[8,"MIntConvert","","",null,null],[10,"from","","",36,[[]]],[10,"into","","",36,[[]]],[10,"mod_into","","",36,[[]]],[3,"QuadDouble","","ref: https://na-inet.jp/na/qd_ja.pdf",null,null],[12,"0","","",37,null],[8,"Zero","","",null,null],[10,"zero","","",38,[[]]],[11,"is_zero","","",38,[[]]],[8,"One","","",null,null],[10,"one","","",39,[[]]],[11,"is_one","","",39,[[]]],[0,"string","competitive","string algorithems",null,null],[3,"KnuthMorrisPratt","competitive::string","",null,null],[3,"MultipleRollingHash","","",null,null],[3,"RollingHash","","",null,null],[3,"SuffixArray","","",null,null],[3,"Zarray","","",null,null],[0,"tools","competitive","",null,null],[0,"marker","competitive::tools","",null,null],[3,"Usize1","competitive::tools::marker","",null,null],[3,"Chars","","",null,null],[3,"CharsWithBase","","",null,null],[12,"0","","",40,null],[3,"Collect","","",null,null],[3,"Counter","competitive::tools","",null,null],[3,"SimuratedAnnealing","","",null,null],[12,"iter_count","","",41,null],[12,"now","","",41,null],[12,"time","","",41,null],[12,"temperture","","",41,null],[12,"log_table","","",41,null],[12,"rand","","",41,null],[5,"echo","","",null,[[],["result",6]]],[3,"Xorshift","","",null,null],[5,"read_stdin_all","","",null,[[],["string",3]]],[5,"read_all","","",null,[[],["string",3]]],[5,"read_all_unchecked","","",null,[[],["string",3]]],[8,"IterScan","","",null,null],[16,"Output","","",42,null],[10,"scan","","",42,[[],["option",4]]],[8,"MarkedIterScan","","",null,null],[16,"Output","","",43,null],[10,"mscan","","",43,[[],["option",4]]],[3,"Scanner","","",null,null],[3,"TotalOrd","","implement Ord by PartialOrd",null,null],[12,"0","","",44,null],[0,"prelude","competitive","",null,null],[8,"Read","competitive::prelude","The <code>Read</code> trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified …",45,[[],[["error",3],["result",4]]]],[11,"read_vectored","","Like <code>read</code>, except that it reads into a slice of buffers.",45,[[],[["error",3],["result",4]]]],[11,"is_read_vectored","","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …",45,[[]]],[11,"initializer","","Determines if this <code>Read</code>er can work with buffers of …",45,[[],["initializer",3]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them …",45,[[["vec",3]],[["error",3],["result",4]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them …",45,[[["string",3]],[["error",3],["result",4]]]],[11,"read_exact","","Read the exact number of bytes required to fill <code>buf</code>.",45,[[],[["result",4],["error",3]]]],[11,"by_ref","","Creates a \\\"by reference\\\" adaptor for this instance of <code>Read</code>…",45,[[]]],[11,"bytes","","Transforms this <code>Read</code> instance to an [<code>Iterator</code>] over its …",45,[[],["bytes",3]]],[11,"chain","","Creates an adaptor which will chain this stream with …",45,[[],["chain",3]]],[11,"take","","Creates an adaptor which will read at most <code>limit</code> bytes …",45,[[],["take",3]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this writer, returning how many bytes …",46,[[],[["error",3],["result",4]]]],[11,"write_vectored","","Like <code>write</code>, except that it writes from a slice of buffers.",46,[[],[["error",3],["result",4]]]],[11,"is_write_vectored","","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …",46,[[]]],[10,"flush","","Flush this output stream, ensuring that all …",46,[[],[["result",4],["error",3]]]],[11,"write_all","","Attempts to write an entire buffer into this writer.",46,[[],[["result",4],["error",3]]]],[11,"write_all_vectored","","Attempts to write multiple buffers into this writer.",46,[[],[["result",4],["error",3]]]],[11,"write_fmt","","Writes a formatted string into this writer, returning any …",46,[[["arguments",3]],[["result",4],["error",3]]]],[11,"by_ref","","Creates a \\\"by reference\\\" adaptor for this instance of …",46,[[]]],[8,"One","","",null,null],[10,"one","","",39,[[]]],[11,"is_one","competitive::num","",39,[[]]],[8,"Zero","competitive::prelude","",null,null],[10,"zero","","",38,[[]]],[11,"is_zero","competitive::num","",38,[[]]],[5,"echo","competitive::prelude","",null,[[],["result",6]]],[3,"Chars","","",null,null],[3,"Usize1","","",null,null],[5,"read_all","","",null,[[],["string",3]]],[5,"read_all_unchecked","","",null,[[],["string",3]]],[3,"Scanner","","",null,null],[0,"tree","competitive","tree algorithems",null,null],[11,"tree_depth","competitive::graph::sparse_graph","",23,[[],["vec",3]]],[11,"tree_depth","competitive::tree::depth","",47,[[],["vec",3]]],[11,"weighted_tree_depth","competitive::graph::sparse_graph","",23,[[["fn",8],["monoid",8]],["vec",3]]],[11,"weighted_tree_depth","competitive::tree::depth","",47,[[["fn",8],["monoid",8]],["vec",3]]],[11,"tree_size","competitive::graph::sparse_graph","",23,[[],["vec",3]]],[11,"tree_size","competitive::tree::depth","",47,[[],["vec",3]]],[0,"impl_lcam","competitive::tree","",null,null],[3,"EulerTourForEdge","","",null,null],[12,"eidx","","",48,null],[12,"par","","",48,null],[3,"EulerTourForVertex","","",null,null],[12,"vidx","","",49,null],[3,"EulerTourForRichVertex","","",null,null],[3,"LowestCommonAncestor","","",null,null],[3,"LCAMonoid","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",50,null],[12,"vidx","","",50,null],[3,"ReRooting","","dynamic programming on all-rooted trees",null,null],[12,"dp","","dp[v]: result of v-rooted tree",51,null],[12,"ep","","ep[e]: result of e-subtree, if e >= n then …",51,null],[3,"TreeRec","","",null,null],[12,"n","","",52,null],[14,"monoid_fold","competitive","",null,null],[14,"impl_bitand_identity","","",null,null],[14,"impl_bitor_identity","","",null,null],[14,"impl_bitxor_identity","","",null,null],[14,"define_basic_mintbase","","",null,null],[14,"define_basic_mint32","","",null,null],[14,"comprehension","","",null,null],[14,"min","","",null,null],[14,"chmin","","",null,null],[14,"max","","",null,null],[14,"chmax","","",null,null],[14,"scan_value","","",null,null],[14,"scan","","",null,null],[11,"from","competitive::algebra","",53,[[]]],[11,"into","","",53,[[]]],[11,"to_owned","","",53,[[]]],[11,"clone_into","","",53,[[]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"to_owned","","",57,[[]]],[11,"clone_into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","competitive::algorithm","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","competitive::combinatorial_optimization","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","competitive::data_structure","",81,[[]]],[11,"into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"to_owned","","",92,[[]]],[11,"clone_into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"to_owned","","",93,[[]]],[11,"clone_into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"to_owned","","",98,[[]]],[11,"clone_into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"to_owned","","",101,[[]]],[11,"clone_into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","competitive::geometry","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","competitive::graph::adjacency_list_graph","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","competitive::graph::edge_list_graph","",108,[[]]],[11,"into","","",108,[[]]],[11,"to_owned","","",108,[[]]],[11,"clone_into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","competitive::graph::grid_graph","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"into_iter","","",111,[[]]],[11,"to_owned","","",111,[[]]],[11,"clone_into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"into_iter","","",112,[[]]],[11,"to_owned","","",112,[[]]],[11,"clone_into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","competitive::graph","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","competitive::graph::sparse_graph","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"to_owned","","",118,[[]]],[11,"clone_into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from","competitive::graph","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","competitive::math","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"from","","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",126,[[]]],[11,"into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"to_owned","","",129,[[]]],[11,"clone_into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"from","competitive::num","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","competitive::num::mint_basic","",130,[[]]],[11,"into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"from","competitive::num::montgomery","",136,[[]]],[11,"into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"from","competitive::num","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"to_string","","",137,[[],["string",3]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"to_string","","",37,[[],["string",3]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","competitive::string","",138,[[]]],[11,"into","","",138,[[]]],[11,"to_owned","","",138,[[]]],[11,"clone_into","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"from","","",139,[[]]],[11,"into","","",139,[[]]],[11,"to_owned","","",139,[[]]],[11,"clone_into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"to_owned","","",140,[[]]],[11,"clone_into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"to_owned","","",141,[[]]],[11,"clone_into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"to_owned","","",142,[[]]],[11,"clone_into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"from","competitive::tools","",143,[[]]],[11,"into","","",143,[[]]],[11,"to_owned","","",143,[[]]],[11,"clone_into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"to_owned","","",144,[[]]],[11,"clone_into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"from","competitive::tools::marker","",145,[[]]],[11,"into","","",145,[[]]],[11,"to_owned","","",145,[[]]],[11,"clone_into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"from","","",146,[[]]],[11,"into","","",146,[[]]],[11,"to_owned","","",146,[[]]],[11,"clone_into","","",146,[[]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",147,[[]]],[11,"into","","",147,[[]]],[11,"to_owned","","",147,[[]]],[11,"clone_into","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"from","competitive::tools","",148,[[]]],[11,"into","","",148,[[]]],[11,"to_owned","","",148,[[]]],[11,"clone_into","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","competitive::tree","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"to_owned","","",149,[[]]],[11,"clone_into","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"to_owned","","",150,[[]]],[11,"clone_into","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"to_owned","","",151,[[]]],[11,"clone_into","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"to_owned","","",52,[[]]],[11,"clone_into","","",52,[[]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"operate","competitive::algebra","",53,[[]]],[11,"operate","","",54,[[]]],[11,"operate","","",55,[[]]],[11,"operate","","",56,[[]]],[11,"operate","","",57,[[]]],[11,"operate","","",58,[[]]],[11,"operate","","",59,[[]]],[11,"operate","","",60,[[]]],[11,"operate","","",61,[[]]],[11,"operate","","",62,[[]]],[11,"operate","","",63,[[]]],[11,"operate","","",64,[[]]],[11,"operate","","",65,[[]]],[11,"operate","","",66,[[]]],[11,"operate","","",67,[[]]],[11,"operate","","",68,[[]]],[11,"operate","","",69,[[]]],[11,"operate","","",70,[[]]],[11,"operate","","",71,[[]]],[11,"operate","competitive::tree","",151,[[]]],[11,"unit","competitive::algebra","",53,[[]]],[11,"unit","","",54,[[]]],[11,"unit","","",55,[[]]],[11,"unit","","",56,[[]]],[11,"unit","","",57,[[]]],[11,"unit","","",58,[[]]],[11,"unit","","",59,[[]]],[11,"unit","","",60,[[]]],[11,"unit","","",61,[[]]],[11,"unit","","",62,[[]]],[11,"unit","","",63,[[]]],[11,"unit","","",64,[[]]],[11,"unit","","",66,[[]]],[11,"unit","","",67,[[]]],[11,"unit","","",68,[[]]],[11,"unit","","",69,[[]]],[11,"unit","","",70,[[]]],[11,"unit","","",71,[[]]],[11,"inverse","","",57,[[]]],[11,"rinv_operate","","",57,[[]]],[11,"inverse","","",58,[[]]],[11,"rinv_operate","","",58,[[]]],[11,"inverse","","",62,[[]]],[11,"inverse","","",64,[[]]],[11,"inverse","","",67,[[]]],[11,"inverse","","",69,[[]]],[11,"inverse","","",71,[[]]],[11,"initial","competitive::data_structure","",81,[[]]],[11,"next","","",81,[[],["option",4]]],[11,"accept","","",81,[[]]],[11,"initial","","",82,[[]]],[11,"next","","",82,[[],["option",4]]],[11,"accept","","",82,[[]]],[11,"initial","","",83,[[]]],[11,"next","","",83,[[],["option",4]]],[11,"accept","","",83,[[]]],[11,"initial","","",84,[[]]],[11,"next","","",84,[[],["option",4]]],[11,"accept","","",84,[[]]],[11,"initial","","",85,[[]]],[11,"next","","",85,[[],["option",4]]],[11,"accept","","",85,[[]]],[11,"initial","","",86,[[]]],[11,"next","","",86,[[],["option",4]]],[11,"accept","","",86,[[]]],[11,"initial","","",87,[[]]],[11,"next","","",87,[[],["option",4]]],[11,"accept","","",87,[[]]],[11,"initial","","",88,[[]]],[11,"next","","",88,[[],["option",4]]],[11,"accept","","",88,[[]]],[11,"bit_length","","",91,[[]]],[11,"access","","",91,[[]]],[11,"rank1","","",91,[[]]],[11,"select1","","",91,[[],["option",4]]],[11,"select0","","",91,[[],["option",4]]],[11,"convolve","competitive::math","",125,[[["formalpowerseries",3]],["formalpowerseries",3]]],[11,"sqrt_coefficient","competitive::num","",137,[[],["option",4]]],[11,"primitive_root","competitive::num::mint_basic","",130,[[]]],[11,"get_mod","competitive::num::montgomery","",136,[[]]],[11,"r","","",136,[[]]],[11,"n1","","",136,[[]]],[11,"n2","","",136,[[]]],[11,"n3","","",136,[[]]],[11,"zero","competitive::math","",27,[[]]],[11,"zero","","",32,[[]]],[11,"zero","competitive::num","",137,[[]]],[11,"one","competitive::math","",27,[[]]],[11,"one","","",32,[[]]],[11,"one","competitive::num","",137,[[]]],[11,"construct_graph","competitive::graph::sparse_graph","",117,[[["vec",3]],["sparsegraph",3]]],[11,"construct_graph","","",118,[[["vec",3]],["sparsegraph",3]]],[11,"construct_graph","","",119,[[["vec",3]],["sparsegraph",3]]],[11,"get_mod","competitive::num::mint_basic","",130,[[]]],[11,"mod_zero","","",130,[[]]],[11,"mod_one","","",130,[[]]],[11,"mod_add","","",130,[[]]],[11,"mod_sub","","",130,[[]]],[11,"mod_mul","","",130,[[]]],[11,"mod_div","","",130,[[]]],[11,"mod_neg","","",130,[[]]],[11,"mod_inv","","",130,[[]]],[11,"get_mod","","",131,[[]]],[11,"mod_zero","","",131,[[]]],[11,"mod_one","","",131,[[]]],[11,"mod_add","","",131,[[]]],[11,"mod_sub","","",131,[[]]],[11,"mod_mul","","",131,[[]]],[11,"mod_div","","",131,[[]]],[11,"mod_neg","","",131,[[]]],[11,"mod_inv","","",131,[[]]],[11,"get_mod","","",132,[[]]],[11,"mod_zero","","",132,[[]]],[11,"mod_one","","",132,[[]]],[11,"mod_add","","",132,[[]]],[11,"mod_sub","","",132,[[]]],[11,"mod_mul","","",132,[[]]],[11,"mod_div","","",132,[[]]],[11,"mod_neg","","",132,[[]]],[11,"mod_inv","","",132,[[]]],[11,"get_mod","","",133,[[]]],[11,"mod_zero","","",133,[[]]],[11,"mod_one","","",133,[[]]],[11,"mod_add","","",133,[[]]],[11,"mod_sub","","",133,[[]]],[11,"mod_mul","","",133,[[]]],[11,"mod_div","","",133,[[]]],[11,"mod_neg","","",133,[[]]],[11,"mod_inv","","",133,[[]]],[11,"get_mod","","",134,[[]]],[11,"mod_zero","","",134,[[]]],[11,"mod_one","","",134,[[]]],[11,"mod_add","","",134,[[]]],[11,"mod_sub","","",134,[[]]],[11,"mod_mul","","",134,[[]]],[11,"mod_div","","",134,[[]]],[11,"mod_neg","","",134,[[]]],[11,"mod_inv","","",134,[[]]],[11,"get_mod","","",135,[[]]],[11,"mod_zero","","",135,[[]]],[11,"mod_one","","",135,[[]]],[11,"mod_add","","",135,[[]]],[11,"mod_sub","","",135,[[]]],[11,"mod_mul","","",135,[[]]],[11,"mod_div","","",135,[[]]],[11,"mod_neg","","",135,[[]]],[11,"mod_inv","","",135,[[]]],[11,"mod_pow","","",135,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"mod_into","","",130,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"mod_into","","",130,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"mod_into","","",130,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"mod_into","","",130,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"mod_into","","",130,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"mod_into","","",130,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"mod_into","","",130,[[]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"mod_into","","",130,[[]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"mod_into","","",131,[[]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"mod_into","","",131,[[]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"mod_into","","",131,[[]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"mod_into","","",131,[[]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"mod_into","","",131,[[]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"mod_into","","",131,[[]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"mod_into","","",131,[[]]],[11,"from","","",131,[[]]],[11,"into","","",131,[[]]],[11,"mod_into","","",131,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"mod_into","","",132,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"mod_into","","",132,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"mod_into","","",132,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"mod_into","","",132,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"mod_into","","",132,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"mod_into","","",132,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"mod_into","","",132,[[]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"mod_into","","",132,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"mod_into","","",133,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"mod_into","","",133,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"mod_into","","",133,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"mod_into","","",133,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"mod_into","","",133,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"mod_into","","",133,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"mod_into","","",133,[[]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"mod_into","","",133,[[]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"mod_into","","",134,[[]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"mod_into","","",134,[[]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"mod_into","","",134,[[]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"mod_into","","",134,[[]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"mod_into","","",134,[[]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"mod_into","","",134,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"mod_into","","",135,[[]]],[11,"from","competitive::num::montgomery","",136,[[]]],[11,"into","","",136,[[]]],[11,"mod_into","","",136,[[]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"mod_into","","",136,[[]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"mod_into","","",136,[[]]],[11,"scan","competitive::num","",137,[[],["option",4]]],[11,"scan","competitive::tools::marker","",145,[[],["option",4]]],[11,"scan","","",146,[[],["option",4]]],[11,"mscan","competitive::graph::adjacency_list_graph","",107,[[],["option",4]]],[11,"mscan","competitive::graph::edge_list_graph","",109,[[],["option",4]]],[11,"mscan","competitive::graph::sparse_graph","",120,[[],["option",4]]],[11,"mscan","","",121,[[],["option",4]]],[11,"mscan","competitive::tools::marker","",40,[[],["option",4]]],[11,"mscan","","",147,[[],["option",4]]],[11,"from","competitive::math","",27,[[]]],[11,"from","","",27,[[["vec",3]]]],[11,"from","competitive::num","",137,[[]]],[11,"from","","",137,[[]]],[11,"from","","",137,[[]]],[11,"from","","",137,[[]]],[11,"from","","",137,[[]]],[11,"from","","",137,[[]]],[11,"from","","",137,[[]]],[11,"from","","",137,[[]]],[11,"from","","",137,[[]]],[11,"from","","",137,[[]]],[11,"from","","",137,[[]]],[11,"from","","",137,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"extend","competitive::graph","",113,[[["intoiterator",8]]]],[11,"extend","","",115,[[["intoiterator",8]]]],[11,"extend","competitive::tools","",143,[[["intoiterator",8]]]],[11,"next","competitive::graph::grid_graph","",111,[[],["option",4]]],[11,"next","","",112,[[],["option",4]]],[11,"clone","competitive::algebra","",53,[[],["maxoperation",3]]],[11,"clone","","",54,[[],["minoperation",3]]],[11,"clone","","",55,[[],["firstoperation",3]]],[11,"clone","","",56,[[],["lastoperation",3]]],[11,"clone","","",57,[[],["additiveoperation",3]]],[11,"clone","","",58,[[],["multiplicativeoperation",3]]],[11,"clone","","",59,[[],["linearoperation",3]]],[11,"clone","","",60,[[],["bitandoperation",3]]],[11,"clone","","",61,[[],["bitoroperation",3]]],[11,"clone","","",62,[[],["bitxoroperation",3]]],[11,"clone","","",63,[[],["monoidaloperation",3]]],[11,"clone","","",64,[[],["groupoperation",3]]],[11,"clone","","",65,[[],["assocoativeoperator",3]]],[11,"clone","","",66,[[],["absorbedassocoativeoperator",3]]],[11,"clone","","",67,[[],["cartesianoperation",3]]],[11,"clone","","",68,[[],["countingoperation",3]]],[11,"clone","","",69,[[],["reverseoperation",3]]],[11,"clone","","",70,[[],["top2operation",3]]],[11,"clone","","",71,[[],["permutationoperation",3]]],[11,"clone","competitive::algorithm","",72,[[],["chtline",3]]],[11,"clone","","",73,[[],["convexhulltrick",3]]],[11,"clone","competitive::combinatorial_optimization","",79,[[],["zerooneknapsackproblemsmallitems",3]]],[11,"clone","","",15,[[],["longestincreasingsubsequence",3]]],[11,"clone","competitive::data_structure","",88,[[],["alwaysacceptingautomaton",3]]],[11,"clone","","",89,[[],["binaryindexedtree",3]]],[11,"clone","","",90,[[],["binaryindexedtree2d",3]]],[11,"clone","","",92,[[],["bitset",3]]],[11,"clone","","",93,[[],["disjointsparsetable",3]]],[11,"clone","","",95,[[],["lazysegmenttree",3]]],[11,"clone","","",96,[[],["segmenttree",3]]],[11,"clone","","",97,[[],["queueaggregation",3]]],[11,"clone","","",98,[[],["dequeaggregation",3]]],[11,"clone","","",100,[[],["unionfind",3]]],[11,"clone","","",101,[[],["weightedunionfind",3]]],[11,"clone","competitive::geometry","",104,[[],["circle",3]]],[11,"clone","","",105,[[],["line",3]]],[11,"clone","","",106,[[],["linesegment",3]]],[11,"clone","","",18,[[],["real",3]]],[11,"clone","","",19,[[],["ccw",4]]],[11,"clone","competitive::graph::adjacency_list_graph","",20,[[],["adjacency",3]]],[11,"clone","","",21,[[],["adjacencylistgraph",3]]],[11,"clone","competitive::graph::edge_list_graph","",108,[[],["edgelistgraph",3]]],[11,"clone","competitive::graph::grid_graph","",110,[[],["gridgraph",3]]],[11,"clone","","",111,[[],["adjacency4",3]]],[11,"clone","","",112,[[],["adjacency8",3]]],[11,"clone","competitive::graph","",113,[[],["dinicbuilder",3]]],[11,"clone","","",114,[[],["dinic",3]]],[11,"clone","","",115,[[],["primaldualbuilder",3]]],[11,"clone","competitive::graph::sparse_graph","",117,[[],["directededge",3]]],[11,"clone","","",118,[[],["undirectededge",3]]],[11,"clone","","",119,[[],["bidirectionaledge",3]]],[11,"clone","","",22,[[],["adjacency",3]]],[11,"clone","","",23,[[],["sparsegraph",3]]],[11,"clone","competitive::graph","",122,[[],["stronglyconnectedcomponent",3]]],[11,"clone","","",123,[[],["twosatisfiability",3]]],[11,"clone","competitive::math","",26,[[],["memorizedfactorial",3]]],[11,"clone","","",124,[[],["smallmodmemorizedfactorial",3]]],[11,"clone","","",27,[[]]],[11,"clone","","",30,[[],["matrix",3]]],[11,"clone","","",127,[[],["babystepgiantstep",3]]],[11,"clone","","",32,[[],["polynomial",3]]],[11,"clone","","",128,[[],["primetable",3]]],[11,"clone","","",129,[[],["eulerphitable",3]]],[11,"clone","competitive::num","",34,[[],["complex",3]]],[11,"clone","","",137,[[]]],[11,"clone","","",37,[[],["quaddouble",3]]],[11,"clone","competitive::string","",138,[[],["knuthmorrispratt",3]]],[11,"clone","","",139,[[],["rollinghash",3]]],[11,"clone","","",140,[[],["multiplerollinghash",3]]],[11,"clone","","",141,[[],["suffixarray",3]]],[11,"clone","","",142,[[],["zarray",3]]],[11,"clone","competitive::tools","",143,[[],["counter",3]]],[11,"clone","","",144,[[],["xorshift",3]]],[11,"clone","","",148,[[],["scanner",3]]],[11,"clone","competitive::tools::marker","",145,[[],["usize1",3]]],[11,"clone","","",146,[[],["chars",3]]],[11,"clone","","",40,[[],["charswithbase",3]]],[11,"clone","","",147,[[],["collect",3]]],[11,"clone","competitive::tree","",48,[[],["eulertourforedge",3]]],[11,"clone","","",49,[[],["eulertourforvertex",3]]],[11,"clone","","",149,[[],["eulertourforrichvertex",3]]],[11,"clone","","",150,[[],["lowestcommonancestor",3]]],[11,"clone","","",151,[[],["lcamonoid",3]]],[11,"clone","","",51,[[],["rerooting",3]]],[11,"clone","","",52,[[],["treerec",3]]],[11,"default","competitive::algebra","",53,[[],["maxoperation",3]]],[11,"default","","",54,[[],["minoperation",3]]],[11,"default","","",55,[[],["firstoperation",3]]],[11,"default","","",56,[[],["lastoperation",3]]],[11,"default","","",57,[[],["additiveoperation",3]]],[11,"default","","",58,[[],["multiplicativeoperation",3]]],[11,"default","","",59,[[],["linearoperation",3]]],[11,"default","","",60,[[],["bitandoperation",3]]],[11,"default","","",61,[[],["bitoroperation",3]]],[11,"default","","",62,[[],["bitxoroperation",3]]],[11,"default","","",70,[[],["top2operation",3]]],[11,"default","","",71,[[],["permutationoperation",3]]],[11,"default","competitive::algorithm","",72,[[],["chtline",3]]],[11,"default","","",73,[[],["convexhulltrick",3]]],[11,"default","competitive::combinatorial_optimization","",79,[[]]],[11,"default","","",15,[[]]],[11,"default","competitive::data_structure","",88,[[]]],[11,"default","","",92,[[],["bitset",3]]],[11,"default","competitive::graph::adjacency_list_graph","",20,[[],["adjacency",3]]],[11,"default","","",21,[[],["adjacencylistgraph",3]]],[11,"default","competitive::graph::sparse_graph","",117,[[],["directededge",3]]],[11,"default","","",118,[[],["undirectededge",3]]],[11,"default","","",119,[[],["bidirectionaledge",3]]],[11,"default","","",22,[[],["adjacency",3]]],[11,"default","competitive::math","",124,[[]]],[11,"default","","",27,[[],["formalpowerseries",3]]],[11,"default","","",32,[[],["polynomial",3]]],[11,"default","competitive::num","",34,[[],["complex",3]]],[11,"default","","",137,[[]]],[11,"default","","",37,[[],["quaddouble",3]]],[11,"default","competitive::tools","",143,[[]]],[11,"default","","",41,[[]]],[11,"default","","",144,[[]]],[11,"cmp","competitive::algebra","",53,[[["maxoperation",3]],["ordering",4]]],[11,"cmp","","",54,[[["minoperation",3]],["ordering",4]]],[11,"cmp","","",55,[[["firstoperation",3]],["ordering",4]]],[11,"cmp","","",56,[[["lastoperation",3]],["ordering",4]]],[11,"cmp","","",57,[[["additiveoperation",3]],["ordering",4]]],[11,"cmp","","",58,[[["multiplicativeoperation",3]],["ordering",4]]],[11,"cmp","","",59,[[["linearoperation",3]],["ordering",4]]],[11,"cmp","","",60,[[["bitandoperation",3]],["ordering",4]]],[11,"cmp","","",61,[[["bitoroperation",3]],["ordering",4]]],[11,"cmp","","",62,[[["bitxoroperation",3]],["ordering",4]]],[11,"cmp","","",70,[[["top2operation",3]],["ordering",4]]],[11,"cmp","","",71,[[["permutationoperation",3]],["ordering",4]]],[11,"cmp","competitive::data_structure","",92,[[["bitset",3]],["ordering",4]]],[11,"cmp","competitive::geometry","",19,[[["ccw",4]],["ordering",4]]],[11,"cmp","competitive::graph::adjacency_list_graph","",20,[[["adjacency",3]],["ordering",4]]],[11,"cmp","competitive::graph::grid_graph","",110,[[["gridgraph",3]],["ordering",4]]],[11,"cmp","competitive::graph::sparse_graph","",117,[[["directededge",3]],["ordering",4]]],[11,"cmp","","",118,[[["undirectededge",3]],["ordering",4]]],[11,"cmp","","",119,[[["bidirectionaledge",3]],["ordering",4]]],[11,"cmp","","",22,[[["adjacency",3]],["ordering",4]]],[11,"cmp","competitive::tools","",44,[[["totalord",3]],["ordering",4]]],[11,"eq","competitive::algebra","",53,[[["maxoperation",3]]]],[11,"ne","","",53,[[["maxoperation",3]]]],[11,"eq","","",54,[[["minoperation",3]]]],[11,"ne","","",54,[[["minoperation",3]]]],[11,"eq","","",55,[[["firstoperation",3]]]],[11,"ne","","",55,[[["firstoperation",3]]]],[11,"eq","","",56,[[["lastoperation",3]]]],[11,"ne","","",56,[[["lastoperation",3]]]],[11,"eq","","",57,[[["additiveoperation",3]]]],[11,"ne","","",57,[[["additiveoperation",3]]]],[11,"eq","","",58,[[["multiplicativeoperation",3]]]],[11,"ne","","",58,[[["multiplicativeoperation",3]]]],[11,"eq","","",59,[[["linearoperation",3]]]],[11,"ne","","",59,[[["linearoperation",3]]]],[11,"eq","","",60,[[["bitandoperation",3]]]],[11,"ne","","",60,[[["bitandoperation",3]]]],[11,"eq","","",61,[[["bitoroperation",3]]]],[11,"ne","","",61,[[["bitoroperation",3]]]],[11,"eq","","",62,[[["bitxoroperation",3]]]],[11,"ne","","",62,[[["bitxoroperation",3]]]],[11,"eq","","",70,[[["top2operation",3]]]],[11,"ne","","",70,[[["top2operation",3]]]],[11,"eq","","",71,[[["permutationoperation",3]]]],[11,"ne","","",71,[[["permutationoperation",3]]]],[11,"eq","competitive::algorithm","",72,[[["chtline",3]]]],[11,"ne","","",72,[[["chtline",3]]]],[11,"eq","competitive::data_structure","",92,[[["bitset",3]]]],[11,"ne","","",92,[[["bitset",3]]]],[11,"eq","competitive::geometry","",104,[[["circle",3]]]],[11,"ne","","",104,[[["circle",3]]]],[11,"eq","","",105,[[["line",3]]]],[11,"ne","","",105,[[["line",3]]]],[11,"eq","","",106,[[["linesegment",3]]]],[11,"ne","","",106,[[["linesegment",3]]]],[11,"eq","","",18,[[["real",3]]]],[11,"eq","","",19,[[["ccw",4]]]],[11,"eq","competitive::graph::adjacency_list_graph","",20,[[["adjacency",3]]]],[11,"ne","","",20,[[["adjacency",3]]]],[11,"eq","competitive::graph::grid_graph","",110,[[["gridgraph",3]]]],[11,"ne","","",110,[[["gridgraph",3]]]],[11,"eq","competitive::graph::sparse_graph","",117,[[["directededge",3]]]],[11,"eq","","",118,[[["undirectededge",3]]]],[11,"eq","","",119,[[["bidirectionaledge",3]]]],[11,"eq","","",22,[[["adjacency",3]]]],[11,"ne","","",22,[[["adjacency",3]]]],[11,"eq","competitive::math","",27,[[]]],[11,"eq","","",30,[[["matrix",3]]]],[11,"ne","","",30,[[["matrix",3]]]],[11,"eq","","",32,[[["polynomial",3]]]],[11,"ne","","",32,[[["polynomial",3]]]],[11,"eq","competitive::num","",34,[[["complex",3]]]],[11,"ne","","",34,[[["complex",3]]]],[11,"eq","","",137,[[]]],[11,"eq","","",37,[[["quaddouble",3]]]],[11,"ne","","",37,[[["quaddouble",3]]]],[11,"eq","competitive::tools","",44,[[["totalord",3]]]],[11,"ne","","",44,[[["totalord",3]]]],[11,"partial_cmp","competitive::algebra","",53,[[["maxoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",53,[[["maxoperation",3]]]],[11,"le","","",53,[[["maxoperation",3]]]],[11,"gt","","",53,[[["maxoperation",3]]]],[11,"ge","","",53,[[["maxoperation",3]]]],[11,"partial_cmp","","",54,[[["minoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",54,[[["minoperation",3]]]],[11,"le","","",54,[[["minoperation",3]]]],[11,"gt","","",54,[[["minoperation",3]]]],[11,"ge","","",54,[[["minoperation",3]]]],[11,"partial_cmp","","",55,[[["firstoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",55,[[["firstoperation",3]]]],[11,"le","","",55,[[["firstoperation",3]]]],[11,"gt","","",55,[[["firstoperation",3]]]],[11,"ge","","",55,[[["firstoperation",3]]]],[11,"partial_cmp","","",56,[[["lastoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",56,[[["lastoperation",3]]]],[11,"le","","",56,[[["lastoperation",3]]]],[11,"gt","","",56,[[["lastoperation",3]]]],[11,"ge","","",56,[[["lastoperation",3]]]],[11,"partial_cmp","","",57,[[["additiveoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",57,[[["additiveoperation",3]]]],[11,"le","","",57,[[["additiveoperation",3]]]],[11,"gt","","",57,[[["additiveoperation",3]]]],[11,"ge","","",57,[[["additiveoperation",3]]]],[11,"partial_cmp","","",58,[[["multiplicativeoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",58,[[["multiplicativeoperation",3]]]],[11,"le","","",58,[[["multiplicativeoperation",3]]]],[11,"gt","","",58,[[["multiplicativeoperation",3]]]],[11,"ge","","",58,[[["multiplicativeoperation",3]]]],[11,"partial_cmp","","",59,[[["linearoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",59,[[["linearoperation",3]]]],[11,"le","","",59,[[["linearoperation",3]]]],[11,"gt","","",59,[[["linearoperation",3]]]],[11,"ge","","",59,[[["linearoperation",3]]]],[11,"partial_cmp","","",60,[[["bitandoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",60,[[["bitandoperation",3]]]],[11,"le","","",60,[[["bitandoperation",3]]]],[11,"gt","","",60,[[["bitandoperation",3]]]],[11,"ge","","",60,[[["bitandoperation",3]]]],[11,"partial_cmp","","",61,[[["bitoroperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",61,[[["bitoroperation",3]]]],[11,"le","","",61,[[["bitoroperation",3]]]],[11,"gt","","",61,[[["bitoroperation",3]]]],[11,"ge","","",61,[[["bitoroperation",3]]]],[11,"partial_cmp","","",62,[[["bitxoroperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",62,[[["bitxoroperation",3]]]],[11,"le","","",62,[[["bitxoroperation",3]]]],[11,"gt","","",62,[[["bitxoroperation",3]]]],[11,"ge","","",62,[[["bitxoroperation",3]]]],[11,"partial_cmp","","",70,[[["top2operation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",70,[[["top2operation",3]]]],[11,"le","","",70,[[["top2operation",3]]]],[11,"gt","","",70,[[["top2operation",3]]]],[11,"ge","","",70,[[["top2operation",3]]]],[11,"partial_cmp","","",71,[[["permutationoperation",3]],[["ordering",4],["option",4]]]],[11,"lt","","",71,[[["permutationoperation",3]]]],[11,"le","","",71,[[["permutationoperation",3]]]],[11,"gt","","",71,[[["permutationoperation",3]]]],[11,"ge","","",71,[[["permutationoperation",3]]]],[11,"partial_cmp","competitive::data_structure","",92,[[["bitset",3]],[["ordering",4],["option",4]]]],[11,"lt","","",92,[[["bitset",3]]]],[11,"le","","",92,[[["bitset",3]]]],[11,"gt","","",92,[[["bitset",3]]]],[11,"ge","","",92,[[["bitset",3]]]],[11,"partial_cmp","competitive::geometry","",18,[[["real",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",19,[[["ccw",4]],[["ordering",4],["option",4]]]],[11,"partial_cmp","competitive::graph::adjacency_list_graph","",20,[[["adjacency",3]],[["ordering",4],["option",4]]]],[11,"lt","","",20,[[["adjacency",3]]]],[11,"le","","",20,[[["adjacency",3]]]],[11,"gt","","",20,[[["adjacency",3]]]],[11,"ge","","",20,[[["adjacency",3]]]],[11,"partial_cmp","competitive::graph::grid_graph","",110,[[["gridgraph",3]],[["ordering",4],["option",4]]]],[11,"lt","","",110,[[["gridgraph",3]]]],[11,"le","","",110,[[["gridgraph",3]]]],[11,"gt","","",110,[[["gridgraph",3]]]],[11,"ge","","",110,[[["gridgraph",3]]]],[11,"partial_cmp","competitive::graph::sparse_graph","",117,[[["directededge",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",118,[[["undirectededge",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",119,[[["bidirectionaledge",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",22,[[["adjacency",3]],[["ordering",4],["option",4]]]],[11,"lt","","",22,[[["adjacency",3]]]],[11,"le","","",22,[[["adjacency",3]]]],[11,"gt","","",22,[[["adjacency",3]]]],[11,"ge","","",22,[[["adjacency",3]]]],[11,"partial_cmp","competitive::num","",37,[[["quaddouble",3]],[["ordering",4],["option",4]]]],[11,"lt","","",37,[[["quaddouble",3]]]],[11,"le","","",37,[[["quaddouble",3]]]],[11,"gt","","",37,[[["quaddouble",3]]]],[11,"ge","","",37,[[["quaddouble",3]]]],[11,"partial_cmp","competitive::tools","",44,[[["totalord",3]],[["option",4],["ordering",4]]]],[11,"fmt","competitive::algebra","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::algorithm","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::combinatorial_optimization","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","","",92,[[["formatter",3]],["result",6]]],[11,"fmt","","",93,[[["formatter",3]],["result",6]]],[11,"fmt","","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",101,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::adjacency_list_graph","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::edge_list_graph","",108,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::grid_graph","",110,[[["formatter",3]],["result",6]]],[11,"fmt","","",111,[[["formatter",3]],["result",6]]],[11,"fmt","","",112,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph","",113,[[["formatter",3]],["result",6]]],[11,"fmt","","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",116,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::sparse_graph","",117,[[["formatter",3]],["result",6]]],[11,"fmt","","",118,[[["formatter",3]],["result",6]]],[11,"fmt","","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",129,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",34,[[["formatter",3]],["result",6]]],[11,"fmt","","",137,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string","",138,[[["formatter",3]],["result",6]]],[11,"fmt","","",139,[[["formatter",3]],["result",6]]],[11,"fmt","","",140,[[["formatter",3]],["result",6]]],[11,"fmt","","",141,[[["formatter",3]],["result",6]]],[11,"fmt","","",142,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools","",143,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","","",144,[[["formatter",3]],["result",6]]],[11,"fmt","","",148,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools::marker","",145,[[["formatter",3]],["result",6]]],[11,"fmt","","",146,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",147,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",149,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",137,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",37,[[["formatter",3]],[["error",3],["result",4]]]],[11,"div","competitive::math","",27,[[]]],[11,"div","","",27,[[]]],[11,"div","competitive::num","",34,[[]]],[11,"div","","",34,[[]]],[11,"div","","",137,[[]]],[11,"div","","",137,[[["mint",3]]]],[11,"div","","",37,[[]]],[11,"rem","competitive::math","",27,[[]]],[11,"sub","","",27,[[]]],[11,"sub","","",27,[[]]],[11,"sub","competitive::num","",34,[[]]],[11,"sub","","",34,[[]]],[11,"sub","","",137,[[]]],[11,"sub","","",137,[[["mint",3]]]],[11,"sub","","",37,[[]]],[11,"add","competitive::math","",27,[[]]],[11,"add","","",27,[[]]],[11,"add","competitive::num","",34,[[]]],[11,"add","","",34,[[]]],[11,"add","","",137,[[]]],[11,"add","","",137,[[["mint",3]]]],[11,"add","","",37,[[]]],[11,"add","","",37,[[]]],[11,"mul","competitive::math","",27,[[]]],[11,"mul","","",27,[[]]],[11,"mul","competitive::num","",34,[[]]],[11,"mul","","",34,[[]]],[11,"mul","","",137,[[]]],[11,"mul","","",137,[[["mint",3]]]],[11,"mul","","",37,[[]]],[11,"mul","","",37,[[]]],[11,"neg","competitive::math","",27,[[]]],[11,"neg","competitive::num","",34,[[]]],[11,"neg","","",137,[[]]],[11,"neg","","",37,[[]]],[11,"add_assign","competitive::math","",27,[[]]],[11,"add_assign","","",27,[[]]],[11,"add_assign","competitive::num","",137,[[["mint",3]]]],[11,"add_assign","","",137,[[["mint",3]]]],[11,"sub_assign","competitive::math","",27,[[]]],[11,"sub_assign","","",27,[[]]],[11,"sub_assign","competitive::num","",137,[[["mint",3]]]],[11,"sub_assign","","",137,[[["mint",3]]]],[11,"mul_assign","competitive::math","",27,[[]]],[11,"mul_assign","","",27,[[]]],[11,"mul_assign","competitive::num","",137,[[["mint",3]]]],[11,"mul_assign","","",137,[[["mint",3]]]],[11,"div_assign","competitive::math","",27,[[]]],[11,"div_assign","","",27,[[]]],[11,"div_assign","competitive::num","",137,[[["mint",3]]]],[11,"div_assign","","",137,[[["mint",3]]]],[11,"rem_assign","competitive::math","",27,[[]]],[11,"not","competitive::data_structure","",92,[[]]],[11,"bitand","","",92,[[]]],[11,"bitor","","",92,[[]]],[11,"bitxor","","",92,[[]]],[11,"shl","","",92,[[]]],[11,"shl","competitive::math","",27,[[]]],[11,"shr","competitive::data_structure","",92,[[]]],[11,"shr","competitive::math","",27,[[]]],[11,"bitand_assign","competitive::data_structure","",92,[[]]],[11,"bitor_assign","","",92,[[]]],[11,"bitxor_assign","","",92,[[]]],[11,"shl_assign","","",92,[[]]],[11,"shl_assign","competitive::math","",27,[[]]],[11,"shr_assign","competitive::data_structure","",92,[[]]],[11,"shr_assign","competitive::math","",27,[[]]],[11,"index","competitive::data_structure","",93,[[]]],[11,"index","competitive::graph::edge_list_graph","",108,[[]]],[11,"index","competitive::graph","",122,[[]]],[11,"index","competitive::math","",27,[[]]],[11,"index","","",30,[[]]],[11,"index","","",30,[[]]],[11,"index","","",32,[[]]],[11,"index","competitive::num","",37,[[]]],[11,"index","competitive::string","",141,[[]]],[11,"index","","",142,[[]]],[11,"index_mut","competitive::math","",27,[[]]],[11,"index_mut","","",30,[[]]],[11,"index_mut","","",30,[[]]],[11,"index_mut","","",32,[[]]],[11,"hash","competitive::algebra","",53,[[]]],[11,"hash","","",54,[[]]],[11,"hash","","",55,[[]]],[11,"hash","","",56,[[]]],[11,"hash","","",57,[[]]],[11,"hash","","",58,[[]]],[11,"hash","","",59,[[]]],[11,"hash","","",60,[[]]],[11,"hash","","",61,[[]]],[11,"hash","","",62,[[]]],[11,"hash","","",70,[[]]],[11,"hash","","",71,[[]]],[11,"hash","competitive::data_structure","",92,[[]]],[11,"hash","competitive::graph::adjacency_list_graph","",20,[[]]],[11,"hash","competitive::graph::grid_graph","",110,[[]]],[11,"hash","competitive::graph::sparse_graph","",117,[[]]],[11,"hash","","",118,[[]]],[11,"hash","","",119,[[]]],[11,"hash","","",22,[[]]],[11,"hash","competitive::num","",34,[[]]],[11,"hash","","",137,[[]]],[11,"from_str","","",137,[[],["result",4]]],[11,"from_str","","",37,[[],["result",4]]],[11,"from_iter","competitive::data_structure","",91,[[["intoiterator",8]]]],[11,"from_iter","competitive::math","",27,[[["intoiterator",8]]]],[11,"from_iter","competitive::tools","",143,[[["intoiterator",8]]]],[11,"sum","competitive::num","",137,[[["iterator",8]]]],[11,"sum","","",137,[[["iterator",8]]]],[11,"product","","",137,[[["iterator",8]]]],[11,"product","","",137,[[["iterator",8]]]],[11,"reverse_operate","competitive::algebra","",0,[[]]],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",2,[[]]],[11,"rinv_operate","","",3,[[]]],[11,"new","","",53,[[]]],[11,"new","","",54,[[]]],[11,"new","","",55,[[]]],[11,"new","","",56,[[]]],[11,"new","","",57,[[]]],[11,"new","","",58,[[]]],[11,"new","","",59,[[]]],[11,"new","","",60,[[]]],[11,"new","","",61,[[]]],[11,"new","","",62,[[]]],[11,"new","","",63,[[]]],[11,"new","","",64,[[]]],[11,"new","","",66,[[]]],[11,"new","","",67,[[]]],[11,"new","","",68,[[]]],[11,"new","","",69,[[]]],[11,"new","","",70,[[]]],[11,"new","","",71,[[]]],[11,"new","competitive::algorithm","",72,[[]]],[11,"value","","",72,[[]]],[11,"check","","",72,[[]]],[11,"new","","",73,[[]]],[11,"add_line","","k-th add_line(a_k, b_k): a_k >= a_{k+1}",73,[[]]],[11,"query","","",73,[[]]],[11,"mo_solve","","",9,[[]]],[11,"new","","",74,[[]]],[11,"next_minimum","","",74,[[]]],[11,"new","","",75,[[]]],[11,"zeta_transform","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$",75,[[]]],[11,"mobius_transform","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$",75,[[]]],[11,"convolve","","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$",75,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",76,[[]]],[11,"zeta_transform","","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$",76,[[]]],[11,"mobius_transform","","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$",76,[[]]],[11,"convolve","","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$",76,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",77,[[["vec",3]]]],[11,"zeta_transform","","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$",77,[[]]],[11,"mobius_transform","","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$",77,[[]]],[11,"convolve","","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$",77,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",78,[[["vec",3]]]],[11,"zeta_transform","","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$",78,[[]]],[11,"mobius_transform","","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$",78,[[]]],[11,"convolve","","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$",78,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","competitive::combinatorial_optimization","",80,[[]]],[11,"solve","","",80,[[]]],[11,"new","","",13,[[]]],[11,"max_weight","","",13,[[]]],[11,"insert","","",13,[[]]],[11,"extend","","",13,[[["intoiterator",8]]]],[11,"insert01","","",13,[[]]],[11,"extend01","","",13,[[["intoiterator",8]]]],[11,"insert_limitation","","",13,[[]]],[11,"extend_limitation","","",13,[[["intoiterator",8]]]],[11,"insert_limitation2","","",13,[[]]],[11,"extend_limitation2","","",13,[[["intoiterator",8]]]],[11,"solve","","",13,[[]]],[11,"new","","",14,[[]]],[11,"insert","","",14,[[]]],[11,"extend","","",14,[[["intoiterator",8]]]],[11,"insert01","","",14,[[]]],[11,"extend01","","",14,[[["intoiterator",8]]]],[11,"insert_limitation","","",14,[[]]],[11,"extend_limitation","","",14,[[["intoiterator",8]]]],[11,"solve","","",14,[[]]],[11,"new","","",79,[[]]],[11,"insert","","",79,[[]]],[11,"extend","","",79,[[["intoiterator",8]]]],[11,"solve","","",79,[[]]],[11,"new","","",15,[[]]],[11,"longest_length","","",15,[[]]],[11,"insert","","",15,[[]]],[11,"extend","","",15,[[["intoiterator",8]]]],[11,"new","competitive::data_structure","",84,[[]]],[11,"new","","",85,[[]]],[11,"new","","",88,[[]]],[11,"new","","",89,[[]]],[11,"accumulate0","","fold [0, k)",89,[[]]],[11,"accumulate","","fold [0, k]",89,[[]]],[11,"update","","",89,[[]]],[11,"fold","","",89,[[]]],[11,"get","","",89,[[]]],[11,"set","","",89,[[]]],[11,"lower_bound","","",89,[[]]],[11,"new","","",90,[[]]],[11,"accumulate0","","fold [0, i) x [0, j)",90,[[]]],[11,"accumulate","","fold [0, i] x [0, j]",90,[[]]],[11,"update","","",90,[[]]],[11,"fold","","0-indexed [i1, i2) x [j1, j2)",90,[[]]],[11,"get","","",90,[[]]],[11,"set","","",90,[[]]],[11,"rank1","","the number of 1 in [0, k)",17,[[]]],[11,"rank0","","the number of 0 in [0, k)",17,[[]]],[11,"select1","","index of k-th 1",17,[[],["option",4]]],[11,"select0","","index of k-th 0",17,[[],["option",4]]],[11,"new","","",92,[[]]],[11,"ones","","",92,[[]]],[11,"get","","",92,[[]]],[11,"set","","",92,[[]]],[11,"count_ones","","",92,[[]]],[11,"count_zeros","","",92,[[]]],[11,"shl_bitor_assign","","",92,[[]]],[11,"shr_bitor_assign","","",92,[[]]],[11,"new","","",93,[[["vec",3]]]],[11,"height","","",93,[[]]],[11,"fold_close","","",93,[[]]],[11,"fold","","",93,[[]]],[11,"new","","",94,[[]]],[11,"range","","",94,[[["range",3],["range",3]],["vec",3]]],[11,"new","","",95,[[]]],[11,"from_vec","","",95,[[["vec",3]]]],[11,"update","","",95,[[]]],[11,"fold","","",95,[[]]],[11,"set","","",95,[[]]],[11,"get","","",95,[[]]],[11,"fold_all","","",95,[[]]],[11,"as_slice","","",95,[[]]],[11,"as_slice_lazy","","",95,[[]]],[11,"new","","",96,[[]]],[11,"from_vec","","",96,[[["vec",3]]]],[11,"set","","",96,[[]]],[11,"update","","",96,[[]]],[11,"get","","",96,[[]]],[11,"fold","","",96,[[]]],[11,"fold_all","","",96,[[]]],[11,"lower_bound_all","","left most index [0, r) that satisfies monotonic condition",96,[[["fn",8]]]],[11,"lower_bound","","left most index [l, r) that satisfies monotonic condition",96,[[["fn",8]]]],[11,"as_slice","","",96,[[]]],[11,"new","","",97,[[]]],[11,"len","","",97,[[]]],[11,"is_empty","","",97,[[]]],[11,"fold_all","","",97,[[]]],[11,"last","","",97,[[],["option",4]]],[11,"push","","",97,[[]]],[11,"pop","","",97,[[],["option",4]]],[11,"new","","",98,[[]]],[11,"len","","",98,[[]]],[11,"is_empty","","",98,[[]]],[11,"fold_all","","",98,[[]]],[11,"front","","",98,[[],["option",4]]],[11,"back","","",98,[[],["option",4]]],[11,"push_front","","",98,[[]]],[11,"push_back","","",98,[[]]],[11,"pop_front","","",98,[[],["option",4]]],[11,"pop_back","","",98,[[],["option",4]]],[11,"reverse","","",98,[[]]],[11,"new","","",99,[[]]],[11,"insert_at","","",99,[[],["vec",3]]],[11,"insert","","",99,[[],["vec",3]]],[11,"find_at","","",99,[[],["result",4]]],[11,"find","","",99,[[],["result",4]]],[11,"next_node","","",99,[[],["option",4]]],[11,"count","","",99,[[]]],[11,"next_count","","",99,[[]]],[11,"new","","",102,[[["fn",8]]]],[11,"find","","",102,[[]]],[11,"find_root","","",102,[[],[["ref",3],["rootdata",3]]]],[11,"find_root_mut","","",102,[[],[["refmut",3],["rootdata",3]]]],[11,"unite","","",102,[[]]],[11,"size","","",102,[[]]],[11,"same","","",102,[[]]],[11,"members","","",102,[[],["vec",3]]],[11,"roots","","",102,[[],["vec",3]]],[11,"all_group_members","","",102,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",100,[[]]],[11,"find","","",100,[[]]],[11,"unite","","",100,[[]]],[11,"size","","",100,[[]]],[11,"same","","",100,[[]]],[11,"members","","",100,[[],["vec",3]]],[11,"roots","","",100,[[],["vec",3]]],[11,"all_group_members","","",100,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",101,[[]]],[11,"find","","",101,[[]]],[11,"get_weight","","",101,[[]]],[11,"unite","","",101,[[]]],[11,"size","","",101,[[]]],[11,"is_same","","",101,[[]]],[11,"get_difference","","",101,[[],["option",4]]],[11,"members","","",101,[[],["vec",3]]],[11,"roots","","",101,[[],["vec",3]]],[11,"all_group_members","","",101,[[],[["hashmap",3],["vec",3]]]],[11,"new","","",103,[[["vec",3],["clone",8],["rankselectdictionaries",8]]]],[11,"access","","get k-th value",103,[[]]],[11,"rank","","the number of val in range",103,[[["range",3]]]],[11,"select","","index of k-th val",103,[[],["option",4]]],[11,"quantile","","get k-th smallest value in range",103,[[["range",3]]]],[11,"rank_lessthan","","the number of value less than val in range",103,[[["range",3]]]],[11,"rank_range","","the number of valrange in range",103,[[["range",3]]]],[11,"new","competitive::geometry","",104,[[["point",6]]]],[11,"cross_circle","","",104,[[],["option",4]]],[11,"contains_point","","",104,[[["point",6]]]],[11,"new","","",105,[[["point",6]]]],[11,"dir","","",105,[[],["point",6]]],[11,"ccw","","",105,[[["point",6]],["ccw",4]]],[11,"projection","","",105,[[["point",6]],["point",6]]],[11,"reflection","","",105,[[["point",6]],["point",6]]],[11,"distance_point","","",105,[[["point",6]]]],[11,"is_parallel","","",105,[[]]],[11,"is_orthogonal","","",105,[[]]],[11,"new","","",106,[[["point",6]]]],[11,"dir","","",106,[[],["point",6]]],[11,"ccw","","",106,[[["point",6]],["ccw",4]]],[11,"projection","","",106,[[["point",6]],["point",6]]],[11,"reflection","","",106,[[["point",6]],["point",6]]],[11,"is_parallel","","",106,[[]]],[11,"is_orthogonal","","",106,[[]]],[11,"intersect","","",106,[[]]],[11,"intersect_point","","",106,[[["point",6]]]],[11,"cross_point","","",106,[[],[["option",4],["point",6]]]],[11,"distance_point","","",106,[[["point",6]]]],[11,"distance","","",106,[[]]],[11,"new","competitive::graph::adjacency_list_graph","",20,[[],["adjacency",3]]],[11,"new","","",21,[[],["adjacencylistgraph",3]]],[11,"add_edge","","",21,[[]]],[11,"add_undirected_edge","","",21,[[]]],[11,"vertices","","",21,[[],["range",3]]],[11,"adjacency","","",21,[[],["vec",3]]],[11,"new","","",107,[[]]],[11,"new","competitive::graph::edge_list_graph","Construct empty graph.",108,[[]]],[11,"vertices_size","","Return the number of vertices.",108,[[]]],[11,"edges_size","","Return the number of edges.",108,[[]]],[11,"vertices","","Return an iterator over graph vertices.",108,[[],["range",3]]],[11,"edges","","",108,[[],["iter",3]]],[11,"from_edges","","Construct graph from edges.",108,[[["vec",3]]]],[11,"new","","",109,[[]]],[11,"new","competitive::graph::grid_graph","",110,[[]]],[11,"adjacency4","","",110,[[],["adjacency4",3]]],[11,"adjacency8","","",110,[[],["adjacency8",3]]],[11,"new","competitive::graph","",25,[[["undirectedsparsegraph",6]]]],[11,"new","","",113,[[]]],[11,"add_edge","","",113,[[]]],[11,"gen_graph","","",113,[[],["bidirectionalsparsegraph",6]]],[11,"build","","",113,[[["bidirectionalsparsegraph",6]],["dinic",3]]],[11,"maximum_flow_limited","","",114,[[]]],[11,"maximum_flow","","",114,[[]]],[11,"get_flow","","",114,[[]]],[11,"change_edge","","",114,[[]]],[11,"new","","",115,[[]]],[11,"add_edge","","",115,[[]]],[11,"gen_graph","","",115,[[],["bidirectionalsparsegraph",6]]],[11,"build","","",115,[[["bidirectionalsparsegraph",6]],["primaldual",3]]],[11,"minimum_cost_flow_limited","","Return (flow, cost).",116,[[]]],[11,"minimum_cost_flow","","Return (flow, cost).",116,[[]]],[11,"get_flow","","",116,[[]]],[11,"minimum_spanning_tree","competitive::graph::edge_list_graph","",108,[[],["vec",3]]],[11,"minimum_spanning_arborescence","","tarjan",108,[[],["option",4]]],[11,"dijkstra","competitive::graph::sparse_graph","",23,[[],[["option",4],["vec",3]]]],[11,"bellman_ford","","",23,[[]]],[11,"warshall_floyd","","",23,[[],[["vec",3],["vec",3]]]],[11,"new","","",22,[[],["adjacency",3]]],[11,"vertices_size","","Return the number of vertices.",23,[[]]],[11,"edges_size","","Return the number of edges.",23,[[]]],[11,"vertices","","Return an iterator over graph vertices.",23,[[],["range",3]]],[11,"adjacencies","","Return a slice of adjacency vertices.",23,[[],[["iter",3],["adjacency",3]]]],[11,"from_edges","","Construct graph from edges.",23,[[["vec",3]]]],[11,"new","","",120,[[]]],[11,"new","","",121,[[]]],[11,"new","competitive::graph","",122,[[["directedsparsegraph",6]]]],[11,"gen_cgraph","","",122,[[],["directedsparsegraph",6]]],[11,"components","","",122,[[],[["vec",3],["vec",3]]]],[11,"has_loop","","",122,[[]]],[11,"size","","",122,[[]]],[11,"new","","",123,[[]]],[11,"add_inner","","",123,[[]]],[11,"add_or","","",123,[[]]],[11,"add_nand","","",123,[[]]],[11,"set_true","","",123,[[]]],[11,"set_false","","",123,[[]]],[11,"two_satisfiability","","",123,[[],[["option",4],["vec",3]]]],[11,"topological_sort","competitive::graph::sparse_graph","",23,[[],["vec",3]]],[11,"new","competitive::math","",26,[[]]],[11,"combination","","",26,[[],["mint",3]]],[11,"permutation","","",26,[[],["mint",3]]],[11,"homogeneous_product","","",26,[[],["mint",3]]],[11,"inv","","",26,[[],["mint",3]]],[11,"new","","",124,[[]]],[11,"factorial","","n! = a * p^e",124,[[]]],[11,"combination","","",124,[[],["mint",3]]],[11,"from_vec","","",27,[[["vec",3]]]],[11,"length","","",27,[[]]],[11,"truncate","","",27,[[]]],[11,"zeros","","",27,[[]]],[11,"resize","","",27,[[]]],[11,"prefix","","",27,[[]]],[11,"diff","","",27,[[]]],[11,"integral","","",27,[[]]],[11,"inv","","",27,[[]]],[11,"exp","","",27,[[]]],[11,"log","","",27,[[]]],[11,"pow","","",27,[[]]],[11,"sqrt","","",27,[[],["option",4]]],[11,"lagrange_interpolation","","Lagrange interpolation with (i, f(i)) (0 <= i <= n)",26,[[["mint",3]],["mint",3]]],[11,"new","","",30,[[]]],[11,"from_vec","","",30,[[["vec",3],["vec",3]]]],[11,"zeros","","",30,[[]]],[11,"eye","","",30,[[]]],[11,"pow","","",30,[[]]],[11,"row_reduction","","",30,[[]]],[11,"rank","","",30,[[]]],[11,"solve_system_of_linear_equations","","",30,[[],[["vec",3],["option",4]]]],[11,"inverse","","",30,[[],[["option",4],["matrix",3]]]],[11,"sqrt","competitive::num","",137,[[],["option",4]]],[11,"convert","competitive::math","",126,[[["intoiterator",8]],[["vec",3],["mint",3]]]],[11,"ntt","","",126,[[["vec",3],["mint",3]],[["vec",3],["mint",3]]]],[11,"convolve","","",126,[[["vec",3],["mint",3]],[["vec",3],["mint",3]]]],[11,"convolve_it","","",126,[[["intoiterator",8]],[["vec",3],["mint",3]]]],[11,"new","","",127,[[]]],[11,"solve","","",127,[[],["option",4]]],[11,"from_vec","","",32,[[["vec",3]]]],[11,"length","","",32,[[]]],[11,"assign","","",32,[[]]],[11,"pow","","",32,[[]]],[11,"new","","",128,[[]]],[11,"is_prime","","",128,[[]]],[11,"prime_factors","","",128,[[],["vec",3]]],[11,"count_divisors","","",128,[[]]],[11,"new","","",129,[[]]],[11,"get","","",129,[[]]],[11,"new","competitive::num","",34,[[]]],[11,"transpose","","",34,[[]]],[11,"conjugate","","",34,[[]]],[11,"dot","","",34,[[]]],[11,"cross","","",34,[[]]],[11,"norm","","",34,[[]]],[11,"polar","","",34,[[]]],[11,"abs","","",34,[[]]],[11,"unit","","",34,[[]]],[11,"angle","","",34,[[]]],[11,"new","","",137,[[]]],[11,"inner","","",137,[[]]],[11,"new_unchecked","","",137,[[]]],[11,"get_mod","","",137,[[]]],[11,"pow","","",137,[[]]],[11,"inv","","",137,[[]]],[11,"set_mod","competitive::num::mint_basic","",133,[[]]],[11,"set_mod","","",134,[[]]],[11,"r","competitive::num::montgomery","(-m)^{-1} mod n",33,[[]]],[11,"reduce","","n^{-1}x = (x + (xr mod n)m) / n",33,[[]]],[11,"mod_pow","competitive::num","",35,[[]]],[11,"new","","",37,[[]]],[11,"renormalize","","",37,[[]]],[11,"is_zero","","",37,[[]]],[11,"is_sign_negative","","",37,[[]]],[11,"sqrt","","",37,[[]]],[11,"abs","","",37,[[]]],[11,"div2","","",37,[[]]],[11,"is_zero","","",38,[[]]],[11,"is_one","","",39,[[]]],[11,"new","competitive::string","",138,[[["vec",3]]]],[11,"search_all","","",138,[[],["vec",3]]],[18,"MOD","","",139,null],[11,"mersenne_mod","","",139,[[]]],[11,"mersenne_mul","","",139,[[]]],[11,"mersenne_mul_mod","","",139,[[]]],[11,"new","","",139,[[]]],[11,"hash_once","","",139,[[]]],[11,"find","","S [l, r)",139,[[]]],[11,"concat","","",139,[[]]],[11,"new","","",140,[[]]],[11,"new_rand","","",140,[[]]],[11,"find","","",140,[[],["vec",3]]],[11,"concat","","",140,[[],["vec",3]]],[11,"new","","",141,[[["vec",3]]]],[11,"longest_common_prefix_array","","",141,[[],["vec",3]]],[11,"new","","",142,[[]]],[11,"search","","",142,[[["eq",8]],["vec",3]]],[11,"new","competitive::tools","",143,[[]]],[11,"get","","",143,[[]]],[11,"add","","",143,[[]]],[11,"remove","","",143,[[]]],[11,"append","","",143,[[]]],[11,"keys","","",143,[[],["keys",3]]],[11,"values","","",143,[[],["values",3]]],[11,"iter","","",143,[[],["iter",3]]],[18,"IS_MAXIMIZE","","",41,null],[18,"START_TEMP","","",41,null],[18,"END_TEMP","","",41,null],[18,"TEMP_RATIO","","",41,null],[18,"TIME_LIMIT","","",41,null],[18,"LOG_TABLE_SIZE","","",41,null],[18,"UPDATE_INTERVAL","","",41,null],[18,"SEED","","",41,null],[11,"new","","",41,[[]]],[11,"is_accepted","","",41,[[]]],[11,"is_end","","",41,[[]]],[11,"new","","",144,[[]]],[11,"time","","",144,[[]]],[11,"rand64","","",144,[[]]],[11,"rand","","",144,[[]]],[11,"rands","","",144,[[],["vec",3]]],[11,"randf","","",144,[[]]],[11,"gen_bool","","",144,[[]]],[11,"new","","",148,[[]]],[11,"scan","","",148,[[]]],[11,"mscan","","",148,[[["markediterscan",8]]]],[11,"scan_vec","","",148,[[],["vec",3]]],[11,"iter","","",148,[[],[["scanneriter",3],["iterscan",8]]]],[11,"new","competitive::tools::marker","",147,[[]]],[11,"new","competitive::tree","",151,[[["undirectedsparsegraph",6]]]],[11,"ancestor","","",151,[[]]],[11,"new","","",48,[[["undirectedsparsegraph",6]]]],[11,"length","","",48,[[]]],[11,"new","","",49,[[["undirectedsparsegraph",6]]]],[11,"length","","",49,[[]]],[11,"subtree_vertex_tour","","",49,[[]]],[11,"path_vertex_tour","","",49,[[]]],[11,"subtree_query","","",49,[[["fnmut",8]]]],[11,"subtree_update","","",49,[[["fnmut",8]]]],[11,"path_query","","",49,[[["fnmut",8]]]],[11,"path_update","","",49,[[["fnmut",8]]]],[11,"new","","",149,[[["undirectedsparsegraph",6]]]],[11,"length","","",149,[[]]],[11,"query","","",149,[[["fnmut",8]]]],[11,"gen_lca","","",149,[[],["lowestcommonancestor",3]]],[11,"lca","","",150,[[]]],[11,"new","","",50,[[["undirectedsparsegraph",6]]]],[11,"lca","","",50,[[]]],[11,"update","","",50,[[["fnmut",8]]]],[11,"query","","",50,[[["fnmut",8]]]],[11,"query_noncom","","",50,[[["fnmut",8]]]],[11,"new","","",51,[[["undirectedsparsegraph",6]]]],[11,"new","","",52,[[]]],[11,"dfs","","",52,[[["undirectedsparsegraph",6]]]]],"p":[[8,"Magma"],[8,"Unital"],[8,"Monoid"],[8,"Invertible"],[8,"MinimumBounded"],[8,"MaximumBounded"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[8,"BitXorIdentity"],[8,"MoSolver"],[8,"Bisect"],[8,"SliceBisectExt"],[8,"Trisect"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"LongestIncreasingSubsequence"],[8,"Automaton"],[8,"RankSelectDictionaries"],[3,"Real"],[4,"CCW"],[3,"Adjacency"],[3,"AdjacencyListGraph"],[3,"Adjacency"],[3,"SparseGraph"],[8,"SparseGraphConstruction"],[3,"LowLink"],[3,"MemorizedFactorial"],[3,"FormalPowerSeries"],[8,"FormalPowerSeriesMultiplier"],[8,"FormalPowerSeriesCoefficientSqrt"],[3,"Matrix"],[8,"NTTModulus"],[3,"Polynomial"],[8,"MontgomeryReduction32"],[3,"Complex"],[8,"MIntBase"],[8,"MIntConvert"],[3,"QuadDouble"],[8,"Zero"],[8,"One"],[3,"CharsWithBase"],[3,"SimuratedAnnealing"],[8,"IterScan"],[8,"MarkedIterScan"],[3,"TotalOrd"],[8,"Read"],[8,"Write"],[6,"UndirectedSparseGraph"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"HeavyLightDecomposition"],[3,"ReRooting"],[3,"TreeRec"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"MonoidalOperation"],[3,"GroupOperation"],[3,"AssocoativeOperator"],[3,"AbsorbedAssocoativeOperator"],[3,"CartesianOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"PermutationOperation"],[3,"CHTLine"],[3,"ConvexHullTrick"],[3,"SlideMinimum"],[3,"SubsetTransform"],[3,"SupersetTransform"],[3,"DivisorTransform"],[3,"MultipleTransform"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"LessThanAutomaton"],[3,"GreaterThanAutomaton"],[3,"ContainAutomaton"],[3,"ContainCounterAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"BitVector"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"Static2DTree"],[3,"LazySegmentTree"],[3,"SegmentTree"],[3,"QueueAggregation"],[3,"DequeAggregation"],[3,"Trie"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"MergingUnionFind"],[3,"WaveletMatrix"],[3,"Circle"],[3,"Line"],[3,"LineSegment"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraph"],[3,"EdgeListGraphScanner"],[3,"GridGraph"],[3,"Adjacency4"],[3,"Adjacency8"],[3,"DinicBuilder"],[3,"Dinic"],[3,"PrimalDualBuilder"],[3,"PrimalDual"],[3,"DirectedEdge"],[3,"UndirectedEdge"],[3,"BidirectionalEdge"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[3,"SmallModMemorizedFactorial"],[3,"DefaultFormalPowerSeriesMultiplier"],[3,"NumberTheoreticTransform"],[3,"BabyStepGiantStep"],[3,"PrimeTable"],[3,"EulerPhiTable"],[3,"Modulo998244353"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"DynModuloU32"],[3,"DynModuloU64"],[3,"Modulo2"],[3,"Modulo998244353"],[3,"MInt"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"Counter"],[3,"Xorshift"],[3,"Usize1"],[3,"Chars"],[3,"Collect"],[3,"Scanner"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"LCAMonoid"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","i":[[0,"datastructure","library_checker","",null,null],[0,"point_add_range_sum","library_checker::datastructure","",null,null],[5,"point_add_range_sum_binary_indexed_tree","library_checker::datastructure::point_add_range_sum","✅  AC  122ms",null,[[]]],[5,"point_add_range_sum_segment_tree","","✅  AC  121ms",null,[[]]],[0,"point_set_range_composite","library_checker::datastructure","",null,null],[5,"point_set_range_composite","library_checker::datastructure::point_set_range_composite","✅  AC  269ms",null,[[]]],[0,"queue_operate_all_composite","library_checker::datastructure","",null,null],[5,"queue_operate_all_composite","library_checker::datastructure::queue_operate_all_composite","✅  AC  53ms",null,[[]]],[0,"range_affine_range_sum","library_checker::datastructure","",null,null],[5,"range_affine_range_sum","library_checker::datastructure::range_affine_range_sum","✅  AC  878ms",null,[[]]],[0,"range_kth_smallest","library_checker::datastructure","",null,null],[5,"range_kth_smallest","library_checker::datastructure::range_kth_smallest","✅  AC  394ms",null,[[]]],[0,"staticrmq","library_checker::datastructure","",null,null],[5,"staticrmq_disjoint_sparse_table","library_checker::datastructure::staticrmq","✅  AC  179ms",null,[[]]],[5,"staticrmq_segment_tree","","✅  AC  157ms",null,[[]]],[0,"unionfind","library_checker::datastructure","",null,null],[5,"unionfind","library_checker::datastructure::unionfind","✅  AC  20ms",null,[[]]],[0,"vertex_add_path_sum","library_checker::datastructure","",null,null],[5,"vertex_add_path_sum","library_checker::datastructure::vertex_add_path_sum","✅  AC  594ms",null,[[]]],[0,"vertex_add_subtree_sum","library_checker::datastructure","",null,null],[5,"vertex_add_subtree_sum","library_checker::datastructure::vertex_add_subtree_sum","✅  AC  295ms",null,[[]]],[0,"vertex_set_path_composite","library_checker::datastructure","",null,null],[5,"vertex_set_path_composite","library_checker::datastructure::vertex_set_path_composite","✅  AC  234ms",null,[[]]],[0,"graph","library_checker","",null,null],[0,"bipartitematching","library_checker::graph","",null,null],[5,"bipartitematching","library_checker::graph::bipartitematching","✅  AC  152ms",null,[[]]],[0,"directedmst","library_checker::graph","",null,null],[5,"directedmst","library_checker::graph::directedmst","✅  AC  155ms",null,[[]]],[0,"lca","library_checker::graph","",null,null],[5,"lca_euler_tour","library_checker::graph::lca","✅  AC  435ms",null,[[]]],[5,"lca_hld","","✅  AC  319ms",null,[[]]],[0,"scc","library_checker::graph","",null,null],[5,"scc","library_checker::graph::scc","✅  AC  301ms",null,[[]]],[0,"math","library_checker","",null,null],[0,"convolution_mod","library_checker::math","",null,null],[5,"convolution_mod","library_checker::math::convolution_mod","✅  AC  283ms",null,[[]]],[0,"convolution_mod_1000000007","library_checker::math","",null,null],[5,"convolution_mod_1000000007","library_checker::math::convolution_mod_1000000007","✅  AC  1585ms",null,[[]]],[0,"enumerate_primes","library_checker::math","",null,null],[5,"enumerate_primes","library_checker::math::enumerate_primes","✅  AC  2286ms",null,[[]]],[0,"exp_of_formal_power_series","library_checker::math","",null,null],[5,"exp_of_formal_power_series","library_checker::math::exp_of_formal_power_series","✅  AC  2332ms",null,[[]]],[0,"factorize","library_checker::math","",null,null],[5,"factorize","library_checker::math::factorize","✅  AC  2497ms",null,[[]]],[0,"inv_of_formal_power_series","library_checker::math","",null,null],[5,"inv_of_formal_power_series","library_checker::math::inv_of_formal_power_series","✅  AC  659ms",null,[[]]],[0,"log_of_formal_power_series","library_checker::math","",null,null],[5,"log_of_formal_power_series","library_checker::math::log_of_formal_power_series","✅  AC  1045ms",null,[[]]],[0,"pow_of_formal_power_series","library_checker::math","",null,null],[5,"pow_of_formal_power_series","library_checker::math::pow_of_formal_power_series","✅  AC  3372ms",null,[[]]],[0,"sqrt_mod","library_checker::math","",null,null],[5,"sqrt_mod","library_checker::math::sqrt_mod","✅  AC  118ms",null,[[]]],[0,"sqrt_of_formal_power_series","library_checker::math","",null,null],[5,"sqrt_of_formal_power_series","library_checker::math::sqrt_of_formal_power_series","✅  AC  1338ms",null,[[]]],[0,"sum_of_floor_of_linear","library_checker::math","",null,null],[5,"sum_of_floor_of_linear","library_checker::math::sum_of_floor_of_linear","✅  AC  75ms",null,[[]]],[0,"two_sat","library_checker::math","",null,null],[5,"two_sat","library_checker::math::two_sat","✅  AC  305ms",null,[[]]],[0,"sample","library_checker","",null,null],[0,"aplusb","library_checker::sample","",null,null],[5,"aplusb","library_checker::sample::aplusb","✅  AC  0ms",null,[[]]],[0,"many_aplusb","library_checker::sample","",null,null],[5,"many_aplusb","library_checker::sample::many_aplusb","✅  AC  209ms",null,[[]]],[0,"string","library_checker","",null,null],[0,"number_of_substrings","library_checker::string","",null,null],[5,"number_of_substrings","library_checker::string::number_of_substrings","✅  AC  822ms",null,[[]]],[0,"suffixarray","library_checker::string","",null,null],[5,"suffixarray","library_checker::string::suffixarray","✅  AC  1001ms",null,[[]]],[0,"zalgorithm","library_checker::string","",null,null],[5,"zalgorithm","library_checker::string::zalgorithm","✅  AC  33ms",null,[[]]]],"p":[],"a":{"verify":[2,3,5,7,9,11,13,14,16,18,20,22,25,27,29,30,32,35,37,39,41,43,45,47,49,51,53,55,57,60,62,65,67,69]}}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);