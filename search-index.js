var searchIndex = JSON.parse('{\
"competitive":{"doc":"github","i":[[0,"algebra","competitive","algebra",null,null],[0,"magma","competitive::algebra","algebraic traits",null,null],[8,"Magma","competitive::algebra::magma","binary operaion: T ∘ T → T",null,null],[16,"T","","type of operands: T",0,null],[10,"operate","","binary operaion: ∘",0,[[]]],[8,"Associative","","∀a,b,c ∈ T, (a ∘ b) ∘ c = a ∘ (b ∘ c)",null,null],[8,"SemiGroup","","associative binary operation",null,null],[8,"Unital","","∃e ∈ T, ∀a ∈ T, e ∘ a = a ∘ e = e",null,null],[10,"unit","","identity element: e",1,[[]]],[8,"Monoid","","associative binary operation and an identity element",null,null],[11,"pow","","x ^ n = x ∘ ... ∘ x binary exponentiation",2,[[]]],[8,"Invertible","","∃e ∈ T, ∀a ∈ T, ∃b,c ∈ T, b ∘ a = a ∘ c = e",null,null],[10,"inverse","","a where a ∘ x = e",3,[[]]],[8,"RightInvertibleMagma","","short cut of right inverse binary operation",null,null],[10,"rinv_operation","","right inverse binary operation: ⋅ ∘ (⋅ ^ -1)",4,[[]]],[8,"Group","","associative binary operation and an identity element and…",null,null],[8,"Commutative","","∀a,b ∈ T, a ∘ b = b ∘ a",null,null],[8,"AbelianMonoid","","commutative monoid",null,null],[8,"AbelianGroup","","commutative group",null,null],[8,"Idempotent","","∀a ∈ T, a ∘ a = a",null,null],[8,"IdempotentMonoid","","idempotent monoid",null,null],[0,"operations","competitive::algebra","binary operaions",null,null],[3,"MaxOperation","competitive::algebra::operations","binary operation to select larger element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"FirstOperation","","retain the first element",null,null],[3,"LastOperation","","retain the last element",null,null],[3,"AdditiveOperation","","",null,null],[3,"MultiplicativeOperation","","×",null,null],[3,"LinearOperation","","(a, b) ∘ (c, d) = λx. c × (a × x + b) + d",null,null],[3,"BitAndOperation","","&",null,null],[3,"BitOrOperation","","|",null,null],[3,"MonoidalOperation","","",null,null],[3,"GroupOperation","","",null,null],[3,"AssocoativeOperator","","",null,null],[3,"AbsorbedAssocoativeOperator","","",null,null],[3,"CartesianOperation","","(M1, M2)",null,null],[3,"CountingOperation","","",null,null],[0,"max_operation_impl","","",null,null],[11,"new","","",5,[[]]],[0,"min_operation_impl","","",null,null],[11,"new","","",6,[[]]],[0,"first_operation_impl","","",null,null],[11,"new","","",7,[[]]],[0,"last_operation_impl","","",null,null],[11,"new","","",8,[[]]],[0,"additive_operation_impl","","",null,null],[11,"new","","",9,[[]]],[0,"multiplicative_operation_impl","","",null,null],[11,"new","","",10,[[]]],[0,"linear_operation_impl","","",null,null],[11,"new","","",11,[[]]],[0,"bitand_operation_impl","","",null,null],[11,"new","","",12,[[]]],[0,"bitor_operation_impl","","",null,null],[11,"new","","",13,[[]]],[0,"monoidal_operation_impl","","",null,null],[11,"new","","",14,[[]]],[0,"group_operation_impl","","",null,null],[11,"new","","",15,[[]]],[0,"assocoative_operator_impl","","",null,null],[0,"absorbed_assocoative_operator_impl","","",null,null],[11,"new","","",16,[[]]],[0,"cartesian_operation_impl","","",null,null],[11,"new","","",17,[[]]],[0,"counting_operation_impl","","",null,null],[11,"new","","",18,[[]]],[8,"MinimumBounded","","",null,null],[10,"minimum","","",19,[[]]],[8,"MaximumBounded","","",null,null],[10,"maximum","","",20,[[]]],[8,"AdditiveIdentity","","",null,null],[10,"zero","","",21,[[]]],[8,"MultiplicativeIdentity","","",null,null],[10,"one","","",22,[[]]],[8,"BitAndIdentity","","",null,null],[10,"all_one","","",23,[[]]],[8,"BitOrIdentity","","",null,null],[10,"all_zero","","",24,[[]]],[0,"algorithm","competitive","algorithm",null,null],[0,"compress","competitive::algorithm","coordinate compression",null,null],[3,"Compress","competitive::algorithm::compress","",null,null],[11,"get","","",25,[[]]],[11,"len","","",25,[[]]],[0,"convex_hull_trick","competitive::algorithm","",null,null],[3,"CHTLine","competitive::algorithm::convex_hull_trick","",null,null],[3,"ConvexHullTrick","","",null,null],[11,"new","","",26,[[]]],[11,"value","","",26,[[]]],[11,"check","","",26,[[]]],[11,"new","","",27,[[]]],[11,"add_line","","k-th add_line(a_k, b_k): a_k >= a_{k+1}",27,[[]]],[11,"query","","",27,[[]]],[0,"search","competitive::algorithm","binary / ternary search",null,null],[5,"binary_search","competitive::algorithm::search","",null,[[["fn",8],["bisect",8]],["bisect",8]]],[5,"lower_bound","","",null,[[["ord",8],["bisect",8]]]],[5,"upper_bound","","",null,[[["ord",8],["bisect",8]]]],[5,"ternary_search","","",null,[[["trisect",8],["fn",8]],["trisect",8]]],[0,"bisect_impl","","",null,null],[0,"trisect_impl","","",null,null],[8,"Bisect","","binary search helper",null,null],[10,"halve","","return between two elements",28,[[]]],[10,"section_end","","the end condition of binary search",28,[[]]],[8,"Trisect","","",null,null],[10,"next","","",29,[[]]],[10,"section_end","","",29,[[]]],[0,"slide_minimum","competitive::algorithm","",null,null],[5,"slide_minimum","competitive::algorithm::slide_minimum","",null,[[["vec",3]],["vec",3]]],[0,"zeta_transform","competitive::algorithm","fast zeta transform and fast mobius transform",null,null],[5,"zeta_transform_for_subset","competitive::algorithm::zeta_transform","",null,[[["monoid",8]]]],[5,"mobius_transform_for_subset","","",null,[[["group",8]]]],[5,"zeta_transform_for_superset","","",null,[[["monoid",8]]]],[5,"mobius_transform_for_superset","","",null,[[["group",8]]]],[5,"zeta_transform_for_divisor","","",null,[[["iterator",8],["monoid",8]]]],[5,"mobius_transform_for_divisor","","",null,[[["group",8],["iterator",8]]]],[5,"zeta_transform_for_multiple","","",null,[[["iterator",8],["monoid",8]]]],[5,"mobius_transform_for_multiple","","",null,[[["group",8],["iterator",8]]]],[0,"data_structure","competitive","data structures",null,null],[3,"Rev","competitive::data_structure","same as Reverse",null,null],[12,"0","","",30,null],[3,"TotalOrd","","implement Ord by PartialOrd",null,null],[12,"0","","",31,null],[0,"binary_indexed_tree","","",null,null],[3,"BinaryIndexedTree","competitive::data_structure::binary_indexed_tree","",null,null],[3,"BinaryIndexedTree2D","","",null,null],[11,"new","","",32,[[]]],[11,"accumulate0","","fold [0, k)",32,[[]]],[11,"accumulate","","fold [0, k]",32,[[]]],[11,"update","","",32,[[]]],[11,"fold","","",32,[[]]],[11,"get","","",32,[[]]],[11,"set","","",32,[[]]],[11,"lower_bound","","",32,[[]]],[11,"new","","",33,[[]]],[11,"accumulate0","","fold [0, i) x [0, j)",33,[[]]],[11,"accumulate","","fold [0, i] x [0, j]",33,[[]]],[11,"update","","",33,[[]]],[11,"fold","","0-indexed [i1, i2) x [j1, j2)",33,[[]]],[11,"get","","",33,[[]]],[11,"set","","",33,[[]]],[0,"bitset","competitive::data_structure","",null,null],[3,"BitSet","competitive::data_structure::bitset","",null,null],[11,"new","","",34,[[]]],[11,"get","","",34,[[]]],[11,"set","","",34,[[]]],[11,"count_ones","","",34,[[]]],[11,"count_zeros","","",34,[[]]],[11,"shl_bitor_assign","","",34,[[]]],[11,"shr_bitor_assign","","",34,[[]]],[0,"disjoint_sparse_table","competitive::data_structure","",null,null],[3,"DisjointSparseTable","competitive::data_structure::disjoint_sparse_table","",null,null],[11,"new","","",35,[[["vec",3]]]],[11,"len","","",35,[[]]],[11,"fold_close","","",35,[[]]],[11,"fold","","",35,[[]]],[0,"lazy_segment_tree","competitive::data_structure","",null,null],[3,"LazySegmentTree","competitive::data_structure::lazy_segment_tree","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[11,"new","","",36,[[]]],[11,"from_vec","","",36,[[["vec",3]]]],[11,"update","","",36,[[]]],[11,"fold","","",36,[[]]],[11,"get","","",36,[[]]],[11,"fold_all","","",36,[[]]],[0,"segment_tree","competitive::data_structure","",null,null],[3,"SegmentTree","competitive::data_structure::segment_tree","",null,null],[11,"new","","",37,[[]]],[11,"from_vec","","",37,[[["vec",3]]]],[11,"set","","",37,[[]]],[11,"update","","",37,[[]]],[11,"get","","",37,[[]]],[11,"fold","","",37,[[]]],[11,"fold_all","","",37,[[]]],[11,"lower_bound_all","","left most index [0, r) that satisfies monotonic condition",37,[[["fn",8]]]],[11,"lower_bound","","left most index [l, r) that satisfies monotonic condition",37,[[["fn",8]]]],[0,"sliding_winsow_aggregation","competitive::data_structure","",null,null],[3,"QueueAggregation","competitive::data_structure::sliding_winsow_aggregation","",null,null],[3,"DequeAggregation","","",null,null],[11,"new","","",38,[[]]],[11,"len","","",38,[[]]],[11,"is_empty","","",38,[[]]],[11,"fold_all","","",38,[[]]],[11,"last","","",38,[[],["option",4]]],[11,"push","","",38,[[]]],[11,"pop","","",38,[[],["option",4]]],[11,"new","","",39,[[]]],[11,"len","","",39,[[]]],[11,"is_empty","","",39,[[]]],[11,"fold_all","","",39,[[]]],[11,"front","","",39,[[],["option",4]]],[11,"back","","",39,[[],["option",4]]],[11,"push_front","","",39,[[]]],[11,"push_back","","",39,[[]]],[11,"pop_front","","",39,[[],["option",4]]],[11,"pop_back","","",39,[[],["option",4]]],[11,"reverse","","",39,[[]]],[0,"union_find","competitive::data_structure","",null,null],[3,"UnionFind","competitive::data_structure::union_find","",null,null],[3,"WeightedUnionFind","","",null,null],[11,"new","","",40,[[]]],[11,"find","","",40,[[]]],[11,"unite","","",40,[[]]],[11,"size","","",40,[[]]],[11,"same","","",40,[[]]],[11,"members","","",40,[[],["vec",3]]],[11,"roots","","",40,[[],["vec",3]]],[11,"all_group_members","","",40,[[],[["vec",3],["hashmap",3]]]],[11,"new","","",41,[[]]],[11,"find","","",41,[[]]],[11,"get_weight","","",41,[[]]],[11,"unite","","",41,[[]]],[11,"size","","",41,[[]]],[11,"is_same","","",41,[[]]],[11,"get_difference","","",41,[[],["option",4]]],[11,"members","","",41,[[],["vec",3]]],[11,"roots","","",41,[[],["vec",3]]],[11,"all_group_members","","",41,[[],[["hashmap",3],["vec",3]]]],[0,"geometry","competitive","",null,null],[3,"Real","competitive::geometry","",null,null],[12,"0","","",42,null],[4,"CCW","","",null,null],[13,"OnlineFront","","a--b--c",43,null],[13,"Clockwise","","a--b-vc",43,null],[13,"OnSegment","","a--c--b",43,null],[13,"CounterClockwise","","a--b-^c",43,null],[13,"OnlineBack","","c--a--b",43,null],[5,"ccw","","",null,[[["point",6]],["ccw",4]]],[0,"circle","","",null,null],[3,"Circle","competitive::geometry::circle","",null,null],[11,"new","","",44,[[["point",6]]]],[11,"cross_circle","","",44,[[],["option",4]]],[11,"contains_point","","",44,[[["point",6]]]],[0,"closest_pair","competitive::geometry","",null,null],[5,"closest_pair","competitive::geometry::closest_pair","",null,[[["point",6],["vec",3]]]],[0,"line","competitive::geometry","",null,null],[3,"Line","competitive::geometry::line","",null,null],[3,"LineSegment","","",null,null],[11,"new","","",45,[[["point",6]]]],[11,"dir","","",45,[[],["point",6]]],[11,"ccw","","",45,[[["point",6]],["ccw",4]]],[11,"projection","","",45,[[["point",6]],["point",6]]],[11,"reflection","","",45,[[["point",6]],["point",6]]],[11,"distance_point","","",45,[[["point",6]]]],[11,"is_parallel","","",45,[[]]],[11,"is_orthogonal","","",45,[[]]],[11,"new","","",46,[[["point",6]]]],[11,"dir","","",46,[[],["point",6]]],[11,"ccw","","",46,[[["point",6]],["ccw",4]]],[11,"projection","","",46,[[["point",6]],["point",6]]],[11,"reflection","","",46,[[["point",6]],["point",6]]],[11,"is_parallel","","",46,[[]]],[11,"is_orthogonal","","",46,[[]]],[11,"intersect","","",46,[[]]],[11,"intersect_point","","",46,[[["point",6]]]],[11,"cross_point","","",46,[[],[["point",6],["option",4]]]],[11,"distance_point","","",46,[[["point",6]]]],[11,"distance","","",46,[[]]],[0,"polygon","competitive::geometry","",null,null],[5,"convex_hull","competitive::geometry::polygon","",null,[[["point",6],["vec",3]],[["point",6],["vec",3]]]],[5,"convex_diameter","","",null,[[["point",6],["vec",3]]]],[6,"Point","competitive::geometry","",null,null],[17,"EPS","","",null,null],[0,"graph","competitive","graph structures and algorithms",null,null],[0,"graph","competitive::graph","",null,null],[3,"Adjacent","competitive::graph::graph","",null,null],[12,"id","","",47,null],[12,"to","","",47,null],[3,"Graph","","",null,null],[12,"vsize","","",48,null],[12,"esize","","",48,null],[12,"graph","","",48,null],[3,"GraphRec","","",null,null],[12,"n","","",49,null],[12,"visited","","",49,null],[12,"cost","","",49,null],[3,"GridGraph","","",null,null],[3,"Adjacent4","","",null,null],[3,"Adjacent8","","",null,null],[11,"new","","",47,[[],["adjacent",3]]],[11,"new","","",48,[[],["graph",3]]],[11,"add_edge","","",48,[[]]],[11,"add_undirected_edge","","",48,[[]]],[11,"vertices","","",48,[[],["range",3]]],[11,"adjacency","","",48,[[],["vec",3]]],[11,"new","","",49,[[]]],[11,"dfs","","",49,[[["graph",3]]]],[11,"new","","",50,[[]]],[11,"adjacency4","","",50,[[],["adjacent4",3]]],[11,"adjacency8","","",50,[[],["adjacent8",3]]],[0,"maximum_flow","competitive::graph","",null,null],[3,"RevEdge","competitive::graph::maximum_flow","",null,null],[12,"to","","",51,null],[12,"rev","","",51,null],[12,"cap","","",51,null],[3,"FordFulkerson","","",null,null],[3,"Dinic","","",null,null],[12,"graph","","",52,null],[11,"new","","",51,[[]]],[11,"new","","",53,[[]]],[11,"add_edge","","",53,[[]]],[11,"dfs","","",53,[[]]],[11,"maximum_flow","","",53,[[]]],[11,"new","","",52,[[]]],[11,"add_edge","","",52,[[]]],[11,"maximum_flow","","",52,[[]]],[0,"minimum_cost_flow","competitive::graph","",null,null],[3,"RevEdge","competitive::graph::minimum_cost_flow","",null,null],[12,"to","","",54,null],[12,"rev","","",54,null],[12,"cap","","",54,null],[12,"cost","","",54,null],[3,"PrimalDual","","",null,null],[11,"new","","",54,[[]]],[11,"new","","",55,[[]]],[11,"add_edge","","",55,[[]]],[11,"minimum_cost_flow","","",55,[[],["option",4]]],[0,"shortest_path","competitive::graph","",null,null],[11,"dijkstra","competitive::graph::graph","",48,[[["fn",8],["monoid",8]],[["vec",3],["option",4]]]],[11,"bellman_ford","","",48,[[["fn",8],["monoid",8]]]],[11,"warshall_floyd","","",48,[[["fn",8],["monoid",8]],[["vec",3],["vec",3]]]],[0,"strongly_connected_component","competitive::graph","",null,null],[3,"StronglyConnectedComponent","competitive::graph::strongly_connected_component","",null,null],[3,"TwoSatisfiability","","",null,null],[11,"new","","",56,[[]]],[11,"add_edge","","",56,[[]]],[11,"dfs","","",56,[[]]],[11,"rdfs","","",56,[[]]],[11,"build","","",56,[[]]],[11,"gen_cgraph","","",56,[[],[["vec",3],["vec",3]]]],[11,"component","","",56,[[],[["hashset",3],["vec",3]]]],[11,"new","","",57,[[]]],[11,"add_inner","","",57,[[]]],[11,"add_or","","",57,[[]]],[11,"add_nand","","",57,[[]]],[11,"set_true","","",57,[[]]],[11,"set_false","","",57,[[]]],[11,"build","","",57,[[],[["option",4],["vec",3]]]],[0,"topological_sort","competitive::graph","",null,null],[11,"topological_sort","competitive::graph::graph","",48,[[],["vec",3]]],[0,"math","competitive","mathematical datas",null,null],[0,"factorial","competitive::math","",null,null],[3,"MemorizedFactorial","competitive::math::factorial","",null,null],[3,"SmallModMemorizedFactorial","","",null,null],[11,"new","","",58,[[]]],[11,"combination","","",58,[[],["mint",3]]],[11,"permutation","","",58,[[],["mint",3]]],[11,"homogeneous_product","","",58,[[],["mint",3]]],[11,"inv","","",58,[[],["mint",3]]],[11,"new","","",59,[[]]],[11,"factorial","","n! = a * p^e",59,[[]]],[11,"combination","","",59,[[],["rmint",3]]],[0,"fft","competitive::math","",null,null],[5,"fft_rec","competitive::math::fft","",null,[[]]],[5,"fft","","",null,[[["complex",3],["vec",3]],[["complex",3],["vec",3]]]],[0,"gcd","competitive::math","",null,null],[5,"gcd","competitive::math::gcd","",null,[[]]],[5,"gcd_binary","","",null,[[]]],[5,"lcm","","",null,[[]]],[5,"extgcd","","",null,[[]]],[5,"extgcd_loop","","",null,[[]]],[5,"extgcd_binary","","",null,[[]]],[5,"modinv","","",null,[[]]],[5,"modinv_loop","","",null,[[]]],[5,"modinv_extgcd_binary","","0 < a < p, gcd(a, p) == 1, p is prime > 2",null,[[]]],[0,"matrix","competitive::math","",null,null],[3,"Matrix","competitive::math::matrix","",null,null],[12,"shape","","",60,null],[12,"data","","",60,null],[11,"new","","",60,[[]]],[11,"from_vec","","",60,[[["vec",3],["vec",3]]]],[11,"zeros","","",60,[[]]],[11,"eye","","",60,[[]]],[11,"pow","","",60,[[]]],[11,"gauss_jordan","","",60,[[["vec",3]],[["vec",3],["option",4]]]],[0,"nums","competitive::math","",null,null],[3,"BabyStepGiantStep","competitive::math::nums","",null,null],[5,"binary_exponentiation","","",null,[[["mulassign",8],["clone",8]],[["mulassign",8],["clone",8]]]],[11,"new","","",61,[[]]],[11,"solve","","",61,[[],["option",4]]],[0,"polynomial","competitive::math","",null,null],[3,"Polynomial","competitive::math::polynomial","",null,null],[12,"0","","",62,null],[12,"1","","",62,null],[5,"poly_add","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_sub","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_mul","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_div","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_mod","","",null,[[["polynomial",3]],["polynomial",3]]],[5,"poly_assign","","",null,[[["polynomial",3]]]],[0,"poly_mod_poly","","",null,null],[5,"poly_mulmod","competitive::math::polynomial::poly_mod_poly","",null,[[["poly",6]],["poly",6]]],[5,"poly_pow","","",null,[[["poly",6]],["poly",6]]],[6,"Poly","","",null,null],[11,"len","competitive::math::polynomial","",62,[[]]],[0,"prime","competitive::math","",null,null],[3,"PrimeTable","competitive::math::prime","",null,null],[3,"EulerPhiTable","","",null,null],[5,"prime_factors","","",null,[[],["vec",3]]],[5,"divisors","","",null,[[],["vec",3]]],[5,"primes","","",null,[[],["vec",3]]],[5,"pow","","",null,[[]]],[5,"miller_rabin","","",null,[[]]],[5,"euler_phi","","",null,[[]]],[5,"moebius","","g(d) = Sigma mu(d) * f(n/d)",null,[[],["hashmap",3]]],[11,"new","","",63,[[]]],[11,"is_prime","","",63,[[]]],[11,"prime_factors","","",63,[[],["vec",3]]],[11,"new","","",64,[[]]],[11,"get","","",64,[[]]],[0,"num","competitive","",null,null],[0,"complex","competitive::num","",null,null],[3,"Complex","competitive::num::complex","",null,null],[12,"re","","",65,null],[12,"im","","",65,null],[11,"new","","",65,[[]]],[11,"transpose","","",65,[[]]],[11,"conjugate","","",65,[[]]],[11,"dot","","",65,[[]]],[11,"cross","","",65,[[]]],[11,"norm","","",65,[[]]],[11,"polar","","",65,[[]]],[11,"abs","","",65,[[]]],[11,"unit","","",65,[[]]],[11,"angle","","",65,[[]]],[0,"mint","competitive::num","modint",null,null],[3,"MInt","competitive::num::mint","",null,null],[0,"modulus","","",null,null],[3,"Modulo1000000007","competitive::num::mint::modulus","",null,null],[3,"Modulo1000000009","","",null,null],[3,"Modulo998244353","","",null,null],[0,"modu32_impls","competitive::num::mint","",null,null],[8,"Modulus","","",null,null],[18,"MODULUS","","",66,null],[11,"modulo","","",66,[[]]],[11,"new","","",67,[[]]],[11,"new_unchecked","","",67,[[]]],[11,"one","","",67,[[]]],[11,"zero","","",67,[[]]],[11,"get_mod","","",67,[[]]],[11,"pow","","",67,[[]]],[11,"inv","","",67,[[]]],[0,"quad_double","competitive::num","",null,null],[3,"QuadDouble","competitive::num::quad_double","ref: https://na-inet.jp/na/qd_ja.pdf",null,null],[12,"0","","",68,null],[0,"quad_double_impl","","",null,null],[5,"quick_two_sum","competitive::num::quad_double::quad_double_impl","",null,[[]]],[5,"two_sum","","",null,[[]]],[5,"split","","",null,[[]]],[5,"two_prod","","",null,[[]]],[5,"three_three_sum","","",null,[[]]],[5,"three_two_sum","","",null,[[]]],[5,"multiple_three_sum","","",null,[[]]],[5,"multiple_two_sum","","",null,[[]]],[5,"double_accumulate","","",null,[[]]],[11,"new","competitive::num::quad_double","",68,[[]]],[11,"renormalize","","",68,[[]]],[11,"is_zero","","",68,[[]]],[11,"is_sign_negative","","",68,[[]]],[11,"sqrt","","",68,[[]]],[11,"abs","","",68,[[]]],[11,"div2","","",68,[[]]],[0,"rmint","competitive::num","runtime modint",null,null],[3,"RMInt","competitive::num::rmint","",null,null],[0,"modu32_impls","","",null,null],[11,"new","","",69,[[]]],[11,"new_unchecked","","",69,[[]]],[11,"one","","",69,[[]]],[11,"zero","","",69,[[]]],[11,"get_modulus","","",69,[[]]],[11,"set_modulus","","",69,[[]]],[11,"pow","","",69,[[]]],[11,"inv","","",69,[[]]],[0,"string","competitive","string algorithems",null,null],[0,"knuth_morris_pratt","competitive::string","",null,null],[3,"KnuthMorrisPratt","competitive::string::knuth_morris_pratt","",null,null],[11,"new","","",70,[[["vec",3]]]],[11,"search_all","","",70,[[["vec",3]],["vec",3]]],[0,"rolling_hash","competitive::string","",null,null],[3,"RollingHash","competitive::string::rolling_hash","",null,null],[3,"MultipleRollingHash","","",null,null],[18,"MOD","","",71,null],[11,"mersenne_mod","","",71,[[]]],[11,"mersenne_mul","","",71,[[]]],[11,"mersenne_mul_mod","","",71,[[]]],[11,"new","","",71,[[["vec",3]]]],[11,"hash_once","","",71,[[["vec",3]]]],[11,"find","","S [l, r)",71,[[]]],[11,"concat","","",71,[[]]],[11,"new","","",72,[[["vec",3]]]],[11,"new_rand","","",72,[[["vec",3]]]],[11,"find","","",72,[[],["vec",3]]],[11,"concat","","",72,[[["vec",3]],["vec",3]]],[0,"suffix_array","competitive::string","",null,null],[3,"SuffixArray","competitive::string::suffix_array","",null,null],[11,"new","","",73,[[["vec",3]]]],[11,"len","","",73,[[]]],[11,"longest_common_prefix_array","","",73,[[],["vec",3]]],[0,"z_algorithm","competitive::string","",null,null],[3,"Zarray","competitive::string::z_algorithm","",null,null],[11,"new","","",74,[[]]],[11,"search","","",74,[[["vec",3],["eq",8]],["vec",3]]],[0,"tools","competitive","",null,null],[0,"random","competitive::tools","",null,null],[3,"Xorshift","competitive::tools::random","",null,null],[11,"new","","",75,[[]]],[11,"time","","",75,[[]]],[11,"next","","",75,[[]]],[11,"rand","","",75,[[]]],[11,"rands","","",75,[[],["vec",3]]],[11,"randf","","",75,[[]]],[0,"scanner","competitive::tools","",null,null],[3,"Scanner","competitive::tools::scanner","",null,null],[5,"read_stdin_all","","",null,[[],["string",3]]],[5,"read_all","","",null,[[],["string",3]]],[8,"IterScan","","",null,null],[10,"scan","","",76,[[],["option",4]]],[11,"new","","",77,[[]]],[11,"scan","","",77,[[],["iterscan",8]]],[11,"scan_vec","","",77,[[],[["vec",3],["iterscan",8]]]],[11,"scan_chars","","",77,[[],["vec",3]]],[0,"tree","competitive","tree algorithems",null,null],[0,"depth","competitive::tree","",null,null],[11,"tree_depth","competitive::graph::graph","",48,[[],["vec",3]]],[11,"tree_size","","",48,[[],["vec",3]]],[0,"euler_tour","competitive::tree","",null,null],[3,"EulerTourForEdge","competitive::tree::euler_tour","",null,null],[3,"EulerTourForVertex","","",null,null],[3,"EulerTourForRichVertex","","",null,null],[3,"LowestCommonAncestor","","",null,null],[3,"LCAMonoid","","",null,null],[0,"impl_lcam","","",null,null],[11,"new","","",78,[[["graph",3]]]],[11,"ancestor","","",78,[[]]],[11,"new","","",79,[[]]],[11,"len","","",79,[[]]],[11,"edge_tour","","",79,[[["graph",3]]]],[11,"new","","",80,[[]]],[11,"len","","",80,[[]]],[11,"subtree_vertex_tour","","",80,[[["graph",3]]]],[11,"path_vertex_tour","","",80,[[["graph",3]]]],[11,"subtree_query","","",80,[[["fnmut",8]]]],[11,"subtree_update","","",80,[[["fnmut",8]]]],[11,"path_query","","",80,[[["fnmut",8]]]],[11,"path_update","","",80,[[["fnmut",8]]]],[11,"new","","",81,[[]]],[11,"len","","",81,[[]]],[11,"vertex_tour","","",81,[[["graph",3]]]],[11,"query","","",81,[[["fnmut",8]]]],[11,"gen_lca","","",81,[[["graph",3]],["lowestcommonancestor",3]]],[11,"lca","","",82,[[]]],[0,"rerooting","competitive::tree","dynamic programming on all-rooted trees",null,null],[3,"ReRooting","competitive::tree::rerooting","dynamic programming on all-rooted trees",null,null],[12,"n","","vertex size",83,null],[12,"monoid","","merge subtree",83,null],[12,"dp","","dp[v]: result of v-rooted tree",83,null],[12,"ep","","ep[e]: result of e-subtree, if e >= n then…",83,null],[12,"rooting","","rooting(data, vid, (Optional)eid): add root node(vid),…",83,null],[11,"new","","",83,[[]]],[11,"rerooting","","",83,[[["graph",3]]]],[0,"tree","competitive::tree","",null,null],[3,"TreeRec","competitive::tree::tree","",null,null],[12,"n","","",84,null],[11,"new","","",84,[[]]],[11,"dfs","","",84,[[["graph",3]]]],[0,"aizu_online_judge","competitive","Aizu Online Judge",null,null],[0,"dsl","competitive::aizu_online_judge","",null,null],[0,"dsl_2_d","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_d","competitive::aizu_online_judge::dsl::dsl_2_d","✅  AC  74ms",null,[[],["result",6]]],[0,"dsl_2_e","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_e","competitive::aizu_online_judge::dsl::dsl_2_e","✅  AC  52ms",null,[[],["result",6]]],[0,"dsl_2_f","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_f","competitive::aizu_online_judge::dsl::dsl_2_f","✅  AC  103ms",null,[[],["result",6]]],[0,"dsl_2_g","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_g","competitive::aizu_online_judge::dsl::dsl_2_g","✅  AC  63ms",null,[[],["result",6]]],[0,"dsl_2_h","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_h","competitive::aizu_online_judge::dsl::dsl_2_h","✅  AC  68ms",null,[[],["result",6]]],[0,"dsl_2_i","competitive::aizu_online_judge::dsl","",null,null],[5,"dsl_2_i","competitive::aizu_online_judge::dsl::dsl_2_i","✅  AC  86ms",null,[[],["result",6]]],[0,"grl","competitive::aizu_online_judge","",null,null],[0,"grl_1_a","competitive::aizu_online_judge::grl","",null,null],[5,"grl_1_a","competitive::aizu_online_judge::grl::grl_1_a","✅  AC  122ms",null,[[],["result",6]]],[0,"grl_1_b","competitive::aizu_online_judge::grl","",null,null],[5,"grl_1_b","competitive::aizu_online_judge::grl::grl_1_b","✅  AC  7ms",null,[[],["result",6]]],[0,"grl_1_c","competitive::aizu_online_judge::grl","",null,null],[5,"grl_1_c","competitive::aizu_online_judge::grl::grl_1_c","✅  AC  5ms",null,[[],["result",6]]],[0,"itp1","competitive::aizu_online_judge","",null,null],[0,"itp1_1_a","competitive::aizu_online_judge::itp1","",null,null],[5,"itp1_1_a","competitive::aizu_online_judge::itp1::itp1_1_a","✅  AC  0ms",null,[[],["result",6]]],[0,"library_checker","competitive","Library-Checker",null,null],[0,"datastructure","competitive::library_checker","",null,null],[0,"point_add_range_sum","competitive::library_checker::datastructure","",null,null],[5,"point_add_range_sum_binary_indexed_tree","competitive::library_checker::datastructure::point_add_range_sum","✅  AC  100ms",null,[[],["result",6]]],[5,"point_add_range_sum_segment_tree","","✅  AC  139ms",null,[[],["result",6]]],[0,"point_set_range_composite","competitive::library_checker::datastructure","",null,null],[5,"point_set_range_composite","competitive::library_checker::datastructure::point_set_range_composite","✅  AC  230ms",null,[[],["result",6]]],[0,"queue_operate_all_composite","competitive::library_checker::datastructure","",null,null],[5,"queue_operate_all_composite","competitive::library_checker::datastructure::queue_operate_all_composite","✅  AC  49ms",null,[[],["result",6]]],[0,"range_affine_range_sum","competitive::library_checker::datastructure","",null,null],[5,"range_affine_range_sum","competitive::library_checker::datastructure::range_affine_range_sum","✅  AC  892ms",null,[[],["result",6]]],[0,"staticrmq","competitive::library_checker::datastructure","",null,null],[5,"staticrmq_disjoint_sparse_table","competitive::library_checker::datastructure::staticrmq","✅  AC  167ms",null,[[],["result",6]]],[5,"staticrmq_segment_tree","","✅  AC  163ms",null,[[],["result",6]]],[0,"unionfind","competitive::library_checker::datastructure","",null,null],[5,"unionfind","competitive::library_checker::datastructure::unionfind","✅  AC  21ms",null,[[],["result",6]]],[0,"graph","competitive::library_checker","",null,null],[0,"bipartitematching","competitive::library_checker::graph","",null,null],[5,"bipartitematching","competitive::library_checker::graph::bipartitematching","✅  AC  653ms",null,[[],["result",6]]],[0,"lca","competitive::library_checker::graph","",null,null],[5,"lca","competitive::library_checker::graph::lca","✅  AC  721ms",null,[[],["result",6]]],[0,"scc","competitive::library_checker::graph","",null,null],[5,"scc","competitive::library_checker::graph::scc","✅  AC  656ms",null,[[],["result",6]]],[0,"math","competitive::library_checker","",null,null],[0,"two_sat","competitive::library_checker::math","",null,null],[5,"two_sat","competitive::library_checker::math::two_sat","✅  AC  972ms",null,[[],["result",6]]],[0,"sample","competitive::library_checker","",null,null],[0,"aplusb","competitive::library_checker::sample","",null,null],[5,"aplusb","competitive::library_checker::sample::aplusb","✅  AC  0ms",null,[[],["result",6]]],[0,"many_aplusb","competitive::library_checker::sample","",null,null],[5,"many_aplusb","competitive::library_checker::sample::many_aplusb","✅  AC  211ms",null,[[],["result",6]]],[0,"string","competitive::library_checker","",null,null],[0,"suffixarray","competitive::library_checker::string","",null,null],[5,"suffixarray","competitive::library_checker::string::suffixarray","✅  AC  859ms",null,[[],["result",6]]],[0,"zalgorithm","competitive::library_checker::string","",null,null],[5,"zalgorithm","competitive::library_checker::string::zalgorithm","✅  AC  30ms",null,[[],["result",6]]],[14,"impl_additive_identity","competitive","",null,null],[14,"impl_multiplicative_identity","","",null,null],[14,"impl_bitand_identity","","",null,null],[14,"impl_bitor_identity","","",null,null],[14,"read_value","","",null,null],[14,"input_inner","","",null,null],[14,"input","","",null,null],[14,"comprehension","","",null,null],[14,"min","","",null,null],[14,"chmin","","",null,null],[14,"max","","",null,null],[14,"chmax","","",null,null],[14,"scan_value","","",null,null],[14,"scan","","",null,null],[11,"from","competitive::algebra::operations","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_owned","","",12,[[]]],[11,"clone_into","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"to_owned","","",85,[[]]],[11,"clone_into","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","competitive::algorithm::compress","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","competitive::algorithm::convex_hull_trick","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","competitive::data_structure","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","competitive::data_structure::binary_indexed_tree","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","competitive::data_structure::bitset","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"from","competitive::data_structure::disjoint_sparse_table","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"from","competitive::data_structure::lazy_segment_tree","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","competitive::data_structure::segment_tree","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","competitive::data_structure::sliding_winsow_aggregation","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","competitive::data_structure::union_find","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","competitive::geometry","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","competitive::geometry::circle","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","competitive::geometry::line","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","competitive::graph::graph","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",50,[[]]],[11,"into","","",50,[[]]],[11,"to_owned","","",50,[[]]],[11,"clone_into","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"into_iter","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"into_iter","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","competitive::graph::maximum_flow","",51,[[]]],[11,"into","","",51,[[]]],[11,"to_owned","","",51,[[]]],[11,"clone_into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","","",53,[[]]],[11,"into","","",53,[[]]],[11,"try_from","","",53,[[],["result",4]]],[11,"try_into","","",53,[[],["result",4]]],[11,"borrow","","",53,[[]]],[11,"borrow_mut","","",53,[[]]],[11,"type_id","","",53,[[],["typeid",3]]],[11,"from","","",52,[[]]],[11,"into","","",52,[[]]],[11,"try_from","","",52,[[],["result",4]]],[11,"try_into","","",52,[[],["result",4]]],[11,"borrow","","",52,[[]]],[11,"borrow_mut","","",52,[[]]],[11,"type_id","","",52,[[],["typeid",3]]],[11,"from","competitive::graph::minimum_cost_flow","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","competitive::graph::strongly_connected_component","",56,[[]]],[11,"into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","competitive::math::factorial","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","competitive::math::matrix","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","competitive::math::nums","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","competitive::math::polynomial","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","competitive::math::prime","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","competitive::num::complex","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","competitive::num::mint","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"to_string","","",67,[[],["string",3]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","competitive::num::mint::modulus","",88,[[]]],[11,"into","","",88,[[]]],[11,"to_owned","","",88,[[]]],[11,"clone_into","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"to_owned","","",90,[[]]],[11,"clone_into","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","competitive::num::quad_double","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"to_string","","",68,[[],["string",3]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","competitive::num::rmint","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"to_string","","",69,[[],["string",3]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","competitive::string::knuth_morris_pratt","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","competitive::string::rolling_hash","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","competitive::string::suffix_array","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","competitive::string::z_algorithm","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","competitive::tools::random","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","competitive::tools::scanner","",77,[[]]],[11,"into","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","competitive::tree::euler_tour","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"to_owned","","",81,[[]]],[11,"clone_into","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"to_owned","","",82,[[]]],[11,"clone_into","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","competitive::tree::rerooting","",83,[[]]],[11,"into","","",83,[[]]],[11,"to_owned","","",83,[[]]],[11,"clone_into","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","competitive::tree::tree","",84,[[]]],[11,"into","","",84,[[]]],[11,"to_owned","","",84,[[]]],[11,"clone_into","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"scan","competitive::num::mint","",67,[[],["option",4]]],[11,"operate","competitive::algebra::operations","",5,[[]]],[11,"operate","","",6,[[]]],[11,"operate","","",7,[[]]],[11,"operate","","",8,[[]]],[11,"operate","","",9,[[]]],[11,"operate","","",10,[[]]],[11,"operate","","",11,[[]]],[11,"operate","","",12,[[]]],[11,"operate","","",13,[[]]],[11,"operate","","",14,[[]]],[11,"operate","","",15,[[]]],[11,"operate","","",85,[[]]],[11,"operate","","",16,[[]]],[11,"operate","","",17,[[]]],[11,"operate","","",18,[[]]],[11,"operate","competitive::tree::euler_tour","",78,[[]]],[11,"unit","competitive::algebra::operations","",5,[[]]],[11,"unit","","",6,[[]]],[11,"unit","","",7,[[]]],[11,"unit","","",8,[[]]],[11,"unit","","",9,[[]]],[11,"unit","","",10,[[]]],[11,"unit","","",11,[[]]],[11,"unit","","",12,[[]]],[11,"unit","","",13,[[]]],[11,"unit","","",14,[[]]],[11,"unit","","",15,[[]]],[11,"unit","","",16,[[]]],[11,"unit","","",17,[[]]],[11,"unit","","",18,[[]]],[11,"inverse","","",9,[[]]],[11,"inverse","","",10,[[]]],[11,"inverse","","",15,[[]]],[11,"inverse","","",17,[[]]],[11,"rinv_operation","","",9,[[]]],[11,"rinv_operation","","",10,[[]]],[11,"zero","competitive::num::mint","",67,[[]]],[11,"zero","competitive::num::rmint","",69,[[]]],[11,"one","competitive::num::mint","",67,[[]]],[11,"one","competitive::num::rmint","",69,[[]]],[11,"from","competitive::num::mint","",67,[[]]],[11,"from","","",67,[[]]],[11,"from","competitive::num::quad_double","",68,[[]]],[11,"from","competitive::num::rmint","",69,[[]]],[11,"from","","",69,[[]]],[11,"into","competitive::num::quad_double","",68,[[]]],[11,"next","competitive::graph::graph","",86,[[],["option",4]]],[11,"next","","",87,[[],["option",4]]],[11,"clone","competitive::algebra::operations","",5,[[],["maxoperation",3]]],[11,"clone","","",6,[[],["minoperation",3]]],[11,"clone","","",7,[[],["firstoperation",3]]],[11,"clone","","",8,[[],["lastoperation",3]]],[11,"clone","","",9,[[],["additiveoperation",3]]],[11,"clone","","",10,[[],["multiplicativeoperation",3]]],[11,"clone","","",11,[[],["linearoperation",3]]],[11,"clone","","",12,[[],["bitandoperation",3]]],[11,"clone","","",13,[[],["bitoroperation",3]]],[11,"clone","","",14,[[],["monoidaloperation",3]]],[11,"clone","","",15,[[],["groupoperation",3]]],[11,"clone","","",85,[[],["assocoativeoperator",3]]],[11,"clone","","",16,[[],["absorbedassocoativeoperator",3]]],[11,"clone","","",17,[[],["cartesianoperation",3]]],[11,"clone","","",18,[[],["countingoperation",3]]],[11,"clone","competitive::algorithm::compress","",25,[[],["compress",3]]],[11,"clone","competitive::algorithm::convex_hull_trick","",26,[[],["chtline",3]]],[11,"clone","","",27,[[],["convexhulltrick",3]]],[11,"clone","competitive::data_structure::binary_indexed_tree","",32,[[],["binaryindexedtree",3]]],[11,"clone","","",33,[[],["binaryindexedtree2d",3]]],[11,"clone","competitive::data_structure::bitset","",34,[[],["bitset",3]]],[11,"clone","competitive::data_structure::disjoint_sparse_table","",35,[[],["disjointsparsetable",3]]],[11,"clone","competitive::data_structure::lazy_segment_tree","",36,[[],["lazysegmenttree",3]]],[11,"clone","competitive::data_structure::segment_tree","",37,[[],["segmenttree",3]]],[11,"clone","competitive::data_structure::sliding_winsow_aggregation","",38,[[],["queueaggregation",3]]],[11,"clone","","",39,[[],["dequeaggregation",3]]],[11,"clone","competitive::data_structure::union_find","",40,[[],["unionfind",3]]],[11,"clone","","",41,[[],["weightedunionfind",3]]],[11,"clone","competitive::data_structure","",30,[[],["rev",3]]],[11,"clone","competitive::geometry::circle","",44,[[],["circle",3]]],[11,"clone","competitive::geometry::line","",45,[[],["line",3]]],[11,"clone","","",46,[[],["linesegment",3]]],[11,"clone","competitive::geometry","",42,[[],["real",3]]],[11,"clone","","",43,[[],["ccw",4]]],[11,"clone","competitive::graph::graph","",47,[[],["adjacent",3]]],[11,"clone","","",48,[[],["graph",3]]],[11,"clone","","",50,[[],["gridgraph",3]]],[11,"clone","competitive::graph::maximum_flow","",51,[[],["revedge",3]]],[11,"clone","competitive::graph::minimum_cost_flow","",54,[[],["revedge",3]]],[11,"clone","competitive::math::factorial","",58,[[],["memorizedfactorial",3]]],[11,"clone","","",59,[[],["smallmodmemorizedfactorial",3]]],[11,"clone","competitive::math::matrix","",60,[[],["matrix",3]]],[11,"clone","competitive::math::nums","",61,[[],["babystepgiantstep",3]]],[11,"clone","competitive::math::polynomial","",62,[[],["polynomial",3]]],[11,"clone","competitive::math::prime","",63,[[],["primetable",3]]],[11,"clone","","",64,[[],["eulerphitable",3]]],[11,"clone","competitive::num::complex","",65,[[],["complex",3]]],[11,"clone","competitive::num::mint::modulus","",88,[[],["modulo1000000007",3]]],[11,"clone","","",89,[[],["modulo1000000009",3]]],[11,"clone","","",90,[[],["modulo998244353",3]]],[11,"clone","competitive::num::mint","",67,[[],["mint",3]]],[11,"clone","competitive::num::quad_double","",68,[[],["quaddouble",3]]],[11,"clone","competitive::num::rmint","",69,[[],["rmint",3]]],[11,"clone","competitive::string::knuth_morris_pratt","",70,[[],["knuthmorrispratt",3]]],[11,"clone","competitive::string::rolling_hash","",71,[[],["rollinghash",3]]],[11,"clone","","",72,[[],["multiplerollinghash",3]]],[11,"clone","competitive::string::suffix_array","",73,[[],["suffixarray",3]]],[11,"clone","competitive::string::z_algorithm","",74,[[],["zarray",3]]],[11,"clone","competitive::tools::random","",75,[[],["xorshift",3]]],[11,"clone","competitive::tree::euler_tour","",79,[[],["eulertourforedge",3]]],[11,"clone","","",80,[[],["eulertourforvertex",3]]],[11,"clone","","",81,[[],["eulertourforrichvertex",3]]],[11,"clone","","",82,[[],["lowestcommonancestor",3]]],[11,"clone","","",78,[[],["lcamonoid",3]]],[11,"clone","competitive::tree::rerooting","",83,[[],["rerooting",3]]],[11,"clone","competitive::tree::tree","",84,[[],["treerec",3]]],[11,"default","competitive::algebra::operations","",5,[[],["maxoperation",3]]],[11,"default","","",6,[[],["minoperation",3]]],[11,"default","","",7,[[],["firstoperation",3]]],[11,"default","","",8,[[],["lastoperation",3]]],[11,"default","","",9,[[],["additiveoperation",3]]],[11,"default","","",10,[[],["multiplicativeoperation",3]]],[11,"default","","",11,[[],["linearoperation",3]]],[11,"default","","",12,[[],["bitandoperation",3]]],[11,"default","","",13,[[],["bitoroperation",3]]],[11,"default","competitive::algorithm::convex_hull_trick","",26,[[],["chtline",3]]],[11,"default","competitive::data_structure::bitset","",34,[[],["bitset",3]]],[11,"default","competitive::graph::graph","",47,[[],["adjacent",3]]],[11,"default","","",48,[[],["graph",3]]],[11,"default","competitive::math::polynomial","",62,[[],["polynomial",3]]],[11,"default","competitive::num::complex","",65,[[],["complex",3]]],[11,"default","competitive::num::mint::modulus","",88,[[],["modulo1000000007",3]]],[11,"default","","",89,[[],["modulo1000000009",3]]],[11,"default","","",90,[[],["modulo998244353",3]]],[11,"default","competitive::num::mint","",67,[[],["mint",3]]],[11,"default","competitive::num::quad_double","",68,[[],["quaddouble",3]]],[11,"default","competitive::num::rmint","",69,[[],["rmint",3]]],[11,"default","competitive::tools::random","",75,[[]]],[11,"default","competitive::tree::euler_tour","",79,[[],["eulertourforedge",3]]],[11,"default","","",80,[[],["eulertourforvertex",3]]],[11,"default","","",81,[[],["eulertourforrichvertex",3]]],[11,"cmp","competitive::algebra::operations","",5,[[["maxoperation",3]],["ordering",4]]],[11,"cmp","","",6,[[["minoperation",3]],["ordering",4]]],[11,"cmp","","",7,[[["firstoperation",3]],["ordering",4]]],[11,"cmp","","",8,[[["lastoperation",3]],["ordering",4]]],[11,"cmp","","",9,[[["additiveoperation",3]],["ordering",4]]],[11,"cmp","","",10,[[["multiplicativeoperation",3]],["ordering",4]]],[11,"cmp","","",11,[[["linearoperation",3]],["ordering",4]]],[11,"cmp","","",12,[[["bitandoperation",3]],["ordering",4]]],[11,"cmp","","",13,[[["bitoroperation",3]],["ordering",4]]],[11,"cmp","competitive::data_structure::bitset","",34,[[["bitset",3]],["ordering",4]]],[11,"cmp","competitive::data_structure","",30,[[["rev",3]],["ordering",4]]],[11,"cmp","","",31,[[["totalord",3]],["ordering",4]]],[11,"cmp","competitive::geometry","",43,[[["ccw",4]],["ordering",4]]],[11,"cmp","competitive::graph::graph","",47,[[["adjacent",3]],["ordering",4]]],[11,"cmp","","",50,[[["gridgraph",3]],["ordering",4]]],[11,"cmp","competitive::num::mint::modulus","",88,[[["modulo1000000007",3]],["ordering",4]]],[11,"cmp","","",89,[[["modulo1000000009",3]],["ordering",4]]],[11,"cmp","","",90,[[["modulo998244353",3]],["ordering",4]]],[11,"cmp","competitive::num::mint","",67,[[["mint",3]],["ordering",4]]],[11,"cmp","competitive::num::rmint","",69,[[["rmint",3]],["ordering",4]]],[11,"eq","competitive::algebra::operations","",5,[[["maxoperation",3]]]],[11,"ne","","",5,[[["maxoperation",3]]]],[11,"eq","","",6,[[["minoperation",3]]]],[11,"ne","","",6,[[["minoperation",3]]]],[11,"eq","","",7,[[["firstoperation",3]]]],[11,"ne","","",7,[[["firstoperation",3]]]],[11,"eq","","",8,[[["lastoperation",3]]]],[11,"ne","","",8,[[["lastoperation",3]]]],[11,"eq","","",9,[[["additiveoperation",3]]]],[11,"ne","","",9,[[["additiveoperation",3]]]],[11,"eq","","",10,[[["multiplicativeoperation",3]]]],[11,"ne","","",10,[[["multiplicativeoperation",3]]]],[11,"eq","","",11,[[["linearoperation",3]]]],[11,"ne","","",11,[[["linearoperation",3]]]],[11,"eq","","",12,[[["bitandoperation",3]]]],[11,"ne","","",12,[[["bitandoperation",3]]]],[11,"eq","","",13,[[["bitoroperation",3]]]],[11,"ne","","",13,[[["bitoroperation",3]]]],[11,"eq","competitive::algorithm::convex_hull_trick","",26,[[["chtline",3]]]],[11,"ne","","",26,[[["chtline",3]]]],[11,"eq","competitive::data_structure::bitset","",34,[[["bitset",3]]]],[11,"ne","","",34,[[["bitset",3]]]],[11,"eq","competitive::data_structure","",30,[[["rev",3]]]],[11,"ne","","",30,[[["rev",3]]]],[11,"eq","","",31,[[["totalord",3]]]],[11,"ne","","",31,[[["totalord",3]]]],[11,"eq","competitive::geometry::circle","",44,[[["circle",3]]]],[11,"ne","","",44,[[["circle",3]]]],[11,"eq","competitive::geometry::line","",45,[[["line",3]]]],[11,"ne","","",45,[[["line",3]]]],[11,"eq","","",46,[[["linesegment",3]]]],[11,"ne","","",46,[[["linesegment",3]]]],[11,"eq","competitive::geometry","",42,[[["real",3]]]],[11,"eq","","",43,[[["ccw",4]]]],[11,"eq","competitive::graph::graph","",47,[[["adjacent",3]]]],[11,"ne","","",47,[[["adjacent",3]]]],[11,"eq","","",50,[[["gridgraph",3]]]],[11,"ne","","",50,[[["gridgraph",3]]]],[11,"eq","competitive::math::matrix","",60,[[["matrix",3]]]],[11,"ne","","",60,[[["matrix",3]]]],[11,"eq","competitive::math::polynomial","",62,[[["polynomial",3]]]],[11,"ne","","",62,[[["polynomial",3]]]],[11,"eq","competitive::num::complex","",65,[[["complex",3]]]],[11,"ne","","",65,[[["complex",3]]]],[11,"eq","competitive::num::mint::modulus","",88,[[["modulo1000000007",3]]]],[11,"eq","","",89,[[["modulo1000000009",3]]]],[11,"eq","","",90,[[["modulo998244353",3]]]],[11,"eq","competitive::num::mint","",67,[[["mint",3]]]],[11,"ne","","",67,[[["mint",3]]]],[11,"eq","competitive::num::quad_double","",68,[[["quaddouble",3]]]],[11,"ne","","",68,[[["quaddouble",3]]]],[11,"eq","competitive::num::rmint","",69,[[["rmint",3]]]],[11,"ne","","",69,[[["rmint",3]]]],[11,"partial_cmp","competitive::algebra::operations","",5,[[["maxoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",5,[[["maxoperation",3]]]],[11,"le","","",5,[[["maxoperation",3]]]],[11,"gt","","",5,[[["maxoperation",3]]]],[11,"ge","","",5,[[["maxoperation",3]]]],[11,"partial_cmp","","",6,[[["minoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",6,[[["minoperation",3]]]],[11,"le","","",6,[[["minoperation",3]]]],[11,"gt","","",6,[[["minoperation",3]]]],[11,"ge","","",6,[[["minoperation",3]]]],[11,"partial_cmp","","",7,[[["firstoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",7,[[["firstoperation",3]]]],[11,"le","","",7,[[["firstoperation",3]]]],[11,"gt","","",7,[[["firstoperation",3]]]],[11,"ge","","",7,[[["firstoperation",3]]]],[11,"partial_cmp","","",8,[[["lastoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",8,[[["lastoperation",3]]]],[11,"le","","",8,[[["lastoperation",3]]]],[11,"gt","","",8,[[["lastoperation",3]]]],[11,"ge","","",8,[[["lastoperation",3]]]],[11,"partial_cmp","","",9,[[["additiveoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["additiveoperation",3]]]],[11,"le","","",9,[[["additiveoperation",3]]]],[11,"gt","","",9,[[["additiveoperation",3]]]],[11,"ge","","",9,[[["additiveoperation",3]]]],[11,"partial_cmp","","",10,[[["multiplicativeoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",10,[[["multiplicativeoperation",3]]]],[11,"le","","",10,[[["multiplicativeoperation",3]]]],[11,"gt","","",10,[[["multiplicativeoperation",3]]]],[11,"ge","","",10,[[["multiplicativeoperation",3]]]],[11,"partial_cmp","","",11,[[["linearoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",11,[[["linearoperation",3]]]],[11,"le","","",11,[[["linearoperation",3]]]],[11,"gt","","",11,[[["linearoperation",3]]]],[11,"ge","","",11,[[["linearoperation",3]]]],[11,"partial_cmp","","",12,[[["bitandoperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",12,[[["bitandoperation",3]]]],[11,"le","","",12,[[["bitandoperation",3]]]],[11,"gt","","",12,[[["bitandoperation",3]]]],[11,"ge","","",12,[[["bitandoperation",3]]]],[11,"partial_cmp","","",13,[[["bitoroperation",3]],[["option",4],["ordering",4]]]],[11,"lt","","",13,[[["bitoroperation",3]]]],[11,"le","","",13,[[["bitoroperation",3]]]],[11,"gt","","",13,[[["bitoroperation",3]]]],[11,"ge","","",13,[[["bitoroperation",3]]]],[11,"partial_cmp","competitive::data_structure::bitset","",34,[[["bitset",3]],[["option",4],["ordering",4]]]],[11,"lt","","",34,[[["bitset",3]]]],[11,"le","","",34,[[["bitset",3]]]],[11,"gt","","",34,[[["bitset",3]]]],[11,"ge","","",34,[[["bitset",3]]]],[11,"partial_cmp","competitive::data_structure","",30,[[["rev",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",31,[[["totalord",3]],[["option",4],["ordering",4]]]],[11,"lt","","",31,[[["totalord",3]]]],[11,"le","","",31,[[["totalord",3]]]],[11,"gt","","",31,[[["totalord",3]]]],[11,"ge","","",31,[[["totalord",3]]]],[11,"partial_cmp","competitive::geometry","",42,[[["real",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",43,[[["ccw",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::graph::graph","",47,[[["adjacent",3]],[["option",4],["ordering",4]]]],[11,"lt","","",47,[[["adjacent",3]]]],[11,"le","","",47,[[["adjacent",3]]]],[11,"gt","","",47,[[["adjacent",3]]]],[11,"ge","","",47,[[["adjacent",3]]]],[11,"partial_cmp","","",50,[[["gridgraph",3]],[["option",4],["ordering",4]]]],[11,"lt","","",50,[[["gridgraph",3]]]],[11,"le","","",50,[[["gridgraph",3]]]],[11,"gt","","",50,[[["gridgraph",3]]]],[11,"ge","","",50,[[["gridgraph",3]]]],[11,"partial_cmp","competitive::num::mint::modulus","",88,[[["modulo1000000007",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",89,[[["modulo1000000009",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",90,[[["modulo998244353",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::num::mint","",67,[[["mint",3]],[["option",4],["ordering",4]]]],[11,"lt","","",67,[[["mint",3]]]],[11,"le","","",67,[[["mint",3]]]],[11,"gt","","",67,[[["mint",3]]]],[11,"ge","","",67,[[["mint",3]]]],[11,"partial_cmp","competitive::num::quad_double","",68,[[["quaddouble",3]],[["option",4],["ordering",4]]]],[11,"lt","","",68,[[["quaddouble",3]]]],[11,"le","","",68,[[["quaddouble",3]]]],[11,"gt","","",68,[[["quaddouble",3]]]],[11,"ge","","",68,[[["quaddouble",3]]]],[11,"partial_cmp","competitive::num::rmint","",69,[[["rmint",3]],[["option",4],["ordering",4]]]],[11,"lt","","",69,[[["rmint",3]]]],[11,"le","","",69,[[["rmint",3]]]],[11,"gt","","",69,[[["rmint",3]]]],[11,"ge","","",69,[[["rmint",3]]]],[11,"fmt","competitive::algebra::operations","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",10,[[["formatter",3]],["result",6]]],[11,"fmt","","",11,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",13,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",85,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::algorithm::compress","",25,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::algorithm::convex_hull_trick","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",27,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::binary_indexed_tree","",32,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::bitset","",34,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::disjoint_sparse_table","",35,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::lazy_segment_tree","",36,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::segment_tree","",37,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::sliding_winsow_aggregation","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure::union_find","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure","",30,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry::circle","",44,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry::line","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::graph","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",50,[[["formatter",3]],["result",6]]],[11,"fmt","","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",87,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::maximum_flow","",51,[[["formatter",3]],["result",6]]],[11,"fmt","","",53,[[["formatter",3]],["result",6]]],[11,"fmt","","",52,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::minimum_cost_flow","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",55,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::strongly_connected_component","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",57,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::factorial","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::matrix","",60,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::nums","",61,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::polynomial","",62,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math::prime","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num::complex","",65,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num::mint::modulus","",88,[[["formatter",3]],["result",6]]],[11,"fmt","","",89,[[["formatter",3]],["result",6]]],[11,"fmt","","",90,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num::mint","",67,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num::quad_double","",68,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num::rmint","",69,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string::knuth_morris_pratt","",70,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string::rolling_hash","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string::suffix_array","",73,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string::z_algorithm","",74,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools::random","",75,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools::scanner","",77,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree::euler_tour","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",81,[[["formatter",3]],["result",6]]],[11,"fmt","","",82,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree::rerooting","",83,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree::tree","",84,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num::mint","",67,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","competitive::num::quad_double","",68,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","competitive::num::rmint","",69,[[["formatter",3]],[["result",4],["error",3]]]],[11,"div","competitive::num::complex","",65,[[]]],[11,"div","","",65,[[]]],[11,"div","competitive::num::mint","",67,[[]]],[11,"div","","",67,[[["mint",3]]]],[11,"div","competitive::num::quad_double","",68,[[]]],[11,"div","competitive::num::rmint","",69,[[]]],[11,"div","","",69,[[["rmint",3]]]],[11,"sub","competitive::num::complex","",65,[[]]],[11,"sub","","",65,[[]]],[11,"sub","competitive::num::mint","",67,[[]]],[11,"sub","","",67,[[["mint",3]]]],[11,"sub","competitive::num::quad_double","",68,[[]]],[11,"sub","competitive::num::rmint","",69,[[]]],[11,"sub","","",69,[[["rmint",3]]]],[11,"add","competitive::num::complex","",65,[[]]],[11,"add","","",65,[[]]],[11,"add","competitive::num::mint","",67,[[]]],[11,"add","","",67,[[["mint",3]]]],[11,"add","competitive::num::quad_double","",68,[[]]],[11,"add","","",68,[[]]],[11,"add","competitive::num::rmint","",69,[[]]],[11,"add","","",69,[[["rmint",3]]]],[11,"mul","competitive::num::complex","",65,[[]]],[11,"mul","","",65,[[]]],[11,"mul","competitive::num::mint","",67,[[]]],[11,"mul","","",67,[[["mint",3]]]],[11,"mul","competitive::num::quad_double","",68,[[]]],[11,"mul","","",68,[[]]],[11,"mul","competitive::num::rmint","",69,[[]]],[11,"mul","","",69,[[["rmint",3]]]],[11,"neg","competitive::num::complex","",65,[[]]],[11,"neg","competitive::num::mint","",67,[[]]],[11,"neg","competitive::num::quad_double","",68,[[]]],[11,"neg","competitive::num::rmint","",69,[[]]],[11,"add_assign","competitive::num::mint","",67,[[["mint",3]]]],[11,"add_assign","","",67,[[["mint",3]]]],[11,"add_assign","competitive::num::rmint","",69,[[["rmint",3]]]],[11,"add_assign","","",69,[[["rmint",3]]]],[11,"sub_assign","competitive::num::mint","",67,[[["mint",3]]]],[11,"sub_assign","","",67,[[["mint",3]]]],[11,"sub_assign","competitive::num::rmint","",69,[[["rmint",3]]]],[11,"sub_assign","","",69,[[["rmint",3]]]],[11,"mul_assign","competitive::num::mint","",67,[[["mint",3]]]],[11,"mul_assign","","",67,[[["mint",3]]]],[11,"mul_assign","competitive::num::rmint","",69,[[["rmint",3]]]],[11,"mul_assign","","",69,[[["rmint",3]]]],[11,"div_assign","competitive::num::mint","",67,[[["mint",3]]]],[11,"div_assign","","",67,[[["mint",3]]]],[11,"div_assign","competitive::num::rmint","",69,[[["rmint",3]]]],[11,"div_assign","","",69,[[["rmint",3]]]],[11,"not","competitive::data_structure::bitset","",34,[[]]],[11,"bitand","","",34,[[]]],[11,"bitor","","",34,[[]]],[11,"bitxor","","",34,[[]]],[11,"shl","","",34,[[]]],[11,"shr","","",34,[[]]],[11,"bitand_assign","","",34,[[]]],[11,"bitor_assign","","",34,[[]]],[11,"bitxor_assign","","",34,[[]]],[11,"shl_assign","","",34,[[]]],[11,"shr_assign","","",34,[[]]],[11,"index","competitive::algorithm::compress","",25,[[]]],[11,"index","competitive::data_structure::disjoint_sparse_table","",35,[[]]],[11,"index","competitive::graph::strongly_connected_component","",56,[[]]],[11,"index","competitive::math::matrix","",60,[[]]],[11,"index","competitive::math::polynomial","",62,[[]]],[11,"index","competitive::num::quad_double","",68,[[]]],[11,"index","competitive::string::suffix_array","",73,[[]]],[11,"index","competitive::string::z_algorithm","",74,[[]]],[11,"index_mut","competitive::math::matrix","",60,[[]]],[11,"index_mut","competitive::math::polynomial","",62,[[]]],[11,"hash","competitive::algebra::operations","",5,[[]]],[11,"hash","","",6,[[]]],[11,"hash","","",7,[[]]],[11,"hash","","",8,[[]]],[11,"hash","","",9,[[]]],[11,"hash","","",10,[[]]],[11,"hash","","",11,[[]]],[11,"hash","","",12,[[]]],[11,"hash","","",13,[[]]],[11,"hash","competitive::data_structure::bitset","",34,[[]]],[11,"hash","competitive::graph::graph","",47,[[]]],[11,"hash","","",50,[[]]],[11,"hash","competitive::num::complex","",65,[[]]],[11,"hash","competitive::num::mint::modulus","",88,[[]]],[11,"hash","","",89,[[]]],[11,"hash","","",90,[[]]],[11,"hash","competitive::num::mint","",67,[[]]],[11,"hash","competitive::num::rmint","",69,[[]]],[11,"from_iter","competitive::algorithm::compress","",25,[[["intoiterator",8]]]],[11,"product","competitive::num::mint","",67,[[["iterator",8]]]],[11,"product","","",67,[[["iterator",8]]]],[11,"product","competitive::num::rmint","",69,[[["iterator",8]]]],[11,"product","","",69,[[["iterator",8]]]],[11,"sum","competitive::num::mint","",67,[[["iterator",8]]]],[11,"sum","","",67,[[["iterator",8]]]],[11,"sum","competitive::num::rmint","",69,[[["iterator",8]]]],[11,"sum","","",69,[[["iterator",8]]]],[11,"from_str","competitive::num::mint","",67,[[],["result",4]]],[11,"from_str","competitive::num::quad_double","",68,[[],["result",4]]],[11,"from_str","competitive::num::rmint","",69,[[],["result",4]]]],"p":[[8,"Magma"],[8,"Unital"],[8,"Monoid"],[8,"Invertible"],[8,"RightInvertibleMagma"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"MonoidalOperation"],[3,"GroupOperation"],[3,"AbsorbedAssocoativeOperator"],[3,"CartesianOperation"],[3,"CountingOperation"],[8,"MinimumBounded"],[8,"MaximumBounded"],[8,"AdditiveIdentity"],[8,"MultiplicativeIdentity"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"Compress"],[3,"CHTLine"],[3,"ConvexHullTrick"],[8,"Bisect"],[8,"Trisect"],[3,"Rev"],[3,"TotalOrd"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"SegmentTree"],[3,"QueueAggregation"],[3,"DequeAggregation"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"Real"],[4,"CCW"],[3,"Circle"],[3,"Line"],[3,"LineSegment"],[3,"Adjacent"],[3,"Graph"],[3,"GraphRec"],[3,"GridGraph"],[3,"RevEdge"],[3,"Dinic"],[3,"FordFulkerson"],[3,"RevEdge"],[3,"PrimalDual"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"Matrix"],[3,"BabyStepGiantStep"],[3,"Polynomial"],[3,"PrimeTable"],[3,"EulerPhiTable"],[3,"Complex"],[8,"Modulus"],[3,"MInt"],[3,"QuadDouble"],[3,"RMInt"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"Xorshift"],[8,"IterScan"],[3,"Scanner"],[3,"LCAMonoid"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"ReRooting"],[3,"TreeRec"],[3,"AssocoativeOperator"],[3,"Adjacent4"],[3,"Adjacent8"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"Modulo998244353"]],"a":{"verify":[565,567,569,571,573,575,578,580,582,585,589,590,592,594,596,598,599,601,604,606,608,611,614,616,619,621]}}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);