var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":"AAAAAAAAAAAAAAAAFCFCFCFFCCFCFCFCFFCFCFCAAAAAAAAAAAAAAAAAACFCCFCCFCCFCFCCFCCFCCFCCFCCFCCFCCFFFCCFFFFAAAAAAAAAAAAAAAAAACCCCCCFFCCCCFCCCCCFCFCCCFCCFCCFCCFCFCFFCCFCCCFCCCCFCCCCCFCCCCCCFCCFCCFCCFAF","n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","dpl_1_e","levenshtein_distance","KnapsackPloblemSmallValue","dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","dpl_3_a","largest_square","dpl_3_b","largest_rectangle_in_grid","dpl_3_c","largest_rectangle","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","MinOperation","SegmentTree","dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","Static2DTree","dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","dsl_3_b","dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","EdgeListGraphScanner","grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","DirectedGraphScanner","grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","itp1_1_a","itp1_1_a"],"q":[[0,"aizu_online_judge"],[4,"aizu_online_judge::dpl"],[16,"aizu_online_judge::dpl::dpl_1_a"],[17,"aizu_online_judge::dpl::dpl_1_b"],[19,"aizu_online_judge::dpl::dpl_1_c"],[21,"aizu_online_judge::dpl::dpl_1_d"],[23,"aizu_online_judge::dpl::dpl_1_e"],[25,"aizu_online_judge::dpl::dpl_1_f"],[27,"aizu_online_judge::dpl::dpl_1_g"],[29,"aizu_online_judge::dpl::dpl_1_h"],[31,"aizu_online_judge::dpl::dpl_1_i"],[33,"aizu_online_judge::dpl::dpl_3_a"],[35,"aizu_online_judge::dpl::dpl_3_b"],[37,"aizu_online_judge::dpl::dpl_3_c"],[39,"aizu_online_judge::dsl"],[57,"aizu_online_judge::dsl::dsl_1_a"],[59,"aizu_online_judge::dsl::dsl_1_b"],[62,"aizu_online_judge::dsl::dsl_2_a"],[65,"aizu_online_judge::dsl::dsl_2_b"],[68,"aizu_online_judge::dsl::dsl_2_c"],[70,"aizu_online_judge::dsl::dsl_2_d"],[73,"aizu_online_judge::dsl::dsl_2_e"],[76,"aizu_online_judge::dsl::dsl_2_f"],[79,"aizu_online_judge::dsl::dsl_2_g"],[82,"aizu_online_judge::dsl::dsl_2_h"],[85,"aizu_online_judge::dsl::dsl_2_i"],[88,"aizu_online_judge::dsl::dsl_3_a"],[91,"aizu_online_judge::dsl::dsl_3_b"],[92,"aizu_online_judge::dsl::dsl_3_c"],[93,"aizu_online_judge::dsl::dsl_3_d"],[96,"aizu_online_judge::dsl::dsl_4_a"],[97,"aizu_online_judge::dsl::dsl_5_a"],[98,"aizu_online_judge::dsl::dsl_5_b"],[99,"aizu_online_judge::grl"],[117,"aizu_online_judge::grl::grl_1_a"],[125,"aizu_online_judge::grl::grl_1_b"],[130,"aizu_online_judge::grl::grl_1_c"],[136,"aizu_online_judge::grl::grl_2_a"],[138,"aizu_online_judge::grl::grl_2_b"],[142,"aizu_online_judge::grl::grl_3_a"],[145,"aizu_online_judge::grl::grl_3_b"],[148,"aizu_online_judge::grl::grl_3_c"],[151,"aizu_online_judge::grl::grl_4_a"],[153,"aizu_online_judge::grl::grl_4_b"],[156,"aizu_online_judge::grl::grl_5_a"],[159,"aizu_online_judge::grl::grl_5_b"],[163,"aizu_online_judge::grl::grl_5_c"],[168,"aizu_online_judge::grl::grl_5_d"],[174,"aizu_online_judge::grl::grl_5_e"],[181,"aizu_online_judge::grl::grl_6_a"],[184,"aizu_online_judge::grl::grl_6_b"],[187,"aizu_online_judge::grl::grl_7_a"],[190,"aizu_online_judge::itp1"],[191,"aizu_online_judge::itp1::itp1_1_a"],[192,"std::io"],[193,"std::io"]],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  1ms","","✅  AC  1ms","","✅  AC  3ms","","✅  AC  8ms","✅  AC  3ms","","","✅  AC  0ms","","✅  AC  7ms","","✅  AC  48ms","","✅  AC  0ms","✅  AC  28ms","","✅  AC  15ms","","✅  AC  3ms","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  6ms","","","✅  AC  21ms","","","✅  AC  18ms","","","✅  AC  16ms","","✅  AC  494ms","","","✅  AC  45ms","","","✅  AC  58ms","","","✅  AC  55ms","","","✅  AC  52ms","","","✅  AC  52ms","","","✅  AC  55ms","","","✅  AC  4ms","✅  AC  3ms","✅  AC  254ms","","","✅  AC  88ms","✅  AC  76ms","✅  AC  3ms","✅  AC  10ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  72ms","✅  AC  101ms","","","","","✅  AC  6ms","","","","","","✅  AC  6ms","","✅  AC  22ms","","","","✅  AC  0ms","","","✅  AC  3ms","","","✅  AC  2ms","","","✅  AC  6ms","","✅  AC  0ms","","✅  AC  2ms","","","","✅  AC  8ms","","","","✅  AC  2ms","","","","","✅  AC  109ms","","","","","","✅  AC  49ms","","","","","","","✅  AC  244ms","","","✅  AC  0ms","","","✅  AC  0ms","","","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,0,0,0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],[[-1,-2,-3],4,2,2,2],0,0,[[-1,-2],1,2,3],0,0,0,[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,0,0,0,0,[[-1,-2],1,2,3],0,0,0,0,0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3]],"c":[],"p":[[15,"tuple"],[8,"Read",192],[8,"Write",192],[15,"bool"]],"a":{"verify":[16,18,20,22,23,26,28,30,32,33,35,37,58,61,64,67,69,72,75,78,81,84,87,90,91,92,95,96,97,98,123,124,129,135,137,141,144,147,150,152,154,158,162,167,173,180,183,186,189,191]}},\
"competitive":{"doc":"github","t":"OAAOOOOOOOOAOOAOOOOAAAOOOOOOOAOOOOOOOOAAOOOOOOOOAOOAAIIQQDQDQQIIDIDIDDIDDDIDDDEIIIIQDDSSIDEDIIQDEDDDDDDDDDIIIQQDIKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLOLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLQIDDDDDIDDDQQQQIDDQDIIIDIDQQQDQDIDDLFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLKFLLLLLLLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLKKKMLLLLLLLLLLLLKKLLKKLKKLLLFKKKLLLKKFFLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDIQDDIDDIIDDDDDGGGGDGGGGIDDGGDDDDDDDDDDDDDDDDDIDDDDDDQDIDDDDDDKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLKLLLLOLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKKKKKKKKKLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLKKKKLLKKKKKKKKKKKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIEIDNNDDNNNKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQQQQQQQQIIIDIIIDDIDDEGGDDDDEGGQQIQDDIIIIQIDDDDDDDIIDDIDDDQDDEGGDDQQDDDQIIIIQKLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLMLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLLLKLLLLLLLLLLLLLFKLMMMMLLKLLLMMMMKLKLLLLLLLLLLLLLLLLLLLKLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLMLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLKLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLKLLLLKLLLLLLKLMKLLLLLLLLLLLLLLMLQQSIQSQDKFLLKLLLMLLKLLLMMMLLMMLLKLLLLLLMMMMLLLLLMDDDGEIDQDIIGGDDGDDDDDDDDQLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLFFLLLLLLLLLLLLLLFLLLLLLLLFLLLFFFLMLFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLKLLLLLLLLLLLLLLFLFFKLLLLLLLLLLFLLFFLLLLFFFFLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLFLLLFLLLLLLLLLLLLLLMLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLDIIDSIDDSSQDSSSSSSSSSIDDSQISSSSSSSSSSSSDIISSISDSIDSDIQSIQDIKKLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKKKLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLKLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLMLLLKLLLLLLLLLLLLLKLLKLLLLLLKLLKLLLLLLLLLLLLKLLLLLLKLLLLLLLLLLLLKLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLKLLKLLKLLLLLLLKLLKLLLLLLLLLLLLLLLLAKKLLKKKKKLLKKLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLKKLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLKKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLMMKLLLLLLLLLLGGEEGGGGEEDELLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGGGSEEEEISSSSSSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCCICCILLLLKLLOKCLLLLLLOLKLLLLCCCCDCCCCDDLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLFEEEQDDDDEEEIQLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIEDEDIIDEDDIIIIDQQQDIDDIDDIDDQDEDKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKLLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLKKKLKKLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLFFFFFLLKLLLLLLOOLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLDDDDDEIDDNDDDDEDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLL","n":["add_assign","algebra","algorithm","array","automaton","avx_helper","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","heuristic","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","invariant","iter_print","main","math","max","memorize","min","minmax","mlambda","mo_algorithm","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","syakutori","tools","tree","AbelianGroup","AbelianMonoid","Act","ActMonoid","AddMulOperation","Additive","AdditiveOperation","Agg","AggMonoid","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","BottomkOperation","Commutative","CountingOperation","EmptyAction","EmptyLazy","Field","FindMajorityOperation","FirstOperation","FlattenAction","Gf2_63","Group","Idempotent","IdempotentMonoid","Invertible","Key","LastOperation","LinearOperation","MOD","MOD","Magma","MaxOperation","Mersenne61","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","TopkOperation","Unital","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_operate","act_operate","act_operate_assign","act_operate_assign","act_unit","act_unit","add","add","add","agg_operate","agg_operate","agg_operate_assign","agg_operate_assign","agg_unit","agg_unit","all_one","all_zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone_into","clone_into","define_monoid","div","div","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","mul","mul","neg","neg","one","one","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","single","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","sub","sub","sum","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","zero","zero","B","Bisect","BitDp","Combinations","ConvexHullTrick","EsperEstimator","EsperSolver","ImpartialGame","ImpartialGameAnalyzer","ImpartialGamer","IndependentSubSet","Iter","Iter","LIter","M","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SliceCombinationsExt","SliceSortExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","State","State","Subsets","T","XorBasis","ZeroSumGame","ZeroSumGameAnalyzer","ZeroSumGamer","add_line","baby_step_giant_step","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bubble_sort","bubble_sort_by","bucket","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","default","default","default","elements","eq","equivalent","eval","eval","eval","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_bucket","fold_cell","for_each_combinations","for_each_combinations_with_replacement","for_each_permutations","for_each_product","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","ind","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_element","is_subset","k_colorable","merge_sort","merge_sort_by","middle_point","n","new","new","new","new","new","new","new","new","new","new","next","next","next_combination","next_left","next_left","next_minimum","next_permutation","next_right","next_right","next_state","next_state","next_state","next_state","not_elements","parallel_binary_search","position_bisect","prev_combination","prev_permutation","push","query","reduce","rfind_bisect","rposition_bisect","run_length_encoding","slide_minimum","solve","solve","solve_checked","sqrt_decomposition","sqrt_decomposition","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_bucket","update_cell","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Accumulate","Accumulate2d","Allocator","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BTreeMapExt","BTreeSetExt","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","CompressedBinaryIndexedTree","CompressedBinaryIndexedTree1d","CompressedBinaryIndexedTree2d","CompressedBinaryIndexedTree3d","CompressedBinaryIndexedTree4d","CompressedSegmentTree","CompressedSegmentTree1d","CompressedSegmentTree2d","CompressedSegmentTree3d","CompressedSegmentTree4d","Compressor","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCompress","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MemoryPool","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTreeMap","SlopeTrick","SplayMap","SplaySequence","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","VecCompress","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","allocate","allocate","append","as_slice","as_total_ord","automaton","back","bit_length","bit_length","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_failure","build_inplace","chmax","chmin","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count_ones","count_zeros","dd","deallocate","deallocate","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","drop","drop","drop","edges","eq","equivalent","extend","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","first","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fn","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get","get","get_difference","get_key_value","get_key_value_at","get_left_if","get_left_if","get_next","get_next","get_next_back","get_next_back","get_next_back_excluded","get_next_back_excluded","get_next_back_excluded_mut","get_next_back_mut","get_next_excluded","get_next_excluded","get_next_excluded_mut","get_next_mut","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","index_exact","index_exact","index_exact","index_lower_bound","index_lower_bound","index_lower_bound","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert","insert","insert","insert_at","insert_once_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","iter","iter","iter","iter_mut","keys","keys","keys","last","last","last","last_mut","len","len","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","minmax","modify","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_node","node_size","not","not","ones","partial_cmp","pop","pop_back","pop_first","pop_first","pop_first_if","pop_first_if","pop_front","pop_last","pop_last","pop_last_if","pop_last_if","pop_left_if","pop_left_if","pop_next","pop_next","pop_next_back","pop_next_back","pop_next_back_excluded","pop_next_back_excluded","pop_next_back_excluded_if","pop_next_back_excluded_if","pop_next_back_if","pop_next_back_if","pop_next_excluded","pop_next_excluded","pop_next_excluded_if","pop_next_excluded_if","pop_next_if","pop_next_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","quantile_outer","query_min","range","range","range","range_at","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove","remove","remove_at","remove_count","remove_count","reverse","roots","roots","roots","rotate_left","rotate_right","rposition_acc","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update_isize","valley","values","values","values","values_mut","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","Approx","ApproxOrd","Ccw","Ccwable","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","approx_cmp","approx_eq","as_total_ord","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","ccw_open","chmax","chmax","chmin","chmin","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","default","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","minmax","minmax","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","add_assign","add_assign","add_assign","add_assign","add_clause","add_cost1","add_cost2","add_cost2_01","add_cost2_10","add_edge","add_edge","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adj4","adj8","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies_with_eindex","adjacencies_with_eindex","adjacencies_with_value","adjacencies_with_value","adjacencies_with_value","adjacency","articulation","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","avalue","avalue","avalue","aviews","aviews","aviews","aviews","aviews","aviews","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","build","builder","builder","builder","builder_with_esize","change_edge","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","chmin","chmin","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","components","construct_emap","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","construct_vmap","construct_vmap","construct_vmap","construct_vmap","default","default","default","dfs_order","dfs_tree","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","dulmage_mendelsohn_decomposition","edges","edges","edges","edges","edges","edges","edges_size","edges_size","eindex","eindex","eindex","eindex","elist","elist","elist","elist","emap_get","emap_get","emap_get_mut","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","esize","esize","esize","eview","eview","eview","eview","extend","extend","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","hash","hash","hash","height","hopcroft_karp","id","index","index","inf","inf","inf","inf","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","kuhn_multi_start_bfs","low","map","map","maximum_flow","maximum_flow_limited","maximum_independent_set","maximum_matching","minimum_cost_flow","minimum_cost_flow_limited","minimum_cut","minimum_edge_cover","minimum_spanning_arborescence","minimum_spanning_tree","minimum_vertex_cover","minmax","minmax","minmax","minmax","minmax","minmax","minmax","minmax","move_by_diff","mscan","mscan","mscan","mscan","mul","mul","mul","mul","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_adj4","new_adj8","new_with_esize","next","next","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","solve","source","source","source","source","start","start","start","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices_size","vertices_size","vindex","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_set","vmap_set","vsize","vsize","vsize","vview","vview","vview","vview","vview","vview","vview","vview","vview","vview","vview","warshall_floyd_ap","warshall_floyd_ap","weighted_tree_depth","weighted_tree_depth","width","with_n_values","Cands","Hash","LOG_TABLE_SIZE","ModifiableState","Operation","SEED","Score","SimuratedAnnealing","accept","beam_search","borrow","borrow_mut","candidates","change","change","default","end_temp","fmt","from","hash","into","is_accepted","is_end","is_maximize","iter_count","log_table","minimize","new","now","rand","revert","revert","score","set_end_temp","set_start_temp","set_time_limit","set_update_interval","soft_update","soft_update","start_temp","temperture","time","time_limit","try_from","try_into","type_id","update","update","update_interval","BitwiseandConvolve","BitwiseorConvolve","Convolve","Convolve998244353","ConvolveRealFft","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","GcdConvolve","LcmConvolve","MIntConvolve","Matrix","MemorizedFactorial","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","SubsetConvolve","T","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","assign","berlekamp_massey","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","check_primitive_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convolve","convolve","convolve","convolve","convolve","convolve","convolve","count_divisors","count_divisors","count_multiset_sum","count_subset_sum","data","data","data","data","data","default","default","default","default","determinant","diff","discrete_logarithm","discrete_logarithm_prime_mod","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","divisors","divisors","divisors","eq","eq","eq","equivalent","equivalent","equivalent","euler_phi","eval","even","exp","extgcd","extgcd_binary","extgcd_recurse","eye","fact","factorial","floor_sum","floor_sum_i64","floor_sum_range_freq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_loop","get","highly_composite_number","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","inv","inv","inv","inv_fact","inverse","inverse_transform","inverse_transform","inverse_transform","inverse_transform","inverse_transform","inverse_transform","inverse_transform","inverse_transform","inverse_transform","is_prime","is_prime","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","length","length","length","length","length","length","length","length","length","linear_congruence","linear_sum_of_exp","log","miller_rabin","miller_rabin_with_br","mobius_transform","mobius_transform","mobius_transform","mobius_transform","modinv","modinv_extgcd_binary","modinv_recurse","moebius","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply","multiply","multiply","multiply","multiply","multiply","multiply","multipoint_evaluation","neg","neg","new","new","new","new","new","new","new","odd","one","one","permutation","pow","pow","pow","pow","powi","prefix","prefix_ref","prime_factors","prime_factors","prime_factors","prime_factors_flatten","primes","primes","primes_lte","primitive_root","product_all","rank","rem","rem","rem","rem","rem","rem_assign","rem_assign","reserve","resize","resized","reversed","row_reduction","shape","shl","shl","shl_assign","shr","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum_all_rational","taylor_shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","transform","transform","transform","transform","transform","transform","trial_division","trial_division","trim_tail_zeros","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_prime_list","zero","zero","zeros","zeros","zeta_transform","zeta_transform","zeta_transform","zeta_transform","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","DualNumber","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","Rational","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","abs_diff","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","chmin","chmin","chmin","chmin","clamp","clamp","clamp","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp_by_arg","conjugate","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","default","default","delta","den","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_rem","div_rem","div_rem","dot","end_bound_excluded","end_bound_excluded_bounded","end_bound_excluded_checked","end_bound_included","end_bound_included_bounded","end_bound_included_checked","epsilon","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","get_mod","get_mod","get_mod","hash","hash","hash","hash","hash","hypot","hypot","hypot","i","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog10","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","ilog2","im","index","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","is_zero","is_zero","lcm","lcm","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_ones","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","maximum","maximum","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","minimum","minimum","minimum","minimum","minimum","minmax","minmax","minmax","minmax","minmax","minmax","minmax","minmax","minmax","mint_basic","mod_add","mod_div","mod_inner","mod_inner","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new_unchecked","new_unchecked","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","next_power_of_two","norm","not","not","num","one","one","one","one","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","primitive_nth_root_of_unity","product","product","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","root","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","scan","scan","scan","scan","scan","scan","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_mod","set_mod","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_bounded","start_bound_excluded_checked","start_bound_included","start_bound_included_bounded","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","sum","sum","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","swap_bytes","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_bounded","to_range_bounded","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_bounded","to_range_inclusive_bounded","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_ones","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","MOD","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","N1","N1","N2","N2","N3","N3","R","R","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_inner","mod_inner","mod_inner","mod_inner","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Bytes","Chars","Read","Scanner","Usize1","Write","by_ref","by_ref","bytes","chain","flush","is_read_vectored","is_write_vectored","iter_print","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","take","write","write_all","write_all_vectored","write_fmt","write_vectored","Gf2_63x1","Gf2_63x2","Gf2_63x3","HashedRangeChained","KnuthMorrisPratt","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHasher","SuffixArray","Zarray","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","index","index","into","into","into","longest_common_prefix_array","new","new","new","rolling_hash","search","search_all","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wildcard_pattern_matching","Gf2_63x1","Gf2_63x2","Gf2_63x3","Hash","Hashed","HashedRange","HashedRangeChained","HashedSequence","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHasher","T","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","chainable","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","chmin","chmin","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","concat","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","default","ensure","ensure","ensure","ensure","ensure","ensure","ensure","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash_range","hash_range","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","init","init_with_rng","init_with_rng","init_with_rng","init_with_rng","init_with_rng","init_with_rng","init_with_rng","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","len","len","longest_common_prefix","minmax","minmax","minmax","minmax","minmax","minmax","minmax","minmax","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","push","range","range","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AsTotalOrd","AssociatedValue","Byte1","ByteWithBase","Bytes","BytesWithBase","CharConvertTryFrom","CharConvertTryInto","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandRange","RandomSpec","Scanner","ScannerIter","SerdeByteStr","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","__local_key","as_total_ord","as_total_ord","as_total_ord","as_total_ord","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmax","chmax","chmax","chmax","chmin","chmin","chmin","chmin","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","deserialize","deserialize_from_bytes","deserialize_from_bytes","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_alphabetic_number","into_iter","into_iter","into_lower_alphabetic_number","into_number","into_upper_alphabetic_number","iter","iter_print","minmax","minmax","minmax","minmax","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","new","new","new","new","new","new_with_seed","next","next","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","replace","replace","scan","scan","scan","scan","scan","scan","scan","scan","scan_value","scan_vec","serialize","serialize_bytestr","serialize_bytestr","set","set","shuffle","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unescape","with","with","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dp","eidx","ep","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vidx","vsize","vsize","with_seed"],"q":[[0,"competitive"],[53,"competitive::algebra"],[471,"competitive::algorithm"],[761,"competitive::combinatorial_optimization"],[875,"competitive::data_structure"],[1903,"competitive::geometry"],[2021,"competitive::graph"],[2749,"competitive::heuristic"],[2798,"competitive::math"],[3238,"competitive::num"],[4972,"competitive::num::mint_basic"],[5237,"competitive::num::montgomery"],[5397,"competitive::prelude"],[5426,"competitive::string"],[5480,"competitive::string::rolling_hash"],[5725,"competitive::tools"],[6079,"competitive::tree"],[6273,"core::option"],[6274,"core::clone"],[6275,"core::cmp"],[6276,"core::fmt"],[6277,"core::fmt"],[6278,"core::cmp"],[6279,"core::ops::arith"],[6280,"core::any"],[6281,"alloc::vec"],[6282,"core::ops::function"],[6283,"core::cmp"],[6284,"core::ops::function"],[6285,"core::iter::traits::collect"],[6286,"core::ops::arith"],[6287,"core::cmp"],[6288,"core::ptr::non_null"],[6289,"core::cmp"],[6290,"core::marker"],[6291,"core::cell"],[6292,"core::hash"],[6293,"alloc::collections::btree::map"],[6294,"alloc::string"],[6295,"core::ops::arith"],[6296,"core::ops::bit"],[6297,"core::ops::arith"],[6298,"core::ops::bit"],[6299,"std::io"],[6300,"std::io::readbuf"],[6301,"alloc::alloc"],[6302,"std::io"],[6303,"core::iter::traits::collect"]],"d":["","algebra","algorithm","","build automaton","","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","","Implement <code>AssociatedValue</code>.","","","","","Print expressions with a separator.","","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","solve with Mo’s algorithm","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","scan and bind values with Scanner","scan a value with Scanner","","","string algorithems","","arg:","","tree algorithems","commutative group","commutative monoid","","","$+,\\\\times$","","$+$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","","","Find majority(strict) of a sequence.","retain the first element","","","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","","","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","$a$ where $a \\\\circ x = e$","","","","","","","","","","multiplicative operaion: $+$","multiplicative operaion: $+$","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","","","","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","","","additive identity: $0$","additive identity: $0$","","binary search helper","","","","","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","","","Basis of xor operation.","","","","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","$\\\\min{0\\\\le i &lt; n | x^i=y}$","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","get i-th value of rho path","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Return between two elements if search is not end.","","","","","","","","","","Create a empty space.","","","","","","","","","","","","","","","","","Returns the first index that satisfies a predicate. if not …","","","","","Return (reduced basis, coordinate). Coordinate means if …","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","","","","","","","","Returns the element that gives the minimum value from the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","2-dimensional accumlated data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return fold of [0, k)","Return fold of [0, x) × [0, y)","fold [0, k]","fold [0, i] x [0, j]","","","","","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of range","Return fold of range","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Create empty","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","","get k-th smallest value in range","get k-th smallest value out of range","","","","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-badd a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return norm","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(p_x = f) | (p_y = g)","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","","","","","","","","","Return a slice of adjacency verticeseturn the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","Return an iterator over graph vertices.","","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e, c==1","Sum of Floor of Linear mod 2^64","Sum of Floor of Linear mod 2^64","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","binary gcd","","","[(hcn, #divisor)]","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","","","","","","","return: (y,z)","sum_i a_i exp(b_i x)","","","","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationseturns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m","","","","","m is prime, n = 2^32","n^1 mod m","n^1 mod m","n^2 mod m","n^2 mod m","n^3 mod m","n^3 mod m","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","Flush this output stream, ensuring that all intermediately …","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Print expressions with a separator.","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","scan and bind values with Scanner","Creates an adapter which will read at most <code>limit</code> bytes …","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","","Trait for spec of generating random value.","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","","","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","","","","","","","scan and bind values with Scanner","scan a value with Scanner","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,107,0,314,0,107,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,0,315,316,0,0,0,0,0,0,314,0,0,0,0,0,0,0,0,0,0,0,0,0,0,317,314,0,0,107,318,319,320,321,322,323,324,325,326,7,107,318,319,320,321,322,323,324,325,326,7,107,107,107,107,107,107,314,314,3,107,107,107,107,107,107,327,328,329,318,319,320,321,322,323,324,325,326,3,7,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,315,316,329,318,319,320,321,322,323,324,325,326,3,7,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,315,316,3,3,3,7,3,7,0,346,346,3,7,3,7,3,7,329,318,319,320,321,322,323,324,325,326,3,7,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,315,316,329,318,319,320,321,322,323,324,325,326,3,7,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,315,316,346,346,347,334,335,336,339,341,344,348,348,0,314,314,349,349,314,314,317,3,7,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,315,316,317,317,74,74,317,317,347,347,334,335,348,348,7,107,318,319,320,321,322,323,324,325,326,7,349,349,7,3,7,107,107,329,318,319,320,321,322,323,324,325,326,3,7,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,315,316,329,318,319,320,321,322,323,324,325,326,3,7,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,315,316,329,318,319,320,321,322,323,324,325,326,3,7,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,315,316,348,3,7,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,315,316,350,314,314,48,0,0,0,0,0,0,0,0,0,0,41,45,43,48,0,0,0,43,0,0,0,0,0,0,0,41,43,45,0,48,0,0,0,0,22,0,24,0,51,52,47,53,35,36,37,33,22,38,39,40,42,29,54,24,44,51,52,47,53,35,36,37,33,22,38,39,40,42,29,54,24,44,351,351,48,29,29,33,35,36,37,33,22,38,39,40,42,24,44,35,36,37,33,22,38,39,40,42,24,44,35,35,22,24,35,35,35,40,42,44,29,24,352,0,35,36,37,33,22,38,39,40,42,29,24,44,47,48,48,353,353,353,353,51,52,47,53,35,36,37,33,22,38,39,40,42,29,54,24,44,33,24,29,29,33,24,51,52,47,53,35,36,37,33,22,38,39,40,42,29,54,24,44,36,37,35,35,33,351,351,28,33,51,52,53,22,38,40,42,54,24,44,36,37,353,43,52,54,353,43,52,41,45,51,53,35,0,352,353,353,38,22,24,352,352,0,0,38,39,38,48,48,35,0,35,36,37,33,22,38,39,40,42,24,44,51,52,47,53,35,36,37,33,22,38,39,40,42,29,54,24,44,51,52,47,53,35,36,37,33,22,38,39,40,42,29,54,24,44,51,52,47,53,35,36,37,33,22,38,39,40,42,29,54,24,44,47,48,48,0,0,0,0,0,0,58,59,60,61,62,63,58,59,60,61,62,63,58,59,60,61,62,63,58,59,60,61,62,63,60,63,58,59,63,58,59,60,63,58,59,58,59,58,58,59,60,61,62,63,58,59,60,61,62,63,58,59,58,59,60,63,58,59,58,59,58,58,59,60,61,62,63,62,0,0,0,0,63,58,58,59,60,61,62,63,58,59,60,61,58,59,60,61,62,63,58,59,60,61,62,63,58,59,60,61,62,63,58,59,60,61,62,63,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,65,64,64,64,64,64,64,66,66,66,66,66,66,67,67,67,67,67,67,68,69,70,71,72,73,75,134,76,77,78,79,81,82,83,83,83,83,81,82,85,86,87,87,85,86,87,87,88,90,92,117,94,85,95,98,0,97,134,76,98,98,98,98,98,98,98,98,98,78,79,81,82,83,103,104,133,106,108,88,95,109,110,97,116,119,90,94,111,64,66,67,68,69,70,71,72,73,75,76,98,112,113,85,86,114,100,101,102,87,99,92,77,78,79,81,82,83,103,104,133,106,108,88,95,109,110,97,116,119,90,94,111,64,66,67,68,69,70,71,72,73,75,76,98,112,113,85,86,114,100,101,102,87,99,92,77,99,100,98,98,85,86,101,102,87,87,81,82,83,103,104,106,108,95,109,110,97,90,111,64,66,67,68,69,70,71,72,73,75,76,98,112,113,85,86,114,100,101,102,87,99,92,77,81,82,83,103,104,106,108,95,109,110,97,90,111,64,66,67,68,69,70,71,72,73,75,76,98,112,113,85,86,114,100,101,102,87,99,92,77,98,102,101,98,98,100,117,94,83,103,110,97,116,119,94,73,75,98,85,86,114,101,102,87,65,65,111,85,101,102,116,119,94,99,98,98,116,85,85,86,86,101,102,88,90,99,92,99,88,88,354,355,354,78,81,82,83,103,104,106,108,95,109,110,97,116,119,90,94,111,64,66,67,68,69,70,71,72,73,75,76,98,112,113,85,86,114,100,101,102,87,99,92,77,78,79,81,82,103,103,103,103,104,106,108,95,109,116,111,106,108,95,109,110,97,104,78,79,81,82,83,103,104,133,106,108,88,95,109,110,97,116,119,90,94,111,64,66,67,68,69,70,71,72,73,75,76,98,112,113,85,86,114,100,101,102,87,99,92,77,79,78,76,112,113,85,85,86,86,101,102,81,106,95,97,81,82,106,108,95,109,116,119,98,85,86,101,90,119,119,101,102,354,355,354,355,354,355,354,354,354,355,354,354,102,101,101,102,90,71,72,71,72,98,104,104,356,112,113,356,112,113,65,64,64,64,64,64,64,66,66,66,66,66,66,67,67,67,67,67,67,68,69,70,71,72,73,75,116,119,114,101,102,99,99,99,101,102,78,79,81,82,83,103,104,133,106,108,88,95,109,110,97,116,119,90,94,111,64,66,67,68,69,70,71,72,73,75,76,98,112,113,85,86,114,100,101,102,87,99,92,77,110,97,116,119,85,86,90,119,85,86,101,102,101,85,86,101,354,355,110,354,110,97,116,119,85,86,71,72,71,72,81,111,88,90,92,87,87,98,116,79,81,82,83,83,83,83,103,103,103,103,104,133,106,108,88,95,109,110,97,116,119,90,94,111,68,69,70,73,75,98,85,86,114,100,101,102,87,99,92,77,65,64,64,64,64,64,64,66,66,66,66,66,66,67,67,67,67,67,67,68,69,70,71,72,73,75,99,99,98,98,98,98,110,97,354,355,354,355,97,354,355,354,355,101,102,354,355,354,355,354,355,354,355,354,355,354,355,354,355,354,355,101,102,106,108,95,109,116,110,97,97,77,77,114,133,119,86,119,77,134,134,134,134,76,77,77,116,119,85,86,101,102,119,85,86,116,88,90,92,116,116,106,108,95,109,116,111,111,88,92,77,134,134,76,134,134,76,81,82,106,108,95,109,98,87,98,98,98,98,98,98,356,88,90,112,113,92,87,111,111,357,357,357,357,81,82,83,103,104,106,108,95,109,110,97,90,111,64,66,67,68,69,70,71,72,73,75,76,98,112,113,85,86,114,100,101,102,87,99,92,77,78,79,81,82,83,103,104,133,106,108,88,95,109,110,97,116,119,90,94,111,64,66,67,68,69,70,71,72,73,75,76,98,112,113,85,86,114,100,101,102,87,99,92,77,78,79,81,82,83,103,104,133,106,108,88,95,109,110,97,116,119,90,94,111,64,66,67,68,69,70,71,72,73,75,76,98,112,113,85,86,114,100,101,102,87,99,92,77,78,79,81,82,83,103,104,133,106,108,88,95,109,110,97,116,119,90,94,111,64,66,67,68,69,70,71,72,73,75,76,98,112,113,85,86,114,100,101,102,87,99,92,77,88,90,92,81,82,83,83,83,83,103,103,103,103,106,108,95,109,116,100,100,87,85,86,101,101,116,119,94,85,99,0,0,0,0,0,142,142,0,0,142,142,142,147,147,146,142,146,142,148,144,145,146,142,148,144,145,142,144,145,142,146,142,146,142,146,142,148,144,145,146,142,148,144,145,0,146,142,148,0,0,148,145,146,144,145,145,144,145,146,142,148,144,145,146,142,146,142,148,144,145,146,142,148,144,145,142,145,145,146,142,148,144,145,144,145,144,145,146,142,148,144,145,146,142,144,145,144,145,146,142,148,144,145,146,142,148,144,145,146,142,148,144,145,146,142,148,144,145,358,189,191,358,189,191,359,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,360,361,0,362,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,364,0,0,0,0,0,0,0,365,366,0,0,0,166,0,0,0,0,167,364,367,368,369,151,152,152,152,152,153,154,155,156,157,151,151,154,158,158,358,159,160,158,158,161,161,189,161,191,159,160,154,193,175,176,164,165,177,178,179,162,359,164,165,168,159,160,158,158,161,370,370,370,370,370,370,370,370,161,183,159,160,185,188,190,193,367,368,369,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,183,159,160,185,188,190,193,367,368,369,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,193,153,156,157,172,173,161,161,172,175,176,164,165,177,178,179,162,175,176,164,165,177,178,179,162,154,155,174,175,176,164,165,158,156,172,157,152,177,178,179,162,161,180,151,154,155,174,175,176,164,165,158,156,172,157,152,177,178,179,162,161,180,151,175,176,164,165,177,178,179,162,180,363,161,170,177,178,179,167,159,160,158,161,154,152,162,161,161,370,370,370,370,0,362,174,182,192,171,161,174,161,361,176,165,162,182,192,171,161,363,161,363,161,363,363,175,176,164,165,177,178,179,162,175,176,164,165,177,178,179,162,371,161,154,194,161,161,161,156,157,158,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,161,183,159,160,185,188,190,193,367,368,369,153,186,187,154,155,174,175,175,175,176,176,164,164,165,165,158,156,172,157,173,152,177,178,179,162,161,180,151,155,174,161,180,156,157,172,173,154,180,175,176,164,165,177,178,179,162,158,155,162,174,180,364,367,368,369,183,159,160,185,188,190,193,367,368,369,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,188,190,155,193,164,165,172,172,155,155,173,173,172,155,174,174,155,175,176,164,165,177,178,179,162,158,183,185,186,187,364,367,368,369,183,159,160,185,188,190,193,153,186,187,154,155,174,158,156,157,152,162,180,151,158,158,153,188,190,193,175,176,164,165,177,178,179,162,151,151,180,152,364,367,368,369,182,192,171,161,162,182,192,171,161,161,161,154,155,174,175,176,164,165,158,156,172,157,152,177,178,179,162,161,180,151,161,192,161,192,161,192,161,192,161,161,192,161,183,159,160,185,188,190,193,367,368,369,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,183,159,160,185,188,190,193,367,368,369,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,151,183,159,160,185,188,190,193,367,368,369,153,186,187,154,155,174,175,176,164,165,158,156,172,157,173,152,177,178,179,162,161,180,151,158,166,159,160,154,174,158,161,161,174,161,366,175,176,164,165,162,167,159,160,158,161,167,159,160,158,161,167,167,169,161,154,372,159,159,159,160,160,158,158,161,161,161,370,370,192,161,158,152,197,197,198,0,197,198,197,0,197,0,198,198,197,197,197,198,198,198,198,197,198,198,198,198,198,198,198,198,198,198,197,197,197,198,198,198,198,197,197,198,198,198,198,198,198,198,197,197,198,0,0,0,0,0,0,0,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,199,199,199,199,199,199,199,199,201,202,199,199,199,199,202,0,0,373,374,375,376,377,378,379,208,210,211,199,201,202,212,213,214,373,374,375,376,377,378,379,208,210,211,199,201,202,212,213,214,199,0,208,210,211,199,201,202,212,213,214,208,210,211,199,201,202,212,213,214,208,210,373,374,204,204,378,378,379,213,214,199,199,380,381,199,201,202,210,199,202,213,201,199,0,0,199,199,199,199,199,199,199,199,202,199,199,199,199,199,0,213,214,199,201,202,199,201,202,0,199,199,199,0,0,0,201,208,210,0,0,0,208,210,211,199,201,202,212,213,214,373,374,375,376,377,378,379,208,210,211,199,199,199,199,201,202,212,213,214,199,199,201,202,0,0,212,0,208,199,201,201,202,199,201,201,202,199,373,374,375,376,377,378,379,208,210,211,199,201,202,212,213,214,199,199,199,208,211,199,208,201,204,373,374,375,376,377,378,378,379,213,214,199,199,199,199,0,208,0,0,204,373,374,375,376,377,378,378,379,199,202,0,199,199,0,0,373,374,376,377,0,0,0,0,199,199,199,199,199,199,199,199,201,202,199,199,199,199,204,373,374,375,376,377,378,378,379,199,199,199,208,210,211,201,212,213,214,199,199,202,208,211,199,201,202,211,199,199,0,213,214,0,213,214,213,0,199,201,199,199,199,199,202,199,199,213,199,199,199,201,201,199,199,199,199,199,199,201,199,217,199,199,199,199,199,199,199,199,201,202,199,199,199,199,199,199,208,210,211,199,201,202,212,213,214,204,373,374,375,376,377,378,378,379,213,214,199,199,373,374,375,376,377,378,379,208,210,211,199,201,202,212,213,214,373,374,375,376,377,378,379,208,210,211,199,201,202,212,213,214,373,374,375,376,377,378,379,208,210,211,199,201,202,212,213,214,0,199,202,199,201,373,374,376,377,0,0,0,0,150,0,0,0,150,150,382,0,150,150,150,150,150,150,150,150,150,0,0,0,150,34,0,150,150,150,150,150,150,150,150,150,150,150,150,0,0,0,150,150,0,150,0,150,0,0,150,0,0,383,150,0,229,0,0,150,229,141,218,219,220,222,222,222,222,222,222,226,226,226,226,226,226,227,228,383,229,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,150,219,220,150,219,220,215,215,215,215,141,141,141,141,141,141,141,141,218,218,232,232,232,232,232,232,232,232,219,220,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,227,227,228,215,215,141,141,141,141,232,232,232,232,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,228,141,141,218,232,219,220,222,226,227,228,150,219,220,150,219,220,150,219,220,150,219,220,150,219,220,384,384,384,384,384,384,384,222,226,222,226,222,226,222,226,222,226,222,226,242,215,206,141,218,232,219,220,222,226,227,228,242,215,206,141,218,232,219,220,222,226,227,228,150,219,220,150,219,220,141,218,232,219,220,222,226,227,228,141,218,232,219,220,222,226,227,228,150,219,220,150,219,220,215,206,141,218,232,219,220,222,226,227,228,215,206,141,218,232,219,220,222,226,227,228,141,218,232,219,220,222,226,227,228,141,141,232,150,219,220,150,219,220,150,219,220,385,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,385,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,141,215,141,218,232,219,220,222,226,227,384,228,215,215,215,215,206,206,206,141,141,141,141,141,141,141,141,218,232,232,232,232,232,232,232,232,219,220,222,226,226,226,226,226,226,226,226,226,226,226,226,227,228,215,215,141,141,141,141,232,232,232,232,222,226,226,226,226,226,226,226,226,226,226,226,226,228,150,382,219,220,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,206,206,206,141,386,386,386,386,386,386,232,215,141,218,232,219,220,222,226,227,228,215,141,218,232,219,220,222,226,227,228,232,150,219,220,150,219,220,150,219,220,383,383,150,219,220,215,215,206,141,218,218,232,219,219,220,220,222,222,226,226,227,227,228,384,384,384,384,384,384,384,150,219,220,209,242,215,215,215,215,215,215,215,215,215,215,215,215,215,206,141,218,218,232,219,219,220,220,222,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,226,227,227,228,150,219,220,215,218,219,220,222,226,227,382,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,242,383,222,222,222,222,222,222,226,226,226,226,226,226,34,215,206,206,206,215,141,232,222,226,150,219,220,141,382,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,382,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,382,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,141,227,215,228,209,242,215,206,141,218,232,219,220,222,226,227,228,215,150,219,220,150,219,220,5,5,5,5,150,219,220,229,222,222,222,222,222,222,226,226,226,226,226,226,150,219,220,15,15,218,227,229,222,222,222,222,222,222,226,226,226,226,226,226,150,219,220,150,219,220,4,4,218,227,227,383,383,385,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,385,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,150,219,220,150,219,220,150,219,220,150,219,220,150,219,220,150,219,220,5,218,219,220,222,226,227,228,150,219,220,5,218,219,220,222,226,227,228,141,218,232,219,220,222,226,227,228,0,34,34,34,34,209,34,34,34,34,34,34,34,34,383,383,0,215,215,215,215,141,141,141,141,141,141,141,141,218,218,232,232,232,232,232,232,232,232,219,220,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,227,227,228,150,219,220,215,215,141,141,141,141,232,232,232,232,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,228,215,215,141,141,218,232,232,219,220,222,222,222,222,222,222,226,226,226,226,226,226,227,228,215,206,206,206,141,228,215,228,383,222,222,222,222,222,222,226,226,226,226,226,226,141,222,226,228,15,215,141,218,232,219,220,222,226,227,228,141,218,232,219,220,222,226,227,228,141,382,215,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,150,219,220,150,219,220,141,215,215,141,141,232,232,141,150,219,220,206,206,206,219,220,222,226,226,226,226,226,226,226,226,226,226,226,226,222,226,226,226,226,226,226,226,226,226,226,226,226,150,382,219,220,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,385,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,232,385,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,385,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,150,219,220,215,141,218,219,220,222,226,227,5,5,5,5,215,215,15,15,4,4,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,383,222,222,222,222,222,222,226,226,226,226,226,226,150,229,219,220,222,222,222,222,222,222,226,226,226,226,226,226,150,219,220,150,219,220,150,219,220,150,215,218,219,220,227,215,386,386,386,386,386,386,384,215,215,215,215,141,141,141,141,141,141,141,141,218,232,232,232,232,232,232,232,232,219,220,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,227,228,215,215,141,141,141,141,232,232,232,232,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,228,215,215,141,141,232,232,385,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,150,219,220,150,219,220,150,219,220,150,219,220,215,206,141,218,232,219,220,222,226,227,228,150,219,220,386,386,386,386,386,386,386,386,386,386,386,386,215,218,219,220,222,226,227,150,219,220,385,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,385,222,222,222,222,222,222,222,222,222,222,222,222,226,226,226,226,226,226,226,226,226,226,226,226,141,232,150,219,220,242,215,206,141,218,232,219,220,222,226,227,228,242,215,206,141,218,232,219,220,222,226,227,228,242,215,206,141,218,232,219,220,222,226,227,228,141,229,222,222,222,222,222,222,226,226,226,226,226,226,242,242,4,215,141,218,232,219,220,222,226,227,228,0,0,0,0,0,0,0,0,0,0,0,0,387,388,389,390,391,392,387,388,389,390,391,392,0,0,387,387,387,387,387,387,387,387,387,387,387,387,387,388,388,388,388,388,388,388,388,388,389,389,389,389,389,389,389,389,389,390,390,390,390,390,390,390,390,390,391,391,391,391,391,391,391,391,391,392,392,392,392,392,392,392,387,388,389,390,391,392,387,387,387,387,387,387,387,387,387,387,387,387,387,388,388,388,388,388,388,388,388,388,389,389,389,389,389,389,389,389,389,390,390,390,390,390,390,390,390,390,391,391,391,391,391,391,391,391,391,392,392,392,392,392,392,392,387,388,389,390,391,392,387,388,389,390,391,392,387,387,387,387,387,387,387,387,387,387,387,387,388,388,388,388,388,388,388,388,389,389,389,389,389,389,389,389,390,390,390,390,390,390,390,390,391,391,391,391,391,391,391,391,392,392,392,392,392,392,387,388,389,390,391,392,387,388,389,390,391,392,387,388,389,390,391,392,387,388,389,390,391,392,387,387,388,389,390,391,392,387,388,389,390,391,392,393,394,391,392,387,388,389,390,391,392,387,388,389,390,391,392,387,388,389,390,391,392,0,0,0,0,395,0,0,0,0,0,395,395,395,395,395,395,395,395,396,397,398,399,396,397,398,399,396,396,396,396,396,396,396,397,397,397,397,397,397,397,398,398,398,398,398,398,398,399,399,399,399,399,399,399,396,397,398,399,396,396,396,396,396,396,396,397,397,397,397,397,397,397,398,398,398,398,398,398,398,399,399,399,399,399,399,399,396,397,398,399,396,397,398,399,396,397,398,399,396,396,396,396,396,396,397,397,397,397,397,397,398,398,398,398,398,398,399,399,399,399,399,399,396,397,398,399,396,397,398,399,396,397,398,399,396,397,398,399,396,397,398,399,396,397,398,399,395,395,396,397,398,399,396,397,398,399,396,397,398,399,0,0,0,0,0,0,253,297,253,253,297,253,297,0,253,0,253,253,253,253,253,253,0,253,297,297,297,297,297,0,0,0,0,0,0,0,0,0,0,0,261,262,263,261,262,263,261,262,263,261,262,263,261,262,263,261,262,263,262,263,261,262,263,262,261,262,263,0,263,261,261,262,263,261,262,263,261,262,263,261,262,263,0,0,0,0,266,0,0,0,0,0,0,0,0,266,264,265,268,269,270,271,272,273,264,274,265,267,268,269,270,271,272,273,264,274,265,267,268,269,270,271,272,273,264,265,264,265,268,269,270,271,272,273,264,265,268,269,270,271,272,273,264,265,267,268,269,270,271,272,273,264,265,267,268,269,270,271,272,273,264,265,268,269,270,271,272,273,267,266,268,269,270,271,272,273,264,266,268,269,270,271,272,273,264,265,267,268,269,270,271,272,273,264,265,267,268,269,270,271,272,273,264,274,265,267,268,269,270,271,272,273,264,264,274,265,267,268,269,270,271,272,273,265,267,268,269,270,271,272,273,274,265,266,268,269,270,271,272,273,266,268,269,270,271,272,273,266,266,268,269,270,271,272,273,264,274,265,267,268,269,270,271,272,273,274,265,274,265,265,264,265,268,269,270,271,272,273,264,265,268,269,270,271,272,273,264,274,265,264,265,267,268,269,270,271,272,273,264,274,265,267,268,269,270,271,272,273,264,274,265,267,268,269,270,271,272,273,264,274,265,267,268,269,270,271,272,273,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,298,400,0,0,0,0,0,0,0,0,0,0,401,0,0,0,401,402,278,279,280,96,296,278,294,279,280,281,282,283,284,285,286,287,288,289,290,292,293,96,275,296,278,294,279,280,281,282,283,284,285,286,287,288,289,290,292,293,96,275,403,278,279,280,96,403,278,279,280,96,278,279,280,281,282,283,284,285,286,287,288,289,290,292,293,96,275,278,279,280,281,282,283,284,285,286,287,288,289,290,292,293,96,275,278,279,280,96,278,96,275,404,404,404,278,279,280,96,278,279,280,96,278,294,279,280,281,282,283,284,285,286,287,288,289,290,292,293,96,275,296,278,294,279,280,281,282,283,284,285,286,287,288,289,290,292,293,96,275,405,405,405,405,275,275,275,401,401,400,279,280,96,296,278,294,279,280,281,282,283,284,285,286,287,288,289,290,292,293,96,275,406,296,294,406,406,406,281,407,403,278,279,280,96,401,401,298,281,283,285,287,289,290,293,293,280,281,290,293,275,275,296,294,278,279,280,96,295,279,280,275,275,295,295,275,275,0,0,0,0,0,401,401,184,281,282,284,286,288,292,0,0,281,404,404,404,401,401,275,278,279,280,281,282,283,284,285,286,287,288,289,290,292,293,96,275,296,278,294,279,280,281,282,283,284,285,286,287,288,289,290,292,293,96,275,296,278,294,279,280,281,282,283,284,285,286,287,288,289,290,292,293,96,275,296,278,294,279,280,281,282,283,284,285,286,287,288,289,290,292,293,96,275,0,401,401,0,0,0,0,0,0,0,0,0,196,0,0,0,0,0,0,196,310,311,312,313,301,302,303,304,408,306,309,307,196,308,310,311,312,313,301,302,303,304,408,306,309,307,196,308,301,302,303,304,306,307,196,301,302,303,304,306,307,196,308,305,408,307,301,307,196,196,301,302,303,304,306,307,196,308,310,311,312,313,301,302,303,304,408,306,309,307,196,308,303,196,308,308,0,310,311,312,313,301,302,303,304,408,306,309,307,196,308,304,309,301,302,303,301,302,303,309,307,308,306,301,309,302,302,302,303,309,309,310,311,312,313,303,305,408,302,302,302,301,302,303,304,306,307,196,310,311,312,313,301,302,303,304,408,306,309,307,196,308,310,311,312,313,301,302,303,304,408,306,309,307,196,308,310,311,312,313,301,302,303,304,408,306,309,307,196,308,309,302,303,309,305,408,308],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[]],[[]],[[]],[[]],[-1,[[3,[-1]]],[4,5]],[[]],[[]],[[],2],[[],2],[[]],[[]],[[],-1,[]],[[],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[3,[-1]]],[4,5]],[-1,[[3,[-1]]],[4,5]],[[[3,[-1]]],[[3,[-1]]],6],[[[7,[-1]]],[[7,[-1]]],6],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[]],[[]],[[[3,[-1]],[3,[-1]]],8,9],[[[7,[-1]],[7,[-1]]],8,9],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[[3,[-1]],10],11,12],[[[7,[-1]],10],11,12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[13],[13],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[-1,-1],[[7,[-1]]],[14,4,15,16,5,17,18,19,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],2],[[],2],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],-1,[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[22,23,23],2],[13,[[1,[13]]]],[[24,25],[[1,[[26,[25]]]]]],[[-1,-2,-2],-2,27,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,2,[]],[[-1,-2],2,[],27],[13],[[-1,-2],[[29,[-1]]],[6,30,31],32],[[[29,[-1]],13,-2],[[29,[13]]],[],32],[[[33,[-1]]],13,34],[35,35],[36,36],[37,37],[[[33,[-1]]],[[33,[-1]]],[6,34]],[22,22],[[[38,[-1,-2,-3,-4,-5]]],[[38,[-1,-2,-3,-4,-5]]],6,6,[30,31,6],[32,6],[32,6]],[[[39,[-1,-2,-3,-4,-5]]],[[39,[-1,-2,-3,-4,-5]]],6,6,[30,31,6],[32,6],[32,6]],[[[40,[-1]]],[[40,[-1]]],[41,6]],[[[42,[-1]]],[[42,[-1]]],[43,6]],[24,24],[[[44,[-1]]],[[44,[-1]]],[45,6]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[35,13],37],[[],35],[[],22],[[],24],[[35,13],[[0,[46]]]],[[35,35],8],[[-1,-2],8,[],[]],[[[40,[-1]]],25,41],[[[42,[-1]]],23,43],[[[44,[-1]]],23,45],0,[[24,25],[[1,[25]]]],[[-1,-2],[[1,[-3]]],[],27,[]],[13,[[26,[13]]]],[[35,10],11],[[36,10],11],[[37,10],11],[[[33,[-1]],10],11,[12,34]],[[22,10],11],[[[38,[-1,-2,-3,-4,-5]],10],11,12,12,[30,31,12],[32,12],[32,12]],[[[39,[-1,-2,-3,-4,-5]],10],11,12,12,[30,31,12],[32,12],[32,12]],[[[40,[-1]],10],11,[41,12]],[[[42,[-1]],10],11,[43,12]],[[[29,[-1]],10],11,12],[[24,10],11],[[[44,[-1]],10],11,[45,12]],[[[47,[-1]],13,13],[],48],[[]],[[]],[[-1,13,-2],2,[],27],[[-1,13,-2],2,[],27],[[-1,13,-2],2,[],27],[[-1,13,-2],2,[],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[49,[13]]],[[33,[-1]]],34],[-1,24,50],0,[[[29,[-1]],13],-1,[]],0,[[24,25],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[13,13],8],[[13,13],8],[[[33,[-1]],13],8,34],[-1,2,[]],[[-1,-2],2,[],27],[[-1,-1],[[1,[-1]]],[]],0,[-1,[[51,[-2,-1,-3]]],27,[],46],[[-1,-2],[[52,[-3,-1,-2,-4,-5]]],27,27,[],46,46],[-1,[[53,[-2,-1,-3]]],27,[],46],[[],22],[[-1,-2],[[38,[-3,-4,-5,-1,-2]]],32,32,[],[],[30,31]],[-1,[[40,[-1]]],41],[-1,[[42,[-1]]],43],[[13,[49,[23]]],54],[[],24],[-1,[[44,[-1]]],45],[36,1],[37,1],[[-1,13],8,[]],[-1,[],[]],[[[52,[-1,-2,-3,-4,-5]]],[],[],27,27,46,46],[54,23],[-1,8,[]],[-1,[],[]],[[[52,[-1,-2,-3,-4,-5]]],[],[],27,27,46,46],[-1,[],[]],[-1,[],[]],[[[51,[-1,-2,-3]]],[],[],27,46],[[[53,[-1,-2,-3]]],[],[],27,46],[[35,13],[[0,[46]]]],[[-1,13,-2,-2],[[26,[-2]]],27,28],[[-1,-2],13,[],27],[[-1,13],8,[]],[-1,8,[]],[[[38,[-1,-2,-3,-4,-5]],-2,-1],2,[],[],[30,31],32,32],[[22,23],23],[[24,25],[[2,[25,25]]]],[[-1,-2],[[1,[-3]]],[],27,[]],[[-1,-2],13,[],27],[-1,[[26,[[2,[-2,13]]]]],50,[6,9]],[[[49,[-1]],13],[[26,[13]]],[6,16]],[[[38,[-1,-2,-3,-4,-5]]],[[39,[-1,-2,-3,-4,-5]]],[14,9,4,15,18,19,55],[],[30,31],32,32],[[[39,[-1,-2,-3,-4,-5]],-2],-1,[14,4,17,19],[],[30,31],32,32],[[[38,[-1,-2,-3,-4,-5]]],[[39,[-1,-2,-3,-4,-5]]],[12,14,9,4,15,18,19,55],[],[12,30,31],32,32],[[13,13],[[47,[-1]]],[]],[[13,13],[[47,[-1]]],[]],[13,36],[[[56,[-1]],-2],[[2,[-1,-3]]],0,27,57],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[[47,[-1]],13,13],2,48],[[],2],[[],2],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[58,58],[59,59],[60,60],[61,61],[62,62],[[[63,[-1]]],[[63,[-1]]],6],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],60],[[],[[63,[-1]]],[]],0,0,0,[[58,-1],2,50],[[59,-1],2,50],[[60,-1],2,50],[[[63,[-1]],-2],2,16,50],[[58,-1],2,50],[[59,-1],2,50],[[58,-1],2,50],[[59,-1],2,50],[[58,-1],2,50],[[58,10],11],[[59,10],11],[[60,10],11],[[61,10],11],[[62,10],11],[[[63,[-1]],10],11,12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[58,13],[[1,[23]]]],[[59,13],[[1,[23]]]],[[58,23,13],2],[[59,13,23],2],[[60,23,23],2],[[[63,[-1]],-1],2,16],[[58,23,13],2],[[59,13,23],2],[[58,23,13,13],2],[[59,13,23,13],2],[[58,23,13,13],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[62,13],[[1,[[26,[13]]]]]],[[[49,[13]]],13],[[13,13,-1],13,32],[[13,13,-1],13,32],[[[49,[-1]],[49,[-1]]],13,9],[[[63,[-1]]],13,[]],[58,13],[13,58],[13,59],[[],60],[-1,61,50],[[[49,[13]]],62],[[],[[63,[-1]]],[]],[58,[[1,[23]]]],[[59,23],[[1,[13]]]],[[60,23],23],[[61,23],23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,8,[]],[[[64,[[2,[-1]]]]],8,65],[[[64,[[2,[-1,-2,-3,-4,-5]]]]],8,65,65,65,65,65],[[[64,[[2,[-1,-2]]]]],8,65,65],[[[64,[[2,[-1,-2,-3,-4,-5,-6]]]]],8,65,65,65,65,65,65],[[[64,[[2,[-1,-2,-3]]]]],8,65,65,65],[[[64,[[2,[-1,-2,-3,-4]]]]],8,65,65,65,65],[[[66,[[2,[-1]]]]],8,65],[[[66,[[2,[-1,-2,-3,-4]]]]],8,65,65,65,65],[[[66,[[2,[-1,-2]]]]],8,65,65],[[[66,[[2,[-1,-2,-3,-4,-5]]]]],8,65,65,65,65,65],[[[66,[[2,[-1,-2,-3]]]]],8,65,65,65],[[[66,[[2,[-1,-2,-3,-4,-5,-6]]]]],8,65,65,65,65,65,65],[[[67,[[2,[-1,-2,-3,-4,-5,-6]]]]],8,65,65,65,65,65,65],[[[67,[[2,[-1,-2,-3,-4,-5]]]]],8,65,65,65,65,65],[[[67,[[2,[-1,-2,-3,-4]]]]],8,65,65,65,65],[[[67,[[2,[-1,-2,-3]]]]],8,65,65,65],[[[67,[[2,[-1]]]]],8,65],[[[67,[[2,[-1,-2]]]]],8,65,65],[[[68,[-1,-2,-3,-4,-5]]],8,[],[],32,32,32],[[[69,[-1,-2,-3,-4,-5]]],8,65,[],32,32,32],[[[70,[-1,-2,-3,-4,-5,-6]]],8,65,[],[],32,32,32],[[[71,[-1]]],8,16],[[[72,[-1]]],8,16],[[[73,[-1]]],8,74],[[[75,[-1]]],8,[]],[[-1,13],8,[]],[[76,13],8],[[77,13],13],[[[78,[-1]],13],[],74],[[[79,[-1]],13,13],[],80],[[[81,[-1]],13],[],74],[[[82,[-1]],13,13],[],74],[[[83,[-1,-2,[83,[-1,-3,[83,[-1,-4,[0,[-1]]]]]]]],[2,[-5,[2,[-6,[2,[-7]]]]]]],[],74,[6,16],[6,16],[6,16],[[84,[-2]]],[[84,[-3]]],[[84,[-4]]]],[[[83,[-1,-2,[0,[-1]]]],[2,[-3]]],[],74,[6,16],[[84,[-2]]]],[[[83,[-1,-2,[83,[-1,-3,[83,[-1,-4,[83,[-1,-5,[0,[-1]]]]]]]]]],[2,[-6,[2,[-7,[2,[-8,[2,[-9]]]]]]]]],[],74,[6,16],[6,16],[6,16],[6,16],[[84,[-2]]],[[84,[-3]]],[[84,[-4]]],[[84,[-5]]]],[[[83,[-1,-2,[83,[-1,-3,[0,[-1]]]]]],[2,[-4,[2,[-5]]]]],[],74,[6,16],[6,16],[[84,[-2]]],[[84,[-3]]]],[[[81,[-1]],13],[],74],[[[82,[-1]],13,13],[],74],[[[85,[-1]],-1],2,[30,31]],[[[86,[-1]],-1],2,16],[[87,23],2],[[87,23],2],[[[85,[-1]],-1,13],2,[30,31]],[[[86,[-1]],-1,13],2,16],[[87,23],2],[[87,23],2],[[[88,[-1,-2]]],[[89,[13,[26,[13]]]]],[],32],[[[90,[-1]]],[[89,[13,[26,[13]]]]],91],[92,[[89,[13,[26,[13]]]]]],[[-1,-2],[[93,[-2]]],[],[]],[[[94,[-1]],-1],[[93,[-1]]],[]],[[[85,[-1]],[85,[-1]]],2,[30,31]],[[[95,[-1]]],49,74],[-1,[[96,[-2]]],[],[]],0,[[[97,[-1]]],1,74],[-1,13,[]],[76,13],[[98,98]],[[98,98]],[[98,98],2],[[98,98]],[[98,98]],[[98,98],2],[[98,98]],[[98,98]],[[98,98],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[99,49],2],[100,2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[85,[-1]]],2,[]],[[[86,[-1]]],2,16],[[[101,[-1,-2]]],2,16,[]],[[[102,[-1]]],2,16],[87,2],[87,2],[[[81,[-1]]],[[81,[-1]]],74],[[[82,[-1]]],[[82,[-1]]],74],[[[83,[-1,-2,-3]]],[[83,[-1,-2,-3]]],74,6,6],[[[103,[-1,-2,-3]]],[[103,[-1,-2,-3]]],74,6,6],[[[104,[-1]]],[[104,[-1]]],105],[[[106,[-1]]],[[106,[-1]]],107],[[[108,[-1]]],[[108,[-1]]],107],[[[95,[-1]]],[[95,[-1]]],74],[[[109,[-1]]],[[109,[-1]]],74],[[[110,[-1]]],[[110,[-1]]],74],[[[97,[-1]]],[[97,[-1]]],74],[[[90,[-1]]],[[90,[-1]]],91],[[[111,[-1,-2]]],[[111,[-1,-2]]],[74,6],[65,6]],[[[64,[-1]]],[[64,[-1]]],6],[[[66,[-1]]],[[66,[-1]]],6],[[[67,[-1]]],[[67,[-1]]],6],[[[68,[-1,-2,-3,-4,-5]]],[[68,[-1,-2,-3,-4,-5]]],6,6,[32,6],[32,6],[32,6]],[[[69,[-1,-2,-3,-4,-5]]],[[69,[-1,-2,-3,-4,-5]]],[65,6],6,[32,6],[32,6],[32,6]],[[[70,[-1,-2,-3,-4,-5,-6]]],[[70,[-1,-2,-3,-4,-5,-6]]],[65,6],6,6,[32,6],[32,6],[32,6]],[[[71,[-1]]],[[71,[-1]]],6],[[[72,[-1]]],[[72,[-1]]],6],[[[73,[-1]]],[[73,[-1]]],[74,6]],[[[75,[-1]]],[[75,[-1]]],6],[76,76],[98,98],[[[112,[-1]]],[[112,[-1]]],6],[[[113,[-1]]],[[113,[-1]]],6],[[[85,[-1]]],[[85,[-1]]],6],[[[86,[-1]]],[[86,[-1]]],6],[[[114,[-1]]],[[114,[-1]]],6],[100,100],[[[101,[-1,-2]]],[[101,[-1,-2]]],6,6],[[[102,[-1]]],[[102,[-1]]],6],[87,87],[99,99],[92,92],[77,77],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[98,98],115],[[[102,[-1]],-1],8,[6,16]],[[[101,[-1,-2]],-1],8,[6,16],[]],[98,25],[98,25],0,[[-1,[93,[-2]]],-2,[],[]],[[[94,[-1]],[93,[-1]]],-1,[]],[[],[[83,[-1,-2,-3]]],74,[],[]],[[],[[103,[-1,-2,-3]]],74,[],[]],[[],[[110,[-1]]],74],[[],[[97,[-1]]],74],[[],[[116,[-1,-2]]],107,[[117,[[0,[[0,[-1]]]]]],118]],[[],[[119,[-1,-2,-3]]],[],[],[[117,[[0,[[2,[[2,[-1,-2]],13]]]]]],118]],[[],[[94,[-1]]],[]],[[],[[73,[-1]]],74],[[],[[75,[-1]]],[]],[[],98],[[],[[85,[-1]]],[30,31]],[[],[[86,[-1]]],16],[[],[[114,[-1]]],16],[[],[[101,[-1,-2]]],16,[]],[[],[[102,[-1]]],16],[[],87],[-1,[[111,[-2,-1]]],120,74],[-1,[[111,[-2,-1]]],120,74],0,[[[85,[-1]]],[[121,[-1,13]]],[]],[[[101,[-1,-2]],[2,[-1,-1]],-3],2,[6,16],6,27],[[[102,[-1]],[2,[-1,-1]],-2],2,[6,16],27],[[[116,[-1,-2]]],2,107,[[117,[[0,[[0,[-1]]]]]]]],[[[119,[-1,-2,-3]]],2,[],[],[[117,[[0,[[2,[[2,[-1,-2]],13]]]]]]]],[[[94,[-1]]],2,[]],[99,[[26,[[2,[13,13]]]]]],[[98,98],8],[[-1,-2],8,[],[]],[[[116,[-1,-2]],-3],2,107,[[117,[[0,[[0,[-1]]]]]]],50],[[[85,[-1]],-2],2,[30,31],50],[[[85,[-1]],-2],2,[30,31],50],[[[86,[-1]],-2],2,16,50],[[[86,[-1]],-2],2,16,50],[[[101,[-1,-2]],-3],2,[6,16],[6,30],50],[[[102,[-1]],-2],2,[6,16],50],[[[88,[-1,-2]],13],13,[],32],[[[90,[-1]],13],13,91],[[99,-1],[[20,[13,13]]],50],[[92,13],13],[[99,13,-1],[[20,[13,13]]],50],[[[88,[-1,-2]],13],[[122,[[0,[-1]]]]],[],32],[[[88,[-1,-2]],13],[[123,[[0,[-1]]]]],[],32],[-1,[[1,[[2,[-2,-3]]]]],[],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[[2,[-2,-3]]]]],[],[],[]],[[[78,[-1]],10],11,74],[[[81,[-1]],10],11,74],[[[82,[-1]],10],11,74],[[[83,[-1,-2,-3]],10],11,74,12,12],[[[103,[-1,-2,-3]],10],11,74,12,12],[[[104,[-1]],10],11,105],[[[106,[-1]],10],11,107],[[[108,[-1]],10],11,107],[[[95,[-1]],10],11,74],[[[109,[-1]],10],11,74],[[[110,[-1]],10],11,74],[[[97,[-1]],10],11,74],[[[116,[-1,-2]],10],11,107,[[117,[[0,[[0,[-1]]]]]]]],[[[119,[-1,-2,-3]],10],11,12,12,[[117,[[0,[[2,[[2,[-1,-2]],13]]]]]]]],[[[90,[-1]],10],11,91],[[[94,[-1]],10],11,12],[[[111,[-1,-2]],10],11,74,[65,12]],[[[64,[-1]],10],11,12],[[[66,[-1]],10],11,12],[[[67,[-1]],10],11,12],[[[68,[-1,-2,-3,-4,-5]],10],11,12,12,[32,12],[32,12],[32,12]],[[[69,[-1,-2,-3,-4,-5]],10],11,[65,12],12,[32,12],[32,12],[32,12]],[[[70,[-1,-2,-3,-4,-5,-6]],10],11,[65,12],12,12,[32,12],[32,12],[32,12]],[[[71,[-1]],10],11,12],[[[72,[-1]],10],11,12],[[[73,[-1]],10],11,[74,12]],[[[75,[-1]],10],11,12],[[76,10],11],[[98,10],11],[[[112,[-1]],10],11,12],[[[113,[-1]],10],11,[12,30,31]],[[[85,[-1]],10],11,12],[[[86,[-1]],10],11,12],[[[114,[-1]],10],11,12],[[100,10],11],[[[101,[-1,-2]],10],11,12,12],[[[102,[-1]],10],11,12],[[87,10],11],[[99,10],11],[[92,10],11],[[77,10],11],[[[78,[-1]],-2],[],91,[[84,[13]]]],[[[79,[-1]],-2,-3],[],124,[[84,[13]]],[[84,[13]]]],[[[81,[-1]],13,13],[],91],[[[82,[-1]],13,13,13,13],[],91],[[[103,[-1,-2,[103,[-1,-3,[0,[-1]]]]]],[2,[-4,[2,[-5]]]]],[],74,[6,16],[6,16],[[84,[-2]]],[[84,[-3]]]],[[[103,[-1,-2,[0,[-1]]]],[2,[-3]]],[],74,[6,16],[[84,[-2]]]],[[[103,[-1,-2,[103,[-1,-3,[103,[-1,-4,[103,[-1,-5,[0,[-1]]]]]]]]]],[2,[-6,[2,[-7,[2,[-8,[2,[-9]]]]]]]]],[],74,[6,16],[6,16],[6,16],[6,16],[[84,[-2]]],[[84,[-3]]],[[84,[-4]]],[[84,[-5]]]],[[[103,[-1,-2,[103,[-1,-3,[103,[-1,-4,[0,[-1]]]]]]]],[2,[-5,[2,[-6,[2,[-7]]]]]]],[],74,[6,16],[6,16],[6,16],[[84,[-2]]],[[84,[-3]]],[[84,[-4]]]],[[[104,[-1]],13,13],[],105],[[[106,[-1]],13,13],[],107],[[[108,[-1]],13,13],[],107],[[[95,[-1]],-2],[],74,[[84,[13]]]],[[[109,[-1]],-2],[],74,[[84,[13]]]],[[[116,[-1,-2]],-3],[],107,[[117,[[0,[[0,[-1]]]]]]],[[84,[13]]]],[[[111,[-1,-2]]],[],74,65],[[[106,[-1]]],[],107],[[[108,[-1]]],[],107],[[[95,[-1]]],[],80],[[[109,[-1]]],[],80],[[[110,[-1]]],[],74],[[[97,[-1]]],[],74],[[[104,[-1]],13,13],[],105],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[13,13,-1],[[79,[-2]]],27,80],[-1,[[78,[-2]]],50,74],[-1,76,50],[-1,[[112,[-2]]],50,16],[-1,[[113,[-2]]],50,[16,31]],[-1,[[85,[-2]]],50,[30,31]],[-1,[[85,[-2]]],50,[30,31]],[-1,[[86,[-2]]],50,16],[-1,[[86,[-2]]],50,16],[-1,[[101,[-2,-3]]],50,[6,16],[6,30]],[-1,[[102,[-2]]],50,[6,16]],[49,[[81,[-1]]],74],[26,[[106,[-1]]],107],[26,[[95,[-1]]],74],[[[97,[-1]]],1,74],[[[81,[-1]],13],[],91],[[[82,[-1]],13,13],[],91],[[[106,[-1]],13],[],107],[[[108,[-1]],13],[],107],[[[95,[-1]],13],[],74],[[[109,[-1]],13],[],74],[[[116,[-1,-2]],13],1,107,[[117,[[0,[[0,[-1]]]]]]]],[[[119,[-2,-3,-4]],-1],[[1,[-3]]],[16,120],[[125,[-1]]],[],[[117,[[0,[[2,[[2,[-2,-3]],13]]]]]]]],[[98,13],8],[[[85,[-1]],-1],13,[30,31]],[[[86,[-1]],-1],13,16],[[[101,[-1,-2]],-1],[[1,[-2]]],[6,16],[]],[[[90,[-1]],13,13],1,91],[[[119,[-2,-3,-4]],-1],[[1,[[2,[-2,-3]]]]],[16,120],[[125,[-1]]],[],[[117,[[0,[[2,[[2,[-2,-3]],13]]]]]]]],[[[119,[-1,-2,-3]],13],[[1,[[2,[-1,-2]]]]],[],[],[[117,[[0,[[2,[[2,[-1,-2]],13]]]]]]]],[[[101,[-1,-2]],-1,-3],[[1,[[2,[[2,[-1,-1]],-2]]]]],[6,16],[],27],[[[102,[-1]],-1,-2],[[1,[[2,[-1,-1]]]]],[6,16],27],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],[],[]],[[-1,-2],[[1,[-2]]],[],[]],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],[],[]],[[-1,-2],[[1,[-2]]],[],[]],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],[],[]],[[-1,-2],[[1,[-2]]],[],[]],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],[],[]],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],[],[]],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],[],[]],[[-1,-2],[[1,[-2]]],[],[]],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],[],[]],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],[],[]],[[[102,[-1]],-1],[[1,[[2,[-1,-1]]]]],[6,16]],[[[101,[-1,-2]],-1],[[1,[[2,[[2,[-1,-1]],-2]]]]],[6,16],[]],[[[101,[-1,-2]],-1,-3],[[1,[[2,[[2,[-1,-1]],-2]]]]],[6,16],[],27],[[[102,[-1]],-1,-2],[[1,[[2,[-1,-1]]]]],[6,16],27],[[[90,[-1]],13],[],91],[[[49,[-1]]],[[71,[-1]]],[]],[[[49,[-1]]],[[72,[-1]]],[]],[[[49,[-1]]],[[71,[-1]]],[]],[[[49,[-1]]],[[72,[-1]]],[]],[[98,-1],2,126],[[[104,[-1]]],13,105],[[[104,[-1]],13],[],105],[[-1,-2],[[1,[13]]],[],[]],[[[112,[-1]],-1],[[1,[13]]],16],[[[113,[-1]],-1],[[1,[13]]],[16,31]],[[-1,-2],13,[],[]],[[[112,[-1]],-1],13,16],[[[113,[-1]],-1],13,[16,31]],[-1,[],[]],[[[64,[[2,[-1,-2,-3,-4,-5]]]]],[],65,65,65,65,65],[[[64,[[2,[-1,-2,-3,-4,-5,-6]]]]],[],65,65,65,65,65,65],[[[64,[[2,[-1,-2]]]]],[],65,65],[[[64,[[2,[-1,-2,-3,-4]]]]],[],65,65,65,65],[[[64,[[2,[-1]]]]],[],65],[[[64,[[2,[-1,-2,-3]]]]],[],65,65,65],[[[66,[[2,[-1,-2,-3]]]]],[],65,65,65],[[[66,[[2,[-1,-2,-3,-4,-5]]]]],[],65,65,65,65,65],[[[66,[[2,[-1,-2]]]]],[],65,65],[[[66,[[2,[-1]]]]],[],65],[[[66,[[2,[-1,-2,-3,-4,-5,-6]]]]],[],65,65,65,65,65,65],[[[66,[[2,[-1,-2,-3,-4]]]]],[],65,65,65,65],[[[67,[[2,[-1,-2,-3,-4]]]]],[],65,65,65,65],[[[67,[[2,[-1]]]]],[],65],[[[67,[[2,[-1,-2,-3]]]]],[],65,65,65],[[[67,[[2,[-1,-2,-3,-4,-5]]]]],[],65,65,65,65,65],[[[67,[[2,[-1,-2,-3,-4,-5,-6]]]]],[],65,65,65,65,65,65],[[[67,[[2,[-1,-2]]]]],[],65,65],[[[68,[-1,-2,-3,-4,-5]]],[],[],[],32,32,32],[[[69,[-1,-2,-3,-4,-5]]],[],65,[],32,32,32],[[[70,[-1,-2,-3,-4,-5,-6]]],[],65,[],[],32,32,32],[[[71,[-1]]],[],16],[[[72,[-1]]],[],16],[[[73,[-1]]],[],74],[[[75,[-1]]],[],[]],[[[116,[-1,-2]],13],2,107,[[117,[[0,[[0,[-1]]]]]]]],[[[119,[-1,-2,-3]],-1,-2],[[1,[-2]]],16,[],[[117,[[0,[[2,[[2,[-1,-2]],13]]]]]]]],[[[114,[-1]],-1,-1],2,[14,5,16,17,18,19,55]],[[[101,[-1,-2]],[2,[-1,-1]],-2],2,[6,16],[6,30]],[[[102,[-1]],[2,[-1,-1]]],2,[6,16]],[[99,-1],[[26,[13]]],50],[[99,13,-1],[[26,[13]]],50],[[99,13,13],13],[[[101,[-1,-2]],[2,[-1,-1]],-2,-3],2,[6,16],[6,30],27],[[[102,[-1]],[2,[-1,-1]],-2],2,[6,16],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[110,[-1]]],8,74],[[[97,[-1]]],8,74],[[[116,[-1]]],8,107],[[[119,[-1,-2,-3]]],8,[],[],[[117,[[0,[[2,[[2,[-1,-2]],13]]]]]]]],[[[85,[-1]]],8,[]],[[[86,[-1]]],8,[]],[[[90,[-1]],13,13],8,91],[[[119,[-1,-2,-3]]],[[0,[-1,-2]]],[],[],[[117,[[0,[[2,[[2,[-1,-2]],13]]]]]]]],[[[85,[-1]]],[[127,[-1,13]]],[]],[[[86,[-1]]],[[128,[-1,13]]],[]],[[[101,[-1,-2]]],[[128,[[2,[-1,-1]],-2]]],[],[]],[[[102,[-1]]],[[129,[[2,[-1,-1]],2]]],[]],[[[101,[-1,-2]]],[[130,[[2,[-1,-1]],-2]]],[],[]],[[[85,[-1]]],[[131,[-1,13]]],[]],[[[86,[-1]]],[[129,[-1,13]]],[]],[[[101,[-1,-2]]],[[129,[[2,[-1,-1]],-2]]],[],[]],[-1,[[1,[[2,[-2,-3]]]]],[],[],[]],[-1,[[1,[-2]]],[],[]],[[[110,[-1]]],1,74],[-1,[[1,[[2,[-2,-3]]]]],[],[],[]],[[[110,[-1]]],13,74],[[[97,[-1]]],13,74],[[[116,[-1]]],13,107],[[[119,[-1,-2,-3]]],13,[],[],[[117,[[0,[[2,[[2,[-1,-2]],13]]]]]]]],[[[85,[-1]]],13,[]],[[[86,[-1]]],13,[]],[[[49,[-1]]],[[71,[-1]]],[]],[[[49,[-1]]],[[72,[-1]]],[]],[[[49,[-1]]],[[71,[-1]]],[]],[[[49,[-1]]],[[72,[-1]]],[]],[[[81,[-1]]],13,74],[[[111,[-1,-2]],-3],[[89,[-4]]],74,65,27,[30,31]],[[[88,[-1,-2]],13],[[26,[13]]],[],32],[[[90,[-1]],13],[[26,[13]]],91],[[92,13],[[26,[13]]]],[87,[[2,[[1,[23]],[1,[23]]]]]],[87,23],[[-1,-2],[[2,[-2,-2]]],[],[]],[[[116,[-1,-2]],13,-3],2,107,[[117,[[0,[[0,[-1]]]]]]],132],[[[49,[26]]],[[79,[-1]]],80],[13,[[81,[-1]]],74],[[13,13],[[82,[-1]]],74],[[[49,[[2,[-1]]]]],[[83,[-2,-1,[0,[-2]]]]],[6,16],74],[[[49,[[2,[-1,[2,[-2,[2,[-3,[2,[-4]]]]]]]]]]],[[83,[-5,-1,[83,[-5,-2,[83,[-5,-3,[83,[-5,-4,[0,[-5]]]]]]]]]]],[6,16],[6,16],[6,16],[6,16],74],[[[49,[[2,[-1,[2,[-2,[2,[-3]]]]]]]]],[[83,[-4,-1,[83,[-4,-2,[83,[-4,-3,[0,[-4]]]]]]]]],[6,16],[6,16],[6,16],74],[[[49,[[2,[-1,[2,[-2]]]]]]],[[83,[-3,-1,[83,[-3,-2,[0,[-3]]]]]]],[6,16],[6,16],74],[[[49,[[2,[-1,[2,[-2]]]]]]],[[103,[-3,-1,[103,[-3,-2,[0,[-3]]]]]]],[6,16],[6,16],74],[[[49,[[2,[-1]]]]],[[103,[-2,-1,[0,[-2]]]]],[6,16],74],[[[49,[[2,[-1,[2,[-2,[2,[-3]]]]]]]]],[[103,[-4,-1,[103,[-4,-2,[103,[-4,-3,[0,[-4]]]]]]]]],[6,16],[6,16],[6,16],74],[[[49,[[2,[-1,[2,[-2,[2,[-3,[2,[-4]]]]]]]]]]],[[103,[-5,-1,[103,[-5,-2,[103,[-5,-3,[103,[-5,-4,[0,[-5]]]]]]]]]]],[6,16],[6,16],[6,16],[6,16],74],[26,[[104,[-1]]],105],[-1,[[133,[-2,-3,-4]]],50,16,16,[]],[13,[[106,[-1]]],107],[13,[[108,[-1]]],107],[[13,-1,-2],[[88,[-3,-2]]],32,32,[]],[13,[[95,[-1]]],74],[13,[[109,[-1]]],74],[[],[[110,[-1]]],74],[[],[[97,[-1]]],74],[[],[[116,[-1]]],107],[[],[[119,[-1,-2]]],[],[]],[13,[[90,[-1]]],91],[[],[[94,[-1]]],[]],[-1,[[111,[-2,-1]]],65,74],[[-1,-2,-3],[[68,[-4,-5,-1,-2,-3]]],32,32,32,[],[]],[[-1,-2,-3,-4],[[69,[-1,-5,-2,-3,-4]]],65,32,32,32,[]],[[-1,-2,-3,-4],[[70,[-1,-5,-6,-2,-3,-4]]],65,32,32,32,[],[]],[[],[[73,[-1]]],74],[[],[[75,[-1]]],[]],[13,98],[[],[[85,[-1]]],[30,31]],[[],[[86,[-1]]],16],[[],[[114,[-1]]],[14,5,16,17,18,19,55]],[13,100],[[],[[101,[-1,-2]]],16,[]],[[],[[102,[-1]]],16],[[],87],[13,99],[13,92],[[[26,[-1]],13],77,[6,134]],[-1,1,[]],[[[64,[[2,[-1,-2,-3,-4,-5,-6]]]]],1,65,65,65,65,65,65],[[[64,[[2,[-1]]]]],1,65],[[[64,[[2,[-1,-2,-3]]]]],1,65,65,65],[[[64,[[2,[-1,-2,-3,-4,-5]]]]],1,65,65,65,65,65],[[[64,[[2,[-1,-2,-3,-4]]]]],1,65,65,65,65],[[[64,[[2,[-1,-2]]]]],1,65,65],[[[66,[[2,[-1,-2,-3,-4,-5,-6]]]]],1,65,65,65,65,65,65],[[[66,[[2,[-1,-2,-3,-4,-5]]]]],1,65,65,65,65,65],[[[66,[[2,[-1,-2]]]]],1,65,65],[[[66,[[2,[-1,-2,-3,-4]]]]],1,65,65,65,65],[[[66,[[2,[-1]]]]],1,65],[[[66,[[2,[-1,-2,-3]]]]],1,65,65,65],[[[67,[[2,[-1,-2]]]]],1,65,65],[[[67,[[2,[-1,-2,-3,-4]]]]],1,65,65,65,65],[[[67,[[2,[-1,-2,-3,-4,-5,-6]]]]],1,65,65,65,65,65,65],[[[67,[[2,[-1,-2,-3]]]]],1,65,65,65],[[[67,[[2,[-1]]]]],1,65],[[[67,[[2,[-1,-2,-3,-4,-5]]]]],1,65,65,65,65,65],[[[68,[-1,-2,-3,-4,-5]]],1,[],[],32,32,32],[[[69,[-1,-2,-3,-4,-5]]],1,65,[],32,32,32],[[[70,[-1,-2,-3,-4,-5,-6]]],1,65,[],[],32,32,32],[[[71,[-1]]],1,16],[[[72,[-1]]],1,16],[[[73,[-1]]],1,74],[[[75,[-1]]],1,[]],[[99,13,13],[[1,[13]]]],[99,13],[98],[98],[13,98],[[98,98],[[1,[115]]]],[[[110,[-1]]],1,74],[[[97,[-1]]],1,74],[-1,[[1,[[2,[-2,-3]]]]],[],6,[]],[-1,[[1,[-2]]],[],6],[[-1,-2],[[1,[[2,[-3,-4]]]]],[],27,6,[]],[[-1,-2],[[1,[-3]]],[],27,6],[[[97,[-1]]],1,74],[-1,[[1,[[2,[-2,-3]]]]],[],6,[]],[-1,[[1,[-2]]],[],6],[[-1,-2],[[1,[[2,[-3,-4]]]]],[],27,6,[]],[[-1,-2],[[1,[-3]]],[],27,6],[[[101,[-1,-2]],-1,-3],[[1,[[2,[[2,[-1,-1]],-2]]]]],[6,16],[],27],[[[102,[-1]],-1,-2],[[1,[[2,[-1,-1]]]]],[6,16],27],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],6,[]],[[-1,-2],[[1,[-2]]],[],6],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],6,[]],[[-1,-2],[[1,[-2]]],[],6],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],6,[]],[[-1,-2],[[1,[-2]]],[],6],[[-1,-2,-3],[[1,[[2,[-2,-4]]]]],[],6,27,[]],[[-1,-2,-3],[[1,[-2]]],[],6,27],[[-1,-2,-3],[[1,[[2,[-2,-4]]]]],[],6,27,[]],[[-1,-2,-3],[[1,[-2]]],[],6,27],[[-1,-2],[[1,[[2,[-2,-3]]]]],[],6,[]],[[-1,-2],[[1,[-2]]],[],6],[[-1,-2,-3],[[1,[[2,[-2,-4]]]]],[],6,27,[]],[[-1,-2,-3],[[1,[-2]]],[],6,27],[[-1,-2,-3],[[1,[[2,[-2,-4]]]]],[],6,27,[]],[[-1,-2,-3],[[1,[-2]]],[],6,27],[[[101,[-1,-2]],-1,-3],[[1,[[2,[[2,[-1,-1]],-2]]]]],[6,16],[],27],[[[102,[-1]],-1,-2],[[1,[[2,[-1,-1]]]]],[6,16],27],[[[106,[-1]],13,13,-2],[[1,[13]]],107,32],[[[108,[-1]],13,13,-2],[[1,[13]]],107,32],[[[95,[-1]],-2,-3],[[1,[13]]],74,[[84,[13]]],32],[[[109,[-1]],-2,-3],[[1,[13]]],74,[[84,[13]]],32],[[[116,[-1,-2]],-3,-4],[[1,[13]]],107,[[117,[[0,[[0,[-1]]]]]]],[[84,[13]]],27],[[[110,[-1]]],2,74],[[[97,[-1]]],2,74],[[[97,[-1]]],2,74],[[77,[135,[13]],13],13],[[77,[135,[13]],13],13],[[[114,[-1]],-1],[[1,[-1]]],[14,5,16,17,18,19,55]],[[[133,[-1,-2,-3]],[135,[-1]],[135,[-2]]],[[26,[-3]]],16,16,[]],[[[119,[-2,-3,-4]],-5],[[0,[-2,-3]]],[16,120],[[125,[-1]]],[],[[117,[[0,[[2,[[2,[-2,-3]],13]]]]]]],[[84,[-1]]]],[[[86,[-2]],-3],[[136,[-2,13]]],16,[[125,[-1]],16],[[84,[-1]]]],[[[119,[-1,-2,-3]],-4],[[0,[-1,-2]]],[],[],[[117,[[0,[[2,[[2,[-1,-2]],13]]]]]]],[[84,[13]]]],[[77,13,[135,[13]]],13],[[-1,13],13,[]],[[-1,13],13,[]],[[-1,13],13,[]],[[-1,13],13,[]],[[76,13],13],[[77,13,[135,[13]]],13],[[77,[135,[13]],[135,[13]]],13],[[[116,[-1,-2]],13],1,107,[[117,[[0,[[0,[-1]]]]]]]],[[[119,[-2,-3,-4]],-1],[[1,[-3]]],[16,120],[[125,[-1]]],[],[[117,[[0,[[2,[[2,[-2,-3]],13]]]]]]]],[[[85,[-1]],-1],8,[30,31]],[[[86,[-1]],-1],8,16],[[[101,[-1,-2]],[2,[-1,-1]]],2,[6,16],6],[[[102,[-1]],[2,[-1,-1]]],2,[6,16]],[[[119,[-1,-2,-3]],13],[[1,[[2,[-1,-2]]]]],[],[],[[117,[[0,[[2,[[2,[-1,-2]],13]]]]]]]],[[[85,[-1]],-1,13],13,[30,31]],[[[86,[-1]],-1,13],13,16],[[[116,[-1,-2]],-3],2,107,[[117,[[0,[[0,[-1]]]]]]],[[84,[13]]]],[[[88,[-1,-2]]],[[26,[13]]],[],32],[[[90,[-1]]],[[26,[13]]],91],[92,[[26,[13]]]],[[[116,[-1,-2]],13],2,107,[[117,[[0,[[0,[-1]]]]]]]],[[[116,[-1,-2]],13],2,107,[[117,[[0,[[0,[-1]]]]]]]],[[[106,[-1]],13,13,-2],[[1,[13]]],107,32],[[[108,[-1]],13,13,-2],[[1,[13]]],107,32],[[[95,[-1]],-2,-3],[[1,[13]]],74,[[84,[13]]],32],[[[109,[-1]],-2,-3],[[1,[13]]],74,[[84,[13]]],32],[[[116,[-1,-2]],-3,-4],[[1,[13]]],107,[[117,[[0,[[0,[-1]]]]]]],[[84,[13]]],27],[[[111,[-1,-2]],-3,13],[],74,65,27],[[[111,[-1,-2]],-3,13,-4],[],74,65,27,27],[[[88,[-1,-2]],13,13],8,[],32],[[92,13,13],8],[[77,13,13],[[1,[13]]]],[[-1,13],[[1,[13]]],[]],[[-1,13],[[1,[13]]],[]],[[76,13],[[1,[13]]]],[[-1,13],[[1,[13]]],[]],[[-1,13],[[1,[13]]],[]],[[76,13],[[1,[13]]]],[[[81,[-1]],13],2,91],[[[82,[-1]],13,13],2,91],[[[106,[-1]],13],2,107],[[[108,[-1]],13],2,107],[[[95,[-1]],13],2,74],[[[109,[-1]],13],2,74],[[98,13,8],2],[[87,23],2],[[98,13]],[[98,13],2],[[98,13],2],[[98,13]],[[98,13],2],[[98,13],2],[-1,13,[]],[[[88,[-1,-2]],13],13,[],32],[[[90,[-1]],13],13,91],[[[112,[-1]]],13,16],[[[113,[-1]]],13,[16,31]],[[92,13],13],[[87,23,23],2],[[[111,[-1,-2]],-3],2,74,65,27],[[[111,[-1,-2]],-3,-4],2,74,65,27,27],[-1,[[26,[-1]]],[]],[[-1,13],[[26,[-1]]],[]],[[-1,-1],[[26,[-1]]],[]],[[-1,-1,13],[[26,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[[88,[-1,-2]],13,13],8,[],32],[[[90,[-1]],13,13],8,91],[[92,13,13],8],[[[81,[-1]],13],2,74],[[[82,[-1]],13,13],2,74],[[[83,[-1,-2,[83,[-1,-3,[83,[-1,-4,[0,[-1]]]]]]]],[2,[-2,[2,[-3,[2,[-4]]]]]]],2,74,[6,16],[6,16],[6,16]],[[[83,[-1,-2,[83,[-1,-3,[0,[-1]]]]]],[2,[-2,[2,[-3]]]]],2,74,[6,16],[6,16]],[[[83,[-1,-2,[83,[-1,-3,[83,[-1,-4,[83,[-1,-5,[0,[-1]]]]]]]]]],[2,[-2,[2,[-3,[2,[-4,[2,[-5]]]]]]]]],2,74,[6,16],[6,16],[6,16],[6,16]],[[[83,[-1,-2,[0,[-1]]]],[2,[-2]]],2,74,[6,16]],[[[103,[-1,-2,[103,[-1,-3,[103,[-1,-4,[0,[-1]]]]]]]],[2,[-2,[2,[-3,[2,[-4]]]]]]],2,74,[6,16],[6,16],[6,16]],[[[103,[-1,-2,[0,[-1]]]],[2,[-2]]],2,74,[6,16]],[[[103,[-1,-2,[103,[-1,-3,[103,[-1,-4,[103,[-1,-5,[0,[-1]]]]]]]]]],[2,[-2,[2,[-3,[2,[-4,[2,[-5]]]]]]]]],2,74,[6,16],[6,16],[6,16],[6,16]],[[[103,[-1,-2,[103,[-1,-3,[0,[-1]]]]]],[2,[-2,[2,[-3]]]]],2,74,[6,16],[6,16]],[[[106,[-1]],13,13],2,107],[[[108,[-1]],13,13],2,107],[[[95,[-1]],13],2,74],[[[109,[-1]],13],2,74],[[[116,[-1,-2]],-3],2,107,[[117,[[0,[[0,[-1]]]]]]],[[84,[13]]]],[[100,13,13,23,23],2],[[100,137,13,23,23],2],[[23,13],87],[[[85,[-1]]],[[138,[-1,13]]],[]],[[[86,[-1]]],[[139,[-1,13]]],[]],[[[101,[-1,-2]]],[[139,[[2,[-1,-1]],-2]]],[],[]],[[[101,[-1,-2]]],[[140,[[2,[-1,-1]],-2]]],[],[]],[13,[[116,[-1]]],107],[13,[[119,[-1,-2]]],[],[]],[13,[[94,[-1]]],[]],[13,[[85,[-1]]],[30,31]],[[13,13],99],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-1],115,[]],[[-1,-1],8,[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[141,[-1]],[141,[-1]],[141,[-1]]],142,143],[[[144,[-1]],[141,[-1]]],142,143],[[[145,[-1]],[141,[-1]]],142,143],[[[141,[-1]],[141,[-1]],[141,[-1]]],142,143],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[146,[-1]]],[[146,[-1]]],[147,6]],[142,142],[[[148,[-1]]],[[148,[-1]]],6],[[[144,[-1]]],[[144,[-1]]],6],[[[145,[-1]]],[[145,[-1]]],6],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[26,[[141,[149]]]]],149],[[[146,[-1]],[146,[-1]]],115,147],[[142,142],115],[[[148,[-1]],[141,[-1]]],8,[143,150]],[[[49,[[141,[-1]]]]],-1,[57,143]],[[[26,[[141,[-1]]]]],[[26,[[141,[-1]]]]],[57,143]],[[[148,[-1]],[148,[-1]]],[[1,[[2,[[141,[-1]],[141,[-1]]]]]]],[143,150]],[[[145,[-1]],[145,[-1]]],[[1,[[141,[-1]]]]],[143,150]],[[],[[146,[-1]]],[147,118]],[[[144,[-1]]],[[141,[-1]]],143],[[[145,[-1]]],[[141,[-1]]],143],[[[145,[-1]],[145,[-1]]],-1,[143,150]],[[[144,[-1]],[141,[-1]]],-1,[143,150]],[[[145,[-1]],[141,[-1]]],-1,[143,150]],[[[146,[-1]],[146,[-1]]],8,147],[[142,142],8],[[[148,[-1]],[148,[-1]]],8,9],[[[144,[-1]],[144,[-1]]],8,9],[[[145,[-1]],[145,[-1]]],8,9],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[[146,[-1]],10],11,[147,12]],[[142,10],11],[[[148,[-1]],10],11,12],[[[144,[-1]],10],11,12],[[[145,[-1]],10],11,12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[142,-1],2,126],[[[145,[-1]],[145,[-1]]],8,143],[[[145,[-1]],[141,[-1]]],8,143],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[144,[-1]],[144,[-1]]],8,143],[[[145,[-1]],[145,[-1]]],8,143],[[[144,[-1]],[144,[-1]]],8,143],[[[145,[-1]],[145,[-1]]],8,143],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[[141,[-1]],-1],[[148,[-1]]],[143,150]],[[[141,[-1]],[141,[-1]]],[[144,[-1]]],[]],[[[141,[-1]],[141,[-1]]],[[145,[-1]]],[]],[[[146,[-1]],[146,[-1]]],[[1,[115]]],147],[[142,142],[[1,[115]]]],[[[144,[-1]],[141,[-1]]],[[141,[-1]]],[143,150]],[[[145,[-1]],[141,[-1]]],[[141,[-1]]],[143,150]],[[[144,[-1]],[141,[-1]]],[[141,[-1]]],[143,150]],[[[145,[-1]],[141,[-1]]],[[141,[-1]]],[143,150]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[151,13,8,13,8],2],[[152,13,13,23],2],[[152,13,13,-1],2,27],[[152,13,13,13,13,25],2],[[152,13,13,13,13,25],2],[[[153,[-1,-2]],13,13,-1],2,[],[]],[[154,13,13],2],[[155,13,13],2],[[156,13,13,25],2],[[157,13,13,25,23],2],[[151,13,13],2],[[151,13,13],2],[[154,13,13],2],[[[158,[0]],[2,[13,13]]],[[0,[0]]]],[[[158,[0]],[2,[13,13]]],[[0,[0]]]],[-1,[],[]],[[[159,[-1]]],[],32],[[[160,[-1,-2,-3]]],[],[30,14],[],32],[[[158,[0]]]],[[[158,[0]]]],[[[161,[-1]]],[],[]],[[[161,[-1]],13],[[163,[162]]],[]],[-1,[],[]],[[[161,[-1]]],[],[]],[-1,[],[]],[[[159,[-1]]],[],32],[[[160,[-1,-2,-3]]],[],[30,14],[],32],[[154,13],[[26,[0]]]],0,[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[],[]],[[[164,[-1,-2]]],[],[30,14],6],[[[165,[-1,-2,-3]]],[],[30,14],[],6],[[-1,-2],[],[],[]],[[[159,[-1]],-2],[],32,32],[[[160,[-1,-2,-3]],-4],[],[30,14],[],32,32],[[[158,[0]],-1],[],32],[[[158,[0]],-1],[],32],[[[161,[-1]],-2],[],[],[]],[[-2,-3,-1,8],1,[],[166,167,[168,[-1]],169],50],[[-2,-3,-1,8],1,[],[166,167,[168,[-1]],169],50],[[-2,-1,8],1,[],[166,167,[168,[-1]],169]],[[-2,-1,8],1,[],[166,167,[168,[-1]],169]],[[-2,-3,-1],[],[],[167,[168,[-1]]],50],[[-2,-3,-1],[],[],[167,[168,[-1]]],50],[[-2,-1],[],[],[167,[168,[-1]]]],[[-2,-1],[],[],[167,[168,[-1]]]],[[[161,[-1]],13],[[26,[13]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[153,[-1,-2]]],[[2,[[161,[-2]],[26,[-1]]]]],[],170],[[156,171],172],[[157,171],173],[[13,13],156],[[13,13],157],[13,[[153,[-1,-2]]],[],[]],[[13,13],[[153,[-1,-2]]],[],[]],[[172,13,25,25],2],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[154,154],[155,155],[174,174],[[[175,[-1]]],[[175,[-1]]],6],[[[176,[-1,-2]]],[[176,[-1,-2]]],6,6],[[[164,[-1,-2]]],[[164,[-1,-2]]],6,6],[[[165,[-1,-2,-3]]],[[165,[-1,-2,-3]]],6,6,6],[[[158,[-1]]],[[158,[-1]]],6],[156,156],[172,172],[157,157],[152,152],[177,177],[178,178],[179,179],[162,162],[[[161,[-1]]],[[161,[-1]]],6],[180,180],[151,151],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[175,[-1]],[175,[-1]]],115,16],[[[176,[-1,-2]],[176,[-1,-2]]],115,16,16],[[[164,[-1,-2]],[164,[-1,-2]]],115,16,16],[[[165,[-1,-2,-3]],[165,[-1,-2,-3]]],115,16,16,16],[[177,177],115],[[178,178],115],[[179,179],115],[[162,162],115],[180,[[26,[[26,[13]]]]]],[[-1,-2],[],[],27],[[[161,[-1]],-2],[],[],27],[[13,[26,[[2,[13,13]]]]],[[161,[-1]]],[]],[[13,[26,[[2,[13,13]]]]],[[161,[177]]]],[[13,[26,[[2,[13,13]]]]],[[161,[178]]]],[[13,[26,[[2,[13,13]]]]],[[161,[179]]]],[[-1,-2],[],[],27],[[[159,[-1]],-2],[],[],27],[[[160,[-1,-2,-3]],-4],[],[30,14,31],[],[],27],[[[158,[-1]],-2],[],[],27],[[[161,[-1]],-2],[],[],27],[[],154],[[],152],[[],162],[[[161,[-1]],13],[[26,[13]]],[]],[[[161,[-1]],13],[[26,[8]]],[]],[[-2,-3,-1],[],[],[167,[168,[-1]]],50],[[-2,-3,-1],[],[],[167,[168,[-1]]],50],[[-2,-1],[],[],[167,[168,[-1]]]],[[-2,-1],[],[],[167,[168,[-1]]]],[[13,13,[49,[[2,[13,13]]]]],[[26,[[2,[[26,[13]],[26,[13]]]]]]]],[-1,[],[]],[174,[[163,[[2,[13,13]]]]]],0,0,0,0,[174,13],[[[161,[-1]]],13,[]],[-1,[],[]],[[[176,[-1,-2]]],[],[30,14],[30,14]],[[[165,[-1,-2,-3]]],[],[30,14],[30,14],[]],[162],0,0,0,0,[-1,-2,[],[]],[[[161,[-1]]],-2,[],[]],[-1,-2,[],[]],[[[161,[-1]]],-2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[175,[-1]],[175,[-1]]],8,9],[[[176,[-1,-2]],[176,[-1,-2]]],8,9,9],[[[164,[-1,-2]],[164,[-1,-2]]],8,9,9],[[[165,[-1,-2,-3]],[165,[-1,-2,-3]]],8,9,9,9],[[177,177],8],[[178,178],8],[[179,179],8],[[162,162],8],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[-1,13,[]],[[[161,[-1]]],13,[]],0,[[-1,-2],-3,[],[],[]],[[-1,-2],-3,[],[],[]],[[[161,[-1]],[26,[-2]]],-2,[],6],[[[161,[-1]],[49,[-2]]],-2,[],6],[[156,-1],2,50],[[157,-1],2,50],[[[158,[-1]],[2,[13,13]]],13,[]],[[154,10],11],[[155,10],11],[[174,10],11],[[[175,[-1]],10],11,12],[[[176,[-1,-2]],10],11,12,12],[[[164,[-1,-2]],10],11,12,12],[[[165,[-1,-2,-3]],10],11,12,12,12],[[[158,[-1]],10],11,12],[[156,10],11],[[172,10],11],[[157,10],11],[[173,10],11],[[152,10],11],[[177,10],11],[[178,10],11],[[179,10],11],[[162,10],11],[[[161,[-1]],10],11,12],[[180,10],11],[[151,10],11],[[[161,[-1]],-2],2,[],27],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[175,[-1]]],[]],[181,-1,[]],[-1,-1,[]],[[[2,[-1,-2]]],[[176,[-1,-2]]],[],[]],[-1,-1,[]],[[[2,[-1,-2]]],[[164,[-1,-2]]],[],[]],[[[2,[-1,-2,-3]]],[[165,[-1,-2,-3]]],[],[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[13,13,[49,[[2,[13,13]]]]],155],[[13,[26,[[2,[13,13]]]]],174],[[13,[26,[[2,[13,13]]]]],[[161,[-1]]],170],[180,182],[156,171],[157,171],[[172,13],25],[[173,13],25],0,[180,8],[[[175,[-1]],-2],2,31,126],[[[176,[-1,-2]],-3],2,31,31,126],[[[164,[-1,-2]],-3],2,31,31,126],[[[165,[-1,-2,-3]],-4],2,31,31,31,126],[[177,-1],2,126],[[178,-1],2,126],[[179,-1],2,126],[[162,-1],2,126],0,[155,2],0,[[174,13]],[[180,13]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[155,2],0,[[[164,[-1,-2]],-3],[[164,[-1,-4]]],[],[],27,[]],[[[165,[-1,-2,-3]],-4],[[165,[-1,-2,-5]]],[],[],[],27,[]],[[172,13,13],25],[[172,13,13,25],25],[155,[[2,[[26,[13]],[26,[13]]]]]],[155,[[26,[[2,[13,13]]]]]],[[173,13,13],[[2,[25,23]]]],[[173,13,13,25],[[2,[25,23]]]],[[172,13],[[26,[8]]]],[155,[[26,[[2,[13,13]]]]]],[[174,13,-1],[[1,[[2,[[26,[13]]]]]]],32],[[174,-1],[[26,[8]]],32],[155,[[2,[[26,[13]],[26,[13]]]]]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[[158,[-1]],[2,[13,13]],[2,[137,137]]],[[1,[[2,[13,13]]]]],[]],[[[183,[-1,-2]],-3],1,184,184,46],[[[185,[-1,-2]],-3],1,184,184,46],[[[186,[-1,-2,-3]],-4],1,184,184,170,46],[[[187,[-1,-2]],-3],1,184,184,46],[[]],[[]],[[]],[[]],[[13,13,8],[[183,[-1,-2]]],184,184],[[13,-1],[[159,[-1]]],[]],[[-1,-2],[[160,[-3,-1,-2]]],[],[],[]],[[13,13],[[185,[-1,-2]]],184,184],[[-1,-2],[[188,[-1,-2,-3]]],189,[],[]],[-1,[[190,[-3,-1,-2,-4]]],[],6,[[191,[-2]]],[]],[192,193],[13,[[153,[-1,-2]]],[],[]],[[13,13],[[186,[-1,-2,-3]]],184,184,[]],[13,[[187,[-1,-2]]],184,184],[13,154],[[13,13],155],[13,174],[[13,13],[[158,[-1]]],[]],[[13,13],156],[[13,13],157],[[13,13],152],[[13,13],162],[182,180],[13,151],[[13,13],[[158,[0]]]],[[13,13],[[158,[0]]]],[[13,13],[[153,[-1,-2]]],[],[]],[[[188,[-3,-1,-2]]],1,[],[],[189,[194,[-1,-2]]]],[[[190,[-2,-3,-1,-4]]],1,6,[[191,[-1]]],32,[]],0,[[[175,[-1]],[175,[-1]]],[[1,[115]]],57],[[[176,[-1,-2]],[176,[-1,-2]]],[[1,[115]]],57,57],[[[164,[-1,-2]],[164,[-1,-2]]],[[1,[115]]],57,57],[[[165,[-1,-2,-3]],[165,[-1,-2,-3]]],[[1,[115]]],57,57,57],[[177,177],[[1,[115]]]],[[178,178],[[1,[115]]]],[[179,179],[[1,[115]]]],[[162,162],[[1,[115]]]],[[151,13],2],[[151,13],2],[180,13],[152,[[2,[23,[26,[13]]]]]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[182,-1,-2],195,32,32],[[192,-1,-2],195,32,32],[[171,-1,-2],195,32,32],[[[161,[178]],-1,-2],195,32,32],[[[161,[177]],-1,-2],195,32,32],[[[161,[179]],-1,-2],195,32,32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[161,[-1]]],[[26,[13]]],[]],[192,196],[[[161,[178]]],196],[[192,13],[[26,[25]]]],[[[161,[178]],13],[[26,[25]]]],[[192,13,[49,[-1]],-2],2,[],27],[[[161,[178]],13,[49,[-1]],-2],2,[],27],[[192,13,[49,[-1]],-2],2,[],27],[[[161,[178]],13,[49,[-1]],-2],2,[],27],[[[161,[-1]],13],[[2,[[26,[13]],[26,[13]]]]],[]],[[192,13],[[26,[25]]]],[[[161,[178]],13],[[26,[25]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[151,[[1,[[26,[8]]]]]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[[158,[-1]],13],[[2,[13,13]]],[]],[-1,[],[]],[[[159,[-1]]],[],[]],[[[160,[-1,-2,-3]]],[],[30,14],32,[]],[154,[[135,[13]]]],[174,[[135,[13]]]],[[[158,[-1]]],[],[]],[[[161,[-1]]],[[135,[13]]],[]],[[[161,[-1]]],[],[]],[174,13],[[[161,[-1]]],13,[]],[-1,[],[]],[[[175,[-1]]],[],[30,14]],[[[176,[-1,-2]]],[],[30,14],[]],[[[164,[-1,-2]]],[],[30,14],[]],[[[165,[-1,-2,-3]]],[],[30,14],[],[]],[162],[-1,-2,[],[]],[[[159,[-1]]],-2,[],[]],[[[160,[-1,-2,-3]]],-4,[30,14,31],[],[],6],[[[158,[-1]]],-2,[],[]],[[[161,[-1]]],-2,[],[]],[-1,-2,[],[]],[[[159,[-1]]],-2,[],[]],[[[160,[-1,-2,-3]]],-4,[30,14,31],[],[],6],[[[158,[-1]]],-2,[],[]],[[[161,[-1]]],-2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,13,[]],[[[161,[-1]]],13,[]],0,[[-1,-2],-3,[],[],[]],[[-1,-2],-3,[],[],[]],[[[159,[-1]],[26,[-2]]],-2,[],6],[[[159,[-1]],[49,[-2]]],-2,[],6],[[-1,-2],-3,[],[],[]],[[[160,[-1,-2,-3]],[2,[[89,[-1,-4]],-4]]],-4,[30,14,31],[],[],6],[[[158,[-1]],[26,[[26,[-2]]]]],-2,[],6],[[-1,-2],-3,[],[],[]],[[[161,[-1]],[26,[-2]]],-2,[],6],[[[161,[-1]],[49,[-2]]],-2,[],6],[[-1,-2],-3,[],[],[]],[[-2,-1],[],[],[166,167,167,[168,[-1]]]],[[-2,-1],[],[],[166,167,167,[168,[-1]]]],[[192,13,-1],26,32],[[[161,[178]],13,-1],26,32],0,[[[26,[13]]],152],0,0,0,0,0,0,0,0,[-1,8,[]],[[-1,13,8],[[1,[[2,[26]]]]],197],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,2,[]],[-1,2,[]],[[],198],0,[[198,10],11],[-1,-1,[]],[-1,[],[]],[-1,-2,[],[]],[[198,149,149],8],[198,8],0,0,0,[198,198],[[],198],0,0,[-1,2,[]],[-1,2,[]],[-1,[],[]],[[198,149],198],[[198,149],198],[[198,149],198],[[198,13],198],[-1,[[1,[[2,[8]]]]],[]],[-1,[[1,[[2,[8]]]]],[]],0,0,0,0,[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,2,[]],[-1,2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,[]],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,[]],[[[201,[-1]],[201,[-1]]],[],[14,4,17]],[[[202,[-1]],[202,[-1]]],[],[14,17]],[[[199,[-1,-2]],[199,[-1,-2]]],2,200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],2,200,[]],[[[199,[-1,-2]],-1],2,200,[]],[[[199,[-1,-2]],-1],2,200,[]],[[[202,[-1]],-1],-1,[6,4,17,19]],[[[49,[-1]]],[[26,[-1]]],[4,15,6,9,17,18,19,55]],[[-1,13,-1],-1,[6,203]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[199,[-1,-2]],[199,[-1,-2]],13],-1,200,204],[[25,25,[206,[205]],[49,[[2,[25,207]]]]],8],[[[208,[-1]]],[[208,[-1]]],[[209,[13]],6]],[[[210,[-1]]],[[210,[-1]]],[[209,[13]],6]],[[[211,[-1]]],[[211,[-1]]],[[209,[13]],6]],[[[199,[-1,-2]]],[[199,[-1,-2]]],6,[]],[[[201,[-1]]],[[201,[-1]]],6],[[[202,[-1]]],[[202,[-1]]],6],[212,212],[213,213],[214,214],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[208,[-1]],13,13],[[215,[-1]]],[[209,[13]]]],[[[210,[-1]],13,13],[[215,[-1]]],[[209,[13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[213,25],25],[[214,207],207],[[[199,[-1,-2]],13,-3],[[199,[-1,-2]]],200,204,27],[[[199,[-1,-2]],13,-3],[[199,[-1,-2]]],200,204,27],0,0,0,0,0,[[],[[210,[-1]]],[[209,[13]]]],[[],[[199,[-1,-2]]],118,118],[[],[[202,[-1]]],118],[[],213],[[[201,[-1]]],-1,[14,9,4,15,18,19,55]],[[[199,[-1,-2]]],[[199,[-1,-2]]],200,[]],[[25,25,25],[[1,[25]]]],[[25,25,25],[[1,[25]]]],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,204],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,204],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,204],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,204],[[[202,[-1]],[202,[-1]]],[],[14,4,18,19,55]],[[[199,[-1,-2]],[199,[-1,-2]]],2,200,204],[[[199,[-1,-2]],-1],2,200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],2,200,204],[[[199,[-1,-2]],-1],2,200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[[2,[[199,[-1,-2]],[199,[-1,-2]]]]],200,204],[25,[[26,[25]]]],[[213,25],[[26,[25]]]],[[214,207],[[26,[207]]]],[[[199,[-1,-2]],[199,[-1,-2]]],8,9,[]],[[[201,[-1]],[201,[-1]]],8,9],[[[202,[-1]],[202,[-1]]],8,9],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[13,13],[[[199,[-1,-2]],-1],-1,200,[]],[[[199,[-1,-2]]],[[199,[-1,-2]]],200,[]],[[[199,[-1,-2]],13],[[199,[-1,-2]]],200,204],[[23,23],[[2,[23,23,23]]]],[[23,23],[[2,[23,23,23]]]],[[23,23],[[2,[23,23,23]]]],[[[2,[13,13]]],[[201,[-1]]],[6,4,15]],0,[[[210,[-1]],13],[[2,[[215,[-1]],13]]],[[209,[13]]]],[[25,25,25,25],25],[[23,23,23,23,25],23],[[23,23,23,23,25,[135,[23]]],23],[[[208,[-1]],10],11,[[209,[13]],12]],[[[210,[-1]],10],11,[[209,[13]],12]],[[[211,[-1]],10],11,[[209,[13]],12]],[[[199,[-1,-2]],10],11,12,[]],[[[201,[-1]],10],11,12],[[[202,[-1]],10],11,12],[[212,10],11],[[213,10],11],[[214,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[199,[-1,-2]]],[],[]],[181,-1,[]],[[[26,[-1]]],[[199,[-1,-2]]],[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[199,[-2,-3]]],50,[],[]],[[[26,[-1]]],[[199,[-1,-2]]],[],[]],[[[26,[[26,[-1]]]]],[[201,[-1]]],[]],[[[26,[-1]]],[[202,[-1]]],[]],[[25,25],25],[[25,25],25],[[212,13],13],[205,[[26,[[2,[205,205]]]]]],[[[208,[-1]],13,13],[[215,[-1]]],[[209,[13]]]],[[[199,[-1,-2]],13],[],[],[]],[[[201,[-1]],13],[],[]],[[[201,[-1]],[2,[13,13]]],[],[]],[[[202,[-1]],13],[],[]],[[[199,[-1,-2]],13],[],[],[]],[[[201,[-1]],[2,[13,13]]],[],[]],[[[201,[-1]],13],[],[]],[[[202,[-1]],13],[],[]],[[[199,[-1,-2]]],[[199,[-1,-2]]],200,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[199,[-1,-2]]],[],[],[]],[[[199,[-1,-2]]],[],[],[]],[[[199,[-1,-2]]],[],[],[]],[[[208,[-1]],13],[[215,[-1]]],[[209,[13]]]],[[[211,[-1]]],[[215,[-1]]],[[209,[13]]]],[[[199,[-1,-2]],13],[[199,[-1,-2]]],200,204],0,[[[201,[-1]]],[[1,[[201,[-1]]]]],[14,9,4,15,18,19,55]],[13],[13],[13],[13],[13],[13],[13],[13],[13],[[213,25],8],[[214,207],8],[[[199,[-1,-2]]],[[163,[-1]]],[],[]],[[[199,[-1,-2]]],[[216,[-1]]],[],[]],[[[26,[-1]],13],-1,200],[[[199,[-1,-2]],[26,[-1]],13],-1,200,204],[[[49,[[215,[-1]]]],[49,[[215,[-1]]]],[215,[-1]]],[[215,[-1]]],34],[[[208,[-1]],13,-2,[215,[-1]]],[[215,[-1]]],[[209,[13]]],32],[[[49,[[215,[-1]]]],[49,[[215,[-1]]]]],[[26,[[215,[-1]]]]],34],[[25,25],25],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[[199,[-1,-2]]],13,[],[]],[[[202,[-1]]],13,[]],[-1,[[1,[[2,[25,25]]]]],50],[[-1,13,-2],[[199,[-3,-4]]],50,27,200,204],[[[199,[-1,-2]],13],[[199,[-1,-2]]],200,204],[25,8],[[25,[206,[205]]],8],[49,2],[49,2],[49,2],[49,2],[[25,25],25],[[25,25],25],[[25,25],25],[13,[[89,[13,23]]]],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,204],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,204],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],[],204],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,204],[[[201,[-1]],[201,[-1]]],[],[14,4,17,19]],[[[202,[-1]],[202,[-1]]],[],[14,4,17,19]],[[[199,[-1,-2]],-1],2,200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],2,200,204],[[[199,[-1,-2]],-1],2,200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],2,200,204],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[[199,[-1,-2]],[49,[-1]]],[[26,[-1]]],200,204],[[[199,[-1,-2]]],[],200,[]],[[[199,[-1,-2]]],[],200,[]],[13,[[208,[-1]]],[[209,[13]]]],[[],[[210,[-1]]],[[209,[13]]]],[[[215,[-1]]],[[211,[-1]]],[[209,[13]]]],[[[2,[13,13]],-1],[[201,[-1]]],6],[13,212],[25,213],[207,214],[[[199,[-1,-2]]],[[199,[-1,-2]]],200,[]],[[],[[199,[-1,-2]]],[9,15],[]],[[],[[202,[-1]]],[4,15]],[[[208,[-1]],13,13],[[215,[-1]]],[[209,[13]]]],[[[211,[-1]],13],[[215,[-1]]],[[209,[13]]]],[[[199,[-1,-2]],13,13],[[199,[-1,-2]]],200,204],[[[201,[-1]],13],[[201,[-1]]],[14,4,15,17,19]],[[[202,[-1]],13],[[202,[-1]]],[14,4,15,17,19]],[[[211,[-1]],137],[[215,[-1]]],[[209,[13]]]],[[[199,[-1,-2]],13],[[199,[-1,-2]]],200,[]],[[[199,[-1,-2]],13],[[199,[-1,-2]]],200,[]],[25,[[26,[[2,[25,207]]]]]],[[213,25],[[26,[[2,[25,207]]]]]],[[214,207],[[26,[[2,[207,207]]]]]],[25,[[26,[25]]]],[213,[[49,[25]]]],[214,[[0,[46]]]],[[213,25],[[49,[25]]]],[25,25],[[-1,13],[[199,[-2,-3]]],50,200,204],[[[201,[-1]]],13,[14,9,4,15,18,19,55]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,204],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,204],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,204],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,204],[[[202,[-1]],[202,[-1]]],[],[14,4,18,19,55]],[[[199,[-1,-2]],[199,[-1,-2]]],2,200,204],[[[199,[-1,-2]],[199,[-1,-2]]],2,200,204],[[213,25],2],[[[199,[-1,-2]],13],2,4,[]],[[[199,[-1,-2]],13],[[199,[-1,-2]]],4,[]],[[[199,[-1,-2]]],[[199,[-1,-2]]],4,[]],[[[201,[-1]],8],2,[14,9,4,15,18,19,55]],0,[[[199,[-1,-2]],13],[],200,[]],[[[199,[-1,-2]],13],[],200,[]],[[[199,[-1,-2]],13],2,200,[]],[[[199,[-1,-2]],13],[],200,[]],[[[199,[-1,-2]],13],[],200,[]],[[[199,[-1,-2]],13],2,200,[]],[[[201,[-1]],[49,[-1]]],[[1,[[26,[-1]]]]],[14,9,4,15,18,19,55]],[[[199,[-1,-2]],13],[[1,[[199,[-1,-2]]]]],217,204],[-1,[[1,[-1]]],[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,[]],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,[]],[[[199,[-1,-2]],-1],[],200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],[],200,[]],[[[199,[-1,-2]],-1],[],200,[]],[[[201,[-1]],[201,[-1]]],[],[14,4,18]],[[[202,[-1]],[202,[-1]]],[],[14,18]],[[[199,[-1,-2]],-1],2,200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],2,200,[]],[[[199,[-1,-2]],-1],2,200,[]],[[[199,[-1,-2]],[199,[-1,-2]]],2,200,[]],[[-1,13],[[2,[[199,[-2,-3]],[199,[-2,-3]]]]],50,200,204],[[[199,[[215,[-1]],-2]],[215,[-1]],[208,[-1]]],[[199,[[215,[-1]],-2]]],[[209,[13]]],204],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[13],[13],[13],[13],[13],[13],[13],[13],[13],0,[[214,207,-1],2,27],[[[199,[-1,-2]]],2,[4,9],[]],[[[199,[-1,-2]],13],2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[25,-1],2,132],[[],[[199,[-1,-2]]],9,[]],[[],[[202,[-1]]],[]],[13,[[199,[-1,-2]]],4,[]],[[[2,[13,13]]],[[201,[-1]]],[6,4]],[49,2],[49,2],[49,2],[49,2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-1,[]],[-1,-1,[]],[[[141,[-1]]],-1,150],[218,218],[219,219],[220,220],[[[222,[221]]],[[222,[221]]]],[[[222,[223]]],[[222,[223]]]],[[[222,[224]]],[[222,[224]]]],[[[222,[225]]],[[222,[225]]]],[[[222,[23]]],[[222,[23]]]],[[[222,[137]]],[[222,[137]]]],[[[226,[224]]],[[226,[224]]]],[[[226,[223]]],[[226,[223]]]],[[[226,[221]]],[[226,[221]]]],[[[226,[225]]],[[226,[225]]]],[[[226,[23]]],[[226,[23]]]],[[[226,[137]]],[[226,[137]]]],[227,227],[[[228,[-1]]],[[228,[-1]]],229],[[-1,-1],-1,[]],[[-1,-1],[],[]],[[[222,[221]],[222,[221]]]],[[[222,[224]],[222,[224]]]],[[[222,[205]],[222,[205]]],[[222,[205]]]],[[[222,[137]],[222,[137]]]],[[[222,[23]],[222,[23]]]],[[[222,[225]],[222,[225]]]],[[[222,[230]],[222,[230]]],[[222,[230]]]],[[[222,[13]],[222,[13]]],[[222,[13]]]],[[[222,[207]],[222,[207]]],[[222,[207]]]],[[[222,[231]],[222,[231]]],[[222,[231]]]],[[[222,[25]],[222,[25]]],[[222,[25]]]],[[[222,[223]],[222,[223]]]],[[[226,[23]],[226,[23]]]],[[[226,[231]],[226,[231]]],[[226,[231]]]],[[[226,[223]],[226,[223]]]],[[[226,[13]],[226,[13]]],[[226,[13]]]],[[[226,[224]],[226,[224]]]],[[[226,[205]],[226,[205]]],[[226,[205]]]],[[[226,[25]],[226,[25]]],[[226,[25]]]],[[[226,[207]],[226,[207]]],[[226,[207]]]],[[[226,[137]],[226,[137]]]],[[[226,[230]],[226,[230]]],[[226,[230]]]],[[[226,[221]],[226,[221]]]],[[[226,[225]],[226,[225]]]],[-1,-1,[]],[219,219],[220,220],[-1,-1,[]],[219,219],[220,220],[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[141,[-1]],[141,[-1]]],[],[6,17]],[[[141,[-1]],[141,[-1]]],[],[6,17]],[[[141,[-1]],-1],[],17],[[[141,[-1]],[141,[-1]]],[],[6,17]],[[[141,[-1]],-1],[],[6,17]],[[[141,[-1]],[141,[-1]]],[],17],[[[141,[-1]],-1],[],[6,17]],[[[141,[-1]],-1],[],[6,17]],[[218,149]],[[218,218]],[[[232,[-1]],[232,[-1]]],[],[6,17]],[[[232,[-1]],-1],[],17],[[[232,[-1]],[232,[-1]]],[],17],[[[232,[-1]],-1],[],[6,17]],[[[232,[-1]],-1],[],[6,17]],[[[232,[-1]],-1],[],[6,17]],[[[232,[-1]],[232,[-1]]],[],[6,17]],[[[232,[-1]],[232,[-1]]],[],[6,17]],[[219,219]],[[220,220]],[[[222,[207]],[222,[207]]]],[[[222,[205]],[222,[205]]]],[[[222,[23]],[222,[23]]]],[[[222,[224]],[222,[224]]]],[[[222,[137]],[222,[137]]]],[[[222,[231]],[222,[231]]]],[[[222,[225]],[222,[225]]]],[[[222,[13]],[222,[13]]]],[[[222,[221]],[222,[221]]]],[[[222,[223]],[222,[223]]]],[[[222,[25]],[222,[25]]]],[[[222,[230]],[222,[230]]]],[[[226,[230]],[226,[230]]]],[[[226,[221]],[226,[221]]]],[[[226,[23]],[226,[23]]]],[[[226,[224]],[226,[224]]]],[[[226,[137]],[226,[137]]]],[[[226,[13]],[226,[13]]]],[[[226,[225]],[226,[225]]]],[[[226,[223]],[226,[223]]]],[[[226,[25]],[226,[25]]]],[[[226,[231]],[226,[231]]]],[[[226,[205]],[226,[205]]]],[[[226,[207]],[226,[207]]]],[[227,227]],[[227,149]],[[[228,[-1]],[228,[-1]]],[],229],[[[215,[-1]],[215,[-1]]],2,34],[[[215,[-1]],[215,[-1]]],2,34],[[[141,[-1]],[141,[-1]]],2,[6,17]],[[[141,[-1]],-1],2,[6,17]],[[[141,[-1]],[141,[-1]]],2,[6,17]],[[[141,[-1]],-1],2,[6,17]],[[[232,[-1]],-1],2,[6,17]],[[[232,[-1]],[232,[-1]]],2,[6,17]],[[[232,[-1]],-1],2,[6,17]],[[[232,[-1]],[232,[-1]]],2,[6,17]],[[[222,[225]],[222,[225]]],2],[[[222,[230]],[222,[230]]],2],[[[222,[137]],[222,[137]]],2],[[[222,[221]],[222,[221]]],2],[[[222,[223]],[222,[223]]],2],[[[222,[231]],[222,[231]]],2],[[[222,[207]],[222,[207]]],2],[[[222,[23]],[222,[23]]],2],[[[222,[13]],[222,[13]]],2],[[[222,[224]],[222,[224]]],2],[[[222,[205]],[222,[205]]],2],[[[222,[25]],[222,[25]]],2],[[[226,[230]],[226,[230]]],2],[[[226,[25]],[226,[25]]],2],[[[226,[231]],[226,[231]]],2],[[[226,[221]],[226,[221]]],2],[[[226,[207]],[226,[207]]],2],[[[226,[224]],[226,[224]]],2],[[[226,[205]],[226,[205]]],2],[[[226,[13]],[226,[13]]],2],[[[226,[223]],[226,[223]]],2],[[[226,[23]],[226,[23]]],2],[[[226,[137]],[226,[137]]],2],[[[226,[225]],[226,[225]]],2],[[[228,[-1]],[228,[-1]]],2,229],[[[141,[-1]]],-1,150],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,-1,[]],[219,219],[220,220],[-1,-1,[]],[219,219],[220,220],[-1,-1,[]],[219,219],[220,220],[[-1,-1],-1,[]],[[219,219],219],[[220,220],220],[-1,-1,[]],[219,219],[220,220],[[-1,-2],-1,[],[]],[[-1,-2],-1,[],[]],[[-1,-2],[[1,[-1]]],[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[[[222,[-1]],[222,[-1]]],[],233],[[[226,[-1]],[226,[-1]]],[],233],[[[222,[-1]],[222,[-1]]],2,234],[[[226,[-1]],[226,[-1]]],2,234],[[[222,[-1]],[222,[-1]]],[],235],[[[226,[-1]],[226,[-1]]],[],235],[[[222,[-1]],[222,[-1]]],2,236],[[[226,[-1]],[226,[-1]]],2,236],[[[222,[-1]],[222,[-1]]],[],237],[[[226,[-1]],[226,[-1]]],[],237],[[[222,[-1]],[222,[-1]]],2,238],[[[226,[-1]],[226,[-1]]],2,238],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[219,219],[220,220],[-1,-1,[]],[219,219],[220,220],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-1,-1],-1,[]],[[219,219,219],219],[[220,220,220],220],[-1,239,[]],[219,239],[220,239],[[[215,[-1]]],[[215,[-1]]],34],[[[206,[-1]]],[[206,[-1]]],6],[[[141,[-1]]],[[141,[-1]]],6],[218,218],[[[232,[-1]]],[[232,[-1]]],6],[219,219],[220,220],[[[222,[-1]]],[[222,[-1]]],6],[[[226,[-1]]],[[226,[-1]]],6],[227,227],[[[228,[-1]]],[[228,[-1]]],[229,6]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[141,[-1]],[141,[-1]]],115,16],[[218,218],115],[[[232,[-1]],[232,[-1]]],115,16],[[219,219],115],[[220,220],115],[[[222,[-1]],[222,[-1]]],115,16],[[[226,[-1]],[226,[-1]]],115,16],[[227,227],115],[[[228,[-1]],[228,[-1]]],115,229],[[[141,[-1]],[141,[-1]]],115,[4,16,19]],[[[141,[-1]]],[[141,[-1]]],240],[[[232,[-1]]],[[232,[-1]]],240],[[-1,-1],-1,[]],[[219,219],219],[[220,220],220],[-1,-1,[]],[219,219],[220,220],[-1,-1,[]],[219,219],[220,220],[-1,-2,[],[]],[[[222,[25]]],207],[[[222,[230]]],207],[[[222,[207]]],207],[[[222,[205]]],207],[[[222,[223]]],207],[[[222,[231]]],207],[[[222,[221]]],207],[[[222,[225]]],207],[[[222,[23]]],207],[[[222,[224]]],207],[[[222,[13]]],207],[[[222,[137]]],207],[[[226,[230]]],207],[[[226,[223]]],207],[[[226,[221]]],207],[[[226,[205]]],207],[[[226,[224]]],207],[[[226,[225]]],207],[[[226,[13]]],207],[[[226,[25]]],207],[[[226,[137]]],207],[[[226,[207]]],207],[[[226,[23]]],207],[[[226,[231]]],207],[-1,-2,[],[]],[[[222,[224]]],207],[[[222,[25]]],207],[[[222,[207]]],207],[[[222,[231]]],207],[[[222,[230]]],207],[[[222,[223]]],207],[[[222,[205]]],207],[[[222,[13]]],207],[[[222,[23]]],207],[[[222,[221]]],207],[[[222,[137]]],207],[[[222,[225]]],207],[[[226,[231]]],207],[[[226,[205]]],207],[[[226,[13]]],207],[[[226,[137]]],207],[[[226,[207]]],207],[[[226,[25]]],207],[[[226,[223]]],207],[[[226,[23]]],207],[[[226,[224]]],207],[[[226,[225]]],207],[[[226,[230]]],207],[[[226,[221]]],207],[[[141,[-1]],[141,[-1]]],[],19],[[],[[215,[-1]]],34],[[],[[141,[-1]]],118],[[],218],[[],[[232,[-1]]],118],[[],219],[[],220],[[],[[222,[-1]]],118],[[],[[226,[-1]]],118],[[],227],[[],-1,[]],0,[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[206,[207]],207],207],[[[206,[25]],25],25],[[[206,[205]],205],205],[[[141,[-1]],-1],[],[6,55]],[[[141,[-1]],[141,[-1]]],[],[6,17,18,19,55]],[[[141,[-1]],-1],[],[6,55]],[[[141,[-1]],-1],[],[6,55]],[[[141,[-1]],[141,[-1]]],[],[6,17,18,19,55]],[[[141,[-1]],[141,[-1]]],[],[6,17,18,19,55]],[[[141,[-1]],-1],[],[6,55]],[[[141,[-1]],[141,[-1]]],[],[6,17,18,19,55]],[[218,218]],[[[232,[-1]],[232,[-1]]],[],[6,17,18,19,55,15]],[[[232,[-1]],[232,[-1]]],[],[6,15,17,18,19,55]],[[[232,[-1]],[232,[-1]]],[],[6,17,18,19,55,15]],[[[232,[-1]],-1],[],[6,15,55]],[[[232,[-1]],-1],[],[6,55,15]],[[[232,[-1]],[232,[-1]]],[],[6,17,18,19,55,15]],[[[232,[-1]],-1],[],[6,55,15]],[[[232,[-1]],-1],[],[6,55,15]],[[219,219]],[[220,220]],[[[222,[-1]],[222,[-1]]],[],55],[[[226,[221]],[226,[221]]]],[[[226,[23]],[226,[23]]]],[[[226,[230]],[226,[230]]]],[[[226,[13]],[226,[13]]]],[[[226,[223]],[226,[223]]]],[[[226,[225]],[226,[225]]]],[[[226,[25]],[226,[25]]]],[[[226,[205]],[226,[205]]]],[[[226,[231]],[226,[231]]]],[[[226,[207]],[226,[207]]]],[[[226,[137]],[226,[137]]]],[[[226,[224]],[226,[224]]]],[[227,227]],[[[228,[-1]],[228,[-1]]],[],229],[[[215,[-1]],[215,[-1]]],2,34],[[[215,[-1]],[215,[-1]]],2,34],[[[141,[-1]],[141,[-1]]],2,[6,17,18,19,55]],[[[141,[-1]],[141,[-1]]],2,[6,17,18,19,55]],[[[141,[-1]],-1],2,[6,55]],[[[141,[-1]],-1],2,[6,55]],[[[232,[-1]],-1],2,[6,55,15]],[[[232,[-1]],-1],2,[6,55,15]],[[[232,[-1]],[232,[-1]]],2,[6,17,18,19,55,15]],[[[232,[-1]],[232,[-1]]],2,[6,17,18,19,55,15]],[[[222,[-1]],[222,[-1]]],2,241],[[[226,[23]],[226,[23]]],2],[[[226,[225]],[226,[225]]],2],[[[226,[230]],[226,[230]]],2],[[[226,[223]],[226,[223]]],2],[[[226,[224]],[226,[224]]],2],[[[226,[205]],[226,[205]]],2],[[[226,[25]],[226,[25]]],2],[[[226,[207]],[226,[207]]],2],[[[226,[13]],[226,[13]]],2],[[[226,[137]],[226,[137]]],2],[[[226,[231]],[226,[231]]],2],[[[226,[221]],[226,[221]]],2],[[[228,[-1]],[228,[-1]]],2,229],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[219,219],219],[[220,220],220],[[[222,[13]],[222,[13]]],[[222,[13]]]],[[[222,[230]],[222,[230]]],[[222,[230]]]],[[[222,[223]],[222,[223]]],[[222,[223]]]],[[[222,[225]],[222,[225]]],[[222,[225]]]],[[[222,[23]],[222,[23]]],[[222,[23]]]],[[[222,[205]],[222,[205]]],[[222,[205]]]],[[[222,[231]],[222,[231]]],[[222,[231]]]],[[[222,[25]],[222,[25]]],[[222,[25]]]],[[[222,[137]],[222,[137]]],[[222,[137]]]],[[[222,[224]],[222,[224]]],[[222,[224]]]],[[[222,[207]],[222,[207]]],[[222,[207]]]],[[[222,[221]],[222,[221]]],[[222,[221]]]],[[[226,[224]],[226,[224]]],[[226,[224]]]],[[[226,[230]],[226,[230]]],[[226,[230]]]],[[[226,[223]],[226,[223]]],[[226,[223]]]],[[[226,[221]],[226,[221]]],[[226,[221]]]],[[[226,[25]],[226,[25]]],[[226,[25]]]],[[[226,[23]],[226,[23]]],[[226,[23]]]],[[[226,[205]],[226,[205]]],[[226,[205]]]],[[[226,[13]],[226,[13]]],[[226,[13]]]],[[[226,[225]],[226,[225]]],[[226,[225]]]],[[[226,[137]],[226,[137]]],[[226,[137]]]],[[[226,[231]],[226,[231]]],[[226,[231]]]],[[[226,[207]],[226,[207]]],[[226,[207]]]],[[[206,[207]],207],[[2,[207,207]]]],[[[206,[25]],25],[[2,[25,25]]]],[[[206,[205]],205],[[2,[205,205]]]],[[[141,[-1]],[141,[-1]]],[],19],[-1,-2,[],[]],[[-1,-2],[[1,[-2]]],[],16],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[[-1,-2],[[1,[-2]]],[],16],[-1,[[1,[-2]]],[],[]],[[],[[232,[-1]]],[4,15]],[[[215,[-1]],[215,[-1]]],8,34],[[[141,[-1]],[141,[-1]]],8,9],[[218,218],8],[[[232,[-1]],[232,[-1]]],8,9],[[219,219],8],[[220,220],8],[[[222,[-1]],[222,[-1]]],8,9],[[[226,[-1]],[226,[-1]]],8,9],[[227,227],8],[[[228,[-1]],[228,[-1]]],8,229],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[[232,[-1]],-1],-1,[17,19]],[-1,-1,[]],[219,219],[220,220],[-1,-1,[]],[219,219],[220,220],[-1,-1,[]],[219,219],[220,220],[[-1,-1],[[242,[-1]]],[]],[[-1,-1],[[242,[-1]]],[]],[-1,-1,[]],[219,219],[220,220],[[[215,[-1]],10],[[20,[2,243]]],34],[[[215,[-1]],10],11,34],[[[206,[-1]],10],11,12],[[[141,[-1]],10],11,12],[[218,10],11],[[218,10],11],[[[232,[-1]],10],11,12],[[219,10],11],[[219,10],11],[[220,10],11],[[220,10],11],[[[222,[-1]],10],11,12],[[[222,[-1]],10],11,244],[[[226,[-1]],10],11,12],[[[226,[-1]],10],11,244],[[227,10],11],[[227,10],11],[[[228,[-1]],10],11,[229,12]],[[-1,-2],-1,[],[]],[[-1,-2],-1,[],[]],[[-1,-2],[[1,[-1]]],[],[]],[-1,-1,[]],[-1,-1,[]],[-1,[[1,[-1]]],[]],[-1,[[1,[-1]]],[]],[-1,-1,[]],[219,219],[220,220],[-1,[],[]],[-1,-1,[]],[224,[[215,[-1]]],[[209,[224]]]],[-1,-1,[]],[225,[[215,[-1]]],[[209,[225]]]],[137,[[215,[-1]]],[[209,[137]]]],[23,[[215,[-1]]],[[209,[23]]]],[221,[[215,[-1]]],[[209,[221]]]],[207,[[215,[-1]]],[[209,[207]]]],[223,[[215,[-1]]],[[209,[223]]]],[205,[[215,[-1]]],[[209,[205]]]],[25,[[215,[-1]]],[[209,[25]]]],[230,[[215,[-1]]],[[209,[230]]]],[13,[[215,[-1]]],[[209,[13]]]],[231,[[215,[-1]]],[[209,[231]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[149,218],[-1,-1,[]],[-1,-1,[]],[245,219],[149,220],[-1,-1,[]],[23,[[222,[23]]]],[225,[[222,[225]]]],[13,[[222,[13]]]],[207,[[222,[207]]]],[224,[[222,[224]]]],[-1,-1,[]],[137,[[222,[137]]]],[205,[[222,[205]]]],[231,[[222,[231]]]],[223,[[222,[223]]]],[221,[[222,[221]]]],[25,[[222,[25]]]],[230,[[222,[230]]]],[25,[[226,[25]]]],[231,[[226,[231]]]],[137,[[226,[137]]]],[205,[[226,[205]]]],[225,[[226,[225]]]],[207,[[226,[207]]]],[13,[[226,[13]]]],[223,[[226,[223]]]],[230,[[226,[230]]]],[23,[[226,[23]]]],[-1,-1,[]],[224,[[226,[224]]]],[221,[[226,[221]]]],[-1,-1,[]],[149,227],[-1,-1,[]],[25,-1,[]],[25,219],[25,220],[246,[[20,[[215,[-1]]]]],209],[246,[[20,[218]]]],[246,[[20,[219]]]],[246,[[20,[220]]]],[246,[[20,[[222,[-1]]]]],247],[246,[[20,[[226,[-1]]]]],247],[246,[[20,[227]]]],[[246,207],[[20,[-1]]],[]],[[246,207],[[20,[[222,[223]]]]]],[[246,207],[[20,[[222,[205]]]]]],[[246,207],[[20,[[222,[207]]]]]],[[246,207],[[20,[[222,[23]]]]]],[[246,207],[[20,[[222,[225]]]]]],[[246,207],[[20,[[222,[224]]]]]],[[246,207],[[20,[[222,[231]]]]]],[[246,207],[[20,[[222,[13]]]]]],[[246,207],[[20,[[222,[221]]]]]],[[246,207],[[20,[[222,[137]]]]]],[[246,207],[[20,[[222,[25]]]]]],[[246,207],[[20,[[222,[230]]]]]],[[246,207],[[20,[[226,[231]]]]]],[[246,207],[[20,[[226,[207]]]]]],[[246,207],[[20,[[226,[137]]]]]],[[246,207],[[20,[[226,[23]]]]]],[[246,207],[[20,[[226,[221]]]]]],[[246,207],[[20,[[226,[25]]]]]],[[246,207],[[20,[[226,[205]]]]]],[[246,207],[[20,[[226,[224]]]]]],[[246,207],[[20,[[226,[230]]]]]],[[246,207],[[20,[[226,[13]]]]]],[[246,207],[[20,[[226,[223]]]]]],[[246,207],[[20,[[226,[225]]]]]],0,[[-1,-1],-1,[]],[[[222,[13]],[222,[13]]],[[222,[13]]]],[[[222,[207]],[222,[207]]],[[222,[207]]]],[[[222,[205]],[222,[205]]],[[222,[205]]]],[[[222,[231]],[222,[231]]],[[222,[231]]]],[[[222,[25]],[222,[25]]],[[222,[25]]]],[[[222,[230]],[222,[230]]],[[222,[230]]]],[[[226,[231]],[226,[231]]],[[226,[231]]]],[[[226,[205]],[226,[205]]],[[226,[205]]]],[[[226,[207]],[226,[207]]],[[226,[207]]]],[[[226,[25]],[226,[25]]],[[226,[25]]]],[[[226,[230]],[226,[230]]],[[226,[230]]]],[[[226,[13]],[226,[13]]],[[226,[13]]]],[[]],[[]],[[[206,[25]]],25],[[[206,[205]]],205],[[[206,[207]]],207],[[[215,[-1]],-2],2,34,126],[[[141,[-1]],-2],2,31,126],[[[232,[-1]],-2],2,31,126],[[[222,[-1]],-2],2,31,126],[[[226,[-1]],-2],2,31,126],[[-1,-1],-1,[]],[[219,219],219],[[220,220],220],[[],[[141,[-1]]],[4,15]],[[-1,-1],207,[]],[[[222,[207]],[222,[207]]],207],[[[222,[231]],[222,[231]]],207],[[[222,[224]],[222,[224]]],207],[[[222,[223]],[222,[223]]],207],[[[222,[230]],[222,[230]]],207],[[[222,[221]],[222,[221]]],207],[[[222,[25]],[222,[25]]],207],[[[222,[205]],[222,[205]]],207],[[[222,[137]],[222,[137]]],207],[[[222,[23]],[222,[23]]],207],[[[222,[225]],[222,[225]]],207],[[[222,[13]],[222,[13]]],207],[[[226,[23]],[226,[23]]],207],[[[226,[221]],[226,[221]]],207],[[[226,[205]],[226,[205]]],207],[[[226,[223]],[226,[223]]],207],[[[226,[13]],[226,[13]]],207],[[[226,[207]],[226,[207]]],207],[[[226,[225]],[226,[225]]],207],[[[226,[231]],[226,[231]]],207],[[[226,[25]],[226,[25]]],207],[[[226,[137]],[226,[137]]],207],[[[226,[224]],[226,[224]]],207],[[[226,[230]],[226,[230]]],207],[-1,207,[]],[[[222,[25]]],207],[[[222,[225]]],207],[[[222,[23]]],207],[[[222,[137]]],207],[[[222,[221]]],207],[[[222,[224]]],207],[[[222,[205]]],207],[[[222,[13]]],207],[[[222,[207]]],207],[[[222,[223]]],207],[[[222,[230]]],207],[[[222,[231]]],207],[[[226,[221]]],207],[[[226,[223]]],207],[[[226,[224]]],207],[[[226,[23]]],207],[[[226,[137]]],207],[[[226,[230]]],207],[[[226,[205]]],207],[[[226,[13]]],207],[[[226,[207]]],207],[[[226,[231]]],207],[[[226,[25]]],207],[[[226,[225]]],207],[-1,207,[]],[[[222,[137]]],207],[[[222,[221]]],207],[[[222,[25]]],207],[[[222,[231]]],207],[[[222,[224]]],207],[[[222,[207]]],207],[[[222,[225]]],207],[[[222,[13]]],207],[[[222,[223]]],207],[[[222,[205]]],207],[[[222,[230]]],207],[[[222,[23]]],207],[[[226,[23]]],207],[[[226,[137]]],207],[[[226,[223]]],207],[[[226,[225]]],207],[[[226,[205]]],207],[[[226,[221]]],207],[[[226,[231]]],207],[[[226,[207]]],207],[[[226,[13]]],207],[[[226,[224]]],207],[[[226,[230]]],207],[[[226,[25]]],207],0,[[227,13]],[[[215,[-1]]],[],34],[[[228,[-1]]],-1,229],[[],-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[215,[-1]]],[[215,[-1]]],34],[-1,8,[]],[219,8],[220,8],[-1,8,[]],[219,8],[220,8],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[219,8],[220,8],[-1,8,[]],[[[222,[224]]],8],[[[222,[221]]],8],[[[222,[223]]],8],[[[222,[225]]],8],[[[222,[23]]],8],[[[222,[137]]],8],[[[226,[223]]],8],[[[226,[224]]],8],[[[226,[221]]],8],[[[226,[225]]],8],[[[226,[137]]],8],[[[226,[23]]],8],[-1,8,[]],[219,8],[220,8],[-1,8,9],[-1,8,9],[218,8],[227,8],[-1,8,[]],[[[222,[224]]],8],[[[222,[223]]],8],[[[222,[221]]],8],[[[222,[23]]],8],[[[222,[225]]],8],[[[222,[137]]],8],[[[226,[221]]],8],[[[226,[137]]],8],[[[226,[224]]],8],[[[226,[225]]],8],[[[226,[223]]],8],[[[226,[23]]],8],[-1,8,[]],[219,8],[220,8],[-1,8,[]],[219,8],[220,8],[-1,8,9],[-1,8,9],[218,8],[227,8],[227,8],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[-1,-2,[],[]],[[[222,[230]]],207],[[[222,[221]]],207],[[[222,[224]]],207],[[[222,[13]]],207],[[[222,[225]]],207],[[[222,[205]]],207],[[[222,[137]]],207],[[[222,[207]]],207],[[[222,[23]]],207],[[[222,[25]]],207],[[[222,[231]]],207],[[[222,[223]]],207],[[[226,[23]]],207],[[[226,[224]]],207],[[[226,[223]]],207],[[[226,[13]]],207],[[[226,[25]]],207],[[[226,[225]]],207],[[[226,[137]]],207],[[[226,[230]]],207],[[[226,[221]]],207],[[[226,[231]]],207],[[[226,[205]]],207],[[[226,[207]]],207],[-1,-2,[],[]],[[[222,[231]]],207],[[[222,[25]]],207],[[[222,[137]]],207],[[[222,[224]]],207],[[[222,[223]]],207],[[[222,[230]]],207],[[[222,[221]]],207],[[[222,[205]]],207],[[[222,[207]]],207],[[[222,[225]]],207],[[[222,[13]]],207],[[[222,[23]]],207],[[[226,[230]]],207],[[[226,[137]]],207],[[[226,[205]]],207],[[[226,[207]]],207],[[[226,[25]]],207],[[[226,[13]]],207],[[[226,[224]]],207],[[[226,[225]]],207],[[[226,[23]]],207],[[[226,[223]]],207],[[[226,[221]]],207],[[[226,[231]]],207],[-1,-1,[]],[219,219],[220,220],[-1,-1,[]],[219,219],[220,220],[[-1,-1],-1,[]],[[219,219],219],[[220,220],220],[-1,-1,[]],[219,219],[220,220],[-1,-1,[]],[219,219],[220,220],[[-1,-1],-1,[]],[[219,219],219],[[220,220],220],[[],-1,[]],[[],218],[[],219],[[],220],[[],[[222,[-1]]],5],[[],[[226,[-1]]],5],[[],227],[[],[[228,[-1]]],229],[[-1,-1],-1,[]],[[219,219],219],[[220,220],220],[[],-1,[]],[[],218],[[],219],[[],220],[[],[[222,[-1]]],5],[[],[[226,[-1]]],5],[[],227],[[],[[228,[-1]]],229],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],0,[[]],[[]],[[]],[[]],[[],-1,[]],[[]],[[]],[[]],[[]],[13],[13],[[]],[[]],[[-1,-1],-1,[]],[[-1,-1],-1,[]],0,[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[141,[-1]],-1],[],[6,19]],[[[141,[-1]],[141,[-1]]],[],[6,17,18,19]],[[[141,[-1]],[141,[-1]]],[],[6,19]],[[[141,[-1]],-1],[],[6,19]],[[[141,[-1]],-1],[],[6,19]],[[[141,[-1]],-1],[],[6,19]],[[[141,[-1]],[141,[-1]]],[],[6,17,18,19]],[[[141,[-1]],[141,[-1]]],[],[6,17,18,19]],[[218,218]],[[218,149]],[[[232,[-1]],[232,[-1]]],[],[6,17,18,19]],[[[232,[-1]],-1],[],[6,19]],[[[232,[-1]],-1],[],[6,19]],[[[232,[-1]],[232,[-1]]],[],[6,17,18,19]],[[[232,[-1]],-1],[],[6,19]],[[[232,[-1]],-1],[],[6,19]],[[[232,[-1]],[232,[-1]]],[],[6,17,18,19]],[[[232,[-1]],[232,[-1]]],[],[6,17,18,19]],[[219,219]],[[220,220]],[[[222,[221]],[222,[221]]]],[[[222,[231]],[222,[231]]]],[[[222,[205]],[222,[205]]]],[[[222,[23]],[222,[23]]]],[[[222,[137]],[222,[137]]]],[[[222,[223]],[222,[223]]]],[[[222,[13]],[222,[13]]]],[[[222,[224]],[222,[224]]]],[[[222,[225]],[222,[225]]]],[[[222,[25]],[222,[25]]]],[[[222,[230]],[222,[230]]]],[[[222,[207]],[222,[207]]]],[[[226,[230]],[226,[230]]]],[[[226,[137]],[226,[137]]]],[[[226,[231]],[226,[231]]]],[[[226,[13]],[226,[13]]]],[[[226,[25]],[226,[25]]]],[[[226,[207]],[226,[207]]]],[[[226,[221]],[226,[221]]]],[[[226,[23]],[226,[23]]]],[[[226,[224]],[226,[224]]]],[[[226,[225]],[226,[225]]]],[[[226,[223]],[226,[223]]]],[[[226,[205]],[226,[205]]]],[[227,227]],[[227,149]],[[[228,[-1]],[228,[-1]]],[],229],[[-1,-1,-1],-1,[]],[[219,219,219],219],[[220,220,220],220],[[[215,[-1]],[215,[-1]]],2,34],[[[215,[-1]],[215,[-1]]],2,34],[[[141,[-1]],-1],2,[6,19]],[[[141,[-1]],[141,[-1]]],2,[6,17,18,19]],[[[141,[-1]],-1],2,[6,19]],[[[141,[-1]],[141,[-1]]],2,[6,17,18,19]],[[[232,[-1]],-1],2,[6,19]],[[[232,[-1]],[232,[-1]]],2,[6,17,18,19]],[[[232,[-1]],[232,[-1]]],2,[6,17,18,19]],[[[232,[-1]],-1],2,[6,19]],[[[222,[23]],[222,[23]]],2],[[[222,[137]],[222,[137]]],2],[[[222,[225]],[222,[225]]],2],[[[222,[25]],[222,[25]]],2],[[[222,[223]],[222,[223]]],2],[[[222,[231]],[222,[231]]],2],[[[222,[13]],[222,[13]]],2],[[[222,[205]],[222,[205]]],2],[[[222,[207]],[222,[207]]],2],[[[222,[230]],[222,[230]]],2],[[[222,[221]],[222,[221]]],2],[[[222,[224]],[222,[224]]],2],[[[226,[205]],[226,[205]]],2],[[[226,[231]],[226,[231]]],2],[[[226,[221]],[226,[221]]],2],[[[226,[230]],[226,[230]]],2],[[[226,[137]],[226,[137]]],2],[[[226,[207]],[226,[207]]],2],[[[226,[223]],[226,[223]]],2],[[[226,[224]],[226,[224]]],2],[[[226,[25]],[226,[25]]],2],[[[226,[13]],[226,[13]]],2],[[[226,[225]],[226,[225]]],2],[[[226,[23]],[226,[23]]],2],[[[228,[-1]],[228,[-1]]],2,229],[[[215,[-1]]],[],34],[[[215,[-1]]],[],34],[[[141,[-1]]],[],240],[[[141,[-1]]],[],[6,240]],[218],[[[232,[-1]]],[],[6,240]],[[[232,[-1]]],[],240],[219],[220],[[[222,[224]]]],[[[222,[137]]]],[[[222,[23]]]],[[[222,[225]]]],[[[222,[221]]]],[[[222,[223]]]],[[[226,[224]]]],[[[226,[221]]]],[[[226,[23]]]],[[[226,[223]]]],[[[226,[137]]]],[[[226,[225]]]],[227],[[[228,[-1]]],[],229],[[],[[215,[-1]]],209],[25,[[206,[25]]]],[207,[[206,[207]]]],[205,[[206,[205]]]],[[-1,-1],[[141,[-1]]],[]],[[-1,-1],[[228,[-1]]],229],[[],[[215,[-1]]],34],[[-1,-1],[[228,[-1]]],229],[-1,-1,[]],[[[222,[231]]],[[222,[231]]]],[[[222,[13]]],[[222,[13]]]],[[[222,[25]]],[[222,[25]]]],[[[222,[230]]],[[222,[230]]]],[[[222,[207]]],[[222,[207]]]],[[[222,[205]]],[[222,[205]]]],[[[226,[25]]],[[226,[25]]]],[[[226,[13]]],[[226,[13]]]],[[[226,[205]]],[[226,[205]]]],[[[226,[207]]],[[226,[207]]]],[[[226,[230]]],[[226,[230]]]],[[[226,[231]]],[[226,[231]]]],[[[141,[-1]]],[],[19,6]],[[[222,[-1]]],[],248],[[[226,[-1]]],[],248],0,[[],-1,[]],[[],[[215,[-1]]],34],[[],[[141,[-1]]],[4,15]],[[],218],[[],[[232,[-1]]],[4,15]],[[],219],[[],220],[[],[[222,[-1]]],15],[[],[[226,[-1]]],15],[[],227],[[],[[228,[-1]]],229],[[[141,[-1]],[141,[-1]]],[[1,[115]]],57],[[218,218],[[1,[115]]]],[[[232,[-1]],[232,[-1]]],[[1,[115]]],57],[[219,219],[[1,[115]]]],[[220,220],[[1,[115]]]],[[[222,[-1]],[222,[-1]]],[[1,[115]]],57],[[[226,[-1]],[226,[-1]]],[[1,[115]]],57],[[227,227],[[1,[115]]]],[[[228,[-1]],[228,[-1]]],[[1,[115]]],229],[[-1,-1],[[141,[-1]]],150],[[-1,207],-1,[]],[[[215,[-1]],13],[[215,[-1]]],34],[[[222,[23]],207],[[222,[23]]]],[[[222,[137]],207],[[222,[137]]]],[[[222,[221]],207],[[222,[221]]]],[[[222,[224]],207],[[222,[224]]]],[[[222,[25]],207],[[222,[25]]]],[[[222,[207]],207],[[222,[207]]]],[[[222,[205]],207],[[222,[205]]]],[[[222,[225]],207],[[222,[225]]]],[[[222,[231]],207],[[222,[231]]]],[[[222,[230]],207],[[222,[230]]]],[[[222,[13]],207],[[222,[13]]]],[[[222,[223]],207],[[222,[223]]]],[[[226,[137]],207],[[226,[137]]]],[[[226,[223]],207],[[226,[223]]]],[[[226,[13]],207],[[226,[13]]]],[[[226,[231]],207],[[226,[231]]]],[[[226,[221]],207],[[226,[221]]]],[[[226,[230]],207],[[226,[230]]]],[[[226,[225]],207],[[226,[225]]]],[[[226,[224]],207],[[226,[224]]]],[[[226,[23]],207],[[226,[23]]]],[[[226,[207]],207],[[226,[207]]]],[[[226,[205]],207],[[226,[205]]]],[[[226,[25]],207],[[226,[25]]]],[[-1,-1],-1,[]],[[219,219],219],[[220,220],220],[[-1,221],-1,[]],[[219,221],219],[[220,221],220],[-1,[[141,[-1]]],150],[-1,[[215,[-2]]],46,34],[-1,[[215,[-2]]],46,34],[-1,[[141,[-2]]],46,[15,17,18,19,4,6]],[-1,[[141,[-2]]],46,[6,15,17,18,19,4,6]],[-1,[[232,[-2]]],46,[6,15,17,18,19,4,6]],[-1,[[232,[-2]]],46,[15,17,18,19,4,6]],0,[-1,-1,[]],[219,219],[220,220],[[[206,[207]],207],207],[[[206,[25]],25],25],[[[206,[205]],205],205],[[219,219]],[[220,220]],[[[222,[-1]],[222,[-1]]],[],249],[[[226,[137]],[226,[137]]]],[[[226,[223]],[226,[223]]]],[[[226,[205]],[226,[205]]]],[[[226,[23]],[226,[23]]]],[[[226,[230]],[226,[230]]]],[[[226,[231]],[226,[231]]]],[[[226,[207]],[226,[207]]]],[[[226,[25]],[226,[25]]]],[[[226,[221]],[226,[221]]]],[[[226,[224]],[226,[224]]]],[[[226,[225]],[226,[225]]]],[[[226,[13]],[226,[13]]]],[[[222,[-1]],[222,[-1]]],2,250],[[[226,[207]],[226,[207]]],2],[[[226,[231]],[226,[231]]],2],[[[226,[223]],[226,[223]]],2],[[[226,[23]],[226,[23]]],2],[[[226,[205]],[226,[205]]],2],[[[226,[221]],[226,[221]]],2],[[[226,[225]],[226,[225]]],2],[[[226,[13]],[226,[13]]],2],[[[226,[224]],[226,[224]]],2],[[[226,[137]],[226,[137]]],2],[[[226,[230]],[226,[230]]],2],[[[226,[25]],[226,[25]]],2],[[-1,-1],-1,[]],[[-1,-1],-1,[]],[[219,219],219],[[220,220],220],[[[222,[207]],[222,[207]]],[[222,[207]]]],[[[222,[13]],[222,[13]]],[[222,[13]]]],[[[222,[205]],[222,[205]]],[[222,[205]]]],[[[222,[223]],[222,[223]]],[[222,[223]]]],[[[222,[221]],[222,[221]]],[[222,[221]]]],[[[222,[25]],[222,[25]]],[[222,[25]]]],[[[222,[230]],[222,[230]]],[[222,[230]]]],[[[222,[224]],[222,[224]]],[[222,[224]]]],[[[222,[231]],[222,[231]]],[[222,[231]]]],[[[222,[225]],[222,[225]]],[[222,[225]]]],[[[222,[23]],[222,[23]]],[[222,[23]]]],[[[222,[137]],[222,[137]]],[[222,[137]]]],[[[226,[225]],[226,[225]]],[[226,[225]]]],[[[226,[230]],[226,[230]]],[[226,[230]]]],[[[226,[231]],[226,[231]]],[[226,[231]]]],[[[226,[207]],[226,[207]]],[[226,[207]]]],[[[226,[137]],[226,[137]]],[[226,[137]]]],[[[226,[25]],[226,[25]]],[[226,[25]]]],[[[226,[23]],[226,[23]]],[[226,[23]]]],[[[226,[223]],[226,[223]]],[[226,[223]]]],[[[226,[205]],[226,[205]]],[[226,[205]]]],[[[226,[221]],[226,[221]]],[[226,[221]]]],[[[226,[224]],[226,[224]]],[[226,[224]]]],[[[226,[13]],[226,[13]]],[[226,[13]]]],[-1,-1,[]],[[[222,[230]]],[[222,[230]]]],[[[222,[207]]],[[222,[207]]]],[[[222,[137]]],[[222,[137]]]],[[[222,[221]]],[[222,[221]]]],[[[222,[225]]],[[222,[225]]]],[[[222,[224]]],[[222,[224]]]],[[[222,[205]]],[[222,[205]]]],[[[222,[23]]],[[222,[23]]]],[[[222,[231]]],[[222,[231]]]],[[[222,[223]]],[[222,[223]]]],[[[222,[25]]],[[222,[25]]]],[[[222,[13]]],[[222,[13]]]],[[[226,[137]]],[[226,[137]]]],[[[226,[230]]],[[226,[230]]]],[[[226,[205]]],[[226,[205]]]],[[[226,[224]]],[[226,[224]]]],[[[226,[25]]],[[226,[25]]]],[[[226,[13]]],[[226,[13]]]],[[[226,[231]]],[[226,[231]]]],[[[226,[225]]],[[226,[225]]]],[[[226,[207]]],[[226,[207]]]],[[[226,[223]]],[[226,[223]]]],[[[226,[221]]],[[226,[221]]]],[[[226,[23]]],[[226,[23]]]],[[[232,[-1]]],-1,[55,240]],[[-1,-2],-1,[],[]],[[[222,[207]],207],[[222,[207]]]],[[[222,[221]],207],[[222,[221]]]],[[[222,[23]],207],[[222,[23]]]],[[[222,[231]],207],[[222,[231]]]],[[[222,[224]],207],[[222,[224]]]],[[[222,[230]],207],[[222,[230]]]],[[[222,[13]],207],[[222,[13]]]],[[[222,[205]],207],[[222,[205]]]],[[[222,[225]],207],[[222,[225]]]],[[[222,[137]],207],[[222,[137]]]],[[[222,[25]],207],[[222,[25]]]],[[[222,[223]],207],[[222,[223]]]],[[[226,[225]],207],[[226,[225]]]],[[[226,[224]],207],[[226,[224]]]],[[[226,[13]],207],[[226,[13]]]],[[[226,[230]],207],[[226,[230]]]],[[[226,[205]],207],[[226,[205]]]],[[[226,[25]],207],[[226,[25]]]],[[[226,[221]],207],[[226,[221]]]],[[[226,[223]],207],[[226,[223]]]],[[[226,[231]],207],[[226,[231]]]],[[[226,[137]],207],[[226,[137]]]],[[[226,[23]],207],[[226,[23]]]],[[[226,[207]],207],[[226,[207]]]],[[-1,-2],-1,[],[]],[[[222,[230]],207],[[222,[230]]]],[[[222,[223]],207],[[222,[223]]]],[[[222,[13]],207],[[222,[13]]]],[[[222,[205]],207],[[222,[205]]]],[[[222,[225]],207],[[222,[225]]]],[[[222,[25]],207],[[222,[25]]]],[[[222,[137]],207],[[222,[137]]]],[[[222,[224]],207],[[222,[224]]]],[[[222,[221]],207],[[222,[221]]]],[[[222,[23]],207],[[222,[23]]]],[[[222,[231]],207],[[222,[231]]]],[[[222,[207]],207],[[222,[207]]]],[[[226,[25]],207],[[226,[25]]]],[[[226,[13]],207],[[226,[13]]]],[[[226,[205]],207],[[226,[205]]]],[[[226,[23]],207],[[226,[23]]]],[[[226,[221]],207],[[226,[221]]]],[[[226,[231]],207],[[226,[231]]]],[[[226,[224]],207],[[226,[224]]]],[[[226,[223]],207],[[226,[223]]]],[[[226,[230]],207],[[226,[230]]]],[[[226,[225]],207],[[226,[225]]]],[[[226,[137]],207],[[226,[137]]]],[[[226,[207]],207],[[226,[207]]]],[-1,-1,[]],[219,219],[220,220],[-1,1,46],[-1,1,46],[-1,1,46],[-1,1,46],[-1,1,46],[-1,1,46],[-1,1,46],[-1,1,46],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[25,2],[207,2],[-1,2,[]],[-1,2,[]],[-1,2,[]],[-1,2,[]],[[[222,[223]],207]],[[[222,[137]],207]],[[[222,[25]],207]],[[[222,[225]],207]],[[[222,[221]],207]],[[[222,[205]],207]],[[[222,[207]],207]],[[[222,[23]],207]],[[[222,[13]],207]],[[[222,[224]],207]],[[[222,[231]],207]],[[[222,[230]],207]],[[[226,[225]],207]],[[[226,[223]],207]],[[[226,[205]],207]],[[[226,[23]],207]],[[[226,[231]],207]],[[[226,[137]],207]],[[[226,[25]],207]],[[[226,[224]],207]],[[[226,[221]],207]],[[[226,[13]],207]],[[[226,[207]],207]],[[[226,[230]],207]],[[[222,[224]],207],2],[[[222,[23]],207],2],[[[222,[25]],207],2],[[[222,[225]],207],2],[[[222,[13]],207],2],[[[222,[205]],207],2],[[[222,[221]],207],2],[[[222,[230]],207],2],[[[222,[223]],207],2],[[[222,[207]],207],2],[[[222,[231]],207],2],[[[222,[137]],207],2],[[[226,[223]],207],2],[[[226,[230]],207],2],[[[226,[224]],207],2],[[[226,[13]],207],2],[[[226,[207]],207],2],[[[226,[231]],207],2],[[[226,[25]],207],2],[[[226,[23]],207],2],[[[226,[205]],207],2],[[[226,[221]],207],2],[[[226,[137]],207],2],[[[226,[225]],207],2],[[[222,[224]],207]],[[[222,[221]],207]],[[[222,[225]],207]],[[[222,[137]],207]],[[[222,[23]],207]],[[[222,[207]],207]],[[[222,[230]],207]],[[[222,[13]],207]],[[[222,[25]],207]],[[[222,[231]],207]],[[[222,[223]],207]],[[[222,[205]],207]],[[[226,[225]],207]],[[[226,[224]],207]],[[[226,[231]],207]],[[[226,[25]],207]],[[[226,[221]],207]],[[[226,[230]],207]],[[[226,[23]],207]],[[[226,[207]],207]],[[[226,[223]],207]],[[[226,[137]],207]],[[[226,[205]],207]],[[[226,[13]],207]],[[[222,[205]],207],2],[[[222,[230]],207],2],[[[222,[13]],207],2],[[[222,[221]],207],2],[[[222,[23]],207],2],[[[222,[223]],207],2],[[[222,[225]],207],2],[[[222,[137]],207],2],[[[222,[25]],207],2],[[[222,[207]],207],2],[[[222,[231]],207],2],[[[222,[224]],207],2],[[[226,[23]],207],2],[[[226,[207]],207],2],[[[226,[224]],207],2],[[[226,[231]],207],2],[[[226,[223]],207],2],[[[226,[13]],207],2],[[[226,[25]],207],2],[[[226,[225]],207],2],[[[226,[205]],207],2],[[[226,[221]],207],2],[[[226,[230]],207],2],[[[226,[137]],207],2],[-1,[],[]],[[[222,[230]]]],[[[222,[205]]]],[[[222,[207]]]],[[[222,[231]]]],[[[222,[25]]]],[[[222,[13]]]],[[[226,[230]]]],[[[226,[25]]]],[[[226,[13]]]],[[[226,[231]]]],[[[226,[205]]]],[[[226,[207]]]],[-1,-1,[]],[-1,-1,[]],[219,219],[220,220],[[[222,[221]]],[[222,[221]]]],[[[222,[223]]],[[222,[223]]]],[[[222,[224]]],[[222,[224]]]],[[[222,[225]]],[[222,[225]]]],[[[222,[137]]],[[222,[137]]]],[[[222,[23]]],[[222,[23]]]],[[[226,[223]]],[[226,[223]]]],[[[226,[224]]],[[226,[224]]]],[[[226,[221]]],[[226,[221]]]],[[[226,[23]]],[[226,[23]]]],[[[226,[137]]],[[226,[137]]]],[[[226,[225]]],[[226,[225]]]],[-1,-1,[]],[219,219],[220,220],[-1,[[2,[-1,-1]]],[]],[219,[[2,[219,219]]]],[220,[[2,[220,220]]]],[-1,-1,[]],[219,219],[220,220],[-1,-1,[]],[[[215,[-1]]],[[1,[[215,[-1]]]]],[[209,[207]]]],[218,218],[219,219],[220,220],[227,227],[[[215,[-1]]],[[1,[[215,[-1]]]]],[[209,[207]],[209,[13]]]],[-1,-2,[],[]],[[-1,-2],[[1,[-2]]],[],16],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[[-1,-2],[[1,[-2]]],[],16],[-1,[[1,[-2]]],[],[]],[[-1,-1],[[1,[-2]]],[],[]],[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[215,[-1]],[215,[-1]]],[],34],[[[141,[-1]],-1],[],[6,18]],[[[141,[-1]],-1],[],18],[[[141,[-1]],-1],[],[6,18]],[[[141,[-1]],-1],[],[6,18]],[[[141,[-1]],[141,[-1]]],[],[6,18]],[[[141,[-1]],[141,[-1]]],[],[6,18]],[[[141,[-1]],[141,[-1]]],[],18],[[[141,[-1]],[141,[-1]]],[],[6,18]],[[218,218]],[[[232,[-1]],[232,[-1]]],[],[6,18]],[[[232,[-1]],[232,[-1]]],[],[6,18]],[[[232,[-1]],[232,[-1]]],[],18],[[[232,[-1]],[232,[-1]]],[],[6,18]],[[[232,[-1]],-1],[],[6,18]],[[[232,[-1]],-1],[],[6,18]],[[[232,[-1]],-1],[],[6,18]],[[[232,[-1]],-1],[],18],[[219,219]],[[220,220]],[[[222,[230]],[222,[230]]]],[[[222,[221]],[222,[221]]]],[[[222,[137]],[222,[137]]]],[[[222,[23]],[222,[23]]]],[[[222,[224]],[222,[224]]]],[[[222,[205]],[222,[205]]]],[[[222,[225]],[222,[225]]]],[[[222,[13]],[222,[13]]]],[[[222,[25]],[222,[25]]]],[[[222,[223]],[222,[223]]]],[[[222,[231]],[222,[231]]]],[[[222,[207]],[222,[207]]]],[[[226,[137]],[226,[137]]]],[[[226,[231]],[226,[231]]]],[[[226,[230]],[226,[230]]]],[[[226,[225]],[226,[225]]]],[[[226,[224]],[226,[224]]]],[[[226,[25]],[226,[25]]]],[[[226,[23]],[226,[23]]]],[[[226,[205]],[226,[205]]]],[[[226,[13]],[226,[13]]]],[[[226,[221]],[226,[221]]]],[[[226,[223]],[226,[223]]]],[[[226,[207]],[226,[207]]]],[[227,227]],[[[228,[-1]],[228,[-1]]],[],229],[[[215,[-1]],[215,[-1]]],2,34],[[[215,[-1]],[215,[-1]]],2,34],[[[141,[-1]],[141,[-1]]],2,[6,18]],[[[141,[-1]],-1],2,[6,18]],[[[141,[-1]],[141,[-1]]],2,[6,18]],[[[141,[-1]],-1],2,[6,18]],[[[232,[-1]],[232,[-1]]],2,[6,18]],[[[232,[-1]],-1],2,[6,18]],[[[232,[-1]],[232,[-1]]],2,[6,18]],[[[232,[-1]],-1],2,[6,18]],[[[222,[221]],[222,[221]]],2],[[[222,[224]],[222,[224]]],2],[[[222,[13]],[222,[13]]],2],[[[222,[207]],[222,[207]]],2],[[[222,[230]],[222,[230]]],2],[[[222,[25]],[222,[25]]],2],[[[222,[225]],[222,[225]]],2],[[[222,[231]],[222,[231]]],2],[[[222,[23]],[222,[23]]],2],[[[222,[205]],[222,[205]]],2],[[[222,[137]],[222,[137]]],2],[[[222,[223]],[222,[223]]],2],[[[226,[137]],[226,[137]]],2],[[[226,[225]],[226,[225]]],2],[[[226,[224]],[226,[224]]],2],[[[226,[230]],[226,[230]]],2],[[[226,[207]],[226,[207]]],2],[[[226,[223]],[226,[223]]],2],[[[226,[23]],[226,[23]]],2],[[[226,[13]],[226,[13]]],2],[[[226,[25]],[226,[25]]],2],[[[226,[205]],[226,[205]]],2],[[[226,[221]],[226,[221]]],2],[[[226,[231]],[226,[231]]],2],[[[228,[-1]],[228,[-1]]],2,229],[-1,[[215,[-2]]],46,34],[-1,[[215,[-2]]],46,34],[-1,[[141,[-2]]],46,[6,4,17]],[-1,[[141,[-2]]],46,[4,17]],[-1,[[232,[-2]]],46,[4,17]],[-1,[[232,[-2]]],46,[6,4,17]],[-1,-1,[]],[[[222,[205]]],[[222,[205]]]],[[[222,[224]]],[[222,[224]]]],[[[222,[230]]],[[222,[230]]]],[[[222,[25]]],[[222,[25]]]],[[[222,[207]]],[[222,[207]]]],[[[222,[221]]],[[222,[221]]]],[[[222,[23]]],[[222,[23]]]],[[[222,[231]]],[[222,[231]]]],[[[222,[137]]],[[222,[137]]]],[[[222,[225]]],[[222,[225]]]],[[[222,[223]]],[[222,[223]]]],[[[222,[13]]],[[222,[13]]]],[[[226,[207]]],[[226,[207]]]],[[[226,[25]]],[[226,[25]]]],[[[226,[225]]],[[226,[225]]]],[[[226,[13]]],[[226,[13]]]],[[[226,[221]]],[[226,[221]]]],[[[226,[137]]],[[226,[137]]]],[[[226,[223]]],[[226,[223]]]],[[[226,[224]]],[[226,[224]]]],[[[226,[23]]],[[226,[23]]]],[[[226,[205]]],[[226,[205]]]],[[[226,[231]]],[[226,[231]]]],[[[226,[230]]],[[226,[230]]]],[-1,-1,[]],[219,219],[220,220],[-1,-1,[]],[219,219],[220,220],[-1,25,[]],[219,25],[220,25],[-1,-1,[]],[219,219],[220,220],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[219,219],[220,220],[-1,[[135,[-2]]],[],[]],[-1,[[135,[-2]]],[],[]],[[-1,-2,-2],[[1,[[135,[-2]]]]],[],16],[[-1,-2,-2],[[1,[[135,[-2]]]]],[],16],[-1,[[1,[[135,[-2]]]]],[],[]],[-1,[[1,[[135,[-2]]]]],[],[]],[-1,[[56,[-2]]],[],[]],[-1,[[56,[-2]]],[],[]],[[-1,-2,-2],[[1,[[56,[-2]]]]],[],16],[[-1,-2,-2],[[1,[[56,[-2]]]]],[],16],[-1,[[1,[[56,[-2]]]]],[],[]],[-1,[[1,[[56,[-2]]]]],[],[]],[-1,195,[]],[-1,195,[]],[-1,195,[]],[-1,195,[]],[-1,195,[]],[-1,195,[]],[-1,195,[]],[[-1,-1],115,[]],[[219,219],115],[[220,220],115],[-1,-2,[],[]],[[[222,[231]]],207],[[[222,[223]]],207],[[[222,[137]]],207],[[[222,[225]]],207],[[[222,[205]]],207],[[[222,[224]]],207],[[[222,[221]]],207],[[[222,[25]]],207],[[[222,[13]]],207],[[[222,[230]]],207],[[[222,[207]]],207],[[[222,[23]]],207],[[[226,[223]]],207],[[[226,[25]]],207],[[[226,[230]]],207],[[[226,[207]]],207],[[[226,[224]]],207],[[[226,[231]]],207],[[[226,[205]]],207],[[[226,[221]]],207],[[[226,[225]]],207],[[[226,[23]]],207],[[[226,[13]]],207],[[[226,[137]]],207],[-1,-2,[],[]],[[[222,[207]]],207],[[[222,[224]]],207],[[[222,[205]]],207],[[[222,[137]]],207],[[[222,[25]]],207],[[[222,[231]]],207],[[[222,[221]]],207],[[[222,[223]]],207],[[[222,[23]]],207],[[[222,[230]]],207],[[[222,[225]]],207],[[[222,[13]]],207],[[[226,[224]]],207],[[[226,[230]]],207],[[[226,[207]]],207],[[[226,[137]]],207],[[[226,[205]]],207],[[[226,[13]]],207],[[[226,[223]]],207],[[[226,[225]]],207],[[[226,[231]]],207],[[[226,[221]]],207],[[[226,[25]]],207],[[[226,[23]]],207],[[[141,[-1]]],[[141,[-1]]],[]],[[[232,[-1]]],[[232,[-1]]],[]],[-1,-1,[]],[219,219],[220,220],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[[141,[-1]]],[[141,[-1]]],150],[-1,[],[]],[[[222,[137]]]],[[[222,[221]]]],[[[222,[224]]]],[[[222,[23]]]],[[[222,[223]]]],[[[222,[225]]]],[[[226,[223]]]],[[[226,[137]]]],[[[226,[23]]]],[[[226,[224]]]],[[[226,[221]]]],[[[226,[225]]]],0,0,[[],-1,[]],[[],[[215,[-1]]],34],[[],[[141,[-1]]],4],[[],218],[[],[[232,[-1]]],4],[[],219],[[],220],[[],[[222,[-1]]],4],[[],[[226,[-1]]],4],[[],227],[[],[[228,[-1]]],229],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[225],[25],[230],[205],[224],[221],[223],[-1,-1,[]],[231],[13],[207],[137],[23],[221],[25],[13],[205],[-1,-1,[]],[207],[137],[23],[225],[13],[207],[-1,-1,[]],[225],[25],[23],[205],[221],[137],[225],[221],[137],[13],[-1,-1,[]],[205],[23],[25],[207],[137],[225],[13],[207],[23],[25],[221],[205],[-1,-1,[]],[-1,-1,[]],[137],[25],[23],[13],[205],[225],[[]],[[]],[[]],[[]],[[]],[[]],[[],137],[[],223],[[],25],[[],205],[[],13],[[],221],[[],207],[[],23],[[],225],[[],230],[-1,-2,[],[]],[[],231],[[],224],[[],23],[[],13],[[],221],[[],205],[[],137],[[],207],[-1,-2,[],[]],[[],225],[[],25],[[],137],[[],205],[[],25],[[],225],[[],207],[[],13],[-1,-2,[],[]],[[],221],[[],23],[[],25],[[],207],[[],13],[[],205],[[],137],[[],23],[-1,-2,[],[]],[[],221],[[],225],[[],23],[-1,-2,[],[]],[[],207],[[],205],[[],13],[[],225],[[],221],[[],25],[[],137],[[],225],[[],25],[[],23],[[],13],[-1,-2,[],[]],[[],205],[[],137],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],137],[[],230],[[],231],[[],25],[[],207],[[],224],[[],221],[[],23],[[],223],[[],205],[[],13],[[],225],[[],25],[[],137],[[],205],[[],207],[[],13],[[],23],[[],225],[[],221],[[],23],[[],207],[[],13],[[],205],[[],225],[[],25],[[],221],[[],137],[[],137],[[],207],[[],221],[[],13],[[],205],[[],23],[[],225],[[],25],[[],25],[[],137],[[],23],[[],221],[[],225],[[],13],[[],205],[[],207],[[],137],[[],225],[[],205],[[],25],[[],23],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[207,2],[25,2],[207,2],[25,2],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25],[-1,-1,[]],[221],[23],[13],[207],[137],[-1,-1,[]],[137],[207],[25],[13],[221],[23],[23],[137],[207],[25],[13],[221],[-1,-1,[]],[13],[-1,-1,[]],[137],[23],[221],[207],[25],[[]],[[]],[[]],[[]],[[],25],[[],207],[-1,-2,[],[]],[[],13],[[],137],[[],221],[[],23],[-1,-2,[],[]],[[],137],[[],207],[[],13],[[],25],[[],23],[[],221],[[],13],[[],25],[[],221],[[],23],[-1,-2,[],[]],[[],207],[[],137],[[],137],[[],25],[[],207],[[],13],[-1,-2,[],[]],[[],221],[[],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],25],[[],207],[[],221],[[],137],[[],23],[[],25],[[],137],[[],13],[[],221],[[],207],[[],23],[[],221],[[],13],[[],137],[[],23],[[],25],[[],207],[[],137],[[],221],[[],13],[[],25],[[],207],[[],23],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,207],[25,207],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],0,0,0,0,0,0,[-1,-1,120],[-1,-1,120],[-1,[[251,[-1]]],120],[[-1,-2],[[252,[-1,-2]]],120,253],[-1,[[20,[2,254]]],[]],[-1,8,[]],[-1,8,[]],0,[[-1,[49,[230]]],[[20,[13,254]]],[]],0,[[-1,255],[[20,[2,254]]],[]],[[-1,255],[[20,[2,254]]],[]],[[-1,[49,[230]]],[[20,[2,254]]],[]],[[-1,[26,[230,256]]],[[20,[13,254]]],[]],[[-1,195],[[20,[13,254]]],[]],[[-1,[49,[257]]],[[20,[13,254]]],[]],0,[[-1,25],[[258,[-1]]],120],[[-1,[49,[230]]],[[20,[13,254]]],[]],[[-1,[49,[230]]],[[20,[2,254]]],[]],[[-1,[49,[259]]],[[20,[2,254]]],[]],[[-1,260],[[20,[2,254]]],[]],[[-1,[49,[259]]],[[20,[13,254]]],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[261,[-1]]],[[261,[-1]]],[6,30]],[[[262,[-1]]],[[262,[-1]]],6],[263,263],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[261,[-1]],10],11,[12,30]],[[[262,[-1]],10],11,12],[[263,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[262,[-1]],13],[],[]],[[263,13],13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[262,[-1]]],[[26,[13]]],16],[[[26,[-1]]],[[261,[-1]]],30],[[[26,[-1]]],[[262,[-1]]],16],[[[49,[-1]]],263,30],0,[[[49,[-1]],[49,[-1]],-1],[[26,[13]]],30],[[[261,[-1]],[49,[-1]]],[[26,[13]]],30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[[49,[230]],[49,[230]]],[[26,[8]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[264,[-1]],[265,[-1]]],[[264,[-1]]],[266,120]],[[[265,[-1]]],[[264,[-1]]],[266,120]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[264,[-1]]],[[264,[-1]]],[266,120,6]],[[[265,[-1]]],[[265,[-1]]],[266,120]],[[[267,[-1]]],[[267,[-1]]],[266,120]],[268,268],[269,269],[270,270],[271,271],[272,272],[273,273],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[264,[-1]],[264,[-1]]],115,[266,120]],[[[265,[-1]],[265,[-1]]],115,[266,120]],[[268,268],115],[[269,269],115],[[270,270],115],[[271,271],115],[[272,272],115],[[273,273],115],[[[267,[-1]],[267,[-1]]],[[267,[-1]]],[266,120]],[[[267,[-1]],[267,[-1]]],[[267,[-1]]],[]],[[[267,[268]],[267,[268]]],[[267,[268]]]],[[[267,[269]],[267,[269]]],[[267,[269]]]],[[[267,[270]],[267,[270]]],[[267,[270]]]],[[[267,[271]],[267,[271]]],[[267,[271]]]],[[[267,[272]],[267,[272]]],[[267,[272]]]],[[[267,[273]],[267,[273]]],[[267,[273]]]],[[],[[264,[-1]]],[266,120,118]],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[13,2],[[[264,[-1]],[264,[-1]]],8,[266,120]],[[[265,[-1]],[265,[-1]]],8,[266,120]],[[[267,[-1]],[267,[-1]]],8,[266,120]],[[268,268],8],[[269,269],8],[[270,270],8],[[271,271],8],[[272,272],8],[[273,273],8],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[[264,[-1]],10],11,[266,120,12]],[[[274,[-1]],10],11,[266,120,12]],[[[265,[-1]],10],11,[266,120,12]],[[[267,[-1]],10],11,[266,120,12]],[[268,10],11],[[269,10],11],[[270,10],11],[[271,10],11],[[272,10],11],[[273,10],11],[-1,-1,[]],[[[26,[[265,[-1]]]]],[[264,[-1]]],[266,120]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[265,[-1]]],[[267,[-1]]],[266,120]],[[[267,[-1]],-2],2,[266,120],126],[[268,-1],2,126],[[269,-1],2,126],[[270,-1],2,126],[[271,-1],2,126],[[272,-1],2,126],[[273,-1],2,126],[[[274,[-1]],-2],[[267,[-1]]],[266,120],[[84,[13]]]],[[[265,[-1]],-2],[[267,[-1]]],[266,120],[[84,[13]]]],[-1,[[274,[-2]]],50,[]],[-1,[[274,[268]]],50],[-1,[[274,[269]]],50],[-1,[[274,[270]]],50],[-1,[[274,[271]]],50],[-1,[[274,[272]]],50],[-1,[[274,[273]]],50],[49,[[267,[-1]]],[]],[49,[[267,[268]]]],[49,[[267,[269]]]],[49,[[267,[270]]]],[49,[[267,[271]]]],[49,[[267,[272]]]],[49,[[267,[273]]]],[13,2],[[13,275],2],[[13,275],2],[[13,275],2],[[13,275],2],[[13,275],2],[[13,275],2],[[13,275],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[274,[-1]]],8,[266,120]],[[[265,[-1]]],8,[266,120]],[[[274,[-1]]],13,[266,120]],[[[265,[-1]]],13,[266,120]],[[[265,[-1]],[265,[-1]]],13,[266,120]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[[264,[-1]],[264,[-1]]],[[1,[115]]],[266,120]],[[[265,[-1]],[265,[-1]]],[[1,[115]]],[266,120]],[[268,268],[[1,[115]]]],[[269,269],[[1,[115]]]],[[270,270],[[1,[115]]]],[[271,271],[[1,[115]]]],[[272,272],[[1,[115]]]],[[273,273],[[1,[115]]]],[[[264,[-1]],[265,[-1]]],2,[266,120]],[[[274,[-1]],-2],[[265,[-1]]],[266,120],[[84,[13]]]],[[[265,[-1]],-2],[[265,[-1]]],[266,120],[[84,[13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[277,[276]]]],[-1,[[96,[-1]]],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,[[96,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1],2,[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-1],2,[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[278,[-1,-2]]],[[278,[-1,-2]]],6,6],[[[279,[-1]]],[[279,[-1]]],6],[[[280,[-1,-2]]],[[280,[-1,-2]]],6,6],[281,281],[282,282],[283,283],[284,284],[285,285],[286,286],[287,287],[288,288],[289,289],[[[290,[-1,-2]]],[[290,[-1,-2]]],[184,6],[291,6]],[[[292,[-1,-2]]],[[292,[-1,-2]]],[184,6],[291,6]],[[[293,[-1,-2]]],[[293,[-1,-2]]],[184,6],6],[[[96,[-1]]],[[96,[-1]]],6],[275,275],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[278,[-1,-2]],[278,[-1,-2]]],115,16,[]],[[[279,[-1]],[279,[-1]]],115,16],[[[280,[-1,-2]],[280,[-1,-2]]],115,16,16],[[[96,[-1]],[96,[-1]]],115,57],[[],[[278,[-1,-2]]],118,118],[[],[[96,[-1]]],118],[[],275],[-1,-2,46,[]],[[[49,[230]]],-1,120],[[[49,[230]]],-1,120],[[[278,[-1,-2]],[278,[-1,-2]]],8,9,[]],[[[279,[-1]],[279,[-1]]],8,9],[[[280,[-1,-2]],[280,[-1,-2]]],8,9,9],[[[96,[-1]],[96,[-1]]],8,9],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[[278,[-1,-2]],10],11,12,12],[[[294,[-1,-2]],10],11,12,[[295,[-1]],12]],[[[279,[-1]],10],11,12],[[[280,[-1,-2]],10],11,12,12],[[281,10],11],[[282,10],11],[[283,10],11],[[284,10],11],[[285,10],11],[[286,10],11],[[287,10],11],[[288,10],11],[[289,10],11],[[[290,[-1,-2]],10],11,[184,12],[291,12]],[[[292,[-1,-2]],10],11,[184,12],[291,12]],[[[293,[-1,-2]],10],11,[184,12],12],[[[96,[-1]],10],11,12],[[275,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[[275,-2],-1,[],[[295,[-1]]]],[[275,149],8],[[275,-2],[[294,[-1,-2]]],[],[[295,[-1]]]],[[]],[[]],[[-1,-2],[],[],[]],[[[279,[-1]],-2],2,31,126],[[[280,[-1,-2]],-3],2,31,31,126],[[[96,[-1]],-2],2,31,126],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[-1,[[1,[-2]]],[],[]],[281,[[296,[-1]]],184],[[-1,-2,-3,8],[[20,[2,254]]],[],297,244],[[-1,-1],[[2,[-1,-1]]],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[[-1,-2],[[2,[-2,-2]]],[],[]],[-1,-2,132,[]],[-1,-2,132,[]],[[-1,-2],1,[],46],[[281,-1],[],298],[[283,-1],1,46],[[285,-1],1,46],[[287,-1],1,46],[[289,-1],1,46],[[[290,[-1,-2]],-3],1,184,291,46],[[[293,[-1,246]],-2],1,184,46],[[[293,[-1,299]],-2],1,184,46],[-1,[[280,[-1,-2]]],[],[]],[246,281],[13,[[290,[-1,-2]]],184,291],[-1,[[293,[-2,-1]]],[],184],[[],275],[25,275],[[[296,[-1]]],1,184],[[[294,[-1,-2]]],1,[],[[295,[-1]]]],[[[278,[-1,-2]],[278,[-1,-2]]],[[1,[115]]],57,[]],[[[279,[-1]],[279,[-1]]],[[1,[115]]],57],[[[280,[-1,-2]],[280,[-1,-2]]],[[1,[115]]],57,57],[[[96,[-1]],[96,[-1]]],[[1,[115]]],57],[[-1,275],-2,[],[]],[[[279,[-1]],275],[[2,[13,13]]],[[295,[13]]]],[[[280,[-2,-1]],275],[[2,[[300,[-1]],[300,[-1]]]]],16,[[295,[-1]]]],[[275,25],25],[275,25],[[-1,275],[[294,[-2,-1]]],[],[]],[[-1,275],[[294,[-2,-1]]],[],[]],[275,149],[[275,25,13],[[26,[25]]]],[-1,195,253],[-1,195,253],[[],195],[[],195],[[],195],[[]],[[]],[-1,1,46],[281],[-1,1,46],[-1,1,46],[-1,1,46],[-1,1,46],[-1,1,46],0,0,[[281,13],26],[[-1,[26,[230]]],2,[]],[-1,195,[]],[-1,195,[]],[[],2],[[],2],[[275,[49,[-1]]],2,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[[49,[230]]],[[26,[230]]]],[-1,-2,132,[]],[-1,-2,132,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[301,301],[302,302],[303,303],[[[304,[-1]]],[[304,[-1]]],[6,305]],[[[306,[-1]]],[[306,[-1]]],[6,305]],[[[307,[-1,-2]]],[[307,[-1,-2]]],[6,74],[6,32]],[196,196],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],308],[13,25],[13,25],0,0,0,[[196,196],8],[[-1,-2],8,[],[]],[[301,10],11],[[302,10],11],[[303,10],11],[[[304,[-1]],10],11,[12,305]],[[[306,[-1]],10],11,[12,305]],[[[307,[-1,-2]],10],11,[12,74],[12,32]],[[196,10],11],[[308,10],11],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[303,[[304,[-1]]],305],[[196,-1],2,126],[[308,192],25],[[308,192,13,13],25],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[304,[-1]],13,13],13,305],[[309,13,13],13],[301,13],[302,13],[303,13],[[13,192],301],[192,302],[[13,192],303],[[13,192],309],[[192,-1],[[307,[-2,-1]]],32,74],[[],308],[[]],0,0,[[302,13,13,-1],-2,27,[]],[[302,13,-1,-1,-2],2,[],27],[[302,13,13],2],[[303,13,13,-1],-2,27,[]],[[309,13,13,8,-1],[],27],[[309,13,13,8,-1,-2],[],27,27],[[[310,[-1]],275],192,[[295,[13]]]],[[[311,[-1]],275],192,[[295,[13]]]],[[[312,[-1]],275],192,[[295,[13]]]],[[[313,[-1]],275],192,[[295,[13]]]],0,[[[26,[25]]],2],[[[26,[25]]],2],[[302,13,-1],-2,27,[]],[[302,13,-1,-2],2,[],27],[[302,13,13],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[[309,13,13,8,-1],2,27],0,0,0,[[],13],[[],13],[25,308]],"c":[],"p":[[4,"Option",6273],[15,"tuple"],[3,"RangeChminChmaxAdd",53],[8,"Zero",3238],[8,"Bounded",3238],[8,"Clone",6274],[3,"RangeSumRangeChminChmaxAdd",53],[15,"bool"],[8,"PartialEq",6275],[3,"Formatter",6276],[6,"Result",6276],[8,"Debug",6276],[15,"usize"],[8,"Copy",6277],[8,"One",3238],[8,"Ord",6275],[8,"Add",6278],[8,"Sub",6278],[8,"Mul",6278],[4,"Result",6279],[3,"TypeId",6280],[3,"ConvexHullTrick",471],[15,"i64"],[3,"XorBasis",471],[15,"u64"],[3,"Vec",6281],[8,"FnMut",6282],[8,"Bisect",471],[3,"RhoPath",471],[8,"Eq",6275],[8,"Hash",6283],[8,"Fn",6282],[3,"IndependentSubSet",471],[8,"MIntBase",3238],[3,"BitDp",471],[3,"Subsets",471],[3,"Combinations",471],[3,"EsperEstimator",471],[3,"EsperSolver",471],[3,"ImpartialGameAnalyzer",471],[8,"ImpartialGame",471],[3,"PartisanGameAnalyzer",471],[8,"PartisanGame",471],[3,"ZeroSumGameAnalyzer",471],[8,"ZeroSumGame",471],[8,"Iterator",6284],[3,"SqrtDecompositionBuckets",471],[8,"SqrtDecomposition",471],[15,"slice"],[8,"IntoIterator",6285],[3,"ImpartialGamer",471],[3,"PartisanGamer",471],[3,"ZeroSumGamer",471],[3,"SlideMinimum",471],[8,"Div",6278],[3,"RangeInclusive",6286],[8,"PartialOrd",6275],[3,"KnapsackPloblemSmallWeight",761],[3,"KnapsackPloblemSmallValue",761],[3,"ZeroOneKnapsackProblemSmallItems",761],[3,"ZeroOneKnapsackPloblemBranchAndBound",761],[3,"LexicographicalSubsequence",761],[3,"LongestIncreasingSubsequence",761],[3,"IntersectionAutomaton",875],[8,"Automaton",875],[3,"UnionAutomaton",875],[3,"ProductAutomaton",875],[3,"FunctionalAutomaton",875],[3,"MappingAutomaton",875],[3,"AlphabetMappingAutomaton",875],[3,"LexicographicalAutomaton",875],[3,"RevLexicographicalAutomaton",875],[3,"MonoidalAutomaton",875],[8,"Monoid",53],[3,"AlwaysAcceptingAutomaton",875],[3,"BitVector",875],[3,"WaveletMatrix",875],[3,"Accumulate",875],[3,"Accumulate2d",875],[8,"AbelianMonoid",53],[3,"BinaryIndexedTree",875],[3,"BinaryIndexedTree2D",875],[3,"CompressedBinaryIndexedTree",875],[8,"RangeBounds",6286],[3,"HashCounter",875],[3,"BTreeCounter",875],[3,"SlopeTrick",875],[3,"MergingUnionFind",875],[3,"HashMap",6287],[3,"WeightedUnionFind",875],[8,"Group",53],[3,"UnionFind",875],[3,"NonNull",6288],[3,"MemoryPool",875],[3,"SegmentTree",875],[3,"TotalOrd",5725],[3,"DequeAggregation",875],[3,"BitSet",875],[3,"Trie",875],[3,"RangeArithmeticProgressionAdd",875],[3,"RangeMap",875],[3,"RangeSet",875],[3,"CompressedSegmentTree",875],[3,"DisjointSparseTable",875],[8,"SemiGroup",53],[3,"LazySegmentTree",875],[8,"MonoidAction",53],[3,"LazySegmentTreeMap",875],[3,"SegmentTreeMap",875],[3,"QueueAggregation",875],[3,"Automatondp",875],[3,"VecCompress",875],[3,"HashCompress",875],[3,"LineSet",875],[4,"Ordering",6275],[3,"SplaySequence",875],[8,"Allocator",875],[8,"Default",6289],[3,"SplayMap",875],[8,"Sized",6277],[3,"Drain",6287],[3,"Ref",6290],[3,"RefMut",6290],[8,"AbelianGroup",53],[8,"Borrow",6291],[8,"Hasher",6283],[3,"Iter",6287],[3,"Iter",6292],[3,"Keys",6292],[3,"IterMut",6292],[3,"Keys",6287],[8,"FnOnce",6282],[3,"Static2DTree",875],[8,"RankSelectDictionaries",875],[3,"Range",6286],[3,"Range",6292],[15,"isize"],[3,"Values",6287],[3,"Values",6292],[3,"ValuesMut",6292],[3,"Complex",3238],[4,"Ccw",1903],[8,"Ccwable",1903],[3,"Line",1903],[3,"LineSegment",1903],[3,"Approx",1903],[8,"ApproxOrd",1903],[3,"Circle",1903],[15,"f64"],[8,"Float",3238],[3,"TwoSatisfiability",2021],[3,"ProjectSelectionProblem",2021],[3,"SparseGraphBuilder",2021],[3,"AdjacencyListGraph",2021],[3,"BipartiteMatching",2021],[3,"DinicBuilder",2021],[3,"PrimalDualBuilder",2021],[3,"GridGraph",2021],[3,"UsizeGraph",2021],[3,"ClosureGraph",2021],[3,"SparseGraph",2021],[3,"Adjacency",2021],[3,"Iter",6293],[3,"VIndexWithValue",2021],[3,"VIndexWithEIndexValue",2021],[8,"Vertices",2021],[8,"VertexMap",2021],[8,"AdjacencyView",2021],[8,"VertexSize",2021],[8,"SparseGraphConstruction",2021],[6,"BidirectionalSparseGraph",2021],[3,"Dinic",2021],[3,"PrimalDual",2021],[3,"EdgeListGraph",2021],[3,"VIndex",2021],[3,"VIndexWithEIndex",2021],[4,"DirectedEdge",2021],[4,"UndirectedEdge",2021],[4,"BidirectionalEdge",2021],[3,"StronglyConnectedComponent",2021],[15,"never"],[6,"DirectedSparseGraph",2021],[3,"AdjacencyListGraphScanner",2021],[8,"IterScan",5725],[3,"EdgeListGraphScanner",2021],[3,"SparseGraphScanner",2021],[3,"TreeGraphScanner",2021],[3,"AdjacencyViewIterFromEindex",2021],[8,"AdjacenciesWithEindex",2021],[3,"AdjacencyViewIterFromValue",2021],[8,"AdjacenciesWithValue",2021],[6,"UndirectedSparseGraph",2021],[3,"LowLink",2021],[8,"EdgeView",2021],[3,"String",6294],[4,"TreeCenter",6079],[8,"ModifiableState",2749],[3,"SimuratedAnnealing",2749],[3,"FormalPowerSeries",2798],[8,"FormalPowerSeriesCoefficient",2798],[3,"Matrix",2798],[3,"Polynomial",2798],[8,"MulAssign",6278],[8,"ConvolveSteps",2798],[15,"u128"],[3,"BarrettReduction",3238],[15,"u32"],[3,"MemorizedFactorial",2798],[8,"MIntConvert",3238],[3,"SmallModMemorizedFactorial",2798],[3,"PowPrec",2798],[3,"EulerPhiTable",2798],[3,"PrimeList",2798],[3,"PrimeTable",2798],[3,"MInt",3238],[3,"IterMut",6293],[8,"FormalPowerSeriesCoefficientSqrt",2798],[3,"DoubleDouble",3238],[3,"Float32",3238],[3,"Float64",3238],[15,"i32"],[3,"Saturating",3238],[15,"i8"],[15,"i16"],[15,"i128"],[3,"Wrapping",3238],[3,"QuadDouble",3238],[3,"Rational",3238],[8,"Signed",3238],[15,"u8"],[15,"u16"],[3,"DualNumber",3238],[8,"BitAnd",6295],[8,"BitAndAssign",6295],[8,"BitOr",6295],[8,"BitOrAssign",6295],[8,"BitXor",6295],[8,"BitXorAssign",6295],[4,"FpCategory",6296],[8,"Neg",6278],[8,"DivAssign",6278],[3,"ExtendedGcd",3238],[3,"Error",6276],[8,"Display",6276],[15,"f32"],[15,"str"],[8,"FromStr",6297],[8,"Not",6295],[8,"Rem",6278],[8,"RemAssign",6278],[3,"Bytes",6298],[3,"Chain",6298],[8,"Read",5397],[3,"Error",6299],[3,"BorrowedCursor",6300],[3,"Global",6301],[3,"IoSliceMut",6298],[3,"Take",6298],[3,"IoSlice",6298],[3,"Arguments",6276],[3,"KnuthMorrisPratt",5426],[3,"SuffixArray",5426],[3,"Zarray",5426],[3,"HashedRangeChained",5480],[3,"HashedRange",5480],[8,"RollingHasher",5480],[3,"Hashed",5480],[4,"Mersenne61x1",5480],[4,"Mersenne61x2",5480],[4,"Mersenne61x3",5480],[4,"Gf2_63x1",5480],[4,"Gf2_63x2",5480],[4,"Gf2_63x3",5480],[3,"HashedSequence",5480],[3,"Xorshift",5725],[3,"Cell",6290],[3,"LocalKey",6302],[3,"PartialIgnoredOrd",5725],[3,"NotEmptySegment",5725],[3,"RandRange",5725],[3,"Scanner",5725],[4,"Usize1",5725],[3,"CharWithBase",5725],[4,"Chars",5725],[3,"CharsWithBase",5725],[4,"Byte1",5725],[3,"ByteWithBase",5725],[4,"Bytes",5725],[3,"BytesWithBase",5725],[3,"Collect",5725],[8,"FromIterator",6285],[3,"SizedCollect",5725],[3,"Splitted",5725],[3,"RandIter",5725],[8,"RandomSpec",5725],[3,"ScannerIter",5725],[8,"Write",5397],[8,"MarkedIterScan",5725],[15,"char"],[4,"Bound",6286],[3,"EulerTourForEdge",6079],[3,"EulerTourForVertex",6079],[3,"EulerTourForRichVertex",6079],[3,"LowestCommonAncestor",6079],[8,"LcaMonoidDispatch",6079],[3,"LcaMonoid",6079],[3,"ReRooting",6079],[3,"TreeHasher",6079],[3,"HeavyLightDecomposition",6079],[3,"PruferSequence",6079],[3,"PathTree",6079],[3,"StarTree",6079],[3,"MixedTree",6079],[8,"SemiRing",53],[4,"Gf2_63",53],[4,"Mersenne61",53],[8,"Magma",53],[3,"EmptyLazy",53],[3,"EmptyAction",53],[3,"FlattenAction",53],[3,"RangeSumRangeAdd",53],[3,"RangeSumRangeLinear",53],[3,"RangeSumRangeUpdate",53],[3,"RangeMaxRangeUpdate",53],[3,"RangeMinRangeUpdate",53],[3,"RangeMinRangeAdd",53],[8,"BitAndIdentity",53],[8,"BitOrIdentity",53],[3,"AddMulOperation",53],[3,"MaxOperation",53],[3,"MinOperation",53],[3,"FirstOperation",53],[3,"LastOperation",53],[3,"AdditiveOperation",53],[3,"MultiplicativeOperation",53],[3,"LinearOperation",53],[3,"BitAndOperation",53],[3,"BitOrOperation",53],[3,"BitXorOperation",53],[3,"CountingOperation",53],[3,"ReverseOperation",53],[3,"TopkOperation",53],[3,"BottomkOperation",53],[4,"PermutationOperation",53],[3,"FindMajorityOperation",53],[8,"Field",53],[8,"Invertible",53],[8,"Unital",53],[8,"Ring",53],[8,"BitXorIdentity",53],[8,"SliceSortExt",471],[8,"SliceBisectExt",471],[8,"SliceCombinationsExt",471],[8,"BTreeMapExt",875],[8,"BTreeSetExt",875],[8,"Compressor",875],[8,"ToDigitSequence",875],[8,"Adjacencies",2021],[8,"AdjacencyIndexWithValue",2021],[8,"EIndexedGraph",2021],[8,"AdjacencyIndexWithEindex",2021],[8,"Edges",2021],[8,"EdgeMap",2021],[8,"ShortestPathSemiRing",2021],[8,"GraphBase",2021],[8,"AdjacencyIndex",2021],[3,"StandardSp",2021],[3,"OptionSp",2021],[3,"PathFoldingSp",2021],[8,"ShortestPathExt",2021],[8,"EdgeSize",2021],[8,"VertexView",2021],[3,"BitwiseandConvolve",2798],[3,"BitwiseorConvolve",2798],[4,"ConvolveRealFft",2798],[3,"GcdConvolve",2798],[3,"LcmConvolve",2798],[3,"Convolve",2798],[3,"SubsetConvolve",2798],[6,"Fps998244353",2798],[6,"Fps",2798],[8,"IntBase",3238],[8,"Unsigned",3238],[8,"DiscreteSteps",3238],[8,"BinaryRepr",3238],[8,"RangeBoundsExt",3238],[3,"Modulo2",4972],[4,"Modulo998244353",4972],[4,"Modulo1000000007",4972],[4,"Modulo1000000009",4972],[4,"DynModuloU32",4972],[4,"DynModuloU64",4972],[6,"DynMIntU32",4972],[6,"DynMIntU64",4972],[8,"MontgomeryReduction32",5237],[4,"Modulo998244353",5237],[4,"Modulo2113929217",5237],[4,"Modulo1811939329",5237],[4,"Modulo2013265921",5237],[8,"GetDistinctMut",5725],[8,"AssociatedValue",5725],[8,"AsTotalOrd",5725],[8,"PartialOrdExt",5725],[8,"SerdeByteStr",5725],[8,"CharConvertTryFrom",5725],[8,"CharConvertTryInto",5725],[8,"IterPrint",5725],[4,"LcaMonoidDefaultId",6079]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":"AAAAAAAAAAAAAAAAAAACCCCFCCCFCFCCCFFCCCCFCCCCFCCCCCFCCCCFCFCCCFFCFCCCCFCCCCFCCCCCCCFAAAACCFFCCFCCCCFFCCFAAAAAAAAAAAAAAAAAAAAAAACCCCCFFCCCCFCCCCCFCFCFCCFFCCCFCCCCFCCFCCCFCCCCFCCFCCFCCFCCCFCCFCCCCCFCFCCFCCCCFCFCFAAFFAAACFCFCCCFF","n":["datastructure","graph","math","sample","string","deque_operate_all_composite","dynamic_sequence_range_affine_range_sum","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_chmin_chmax_add_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","DequeAggregation","LinearOperation","MInt","MInt998244353","deque_operate_all_composite","MInt998244353","RangeSumRangeLinear","SplaySequence","dynamic_sequence_range_affine_range_sum","LineSet","line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","LazySegmentTree","RangeChminChmaxAdd","RangeSumRangeChminChmaxAdd","Saturating","range_chmin_chmax_add_range_sum","WaveletMatrix","range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","UnionFind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","bitwise_and_convolution","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","gcd_convolution","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","lcm_convolution","log_of_formal_power_series","min_of_mod_of_linear","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","subset_convolution","sum_of_floor_of_linear","two_sat","AddMulOperation","BitwiseandConvolve","BitwiseorConvolve","ConvolveSteps","MInt998244353","bitwise_and_convolution","bitwise_or_convolution","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","Convolve","ConvolveSteps","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","PrimeList","enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","factorize","prime_factors_flatten","MInt998244353","berlekamp_massey","find_linear_recurrence","AddMulOperation","ConvolveSteps","GcdConvolve","MInt998244353","gcd_convolution","Fps998244353","MInt998244353","inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","AddMulOperation","ConvolveSteps","LcmConvolve","MInt998244353","lcm_convolution","Fps998244353","MInt998244353","log_of_formal_power_series","binary_search","floor_sum_range_freq","min_of_mod_of_linear","Fps998244353","MInt998244353","multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","DynMIntU32","sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","AddMulOperation","ConvolveSteps","MInt998244353","SubsetConvolve","subset_convolution","floor_sum","sum_of_floor_of_linear","TwoSatisfiability","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","SuffixArray","suffixarray","Mersenne61x1","RollingHasher","Zarray","zalgorithm","zalgorithm_rolling_hash"],"q":[[0,"library_checker"],[5,"library_checker::datastructure"],[19,"library_checker::datastructure::deque_operate_all_composite"],[24,"library_checker::datastructure::dynamic_sequence_range_affine_range_sum"],[28,"library_checker::datastructure::line_add_get_min"],[30,"library_checker::datastructure::point_add_range_sum"],[35,"library_checker::datastructure::point_set_range_composite"],[40,"library_checker::datastructure::queue_operate_all_composite"],[45,"library_checker::datastructure::range_affine_range_sum"],[51,"library_checker::datastructure::range_chmin_chmax_add_range_sum"],[56,"library_checker::datastructure::range_kth_smallest"],[58,"library_checker::datastructure::staticrmq"],[63,"library_checker::datastructure::unionfind"],[65,"library_checker::datastructure::vertex_add_path_sum"],[70,"library_checker::datastructure::vertex_add_subtree_sum"],[75,"library_checker::datastructure::vertex_set_path_composite"],[83,"library_checker::graph"],[87,"library_checker::graph::bipartitematching"],[91,"library_checker::graph::directedmst"],[94,"library_checker::graph::lca"],[100,"library_checker::graph::scc"],[103,"library_checker::math"],[126,"library_checker::math::bitwise_and_convolution"],[133,"library_checker::math::convolution_mod"],[138,"library_checker::math::convolution_mod_1000000007"],[144,"library_checker::math::discrete_logarithm_mod"],[146,"library_checker::math::enumerate_primes"],[148,"library_checker::math::exp_of_formal_power_series"],[151,"library_checker::math::factorize"],[153,"library_checker::math::find_linear_recurrence"],[156,"library_checker::math::gcd_convolution"],[161,"library_checker::math::inv_of_formal_power_series"],[164,"library_checker::math::kth_term_of_linearly_recurrent_sequence"],[168,"library_checker::math::lcm_convolution"],[173,"library_checker::math::log_of_formal_power_series"],[176,"library_checker::math::min_of_mod_of_linear"],[179,"library_checker::math::multipoint_evaluation"],[182,"library_checker::math::polynomial_taylor_shift"],[186,"library_checker::math::pow_of_formal_power_series"],[189,"library_checker::math::sharp_p_subset_sum"],[195,"library_checker::math::sqrt_mod"],[197,"library_checker::math::sqrt_of_formal_power_series"],[200,"library_checker::math::subset_convolution"],[205,"library_checker::math::sum_of_floor_of_linear"],[207,"library_checker::math::two_sat"],[209,"library_checker::sample"],[211,"library_checker::sample::aplusb"],[212,"library_checker::sample::many_aplusb"],[213,"library_checker::string"],[216,"library_checker::string::number_of_substrings"],[218,"library_checker::string::suffixarray"],[220,"library_checker::string::zalgorithm"],[225,"std::io"],[226,"std::io"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","✅  AC  40ms","","","","✅  AC  2168ms","","✅  AC  394ms","","","","✅  AC  88ms","✅  AC  151ms","","","","","✅  AC  185ms","","","","","✅  AC  38ms","","","","","","✅  AC  828ms","","","","","✅  AC  1460ms","","✅  AC  340ms","","","","✅  AC  153ms","✅  AC  153ms","","✅  AC  81ms","","","","","✅  AC  520ms","","","","","✅  AC  189ms","","","","","","","","✅  AC  209ms","","","","","","","✅  AC  122ms","✅  AC  916ms","","","✅  AC  155ms","","","","","✅  AC  779ms","✅  AC  460ms","","","✅  AC  152ms","","","","","","","","","","","","","","","","","","","","","","","","","","","","","✅  AC  130ms","✅  AC  135ms","","","","","✅  AC  160ms","","","","","","✅  AC  358ms","","✅  AC  3ms","","✅  AC  1374ms","","","✅  AC  476ms","✅  AC  85ms","","","","✅  AC  87ms","","","","","✅  AC  150ms","","","✅  AC  123ms","","","","✅  AC  1378ms","","","","","✅  AC  171ms","","","✅  AC  189ms","","","✅  AC  1324ms","","","✅  AC  476ms","","","","✅  AC  118ms","","","✅  AC  642ms","","","","","","✅  AC  602ms","","✅  AC  96ms","","","✅  AC  299ms","","","","","✅  AC  1075ms","","✅  AC  36ms","","✅  AC  215ms","","","✅  AC  0ms","✅  AC  134ms","","","","","✅  AC  1432ms","","✅  AC  2130ms","","","","✅  AC  24ms","✅  AC  125ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],1,2,3],0,0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,0,0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,0,0,0,0,[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,0,0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,0,0,0,0,0,0,[[-1,-2],1,2,3],0,0,0,0,0,0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,0,0,0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,0,0,[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,0,[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,0,0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,0,[[-1,-2],1,2,3],[[-1,-2],1,2,3],0,0,0,0,[[-1,-2],1,2,3],0,[[-1,-2],1,2,3],0,0,0,[[-1,-2],1,2,3],[[-1,-2],1,2,3]],"c":[],"p":[[15,"tuple"],[8,"Read",225],[8,"Write",225]],"a":{"verify":[23,27,29,33,34,39,44,50,55,57,61,62,64,69,74,82,89,90,93,98,99,102,131,132,137,143,145,147,150,151,155,160,163,167,172,175,178,181,185,188,194,196,199,204,206,208,211,212,217,219,223,224]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
