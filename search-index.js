var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","i":[[0,"dpl","aizu_online_judge","Discrete Optimization Problems",null,null],[0,"dpl_1_a","aizu_online_judge::dpl","Coin Changing Problem",null,null],[5,"dpl_1_a","aizu_online_judge::dpl::dpl_1_a","✅  AC  3ms",null,[[]]],[0,"dpl_1_b","aizu_online_judge::dpl","0-1 Knapsack Problem",null,null],[5,"dpl_1_b","aizu_online_judge::dpl::dpl_1_b","✅  AC  2ms",null,[[]]],[0,"dpl_1_c","aizu_online_judge::dpl","Knapsack Problem",null,null],[5,"dpl_1_c","aizu_online_judge::dpl::dpl_1_c","✅  AC  3ms",null,[[]]],[0,"dpl_1_d","aizu_online_judge::dpl","Longest Increasing Subsequence",null,null],[5,"dpl_1_d","aizu_online_judge::dpl::dpl_1_d","✅  AC  8ms",null,[[]]],[0,"dpl_1_e","aizu_online_judge::dpl","Edit Distance (Levenshtein Distance)",null,null],[5,"dpl_1_e","aizu_online_judge::dpl::dpl_1_e","✅  AC  8ms",null,[[]]],[0,"dpl_1_f","aizu_online_judge::dpl","0-1 Knapsack Problem II",null,null],[5,"dpl_1_f","aizu_online_judge::dpl::dpl_1_f","✅  AC  1ms",null,[[]]],[0,"dpl_1_g","aizu_online_judge::dpl","Knapsack Problem with Limitations",null,null],[5,"dpl_1_g","aizu_online_judge::dpl::dpl_1_g","✅  AC  8ms",null,[[]]],[0,"dpl_1_h","aizu_online_judge::dpl","Huge Knapsack Problem",null,null],[5,"dpl_1_h","aizu_online_judge::dpl::dpl_1_h","✅  AC  76ms",null,[[]]],[0,"dpl_1_i","aizu_online_judge::dpl","Knapsack Problem with Limitations II",null,null],[5,"dpl_1_i","aizu_online_judge::dpl::dpl_1_i","✅  AC  0ms",null,[[]]],[0,"dpl_3_a","aizu_online_judge::dpl","Largest Square",null,null],[5,"dpl_3_a","aizu_online_judge::dpl::dpl_3_a","✅  AC  35ms",null,[[]]],[0,"dpl_3_b","aizu_online_judge::dpl","Largest Rectangle",null,null],[5,"dpl_3_b","aizu_online_judge::dpl::dpl_3_b","✅  AC  21ms",null,[[]]],[0,"dpl_3_c","aizu_online_judge::dpl","Largest Rectangle in a Histogram",null,null],[5,"dpl_3_c","aizu_online_judge::dpl::dpl_3_c","✅  AC  4ms",null,[[]]],[0,"dsl","aizu_online_judge","Data Sets and Queries",null,null],[0,"dsl_1_a","aizu_online_judge::dsl","Disjoint Set: Union Find Tree",null,null],[5,"dsl_1_a","aizu_online_judge::dsl::dsl_1_a","✅  AC  7ms",null,[[]]],[0,"dsl_1_b","aizu_online_judge::dsl","Weighted Union Find Trees",null,null],[5,"dsl_1_b","aizu_online_judge::dsl::dsl_1_b","✅  AC  23ms",null,[[]]],[0,"dsl_2_a","aizu_online_judge::dsl","Range Minimum Query (RMQ)",null,null],[5,"dsl_2_a","aizu_online_judge::dsl::dsl_2_a","✅  AC  18ms",null,[[]]],[0,"dsl_2_b","aizu_online_judge::dsl","Range Sum Query",null,null],[5,"dsl_2_b","aizu_online_judge::dsl::dsl_2_b","✅  AC  18ms",null,[[]]],[0,"dsl_2_c","aizu_online_judge::dsl","Range Search (kD Tree)",null,null],[5,"dsl_2_c","aizu_online_judge::dsl::dsl_2_c","✅  AC  499ms",null,[[]]],[0,"dsl_2_d","aizu_online_judge::dsl","Range Update Query (RUQ)",null,null],[5,"dsl_2_d","aizu_online_judge::dsl::dsl_2_d","✅  AC  44ms",null,[[]]],[0,"dsl_2_e","aizu_online_judge::dsl","Range Add Query (RAQ)",null,null],[5,"dsl_2_e","aizu_online_judge::dsl::dsl_2_e","✅  AC  41ms",null,[[]]],[0,"dsl_2_f","aizu_online_judge::dsl","RMQ and RUQ",null,null],[5,"dsl_2_f","aizu_online_judge::dsl::dsl_2_f","✅  AC  42ms",null,[[]]],[0,"dsl_2_g","aizu_online_judge::dsl","RSQ and RAQ",null,null],[5,"dsl_2_g","aizu_online_judge::dsl::dsl_2_g","✅  AC  53ms",null,[[]]],[0,"dsl_2_h","aizu_online_judge::dsl","RMQ and RAQ",null,null],[5,"dsl_2_h","aizu_online_judge::dsl::dsl_2_h","✅  AC  49ms",null,[[]]],[0,"dsl_2_i","aizu_online_judge::dsl","RSQ and RUQ",null,null],[5,"dsl_2_i","aizu_online_judge::dsl::dsl_2_i","✅  AC  79ms",null,[[]]],[0,"dsl_3_a","aizu_online_judge::dsl","The Smallest Window I",null,null],[5,"dsl_3_a","aizu_online_judge::dsl::dsl_3_a","✅  AC  4ms",null,[[]]],[0,"dsl_3_b","aizu_online_judge::dsl","The Smallest Window II",null,null],[5,"dsl_3_b","aizu_online_judge::dsl::dsl_3_b","✅  AC  6ms",null,[[]]],[0,"dsl_3_c","aizu_online_judge::dsl","The Number of Windows",null,null],[5,"dsl_3_c","aizu_online_judge::dsl::dsl_3_c","✅  AC  262ms",null,[[]]],[0,"dsl_3_d","aizu_online_judge::dsl","Sliding Minimum Element",null,null],[5,"dsl_3_d","aizu_online_judge::dsl::dsl_3_d","✅  AC  159ms",null,[[]]],[0,"dsl_4_a","aizu_online_judge::dsl","Union of Rectangles",null,null],[5,"dsl_4_a","aizu_online_judge::dsl::dsl_4_a","✅  AC  73ms",null,[[]]],[0,"dsl_5_a","aizu_online_judge::dsl","The Maximum Number of Customers",null,null],[5,"dsl_5_a","aizu_online_judge::dsl::dsl_5_a","✅  AC  6ms",null,[[]]],[0,"dsl_5_b","aizu_online_judge::dsl","The Maximum Number of Overlaps",null,null],[5,"dsl_5_b","aizu_online_judge::dsl::dsl_5_b","✅  AC  10ms",null,[[]]],[0,"grl","aizu_online_judge","Graph Algorithms",null,null],[0,"grl_1_a","aizu_online_judge::grl","Single Source Shortest Path",null,null],[5,"grl_1_a","aizu_online_judge::grl::grl_1_a","✅  AC  74ms",null,[[]]],[0,"grl_1_b","aizu_online_judge::grl","Single Source Shortest Path (Negative Edges)",null,null],[5,"grl_1_b","aizu_online_judge::grl::grl_1_b","✅  AC  7ms",null,[[]]],[0,"grl_1_c","aizu_online_judge::grl","All Pairs Shortest Path",null,null],[5,"grl_1_c","aizu_online_judge::grl::grl_1_c","✅  AC  7ms",null,[[]]],[0,"grl_2_a","aizu_online_judge::grl","Minimum Spanning Tree",null,null],[5,"grl_2_a","aizu_online_judge::grl::grl_2_a","✅  AC  27ms",null,[[]]],[0,"grl_2_b","aizu_online_judge::grl","Minimum-Cost Arborescence",null,null],[5,"grl_2_b","aizu_online_judge::grl::grl_2_b","✅  AC  0ms",null,[[]]],[0,"grl_3_a","aizu_online_judge::grl","Articulation Points",null,null],[5,"grl_3_a","aizu_online_judge::grl::grl_3_a","✅  AC  4ms",null,[[]]],[0,"grl_3_b","aizu_online_judge::grl","Bridges",null,null],[5,"grl_3_b","aizu_online_judge::grl::grl_3_b","✅  AC  4ms",null,[[]]],[0,"grl_3_c","aizu_online_judge::grl","Strongly Connected Components",null,null],[5,"grl_3_c","aizu_online_judge::grl::grl_3_c","✅  AC  9ms",null,[[]]],[0,"grl_4_a","aizu_online_judge::grl","Cycle Detection for a Directed Graph",null,null],[5,"grl_4_a","aizu_online_judge::grl::grl_4_a","✅  AC  0ms",null,[[]]],[0,"grl_4_b","aizu_online_judge::grl","Topological Sort",null,null],[5,"grl_4_b","aizu_online_judge::grl::grl_4_b","✅  AC  3ms",null,[[]]],[5,"judge_grl_4_b","","",null,[[],["bool",15]]],[0,"grl_5_a","aizu_online_judge::grl","Diameter of a Tree",null,null],[5,"grl_5_a","aizu_online_judge::grl::grl_5_a","✅  AC  11ms",null,[[]]],[0,"grl_5_b","aizu_online_judge::grl","Height of a Tree",null,null],[5,"grl_5_b","aizu_online_judge::grl::grl_5_b","✅  AC  4ms",null,[[]]],[0,"grl_5_c","aizu_online_judge::grl","Lowest Common Ancestor",null,null],[5,"grl_5_c","aizu_online_judge::grl::grl_5_c","✅  AC  78ms",null,[[]]],[0,"grl_5_d","aizu_online_judge::grl","Range Query on a Tree",null,null],[5,"grl_5_d","aizu_online_judge::grl::grl_5_d","✅  AC  56ms",null,[[]]],[0,"grl_5_e","aizu_online_judge::grl","Range Query on a Tree II",null,null],[5,"grl_5_e","aizu_online_judge::grl::grl_5_e","✅  AC  144ms",null,[[]]],[0,"grl_6_a","aizu_online_judge::grl","Maximum Flow",null,null],[5,"grl_6_a","aizu_online_judge::grl::grl_6_a","✅  AC  0ms",null,[[]]],[0,"grl_6_b","aizu_online_judge::grl","Minimum Cost Flow",null,null],[5,"grl_6_b","aizu_online_judge::grl::grl_6_b","✅  AC  0ms",null,[[]]],[0,"grl_7_a","aizu_online_judge::grl","Bipartite Matching",null,null],[5,"grl_7_a","aizu_online_judge::grl::grl_7_a","✅  AC  1ms",null,[[]]],[0,"itp1","aizu_online_judge","Introduction to Programming I",null,null],[0,"itp1_1_a","aizu_online_judge::itp1","Hello World",null,null],[5,"itp1_1_a","aizu_online_judge::itp1::itp1_1_a","✅  AC  0ms",null,[[]]]],"p":[],"a":{"verify":[2,4,6,8,10,12,14,16,18,20,22,24,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,64,66,68,70,72,74,76,78,80,82,85,87,89,91,93,95,97,99,102]}},\
"competitive":{"doc":"github","i":[[0,"algebra","competitive","algebra",null,null],[8,"Magma","competitive::algebra","binary operaion: $T \\\\circ T \\\\to T$",null,null],[16,"T","","type of operands: $T$",0,null],[10,"operate","","binary operaion: $\\\\circ$",0,[[]]],[11,"reverse_operate","","",0,[[]]],[8,"Associative","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …",null,null],[8,"SemiGroup","","associative binary operation",null,null],[8,"Unital","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e …",null,null],[10,"unit","","identity element: $e$",1,[[]]],[8,"Monoid","","associative binary operation and an identity element",null,null],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",2,[[["usize",15]]]],[8,"Invertible","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …",null,null],[10,"inverse","","$a$ where $a \\\\circ x = e$",3,[[]]],[11,"rinv_operate","","",3,[[]]],[8,"Group","","associative binary operation and an identity element and …",null,null],[8,"Commutative","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$",null,null],[8,"AbelianMonoid","","commutative monoid",null,null],[8,"AbelianGroup","","commutative group",null,null],[8,"Idempotent","","$\\\\forall a \\\\in T, a \\\\circ a = a$",null,null],[8,"IdempotentMonoid","","idempotent monoid",null,null],[3,"MaxOperation","","binary operation to select larger element",null,null],[3,"MinOperation","","binary operation to select smaller element",null,null],[3,"FirstOperation","","retain the first element",null,null],[3,"LastOperation","","retain the last element",null,null],[3,"AdditiveOperation","","$+$",null,null],[3,"MultiplicativeOperation","","$\\\\times$",null,null],[3,"LinearOperation","","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …",null,null],[3,"BitAndOperation","","&",null,null],[8,"BitAndIdentity","","",null,null],[10,"all_one","","",4,[[]]],[3,"BitOrOperation","","|",null,null],[8,"BitOrIdentity","","",null,null],[10,"all_zero","","",5,[[]]],[3,"BitXorOperation","","^",null,null],[8,"BitXorIdentity","","",null,null],[10,"xor_zero","","",6,[[]]],[3,"MonoidalOperation","","",null,null],[3,"GroupOperation","","",null,null],[3,"AssocoativeOperator","","",null,null],[3,"AbsorbedAssocoativeOperator","","",null,null],[3,"CartesianOperation","","$(M_1, M_2)$",null,null],[3,"CountingOperation","","",null,null],[3,"ReverseOperation","","",null,null],[3,"Top2Operation","","",null,null],[3,"PermutationOperation","","",null,null],[0,"algorithm","competitive","algorithm",null,null],[3,"BitDp","competitive::algorithm","",null,null],[12,"0","","",7,null],[5,"product","","choose <code>r</code> elements from <code>n</code> independently",null,[[["usize",15]]]],[5,"permutations","","choose distinct <code>r</code> elements from <code>n</code> in any order",null,[[["usize",15]]]],[5,"combinations","","choose distinct <code>r</code> elements from <code>n</code> in sorted order",null,[[["usize",15]]]],[5,"combinations_with_replacement","","choose <code>r</code> elements from <code>n</code> in sorted order",null,[[["usize",15]]]],[3,"ChtLine","","",null,null],[3,"ConvexHullTrick","","",null,null],[8,"MoSolver","","",null,null],[16,"Answer","","",8,null],[10,"insert","","",8,[[["usize",15]]]],[10,"remove","","",8,[[["usize",15]]]],[10,"answer","","",8,[[]]],[11,"mo_solve","","",8,[[["usize",15]]]],[5,"run_length_encoding","","return: [(start, length)]",null,[[],["vec",3]]],[5,"floor_kernel","","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$",null,[[["usize",15]],[["usize",15],["vec",3]]]],[3,"RhoPath","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$",null,null],[12,"f","","",9,null],[12,"g","","",9,null],[8,"Bisect","","binary search helper",null,null],[10,"halve","","return between two elements",10,[[]]],[10,"section_end","","the end condition of binary search",10,[[],["bool",15]]],[5,"binary_search","","binary search for monotone segment",null,[[]]],[8,"SliceBisectExt","","binary search for slice",null,null],[10,"find_bisect","","Returns the first element that satisfies a predicate.",11,[[],["option",4]]],[10,"rfind_bisect","","Returns the last element that satisfies a predicate.",11,[[],["option",4]]],[10,"position_bisect","","Returns the first index that satisfies a predicate. if …",11,[[],["usize",15]]],[10,"rposition_bisect","","Returns the last index+1 that satisfies a predicate. if …",11,[[],["usize",15]]],[8,"Trisect","","ternary search helper",null,null],[10,"next_section","","Divide into 3 sections",12,[[]]],[10,"section_end","","the end condition of ternary search",12,[[],["bool",15]]],[5,"ternary_search","","like <code>(left..right).min_by_key(f)</code>",null,[[]]],[5,"slide_minimum","","",null,[[["usize",15]],[["usize",15],["vec",3]]]],[3,"SlideMinimum","","",null,null],[3,"SubsetTransform","","",null,null],[3,"SupersetTransform","","",null,null],[3,"DivisorTransform","","",null,null],[3,"MultipleTransform","","",null,null],[0,"combinatorial_optimization","competitive","",null,null],[3,"KnapsackPloblemSmallWeight","competitive::combinatorial_optimization","",null,null],[12,"dp","","",13,null],[3,"KnapsackPloblemSmallValue","","",null,null],[12,"dp","","",14,null],[3,"ZeroOneKnapsackProblemSmallItems","","",null,null],[3,"ZeroOneKnapsackPloblemBranchAndBound","","",null,null],[5,"largest_square","","",null,[[["usize",15]],["usize",15]]],[5,"largest_rectangle","","",null,[[],["usize",15]]],[5,"largest_rectangle_in_grid","","",null,[[["usize",15]],["usize",15]]],[5,"levenshtein_distance","","",null,[[],["usize",15]]],[3,"LongestIncreasingSubsequence","","",null,null],[12,"dp","","",15,null],[0,"data_structure","competitive","data structures",null,null],[8,"Automaton","competitive::data_structure","",null,null],[16,"Alphabet","","",16,null],[16,"State","","",16,null],[16,"Effect","","",16,null],[10,"initial","","",16,[[]]],[10,"next","","",16,[[],["option",4]]],[10,"accept","","",16,[[],["bool",15]]],[5,"automaton_dp","","",null,[[["usize",15]]]],[3,"IntersectionAutomaton","","",null,null],[3,"UnionAutomaton","","",null,null],[3,"ProductAutomaton","","",null,null],[3,"LessThanAutomaton","","",null,null],[3,"GreaterThanAutomaton","","",null,null],[3,"ContainAutomaton","","",null,null],[3,"ContainCounterAutomaton","","",null,null],[3,"AlwaysAcceptingAutomaton","","",null,null],[3,"BinaryIndexedTree","","",null,null],[3,"BinaryIndexedTree2D","","",null,null],[8,"RankSelectDictionaries","","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1",null,null],[10,"bit_length","","",17,[[],["usize",15]]],[10,"access","","get k-th bit",17,[[["usize",15]],["bool",15]]],[11,"rank1","","the number of 1 in [0, k)",17,[[["usize",15]],["usize",15]]],[11,"rank0","","the number of 0 in [0, k)",17,[[["usize",15]],["usize",15]]],[11,"select1","","index of k-th 1",17,[[["usize",15]],[["usize",15],["option",4]]]],[11,"select0","","index of k-th 0",17,[[["usize",15]],[["usize",15],["option",4]]]],[3,"BitVector","","",null,null],[3,"BitSet","","",null,null],[3,"DisjointSparseTable","","",null,null],[3,"Static2DTree","","",null,null],[3,"LazySegmentTree","","M: folding Monoid E: lazy Monoid F: lazy evaluating",null,null],[3,"LazySegmentTreeMap","","",null,null],[3,"RangeArithmeticProgressionAdd","","",null,null],[12,"dd","","",18,null],[3,"SegmentTree","","",null,null],[3,"SegmentTreeMap","","",null,null],[3,"DequeAggregation","","",null,null],[3,"QueueAggregation","","",null,null],[3,"Trie","","",null,null],[3,"UnionFind","","",null,null],[3,"WeightedUnionFind","","",null,null],[3,"MergingUnionFind","","",null,null],[3,"WaveletMatrix","","",null,null],[0,"geometry","competitive","",null,null],[3,"Circle","competitive::geometry","",null,null],[5,"closest_pair","","",null,[[["point",6],["vec",3]],["f64",15]]],[3,"Line","","",null,null],[3,"LineSegment","","",null,null],[5,"convex_diameter","","",null,[[["point",6],["vec",3]],["f64",15]]],[5,"convex_hull","","",null,[[["point",6],["vec",3]],[["point",6],["vec",3]]]],[6,"Point","","",null,null],[17,"EPS","","",null,null],[3,"Real","","",null,null],[12,"0","","",19,null],[4,"Ccw","","",null,null],[13,"OnlineFront","","a–b–c",20,null],[13,"Clockwise","","a–b-vc",20,null],[13,"OnSegment","","a–c–b",20,null],[13,"CounterClockwise","","a–b-^c",20,null],[13,"OnlineBack","","c–a–b",20,null],[11,"ccw","","",20,[[["point",6]]]],[0,"graph","competitive","graph structures and algorithms",null,null],[0,"adjacency_list_graph","competitive::graph","",null,null],[3,"Adjacency","competitive::graph::adjacency_list_graph","",null,null],[12,"id","","",21,null],[12,"to","","",21,null],[3,"AdjacencyListGraph","","",null,null],[12,"vsize","","",22,null],[12,"esize","","",22,null],[12,"graph","","",22,null],[3,"AdjacencyListGraphScanner","","",null,null],[0,"edge_list_graph","competitive::graph","",null,null],[3,"EdgeListGraph","competitive::graph::edge_list_graph","Graph represented by a list of edges.",null,null],[3,"EdgeListGraphScanner","","",null,null],[0,"grid_graph","competitive::graph","",null,null],[3,"GridGraph","competitive::graph::grid_graph","",null,null],[3,"Adjacency4","","",null,null],[3,"Adjacency8","","",null,null],[0,"sparse_graph","competitive::graph","",null,null],[3,"DirectedEdge","competitive::graph::sparse_graph","",null,null],[3,"UndirectedEdge","","",null,null],[3,"BidirectionalEdge","","",null,null],[3,"Adjacency","","",null,null],[12,"id","","",23,null],[12,"to","","",23,null],[3,"SparseGraph","","Static Sparse Graph represented as Compressed Sparse Row.",null,null],[12,"start","","",24,null],[12,"elist","","",24,null],[12,"edges","","",24,null],[8,"SparseGraphConstruction","","",null,null],[10,"construct_graph","","",25,[[["usize",15],["vec",3]],["sparsegraph",3]]],[6,"DirectedSparseGraph","","",null,null],[6,"UndirectedSparseGraph","","",null,null],[6,"BidirectionalSparseGraph","","",null,null],[3,"SparseGraphScanner","","",null,null],[6,"DirectedGraphScanner","","",null,null],[6,"UndirectedGraphScanner","","",null,null],[6,"BidirectionalGraphScanner","","",null,null],[3,"TreeGraphScanner","","",null,null],[3,"AdjacencyListGraph","competitive::graph","",null,null],[12,"vsize","","",22,null],[12,"esize","","",22,null],[12,"graph","","",22,null],[3,"AdjacencyListGraphScanner","","",null,null],[3,"EdgeListGraph","","Graph represented by a list of edges.",null,null],[3,"EdgeListGraphScanner","","",null,null],[3,"GridGraph","","",null,null],[3,"LowLink","","",null,null],[12,"low","","",26,null],[12,"ord","","",26,null],[12,"articulation","","",26,null],[12,"bridge","","",26,null],[3,"DinicBuilder","","",null,null],[3,"Dinic","","",null,null],[3,"PrimalDualBuilder","","",null,null],[3,"PrimalDual","","",null,null],[3,"Adjacency","","",null,null],[12,"id","","",23,null],[12,"to","","",23,null],[6,"BidirectionalGraphScanner","","",null,null],[6,"BidirectionalSparseGraph","","",null,null],[6,"DirectedGraphScanner","","",null,null],[6,"DirectedSparseGraph","","",null,null],[3,"SparseGraph","","Static Sparse Graph represented as Compressed Sparse Row.",null,null],[12,"start","","",24,null],[12,"elist","","",24,null],[12,"edges","","",24,null],[3,"TreeGraphScanner","","",null,null],[6,"UndirectedGraphScanner","","",null,null],[6,"UndirectedSparseGraph","","",null,null],[3,"StronglyConnectedComponent","","",null,null],[3,"TwoSatisfiability","","",null,null],[0,"math","competitive","mathematical datas",null,null],[3,"MemorizedFactorial","competitive::math","",null,null],[12,"fact","","",27,null],[12,"inv_fact","","",27,null],[3,"SmallModMemorizedFactorial","","",null,null],[5,"fast_fourier_transform","","",null,[[["bool",15],["complex",3],["vec",3]],[["complex",3],["vec",3]]]],[5,"convolve_i64","","",null,[[["i64",15],["vec",3]],[["i64",15],["vec",3]]]],[3,"FormalPowerSeries","","",null,null],[12,"data","","",28,null],[6,"Fps998244353","","",null,null],[6,"Fps","","",null,null],[8,"FormalPowerSeriesCoefficient","","",null,null],[8,"FormalPowerSeriesMultiplier","","",null,null],[16,"T","","",29,null],[10,"convolve","","",29,[[["formalpowerseries",3]],["formalpowerseries",3]]],[3,"DefaultFormalPowerSeriesMultiplier","","",null,null],[8,"FormalPowerSeriesCoefficientSqrt","","",null,null],[10,"sqrt_coefficient","","",30,[[],["option",4]]],[5,"gcd","","",null,[[["u64",15]],["u64",15]]],[5,"gcd_binary","","",null,[[["u64",15]],["u64",15]]],[5,"lcm","","",null,[[["u64",15]],["u64",15]]],[5,"extgcd","","",null,[[["i64",15]]]],[5,"extgcd_loop","","",null,[[["i64",15]]]],[5,"extgcd_binary","","",null,[[["i64",15]]]],[5,"modinv","","",null,[[["i64",15]],["i64",15]]],[5,"modinv_loop","","",null,[[["i64",15]],["i64",15]]],[5,"modinv_extgcd_binary","","0 < a < p, gcd(a, p) == 1, p is prime > 2",null,[[["u64",15]],["u64",15]]],[5,"lagrange_interpolation","","",null,[[["mintbase",8],["mint",3]],[["mintbase",8],["mint",3]]]],[5,"lagrange_interpolation_polynomial","","",null,[[],[["mint",3],["vec",3]]]],[3,"Matrix","","",null,null],[12,"shape","","",31,null],[12,"data","","",31,null],[3,"NumberTheoreticTransform","","",null,null],[8,"NttModulus","","",null,null],[10,"primitive_root","","",32,[[],["usize",15]]],[6,"Ntt998244353","","",null,null],[5,"convolve2","","max(a.len(), b.len()) * max(a) * max(b) < 3.64 * 10^18",null,[[["vec",3]],[["vec",3],["u64",15]]]],[5,"convolve3","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],[["mint",3],["vec",3]]]],[5,"convolve3_128","","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27",null,[[["vec",3]],[["u128",15],["vec",3]]]],[5,"binary_exponentiation","","",null,[[["usize",15],["clone",8],["mulassign",8]],[["clone",8],["mulassign",8]]]],[3,"BabyStepGiantStep","","",null,null],[5,"floor_sum","","Sum of Floor of Linear",null,[[["u64",15]],["u64",15]]],[5,"linear_congruence","","return: (y,z)",null,[[],["option",4]]],[3,"Polynomial","","",null,null],[12,"data","","",33,null],[3,"PrimeTable","","",null,null],[5,"prime_factors","","",null,[[["usize",15]],["vec",3]]],[5,"divisors","","",null,[[["usize",15]],[["usize",15],["vec",3]]]],[5,"primes","","",null,[[["usize",15]],[["usize",15],["vec",3]]]],[5,"pow","","",null,[[["u64",15]],["u64",15]]],[5,"miller_rabin","","",null,[[["u64",15]],["bool",15]]],[5,"find_factor","","",null,[[["u64",15]],["u64",15]]],[5,"prime_factors_rho","","",null,[[["u64",15]],[["vec",3],["u64",15]]]],[5,"euler_phi","","",null,[[["usize",15]],["usize",15]]],[3,"EulerPhiTable","","",null,null],[5,"moebius","","g(d) = Sigma mu(d) * f(n/d)",null,[[["usize",15]],[["usize",15],["i64",15],["hashmap",3]]]],[5,"segmented_sieve_primes","","",null,[[["usize",15]],[["usize",15],["vec",3]]]],[0,"num","competitive","",null,null],[0,"mint_basic","competitive::num","",null,null],[3,"Modulo998244353","competitive::num::mint_basic","",null,null],[6,"MInt998244353","","",null,null],[3,"Modulo1000000007","","",null,null],[6,"MInt1000000007","","",null,null],[3,"Modulo1000000009","","",null,null],[6,"MInt1000000009","","",null,null],[3,"DynModuloU32","","",null,null],[6,"DynMIntU32","","",null,null],[3,"DynModuloU64","","",null,null],[6,"DynMIntU64","","",null,null],[3,"Modulo2","","",null,null],[6,"MInt2","","",null,null],[0,"montgomery","competitive::num","",null,null],[3,"Modulo998244353","competitive::num::montgomery","",null,null],[6,"MInt998244353","","",null,null],[8,"MontgomeryReduction32","","m is prime, n = 2^32",null,null],[10,"get_mod","","m",34,[[],["u32",15]]],[11,"r","","(-m)^{-1} mod n",34,[[],["u32",15]]],[10,"n1","","n^1 mod m",34,[[],["u32",15]]],[10,"n2","","n^2 mod m",34,[[],["u32",15]]],[10,"n3","","n^3 mod m",34,[[],["u32",15]]],[11,"reduce","","n^{-1}x = (x + (xr mod n)m) / n",34,[[["u64",15]],["u32",15]]],[8,"Bounded","competitive::num","Trait for max/min bounds",null,null],[10,"maximum","","",35,[[]]],[10,"minimum","","",35,[[]]],[3,"Complex","","",null,null],[12,"re","","",36,null],[12,"im","","",36,null],[3,"Saturating","","",null,null],[12,"0","","",37,null],[3,"MInt","","",null,null],[8,"MIntBase","","",null,null],[16,"Inner","","",38,null],[10,"get_mod","","",38,[[]]],[10,"mod_zero","","",38,[[]]],[10,"mod_one","","",38,[[]]],[10,"mod_add","","",38,[[]]],[10,"mod_sub","","",38,[[]]],[10,"mod_mul","","",38,[[]]],[10,"mod_div","","",38,[[]]],[10,"mod_neg","","",38,[[]]],[10,"mod_inv","","",38,[[]]],[11,"mod_pow","","",38,[[["usize",15]]]],[8,"MIntConvert","","",null,null],[10,"from","","",39,[[]]],[10,"into","","",39,[[]]],[10,"mod_into","","",39,[[]]],[3,"QuadDouble","","ref: https://na-inet.jp/na/qd_ja.pdf",null,null],[12,"0","","",40,null],[8,"Zero","","",null,null],[10,"zero","","",41,[[]]],[11,"is_zero","","",41,[[],["bool",15]]],[8,"One","","",null,null],[10,"one","","",42,[[]]],[11,"is_one","","",42,[[],["bool",15]]],[0,"string","competitive","string algorithems",null,null],[3,"KnuthMorrisPratt","competitive::string","",null,null],[3,"MultipleRollingHash","","",null,null],[3,"RollingHash","","",null,null],[3,"SuffixArray","","",null,null],[3,"Zarray","","",null,null],[0,"tools","competitive","",null,null],[3,"Counter","competitive::tools","",null,null],[3,"SimuratedAnnealing","","",null,null],[12,"iter_count","","",43,null],[12,"now","","",43,null],[12,"time","","",43,null],[12,"temperture","","",43,null],[12,"log_table","","",43,null],[12,"rand","","",43,null],[5,"echo","","",null,[[],["result",6]]],[3,"Xorshift","","",null,null],[3,"NotEmptySegment","","Left-close Right-open No Empty Segment",null,null],[12,"0","","",44,null],[3,"RandIter","","",null,null],[8,"RandomSpec","","Trait for spec of generating random value.",null,null],[10,"rand","","Return a random value.",45,[[["xorshift",3]]]],[11,"rand_iter","","Return an iterator that generates random values.",45,[[["xorshift",3]],["randiter",3]]],[5,"read_stdin_all","","",null,[[],["string",3]]],[5,"read_stdin_all_unchecked","","",null,[[],["string",3]]],[5,"read_all","","",null,[[],["string",3]]],[5,"read_all_unchecked","","",null,[[],["string",3]]],[8,"IterScan","","",null,null],[16,"Output","","",46,null],[10,"scan","","",46,[[],["option",4]]],[8,"MarkedIterScan","","",null,null],[16,"Output","","",47,null],[10,"mscan","","",47,[[],["option",4]]],[3,"Scanner","","",null,null],[3,"Usize1","","",null,null],[3,"CharWithBase","","",null,null],[12,"0","","",48,null],[3,"Chars","","",null,null],[3,"CharsWithBase","","",null,null],[12,"0","","",49,null],[3,"Collect","","",null,null],[8,"GetDistinctMut","","",null,null],[16,"Output","","",50,null],[10,"get_distinct_mut","","",50,[[]]],[3,"TotalOrd","","implement Ord by PartialOrd",null,null],[12,"0","","",51,null],[0,"prelude","competitive","",null,null],[5,"echo","competitive::prelude","",null,[[],["result",6]]],[5,"read_all_unchecked","","",null,[[],["string",3]]],[3,"Chars","","",null,null],[3,"Scanner","","",null,null],[3,"Usize1","","",null,null],[8,"Read","","The <code>Read</code> trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified …",52,[[],[["usize",15],["result",4],["error",3]]]],[11,"read_vectored","","Like <code>read</code>, except that it reads into a slice of buffers.",52,[[],[["usize",15],["result",4],["error",3]]]],[11,"is_read_vectored","","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …",52,[[],["bool",15]]],[11,"initializer","","Determines if this <code>Read</code>er can work with buffers of …",52,[[],["initializer",3]]],[11,"read_to_end","","Read all bytes until EOF in this source, placing them …",52,[[["vec",3]],[["usize",15],["result",4],["error",3]]]],[11,"read_to_string","","Read all bytes until EOF in this source, appending them …",52,[[["string",3]],[["usize",15],["result",4],["error",3]]]],[11,"read_exact","","Read the exact number of bytes required to fill <code>buf</code>.",52,[[],[["result",4],["error",3]]]],[11,"by_ref","","Creates a “by reference” adaptor for this instance of …",52,[[]]],[11,"bytes","","Transforms this <code>Read</code> instance to an [<code>Iterator</code>] over its …",52,[[],["bytes",3]]],[11,"chain","","Creates an adaptor which will chain this stream with …",52,[[],["chain",3]]],[11,"take","","Creates an adaptor which will read at most <code>limit</code> bytes …",52,[[["u64",15]],["take",3]]],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this writer, returning how many bytes …",53,[[],[["usize",15],["result",4],["error",3]]]],[11,"write_vectored","","Like <code>write</code>, except that it writes from a slice of buffers.",53,[[],[["usize",15],["result",4],["error",3]]]],[11,"is_write_vectored","","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …",53,[[],["bool",15]]],[10,"flush","","Flush this output stream, ensuring that all …",53,[[],[["result",4],["error",3]]]],[11,"write_all","","Attempts to write an entire buffer into this writer.",53,[[],[["result",4],["error",3]]]],[11,"write_all_vectored","","Attempts to write multiple buffers into this writer.",53,[[],[["result",4],["error",3]]]],[11,"write_fmt","","Writes a formatted string into this writer, returning any …",53,[[["arguments",3]],[["result",4],["error",3]]]],[11,"by_ref","","Creates a “by reference” adaptor for this instance of …",53,[[]]],[0,"tree","competitive","tree algorithems",null,null],[11,"tree_depth","competitive::graph::sparse_graph","",24,[[["usize",15]],[["vec",3],["u64",15]]]],[11,"tree_depth","competitive::tree::depth","",54,[[["usize",15]],[["vec",3],["u64",15]]]],[11,"weighted_tree_depth","competitive::graph::sparse_graph","",24,[[["usize",15],["monoid",8],["fn",8]],["vec",3]]],[11,"weighted_tree_depth","competitive::tree::depth","",54,[[["usize",15],["monoid",8],["fn",8]],["vec",3]]],[11,"tree_size","competitive::graph::sparse_graph","",24,[[["usize",15]],[["vec",3],["u64",15]]]],[11,"tree_size","competitive::tree::depth","",54,[[["usize",15]],[["vec",3],["u64",15]]]],[11,"tree_order","competitive::graph::sparse_graph","(order, parents)",24,[[["usize",15]]]],[0,"impl_lcam","competitive::tree","",null,null],[3,"EulerTourForEdge","","",null,null],[12,"eidx","","",55,null],[12,"par","","",55,null],[3,"EulerTourForVertex","","",null,null],[12,"vidx","","",56,null],[3,"EulerTourForRichVertex","","",null,null],[3,"LowestCommonAncestor","","",null,null],[3,"LcaMonoid","","",null,null],[3,"HeavyLightDecomposition","","",null,null],[12,"par","","",57,null],[12,"vidx","","",57,null],[3,"ReRooting","","dynamic programming on all-rooted trees",null,null],[12,"dp","","dp[v]: result of v-rooted tree",58,null],[12,"ep","","ep[e]: result of e-subtree, if e >= n then …",58,null],[3,"TreeRec","","",null,null],[12,"n","","",59,null],[14,"monoid_fold","competitive","",null,null],[14,"impl_bitand_identity","","",null,null],[14,"impl_bitor_identity","","",null,null],[14,"impl_bitxor_identity","","",null,null],[14,"define_basic_mintbase","","",null,null],[14,"define_basic_mint32","","",null,null],[14,"comprehension","","",null,null],[14,"min","","",null,null],[14,"chmin","","",null,null],[14,"max","","",null,null],[14,"chmax","","",null,null],[14,"prepare_io","","",null,null],[14,"rand_value","","Return a random value using [<code>RandomSpec</code>].",null,null],[14,"rand","","Declare random values using [<code>RandomSpec</code>].",null,null],[14,"scan_value","","",null,null],[14,"scan","","",null,null],[11,"from","competitive::algebra","",60,[[]]],[11,"into","","",60,[[]]],[11,"to_owned","","",60,[[]]],[11,"clone_into","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"to_owned","","",61,[[]]],[11,"clone_into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"to_owned","","",62,[[]]],[11,"clone_into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","","",63,[[]]],[11,"into","","",63,[[]]],[11,"to_owned","","",63,[[]]],[11,"clone_into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","","",64,[[]]],[11,"into","","",64,[[]]],[11,"to_owned","","",64,[[]]],[11,"clone_into","","",64,[[]]],[11,"borrow","","",64,[[]]],[11,"borrow_mut","","",64,[[]]],[11,"try_from","","",64,[[],["result",4]]],[11,"try_into","","",64,[[],["result",4]]],[11,"type_id","","",64,[[],["typeid",3]]],[11,"from","","",65,[[]]],[11,"into","","",65,[[]]],[11,"to_owned","","",65,[[]]],[11,"clone_into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"from","","",66,[[]]],[11,"into","","",66,[[]]],[11,"to_owned","","",66,[[]]],[11,"clone_into","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"to_owned","","",67,[[]]],[11,"clone_into","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","","",68,[[]]],[11,"into","","",68,[[]]],[11,"to_owned","","",68,[[]]],[11,"clone_into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"to_owned","","",69,[[]]],[11,"clone_into","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"to_owned","","",70,[[]]],[11,"clone_into","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"to_owned","","",72,[[]]],[11,"clone_into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",73,[[]]],[11,"into","","",73,[[]]],[11,"to_owned","","",73,[[]]],[11,"clone_into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"to_owned","","",74,[[]]],[11,"clone_into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"to_owned","","",75,[[]]],[11,"clone_into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"to_owned","","",76,[[]]],[11,"clone_into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"to_owned","","",77,[[]]],[11,"clone_into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"to_owned","","",78,[[]]],[11,"clone_into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","competitive::algorithm","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",79,[[]]],[11,"into","","",79,[[]]],[11,"to_owned","","",79,[[]]],[11,"clone_into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","","",80,[[]]],[11,"into","","",80,[[]]],[11,"to_owned","","",80,[[]]],[11,"clone_into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",81,[[]]],[11,"into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",82,[[]]],[11,"into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","","",83,[[]]],[11,"into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","","",85,[[]]],[11,"into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","competitive::combinatorial_optimization","",13,[[]]],[11,"into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","","",86,[[]]],[11,"into","","",86,[[]]],[11,"to_owned","","",86,[[]]],[11,"clone_into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",87,[[]]],[11,"into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_owned","","",15,[[]]],[11,"clone_into","","",15,[[]]],[11,"borrow","","",15,[[]]],[11,"borrow_mut","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","competitive::data_structure","",88,[[]]],[11,"into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","","",89,[[]]],[11,"into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"to_owned","","",95,[[]]],[11,"clone_into","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"to_owned","","",96,[[]]],[11,"clone_into","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",97,[[]]],[11,"into","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",98,[[]]],[11,"into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","","",100,[[]]],[11,"into","","",100,[[]]],[11,"to_owned","","",100,[[]]],[11,"clone_into","","",100,[[]]],[11,"borrow","","",100,[[]]],[11,"borrow_mut","","",100,[[]]],[11,"try_from","","",100,[[],["result",4]]],[11,"try_into","","",100,[[],["result",4]]],[11,"type_id","","",100,[[],["typeid",3]]],[11,"from","","",101,[[]]],[11,"into","","",101,[[]]],[11,"borrow","","",101,[[]]],[11,"borrow_mut","","",101,[[]]],[11,"try_from","","",101,[[],["result",4]]],[11,"try_into","","",101,[[],["result",4]]],[11,"type_id","","",101,[[],["typeid",3]]],[11,"from","","",102,[[]]],[11,"into","","",102,[[]]],[11,"to_owned","","",102,[[]]],[11,"clone_into","","",102,[[]]],[11,"borrow","","",102,[[]]],[11,"borrow_mut","","",102,[[]]],[11,"try_from","","",102,[[],["result",4]]],[11,"try_into","","",102,[[],["result",4]]],[11,"type_id","","",102,[[],["typeid",3]]],[11,"from","","",103,[[]]],[11,"into","","",103,[[]]],[11,"to_owned","","",103,[[]]],[11,"clone_into","","",103,[[]]],[11,"borrow","","",103,[[]]],[11,"borrow_mut","","",103,[[]]],[11,"try_from","","",103,[[],["result",4]]],[11,"try_into","","",103,[[],["result",4]]],[11,"type_id","","",103,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_owned","","",18,[[]]],[11,"clone_into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",104,[[]]],[11,"into","","",104,[[]]],[11,"to_owned","","",104,[[]]],[11,"clone_into","","",104,[[]]],[11,"borrow","","",104,[[]]],[11,"borrow_mut","","",104,[[]]],[11,"try_from","","",104,[[],["result",4]]],[11,"try_into","","",104,[[],["result",4]]],[11,"type_id","","",104,[[],["typeid",3]]],[11,"from","","",105,[[]]],[11,"into","","",105,[[]]],[11,"to_owned","","",105,[[]]],[11,"clone_into","","",105,[[]]],[11,"borrow","","",105,[[]]],[11,"borrow_mut","","",105,[[]]],[11,"try_from","","",105,[[],["result",4]]],[11,"try_into","","",105,[[],["result",4]]],[11,"type_id","","",105,[[],["typeid",3]]],[11,"from","","",106,[[]]],[11,"into","","",106,[[]]],[11,"to_owned","","",106,[[]]],[11,"clone_into","","",106,[[]]],[11,"borrow","","",106,[[]]],[11,"borrow_mut","","",106,[[]]],[11,"try_from","","",106,[[],["result",4]]],[11,"try_into","","",106,[[],["result",4]]],[11,"type_id","","",106,[[],["typeid",3]]],[11,"from","","",107,[[]]],[11,"into","","",107,[[]]],[11,"to_owned","","",107,[[]]],[11,"clone_into","","",107,[[]]],[11,"borrow","","",107,[[]]],[11,"borrow_mut","","",107,[[]]],[11,"try_from","","",107,[[],["result",4]]],[11,"try_into","","",107,[[],["result",4]]],[11,"type_id","","",107,[[],["typeid",3]]],[11,"from","","",108,[[]]],[11,"into","","",108,[[]]],[11,"borrow","","",108,[[]]],[11,"borrow_mut","","",108,[[]]],[11,"try_from","","",108,[[],["result",4]]],[11,"try_into","","",108,[[],["result",4]]],[11,"type_id","","",108,[[],["typeid",3]]],[11,"from","","",109,[[]]],[11,"into","","",109,[[]]],[11,"to_owned","","",109,[[]]],[11,"clone_into","","",109,[[]]],[11,"borrow","","",109,[[]]],[11,"borrow_mut","","",109,[[]]],[11,"try_from","","",109,[[],["result",4]]],[11,"try_into","","",109,[[],["result",4]]],[11,"type_id","","",109,[[],["typeid",3]]],[11,"from","","",110,[[]]],[11,"into","","",110,[[]]],[11,"to_owned","","",110,[[]]],[11,"clone_into","","",110,[[]]],[11,"borrow","","",110,[[]]],[11,"borrow_mut","","",110,[[]]],[11,"try_from","","",110,[[],["result",4]]],[11,"try_into","","",110,[[],["result",4]]],[11,"type_id","","",110,[[],["typeid",3]]],[11,"from","","",111,[[]]],[11,"into","","",111,[[]]],[11,"borrow","","",111,[[]]],[11,"borrow_mut","","",111,[[]]],[11,"try_from","","",111,[[],["result",4]]],[11,"try_into","","",111,[[],["result",4]]],[11,"type_id","","",111,[[],["typeid",3]]],[11,"from","","",112,[[]]],[11,"into","","",112,[[]]],[11,"borrow","","",112,[[]]],[11,"borrow_mut","","",112,[[]]],[11,"try_from","","",112,[[],["result",4]]],[11,"try_into","","",112,[[],["result",4]]],[11,"type_id","","",112,[[],["typeid",3]]],[11,"from","competitive::geometry","",113,[[]]],[11,"into","","",113,[[]]],[11,"to_owned","","",113,[[]]],[11,"clone_into","","",113,[[]]],[11,"borrow","","",113,[[]]],[11,"borrow_mut","","",113,[[]]],[11,"try_from","","",113,[[],["result",4]]],[11,"try_into","","",113,[[],["result",4]]],[11,"type_id","","",113,[[],["typeid",3]]],[11,"from","","",114,[[]]],[11,"into","","",114,[[]]],[11,"to_owned","","",114,[[]]],[11,"clone_into","","",114,[[]]],[11,"borrow","","",114,[[]]],[11,"borrow_mut","","",114,[[]]],[11,"try_from","","",114,[[],["result",4]]],[11,"try_into","","",114,[[],["result",4]]],[11,"type_id","","",114,[[],["typeid",3]]],[11,"from","","",115,[[]]],[11,"into","","",115,[[]]],[11,"to_owned","","",115,[[]]],[11,"clone_into","","",115,[[]]],[11,"borrow","","",115,[[]]],[11,"borrow_mut","","",115,[[]]],[11,"try_from","","",115,[[],["result",4]]],[11,"try_into","","",115,[[],["result",4]]],[11,"type_id","","",115,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","competitive::graph::adjacency_list_graph","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","","",116,[[]]],[11,"into","","",116,[[]]],[11,"borrow","","",116,[[]]],[11,"borrow_mut","","",116,[[]]],[11,"try_from","","",116,[[],["result",4]]],[11,"try_into","","",116,[[],["result",4]]],[11,"type_id","","",116,[[],["typeid",3]]],[11,"from","competitive::graph::edge_list_graph","",117,[[]]],[11,"into","","",117,[[]]],[11,"to_owned","","",117,[[]]],[11,"clone_into","","",117,[[]]],[11,"borrow","","",117,[[]]],[11,"borrow_mut","","",117,[[]]],[11,"try_from","","",117,[[],["result",4]]],[11,"try_into","","",117,[[],["result",4]]],[11,"type_id","","",117,[[],["typeid",3]]],[11,"from","","",118,[[]]],[11,"into","","",118,[[]]],[11,"borrow","","",118,[[]]],[11,"borrow_mut","","",118,[[]]],[11,"try_from","","",118,[[],["result",4]]],[11,"try_into","","",118,[[],["result",4]]],[11,"type_id","","",118,[[],["typeid",3]]],[11,"from","competitive::graph::grid_graph","",119,[[]]],[11,"into","","",119,[[]]],[11,"to_owned","","",119,[[]]],[11,"clone_into","","",119,[[]]],[11,"borrow","","",119,[[]]],[11,"borrow_mut","","",119,[[]]],[11,"try_from","","",119,[[],["result",4]]],[11,"try_into","","",119,[[],["result",4]]],[11,"type_id","","",119,[[],["typeid",3]]],[11,"from","","",120,[[]]],[11,"into","","",120,[[]]],[11,"into_iter","","",120,[[]]],[11,"to_owned","","",120,[[]]],[11,"clone_into","","",120,[[]]],[11,"borrow","","",120,[[]]],[11,"borrow_mut","","",120,[[]]],[11,"try_from","","",120,[[],["result",4]]],[11,"try_into","","",120,[[],["result",4]]],[11,"type_id","","",120,[[],["typeid",3]]],[11,"from","","",121,[[]]],[11,"into","","",121,[[]]],[11,"into_iter","","",121,[[]]],[11,"to_owned","","",121,[[]]],[11,"clone_into","","",121,[[]]],[11,"borrow","","",121,[[]]],[11,"borrow_mut","","",121,[[]]],[11,"try_from","","",121,[[],["result",4]]],[11,"try_into","","",121,[[],["result",4]]],[11,"type_id","","",121,[[],["typeid",3]]],[11,"from","competitive::graph","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","","",122,[[]]],[11,"into","","",122,[[]]],[11,"to_owned","","",122,[[]]],[11,"clone_into","","",122,[[]]],[11,"borrow","","",122,[[]]],[11,"borrow_mut","","",122,[[]]],[11,"try_from","","",122,[[],["result",4]]],[11,"try_into","","",122,[[],["result",4]]],[11,"type_id","","",122,[[],["typeid",3]]],[11,"from","","",123,[[]]],[11,"into","","",123,[[]]],[11,"to_owned","","",123,[[]]],[11,"clone_into","","",123,[[]]],[11,"borrow","","",123,[[]]],[11,"borrow_mut","","",123,[[]]],[11,"try_from","","",123,[[],["result",4]]],[11,"try_into","","",123,[[],["result",4]]],[11,"type_id","","",123,[[],["typeid",3]]],[11,"from","","",124,[[]]],[11,"into","","",124,[[]]],[11,"to_owned","","",124,[[]]],[11,"clone_into","","",124,[[]]],[11,"borrow","","",124,[[]]],[11,"borrow_mut","","",124,[[]]],[11,"try_from","","",124,[[],["result",4]]],[11,"try_into","","",124,[[],["result",4]]],[11,"type_id","","",124,[[],["typeid",3]]],[11,"from","","",125,[[]]],[11,"into","","",125,[[]]],[11,"borrow","","",125,[[]]],[11,"borrow_mut","","",125,[[]]],[11,"try_from","","",125,[[],["result",4]]],[11,"try_into","","",125,[[],["result",4]]],[11,"type_id","","",125,[[],["typeid",3]]],[11,"from","competitive::graph::sparse_graph","",126,[[]]],[11,"into","","",126,[[]]],[11,"to_owned","","",126,[[]]],[11,"clone_into","","",126,[[]]],[11,"borrow","","",126,[[]]],[11,"borrow_mut","","",126,[[]]],[11,"try_from","","",126,[[],["result",4]]],[11,"try_into","","",126,[[],["result",4]]],[11,"type_id","","",126,[[],["typeid",3]]],[11,"from","","",127,[[]]],[11,"into","","",127,[[]]],[11,"to_owned","","",127,[[]]],[11,"clone_into","","",127,[[]]],[11,"borrow","","",127,[[]]],[11,"borrow_mut","","",127,[[]]],[11,"try_from","","",127,[[],["result",4]]],[11,"try_into","","",127,[[],["result",4]]],[11,"type_id","","",127,[[],["typeid",3]]],[11,"from","","",128,[[]]],[11,"into","","",128,[[]]],[11,"to_owned","","",128,[[]]],[11,"clone_into","","",128,[[]]],[11,"borrow","","",128,[[]]],[11,"borrow_mut","","",128,[[]]],[11,"try_from","","",128,[[],["result",4]]],[11,"try_into","","",128,[[],["result",4]]],[11,"type_id","","",128,[[],["typeid",3]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",129,[[]]],[11,"into","","",129,[[]]],[11,"borrow","","",129,[[]]],[11,"borrow_mut","","",129,[[]]],[11,"try_from","","",129,[[],["result",4]]],[11,"try_into","","",129,[[],["result",4]]],[11,"type_id","","",129,[[],["typeid",3]]],[11,"from","","",130,[[]]],[11,"into","","",130,[[]]],[11,"borrow","","",130,[[]]],[11,"borrow_mut","","",130,[[]]],[11,"try_from","","",130,[[],["result",4]]],[11,"try_into","","",130,[[],["result",4]]],[11,"type_id","","",130,[[],["typeid",3]]],[11,"from","competitive::graph","",131,[[]]],[11,"into","","",131,[[]]],[11,"to_owned","","",131,[[]]],[11,"clone_into","","",131,[[]]],[11,"borrow","","",131,[[]]],[11,"borrow_mut","","",131,[[]]],[11,"try_from","","",131,[[],["result",4]]],[11,"try_into","","",131,[[],["result",4]]],[11,"type_id","","",131,[[],["typeid",3]]],[11,"from","","",132,[[]]],[11,"into","","",132,[[]]],[11,"to_owned","","",132,[[]]],[11,"clone_into","","",132,[[]]],[11,"borrow","","",132,[[]]],[11,"borrow_mut","","",132,[[]]],[11,"try_from","","",132,[[],["result",4]]],[11,"try_into","","",132,[[],["result",4]]],[11,"type_id","","",132,[[],["typeid",3]]],[11,"from","competitive::math","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","","",133,[[]]],[11,"into","","",133,[[]]],[11,"to_owned","","",133,[[]]],[11,"clone_into","","",133,[[]]],[11,"borrow","","",133,[[]]],[11,"borrow_mut","","",133,[[]]],[11,"try_from","","",133,[[],["result",4]]],[11,"try_into","","",133,[[],["result",4]]],[11,"type_id","","",133,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","","",134,[[]]],[11,"into","","",134,[[]]],[11,"borrow","","",134,[[]]],[11,"borrow_mut","","",134,[[]]],[11,"try_from","","",134,[[],["result",4]]],[11,"try_into","","",134,[[],["result",4]]],[11,"type_id","","",134,[[],["typeid",3]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"from","","",135,[[]]],[11,"into","","",135,[[]]],[11,"borrow","","",135,[[]]],[11,"borrow_mut","","",135,[[]]],[11,"try_from","","",135,[[],["result",4]]],[11,"try_into","","",135,[[],["result",4]]],[11,"type_id","","",135,[[],["typeid",3]]],[11,"from","","",136,[[]]],[11,"into","","",136,[[]]],[11,"to_owned","","",136,[[]]],[11,"clone_into","","",136,[[]]],[11,"borrow","","",136,[[]]],[11,"borrow_mut","","",136,[[]]],[11,"try_from","","",136,[[],["result",4]]],[11,"try_into","","",136,[[],["result",4]]],[11,"type_id","","",136,[[],["typeid",3]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"from","","",137,[[]]],[11,"into","","",137,[[]]],[11,"to_owned","","",137,[[]]],[11,"clone_into","","",137,[[]]],[11,"borrow","","",137,[[]]],[11,"borrow_mut","","",137,[[]]],[11,"try_from","","",137,[[],["result",4]]],[11,"try_into","","",137,[[],["result",4]]],[11,"type_id","","",137,[[],["typeid",3]]],[11,"from","","",138,[[]]],[11,"into","","",138,[[]]],[11,"to_owned","","",138,[[]]],[11,"clone_into","","",138,[[]]],[11,"borrow","","",138,[[]]],[11,"borrow_mut","","",138,[[]]],[11,"try_from","","",138,[[],["result",4]]],[11,"try_into","","",138,[[],["result",4]]],[11,"type_id","","",138,[[],["typeid",3]]],[11,"from","competitive::num","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"to_owned","","",37,[[]]],[11,"clone_into","","",37,[[]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"from","competitive::num::mint_basic","",139,[[]]],[11,"into","","",139,[[]]],[11,"borrow","","",139,[[]]],[11,"borrow_mut","","",139,[[]]],[11,"try_from","","",139,[[],["result",4]]],[11,"try_into","","",139,[[],["result",4]]],[11,"type_id","","",139,[[],["typeid",3]]],[11,"from","","",140,[[]]],[11,"into","","",140,[[]]],[11,"borrow","","",140,[[]]],[11,"borrow_mut","","",140,[[]]],[11,"try_from","","",140,[[],["result",4]]],[11,"try_into","","",140,[[],["result",4]]],[11,"type_id","","",140,[[],["typeid",3]]],[11,"from","","",141,[[]]],[11,"into","","",141,[[]]],[11,"borrow","","",141,[[]]],[11,"borrow_mut","","",141,[[]]],[11,"try_from","","",141,[[],["result",4]]],[11,"try_into","","",141,[[],["result",4]]],[11,"type_id","","",141,[[],["typeid",3]]],[11,"from","","",142,[[]]],[11,"into","","",142,[[]]],[11,"borrow","","",142,[[]]],[11,"borrow_mut","","",142,[[]]],[11,"try_from","","",142,[[],["result",4]]],[11,"try_into","","",142,[[],["result",4]]],[11,"type_id","","",142,[[],["typeid",3]]],[11,"from","","",143,[[]]],[11,"into","","",143,[[]]],[11,"borrow","","",143,[[]]],[11,"borrow_mut","","",143,[[]]],[11,"try_from","","",143,[[],["result",4]]],[11,"try_into","","",143,[[],["result",4]]],[11,"type_id","","",143,[[],["typeid",3]]],[11,"from","","",144,[[]]],[11,"into","","",144,[[]]],[11,"borrow","","",144,[[]]],[11,"borrow_mut","","",144,[[]]],[11,"try_from","","",144,[[],["result",4]]],[11,"try_into","","",144,[[],["result",4]]],[11,"type_id","","",144,[[],["typeid",3]]],[11,"from","competitive::num::montgomery","",145,[[]]],[11,"into","","",145,[[]]],[11,"borrow","","",145,[[]]],[11,"borrow_mut","","",145,[[]]],[11,"try_from","","",145,[[],["result",4]]],[11,"try_into","","",145,[[],["result",4]]],[11,"type_id","","",145,[[],["typeid",3]]],[11,"from","competitive::num","",146,[[]]],[11,"into","","",146,[[]]],[11,"to_owned","","",146,[[]]],[11,"clone_into","","",146,[[]]],[11,"to_string","","",146,[[],["string",3]]],[11,"borrow","","",146,[[]]],[11,"borrow_mut","","",146,[[]]],[11,"try_from","","",146,[[],["result",4]]],[11,"try_into","","",146,[[],["result",4]]],[11,"type_id","","",146,[[],["typeid",3]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"to_string","","",40,[[],["string",3]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","competitive::string","",147,[[]]],[11,"into","","",147,[[]]],[11,"to_owned","","",147,[[]]],[11,"clone_into","","",147,[[]]],[11,"borrow","","",147,[[]]],[11,"borrow_mut","","",147,[[]]],[11,"try_from","","",147,[[],["result",4]]],[11,"try_into","","",147,[[],["result",4]]],[11,"type_id","","",147,[[],["typeid",3]]],[11,"from","","",148,[[]]],[11,"into","","",148,[[]]],[11,"to_owned","","",148,[[]]],[11,"clone_into","","",148,[[]]],[11,"borrow","","",148,[[]]],[11,"borrow_mut","","",148,[[]]],[11,"try_from","","",148,[[],["result",4]]],[11,"try_into","","",148,[[],["result",4]]],[11,"type_id","","",148,[[],["typeid",3]]],[11,"from","","",149,[[]]],[11,"into","","",149,[[]]],[11,"to_owned","","",149,[[]]],[11,"clone_into","","",149,[[]]],[11,"borrow","","",149,[[]]],[11,"borrow_mut","","",149,[[]]],[11,"try_from","","",149,[[],["result",4]]],[11,"try_into","","",149,[[],["result",4]]],[11,"type_id","","",149,[[],["typeid",3]]],[11,"from","","",150,[[]]],[11,"into","","",150,[[]]],[11,"to_owned","","",150,[[]]],[11,"clone_into","","",150,[[]]],[11,"borrow","","",150,[[]]],[11,"borrow_mut","","",150,[[]]],[11,"try_from","","",150,[[],["result",4]]],[11,"try_into","","",150,[[],["result",4]]],[11,"type_id","","",150,[[],["typeid",3]]],[11,"from","","",151,[[]]],[11,"into","","",151,[[]]],[11,"to_owned","","",151,[[]]],[11,"clone_into","","",151,[[]]],[11,"borrow","","",151,[[]]],[11,"borrow_mut","","",151,[[]]],[11,"try_from","","",151,[[],["result",4]]],[11,"try_into","","",151,[[],["result",4]]],[11,"type_id","","",151,[[],["typeid",3]]],[11,"from","competitive::tools","",152,[[]]],[11,"into","","",152,[[]]],[11,"to_owned","","",152,[[]]],[11,"clone_into","","",152,[[]]],[11,"borrow","","",152,[[]]],[11,"borrow_mut","","",152,[[]]],[11,"try_from","","",152,[[],["result",4]]],[11,"try_into","","",152,[[],["result",4]]],[11,"type_id","","",152,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",153,[[]]],[11,"into","","",153,[[]]],[11,"into_iter","","",153,[[]]],[11,"borrow","","",153,[[]]],[11,"borrow_mut","","",153,[[]]],[11,"try_from","","",153,[[],["result",4]]],[11,"try_into","","",153,[[],["result",4]]],[11,"type_id","","",153,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","","",154,[[]]],[11,"into","","",154,[[]]],[11,"to_owned","","",154,[[]]],[11,"clone_into","","",154,[[]]],[11,"borrow","","",154,[[]]],[11,"borrow_mut","","",154,[[]]],[11,"try_from","","",154,[[],["result",4]]],[11,"try_into","","",154,[[],["result",4]]],[11,"type_id","","",154,[[],["typeid",3]]],[11,"from","","",155,[[]]],[11,"into","","",155,[[]]],[11,"to_owned","","",155,[[]]],[11,"clone_into","","",155,[[]]],[11,"borrow","","",155,[[]]],[11,"borrow_mut","","",155,[[]]],[11,"try_from","","",155,[[],["result",4]]],[11,"try_into","","",155,[[],["result",4]]],[11,"type_id","","",155,[[],["typeid",3]]],[11,"from","","",156,[[]]],[11,"into","","",156,[[]]],[11,"to_owned","","",156,[[]]],[11,"clone_into","","",156,[[]]],[11,"borrow","","",156,[[]]],[11,"borrow_mut","","",156,[[]]],[11,"try_from","","",156,[[],["result",4]]],[11,"try_into","","",156,[[],["result",4]]],[11,"type_id","","",156,[[],["typeid",3]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",157,[[]]],[11,"into","","",157,[[]]],[11,"to_owned","","",157,[[]]],[11,"clone_into","","",157,[[]]],[11,"borrow","","",157,[[]]],[11,"borrow_mut","","",157,[[]]],[11,"try_from","","",157,[[],["result",4]]],[11,"try_into","","",157,[[],["result",4]]],[11,"type_id","","",157,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","","",158,[[]]],[11,"into","","",158,[[]]],[11,"to_owned","","",158,[[]]],[11,"clone_into","","",158,[[]]],[11,"borrow","","",158,[[]]],[11,"borrow_mut","","",158,[[]]],[11,"try_from","","",158,[[],["result",4]]],[11,"try_into","","",158,[[],["result",4]]],[11,"type_id","","",158,[[],["typeid",3]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","competitive::tree","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","","",159,[[]]],[11,"into","","",159,[[]]],[11,"to_owned","","",159,[[]]],[11,"clone_into","","",159,[[]]],[11,"borrow","","",159,[[]]],[11,"borrow_mut","","",159,[[]]],[11,"try_from","","",159,[[],["result",4]]],[11,"try_into","","",159,[[],["result",4]]],[11,"type_id","","",159,[[],["typeid",3]]],[11,"from","","",160,[[]]],[11,"into","","",160,[[]]],[11,"to_owned","","",160,[[]]],[11,"clone_into","","",160,[[]]],[11,"borrow","","",160,[[]]],[11,"borrow_mut","","",160,[[]]],[11,"try_from","","",160,[[],["result",4]]],[11,"try_into","","",160,[[],["result",4]]],[11,"type_id","","",160,[[],["typeid",3]]],[11,"from","","",161,[[]]],[11,"into","","",161,[[]]],[11,"to_owned","","",161,[[]]],[11,"clone_into","","",161,[[]]],[11,"borrow","","",161,[[]]],[11,"borrow_mut","","",161,[[]]],[11,"try_from","","",161,[[],["result",4]]],[11,"try_into","","",161,[[],["result",4]]],[11,"type_id","","",161,[[],["typeid",3]]],[11,"from","","",57,[[]]],[11,"into","","",57,[[]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"from","","",58,[[]]],[11,"into","","",58,[[]]],[11,"to_owned","","",58,[[]]],[11,"clone_into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","","",59,[[]]],[11,"into","","",59,[[]]],[11,"to_owned","","",59,[[]]],[11,"clone_into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"operate","competitive::algebra","",60,[[]]],[11,"operate","","",61,[[]]],[11,"operate","","",62,[[]]],[11,"operate","","",63,[[]]],[11,"operate","","",64,[[]]],[11,"operate","","",65,[[]]],[11,"operate","","",66,[[]]],[11,"operate","","",67,[[]]],[11,"operate","","",68,[[]]],[11,"operate","","",69,[[]]],[11,"operate","","",70,[[]]],[11,"operate","","",71,[[]]],[11,"operate","","",72,[[]]],[11,"operate","","",73,[[]]],[11,"operate","","",74,[[]]],[11,"operate","","",75,[[]]],[11,"operate","","",76,[[]]],[11,"operate","","",77,[[]]],[11,"operate","","",78,[[]]],[11,"operate","competitive::tree","",161,[[]]],[11,"unit","competitive::algebra","",60,[[]]],[11,"unit","","",61,[[]]],[11,"unit","","",62,[[]]],[11,"unit","","",63,[[]]],[11,"unit","","",64,[[]]],[11,"unit","","",65,[[]]],[11,"unit","","",66,[[]]],[11,"unit","","",67,[[]]],[11,"unit","","",68,[[]]],[11,"unit","","",69,[[]]],[11,"unit","","",70,[[]]],[11,"unit","","",71,[[]]],[11,"unit","","",73,[[]]],[11,"unit","","",74,[[]]],[11,"unit","","",75,[[]]],[11,"unit","","",76,[[]]],[11,"unit","","",77,[[]]],[11,"unit","","",78,[[]]],[11,"inverse","","",64,[[]]],[11,"rinv_operate","","",64,[[]]],[11,"inverse","","",65,[[]]],[11,"rinv_operate","","",65,[[]]],[11,"inverse","","",69,[[]]],[11,"inverse","","",71,[[]]],[11,"inverse","","",74,[[]]],[11,"inverse","","",76,[[]]],[11,"inverse","","",78,[[]]],[11,"initial","competitive::data_structure","",88,[[]]],[11,"next","","",88,[[],["option",4]]],[11,"accept","","",88,[[],["bool",15]]],[11,"initial","","",89,[[]]],[11,"next","","",89,[[],["option",4]]],[11,"accept","","",89,[[],["bool",15]]],[11,"initial","","",90,[[]]],[11,"next","","",90,[[],["option",4]]],[11,"accept","","",90,[[],["bool",15]]],[11,"initial","","",91,[[]]],[11,"next","","",91,[[],["option",4]]],[11,"accept","","",91,[[],["bool",15]]],[11,"initial","","",92,[[]]],[11,"next","","",92,[[],["option",4]]],[11,"accept","","",92,[[],["bool",15]]],[11,"initial","","",93,[[]]],[11,"next","","",93,[[],["option",4]]],[11,"accept","","",93,[[],["bool",15]]],[11,"initial","","",94,[[]]],[11,"next","","",94,[[],["option",4]]],[11,"accept","","",94,[[],["bool",15]]],[11,"initial","","",95,[[]]],[11,"next","","",95,[[],["option",4]]],[11,"accept","","",95,[[],["bool",15]]],[11,"bit_length","","",98,[[],["usize",15]]],[11,"access","","",98,[[["usize",15]],["bool",15]]],[11,"rank1","","",98,[[["usize",15]],["usize",15]]],[11,"select1","","",98,[[["usize",15]],[["usize",15],["option",4]]]],[11,"select0","","",98,[[["usize",15]],[["usize",15],["option",4]]]],[11,"convolve","competitive::math","",134,[[["formalpowerseries",3]],["formalpowerseries",3]]],[11,"sqrt_coefficient","competitive::num","",146,[[],["option",4]]],[11,"primitive_root","competitive::num::mint_basic","",139,[[],["usize",15]]],[11,"get_mod","competitive::num::montgomery","",145,[[],["u32",15]]],[11,"r","","",145,[[],["u32",15]]],[11,"n1","","",145,[[],["u32",15]]],[11,"n2","","",145,[[],["u32",15]]],[11,"n3","","",145,[[],["u32",15]]],[11,"zero","competitive::math","",28,[[]]],[11,"zero","","",33,[[]]],[11,"zero","competitive::num","",37,[[]]],[11,"zero","","",146,[[]]],[11,"one","competitive::math","",28,[[]]],[11,"one","","",33,[[]]],[11,"one","competitive::num","",146,[[]]],[11,"rand","competitive::tools","",44,[[["xorshift",3]]]],[11,"scan","competitive::num","",146,[[],["option",4]]],[11,"scan","competitive::tools","",156,[[],["option",4]]],[11,"scan","","",157,[[],["option",4]]],[11,"mscan","competitive::graph::adjacency_list_graph","",116,[[],["option",4]]],[11,"mscan","competitive::graph::edge_list_graph","",118,[[],["option",4]]],[11,"mscan","competitive::graph::sparse_graph","",129,[[],["option",4]]],[11,"mscan","","",130,[[],["option",4]]],[11,"mscan","competitive::tools","",48,[[],["option",4]]],[11,"mscan","","",49,[[],["option",4]]],[11,"mscan","","",158,[[],["option",4]]],[11,"construct_graph","competitive::graph::sparse_graph","",126,[[["usize",15],["vec",3]],["sparsegraph",3]]],[11,"construct_graph","","",127,[[["usize",15],["vec",3]],["sparsegraph",3]]],[11,"construct_graph","","",128,[[["usize",15],["vec",3]],["sparsegraph",3]]],[11,"get_mod","competitive::num::mint_basic","",139,[[]]],[11,"mod_zero","","",139,[[]]],[11,"mod_one","","",139,[[]]],[11,"mod_add","","",139,[[]]],[11,"mod_sub","","",139,[[]]],[11,"mod_mul","","",139,[[]]],[11,"mod_div","","",139,[[]]],[11,"mod_neg","","",139,[[]]],[11,"mod_inv","","",139,[[]]],[11,"get_mod","","",140,[[]]],[11,"mod_zero","","",140,[[]]],[11,"mod_one","","",140,[[]]],[11,"mod_add","","",140,[[]]],[11,"mod_sub","","",140,[[]]],[11,"mod_mul","","",140,[[]]],[11,"mod_div","","",140,[[]]],[11,"mod_neg","","",140,[[]]],[11,"mod_inv","","",140,[[]]],[11,"get_mod","","",141,[[]]],[11,"mod_zero","","",141,[[]]],[11,"mod_one","","",141,[[]]],[11,"mod_add","","",141,[[]]],[11,"mod_sub","","",141,[[]]],[11,"mod_mul","","",141,[[]]],[11,"mod_div","","",141,[[]]],[11,"mod_neg","","",141,[[]]],[11,"mod_inv","","",141,[[]]],[11,"get_mod","","",142,[[]]],[11,"mod_zero","","",142,[[]]],[11,"mod_one","","",142,[[]]],[11,"mod_add","","",142,[[]]],[11,"mod_sub","","",142,[[]]],[11,"mod_mul","","",142,[[]]],[11,"mod_div","","",142,[[]]],[11,"mod_neg","","",142,[[]]],[11,"mod_inv","","",142,[[]]],[11,"get_mod","","",143,[[]]],[11,"mod_zero","","",143,[[]]],[11,"mod_one","","",143,[[]]],[11,"mod_add","","",143,[[]]],[11,"mod_sub","","",143,[[]]],[11,"mod_mul","","",143,[[]]],[11,"mod_div","","",143,[[]]],[11,"mod_neg","","",143,[[]]],[11,"mod_inv","","",143,[[]]],[11,"get_mod","","",144,[[]]],[11,"mod_zero","","",144,[[]]],[11,"mod_one","","",144,[[]]],[11,"mod_add","","",144,[[]]],[11,"mod_sub","","",144,[[]]],[11,"mod_mul","","",144,[[]]],[11,"mod_div","","",144,[[]]],[11,"mod_neg","","",144,[[]]],[11,"mod_inv","","",144,[[]]],[11,"mod_pow","","",144,[[["usize",15]]]],[11,"from","","",139,[[["u32",15]]]],[11,"into","","",139,[[],["u32",15]]],[11,"mod_into","","",139,[[],["u32",15]]],[11,"from","","",139,[[["u64",15]]]],[11,"into","","",139,[[],["u64",15]]],[11,"mod_into","","",139,[[],["u64",15]]],[11,"from","","",139,[[["u128",15]]]],[11,"into","","",139,[[],["u128",15]]],[11,"mod_into","","",139,[[],["u128",15]]],[11,"from","","",139,[[["usize",15]]]],[11,"into","","",139,[[],["usize",15]]],[11,"mod_into","","",139,[[],["usize",15]]],[11,"from","","",139,[[["i32",15]]]],[11,"into","","",139,[[],["i32",15]]],[11,"mod_into","","",139,[[],["i32",15]]],[11,"from","","",139,[[["i64",15]]]],[11,"into","","",139,[[],["i64",15]]],[11,"mod_into","","",139,[[],["i64",15]]],[11,"from","","",139,[[["i128",15]]]],[11,"into","","",139,[[],["i128",15]]],[11,"mod_into","","",139,[[],["i128",15]]],[11,"from","","",139,[[["isize",15]]]],[11,"into","","",139,[[],["isize",15]]],[11,"mod_into","","",139,[[],["isize",15]]],[11,"from","","",140,[[["u32",15]]]],[11,"into","","",140,[[],["u32",15]]],[11,"mod_into","","",140,[[],["u32",15]]],[11,"from","","",140,[[["u64",15]]]],[11,"into","","",140,[[],["u64",15]]],[11,"mod_into","","",140,[[],["u64",15]]],[11,"from","","",140,[[["u128",15]]]],[11,"into","","",140,[[],["u128",15]]],[11,"mod_into","","",140,[[],["u128",15]]],[11,"from","","",140,[[["usize",15]]]],[11,"into","","",140,[[],["usize",15]]],[11,"mod_into","","",140,[[],["usize",15]]],[11,"from","","",140,[[["i32",15]]]],[11,"into","","",140,[[],["i32",15]]],[11,"mod_into","","",140,[[],["i32",15]]],[11,"from","","",140,[[["i64",15]]]],[11,"into","","",140,[[],["i64",15]]],[11,"mod_into","","",140,[[],["i64",15]]],[11,"from","","",140,[[["i128",15]]]],[11,"into","","",140,[[],["i128",15]]],[11,"mod_into","","",140,[[],["i128",15]]],[11,"from","","",140,[[["isize",15]]]],[11,"into","","",140,[[],["isize",15]]],[11,"mod_into","","",140,[[],["isize",15]]],[11,"from","","",141,[[["u32",15]]]],[11,"into","","",141,[[],["u32",15]]],[11,"mod_into","","",141,[[],["u32",15]]],[11,"from","","",141,[[["u64",15]]]],[11,"into","","",141,[[],["u64",15]]],[11,"mod_into","","",141,[[],["u64",15]]],[11,"from","","",141,[[["u128",15]]]],[11,"into","","",141,[[],["u128",15]]],[11,"mod_into","","",141,[[],["u128",15]]],[11,"from","","",141,[[["usize",15]]]],[11,"into","","",141,[[],["usize",15]]],[11,"mod_into","","",141,[[],["usize",15]]],[11,"from","","",141,[[["i32",15]]]],[11,"into","","",141,[[],["i32",15]]],[11,"mod_into","","",141,[[],["i32",15]]],[11,"from","","",141,[[["i64",15]]]],[11,"into","","",141,[[],["i64",15]]],[11,"mod_into","","",141,[[],["i64",15]]],[11,"from","","",141,[[["i128",15]]]],[11,"into","","",141,[[],["i128",15]]],[11,"mod_into","","",141,[[],["i128",15]]],[11,"from","","",141,[[["isize",15]]]],[11,"into","","",141,[[],["isize",15]]],[11,"mod_into","","",141,[[],["isize",15]]],[11,"from","","",142,[[["u32",15]]]],[11,"into","","",142,[[],["u32",15]]],[11,"mod_into","","",142,[[],["u32",15]]],[11,"from","","",142,[[["u64",15]]]],[11,"into","","",142,[[],["u64",15]]],[11,"mod_into","","",142,[[],["u64",15]]],[11,"from","","",142,[[["u128",15]]]],[11,"into","","",142,[[],["u128",15]]],[11,"mod_into","","",142,[[],["u128",15]]],[11,"from","","",142,[[["usize",15]]]],[11,"into","","",142,[[],["usize",15]]],[11,"mod_into","","",142,[[],["usize",15]]],[11,"from","","",142,[[["i32",15]]]],[11,"into","","",142,[[],["i32",15]]],[11,"mod_into","","",142,[[],["i32",15]]],[11,"from","","",142,[[["i64",15]]]],[11,"into","","",142,[[],["i64",15]]],[11,"mod_into","","",142,[[],["i64",15]]],[11,"from","","",142,[[["i128",15]]]],[11,"into","","",142,[[],["i128",15]]],[11,"mod_into","","",142,[[],["i128",15]]],[11,"from","","",142,[[["isize",15]]]],[11,"into","","",142,[[],["isize",15]]],[11,"mod_into","","",142,[[],["isize",15]]],[11,"from","","",143,[[["u64",15]]]],[11,"into","","",143,[[],["u64",15]]],[11,"mod_into","","",143,[[],["u64",15]]],[11,"from","","",143,[[["u128",15]]]],[11,"into","","",143,[[],["u128",15]]],[11,"mod_into","","",143,[[],["u128",15]]],[11,"from","","",143,[[["usize",15]]]],[11,"into","","",143,[[],["usize",15]]],[11,"mod_into","","",143,[[],["usize",15]]],[11,"from","","",143,[[["i64",15]]]],[11,"into","","",143,[[],["i64",15]]],[11,"mod_into","","",143,[[],["i64",15]]],[11,"from","","",143,[[["i128",15]]]],[11,"into","","",143,[[],["i128",15]]],[11,"mod_into","","",143,[[],["i128",15]]],[11,"from","","",143,[[["isize",15]]]],[11,"into","","",143,[[],["isize",15]]],[11,"mod_into","","",143,[[],["isize",15]]],[11,"from","","",144,[[["u8",15]]]],[11,"into","","",144,[[],["u8",15]]],[11,"mod_into","","",144,[[],["u8",15]]],[11,"from","","",144,[[["u16",15]]]],[11,"into","","",144,[[],["u16",15]]],[11,"mod_into","","",144,[[],["u16",15]]],[11,"from","","",144,[[["u32",15]]]],[11,"into","","",144,[[],["u32",15]]],[11,"mod_into","","",144,[[],["u32",15]]],[11,"from","","",144,[[["u64",15]]]],[11,"into","","",144,[[],["u64",15]]],[11,"mod_into","","",144,[[],["u64",15]]],[11,"from","","",144,[[["u128",15]]]],[11,"into","","",144,[[],["u128",15]]],[11,"mod_into","","",144,[[],["u128",15]]],[11,"from","","",144,[[["usize",15]]]],[11,"into","","",144,[[],["usize",15]]],[11,"mod_into","","",144,[[],["usize",15]]],[11,"from","","",144,[[["i8",15]]]],[11,"into","","",144,[[],["i8",15]]],[11,"mod_into","","",144,[[],["i8",15]]],[11,"from","","",144,[[["i16",15]]]],[11,"into","","",144,[[],["i16",15]]],[11,"mod_into","","",144,[[],["i16",15]]],[11,"from","","",144,[[["i32",15]]]],[11,"into","","",144,[[],["i32",15]]],[11,"mod_into","","",144,[[],["i32",15]]],[11,"from","","",144,[[["i64",15]]]],[11,"into","","",144,[[],["i64",15]]],[11,"mod_into","","",144,[[],["i64",15]]],[11,"from","","",144,[[["i128",15]]]],[11,"into","","",144,[[],["i128",15]]],[11,"mod_into","","",144,[[],["i128",15]]],[11,"from","","",144,[[["isize",15]]]],[11,"into","","",144,[[],["isize",15]]],[11,"mod_into","","",144,[[],["isize",15]]],[11,"from","competitive::num::montgomery","",145,[[["i32",15]]]],[11,"into","","",145,[[],["i32",15]]],[11,"mod_into","","",145,[[],["i32",15]]],[11,"from","","",145,[[["i64",15]]]],[11,"into","","",145,[[],["i64",15]]],[11,"mod_into","","",145,[[],["i64",15]]],[11,"from","","",145,[[["isize",15]]]],[11,"into","","",145,[[],["isize",15]]],[11,"mod_into","","",145,[[],["isize",15]]],[11,"from","competitive::math","",28,[[]]],[11,"from","","",28,[[["vec",3]]]],[11,"from","competitive::num","",146,[[["u8",15]]]],[11,"from","","",146,[[["u16",15]]]],[11,"from","","",146,[[["u32",15]]]],[11,"from","","",146,[[["u64",15]]]],[11,"from","","",146,[[["u128",15]]]],[11,"from","","",146,[[["usize",15]]]],[11,"from","","",146,[[["i8",15]]]],[11,"from","","",146,[[["i16",15]]]],[11,"from","","",146,[[["i32",15]]]],[11,"from","","",146,[[["i64",15]]]],[11,"from","","",146,[[["i128",15]]]],[11,"from","","",146,[[["isize",15]]]],[11,"from","","",40,[[["f64",15]]]],[11,"extend","competitive::graph","",122,[[["intoiterator",8]]]],[11,"extend","","",124,[[["intoiterator",8]]]],[11,"extend","competitive::tools","",152,[[["intoiterator",8]]]],[11,"next","competitive::graph::grid_graph","",120,[[],["option",4]]],[11,"next","","",121,[[],["option",4]]],[11,"next","competitive::tools","",153,[[],["option",4]]],[11,"clone","competitive::algebra","",60,[[],["maxoperation",3]]],[11,"clone","","",61,[[],["minoperation",3]]],[11,"clone","","",62,[[],["firstoperation",3]]],[11,"clone","","",63,[[],["lastoperation",3]]],[11,"clone","","",64,[[],["additiveoperation",3]]],[11,"clone","","",65,[[],["multiplicativeoperation",3]]],[11,"clone","","",66,[[],["linearoperation",3]]],[11,"clone","","",67,[[],["bitandoperation",3]]],[11,"clone","","",68,[[],["bitoroperation",3]]],[11,"clone","","",69,[[],["bitxoroperation",3]]],[11,"clone","","",70,[[],["monoidaloperation",3]]],[11,"clone","","",71,[[],["groupoperation",3]]],[11,"clone","","",72,[[],["assocoativeoperator",3]]],[11,"clone","","",73,[[],["absorbedassocoativeoperator",3]]],[11,"clone","","",74,[[],["cartesianoperation",3]]],[11,"clone","","",75,[[],["countingoperation",3]]],[11,"clone","","",76,[[],["reverseoperation",3]]],[11,"clone","","",77,[[],["top2operation",3]]],[11,"clone","","",78,[[],["permutationoperation",3]]],[11,"clone","competitive::algorithm","",7,[[],["bitdp",3]]],[11,"clone","","",79,[[],["chtline",3]]],[11,"clone","","",80,[[],["convexhulltrick",3]]],[11,"clone","competitive::combinatorial_optimization","",86,[[],["zerooneknapsackproblemsmallitems",3]]],[11,"clone","","",15,[[],["longestincreasingsubsequence",3]]],[11,"clone","competitive::data_structure","",95,[[],["alwaysacceptingautomaton",3]]],[11,"clone","","",96,[[],["binaryindexedtree",3]]],[11,"clone","","",97,[[],["binaryindexedtree2d",3]]],[11,"clone","","",99,[[],["bitset",3]]],[11,"clone","","",100,[[],["disjointsparsetable",3]]],[11,"clone","","",102,[[],["lazysegmenttree",3]]],[11,"clone","","",103,[[],["lazysegmenttreemap",3]]],[11,"clone","","",18,[[],["rangearithmeticprogressionadd",3]]],[11,"clone","","",104,[[],["segmenttree",3]]],[11,"clone","","",105,[[],["segmenttreemap",3]]],[11,"clone","","",106,[[],["queueaggregation",3]]],[11,"clone","","",107,[[],["dequeaggregation",3]]],[11,"clone","","",109,[[],["unionfind",3]]],[11,"clone","","",110,[[],["weightedunionfind",3]]],[11,"clone","competitive::geometry","",113,[[],["circle",3]]],[11,"clone","","",114,[[],["line",3]]],[11,"clone","","",115,[[],["linesegment",3]]],[11,"clone","","",19,[[],["real",3]]],[11,"clone","","",20,[[],["ccw",4]]],[11,"clone","competitive::graph::adjacency_list_graph","",21,[[],["adjacency",3]]],[11,"clone","","",22,[[],["adjacencylistgraph",3]]],[11,"clone","competitive::graph::edge_list_graph","",117,[[],["edgelistgraph",3]]],[11,"clone","competitive::graph::grid_graph","",119,[[],["gridgraph",3]]],[11,"clone","","",120,[[],["adjacency4",3]]],[11,"clone","","",121,[[],["adjacency8",3]]],[11,"clone","competitive::graph","",122,[[],["dinicbuilder",3]]],[11,"clone","","",123,[[],["dinic",3]]],[11,"clone","","",124,[[],["primaldualbuilder",3]]],[11,"clone","competitive::graph::sparse_graph","",126,[[],["directededge",3]]],[11,"clone","","",127,[[],["undirectededge",3]]],[11,"clone","","",128,[[],["bidirectionaledge",3]]],[11,"clone","","",23,[[],["adjacency",3]]],[11,"clone","","",24,[[],["sparsegraph",3]]],[11,"clone","competitive::graph","",131,[[],["stronglyconnectedcomponent",3]]],[11,"clone","","",132,[[],["twosatisfiability",3]]],[11,"clone","competitive::math","",27,[[],["memorizedfactorial",3]]],[11,"clone","","",133,[[],["smallmodmemorizedfactorial",3]]],[11,"clone","","",28,[[]]],[11,"clone","","",31,[[],["matrix",3]]],[11,"clone","","",136,[[],["babystepgiantstep",3]]],[11,"clone","","",33,[[],["polynomial",3]]],[11,"clone","","",137,[[],["primetable",3]]],[11,"clone","","",138,[[],["eulerphitable",3]]],[11,"clone","competitive::num","",36,[[],["complex",3]]],[11,"clone","","",37,[[],["saturating",3]]],[11,"clone","","",146,[[]]],[11,"clone","","",40,[[],["quaddouble",3]]],[11,"clone","competitive::string","",147,[[],["knuthmorrispratt",3]]],[11,"clone","","",148,[[],["rollinghash",3]]],[11,"clone","","",149,[[],["multiplerollinghash",3]]],[11,"clone","","",150,[[],["suffixarray",3]]],[11,"clone","","",151,[[],["zarray",3]]],[11,"clone","competitive::tools","",152,[[],["counter",3]]],[11,"clone","","",154,[[],["xorshift",3]]],[11,"clone","","",44,[[],["notemptysegment",3]]],[11,"clone","","",155,[[],["scanner",3]]],[11,"clone","","",156,[[],["usize1",3]]],[11,"clone","","",48,[[],["charwithbase",3]]],[11,"clone","","",157,[[],["chars",3]]],[11,"clone","","",49,[[],["charswithbase",3]]],[11,"clone","","",158,[[],["collect",3]]],[11,"clone","competitive::tree","",55,[[],["eulertourforedge",3]]],[11,"clone","","",56,[[],["eulertourforvertex",3]]],[11,"clone","","",159,[[],["eulertourforrichvertex",3]]],[11,"clone","","",160,[[],["lowestcommonancestor",3]]],[11,"clone","","",161,[[],["lcamonoid",3]]],[11,"clone","","",58,[[],["rerooting",3]]],[11,"clone","","",59,[[],["treerec",3]]],[11,"default","competitive::algebra","",60,[[],["maxoperation",3]]],[11,"default","","",61,[[],["minoperation",3]]],[11,"default","","",62,[[],["firstoperation",3]]],[11,"default","","",63,[[],["lastoperation",3]]],[11,"default","","",64,[[],["additiveoperation",3]]],[11,"default","","",65,[[],["multiplicativeoperation",3]]],[11,"default","","",66,[[],["linearoperation",3]]],[11,"default","","",67,[[],["bitandoperation",3]]],[11,"default","","",68,[[],["bitoroperation",3]]],[11,"default","","",69,[[],["bitxoroperation",3]]],[11,"default","","",77,[[],["top2operation",3]]],[11,"default","","",78,[[],["permutationoperation",3]]],[11,"default","competitive::algorithm","",7,[[],["bitdp",3]]],[11,"default","","",79,[[],["chtline",3]]],[11,"default","","",80,[[],["convexhulltrick",3]]],[11,"default","competitive::combinatorial_optimization","",86,[[]]],[11,"default","","",15,[[]]],[11,"default","competitive::data_structure","",95,[[]]],[11,"default","","",99,[[],["bitset",3]]],[11,"default","competitive::graph::adjacency_list_graph","",21,[[],["adjacency",3]]],[11,"default","","",22,[[],["adjacencylistgraph",3]]],[11,"default","competitive::graph::sparse_graph","",126,[[],["directededge",3]]],[11,"default","","",127,[[],["undirectededge",3]]],[11,"default","","",128,[[],["bidirectionaledge",3]]],[11,"default","","",23,[[],["adjacency",3]]],[11,"default","competitive::math","",133,[[]]],[11,"default","","",28,[[],["formalpowerseries",3]]],[11,"default","","",33,[[],["polynomial",3]]],[11,"default","competitive::num","",36,[[],["complex",3]]],[11,"default","","",37,[[],["saturating",3]]],[11,"default","","",146,[[]]],[11,"default","","",40,[[],["quaddouble",3]]],[11,"default","competitive::tools","",152,[[]]],[11,"default","","",43,[[]]],[11,"default","","",154,[[]]],[11,"cmp","competitive::algebra","",60,[[["maxoperation",3]],["ordering",4]]],[11,"cmp","","",61,[[["minoperation",3]],["ordering",4]]],[11,"cmp","","",62,[[["firstoperation",3]],["ordering",4]]],[11,"cmp","","",63,[[["lastoperation",3]],["ordering",4]]],[11,"cmp","","",64,[[["additiveoperation",3]],["ordering",4]]],[11,"cmp","","",65,[[["multiplicativeoperation",3]],["ordering",4]]],[11,"cmp","","",66,[[["linearoperation",3]],["ordering",4]]],[11,"cmp","","",67,[[["bitandoperation",3]],["ordering",4]]],[11,"cmp","","",68,[[["bitoroperation",3]],["ordering",4]]],[11,"cmp","","",69,[[["bitxoroperation",3]],["ordering",4]]],[11,"cmp","","",77,[[["top2operation",3]],["ordering",4]]],[11,"cmp","","",78,[[["permutationoperation",3]],["ordering",4]]],[11,"cmp","competitive::data_structure","",99,[[["bitset",3]],["ordering",4]]],[11,"cmp","competitive::geometry","",20,[[["ccw",4]],["ordering",4]]],[11,"cmp","competitive::graph::adjacency_list_graph","",21,[[["adjacency",3]],["ordering",4]]],[11,"cmp","competitive::graph::grid_graph","",119,[[["gridgraph",3]],["ordering",4]]],[11,"cmp","competitive::graph::sparse_graph","",126,[[["directededge",3]],["ordering",4]]],[11,"cmp","","",127,[[["undirectededge",3]],["ordering",4]]],[11,"cmp","","",128,[[["bidirectionaledge",3]],["ordering",4]]],[11,"cmp","","",23,[[["adjacency",3]],["ordering",4]]],[11,"cmp","competitive::num","",37,[[["saturating",3]],["ordering",4]]],[11,"cmp","competitive::tools","",44,[[["notemptysegment",3]],["ordering",4]]],[11,"cmp","","",51,[[["totalord",3]],["ordering",4]]],[11,"eq","competitive::algebra","",60,[[["maxoperation",3]],["bool",15]]],[11,"ne","","",60,[[["maxoperation",3]],["bool",15]]],[11,"eq","","",61,[[["minoperation",3]],["bool",15]]],[11,"ne","","",61,[[["minoperation",3]],["bool",15]]],[11,"eq","","",62,[[["firstoperation",3]],["bool",15]]],[11,"ne","","",62,[[["firstoperation",3]],["bool",15]]],[11,"eq","","",63,[[["lastoperation",3]],["bool",15]]],[11,"ne","","",63,[[["lastoperation",3]],["bool",15]]],[11,"eq","","",64,[[["additiveoperation",3]],["bool",15]]],[11,"ne","","",64,[[["additiveoperation",3]],["bool",15]]],[11,"eq","","",65,[[["multiplicativeoperation",3]],["bool",15]]],[11,"ne","","",65,[[["multiplicativeoperation",3]],["bool",15]]],[11,"eq","","",66,[[["linearoperation",3]],["bool",15]]],[11,"ne","","",66,[[["linearoperation",3]],["bool",15]]],[11,"eq","","",67,[[["bitandoperation",3]],["bool",15]]],[11,"ne","","",67,[[["bitandoperation",3]],["bool",15]]],[11,"eq","","",68,[[["bitoroperation",3]],["bool",15]]],[11,"ne","","",68,[[["bitoroperation",3]],["bool",15]]],[11,"eq","","",69,[[["bitxoroperation",3]],["bool",15]]],[11,"ne","","",69,[[["bitxoroperation",3]],["bool",15]]],[11,"eq","","",77,[[["top2operation",3]],["bool",15]]],[11,"ne","","",77,[[["top2operation",3]],["bool",15]]],[11,"eq","","",78,[[["permutationoperation",3]],["bool",15]]],[11,"ne","","",78,[[["permutationoperation",3]],["bool",15]]],[11,"eq","competitive::algorithm","",7,[[["bitdp",3]],["bool",15]]],[11,"ne","","",7,[[["bitdp",3]],["bool",15]]],[11,"eq","","",79,[[["chtline",3]],["bool",15]]],[11,"ne","","",79,[[["chtline",3]],["bool",15]]],[11,"eq","competitive::data_structure","",99,[[["bitset",3]],["bool",15]]],[11,"ne","","",99,[[["bitset",3]],["bool",15]]],[11,"eq","competitive::geometry","",113,[[["circle",3]],["bool",15]]],[11,"ne","","",113,[[["circle",3]],["bool",15]]],[11,"eq","","",114,[[["line",3]],["bool",15]]],[11,"ne","","",114,[[["line",3]],["bool",15]]],[11,"eq","","",115,[[["linesegment",3]],["bool",15]]],[11,"ne","","",115,[[["linesegment",3]],["bool",15]]],[11,"eq","","",19,[[["real",3]],["bool",15]]],[11,"eq","","",20,[[["ccw",4]],["bool",15]]],[11,"eq","competitive::graph::adjacency_list_graph","",21,[[["adjacency",3]],["bool",15]]],[11,"ne","","",21,[[["adjacency",3]],["bool",15]]],[11,"eq","competitive::graph::grid_graph","",119,[[["gridgraph",3]],["bool",15]]],[11,"ne","","",119,[[["gridgraph",3]],["bool",15]]],[11,"eq","competitive::graph::sparse_graph","",126,[[["directededge",3]],["bool",15]]],[11,"eq","","",127,[[["undirectededge",3]],["bool",15]]],[11,"eq","","",128,[[["bidirectionaledge",3]],["bool",15]]],[11,"eq","","",23,[[["adjacency",3]],["bool",15]]],[11,"ne","","",23,[[["adjacency",3]],["bool",15]]],[11,"eq","competitive::math","",28,[[],["bool",15]]],[11,"eq","","",31,[[["matrix",3]],["bool",15]]],[11,"ne","","",31,[[["matrix",3]],["bool",15]]],[11,"eq","","",33,[[["polynomial",3]],["bool",15]]],[11,"ne","","",33,[[["polynomial",3]],["bool",15]]],[11,"eq","competitive::num","",36,[[["complex",3]],["bool",15]]],[11,"ne","","",36,[[["complex",3]],["bool",15]]],[11,"eq","","",37,[[["saturating",3]],["bool",15]]],[11,"ne","","",37,[[["saturating",3]],["bool",15]]],[11,"eq","","",146,[[],["bool",15]]],[11,"eq","","",40,[[["quaddouble",3]],["bool",15]]],[11,"ne","","",40,[[["quaddouble",3]],["bool",15]]],[11,"eq","competitive::tools","",44,[[["notemptysegment",3]],["bool",15]]],[11,"ne","","",44,[[["notemptysegment",3]],["bool",15]]],[11,"eq","","",51,[[["totalord",3]],["bool",15]]],[11,"ne","","",51,[[["totalord",3]],["bool",15]]],[11,"partial_cmp","competitive::algebra","",60,[[["maxoperation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",61,[[["minoperation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",62,[[["firstoperation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",63,[[["lastoperation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",64,[[["additiveoperation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",65,[[["multiplicativeoperation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",66,[[["linearoperation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",67,[[["bitandoperation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",68,[[["bitoroperation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",69,[[["bitxoroperation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",77,[[["top2operation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",78,[[["permutationoperation",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::data_structure","",99,[[["bitset",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::geometry","",19,[[["real",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",20,[[["ccw",4]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::graph::adjacency_list_graph","",21,[[["adjacency",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::graph::grid_graph","",119,[[["gridgraph",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::graph::sparse_graph","",126,[[["directededge",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",127,[[["undirectededge",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",128,[[["bidirectionaledge",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",23,[[["adjacency",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::num","",37,[[["saturating",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",40,[[["quaddouble",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","competitive::tools","",44,[[["notemptysegment",3]],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",51,[[["totalord",3]],[["option",4],["ordering",4]]]],[11,"fmt","competitive::algebra","",60,[[["formatter",3]],["result",6]]],[11,"fmt","","",61,[[["formatter",3]],["result",6]]],[11,"fmt","","",62,[[["formatter",3]],["result",6]]],[11,"fmt","","",63,[[["formatter",3]],["result",6]]],[11,"fmt","","",64,[[["formatter",3]],["result",6]]],[11,"fmt","","",65,[[["formatter",3]],["result",6]]],[11,"fmt","","",66,[[["formatter",3]],["result",6]]],[11,"fmt","","",67,[[["formatter",3]],["result",6]]],[11,"fmt","","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",69,[[["formatter",3]],["result",6]]],[11,"fmt","","",70,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","","",72,[[["formatter",3]],["result",6]]],[11,"fmt","","",73,[[["formatter",3]],["result",6]]],[11,"fmt","","",74,[[["formatter",3]],["result",6]]],[11,"fmt","","",75,[[["formatter",3]],["result",6]]],[11,"fmt","","",76,[[["formatter",3]],["result",6]]],[11,"fmt","","",77,[[["formatter",3]],["result",6]]],[11,"fmt","","",78,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::algorithm","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",79,[[["formatter",3]],["result",6]]],[11,"fmt","","",80,[[["formatter",3]],["result",6]]],[11,"fmt","","",9,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::combinatorial_optimization","",86,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::data_structure","",95,[[["formatter",3]],["result",6]]],[11,"fmt","","",96,[[["formatter",3]],["result",6]]],[11,"fmt","","",97,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","","",100,[[["formatter",3]],["result",6]]],[11,"fmt","","",102,[[["formatter",3]],["result",6]]],[11,"fmt","","",103,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",104,[[["formatter",3]],["result",6]]],[11,"fmt","","",105,[[["formatter",3]],["result",6]]],[11,"fmt","","",106,[[["formatter",3]],["result",6]]],[11,"fmt","","",107,[[["formatter",3]],["result",6]]],[11,"fmt","","",109,[[["formatter",3]],["result",6]]],[11,"fmt","","",110,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::geometry","",113,[[["formatter",3]],["result",6]]],[11,"fmt","","",114,[[["formatter",3]],["result",6]]],[11,"fmt","","",115,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::adjacency_list_graph","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::edge_list_graph","",117,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::grid_graph","",119,[[["formatter",3]],["result",6]]],[11,"fmt","","",120,[[["formatter",3]],["result",6]]],[11,"fmt","","",121,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph","",122,[[["formatter",3]],["result",6]]],[11,"fmt","","",123,[[["formatter",3]],["result",6]]],[11,"fmt","","",124,[[["formatter",3]],["result",6]]],[11,"fmt","","",125,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph::sparse_graph","",126,[[["formatter",3]],["result",6]]],[11,"fmt","","",127,[[["formatter",3]],["result",6]]],[11,"fmt","","",128,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::graph","",131,[[["formatter",3]],["result",6]]],[11,"fmt","","",132,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::math","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",133,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",31,[[["formatter",3]],["result",6]]],[11,"fmt","","",136,[[["formatter",3]],["result",6]]],[11,"fmt","","",33,[[["formatter",3]],["result",6]]],[11,"fmt","","",137,[[["formatter",3]],["result",6]]],[11,"fmt","","",138,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","","",146,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::string","",147,[[["formatter",3]],["result",6]]],[11,"fmt","","",148,[[["formatter",3]],["result",6]]],[11,"fmt","","",149,[[["formatter",3]],["result",6]]],[11,"fmt","","",150,[[["formatter",3]],["result",6]]],[11,"fmt","","",151,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tools","",152,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",154,[[["formatter",3]],["result",6]]],[11,"fmt","","",153,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",155,[[["formatter",3]],["result",6]]],[11,"fmt","","",156,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","","",157,[[["formatter",3]],["result",6]]],[11,"fmt","","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",158,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::tree","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",159,[[["formatter",3]],["result",6]]],[11,"fmt","","",160,[[["formatter",3]],["result",6]]],[11,"fmt","","",161,[[["formatter",3]],["result",6]]],[11,"fmt","","",58,[[["formatter",3]],["result",6]]],[11,"fmt","","",59,[[["formatter",3]],["result",6]]],[11,"fmt","competitive::num","",146,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",40,[[["formatter",3]],[["result",4],["error",3]]]],[11,"div","competitive::math","",28,[[]]],[11,"div","","",28,[[]]],[11,"div","competitive::num","",36,[[]]],[11,"div","","",36,[[]]],[11,"div","","",146,[[]]],[11,"div","","",146,[[["mint",3]]]],[11,"div","","",40,[[]]],[11,"rem","competitive::math","",28,[[]]],[11,"sub","","",28,[[]]],[11,"sub","","",28,[[]]],[11,"sub","competitive::num","",36,[[]]],[11,"sub","","",36,[[]]],[11,"sub","","",146,[[]]],[11,"sub","","",146,[[["mint",3]]]],[11,"sub","","",40,[[]]],[11,"add","competitive::math","",28,[[]]],[11,"add","","",28,[[]]],[11,"add","competitive::num","",36,[[]]],[11,"add","","",36,[[]]],[11,"add","","",37,[[]]],[11,"add","","",146,[[]]],[11,"add","","",146,[[["mint",3]]]],[11,"add","","",40,[[["f64",15]]]],[11,"add","","",40,[[]]],[11,"mul","competitive::math","",28,[[]]],[11,"mul","","",28,[[]]],[11,"mul","competitive::num","",36,[[]]],[11,"mul","","",36,[[]]],[11,"mul","","",146,[[]]],[11,"mul","","",146,[[["mint",3]]]],[11,"mul","","",40,[[["f64",15]]]],[11,"mul","","",40,[[]]],[11,"neg","competitive::math","",28,[[]]],[11,"neg","competitive::num","",36,[[]]],[11,"neg","","",146,[[]]],[11,"neg","","",40,[[]]],[11,"add_assign","competitive::math","",28,[[]]],[11,"add_assign","","",28,[[]]],[11,"add_assign","competitive::num","",146,[[["mint",3]]]],[11,"add_assign","","",146,[[["mint",3]]]],[11,"sub_assign","competitive::math","",28,[[]]],[11,"sub_assign","","",28,[[]]],[11,"sub_assign","competitive::num","",146,[[["mint",3]]]],[11,"sub_assign","","",146,[[["mint",3]]]],[11,"mul_assign","competitive::math","",28,[[]]],[11,"mul_assign","","",28,[[]]],[11,"mul_assign","competitive::num","",146,[[["mint",3]]]],[11,"mul_assign","","",146,[[["mint",3]]]],[11,"div_assign","competitive::math","",28,[[]]],[11,"div_assign","","",28,[[]]],[11,"div_assign","competitive::num","",146,[[["mint",3]]]],[11,"div_assign","","",146,[[["mint",3]]]],[11,"rem_assign","competitive::math","",28,[[]]],[11,"not","competitive::data_structure","",99,[[]]],[11,"bitand","","",99,[[]]],[11,"bitor","","",99,[[]]],[11,"bitxor","","",99,[[]]],[11,"shl","","",99,[[["usize",15]]]],[11,"shl","competitive::math","",28,[[["usize",15]]]],[11,"shr","competitive::data_structure","",99,[[["usize",15]]]],[11,"shr","competitive::math","",28,[[["usize",15]]]],[11,"bitand_assign","competitive::data_structure","",99,[[]]],[11,"bitor_assign","","",99,[[]]],[11,"bitxor_assign","","",99,[[]]],[11,"shl_assign","","",99,[[["usize",15]]]],[11,"shl_assign","competitive::math","",28,[[["usize",15]]]],[11,"shr_assign","competitive::data_structure","",99,[[["usize",15]]]],[11,"shr_assign","competitive::math","",28,[[["usize",15]]]],[11,"index","competitive::data_structure","",100,[[["usize",15]]]],[11,"index","competitive::graph::edge_list_graph","",117,[[["usize",15]]]],[11,"index","competitive::graph","",131,[[["usize",15]]]],[11,"index","competitive::math","",28,[[["usize",15]]]],[11,"index","","",31,[[["usize",15]]]],[11,"index","","",31,[[]]],[11,"index","","",33,[[["usize",15]]]],[11,"index","competitive::num","",40,[[["usize",15]]]],[11,"index","competitive::string","",150,[[["usize",15]]]],[11,"index","","",151,[[["usize",15]],["usize",15]]],[11,"index_mut","competitive::math","",28,[[["usize",15]]]],[11,"index_mut","","",31,[[["usize",15]]]],[11,"index_mut","","",31,[[]]],[11,"index_mut","","",33,[[["usize",15]]]],[11,"hash","competitive::algebra","",60,[[]]],[11,"hash","","",61,[[]]],[11,"hash","","",62,[[]]],[11,"hash","","",63,[[]]],[11,"hash","","",64,[[]]],[11,"hash","","",65,[[]]],[11,"hash","","",66,[[]]],[11,"hash","","",67,[[]]],[11,"hash","","",68,[[]]],[11,"hash","","",69,[[]]],[11,"hash","","",77,[[]]],[11,"hash","","",78,[[]]],[11,"hash","competitive::data_structure","",99,[[]]],[11,"hash","competitive::graph::adjacency_list_graph","",21,[[]]],[11,"hash","competitive::graph::grid_graph","",119,[[]]],[11,"hash","competitive::graph::sparse_graph","",126,[[]]],[11,"hash","","",127,[[]]],[11,"hash","","",128,[[]]],[11,"hash","","",23,[[]]],[11,"hash","competitive::num","",36,[[]]],[11,"hash","","",37,[[]]],[11,"hash","","",146,[[]]],[11,"hash","competitive::tools","",44,[[]]],[11,"from_str","competitive::num","",146,[[["str",15]],["result",4]]],[11,"from_str","","",40,[[["str",15]],["result",4]]],[11,"from_iter","competitive::data_structure","",98,[[["intoiterator",8]]]],[11,"from_iter","competitive::math","",28,[[["intoiterator",8]]]],[11,"from_iter","competitive::tools","",152,[[["intoiterator",8]]]],[11,"sum","competitive::num","",146,[[["iterator",8]]]],[11,"sum","","",146,[[["iterator",8]]]],[11,"product","","",146,[[["iterator",8]]]],[11,"product","","",146,[[["iterator",8]]]],[11,"reverse_operate","competitive::algebra","",0,[[]]],[11,"pow","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$",2,[[["usize",15]]]],[11,"rinv_operate","","",3,[[]]],[11,"new","","",60,[[]]],[11,"new","","",61,[[]]],[11,"new","","",62,[[]]],[11,"new","","",63,[[]]],[11,"new","","",64,[[]]],[11,"new","","",65,[[]]],[11,"new","","",66,[[]]],[11,"new","","",67,[[]]],[11,"new","","",68,[[]]],[11,"new","","",69,[[]]],[11,"new","","",70,[[]]],[11,"new","","",71,[[]]],[11,"new","","",73,[[]]],[11,"new","","",74,[[]]],[11,"new","","",75,[[]]],[11,"new","","",76,[[]]],[11,"new","","",77,[[]]],[11,"new","","",78,[[["usize",15]]]],[11,"is_element","competitive::algorithm","",7,[[["usize",15]],["bool",15]]],[11,"elements","","",7,[[["usize",15]]]],[11,"not_elements","","",7,[[["usize",15]]]],[11,"is_subset","","",7,[[["usize",15]],["bool",15]]],[11,"subsets","","",7,[[["usize",15]],["subsets",3]]],[11,"combinations","","",7,[[["usize",15]],["combinations",3]]],[11,"new","","",79,[[["i64",15]]]],[11,"value","","",79,[[["i64",15]],["i64",15]]],[11,"check","","",79,[[],["bool",15]]],[11,"new","","",80,[[]]],[11,"add_line","","k-th add_line(a_k, b_k): a_k >= a_{k+1}",80,[[["i64",15]]]],[11,"query","","",80,[[["i64",15]],["i64",15]]],[11,"mo_solve","","",8,[[["usize",15]]]],[11,"build","","build rho path",9,[[]]],[11,"build_rho","","rho path that index of rho path",9,[[["usize",15]],[["rhopath",3],["usize",15]]]],[11,"get","","get i-th value of rho path",9,[[["usize",15]]]],[11,"new","","",81,[[["usize",15]]]],[11,"next_minimum","","",81,[[],["i64",15]]],[11,"new","","",82,[[]]],[11,"zeta_transform","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$",82,[[]]],[11,"mobius_transform","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$",82,[[]]],[11,"convolve","","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$",82,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",83,[[]]],[11,"zeta_transform","","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$",83,[[]]],[11,"mobius_transform","","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$",83,[[]]],[11,"convolve","","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$",83,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",84,[[["usize",15],["vec",3]]]],[11,"zeta_transform","","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$",84,[[]]],[11,"mobius_transform","","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$",84,[[]]],[11,"convolve","","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$",84,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","","",85,[[["usize",15],["vec",3]]]],[11,"zeta_transform","","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$",85,[[]]],[11,"mobius_transform","","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$",85,[[]]],[11,"convolve","","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$",85,[[["vec",3],["monoid",8]],["vec",3]]],[11,"new","competitive::combinatorial_optimization","",87,[[]]],[11,"solve","","",87,[[["u64",15]],["u64",15]]],[11,"new","","",13,[[["usize",15]]]],[11,"max_weight","","",13,[[],["usize",15]]],[11,"insert","","",13,[[["usize",15]]]],[11,"extend","","",13,[[["intoiterator",8]]]],[11,"insert01","","",13,[[["usize",15]]]],[11,"extend01","","",13,[[["intoiterator",8]]]],[11,"insert_limitation","","",13,[[["usize",15]]]],[11,"extend_limitation","","",13,[[["intoiterator",8]]]],[11,"insert_limitation2","","",13,[[["usize",15]]]],[11,"extend_limitation2","","",13,[[["intoiterator",8]]]],[11,"solve","","",13,[[],["usize",15]]],[11,"new","","",14,[[["usize",15]]]],[11,"insert","","",14,[[["usize",15]]]],[11,"extend","","",14,[[["intoiterator",8]]]],[11,"insert01","","",14,[[["usize",15]]]],[11,"extend01","","",14,[[["intoiterator",8]]]],[11,"insert_limitation","","",14,[[["usize",15]]]],[11,"extend_limitation","","",14,[[["intoiterator",8]]]],[11,"solve","","",14,[[["usize",15]],["usize",15]]],[11,"new","","",86,[[]]],[11,"insert","","",86,[[["u64",15]]]],[11,"extend","","",86,[[["intoiterator",8]]]],[11,"solve","","",86,[[["u64",15]],["u64",15]]],[11,"new","","",15,[[]]],[11,"longest_length","","",15,[[],["usize",15]]],[11,"insert","","",15,[[]]],[11,"extend","","",15,[[["intoiterator",8]]]],[11,"new","competitive::data_structure","",91,[[["bool",15]]]],[11,"new","","",92,[[["bool",15]]]],[11,"new","","",95,[[]]],[11,"new","","",96,[[["usize",15]]]],[11,"accumulate0","","fold [0, k)",96,[[["usize",15]]]],[11,"accumulate","","fold [0, k]",96,[[["usize",15]]]],[11,"update","","",96,[[["usize",15]]]],[11,"fold","","",96,[[["usize",15]]]],[11,"get","","",96,[[["usize",15]]]],[11,"set","","",96,[[["usize",15]]]],[11,"lower_bound","","",96,[[],["usize",15]]],[11,"new","","",97,[[["usize",15]]]],[11,"accumulate0","","fold [0, i) x [0, j)",97,[[["usize",15]]]],[11,"accumulate","","fold [0, i] x [0, j]",97,[[["usize",15]]]],[11,"update","","",97,[[["usize",15]]]],[11,"fold","","0-indexed [i1, i2) x [j1, j2)",97,[[["usize",15]]]],[11,"get","","",97,[[["usize",15]]]],[11,"set","","",97,[[["usize",15]]]],[11,"rank1","","the number of 1 in [0, k)",17,[[["usize",15]],["usize",15]]],[11,"rank0","","the number of 0 in [0, k)",17,[[["usize",15]],["usize",15]]],[11,"select1","","index of k-th 1",17,[[["usize",15]],[["usize",15],["option",4]]]],[11,"select0","","index of k-th 0",17,[[["usize",15]],[["usize",15],["option",4]]]],[11,"new","","",99,[[["usize",15]]]],[11,"ones","","",99,[[["usize",15]]]],[11,"get","","",99,[[["usize",15]],["bool",15]]],[11,"set","","",99,[[["usize",15],["bool",15]]]],[11,"count_ones","","",99,[[],["u64",15]]],[11,"count_zeros","","",99,[[],["u64",15]]],[11,"shl_bitor_assign","","",99,[[["usize",15]]]],[11,"shr_bitor_assign","","",99,[[["usize",15]]]],[11,"new","","",100,[[["vec",3]]]],[11,"height","","",100,[[],["usize",15]]],[11,"fold_close","","",100,[[["usize",15]]]],[11,"fold","","",100,[[["usize",15]]]],[11,"new","","",101,[[]]],[11,"range","","",101,[[["range",3],["range",3]],["vec",3]]],[11,"new","","",102,[[["usize",15]]]],[11,"from_vec","","",102,[[["vec",3]]]],[11,"update","","",102,[[["usize",15]]]],[11,"fold","","",102,[[["usize",15]]]],[11,"set","","",102,[[["usize",15]]]],[11,"get","","",102,[[["usize",15]]]],[11,"fold_all","","",102,[[]]],[11,"as_slice","","",102,[[]]],[11,"as_slice_lazy","","",102,[[]]],[11,"new","","",103,[[["usize",15]]]],[11,"update","","",103,[[["usize",15]]]],[11,"fold","","",103,[[["usize",15]]]],[11,"set","","",103,[[["usize",15]]]],[11,"get","","",103,[[["usize",15]]]],[11,"fold_all","","",103,[[]]],[11,"new","","",18,[[["usize",15]]]],[11,"update","","add a, a+d, …, a+(k-1)d into [l, l + k)",18,[[["usize",15],["i64",15]]]],[11,"update_isize","","add a, a+d, …, a+(k-1)d into [l, l + k)",18,[[["usize",15],["isize",15],["i64",15]]]],[11,"build_inplace","","",18,[[]]],[11,"new","","",104,[[["usize",15]]]],[11,"from_vec","","",104,[[["vec",3]]]],[11,"set","","",104,[[["usize",15]]]],[11,"update","","",104,[[["usize",15]]]],[11,"get","","",104,[[["usize",15]]]],[11,"fold","","",104,[[["usize",15]]]],[11,"fold_all","","",104,[[]]],[11,"lower_bound_all","","left most index [0, r) that satisfies monotonic condition",104,[[["usize",15],["fn",8]],["usize",15]]],[11,"lower_bound","","left most index [l, r) that satisfies monotonic condition",104,[[["usize",15],["fn",8]],["usize",15]]],[11,"as_slice","","",104,[[]]],[11,"new","","",105,[[["usize",15]]]],[11,"set","","",105,[[["usize",15]]]],[11,"update","","",105,[[["usize",15]]]],[11,"get","","",105,[[["usize",15]]]],[11,"fold","","",105,[[["usize",15]]]],[11,"fold_all","","",105,[[]]],[11,"lower_bound_all","","left most index [0, r) that satisfies monotonic condition",105,[[["usize",15],["fn",8]],["usize",15]]],[11,"lower_bound","","left most index [l, r) that satisfies monotonic condition",105,[[["usize",15],["fn",8]],["usize",15]]],[11,"new","","",106,[[]]],[11,"len","","",106,[[],["usize",15]]],[11,"is_empty","","",106,[[],["bool",15]]],[11,"fold_all","","",106,[[]]],[11,"last","","",106,[[],["option",4]]],[11,"push","","",106,[[]]],[11,"pop","","",106,[[],["option",4]]],[11,"new","","",107,[[]]],[11,"len","","",107,[[],["usize",15]]],[11,"is_empty","","",107,[[],["bool",15]]],[11,"fold_all","","",107,[[]]],[11,"front","","",107,[[],["option",4]]],[11,"back","","",107,[[],["option",4]]],[11,"push_front","","",107,[[]]],[11,"push_back","","",107,[[]]],[11,"pop_front","","",107,[[],["option",4]]],[11,"pop_back","","",107,[[],["option",4]]],[11,"reverse","","",107,[[]]],[11,"new","","",108,[[["usize",15]]]],[11,"insert_at","","",108,[[["usize",15]],[["usize",15],["vec",3]]]],[11,"insert","","",108,[[],[["usize",15],["vec",3]]]],[11,"find_at","","",108,[[["usize",15]],[["result",4],["usize",15]]]],[11,"find","","",108,[[],[["result",4],["usize",15]]]],[11,"next_node","","",108,[[["usize",15]],[["usize",15],["option",4]]]],[11,"count","","",108,[[["usize",15]],["usize",15]]],[11,"next_count","","",108,[[["usize",15]],["usize",15]]],[11,"new","","",111,[[["usize",15],["fn",8]]]],[11,"find","","",111,[[["usize",15]],["usize",15]]],[11,"find_root","","",111,[[["usize",15]],[["rootdata",3],["ref",3]]]],[11,"find_root_mut","","",111,[[["usize",15]],[["rootdata",3],["refmut",3]]]],[11,"unite","","",111,[[["usize",15]],["bool",15]]],[11,"size","","",111,[[["usize",15]],["usize",15]]],[11,"same","","",111,[[["usize",15]],["bool",15]]],[11,"members","","",111,[[["usize",15]],[["usize",15],["vec",3]]]],[11,"roots","","",111,[[],[["usize",15],["vec",3]]]],[11,"all_group_members","","",111,[[],[["usize",15],["vec",3],["hashmap",3]]]],[11,"new","","",109,[[["usize",15]]]],[11,"find","","",109,[[["usize",15]],["usize",15]]],[11,"unite","","",109,[[["usize",15]],["bool",15]]],[11,"size","","",109,[[["usize",15]],["usize",15]]],[11,"same","","",109,[[["usize",15]],["bool",15]]],[11,"members","","",109,[[["usize",15]],[["usize",15],["vec",3]]]],[11,"roots","","",109,[[],[["usize",15],["vec",3]]]],[11,"all_group_members","","",109,[[],[["usize",15],["vec",3],["hashmap",3]]]],[11,"new","","",110,[[["usize",15]]]],[11,"find","","",110,[[["usize",15]],["usize",15]]],[11,"get_weight","","",110,[[["usize",15]]]],[11,"unite","","",110,[[["usize",15]],["bool",15]]],[11,"size","","",110,[[["usize",15]],["usize",15]]],[11,"is_same","","",110,[[["usize",15]],["bool",15]]],[11,"get_difference","","",110,[[["usize",15]],["option",4]]],[11,"members","","",110,[[["usize",15]],[["usize",15],["vec",3]]]],[11,"roots","","",110,[[],[["usize",15],["vec",3]]]],[11,"all_group_members","","",110,[[],[["usize",15],["vec",3],["hashmap",3]]]],[11,"new","","",112,[[["usize",15],["clone",8],["rankselectdictionaries",8],["vec",3]]]],[11,"access","","get k-th value",112,[[["usize",15]],["usize",15]]],[11,"rank","","the number of val in range",112,[[["usize",15],["range",3]],["usize",15]]],[11,"select","","index of k-th val",112,[[["usize",15]],[["usize",15],["option",4]]]],[11,"quantile","","get k-th smallest value in range",112,[[["usize",15],["range",3]],["usize",15]]],[11,"rank_lessthan","","the number of value less than val in range",112,[[["usize",15],["range",3]],["usize",15]]],[11,"rank_range","","the number of valrange in range",112,[[["usize",15],["range",3]],["usize",15]]],[11,"new","competitive::geometry","",113,[[["f64",15],["point",6]]]],[11,"cross_circle","","",113,[[],["option",4]]],[11,"contains_point","","",113,[[["point",6]],["bool",15]]],[11,"new","","",114,[[["point",6]]]],[11,"dir","","",114,[[],["point",6]]],[11,"ccw","","",114,[[["point",6]],["ccw",4]]],[11,"projection","","",114,[[["point",6]],["point",6]]],[11,"reflection","","",114,[[["point",6]],["point",6]]],[11,"distance_point","","",114,[[["point",6]],["f64",15]]],[11,"is_parallel","","",114,[[],["bool",15]]],[11,"is_orthogonal","","",114,[[],["bool",15]]],[11,"new","","",115,[[["point",6]]]],[11,"dir","","",115,[[],["point",6]]],[11,"ccw","","",115,[[["point",6]],["ccw",4]]],[11,"projection","","",115,[[["point",6]],["point",6]]],[11,"reflection","","",115,[[["point",6]],["point",6]]],[11,"is_parallel","","",115,[[],["bool",15]]],[11,"is_orthogonal","","",115,[[],["bool",15]]],[11,"intersect","","",115,[[],["bool",15]]],[11,"intersect_point","","",115,[[["point",6]],["bool",15]]],[11,"cross_point","","",115,[[],[["option",4],["point",6]]]],[11,"distance_point","","",115,[[["point",6]],["f64",15]]],[11,"distance","","",115,[[],["f64",15]]],[11,"new","competitive::graph::adjacency_list_graph","",21,[[["usize",15]],["adjacency",3]]],[11,"new","","",22,[[["usize",15]],["adjacencylistgraph",3]]],[11,"add_edge","","",22,[[["usize",15]]]],[11,"add_undirected_edge","","",22,[[["usize",15]]]],[11,"vertices","","",22,[[],[["usize",15],["range",3]]]],[11,"adjacency","","",22,[[["usize",15]],["vec",3]]],[11,"new","","",116,[[["usize",15],["bool",15]]]],[11,"new","competitive::graph::edge_list_graph","Construct empty graph.",117,[[["usize",15]]]],[11,"vertices_size","","Return the number of vertices.",117,[[],["usize",15]]],[11,"edges_size","","Return the number of edges.",117,[[],["usize",15]]],[11,"vertices","","Return an iterator over graph vertices.",117,[[],[["usize",15],["range",3]]]],[11,"edges","","",117,[[],["iter",3]]],[11,"from_edges","","Construct graph from edges.",117,[[["usize",15],["vec",3]]]],[11,"new","","",118,[[["usize",15]]]],[11,"new","competitive::graph::grid_graph","",119,[[["usize",15]]]],[11,"adjacency4","","",119,[[["usize",15]],["adjacency4",3]]],[11,"adjacency8","","",119,[[["usize",15]],["adjacency8",3]]],[11,"new","competitive::graph","",26,[[["undirectedsparsegraph",6]]]],[11,"new","","",122,[[["usize",15]]]],[11,"add_edge","","",122,[[["usize",15],["u64",15]]]],[11,"gen_graph","","",122,[[],["bidirectionalsparsegraph",6]]],[11,"build","","",122,[[["bidirectionalsparsegraph",6]],["dinic",3]]],[11,"maximum_flow_limited","","",123,[[["usize",15],["u64",15]],["u64",15]]],[11,"maximum_flow","","",123,[[["usize",15]],["u64",15]]],[11,"get_flow","","",123,[[["usize",15]],["u64",15]]],[11,"change_edge","","",123,[[["usize",15],["u64",15]]]],[11,"new","","",124,[[["usize",15]]]],[11,"add_edge","","",124,[[["usize",15],["i64",15],["u64",15]]]],[11,"gen_graph","","",124,[[],["bidirectionalsparsegraph",6]]],[11,"build","","",124,[[["bidirectionalsparsegraph",6]],["primaldual",3]]],[11,"minimum_cost_flow_limited","","Return (flow, cost).",125,[[["usize",15],["u64",15]]]],[11,"minimum_cost_flow","","Return (flow, cost).",125,[[["usize",15]]]],[11,"get_flow","","",125,[[["usize",15]],["u64",15]]],[11,"minimum_spanning_tree","competitive::graph::edge_list_graph","",117,[[],[["bool",15],["vec",3]]]],[11,"minimum_spanning_arborescence","","tarjan",117,[[["usize",15]],["option",4]]],[11,"bfs_order","competitive::graph::sparse_graph","",24,[[["usize",15]],[["usize",15],["vec",3]]]],[11,"dfs_order","","",24,[[["usize",15]],[["usize",15],["vec",3]]]],[11,"dfs_tree","","",24,[[["usize",15]],[["bool",15],["vec",3]]]],[11,"dijkstra","","",24,[[["usize",15]],[["option",4],["vec",3]]]],[11,"bellman_ford","","",24,[[["usize",15]]]],[11,"warshall_floyd","","",24,[[],[["vec",3],["vec",3]]]],[11,"new","","",23,[[["usize",15]],["adjacency",3]]],[11,"vertices_size","","Return the number of vertices.",24,[[],["usize",15]]],[11,"edges_size","","Return the number of edges.",24,[[],["usize",15]]],[11,"vertices","","Return an iterator over graph vertices.",24,[[],[["usize",15],["range",3]]]],[11,"adjacencies","","Return a slice of adjacency vertices.",24,[[["usize",15]],[["iter",3],["adjacency",3]]]],[11,"from_edges","","Construct graph from edges.",24,[[["usize",15],["vec",3]]]],[11,"new","","",129,[[["usize",15]]]],[11,"new","","",130,[[["usize",15]]]],[11,"new","competitive::graph","",131,[[["directedsparsegraph",6]]]],[11,"gen_cgraph","","",131,[[],["directedsparsegraph",6]]],[11,"components","","",131,[[],[["vec",3],["vec",3]]]],[11,"has_loop","","",131,[[],["bool",15]]],[11,"size","","",131,[[],["usize",15]]],[11,"new","","",132,[[["usize",15]]]],[11,"add_inner","","",132,[[["usize",15]]]],[11,"add_or","","",132,[[["usize",15]]]],[11,"add_nand","","",132,[[["usize",15]]]],[11,"set_true","","",132,[[["usize",15]]]],[11,"set_false","","",132,[[["usize",15]]]],[11,"two_satisfiability","","",132,[[],[["vec",3],["option",4]]]],[11,"topological_sort","competitive::graph::sparse_graph","",24,[[],[["usize",15],["vec",3]]]],[11,"new","competitive::math","",27,[[["usize",15]]]],[11,"combination","","",27,[[["usize",15]],["mint",3]]],[11,"permutation","","",27,[[["usize",15]],["mint",3]]],[11,"homogeneous_product","","",27,[[["usize",15]],["mint",3]]],[11,"inv","","",27,[[["usize",15]],["mint",3]]],[11,"new","","",133,[[]]],[11,"factorial","","n! = a * p^e",133,[[["usize",15]]]],[11,"combination","","",133,[[["usize",15]],["mint",3]]],[11,"from_vec","","",28,[[["vec",3]]]],[11,"length","","",28,[[],["usize",15]]],[11,"truncate","","",28,[[["usize",15]]]],[11,"zeros","","",28,[[["usize",15]]]],[11,"resize","","",28,[[["usize",15]]]],[11,"prefix","","",28,[[["usize",15]]]],[11,"diff","","",28,[[]]],[11,"integral","","",28,[[]]],[11,"inv","","",28,[[["usize",15]]]],[11,"exp","","",28,[[["usize",15]]]],[11,"log","","",28,[[["usize",15]]]],[11,"pow","","",28,[[["usize",15]]]],[11,"sqrt","","",28,[[["usize",15]],["option",4]]],[11,"lagrange_interpolation","","Lagrange interpolation with (i, f(i)) (0 <= i <= n)",27,[[["usize",15],["mint",3]],["mint",3]]],[11,"new","","",31,[[]]],[11,"from_vec","","",31,[[["vec",3],["vec",3]]]],[11,"zeros","","",31,[[]]],[11,"eye","","",31,[[]]],[11,"pow","","",31,[[["usize",15]]]],[11,"row_reduction","","",31,[[]]],[11,"rank","","",31,[[],["usize",15]]],[11,"solve_system_of_linear_equations","","",31,[[],[["option",4],["vec",3]]]],[11,"inverse","","",31,[[],[["option",4],["matrix",3]]]],[11,"sqrt","competitive::num","",146,[[],["option",4]]],[11,"convert","competitive::math","",135,[[["intoiterator",8]],[["mint",3],["vec",3]]]],[11,"ntt","","",135,[[["vec",3],["bool",15],["mint",3]],[["mint",3],["vec",3]]]],[11,"convolve","","",135,[[["vec",3],["mint",3]],[["mint",3],["vec",3]]]],[11,"convolve_it","","",135,[[["intoiterator",8]],[["mint",3],["vec",3]]]],[11,"new","","",136,[[["u64",15]]]],[11,"solve","","",136,[[["u64",15]],[["option",4],["u64",15]]]],[11,"from_vec","","",33,[[["vec",3]]]],[11,"length","","",33,[[],["usize",15]]],[11,"assign","","",33,[[]]],[11,"pow","","",33,[[["usize",15]]]],[11,"new","","",137,[[["usize",15]]]],[11,"is_prime","","",137,[[["usize",15]],["bool",15]]],[11,"prime_factors","","",137,[[["usize",15]],["vec",3]]],[11,"count_divisors","","",137,[[["usize",15]],["usize",15]]],[11,"new","","",138,[[["usize",15]]]],[11,"get","","",138,[[["usize",15]],["usize",15]]],[11,"new","competitive::num","",36,[[]]],[11,"transpose","","",36,[[]]],[11,"conjugate","","",36,[[]]],[11,"dot","","",36,[[]]],[11,"cross","","",36,[[]]],[11,"norm","","",36,[[]]],[11,"polar","","",36,[[["f64",15]]]],[11,"abs","","",36,[[],["f64",15]]],[11,"unit","","",36,[[]]],[11,"angle","","",36,[[],["f64",15]]],[11,"new","","",146,[[]]],[11,"inner","","",146,[[]]],[11,"new_unchecked","","",146,[[]]],[11,"get_mod","","",146,[[]]],[11,"pow","","",146,[[["usize",15]]]],[11,"inv","","",146,[[]]],[11,"set_mod","competitive::num::mint_basic","",142,[[["u32",15]]]],[11,"set_mod","","",143,[[["u64",15]]]],[11,"r","competitive::num::montgomery","(-m)^{-1} mod n",34,[[],["u32",15]]],[11,"reduce","","n^{-1}x = (x + (xr mod n)m) / n",34,[[["u64",15]],["u32",15]]],[11,"mod_pow","competitive::num","",38,[[["usize",15]]]],[11,"new","","",40,[[["f64",15]]]],[11,"renormalize","","",40,[[["f64",15]]]],[11,"is_zero","","",40,[[],["bool",15]]],[11,"is_sign_negative","","",40,[[],["bool",15]]],[11,"sqrt","","",40,[[]]],[11,"abs","","",40,[[]]],[11,"div2","","",40,[[["f64",15]]]],[11,"is_zero","","",41,[[],["bool",15]]],[11,"is_one","","",42,[[],["bool",15]]],[11,"new","competitive::string","",147,[[["vec",3]]]],[11,"search_all","","",147,[[],[["usize",15],["vec",3]]]],[18,"MOD","","",148,null],[11,"mersenne_mod","","",148,[[["u64",15]],["u64",15]]],[11,"mersenne_mul","","",148,[[["u64",15]],["u64",15]]],[11,"mersenne_mul_mod","","",148,[[["u64",15]],["u64",15]]],[11,"new","","",148,[[["u64",15]]]],[11,"hash_once","","",148,[[],["u64",15]]],[11,"find","","S [l, r)",148,[[["usize",15]],["u64",15]]],[11,"concat","","",148,[[["usize",15],["u64",15]],["u64",15]]],[11,"new","","",149,[[]]],[11,"new_rand","","",149,[[["usize",15]]]],[11,"find","","",149,[[["usize",15]],[["vec",3],["u64",15]]]],[11,"concat","","",149,[[["usize",15]],[["vec",3],["u64",15]]]],[11,"new","","",150,[[["vec",3]]]],[11,"longest_common_prefix_array","","",150,[[],[["usize",15],["vec",3]]]],[11,"new","","",151,[[]]],[11,"search","","",151,[[["eq",8]],[["usize",15],["vec",3]]]],[11,"new","competitive::tools","",152,[[]]],[11,"get","","",152,[[],["usize",15]]],[11,"add","","",152,[[]]],[11,"remove","","",152,[[],["bool",15]]],[11,"append","","",152,[[]]],[11,"keys","","",152,[[],[["usize",15],["keys",3]]]],[11,"values","","",152,[[],[["usize",15],["values",3]]]],[11,"iter","","",152,[[],[["iter",3],["usize",15]]]],[18,"IS_MAXIMIZE","","",43,null],[18,"START_TEMP","","",43,null],[18,"END_TEMP","","",43,null],[18,"TEMP_RATIO","","",43,null],[18,"TIME_LIMIT","","",43,null],[18,"LOG_TABLE_SIZE","","",43,null],[18,"UPDATE_INTERVAL","","",43,null],[18,"SEED","","",43,null],[11,"new","","",43,[[]]],[11,"is_accepted","","",43,[[["f64",15]],["bool",15]]],[11,"is_end","","",43,[[],["bool",15]]],[11,"rand_iter","","Return an iterator that generates random values.",45,[[["xorshift",3]],["randiter",3]]],[11,"gen","","",154,[[["randomspec",8]]]],[11,"gen_iter","","",154,[[["randomspec",8]],[["randiter",3],["randomspec",8]]]],[11,"new","","",154,[[["u64",15]]]],[11,"time","","",154,[[]]],[11,"rand64","","",154,[[],["u64",15]]],[11,"rand","","",154,[[["u64",15]],["u64",15]]],[11,"rands","","",154,[[["usize",15],["u64",15]],[["vec",3],["u64",15]]]],[11,"randf","","",154,[[],["f64",15]]],[11,"gen_bool","","",154,[[["f64",15]],["bool",15]]],[11,"new","","",155,[[["str",15]]]],[11,"scan","","",155,[[]]],[11,"mscan","","",155,[[["markediterscan",8]]]],[11,"scan_vec","","",155,[[["usize",15]],["vec",3]]],[11,"iter","","",155,[[],[["iterscan",8],["scanneriter",3]]]],[11,"new","","",158,[[["usize",15]]]],[11,"new","competitive::tree","",161,[[["usize",15],["undirectedsparsegraph",6]]]],[11,"ancestor","","",161,[[["usize",15]],["usize",15]]],[11,"new","","",55,[[["usize",15],["undirectedsparsegraph",6]]]],[11,"length","","",55,[[],["usize",15]]],[11,"new","","",56,[[["undirectedsparsegraph",6]]]],[11,"length","","",56,[[],["usize",15]]],[11,"subtree_vertex_tour","","",56,[[["usize",15]]]],[11,"path_vertex_tour","","",56,[[["usize",15]]]],[11,"subtree_query","","",56,[[["usize",15],["fnmut",8]]]],[11,"subtree_update","","",56,[[["usize",15],["fnmut",8]]]],[11,"path_query","","",56,[[["usize",15],["fnmut",8]]]],[11,"path_update","","",56,[[["usize",15],["fnmut",8]]]],[11,"new","","",159,[[["usize",15],["undirectedsparsegraph",6]]]],[11,"length","","",159,[[],["usize",15]]],[11,"query","","",159,[[["usize",15],["fnmut",8]]]],[11,"gen_lca","","",159,[[],["lowestcommonancestor",3]]],[11,"lca","","",160,[[["usize",15]],["usize",15]]],[11,"new","","",57,[[["usize",15],["undirectedsparsegraph",6]]]],[11,"lca","","",57,[[["usize",15]],["usize",15]]],[11,"update","","",57,[[["usize",15],["bool",15],["fnmut",8]]]],[11,"query","","",57,[[["usize",15],["bool",15],["fnmut",8]]]],[11,"query_noncom","","",57,[[["usize",15],["bool",15],["fnmut",8]]]],[11,"new","","",58,[[["undirectedsparsegraph",6]]]],[11,"new","","",59,[[["usize",15]]]],[11,"dfs","","",59,[[["usize",15],["undirectedsparsegraph",6]]]]],"p":[[8,"Magma"],[8,"Unital"],[8,"Monoid"],[8,"Invertible"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[8,"BitXorIdentity"],[3,"BitDp"],[8,"MoSolver"],[3,"RhoPath"],[8,"Bisect"],[8,"SliceBisectExt"],[8,"Trisect"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"LongestIncreasingSubsequence"],[8,"Automaton"],[8,"RankSelectDictionaries"],[3,"RangeArithmeticProgressionAdd"],[3,"Real"],[4,"Ccw"],[3,"Adjacency"],[3,"AdjacencyListGraph"],[3,"Adjacency"],[3,"SparseGraph"],[8,"SparseGraphConstruction"],[3,"LowLink"],[3,"MemorizedFactorial"],[3,"FormalPowerSeries"],[8,"FormalPowerSeriesMultiplier"],[8,"FormalPowerSeriesCoefficientSqrt"],[3,"Matrix"],[8,"NttModulus"],[3,"Polynomial"],[8,"MontgomeryReduction32"],[8,"Bounded"],[3,"Complex"],[3,"Saturating"],[8,"MIntBase"],[8,"MIntConvert"],[3,"QuadDouble"],[8,"Zero"],[8,"One"],[3,"SimuratedAnnealing"],[3,"NotEmptySegment"],[8,"RandomSpec"],[8,"IterScan"],[8,"MarkedIterScan"],[3,"CharWithBase"],[3,"CharsWithBase"],[8,"GetDistinctMut"],[3,"TotalOrd"],[8,"Read"],[8,"Write"],[6,"UndirectedSparseGraph"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"HeavyLightDecomposition"],[3,"ReRooting"],[3,"TreeRec"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"MonoidalOperation"],[3,"GroupOperation"],[3,"AssocoativeOperator"],[3,"AbsorbedAssocoativeOperator"],[3,"CartesianOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"PermutationOperation"],[3,"ChtLine"],[3,"ConvexHullTrick"],[3,"SlideMinimum"],[3,"SubsetTransform"],[3,"SupersetTransform"],[3,"DivisorTransform"],[3,"MultipleTransform"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"LessThanAutomaton"],[3,"GreaterThanAutomaton"],[3,"ContainAutomaton"],[3,"ContainCounterAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"BitVector"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"Static2DTree"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"SegmentTree"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"DequeAggregation"],[3,"Trie"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"MergingUnionFind"],[3,"WaveletMatrix"],[3,"Circle"],[3,"Line"],[3,"LineSegment"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraph"],[3,"EdgeListGraphScanner"],[3,"GridGraph"],[3,"Adjacency4"],[3,"Adjacency8"],[3,"DinicBuilder"],[3,"Dinic"],[3,"PrimalDualBuilder"],[3,"PrimalDual"],[3,"DirectedEdge"],[3,"UndirectedEdge"],[3,"BidirectionalEdge"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[3,"SmallModMemorizedFactorial"],[3,"DefaultFormalPowerSeriesMultiplier"],[3,"NumberTheoreticTransform"],[3,"BabyStepGiantStep"],[3,"PrimeTable"],[3,"EulerPhiTable"],[3,"Modulo998244353"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"DynModuloU32"],[3,"DynModuloU64"],[3,"Modulo2"],[3,"Modulo998244353"],[3,"MInt"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"Counter"],[3,"RandIter"],[3,"Xorshift"],[3,"Scanner"],[3,"Usize1"],[3,"Chars"],[3,"Collect"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"LcaMonoid"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","i":[[0,"datastructure","library_checker","",null,null],[0,"point_add_range_sum","library_checker::datastructure","",null,null],[5,"point_add_range_sum_binary_indexed_tree","library_checker::datastructure::point_add_range_sum","✅  AC  111ms",null,[[]]],[5,"point_add_range_sum_segment_tree","","✅  AC  134ms",null,[[]]],[0,"point_set_range_composite","library_checker::datastructure","",null,null],[5,"point_set_range_composite","library_checker::datastructure::point_set_range_composite","✅  AC  193ms",null,[[]]],[0,"queue_operate_all_composite","library_checker::datastructure","",null,null],[5,"queue_operate_all_composite","library_checker::datastructure::queue_operate_all_composite","✅  AC  48ms",null,[[]]],[0,"range_affine_range_sum","library_checker::datastructure","",null,null],[5,"range_affine_range_sum","library_checker::datastructure::range_affine_range_sum","✅  AC  842ms",null,[[]]],[0,"range_kth_smallest","library_checker::datastructure","",null,null],[5,"range_kth_smallest","library_checker::datastructure::range_kth_smallest","✅  AC  382ms",null,[[]]],[0,"staticrmq","library_checker::datastructure","",null,null],[5,"staticrmq_disjoint_sparse_table","library_checker::datastructure::staticrmq","✅  AC  151ms",null,[[]]],[5,"staticrmq_segment_tree","","✅  AC  159ms",null,[[]]],[0,"unionfind","library_checker::datastructure","",null,null],[5,"unionfind","library_checker::datastructure::unionfind","✅  AC  18ms",null,[[]]],[0,"vertex_add_path_sum","library_checker::datastructure","",null,null],[5,"vertex_add_path_sum","library_checker::datastructure::vertex_add_path_sum","✅  AC  498ms",null,[[]]],[0,"vertex_add_subtree_sum","library_checker::datastructure","",null,null],[5,"vertex_add_subtree_sum","library_checker::datastructure::vertex_add_subtree_sum","✅  AC  228ms",null,[[]]],[0,"vertex_set_path_composite","library_checker::datastructure","",null,null],[5,"vertex_set_path_composite","library_checker::datastructure::vertex_set_path_composite","✅  AC  175ms",null,[[]]],[0,"graph","library_checker","",null,null],[0,"bipartitematching","library_checker::graph","",null,null],[5,"bipartitematching","library_checker::graph::bipartitematching","✅  AC  160ms",null,[[]]],[0,"directedmst","library_checker::graph","",null,null],[5,"directedmst","library_checker::graph::directedmst","✅  AC  137ms",null,[[]]],[0,"lca","library_checker::graph","",null,null],[5,"lca_euler_tour","library_checker::graph::lca","✅  AC  420ms",null,[[]]],[5,"lca_hld","","✅  AC  308ms",null,[[]]],[0,"scc","library_checker::graph","",null,null],[5,"scc","library_checker::graph::scc","✅  AC  234ms",null,[[]]],[0,"math","library_checker","",null,null],[0,"convolution_mod","library_checker::math","",null,null],[5,"convolution_mod","library_checker::math::convolution_mod","✅  AC  342ms",null,[[]]],[0,"convolution_mod_1000000007","library_checker::math","",null,null],[5,"convolution_mod_1000000007","library_checker::math::convolution_mod_1000000007","✅  AC  1488ms",null,[[]]],[0,"enumerate_primes","library_checker::math","",null,null],[5,"enumerate_primes","library_checker::math::enumerate_primes","✅  AC  2874ms",null,[[]]],[0,"exp_of_formal_power_series","library_checker::math","",null,null],[5,"exp_of_formal_power_series","library_checker::math::exp_of_formal_power_series","✅  AC  2325ms",null,[[]]],[0,"factorize","library_checker::math","",null,null],[5,"factorize","library_checker::math::factorize","✅  AC  2380ms",null,[[]]],[0,"inv_of_formal_power_series","library_checker::math","",null,null],[5,"inv_of_formal_power_series","library_checker::math::inv_of_formal_power_series","✅  AC  609ms",null,[[]]],[0,"log_of_formal_power_series","library_checker::math","",null,null],[5,"log_of_formal_power_series","library_checker::math::log_of_formal_power_series","✅  AC  1032ms",null,[[]]],[0,"pow_of_formal_power_series","library_checker::math","",null,null],[5,"pow_of_formal_power_series","library_checker::math::pow_of_formal_power_series","✅  AC  3382ms",null,[[]]],[0,"sqrt_mod","library_checker::math","",null,null],[5,"sqrt_mod","library_checker::math::sqrt_mod","✅  AC  145ms",null,[[]]],[0,"sqrt_of_formal_power_series","library_checker::math","",null,null],[5,"sqrt_of_formal_power_series","library_checker::math::sqrt_of_formal_power_series","✅  AC  1601ms",null,[[]]],[0,"sum_of_floor_of_linear","library_checker::math","",null,null],[5,"sum_of_floor_of_linear","library_checker::math::sum_of_floor_of_linear","✅  AC  68ms",null,[[]]],[0,"two_sat","library_checker::math","",null,null],[5,"two_sat","library_checker::math::two_sat","✅  AC  237ms",null,[[]]],[0,"sample","library_checker","",null,null],[0,"aplusb","library_checker::sample","",null,null],[5,"aplusb","library_checker::sample::aplusb","✅  AC  0ms",null,[[]]],[0,"many_aplusb","library_checker::sample","",null,null],[5,"many_aplusb","library_checker::sample::many_aplusb","✅  AC  209ms",null,[[]]],[0,"string","library_checker","",null,null],[0,"number_of_substrings","library_checker::string","",null,null],[5,"number_of_substrings","library_checker::string::number_of_substrings","✅  AC  709ms",null,[[]]],[0,"suffixarray","library_checker::string","",null,null],[5,"suffixarray","library_checker::string::suffixarray","✅  AC  966ms",null,[[]]],[0,"zalgorithm","library_checker::string","",null,null],[5,"zalgorithm","library_checker::string::zalgorithm","✅  AC  42ms",null,[[]]]],"p":[],"a":{"verify":[2,3,5,7,9,11,13,14,16,18,20,22,25,27,29,30,32,35,37,39,41,43,45,47,49,51,53,55,57,60,62,65,67,69]}}\
}');
initSearch(searchIndex);