var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,5,2,5,2,5,5,2,2,5,2,5,2,5,2,5,5,2,5,2,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,2,5,2,2,5,2,2,5,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,5,5,2,2,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,5,5,2,2,2,2,5,2,2,2,2,2,5,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,5,2,5,5,2,2,5,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,2,2,5,2,2,5,2,2,5,2,2,5,0,5],"n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","dpl_1_e","levenshtein_distance","KnapsackPloblemSmallValue","dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","dpl_3_a","largest_square","dpl_3_b","largest_rectangle_in_grid","dpl_3_c","largest_rectangle","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","MinOperation","SegmentTree","dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","Static2DTree","dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","dsl_3_b","dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","EdgeListGraphScanner","grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","DirectedGraphScanner","grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","itp1_1_a","itp1_1_a"],"q":["aizu_online_judge","","","","aizu_online_judge::dpl","","","","","","","","","","","","aizu_online_judge::dpl::dpl_1_a","aizu_online_judge::dpl::dpl_1_b","","aizu_online_judge::dpl::dpl_1_c","","aizu_online_judge::dpl::dpl_1_d","","aizu_online_judge::dpl::dpl_1_e","","aizu_online_judge::dpl::dpl_1_f","","aizu_online_judge::dpl::dpl_1_g","","aizu_online_judge::dpl::dpl_1_h","","aizu_online_judge::dpl::dpl_1_i","","aizu_online_judge::dpl::dpl_3_a","","aizu_online_judge::dpl::dpl_3_b","","aizu_online_judge::dpl::dpl_3_c","","aizu_online_judge::dsl","","","","","","","","","","","","","","","","","","aizu_online_judge::dsl::dsl_1_a","","aizu_online_judge::dsl::dsl_1_b","","","aizu_online_judge::dsl::dsl_2_a","","","aizu_online_judge::dsl::dsl_2_b","","","aizu_online_judge::dsl::dsl_2_c","","aizu_online_judge::dsl::dsl_2_d","","","aizu_online_judge::dsl::dsl_2_e","","","aizu_online_judge::dsl::dsl_2_f","","","aizu_online_judge::dsl::dsl_2_g","","","aizu_online_judge::dsl::dsl_2_h","","","aizu_online_judge::dsl::dsl_2_i","","","aizu_online_judge::dsl::dsl_3_a","","","aizu_online_judge::dsl::dsl_3_b","aizu_online_judge::dsl::dsl_3_c","aizu_online_judge::dsl::dsl_3_d","","","aizu_online_judge::dsl::dsl_4_a","aizu_online_judge::dsl::dsl_5_a","aizu_online_judge::dsl::dsl_5_b","aizu_online_judge::grl","","","","","","","","","","","","","","","","","","aizu_online_judge::grl::grl_1_a","","","","","","","","aizu_online_judge::grl::grl_1_b","","","","","aizu_online_judge::grl::grl_1_c","","","","","","aizu_online_judge::grl::grl_2_a","","aizu_online_judge::grl::grl_2_b","","","","aizu_online_judge::grl::grl_3_a","","","aizu_online_judge::grl::grl_3_b","","","aizu_online_judge::grl::grl_3_c","","","aizu_online_judge::grl::grl_4_a","","aizu_online_judge::grl::grl_4_b","","","aizu_online_judge::grl::grl_5_a","","","aizu_online_judge::grl::grl_5_b","","","","aizu_online_judge::grl::grl_5_c","","","","","aizu_online_judge::grl::grl_5_d","","","","","","aizu_online_judge::grl::grl_5_e","","","","","","","aizu_online_judge::grl::grl_6_a","","","aizu_online_judge::grl::grl_6_b","","","aizu_online_judge::grl::grl_7_a","","","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a"],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  2ms","","✅  AC  1ms","","✅  AC  3ms","","✅  AC  6ms","✅  AC  4ms","","","✅  AC  0ms","","✅  AC  6ms","","✅  AC  45ms","","✅  AC  0ms","✅  AC  23ms","","✅  AC  16ms","","✅  AC  2ms","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  6ms","","","✅  AC  23ms","","","✅  AC  15ms","","","✅  AC  13ms","","✅  AC  461ms","","","✅  AC  80ms","","","✅  AC  36ms","","","✅  AC  81ms","","","✅  AC  48ms","","","✅  AC  40ms","","","✅  AC  58ms","","","✅  AC  4ms","✅  AC  2ms","✅  AC  242ms","","","✅  AC  114ms","✅  AC  84ms","✅  AC  4ms","✅  AC  8ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  64ms","✅  AC  92ms","","","","","✅  AC  14ms","","","","","","✅  AC  6ms","","✅  AC  21ms","","","","✅  AC  0ms","","","✅  AC  2ms","","","✅  AC  2ms","","","✅  AC  6ms","","✅  AC  0ms","","✅  AC  2ms","","","","✅  AC  8ms","","","","✅  AC  2ms","","","","","✅  AC  109ms","","","","","","✅  AC  40ms","","","","","","","✅  AC  165ms","","","✅  AC  0ms","","","✅  AC  0ms","","","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,[[1,2]],0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,1,1],3],0,0,[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"],[15,"bool"]],"a":{"verify":[16,18,20,22,23,26,28,30,32,33,35,37,58,61,64,67,69,72,75,78,81,84,87,90,91,92,95,96,97,98,123,124,129,135,137,141,144,147,150,152,154,158,162,167,173,180,183,186,189,191]}},\
"competitive":{"doc":"github","t":[14,0,0,14,14,14,14,14,14,0,14,14,0,14,14,14,14,0,0,14,14,14,14,14,0,14,14,14,14,14,14,14,0,0,14,14,14,14,14,14,14,14,0,14,0,0,8,8,16,16,3,16,3,16,16,8,8,3,8,3,8,3,3,8,3,3,8,3,3,4,8,8,8,8,16,3,3,18,18,8,3,4,3,8,8,16,3,4,3,3,3,3,3,3,3,3,3,8,8,8,16,16,3,8,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,16,16,3,8,3,3,3,3,8,3,3,3,16,16,16,16,8,3,8,3,3,16,3,8,8,3,8,3,16,16,16,3,3,3,16,8,3,8,3,3,11,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,5,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,10,10,10,11,11,11,5,5,10,5,11,11,10,10,10,5,10,10,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,8,16,3,3,8,3,3,3,3,3,3,3,6,6,6,6,3,6,6,6,6,8,3,3,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,16,3,8,3,3,3,3,3,3,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,14,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,8,4,3,13,13,3,3,13,13,13,6,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,16,16,16,16,16,8,8,8,3,8,8,8,3,3,8,3,3,4,6,6,3,3,3,3,4,6,6,16,16,8,16,3,3,8,8,8,8,16,8,3,3,3,3,3,3,3,8,8,3,3,8,3,3,3,16,3,3,4,6,6,3,3,16,16,3,3,3,16,8,8,8,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,12,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,12,11,11,10,11,11,11,12,10,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,12,11,3,6,4,8,3,16,3,8,8,6,6,6,3,3,3,3,3,3,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,5,5,5,11,12,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,11,11,5,11,5,5,10,11,11,11,11,11,5,11,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,8,8,3,18,8,3,18,18,16,3,18,18,18,18,18,18,18,18,18,8,3,3,18,16,8,18,18,18,18,18,18,18,18,18,18,18,18,3,8,8,18,18,8,18,3,18,8,3,18,3,8,16,18,8,16,3,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,0,10,10,10,10,10,10,10,11,11,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,6,6,4,4,6,6,6,6,4,4,3,4,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,4,4,4,4,8,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,3,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,10,5,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,8,8,3,4,3,8,3,4,3,3,8,8,8,18,8,3,16,16,16,3,8,3,3,8,18,3,3,3,3,3,16,3,4,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,12,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,12,11,11,11,11,11,5,5,5,5,5,10,11,11,14,14,11,11,11,11,11,11,11,12,12,11,12,12,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,3,3,3,3,3,4,8,3,3,13,3,3,3,3,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,12,12,12],"n":["add_assign","algebra","algorithm","automaton","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","iter_print","math","max","memorize","min","minmax","mlambda","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","tools","tree","AbelianGroup","AbelianMonoid","Act","ActMonoid","AddMulOperation","Additive","AdditiveOperation","Agg","AggMonoid","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","EmptyLazy","Field","FindMajorityOperation","FirstOperation","Gf2_63","Group","Idempotent","IdempotentMonoid","Invertible","Key","LastOperation","LinearOperation","MOD","MOD","Magma","MaxOperation","Mersenne61","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","Top2Operation","Unital","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_operate","act_operate","act_operate_assign","act_operate_assign","act_unit","act_unit","add","add","add","agg_operate","agg_operate","agg_operate_assign","agg_operate_assign","agg_unit","agg_unit","all_one","all_zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone_into","clone_into","define_monoid","div","div","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","mul","mul","neg","neg","one","one","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","single","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","sub","sub","sum","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","zero","zero","0","Answer","B","BabyStepGiantStep","Bisect","BitDp","Combinations","ConvexHullTrick","DivisorTransform","ImpartialGame","ImpartialGameAnalyzer","ImpartialGamer","IndependentSubSet","Iter","Iter","LIter","M","MoSolver","MultipleTransform","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SliceSortExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","State","State","SubsetTransform","Subsets","SupersetTransform","T","Trisect","XorBasis","ZeroSumGame","ZeroSumGameAnalyzer","ZeroSumGamer","add_line","answer","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bubble_sort","bubble_sort_by","bucket","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","combinations","combinations_with_replacement","convolve","convolve","convolve","convolve","default","default","default","elements","eq","eval","eval","eval","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_bucket","fold_cell","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","halve","ind","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_element","is_subset","k_colorable","merge_sort","merge_sort_by","middle","mo_solve","mo_solve","mobius_transform","mobius_transform","mobius_transform","mobius_transform","n","new","new","new","new","new","new","new","new","new","new","new_with_primes","new_with_primes","next","next","next_left","next_left","next_minimum","next_right","next_right","next_section","next_state","next_state","next_state","next_state","not_elements","parallel_binary_search","permutations","position_bisect","product","query","reduce","remove","rfind_bisect","rposition_bisect","run_length_encoding","section_end","section_end","slide_minimum","solve","sqrt_decomposition","sqrt_decomposition","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_bucket","update_cell","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","1","1","1","Accumulate","Allocator","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","CompressedBinaryIndexedTree","CompressedBinaryIndexedTree1d","CompressedBinaryIndexedTree2d","CompressedBinaryIndexedTree3d","CompressedBinaryIndexedTree4d","CompressedSegmentTree","CompressedSegmentTree1d","CompressedSegmentTree2d","CompressedSegmentTree3d","CompressedSegmentTree4d","Compressor","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCompress","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MemoryPool","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTreeMap","SlopeTrick","SplayMap","SplaySequence","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","VecCompress","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","allocate","allocate","append","as_slice","automaton","back","bit_length","bit_length","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_failure","build_inplace","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count_ones","count_zeros","dd","deallocate","deallocate","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","drop","drop","drop","edges","eq","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get","get","get_difference","get_key_value","get_key_value_at","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","index_exact","index_exact","index_exact","index_lower_bound","index_lower_bound","index_lower_bound","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert","insert","insert","insert_at","insert_once_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","iter","iter","iter","iter_mut","keys","keys","keys","last","len","len","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","modify","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next_node","node_size","not","not","ones","partial_cmp","pop","pop_back","pop_front","pop_left_if","pop_left_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","quantile_outer","query_min","range","range","range","range_at","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove","remove","remove_at","remove_count","remove_count","reverse","roots","roots","roots","rotate_left","rotate_right","rposition_acc","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update_isize","valley","values","values","values","values_mut","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","0","Approx","ApproxOrd","Ccw","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","Point","approx_cmp","approx_eq","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","ccw_open","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","default","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","add_assign","add_assign","add_assign","add_assign","add_clause","add_cost1","add_cost2","add_cost2_01","add_cost2_10","add_edge","add_edge","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adj4","adj8","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies_with_eindex","adjacencies_with_eindex","adjacencies_with_value","adjacencies_with_value","adjacencies_with_value","adjacency","articulation","avalue","avalue","avalue","aviews","aviews","aviews","aviews","aviews","aviews","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","build","builder","builder","builder","builder_with_esize","change_edge","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","components","construct_emap","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","construct_vmap","construct_vmap","construct_vmap","construct_vmap","default","default","default","dfs_order","dfs_tree","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","dulmage_mendelsohn_decomposition","edges","edges","edges","edges_size","edges_size","eindex","eindex","eindex","eindex","elist","emap_get","emap_get","emap_get_mut","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","eq","eq","eq","eq","esize","esize","esize","eview","eview","eview","extend","extend","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","hash","hash","hash","height","hopcroft_karp","id","index","index","inf","inf","inf","inf","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","kuhn_multi_start_bfs","low","map","map","maximum_flow","maximum_flow_limited","maximum_independent_set","maximum_matching","minimum_cost_flow","minimum_cost_flow_limited","minimum_cut","minimum_edge_cover","minimum_spanning_arborescence","minimum_spanning_tree","minimum_vertex_cover","move_by_diff","mscan","mscan","mscan","mscan","mul","mul","mul","mul","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_adj4","new_adj8","new_with_esize","next","next","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","solve","source","source","source","source","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices_size","vertices_size","vindex","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_set","vmap_set","vsize","vsize","vsize","vview","vview","vview","vview","vview","vview","vview","warshall_floyd_ap","warshall_floyd_ap","weighted_tree_depth","weighted_tree_depth","width","with_n_values","Convolve","Convolve998244353","ConvolveRealFft","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","MIntConvolve","Matrix","MemorizedFactorial","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","assign","berlekamp_massey","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","check_primitive_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convolve","convolve","count_divisors","count_divisors","count_multiset_sum","count_subset_sum","data","data","data","default","default","default","default","determinant","diff","discrete_logarithm","discrete_logarithm_prime_mod","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","divisors","divisors","divisors","eq","eq","eq","euler_phi","eval","even","exp","extgcd","extgcd_binary","extgcd_recurse","eye","fact","factorial","floor_sum","floor_sum_i64","floor_sum_range_freq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_loop","get","highly_composite_number","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into_iter","inv","inv","inv","inv_fact","inverse","inverse_transform","inverse_transform","inverse_transform","inverse_transform","is_prime","is_prime","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","length","length","length","length","linear_congruence","log","miller_rabin","miller_rabin_with_br","modinv","modinv_extgcd_binary","modinv_recurse","moebius","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply","multiply","multipoint_evaluation","neg","neg","new","new","new","new","new","new","new","odd","one","one","permutation","pow","pow","pow","pow","powi","prefix","prefix_ref","prime_factors","prime_factors","prime_factors","prime_factors_flatten","primes","primes_lte","primitive_root","product_all","rank","rem","rem","rem","rem","rem","rem_assign","rem_assign","reserve","resize","resized","reversed","row_reduction","shape","shl","shl","shl_assign","shr","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","taylor_shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","transform","trial_division","trial_division","trim_tail_zeros","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zeros","zeros","0","0","0","0","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","Rational","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp_by_arg","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","default","delta","den","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_rem","div_rem","div_rem","dot","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","get_mod","get_mod","get_mod","hash","hash","hash","hash","hypot","hypot","hypot","i","im","index","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","is_zero","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","maximum","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","minimum","minimum","minimum","minimum","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new_unchecked","new_unchecked","norm","not","not","num","one","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","primitive_nth_root_of_unity","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","scan","scan","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_mod","set_mod","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","local_key","local_key","local_key","local_key","n1","n1","n1","n1","n1","n2","n2","n2","n2","n2","n3","n3","n3","n3","n3","r","r","r","r","r","r","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Chars","Read","Scanner","Usize1","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","bytes","chain","clone","clone","clone","clone_into","clone_into","clone_into","flush","fmt","fmt","fmt","from","from","from","into","into","into","is_read_vectored","is_write_vectored","iter","iter_print","mscan","new","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","scan","scan","scan","scan_vec","take","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_all","write_all_vectored","write_fmt","write_vectored","KnuthMorrisPratt","MultipleRollingHash","RollingHash","SuffixArray","Zarray","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","find","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash_once","index","index","into","into","into","into","into","longest_common_prefix_array","new","new","new","new","new","new_rand","new_rand","search","search_all","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","1","AsTotalOrd","AssociatedValue","ByteWithBase","Bytes","BytesWithBase","CharTools","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","LOG_TABLE_SIZE","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandRange","RandomSpec","SEED","Scanner","ScannerIter","SimuratedAnnealing","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","end_temp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_accepted","is_end","is_maximize","iter_count","iter_print","local_key","log_table","minimize","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","new","new","new","new","new","next","next","now","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rand","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","scan","scan","scan","scan","scan_value","set","set","set_end_temp","set_start_temp","set_time_limit","set_update_interval","shuffle","start_temp","temperture","time","time","time_limit","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_upper_alphabetic_number","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_interval","with","with","0","0","0","0","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dp","eidx","ep","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","time_seeded","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vidx","vsize","vsize","with_seed","0","0","1"],"q":["competitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebracompetitive::algorithmcompetitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graphcompetitive::mathcompetitive::numcompetitive::num::mint_basiccompetitive::num::montgomery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::toolscompetitive::treecompetitive::tree::TreeCenter","",""],"d":["","algebra","algorithm","build automaton","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","Implement <code>AssociatedValue</code>.","","","","Print expressions with a separator.","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","string algorithems","","","tree algorithems","commutative group","commutative monoid","","","$+,\\\\times$","","$+$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","","Find majority(strict) of a sequence.","retain the first element","","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","","","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","$a$ where $a \\\\circ x = e$","","","","","","","","","","multiplicative operaion: $+$","multiplicative operaion: $+$","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","","","additive identity: $0$","additive identity: $0$","","","","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","binary search helper","","","","","","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","","","","ternary search helper","Basis of xor operation.","","","","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","","","","","","","choose distinct <code>r</code> elements from <code>n</code> in sorted order","","choose <code>r</code> elements from <code>n</code> in sorted order","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","get i-th value of rho path","return between two elements","","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","middle point of section","","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","","","","","Create a empty space.","","","","","","","","","","","Divide into 3 sections","","","","","","","choose distinct <code>r</code> elements from <code>n</code> in any order","Returns the first index that satisfies a predicate. if not …","choose <code>r</code> elements from <code>n</code> independently","","Return (reduced basis, coordinate). Coordinate means if …","","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","the end condition of binary search","the end condition of ternary search","","","","","","like <code>(left..=right).min_by_key(f)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return accumlate of [0, k)","fold [0, k]","fold [0, i] x [0, j]","","","","","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of [l, r)","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Create empty","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","","get k-th smallest value in range","get k-th smallest value out of range","","","","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-badd a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(p_x = f) | (p_y = g)","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","","","","","","","","Return a slice of adjacency verticeseturn the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","Return an iterator over graph vertices.","","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e","Sum of Floor of Linear mod 2^64","Sum of Floor of Linear mod 2^64","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","binary gcd","","","[(hcn, #divisor)]","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","","return: (y,z)","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationseturns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","m","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","n^1 mod m","","","","","n^2 mod m","","","","","n^3 mod m","","","","","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","","","","","","","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","","","","","","","Flush this output stream, ensuring that all intermediately …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","","","","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","","","","","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","S [l, r)","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","","Trait for spec of generating random value.","","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","","","","","","","","","","","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","","","","","","","","","","","","","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,245,0,246,0,245,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,0,0,247,248,0,0,0,0,0,0,246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,246,0,0,245,250,251,252,253,254,255,256,4,245,250,251,252,253,254,255,256,4,245,245,245,245,245,245,246,246,2,245,245,245,245,245,245,257,258,259,250,251,252,253,254,255,256,2,4,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,247,248,259,250,251,252,253,254,255,256,2,4,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,247,248,2,2,2,4,2,4,0,276,276,2,4,259,250,251,252,253,254,255,256,2,4,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,247,248,259,250,251,252,253,254,255,256,2,4,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,247,248,276,276,277,264,265,266,269,271,274,278,278,0,246,246,279,279,246,246,249,2,4,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,247,248,249,249,98,98,249,249,277,277,264,265,278,278,4,245,250,251,252,253,254,255,256,4,279,279,4,2,4,245,245,259,250,251,252,253,254,255,256,2,4,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,247,248,259,250,251,252,253,254,255,256,2,4,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,247,248,259,250,251,252,253,254,255,256,2,4,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,247,248,278,2,4,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,247,248,280,246,246,20,281,282,0,0,0,0,0,0,0,0,0,0,283,284,285,282,0,0,0,0,0,285,0,0,0,0,0,0,283,285,284,0,0,0,282,0,0,0,0,0,12,281,14,0,33,34,31,35,286,287,26,27,30,20,21,22,19,12,23,24,17,36,14,25,33,34,31,35,286,287,26,27,30,20,21,22,19,12,23,24,17,36,14,25,288,288,282,17,17,19,20,21,22,19,12,23,24,14,25,20,21,22,19,12,23,24,14,25,0,20,0,286,287,26,27,20,12,14,20,20,23,24,25,17,14,289,0,30,20,21,22,19,12,23,24,17,14,25,31,282,282,33,34,31,35,286,287,26,27,30,20,21,22,19,12,23,24,17,36,14,25,19,14,17,17,290,19,281,14,33,34,31,35,286,287,26,27,30,20,21,22,19,12,23,24,17,36,14,25,21,22,20,20,19,288,288,291,281,281,286,287,26,27,19,33,34,35,30,12,23,24,36,14,25,26,27,21,22,285,34,36,285,34,291,283,284,33,35,20,0,0,289,0,12,14,281,289,289,0,290,291,0,30,282,282,20,0,20,21,22,19,12,23,24,14,25,33,34,31,35,286,287,26,27,30,20,21,22,19,12,23,24,17,36,14,25,33,34,31,35,286,287,26,27,30,20,21,22,19,12,23,24,17,36,14,25,33,34,31,35,286,287,26,27,30,20,21,22,19,12,23,24,17,36,14,25,31,282,282,286,287,26,27,0,0,0,0,0,0,37,38,39,40,41,42,37,38,39,40,41,42,37,38,39,40,41,42,37,38,39,40,41,42,39,42,37,38,42,37,38,39,42,37,38,37,38,37,37,38,39,40,41,42,37,38,39,40,41,42,37,38,37,38,39,42,37,38,37,38,37,37,38,39,40,41,42,41,0,0,0,0,42,37,37,38,39,40,41,42,37,38,39,40,37,38,39,40,41,42,37,38,39,40,41,42,37,38,39,40,41,42,37,38,39,40,41,42,44,45,46,44,45,46,0,0,292,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0,0,0,0,0,0,0,292,44,45,46,47,48,49,50,51,52,53,100,54,55,56,57,58,59,59,59,59,57,58,60,61,62,62,60,61,62,62,63,65,66,293,68,60,69,0,70,100,54,71,71,71,71,71,71,71,71,71,56,57,58,59,76,77,99,78,79,63,69,80,81,70,87,88,65,68,82,44,45,46,47,48,49,50,51,52,53,54,71,83,84,60,61,85,73,74,75,62,72,66,55,56,57,58,59,76,77,99,78,79,63,69,80,81,70,87,88,65,68,82,44,45,46,47,48,49,50,51,52,53,54,71,83,84,60,61,85,73,74,75,62,72,66,55,72,73,60,61,74,75,62,62,57,58,59,76,77,78,79,69,80,81,70,65,82,44,45,46,47,48,49,50,51,52,53,54,71,83,84,60,61,85,73,74,75,62,72,66,55,57,58,59,76,77,78,79,69,80,81,70,65,82,44,45,46,47,48,49,50,51,52,53,54,71,83,84,60,61,85,73,74,75,62,72,66,55,71,75,74,71,71,73,293,68,59,76,81,70,87,88,68,52,53,71,60,61,85,74,75,62,292,292,82,60,74,75,87,88,68,72,71,60,60,61,61,74,75,63,65,72,66,72,63,63,56,57,58,59,76,77,78,79,69,80,81,70,87,88,65,68,82,44,45,46,47,48,49,50,51,52,53,54,71,83,84,60,61,85,73,74,75,62,72,66,55,56,57,58,76,76,76,76,77,78,79,69,80,87,82,78,79,69,80,81,70,77,56,57,58,59,76,77,99,78,79,63,69,80,81,70,87,88,65,68,82,44,45,46,47,48,49,50,51,52,53,54,71,83,84,60,61,85,73,74,75,62,72,66,55,56,54,83,84,60,60,61,61,74,75,57,78,69,70,57,58,78,79,69,80,87,88,71,60,61,74,65,88,88,74,75,75,74,74,75,65,50,51,50,51,71,77,77,294,83,84,294,83,84,292,44,45,46,47,48,49,50,51,52,53,87,88,85,74,75,72,72,72,74,75,56,57,58,59,76,77,99,78,79,63,69,80,81,70,87,88,65,68,82,44,45,46,47,48,49,50,51,52,53,54,71,83,84,60,61,85,73,74,75,62,72,66,55,81,70,87,88,60,61,65,88,60,61,74,75,74,60,61,74,81,81,70,87,88,60,61,50,51,50,51,57,82,63,65,66,62,62,87,57,58,59,59,59,59,76,76,76,76,77,99,78,79,63,69,80,81,70,87,88,65,68,82,47,48,49,52,53,71,60,61,85,73,74,75,62,72,66,55,292,44,45,46,47,48,49,50,51,52,53,72,72,71,71,71,71,81,70,70,74,75,74,75,78,79,69,80,87,81,70,70,55,55,85,99,88,61,88,55,100,100,100,100,54,55,55,87,88,60,61,74,75,88,60,61,87,63,65,66,87,87,78,79,69,80,87,82,82,63,66,55,100,100,54,100,100,54,57,58,78,79,69,80,71,62,71,71,71,71,71,71,294,63,65,83,84,66,62,82,82,295,295,295,295,57,58,59,76,77,78,79,69,80,81,70,65,82,44,45,46,47,48,49,50,51,52,53,54,71,83,84,60,61,85,73,74,75,62,72,66,55,56,57,58,59,76,77,99,78,79,63,69,80,81,70,87,88,65,68,82,44,45,46,47,48,49,50,51,52,53,54,71,83,84,60,61,85,73,74,75,62,72,66,55,56,57,58,59,76,77,99,78,79,63,69,80,81,70,87,88,65,68,82,44,45,46,47,48,49,50,51,52,53,54,71,83,84,60,61,85,73,74,75,62,72,66,55,56,57,58,59,76,77,99,78,79,63,69,80,81,70,87,88,65,68,82,44,45,46,47,48,49,50,51,52,53,54,71,83,84,60,61,85,73,74,75,62,72,66,55,63,65,66,57,58,59,59,59,59,76,76,76,76,78,79,69,80,87,73,73,62,60,61,74,74,87,88,68,60,72,112,0,0,0,0,108,108,0,0,108,108,108,0,296,296,112,108,113,109,111,112,108,113,109,111,108,109,111,108,112,108,113,109,111,112,108,113,109,111,0,112,108,113,0,0,113,111,112,109,111,111,109,111,112,108,113,109,111,112,108,113,109,111,112,108,113,109,111,108,111,111,112,108,113,109,111,109,111,109,111,113,109,111,112,108,109,111,109,111,112,108,113,109,111,112,108,113,109,111,112,108,113,109,111,112,108,113,109,111,297,298,299,297,298,299,300,301,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,302,303,0,304,0,0,0,0,0,0,305,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,306,0,0,0,0,0,0,0,307,308,0,0,0,309,0,0,0,0,310,306,311,312,313,116,117,117,117,117,118,119,120,121,122,116,116,119,123,123,297,124,125,123,123,126,126,298,126,299,124,125,119,154,300,129,130,301,124,125,123,123,126,314,314,314,314,314,314,314,314,126,147,124,125,148,151,152,154,311,312,313,118,149,150,119,120,134,135,136,129,130,123,121,132,122,133,117,137,138,139,127,126,140,116,147,124,125,148,151,152,154,311,312,313,118,149,150,119,120,134,135,136,129,130,123,121,132,122,133,117,137,138,139,127,126,140,116,154,118,121,122,132,133,126,126,132,119,120,134,135,136,129,130,123,121,132,122,117,137,138,139,127,126,140,116,119,120,134,135,136,129,130,123,121,132,122,117,137,138,139,127,126,140,116,135,136,129,130,137,138,139,127,140,305,126,315,137,138,139,310,124,125,123,126,119,117,127,126,126,314,314,314,314,0,304,134,126,134,126,303,136,130,127,126,305,126,305,126,305,305,135,136,129,130,137,138,139,127,316,126,119,317,126,126,121,122,123,119,120,134,135,136,129,130,123,121,132,122,133,117,137,138,139,127,126,140,116,126,147,124,125,148,151,152,154,311,312,313,118,149,150,119,120,134,135,135,135,136,136,129,129,130,130,123,121,132,122,133,117,137,138,139,127,126,140,116,120,134,126,140,121,122,132,133,119,140,135,136,129,130,137,138,139,127,123,120,127,134,140,306,311,312,313,147,124,125,148,151,152,154,311,312,313,118,149,150,119,120,134,135,136,129,130,123,121,132,122,133,117,137,138,139,127,126,140,116,151,152,120,154,129,130,132,132,120,120,133,133,132,120,134,134,120,123,147,148,149,150,306,311,312,313,147,124,125,148,151,152,154,118,149,150,119,120,134,123,121,122,117,127,140,116,123,123,118,151,152,154,135,136,129,130,137,138,139,127,116,116,140,117,306,311,312,313,126,127,144,153,131,126,126,126,119,120,134,135,136,129,130,123,121,132,122,117,137,138,139,127,126,140,116,126,153,126,153,126,153,126,153,126,126,153,126,147,124,125,148,151,152,154,311,312,313,118,149,150,119,120,134,135,136,129,130,123,121,132,122,133,117,137,138,139,127,126,140,116,147,124,125,148,151,152,154,311,312,313,118,149,150,119,120,134,135,136,129,130,123,121,132,122,133,117,137,138,139,127,126,140,116,116,147,124,125,148,151,152,154,311,312,313,118,149,150,119,120,134,135,136,129,130,123,121,132,122,133,117,137,138,139,127,126,140,116,123,309,124,125,119,134,123,126,126,134,126,308,135,136,129,130,127,310,124,125,123,126,310,124,125,123,126,310,310,318,126,119,319,124,124,125,123,126,126,314,314,153,126,123,117,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,320,158,158,158,158,158,158,158,158,159,160,158,158,158,158,160,0,0,321,322,166,167,168,158,159,160,169,170,171,321,322,166,167,168,158,159,160,169,170,171,158,0,166,167,168,158,159,160,169,170,171,166,167,168,158,159,160,169,170,171,166,167,320,320,170,171,158,158,158,159,160,167,158,160,170,159,158,0,0,158,158,158,158,158,158,158,158,160,158,158,158,158,158,0,170,171,158,159,160,0,158,158,158,0,0,0,159,166,167,0,0,0,166,167,168,158,159,160,169,170,171,321,322,166,167,168,158,158,158,158,159,160,169,170,171,158,158,159,160,0,0,169,0,166,158,159,159,160,158,159,159,160,158,321,322,166,167,168,158,159,160,169,170,171,158,166,168,158,166,159,320,321,322,322,170,171,158,158,158,158,0,166,0,0,320,321,322,322,158,160,0,158,0,0,0,0,0,0,158,158,158,158,158,158,158,158,159,160,158,158,158,158,320,321,322,322,158,158,158,166,167,168,159,169,170,171,158,158,160,166,168,158,159,160,168,158,158,0,170,171,0,170,170,0,158,159,158,158,158,158,160,158,158,170,158,158,158,159,159,158,158,158,158,158,158,159,158,323,158,158,158,158,158,158,158,158,159,160,158,158,158,158,158,166,167,168,158,159,160,169,170,171,320,321,322,322,170,171,158,158,321,322,166,167,168,158,159,160,169,170,171,321,322,166,167,168,158,159,160,169,170,171,321,322,166,167,168,158,159,160,169,170,171,158,160,158,159,179,180,181,186,0,0,0,0,324,0,0,324,324,325,0,324,324,324,324,324,324,324,324,324,0,0,0,324,18,0,324,324,324,324,324,324,324,324,324,324,324,324,0,0,0,324,324,0,324,0,324,0,0,324,0,0,326,324,0,327,0,0,324,327,107,178,179,180,181,181,181,181,181,181,186,186,186,186,186,186,187,188,326,326,324,179,180,324,179,180,172,172,172,172,107,107,107,107,107,107,107,107,178,178,179,180,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,187,187,188,172,172,107,107,107,107,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,188,107,324,179,180,324,179,180,324,179,180,324,179,180,324,179,180,328,328,328,328,328,328,328,181,186,181,186,181,186,181,186,181,186,181,186,192,172,165,107,178,179,180,181,186,187,188,192,172,165,107,178,179,180,181,186,187,188,324,179,180,324,179,180,324,179,180,172,165,107,178,179,180,181,186,187,188,172,165,107,178,179,180,181,186,187,188,107,178,179,180,181,186,188,107,107,324,179,180,324,179,180,324,179,180,329,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,329,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,107,172,107,178,179,180,181,186,187,328,188,172,172,172,172,165,165,165,107,107,107,107,107,107,107,107,178,179,180,181,186,186,186,186,186,186,186,186,186,186,186,186,187,188,172,172,107,107,107,107,181,186,186,186,186,186,186,186,186,186,186,186,186,188,324,325,179,180,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,165,165,165,107,330,330,330,330,172,107,178,179,180,181,186,187,188,324,179,180,324,179,180,324,179,180,326,326,324,179,180,172,172,165,107,178,178,179,179,180,180,181,181,186,186,187,187,188,328,328,328,328,328,328,328,324,179,180,331,192,172,172,172,172,172,172,172,172,172,172,172,172,172,165,107,178,178,179,179,180,180,181,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,186,187,187,188,324,179,180,172,178,179,180,181,186,187,325,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,192,326,181,181,181,181,181,181,186,186,186,186,186,186,18,172,165,165,165,172,107,181,186,324,179,180,107,107,187,172,188,331,192,172,165,107,178,179,180,181,186,187,188,172,324,179,180,324,179,180,332,332,332,332,324,179,180,327,181,181,181,181,181,181,186,186,186,186,186,186,324,179,180,176,176,327,181,181,181,181,181,181,186,186,186,186,186,186,324,179,180,324,179,180,161,161,178,187,326,326,329,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,324,179,180,324,179,180,324,179,180,324,179,180,324,179,180,324,179,180,332,178,179,180,181,186,188,324,179,180,332,178,179,180,181,186,188,0,18,18,331,18,18,18,18,18,18,18,18,326,326,0,172,172,172,172,107,107,107,107,107,107,107,107,178,178,179,180,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,187,187,188,324,179,180,172,172,107,107,107,107,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,188,172,172,107,107,178,179,180,181,181,181,181,181,181,186,186,186,186,186,186,187,188,172,165,165,165,107,188,172,188,107,181,186,188,176,172,107,179,180,181,186,188,107,178,179,180,181,186,187,188,107,325,172,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,324,179,180,324,179,180,107,172,172,107,107,107,324,179,180,165,165,165,179,180,181,186,186,186,186,186,186,186,186,186,186,186,186,181,186,186,186,186,186,186,186,186,186,186,186,186,324,325,179,180,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,329,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,329,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,329,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,324,179,180,172,107,181,186,332,332,332,332,172,172,176,176,161,161,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,326,181,181,181,181,181,181,186,186,186,186,186,186,324,327,179,180,181,181,181,181,181,181,186,186,186,186,186,186,324,179,180,324,179,180,324,179,180,324,172,178,179,180,187,172,330,330,330,330,328,172,172,172,172,107,107,107,107,107,107,107,107,178,179,180,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,187,188,172,172,107,107,107,107,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,188,172,172,107,107,324,179,180,324,179,180,324,179,180,324,179,180,172,165,107,178,179,180,181,186,187,188,324,179,180,330,330,330,330,330,330,330,330,172,178,179,180,181,186,187,324,179,180,329,181,181,181,181,181,181,181,181,181,181,181,181,186,186,186,186,186,186,186,186,186,186,186,186,107,324,179,180,192,172,165,107,178,179,180,181,186,187,188,192,172,165,107,178,179,180,181,186,187,188,192,172,165,107,178,179,180,181,186,187,188,107,327,181,181,181,181,181,181,186,186,186,186,186,186,192,192,161,172,107,179,180,181,186,188,0,0,0,0,0,0,0,0,0,0,0,0,333,334,335,336,337,338,333,334,335,336,337,338,0,0,333,333,333,333,333,333,333,333,333,333,333,333,333,334,334,334,334,334,334,334,334,334,335,335,335,335,335,335,335,335,335,336,336,336,336,336,336,336,336,336,337,337,337,337,337,337,337,337,337,338,338,338,338,338,338,338,333,334,335,336,337,338,333,333,333,333,333,333,333,333,333,333,333,333,333,334,334,334,334,334,334,334,334,334,335,335,335,335,335,335,335,335,335,336,336,336,336,336,336,336,336,336,337,337,337,337,337,337,337,337,337,338,338,338,338,338,338,338,333,334,335,336,337,338,333,334,335,336,337,338,333,333,333,333,333,333,333,333,333,333,333,333,334,334,334,334,334,334,334,334,335,335,335,335,335,335,335,335,336,336,336,336,336,336,336,336,337,337,337,337,337,337,337,337,338,338,338,338,338,338,333,334,335,336,337,338,333,334,335,336,337,338,333,334,335,336,337,338,333,334,335,336,337,338,333,333,334,335,336,337,338,333,334,335,336,337,338,339,340,337,338,333,334,335,336,337,338,333,334,335,336,337,338,333,334,335,336,337,338,0,0,0,0,0,0,0,0,0,341,342,343,344,341,342,343,344,341,342,343,344,345,341,342,343,344,341,342,343,344,341,342,343,344,345,341,342,343,344,345,341,342,343,344,345,341,342,343,344,345,345,341,342,343,344,345,345,341,342,343,344,341,342,343,344,341,342,343,344,0,0,0,0,0,200,201,202,200,201,202,205,346,205,205,200,201,202,200,201,202,346,200,201,202,200,201,202,200,201,202,205,346,200,0,200,200,205,0,205,205,205,205,205,205,0,200,201,202,200,205,200,201,202,200,201,202,200,201,202,200,201,202,346,346,346,346,346,0,0,0,0,0,210,211,212,213,214,210,211,212,213,214,210,211,212,213,214,210,211,212,213,214,211,212,211,212,210,211,212,213,214,210,211,212,213,214,211,213,214,210,211,212,213,214,213,210,211,212,213,214,211,212,214,210,210,211,212,213,214,210,211,212,213,214,210,211,212,213,214,210,211,212,213,214,215,216,218,220,221,222,224,216,0,0,0,0,0,0,0,0,0,0,0,0,0,228,0,0,146,347,348,0,0,0,0,0,228,0,0,0,0,0,349,0,0,0,350,204,215,228,216,217,230,218,219,220,221,222,223,224,225,226,227,204,215,228,216,217,230,218,219,220,221,222,223,224,225,226,227,351,351,216,217,218,219,220,221,222,223,224,225,226,227,216,217,218,219,220,221,222,223,224,225,226,227,215,216,218,219,228,216,217,228,215,216,218,219,228,216,217,230,218,219,220,221,222,223,224,225,226,227,204,215,228,216,217,230,218,219,220,221,222,223,224,225,226,227,352,352,352,352,217,217,217,349,349,348,218,219,204,215,228,216,217,230,218,219,220,221,222,223,224,225,226,227,204,230,228,228,228,228,353,349,228,228,351,349,349,347,220,221,222,224,225,227,227,228,217,219,225,227,204,230,228,215,216,218,219,229,217,218,219,228,217,229,229,217,217,0,0,0,0,0,146,223,226,0,0,349,349,228,228,228,228,217,228,228,217,228,228,352,352,352,216,217,218,219,220,221,222,223,224,225,226,227,352,204,215,228,216,217,230,218,219,220,221,222,223,224,225,226,227,204,215,228,216,217,230,218,219,220,221,222,223,224,225,226,227,204,215,228,216,217,230,218,219,220,221,222,223,224,225,226,227,228,349,349,241,242,243,244,0,0,0,0,0,0,0,0,0,157,0,0,0,0,0,0,157,241,242,243,244,232,233,234,236,354,237,240,238,157,239,241,242,243,244,232,233,234,236,354,237,240,238,157,239,232,233,234,236,237,238,157,232,233,234,236,237,238,157,239,235,354,238,232,238,157,232,233,234,236,237,238,157,239,241,242,243,244,232,233,234,236,354,237,240,238,157,239,234,157,239,239,0,241,242,243,244,232,233,234,236,354,237,240,238,157,239,236,240,232,233,234,232,233,234,240,238,239,237,232,240,233,233,233,234,240,240,241,242,243,244,234,235,354,233,233,233,239,232,233,234,236,237,238,157,241,242,243,244,232,233,234,236,354,237,240,238,157,239,241,242,243,244,232,233,234,236,354,237,240,238,157,239,241,242,243,244,232,233,234,236,354,237,240,238,157,239,240,233,234,240,235,354,239,355,356,356],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[[2,[3]]],[[2,[3]]]],[[[4,[3]]],[[4,[3]]]],[[]],[[]],0,[[]],[[]],[[[2,[5]],6],7],[[[4,[5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[12,13,13]],[[]],[[14,15],[[1,[[16,[15]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[],17],[[17,9],[[17,[9]]]],[[[19,[18]]],9],[20,20],[21,21],[22,22],[[[19,[[0,[3,18]]]]],[[19,[[0,[3,18]]]]]],[12,12],[[[23,[3]]],[[23,[3]]]],[[[24,[3]]],[[24,[3]]]],[14,14],[[[25,[3]]],[[25,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[20,9],22],[9],[[16,16],16],[[16,16],16],[[26,16,16],16],[[27,16,16],16],[[],20],[[],12],[[],14],[[20,9],28],[[20,20],8],[23,15],[24,13],[25,13],0,[[14,15],[[1,[15]]]],[29,1],[9,[[16,[9]]]],[[[30,[5]],6],7],[[20,6],7],[[21,6],7],[[22,6],7],[[[19,[[0,[5,18]]]],6],7],[[12,6],7],[[[23,[5]],6],7],[[[24,[5]],6],7],[[[17,[5]],6],7],[[14,6],7],[[[25,[5]],6],7],[[31,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[18]]]],[32,14],0,[[17,9]],[[]],0,[9],[[14,15],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],8],[[9,9],8],[[[19,[18]],9],8],[[]],[[]],[[]],[9],[9],[[]],[[]],[26],[27],0,[[],33],[[],34],[[],35],[9,30],[[],12],[[],23],[[],24],[9,36],[[],14],[[],25],[[],26],[[],27],[21,1],[22,1],[[]],[34],[36,13],[[]],[34],[[]],[[]],[[]],[33],[35],[[20,9],28],[9,16],[9],[29,9],[9],[[12,13],13],[[14,15]],[9],[29,1],[29,9],[[],16],[[],8],[[],8],[9,[[16,[9]]]],[30,[[1,[9]]]],[[9,9],31],[[9,9],31],[9,21],[29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[31,9,9]],[[]],[[]],[[]],[[]],[26],[27],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[37,37],[38,38],[39,39],[40,40],[41,41],[[[42,[3]]],[[42,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],39],[[],42],0,0,0,[37],[38],[39],[[42,32]],[37],[38],[37],[38],[37],[[37,6],7],[[38,6],7],[[39,6],7],[[40,6],7],[[41,6],7],[[[42,[5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[37,9],[[1,[13]]]],[[38,9],[[1,[13]]]],[[37,13,9]],[[38,9,13]],[[39,13,13]],[42],[[37,13,9]],[[38,9,13]],[[37,13,9,9]],[[38,9,13,9]],[[37,13,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[41,9],[[1,[[16,[9]]]]]],[[],9],[[9,9,43],9],[[9,9,43],9],[[],9],[42,9],[37,9],[9,37],[9,38],[[],39],[[],40],[[],41],[[],42],[37,[[1,[13]]]],[[38,13],[[1,[9]]]],[[39,13],13],[[40,13],13],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[44,8],[45,8],[46,8],[47,8],[48,8],[49,8],[50,8],[51,8],[52,8],[53,8],[9,8],[[54,9],8],[[55,9],9],[[56,9]],[[57,9]],[[58,9,9]],[[[59,[0]]]],[[[59,[[59,[0]]]]]],[[[59,[[59,[[59,[0]]]]]]]],[[[59,[[59,[[59,[[59,[0]]]]]]]]]],[[57,9]],[[58,9,9]],[60],[61],[[62,13]],[[62,13]],[[60,9]],[[61,9]],[[62,13]],[[62,13]],[[[63,[43]]],[[64,[9,[16,[9]]]]]],[65,[[64,[9,[16,[9]]]]]],[66,[[64,[9,[16,[9]]]]]],[[],67],[68,67],[[60,60]],[69],0,[70,1],[[],9],[54,9],[[71,71]],[[71,71]],[[71,71]],[[71,71]],[[71,71]],[[71,71]],[[71,71]],[[71,71]],[[71,71]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[72],[73],[60],[61],[74],[75],[62],[62],[57,57],[58,58],[59,59],[76,76],[77,77],[78,78],[79,79],[69,69],[80,80],[81,81],[70,70],[65,65],[[[82,[3,3]]],[[82,[3,3]]]],[[[44,[3,3]]],[[44,[3,3]]]],[[[45,[3,3]]],[[45,[3,3]]]],[[[46,[3,3]]],[[46,[3,3]]]],[[[47,[3,3,3,3,3]]],[[47,[3,3,3,3,3]]]],[[[48,[3,3,3,3,3]]],[[48,[3,3,3,3,3]]]],[[[49,[3,3,3,3,3,3]]],[[49,[3,3,3,3,3,3]]]],[[[50,[3]]],[[50,[3]]]],[[[51,[3]]],[[51,[3]]]],[[[52,[3]]],[[52,[3]]]],[[[53,[3]]],[[53,[3]]]],[54,54],[71,71],[[[83,[3]]],[[83,[3]]]],[[[84,[3]]],[[84,[3]]]],[[[60,[3]]],[[60,[3]]]],[[[61,[3]]],[[61,[3]]]],[[[85,[3]]],[[85,[3]]]],[73,73],[[[74,[3,3]]],[[74,[3,3]]]],[[[75,[3]]],[[75,[3]]]],[62,62],[72,72],[66,66],[55,55],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[71,71],86],[75,8],[74,8],[71,15],[71,15],0,[67],[[68,67]],[[],59],[[],76],[[],81],[[],70],[[],87],[[],88],[[],68],[[],52],[[],53],[[],71],[[],60],[[],61],[[],85],[[],74],[[],75],[[],62],[[],82],[[],82],0,[60,[[89,[9]]]],[74],[75],[87],[88],[68],[72,16],[[71,71],8],[[60,32]],[[60,32]],[[61,32]],[[61,32]],[[74,32]],[[75,32]],[[[63,[43]],9],9],[[65,9],9],[72,[[10,[9,9]]]],[[66,9],9],[[72,9],[[10,[9,9]]]],[[[63,[43]],9],[[90,[0]]]],[[[63,[43]],9],[[91,[0]]]],[[56,6],7],[[57,6],7],[[58,6],7],[[59,6],7],[[76,6],7],[[77,6],7],[[78,6],7],[[79,6],7],[[69,6],7],[[80,6],7],[[81,6],7],[[70,6],7],[[87,6],7],[[88,6],7],[[65,6],7],[[[68,[5]],6],7],[[82,6],7],[[[44,[5,5]],6],7],[[[45,[5,5]],6],7],[[[46,[5,5]],6],7],[[[47,[5,5,5,5,5]],6],7],[[[48,[5,5,5,5,5]],6],7],[[[49,[5,5,5,5,5,5]],6],7],[[[50,[5]],6],7],[[[51,[5]],6],7],[[[52,[5]],6],7],[[[53,[5]],6],7],[[54,6],7],[[71,6],7],[[[83,[5]],6],7],[[84,6],7],[[60,6],7],[[61,6],7],[[[85,[5]],6],7],[[73,6],7],[[[74,[5,5]],6],7],[[[75,[5]],6],7],[[62,6],7],[[72,6],7],[[66,6],7],[[55,6],7],[[56,9,9]],[[[57,[92]],9,9]],[[58,9,9,9,9]],[[[76,[[76,[[76,[[76,[0]]]]]]]]]],[[[76,[0]]]],[[[76,[[76,[0]]]]]],[[[76,[[76,[[76,[0]]]]]]]],[[77,9,9]],[[78,9,9]],[[79,9,9]],[69],[80],[87],[82],[78],[79],[69],[80],[81],[70],[[77,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],56],[32,54],[[],83],[[],84],[32,60],[32,60],[32,61],[32,61],[32,74],[32,75],[[],57],[16,78],[16,69],[70,1],[[[57,[92]],9]],[[58,9,9]],[[78,9]],[[79,9]],[[69,9]],[[80,9]],[[87,9],1],[88,1],[[71,9],8],[60,9],[61,9],[74,1],[[65,9,9],1],[88,1],[[88,9],1],[74,1],[75,1],[75,1],[74,1],[74,1],[75,1],[[65,9]],[[],50],[[],51],[[],50],[[],51],[71],[77,9],[[77,9]],[[],[[1,[9]]]],[83,[[1,[9]]]],[84,[[1,[9]]]],[[],9],[83,9],[84,9],[[]],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[[87,9]],[88,1],[85],[74],[75],[72,[[16,[9]]]],[[72,9],[[16,[9]]]],[[72,9,9],9],[74],[75],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81,8],[70,8],[87,8],[88,8],[60,8],[61,8],[[65,9,9],8],0,[60,[[93,[9]]]],[61,[[94,[9]]]],[74,94],[75,95],[74,96],[60,[[97,[9]]]],[61,[[95,[9]]]],[74,95],[81,1],[81,9],[70,9],[87,9],[88,9],[60,9],[61,9],[[],50],[[],51],[[],50],[[],51],[[[57,[98]]],9],[82,64],[[[63,[43]],9],[[16,[9]]]],[[65,9],[[16,[9]]]],[[66,9],[[16,[9]]]],[62],[62,13],[[87,9]],[9,57],[[9,9],58],[[],[[59,[[59,[[59,[[59,[0]]]]]]]]]],[[],[[59,[[59,[[59,[0]]]]]]]],[[],[[59,[[59,[0]]]]]],[[],[[59,[0]]]],[[],[[76,[[76,[[76,[[76,[0]]]]]]]]]],[[],[[76,[[76,[[76,[0]]]]]]]],[[],[[76,[[76,[0]]]]]],[[],[[76,[0]]]],[16,77],[[],99],[9,78],[9,79],[[9,43,43],[[63,[43]]]],[9,69],[9,80],[[],81],[[],70],[[],87],[[],88],[9,65],[[],68],[[],82],[[],47],[[],48],[[],49],[[],52],[[],53],[9,71],[[],60],[[],61],[[],85],[9,73],[[],74],[[],75],[[],62],[9,72],[9,66],[[[16,[[0,[3,100]]]],9],55],[[],1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[53,1],[[72,9,9],[[1,[9]]]],[72,9],[71],[71],[9,71],[[71,71],[[1,[86]]]],[81,1],[70,1],[70,1],[74,1],[75,1],[74,1],[75,1],[[78,9,9],[[1,[9]]]],[[79,9,9],[[1,[9]]]],[69,[[1,[9]]]],[80,[[1,[9]]]],[87,[[1,[9]]]],[81],[70],[70],[[55,[101,[9]],9],9],[[55,[101,[9]],9],9],[85,1],[[99,101,101],16],0,[61,[[102,[9]]]],0,[[55,9,[101,[9]]],9],[9,9],[9,9],[9,9],[9,9],[[54,9],9],[[55,9,[101,[9]]],9],[[55,[101,[9]],[101,[9]]],9],[[87,9],1],[88,1],[60,8],[61,8],[74],[75],[[88,9],1],[[60,9],9],[[61,9],9],[87],[[[63,[43]]],[[16,[9]]]],[65,[[16,[9]]]],[66,[[16,[9]]]],[[87,9]],[[87,9]],[[78,9,9],[[1,[9]]]],[[79,9,9],[[1,[9]]]],[69,[[1,[9]]]],[80,[[1,[9]]]],[87,[[1,[9]]]],[[82,9]],[[82,9]],[[[63,[43]],9,9],8],[[66,9,9],8],[[55,9,9],[[1,[9]]]],[9,[[1,[9]]]],[9,[[1,[9]]]],[[54,9],[[1,[9]]]],[9,[[1,[9]]]],[9,[[1,[9]]]],[[54,9],[[1,[9]]]],[[[57,[92]],9]],[[58,9,9]],[[78,9]],[[79,9]],[[69,9]],[[80,9]],[[71,9,8]],[[62,13]],[[71,9]],[[71,9]],[[71,9]],[[71,9]],[[71,9]],[[71,9]],[[],9],[[[63,[43]],9],9],[[65,9],9],[83,9],[84,9],[[66,9],9],[[62,13,13]],[82],[82],[[],16],[9,16],[[],16],[9,16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[63,[43]],9,9],8],[[65,9,9],8],[[66,9,9],8],[[57,9]],[[58,9,9]],[[[59,[[59,[[59,[0]]]]]]]],[[[59,[[59,[[59,[[59,[0]]]]]]]]]],[[[59,[[59,[0]]]]]],[[[59,[0]]]],[[[76,[[76,[[76,[[76,[0]]]]]]]]]],[[[76,[[76,[[76,[0]]]]]]]],[[[76,[[76,[0]]]]]],[[[76,[0]]]],[[78,9,9]],[[79,9,9]],[[69,9]],[[80,9]],[87],[[73,9,9,13,13]],[[73,103,9,13,13]],[[13,9],62],[60,[[104,[9]]]],[61,[[105,[9]]]],[74,105],[74,106],[9,87],[9,88],[9,68],[9,60],[[9,9],72],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],86],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[107,107,107],108],[[109,110],108],[[111,110],108],[[107,107,107],108],[[[112,[3]]],[[112,[3]]]],[108,108],[113,113],[109,109],[111,111],[[]],[[]],[[]],[[]],[[]],[[[16,[110]]],114],[[112,112],86],[[108,108],86],[[113,110],8],[[[16,[110]]],114],[[[16,[110]]],[[16,[110]]]],[[113,113],1],[[111,111],[[1,[110]]]],[[],[[112,[115]]]],[109,110],[111,110],[[111,111],114],[[109,110],114],[[111,110],114],[[112,112],8],[[108,108],8],[[113,113],8],[[109,109],8],[[111,111],8],[[[112,[5]],6],7],[[108,6],7],[[113,6],7],[[109,6],7],[[111,6],7],[[]],[[]],[[]],[[]],[[]],[108],[[111,111],8],[[111,110],8],[[]],[[]],[[]],[[]],[[]],[[109,109],8],[[111,111],8],[[109,109],8],[[111,111],8],[[110,114],113],[[110,110],109],[[110,110],111],[[112,112],[[1,[86]]]],[[108,108],[[1,[86]]]],[[109,110],110],[[111,110],110],[[109,110],110],[[111,110],110],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[116,9,8,9,8]],[[117,9,9,13]],[[117,9,9]],[[117,9,9,9,9,15]],[[117,9,9,9,9,15]],[[118,9,9]],[[119,9,9]],[[120,9,9]],[[121,9,9,15]],[[122,9,9,15,13]],[[116,9,9]],[[116,9,9]],[[119,9,9]],[[[123,[0]]],[[0,[0]]]],[[[123,[0]]],[[0,[0]]]],[[]],[124],[125],[[[123,[0]]]],[[[123,[0]]]],[[126,9],[[128,[127]]]],[126],[[]],[126],[[]],[124],[125],[[119,9],16],0,[[]],[129],[130],[[]],[124],[125],[[[123,[0]]]],[[[123,[0]]]],[126],[8,1],[8,1],[8,1],[8,1],[[]],[[]],[[]],[[]],[[126,9],[[16,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[118],[[121,131],132],[[122,131],133],[[9,9],121],[[9,9],122],[9,118],[[9,9],118],[[132,9,15,15]],[119,119],[120,120],[134,134],[[[135,[3]]],[[135,[3]]]],[[[136,[3,3]]],[[136,[3,3]]]],[[[129,[3,3]]],[[129,[3,3]]]],[[[130,[3,3,3]]],[[130,[3,3,3]]]],[[[123,[3]]],[[123,[3]]]],[121,121],[132,132],[122,122],[117,117],[137,137],[138,138],[139,139],[127,127],[[[126,[3]]],[[126,[3]]]],[140,140],[116,116],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[135,[141]],135],86],[[[136,[141,141]],136],86],[[[129,[141,141]],129],86],[[[130,[141,141,141]],130],86],[[137,137],86],[[138,138],86],[[139,139],86],[[127,127],86],[140,[[16,[[16,[9]]]]]],[[]],[126],[[9,16],126],[[9,16],[[126,[137]]]],[[9,16],[[126,[138]]]],[[9,16],[[126,[139]]]],[[]],[124],[125],[123],[126],[[],119],[[],117],[[],127],[[126,9],[[16,[9]]]],[[126,9],[[16,[8]]]],[[]],[[]],[[]],[[]],[[9,9],16],[[]],[134,128],0,[134,9],[126,9],[[]],[136],[130],[127],0,[[]],[126],[[]],[126],[[]],[[]],[[[135,[142]],135],8],[[[136,[142,142]],136],8],[[[129,[142,142]],129],8],[[[130,[142,142,142]],130],8],[[137,137],8],[[138,138],8],[[139,139],8],[[127,127],8],[[],9],[126,9],0,[[]],[[126,16]],[126],[[121,32]],[[122,32]],[123,9],[[119,6],7],[[120,6],7],[[134,6],7],[[[135,[5]],6],7],[[[136,[5,5]],6],7],[[[129,[5,5]],6],7],[[[130,[5,5,5]],6],7],[[[123,[5]],6],7],[[121,6],7],[[132,6],7],[[122,6],7],[[133,6],7],[[117,6],7],[[137,6],7],[[138,6],7],[[139,6],7],[[127,6],7],[[[126,[5]],6],7],[[140,6],7],[[116,6],7],[126],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],135],[143],[[]],[[],136],[[]],[[],129],[[]],[[],130],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],120],[[9,16],134],[[9,16],126],[140,144],[121,131],[122,131],[[132,9],15],[[133,9],15],0,[140,8],[[[135,[145]]]],[[[136,[145,145]]]],[[[129,[145,145]]]],[[[130,[145,145,145]]]],[137],[138],[139],[127],0,[120],0,[[134,9]],[[140,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[120],0,[129,129],[130,130],[[132,9,9],15],[[132,9,9,15],15],[120],[120,16],[[133,9,9]],[[133,9,9,15]],[[132,9],[[16,[8]]]],[120,16],[[134,9],1],[[134,43],[[16,[8]]]],[120],[123,1],[[[147,[146,146]]],1],[[[148,[146,146]]],1],[149,1],[150,1],[[]],[[]],[[]],[[]],[[9,9,8],[[147,[146,146]]]],[9,124],[[],125],[[9,9],[[148,[146,146]]]],[[],151],[[],152],[153,154],[9,118],[[9,9],149],[9,150],[9,119],[[9,9],120],[9,134],[[9,9],123],[[9,9],121],[[9,9],122],[[9,9],117],[[9,9],127],[144,140],[9,116],[[9,9],[[123,[0]]]],[[9,9],[[123,[0]]]],[[9,9],118],[151,1],[152,1],0,[[[135,[155]],135],[[1,[86]]]],[[[136,[155,155]],136],[[1,[86]]]],[[[129,[155,155]],129],[[1,[86]]]],[[[130,[155,155,155]],130],[[1,[86]]]],[[137,137],[[1,[86]]]],[[138,138],[[1,[86]]]],[[139,139],[[1,[86]]]],[[127,127],[[1,[86]]]],[[116,9]],[[116,9]],[140,9],[117],[[]],[[]],[[]],[[]],0,0,[144,156],[153,156],[131,156],[[[126,[138]]],156],[[[126,[137]]],156],[[[126,[139]]],156],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[126,[[16,[9]]]],[153,157],[[[126,[138]]],157],[[153,9],[[16,[15]]]],[[[126,[138]],9],[[16,[15]]]],[[153,9]],[[[126,[138]],9]],[[153,9]],[[[126,[138]],9]],[[126,9]],[[153,9],[[16,[15]]]],[[[126,[138]],9],[[16,[15]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[116,[[1,[[16,[8]]]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[123,9]],[[]],[124],[125],[119,[[101,[9]]]],[134,[[101,[9]]]],[123],[126,[[101,[9]]]],[126],[134,9],[126,9],[[]],[135],[136],[129],[130],[127],[[]],[124],[125],[123],[126],[[]],[124],[125],[123],[126],[[]],[[]],[[],9],[126,9],0,[[]],[124],[[124,16]],[125],[[123,16]],[126],[[126,16]],[[]],[[]],[[153,9,43],16],[[[126,[138]],9,43],16],0,[[[16,[9]]],117],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[158],[158],[158],[158],[[158,158]],[[158,158]],[[158,158]],[[158,158]],[[159,159]],[[160,160]],[[158,158]],[158],[[158,158]],[158],[[[160,[[0,[3,161,162,163]]]],[0,[3,161,162,163]]],[[0,[3,161,162,163]]]],[[],16],[[[0,[3,164]],9,[0,[3,164]]],[[0,[3,164]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[158,158,9]],[[15,15,165],8],[[[166,[3]]],[[166,[3]]]],[[[167,[3]]],[[167,[3]]]],[[[168,[3]]],[[168,[3]]]],[158,158],[[[159,[3]]],[[159,[3]]]],[[[160,[3]]],[[160,[3]]]],[169,169],[170,170],[171,171],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[166,9,9],172],[[167,9,9],172],[[]],[[]],[[170,15],15],[[171,173],173],[[158,9],158],[[158,9],158],0,0,0,[[],167],[[],[[158,[115,115]]]],[[],[[160,[115]]]],[[],170],[159],[158,158],[[15,15,15],[[1,[15]]]],[[15,15,15],[[1,[15]]]],[158],[[158,158]],[[158,158]],[[158,158]],[[158,158]],[158],[158],[158],[[160,160]],[[158,158]],[[158,158]],[158],[158],[[158,158]],[15,[[16,[15]]]],[[170,15],[[16,[15]]]],[[171,173],[[16,[173]]]],[[158,158],8],[[[159,[142]],159],8],[[[160,[142]],160],8],[9,9],[158],[158,158],[[158,9],158],[[13,13]],[[13,13]],[[13,13]],[[],159],0,[[167,9]],[[15,15,15,15],15],[[13,13,13,13,15],13],[[13,13,13,13,15,[101,[13]]],13],[[[166,[5]],6],7],[[[167,[5]],6],7],[[[168,[5]],6],7],[[[158,[5,5]],6],7],[[[159,[5]],6],7],[[[160,[5]],6],7],[[169,6],7],[[170,6],7],[[171,6],7],[[]],[[]],[[]],[[]],[[]],[16,158],[143],[[]],[[],158],[[]],[[]],[[]],[[]],[[]],[32,158],[16,158],[[[16,[16]]],159],[16,160],[[15,15],15],[[15,15],15],[[169,9],9],[174,16],[[166,9,9],172],[[158,9]],[159],[[159,9]],[[160,9]],[[158,9]],[[159,9]],[159],[[160,9]],[158,158],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[158],[[166,9],172],[168,172],[[158,9],158],0,[159,[[1,[159]]]],[9],[9],[9],[9],[[170,15],8],[[171,173],8],[158,128],[158,175],[[16,9]],[[158,16,9]],[172,172],[[166,9,172],172],[[],[[16,[172]]]],[[15,15],15],[[],9],[[],9],[[],9],[[],9],[158,9],[160,9],[[],1],[[158,9],158],[15,8],[[15,165],8],[[15,15],15],[[15,15],15],[[15,15],15],[9,[[64,[9,13]]]],[[158,158]],[[158,158]],[158],[[158,158]],[158],[158],[[158,158]],[158],[[159,159]],[[160,160]],[158],[[158,158]],[[158,158]],[158],[[]],[[]],[[]],[[]],[158,16],[158],[158],[9,166],[[],167],[172,168],[3,[[159,[3]]]],[9,169],[15,170],[173,171],[158,158],[[],158],[[],[[160,[[0,[161,176]]]]]],[[166,9,9],172],[[168,9],172],[[158,9,9],158],[[159,9],159],[[[160,[[0,[177,161,176,162,163]]]],9],[[160,[[0,[177,161,176,162,163]]]]]],[[168,103],172],[[158,9],158],[[158,9],158],[15,16],[[170,15],16],[[171,173],16],[15,[[16,[15]]]],[170],[[170,15]],[15,15],[9,158],[159,9],[[158,158]],[[158,158]],[[158,158]],[[158,158]],[[160,160]],[[158,158]],[[158,158]],[[170,15]],[[158,9]],[[158,9],158],[158,158],[[159,8]],0,[[158,9]],[[158,9]],[[158,9]],[[158,9]],[[158,9]],[[158,9]],[159,[[1,[16]]]],[[158,9],[[1,[158]]]],[[],1],[[158,158]],[[158,158]],[158],[158],[158],[[158,158]],[158],[[158,158]],[[159,159]],[[160,160]],[[158,158]],[158],[[158,158]],[158],[[[158,[172]],172,166],[[158,[172]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[9],[9],0,[[171,173]],[158],[[158,9]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],158],[[],160],[9,158],[[],159],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[107,[114]]],114],[178,178],[179,179],[180,180],[[[181,[103]]],[[181,[103]]]],[[[181,[13]]],[[181,[13]]]],[[[181,[182]]],[[181,[182]]]],[[[181,[183]]],[[181,[183]]]],[[[181,[184]]],[[181,[184]]]],[[[181,[185]]],[[181,[185]]]],[[[186,[182]]],[[186,[182]]]],[[[186,[184]]],[[186,[184]]]],[[[186,[13]]],[[186,[13]]]],[[[186,[183]]],[[186,[183]]]],[[[186,[185]]],[[186,[185]]]],[[[186,[103]]],[[186,[103]]]],[187,187],[188,188],[[]],[[]],[[]],[179,179],[180,180],[[]],[179,179],[180,180],[[172,172]],[[172,172]],[[172,172]],[[172,172]],[[107,107]],[[107,107]],[107],[107],[107],[107],[[107,107]],[[107,107]],[[178,178]],[[178,114]],[[179,179]],[[180,180]],[[[181,[189]],[181,[189]]]],[[[181,[173]],[181,[173]]]],[[[181,[103]],[181,[103]]]],[[[181,[174]],[181,[174]]]],[[[181,[9]],[181,[9]]]],[[[181,[182]],[181,[182]]]],[[[181,[13]],[181,[13]]]],[[[181,[190]],[181,[190]]]],[[[181,[15]],[181,[15]]]],[[[181,[185]],[181,[185]]]],[[[181,[183]],[181,[183]]]],[[[181,[184]],[181,[184]]]],[[[186,[174]],[186,[174]]]],[[[186,[182]],[186,[182]]]],[[[186,[183]],[186,[183]]]],[[[186,[184]],[186,[184]]]],[[[186,[103]],[186,[103]]]],[[[186,[190]],[186,[190]]]],[[[186,[15]],[186,[15]]]],[[[186,[173]],[186,[173]]]],[[[186,[189]],[186,[189]]]],[[[186,[9]],[186,[9]]]],[[[186,[185]],[186,[185]]]],[[[186,[13]],[186,[13]]]],[[187,114]],[[187,187]],[[188,188]],[[172,172]],[[172,172]],[107],[107],[[107,107]],[[107,107]],[[[181,[182]],[181,[182]]]],[[[181,[190]],[181,[190]]]],[[[181,[183]],[181,[183]]]],[[[181,[173]],[181,[173]]]],[[[181,[185]],[181,[185]]]],[[[181,[103]],[181,[103]]]],[[[181,[9]],[181,[9]]]],[[[181,[15]],[181,[15]]]],[[[181,[174]],[181,[174]]]],[[[181,[184]],[181,[184]]]],[[[181,[13]],[181,[13]]]],[[[181,[189]],[181,[189]]]],[[[186,[184]],[186,[184]]]],[[[186,[173]],[186,[173]]]],[[[186,[13]],[186,[13]]]],[[[186,[174]],[186,[174]]]],[[[186,[189]],[186,[189]]]],[[[186,[190]],[186,[190]]]],[[[186,[15]],[186,[15]]]],[[[186,[9]],[186,[9]]]],[[[186,[182]],[186,[182]]]],[[[186,[183]],[186,[183]]]],[[[186,[185]],[186,[185]]]],[[[186,[103]],[186,[103]]]],[[188,188]],[[[107,[114]]],114],[[]],[179,179],[180,180],[[]],[179,179],[180,180],[[]],[179,179],[180,180],[[]],[[179,179],179],[[180,180],180],[[]],[179,179],[180,180],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[181,181]],[[186,186]],[[181,181]],[[186,186]],[[181,181]],[[186,186]],[[181,181]],[[186,186]],[[181,181]],[[186,186]],[[181,181]],[[186,186]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[179,179],[180,180],[[]],[179,179],[180,180],[[],191],[179,191],[180,191],[172,172],[[[165,[3]]],[[165,[3]]]],[[[107,[3]]],[[107,[3]]]],[178,178],[179,179],[180,180],[[[181,[3]]],[[181,[3]]]],[[[186,[3]]],[[186,[3]]]],[187,187],[[[188,[3]]],[[188,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[107,[141]],107],86],[[178,178],86],[[179,179],86],[[180,180],86],[[[181,[141]],181],86],[[[186,[141]],186],86],[[188,188],86],[[107,107],86],[107,107],[[]],[[179,179],179],[[180,180],180],[[]],[179,179],[180,180],[[]],[179,179],[180,180],[[]],[[[181,[184]]],173],[[[181,[174]]],173],[[[181,[182]]],173],[[[181,[15]]],173],[[[181,[9]]],173],[[[181,[173]]],173],[[[181,[13]]],173],[[[181,[190]]],173],[[[181,[103]]],173],[[[181,[189]]],173],[[[181,[183]]],173],[[[181,[185]]],173],[[[186,[15]]],173],[[[186,[189]]],173],[[[186,[103]]],173],[[[186,[183]]],173],[[[186,[13]]],173],[[[186,[9]]],173],[[[186,[190]]],173],[[[186,[185]]],173],[[[186,[174]]],173],[[[186,[184]]],173],[[[186,[182]]],173],[[[186,[173]]],173],[[]],[[[181,[182]]],173],[[[181,[174]]],173],[[[181,[173]]],173],[[[181,[190]]],173],[[[181,[9]]],173],[[[181,[15]]],173],[[[181,[189]]],173],[[[181,[183]]],173],[[[181,[103]]],173],[[[181,[185]]],173],[[[181,[184]]],173],[[[181,[13]]],173],[[[186,[103]]],173],[[[186,[183]]],173],[[[186,[184]]],173],[[[186,[15]]],173],[[[186,[189]]],173],[[[186,[182]]],173],[[[186,[173]]],173],[[[186,[185]]],173],[[[186,[13]]],173],[[[186,[174]]],173],[[[186,[190]]],173],[[[186,[9]]],173],[[107,107]],[[],172],[[],[[107,[115]]]],[[],178],[[],179],[[],180],[[],[[181,[115]]]],[[],[[186,[115]]]],[[],187],[[]],0,[[172,172]],[[172,172]],[[172,172]],[[172,172]],[[[165,[173]],173],173],[[[165,[174]],174],174],[[[165,[15]],15],15],[[107,107]],[107],[107],[107],[107],[[107,107]],[[107,107]],[[107,107]],[[178,178]],[[179,179]],[[180,180]],[[181,181]],[[[186,[185]],[186,[185]]]],[[[186,[184]],[186,[184]]]],[[[186,[103]],[186,[103]]]],[[[186,[15]],[186,[15]]]],[[[186,[182]],[186,[182]]]],[[[186,[9]],[186,[9]]]],[[[186,[13]],[186,[13]]]],[[[186,[183]],[186,[183]]]],[[[186,[173]],[186,[173]]]],[[[186,[189]],[186,[189]]]],[[[186,[174]],[186,[174]]]],[[[186,[190]],[186,[190]]]],[[187,187]],[[188,188]],[[172,172]],[[172,172]],[107],[[107,107]],[107],[[107,107]],[[181,181]],[[[186,[189]],[186,[189]]]],[[[186,[190]],[186,[190]]]],[[[186,[184]],[186,[184]]]],[[[186,[13]],[186,[13]]]],[[[186,[183]],[186,[183]]]],[[[186,[173]],[186,[173]]]],[[[186,[185]],[186,[185]]]],[[[186,[182]],[186,[182]]]],[[[186,[9]],[186,[9]]]],[[[186,[174]],[186,[174]]]],[[[186,[15]],[186,[15]]]],[[[186,[103]],[186,[103]]]],[[188,188]],[[]],[[]],[[179,179],179],[[180,180],180],[[[181,[15]],[181,[15]]],[[181,[15]]]],[[[181,[9]],[181,[9]]],[[181,[9]]]],[[[181,[174]],[181,[174]]],[[181,[174]]]],[[[181,[185]],[181,[185]]],[[181,[185]]]],[[[181,[184]],[181,[184]]],[[181,[184]]]],[[[181,[189]],[181,[189]]],[[181,[189]]]],[[[181,[183]],[181,[183]]],[[181,[183]]]],[[[181,[173]],[181,[173]]],[[181,[173]]]],[[[181,[190]],[181,[190]]],[[181,[190]]]],[[[181,[182]],[181,[182]]],[[181,[182]]]],[[[181,[13]],[181,[13]]],[[181,[13]]]],[[[181,[103]],[181,[103]]],[[181,[103]]]],[[[186,[174]],[186,[174]]],[[186,[174]]]],[[[186,[15]],[186,[15]]],[[186,[15]]]],[[[186,[182]],[186,[182]]],[[186,[182]]]],[[[186,[173]],[186,[173]]],[[186,[173]]]],[[[186,[184]],[186,[184]]],[[186,[184]]]],[[[186,[9]],[186,[9]]],[[186,[9]]]],[[[186,[189]],[186,[189]]],[[186,[189]]]],[[[186,[185]],[186,[185]]],[[186,[185]]]],[[[186,[13]],[186,[13]]],[[186,[13]]]],[[[186,[183]],[186,[183]]],[[186,[183]]]],[[[186,[190]],[186,[190]]],[[186,[190]]]],[[[186,[103]],[186,[103]]],[[186,[103]]]],[[[165,[15]],15]],[[[165,[174]],174]],[[[165,[173]],173]],[[107,107]],[[]],[[],1],[[]],[[],1],[[172,172],8],[[[107,[142]],107],8],[[178,178],8],[[179,179],8],[[180,180],8],[[[181,[142]],181],8],[[[186,[142]],186],8],[[187,187],8],[[188,188],8],[[]],[179,179],[180,180],[[]],[179,179],[180,180],[[]],[179,179],[180,180],[[],192],[[],192],[[]],[179,179],[180,180],[[172,6],[[10,[193]]]],[[172,6],7],[[[165,[5]],6],7],[[[107,[5]],6],7],[[178,6],7],[[178,6],7],[[179,6],7],[[179,6],7],[[180,6],7],[[180,6],7],[[181,6],7],[[181,6],7],[[186,6],7],[[186,6],7],[[187,6],7],[[187,6],7],[[188,6],7],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[]],[179,179],[180,180],[[]],[[]],[190,172],[9,172],[173,172],[174,172],[[]],[189,172],[15,172],[185,172],[184,172],[182,172],[13,172],[183,172],[103,172],[[]],[[]],[[]],[114,178],[194,179],[[]],[114,180],[[]],[173,[[181,[173]]]],[182,[[181,[182]]]],[15,[[181,[15]]]],[185,[[181,[185]]]],[[]],[103,[[181,[103]]]],[183,[[181,[183]]]],[184,[[181,[184]]]],[9,[[181,[9]]]],[189,[[181,[189]]]],[190,[[181,[190]]]],[13,[[181,[13]]]],[174,[[181,[174]]]],[189,[[186,[189]]]],[182,[[186,[182]]]],[103,[[186,[103]]]],[13,[[186,[13]]]],[9,[[186,[9]]]],[183,[[186,[183]]]],[185,[[186,[185]]]],[15,[[186,[15]]]],[[]],[184,[[186,[184]]]],[173,[[186,[173]]]],[190,[[186,[190]]]],[174,[[186,[174]]]],[114,187],[[]],[[]],[15],[15,179],[15,180],[195,[[10,[172]]]],[195,[[10,[178]]]],[195,[[10,[179]]]],[195,[[10,[180]]]],[195,[[10,[181]]]],[195,[[10,[186]]]],[195,[[10,[187]]]],[[195,173],10],[[195,173],[[10,[[181,[185]]]]]],[[195,173],[[10,[[181,[183]]]]]],[[195,173],[[10,[[181,[13]]]]]],[[195,173],[[10,[[181,[174]]]]]],[[195,173],[[10,[[181,[184]]]]]],[[195,173],[[10,[[181,[190]]]]]],[[195,173],[[10,[[181,[189]]]]]],[[195,173],[[10,[[181,[173]]]]]],[[195,173],[[10,[[181,[9]]]]]],[[195,173],[[10,[[181,[103]]]]]],[[195,173],[[10,[[181,[182]]]]]],[[195,173],[[10,[[181,[15]]]]]],[[195,173],[[10,[[186,[9]]]]]],[[195,173],[[10,[[186,[184]]]]]],[[195,173],[[10,[[186,[190]]]]]],[[195,173],[[10,[[186,[182]]]]]],[[195,173],[[10,[[186,[103]]]]]],[[195,173],[[10,[[186,[13]]]]]],[[195,173],[[10,[[186,[173]]]]]],[[195,173],[[10,[[186,[183]]]]]],[[195,173],[[10,[[186,[15]]]]]],[[195,173],[[10,[[186,[174]]]]]],[[195,173],[[10,[[186,[185]]]]]],[[195,173],[[10,[[186,[189]]]]]],0,[[]],[[[181,[189]],[181,[189]]],[[181,[189]]]],[[[181,[190]],[181,[190]]],[[181,[190]]]],[[[181,[9]],[181,[9]]],[[181,[9]]]],[[[181,[15]],[181,[15]]],[[181,[15]]]],[[[181,[174]],[181,[174]]],[[181,[174]]]],[[[181,[173]],[181,[173]]],[[181,[173]]]],[[[186,[9]],[186,[9]]],[[186,[9]]]],[[[186,[174]],[186,[174]]],[[186,[174]]]],[[[186,[15]],[186,[15]]],[[186,[15]]]],[[[186,[190]],[186,[190]]],[[186,[190]]]],[[[186,[173]],[186,[173]]],[[186,[173]]]],[[[186,[189]],[186,[189]]],[[186,[189]]]],[[]],[[]],[[[165,[15]]],15],[[[165,[173]]],173],[[[165,[174]]],174],[172],[[[107,[145]]]],[[[181,[145]]]],[[[186,[145]]]],[[]],[[179,179],179],[[180,180],180],[[],107],0,[[187,9]],[172],[188],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[172,172],[[],8],[179,8],[180,8],[[],8],[179,8],[180,8],[[],8],[[],8],[[],8],[[],8],[[],8],[179,8],[180,8],[[],8],[[[181,[185]]],8],[[[181,[183]]],8],[[[181,[184]]],8],[[[181,[182]]],8],[[[181,[103]]],8],[[[181,[13]]],8],[[[186,[13]]],8],[[[186,[182]]],8],[[[186,[103]]],8],[[[186,[185]]],8],[[[186,[183]]],8],[[[186,[184]]],8],[[],8],[179,8],[180,8],[[],8],[[],8],[[],8],[[[181,[184]]],8],[[[181,[183]]],8],[[[181,[103]]],8],[[[181,[182]]],8],[[[181,[13]]],8],[[[181,[185]]],8],[[[186,[184]]],8],[[[186,[103]]],8],[[[186,[182]]],8],[[[186,[13]]],8],[[[186,[185]]],8],[[[186,[183]]],8],[[],8],[179,8],[180,8],[[],8],[179,8],[180,8],[[],8],[[],8],[178,8],[187,8],[[]],[[]],[[]],[[[181,[13]]],173],[[[181,[174]]],173],[[[181,[182]]],173],[[[181,[185]]],173],[[[181,[183]]],173],[[[181,[103]]],173],[[[181,[15]]],173],[[[181,[184]]],173],[[[181,[173]]],173],[[[181,[189]]],173],[[[181,[9]]],173],[[[181,[190]]],173],[[[186,[185]]],173],[[[186,[190]]],173],[[[186,[183]]],173],[[[186,[173]]],173],[[[186,[15]]],173],[[[186,[182]]],173],[[[186,[189]]],173],[[[186,[9]]],173],[[[186,[184]]],173],[[[186,[174]]],173],[[[186,[13]]],173],[[[186,[103]]],173],[[]],[179,179],[180,180],[[]],[179,179],[180,180],[[]],[[179,179],179],[[180,180],180],[[]],[179,179],[180,180],[[]],[179,179],[180,180],[[]],[[179,179],179],[[180,180],180],[[]],[[],178],[[],179],[[],180],[[],181],[[],186],[[],188],[[]],[[179,179],179],[[180,180],180],[[]],[[],178],[[],179],[[],180],[[],181],[[],186],[[],188],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[[]],[[]],0,[[172,172]],[[172,172]],[[172,172]],[[172,172]],[[107,107]],[107],[[107,107]],[107],[107],[[107,107]],[107],[[107,107]],[[178,114]],[[178,178]],[[179,179]],[[180,180]],[[[181,[184]],[181,[184]]]],[[[181,[185]],[181,[185]]]],[[[181,[9]],[181,[9]]]],[[[181,[183]],[181,[183]]]],[[[181,[13]],[181,[13]]]],[[[181,[174]],[181,[174]]]],[[[181,[182]],[181,[182]]]],[[[181,[103]],[181,[103]]]],[[[181,[190]],[181,[190]]]],[[[181,[15]],[181,[15]]]],[[[181,[173]],[181,[173]]]],[[[181,[189]],[181,[189]]]],[[[186,[103]],[186,[103]]]],[[[186,[183]],[186,[183]]]],[[[186,[174]],[186,[174]]]],[[[186,[185]],[186,[185]]]],[[[186,[184]],[186,[184]]]],[[[186,[9]],[186,[9]]]],[[[186,[189]],[186,[189]]]],[[[186,[173]],[186,[173]]]],[[[186,[190]],[186,[190]]]],[[[186,[15]],[186,[15]]]],[[[186,[13]],[186,[13]]]],[[[186,[182]],[186,[182]]]],[[187,114]],[[187,187]],[[188,188]],[[]],[[179,179,179],179],[[180,180,180],180],[[172,172]],[[172,172]],[[107,107]],[107],[107],[[107,107]],[[[181,[173]],[181,[173]]]],[[[181,[103]],[181,[103]]]],[[[181,[183]],[181,[183]]]],[[[181,[184]],[181,[184]]]],[[[181,[13]],[181,[13]]]],[[[181,[9]],[181,[9]]]],[[[181,[185]],[181,[185]]]],[[[181,[189]],[181,[189]]]],[[[181,[174]],[181,[174]]]],[[[181,[190]],[181,[190]]]],[[[181,[182]],[181,[182]]]],[[[181,[15]],[181,[15]]]],[[[186,[9]],[186,[9]]]],[[[186,[13]],[186,[13]]]],[[[186,[182]],[186,[182]]]],[[[186,[184]],[186,[184]]]],[[[186,[174]],[186,[174]]]],[[[186,[189]],[186,[189]]]],[[[186,[190]],[186,[190]]]],[[[186,[185]],[186,[185]]]],[[[186,[103]],[186,[103]]]],[[[186,[173]],[186,[173]]]],[[[186,[15]],[186,[15]]]],[[[186,[183]],[186,[183]]]],[[188,188]],[172],[172],[107],[107],[178],[179],[180],[[[181,[13]]]],[[[181,[185]]]],[[[181,[103]]]],[[[181,[182]]]],[[[181,[184]]]],[[[181,[183]]]],[[[186,[13]]]],[[[186,[103]]]],[[[186,[184]]]],[[[186,[183]]]],[[[186,[182]]]],[[[186,[185]]]],[187],[188],[[],172],[15,[[165,[15]]]],[173,[[165,[173]]]],[174,[[165,[174]]]],[[],107],[[],188],[[],172],[[],188],[107],[181],[186],0,[[]],[[],172],[[],107],[[],179],[[],180],[[],181],[[],186],[[],188],[[[107,[155]],107],[[1,[86]]]],[[178,178],[[1,[86]]]],[[179,179],[[1,[86]]]],[[180,180],[[1,[86]]]],[[[181,[155]],181],[[1,[86]]]],[[[186,[155]],186],[[1,[86]]]],[[187,187],[[1,[86]]]],[[188,188],[[1,[86]]]],[[114,114],[[107,[114]]]],[173],[[172,9],172],[[[181,[182]],173],[[181,[182]]]],[[[181,[183]],173],[[181,[183]]]],[[[181,[13]],173],[[181,[13]]]],[[[181,[173]],173],[[181,[173]]]],[[[181,[15]],173],[[181,[15]]]],[[[181,[190]],173],[[181,[190]]]],[[[181,[185]],173],[[181,[185]]]],[[[181,[9]],173],[[181,[9]]]],[[[181,[174]],173],[[181,[174]]]],[[[181,[184]],173],[[181,[184]]]],[[[181,[103]],173],[[181,[103]]]],[[[181,[189]],173],[[181,[189]]]],[[[186,[190]],173],[[186,[190]]]],[[[186,[103]],173],[[186,[103]]]],[[[186,[185]],173],[[186,[185]]]],[[[186,[174]],173],[[186,[174]]]],[[[186,[183]],173],[[186,[183]]]],[[[186,[189]],173],[[186,[189]]]],[[[186,[173]],173],[[186,[173]]]],[[[186,[13]],173],[[186,[13]]]],[[[186,[15]],173],[[186,[15]]]],[[[186,[9]],173],[[186,[9]]]],[[[186,[184]],173],[[186,[184]]]],[[[186,[182]],173],[[186,[182]]]],[[]],[[179,179],179],[[180,180],180],[182],[[179,182],179],[[180,182],180],[114,[[107,[114]]]],[28,172],[28,172],[28,107],[28,107],0,[[]],[179,179],[180,180],[[[165,[15]],15],15],[[[165,[174]],174],174],[[[165,[173]],173],173],[[179,179]],[[180,180]],[[181,181]],[[[186,[103]],[186,[103]]]],[[[186,[13]],[186,[13]]]],[[[186,[184]],[186,[184]]]],[[[186,[9]],[186,[9]]]],[[[186,[15]],[186,[15]]]],[[[186,[183]],[186,[183]]]],[[[186,[173]],[186,[173]]]],[[[186,[174]],[186,[174]]]],[[[186,[190]],[186,[190]]]],[[[186,[182]],[186,[182]]]],[[[186,[189]],[186,[189]]]],[[[186,[185]],[186,[185]]]],[[181,181]],[[[186,[183]],[186,[183]]]],[[[186,[15]],[186,[15]]]],[[[186,[189]],[186,[189]]]],[[[186,[174]],[186,[174]]]],[[[186,[103]],[186,[103]]]],[[[186,[173]],[186,[173]]]],[[[186,[185]],[186,[185]]]],[[[186,[13]],[186,[13]]]],[[[186,[190]],[186,[190]]]],[[[186,[9]],[186,[9]]]],[[[186,[184]],[186,[184]]]],[[[186,[182]],[186,[182]]]],[[]],[[]],[[179,179],179],[[180,180],180],[[[181,[15]],[181,[15]]],[[181,[15]]]],[[[181,[103]],[181,[103]]],[[181,[103]]]],[[[181,[173]],[181,[173]]],[[181,[173]]]],[[[181,[13]],[181,[13]]],[[181,[13]]]],[[[181,[184]],[181,[184]]],[[181,[184]]]],[[[181,[185]],[181,[185]]],[[181,[185]]]],[[[181,[183]],[181,[183]]],[[181,[183]]]],[[[181,[174]],[181,[174]]],[[181,[174]]]],[[[181,[182]],[181,[182]]],[[181,[182]]]],[[[181,[189]],[181,[189]]],[[181,[189]]]],[[[181,[190]],[181,[190]]],[[181,[190]]]],[[[181,[9]],[181,[9]]],[[181,[9]]]],[[[186,[13]],[186,[13]]],[[186,[13]]]],[[[186,[189]],[186,[189]]],[[186,[189]]]],[[[186,[15]],[186,[15]]],[[186,[15]]]],[[[186,[184]],[186,[184]]],[[186,[184]]]],[[[186,[9]],[186,[9]]],[[186,[9]]]],[[[186,[182]],[186,[182]]],[[186,[182]]]],[[[186,[183]],[186,[183]]],[[186,[183]]]],[[[186,[190]],[186,[190]]],[[186,[190]]]],[[[186,[185]],[186,[185]]],[[186,[185]]]],[[[186,[174]],[186,[174]]],[[186,[174]]]],[[[186,[173]],[186,[173]]],[[186,[173]]]],[[[186,[103]],[186,[103]]],[[186,[103]]]],[[]],[[[181,[174]]],[[181,[174]]]],[[[181,[103]]],[[181,[103]]]],[[[181,[173]]],[[181,[173]]]],[[[181,[13]]],[[181,[13]]]],[[[181,[190]]],[[181,[190]]]],[[[181,[182]]],[[181,[182]]]],[[[181,[185]]],[[181,[185]]]],[[[181,[184]]],[[181,[184]]]],[[[181,[189]]],[[181,[189]]]],[[[181,[183]]],[[181,[183]]]],[[[181,[9]]],[[181,[9]]]],[[[181,[15]]],[[181,[15]]]],[[[186,[184]]],[[186,[184]]]],[[[186,[182]]],[[186,[182]]]],[[[186,[190]]],[[186,[190]]]],[[[186,[103]]],[[186,[103]]]],[[[186,[183]]],[[186,[183]]]],[[[186,[185]]],[[186,[185]]]],[[[186,[9]]],[[186,[9]]]],[[[186,[189]]],[[186,[189]]]],[[[186,[174]]],[[186,[174]]]],[[[186,[15]]],[[186,[15]]]],[[[186,[13]]],[[186,[13]]]],[[[186,[173]]],[[186,[173]]]],[[]],[[[181,[103]],173],[[181,[103]]]],[[[181,[13]],173],[[181,[13]]]],[[[181,[185]],173],[[181,[185]]]],[[[181,[189]],173],[[181,[189]]]],[[[181,[173]],173],[[181,[173]]]],[[[181,[190]],173],[[181,[190]]]],[[[181,[184]],173],[[181,[184]]]],[[[181,[182]],173],[[181,[182]]]],[[[181,[9]],173],[[181,[9]]]],[[[181,[15]],173],[[181,[15]]]],[[[181,[183]],173],[[181,[183]]]],[[[181,[174]],173],[[181,[174]]]],[[[186,[9]],173],[[186,[9]]]],[[[186,[183]],173],[[186,[183]]]],[[[186,[182]],173],[[186,[182]]]],[[[186,[173]],173],[[186,[173]]]],[[[186,[103]],173],[[186,[103]]]],[[[186,[15]],173],[[186,[15]]]],[[[186,[13]],173],[[186,[13]]]],[[[186,[185]],173],[[186,[185]]]],[[[186,[184]],173],[[186,[184]]]],[[[186,[190]],173],[[186,[190]]]],[[[186,[174]],173],[[186,[174]]]],[[[186,[189]],173],[[186,[189]]]],[[]],[[[181,[190]],173],[[181,[190]]]],[[[181,[9]],173],[[181,[9]]]],[[[181,[183]],173],[[181,[183]]]],[[[181,[103]],173],[[181,[103]]]],[[[181,[173]],173],[[181,[173]]]],[[[181,[184]],173],[[181,[184]]]],[[[181,[174]],173],[[181,[174]]]],[[[181,[13]],173],[[181,[13]]]],[[[181,[189]],173],[[181,[189]]]],[[[181,[185]],173],[[181,[185]]]],[[[181,[182]],173],[[181,[182]]]],[[[181,[15]],173],[[181,[15]]]],[[[186,[184]],173],[[186,[184]]]],[[[186,[183]],173],[[186,[183]]]],[[[186,[9]],173],[[186,[9]]]],[[[186,[13]],173],[[186,[13]]]],[[[186,[15]],173],[[186,[15]]]],[[[186,[185]],173],[[186,[185]]]],[[[186,[189]],173],[[186,[189]]]],[[[186,[103]],173],[[186,[103]]]],[[[186,[174]],173],[[186,[174]]]],[[[186,[173]],173],[[186,[173]]]],[[[186,[190]],173],[[186,[190]]]],[[[186,[182]],173],[[186,[182]]]],[[]],[179,179],[180,180],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[15],[173],[[]],[[]],[[]],[[]],[[[181,[183]],173]],[[[181,[9]],173]],[[[181,[15]],173]],[[[181,[103]],173]],[[[181,[174]],173]],[[[181,[189]],173]],[[[181,[13]],173]],[[[181,[190]],173]],[[[181,[182]],173]],[[[181,[184]],173]],[[[181,[185]],173]],[[[181,[173]],173]],[[[186,[189]],173]],[[[186,[103]],173]],[[[186,[190]],173]],[[[186,[183]],173]],[[[186,[9]],173]],[[[186,[13]],173]],[[[186,[174]],173]],[[[186,[185]],173]],[[[186,[182]],173]],[[[186,[173]],173]],[[[186,[184]],173]],[[[186,[15]],173]],[[[181,[103]],173]],[[[181,[182]],173]],[[[181,[185]],173]],[[[181,[9]],173]],[[[181,[13]],173]],[[[181,[189]],173]],[[[181,[15]],173]],[[[181,[174]],173]],[[[181,[183]],173]],[[[181,[173]],173]],[[[181,[190]],173]],[[[181,[184]],173]],[[[186,[173]],173]],[[[186,[182]],173]],[[[186,[184]],173]],[[[186,[13]],173]],[[[186,[103]],173]],[[[186,[189]],173]],[[[186,[174]],173]],[[[186,[9]],173]],[[[186,[190]],173]],[[[186,[15]],173]],[[[186,[183]],173]],[[[186,[185]],173]],[[[181,[190]],173]],[[[181,[15]],173]],[[[181,[13]],173]],[[[181,[173]],173]],[[[181,[185]],173]],[[[181,[9]],173]],[[[181,[184]],173]],[[[181,[183]],173]],[[[181,[182]],173]],[[[181,[189]],173]],[[[181,[103]],173]],[[[181,[174]],173]],[[[186,[103]],173]],[[[186,[185]],173]],[[[186,[182]],173]],[[[186,[13]],173]],[[[186,[183]],173]],[[[186,[189]],173]],[[[186,[173]],173]],[[[186,[174]],173]],[[[186,[190]],173]],[[[186,[184]],173]],[[[186,[9]],173]],[[[186,[15]],173]],[[[181,[183]],173]],[[[181,[173]],173]],[[[181,[182]],173]],[[[181,[15]],173]],[[[181,[190]],173]],[[[181,[184]],173]],[[[181,[174]],173]],[[[181,[103]],173]],[[[181,[9]],173]],[[[181,[185]],173]],[[[181,[13]],173]],[[[181,[189]],173]],[[[186,[9]],173]],[[[186,[103]],173]],[[[186,[173]],173]],[[[186,[185]],173]],[[[186,[183]],173]],[[[186,[190]],173]],[[[186,[184]],173]],[[[186,[13]],173]],[[[186,[15]],173]],[[[186,[182]],173]],[[[186,[174]],173]],[[[186,[189]],173]],[[]],[[[181,[15]]]],[[[181,[173]]]],[[[181,[190]]]],[[[181,[9]]]],[[[181,[189]]]],[[[181,[174]]]],[[[186,[189]]]],[[[186,[174]]]],[[[186,[173]]]],[[[186,[15]]]],[[[186,[190]]]],[[[186,[9]]]],[[]],[[]],[179,179],[180,180],[[[181,[183]]],[[181,[183]]]],[[[181,[182]]],[[181,[182]]]],[[[181,[13]]],[[181,[13]]]],[[[181,[103]]],[[181,[103]]]],[[[181,[185]]],[[181,[185]]]],[[[181,[184]]],[[181,[184]]]],[[[186,[185]]],[[186,[185]]]],[[[186,[182]]],[[186,[182]]]],[[[186,[183]]],[[186,[183]]]],[[[186,[184]]],[[186,[184]]]],[[[186,[103]]],[[186,[103]]]],[[[186,[13]]],[[186,[13]]]],[[]],[179,179],[180,180],[[]],[179],[180],[[]],[179,179],[180,180],[[]],[172,[[1,[172]]]],[178,178],[179,179],[180,180],[187,187],[172,[[1,[172]]]],[[]],[[],1],[[]],[[],1],[[],1],[[172,172]],[[172,172]],[[172,172]],[[172,172]],[107],[[107,107]],[107],[[107,107]],[[107,107]],[107],[[107,107]],[107],[[178,178]],[[179,179]],[[180,180]],[[[181,[15]],[181,[15]]]],[[[181,[182]],[181,[182]]]],[[[181,[183]],[181,[183]]]],[[[181,[174]],[181,[174]]]],[[[181,[13]],[181,[13]]]],[[[181,[185]],[181,[185]]]],[[[181,[103]],[181,[103]]]],[[[181,[9]],[181,[9]]]],[[[181,[184]],[181,[184]]]],[[[181,[189]],[181,[189]]]],[[[181,[190]],[181,[190]]]],[[[181,[173]],[181,[173]]]],[[[186,[103]],[186,[103]]]],[[[186,[173]],[186,[173]]]],[[[186,[182]],[186,[182]]]],[[[186,[13]],[186,[13]]]],[[[186,[184]],[186,[184]]]],[[[186,[174]],[186,[174]]]],[[[186,[15]],[186,[15]]]],[[[186,[9]],[186,[9]]]],[[[186,[190]],[186,[190]]]],[[[186,[183]],[186,[183]]]],[[[186,[189]],[186,[189]]]],[[[186,[185]],[186,[185]]]],[[187,187]],[[188,188]],[[172,172]],[[172,172]],[[107,107]],[107],[107],[[107,107]],[[[181,[185]],[181,[185]]]],[[[181,[9]],[181,[9]]]],[[[181,[174]],[181,[174]]]],[[[181,[15]],[181,[15]]]],[[[181,[190]],[181,[190]]]],[[[181,[183]],[181,[183]]]],[[[181,[173]],[181,[173]]]],[[[181,[182]],[181,[182]]]],[[[181,[184]],[181,[184]]]],[[[181,[189]],[181,[189]]]],[[[181,[103]],[181,[103]]]],[[[181,[13]],[181,[13]]]],[[[186,[9]],[186,[9]]]],[[[186,[182]],[186,[182]]]],[[[186,[185]],[186,[185]]]],[[[186,[173]],[186,[173]]]],[[[186,[103]],[186,[103]]]],[[[186,[189]],[186,[189]]]],[[[186,[13]],[186,[13]]]],[[[186,[183]],[186,[183]]]],[[[186,[15]],[186,[15]]]],[[[186,[184]],[186,[184]]]],[[[186,[190]],[186,[190]]]],[[[186,[174]],[186,[174]]]],[[188,188]],[28,172],[28,172],[28,107],[28,107],[[]],[179,179],[180,180],[[]],[179,179],[180,180],[[],15],[179,15],[180,15],[[]],[179,179],[180,180],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[179,179],[180,180],[[],101],[[],101],[[],[[1,[101]]]],[[],[[1,[101]]]],[[],196],[[],196],[[],[[1,[196]]]],[[],[[1,[196]]]],[[],156],[[],156],[[],156],[[],156],[[],156],[[],156],[[],156],[[],86],[[179,179],86],[[180,180],86],[[]],[[[181,[103]]],173],[[[181,[182]]],173],[[[181,[15]]],173],[[[181,[173]]],173],[[[181,[184]]],173],[[[181,[189]]],173],[[[181,[174]]],173],[[[181,[185]]],173],[[[181,[183]]],173],[[[181,[9]]],173],[[[181,[13]]],173],[[[181,[190]]],173],[[[186,[9]]],173],[[[186,[13]]],173],[[[186,[15]]],173],[[[186,[173]]],173],[[[186,[174]]],173],[[[186,[182]]],173],[[[186,[190]]],173],[[[186,[103]]],173],[[[186,[185]]],173],[[[186,[189]]],173],[[[186,[183]]],173],[[[186,[184]]],173],[107,107],[[]],[179,179],[180,180],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[107,[114]]],[[107,[114]]]],[[]],[[[181,[103]]]],[[[181,[184]]]],[[[181,[183]]]],[[[181,[13]]]],[[[181,[185]]]],[[[181,[182]]]],[[[186,[184]]]],[[[186,[183]]]],[[[186,[103]]]],[[[186,[185]]]],[[[186,[13]]]],[[[186,[182]]]],0,0,[[]],[[],172],[[],107],[[],179],[[],180],[[],181],[[],186],[[],188],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[189],[9],[15],[174],[185],[173],[103],[183],[184],[13],[190],[182],[183],[103],[9],[[]],[182],[174],[13],[173],[15],[9],[173],[15],[103],[174],[182],[183],[[]],[13],[9],[173],[[]],[103],[15],[183],[13],[174],[182],[182],[173],[103],[9],[13],[174],[[]],[15],[183],[9],[183],[15],[13],[103],[174],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],173],[[]],[[],174],[[],183],[[],9],[[],185],[[],13],[[],184],[[],189],[[],182],[[],103],[[],190],[[],15],[[],13],[[],173],[[],183],[[],103],[[],182],[[],9],[[],174],[[],15],[[]],[[],173],[[],174],[[],9],[[],182],[[],13],[[],15],[[]],[[],183],[[],103],[[],9],[[],103],[[],173],[[],15],[[],174],[[]],[[],182],[[],13],[[],183],[[],174],[[],9],[[],182],[[]],[[],15],[[],13],[[],173],[[],183],[[],103],[[]],[[],13],[[],15],[[],183],[[],174],[[],103],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],174],[[],173],[[],183],[[],13],[[],190],[[],103],[[],182],[[],15],[[],184],[[],189],[[],185],[[],9],[[],13],[[],15],[[],9],[[],182],[[],173],[[],174],[[],183],[[],103],[[],173],[[],103],[[],182],[[],15],[[],174],[[],13],[[],183],[[],9],[[],103],[[],173],[[],183],[[],13],[[],182],[[],9],[[],174],[[],15],[[],182],[[],174],[[],15],[[],173],[[],9],[[],13],[[],183],[[],103],[[],174],[[],13],[[],9],[[],15],[[],183],[[],103],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[173],[15],[173],[15],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],173],[[],173],[[],173],[[],173],[[],173],[[]],[[]],[[]],[[]],[[],197],[[],197],[[],197],[[],197],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[[],173],[15,173],[15,173],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],198],[[],199],[200,200],[201,201],[202,202],[[]],[[]],[[]],[[],[[10,[203]]]],[[200,6],7],[[201,6],7],[[202,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[200,204],0,[200],[195,200],[[],[[10,[9,203]]]],[205,156],[206,[[10,[203]]]],[206,[[10,[203]]]],[[],[[10,[203]]]],[16,[[10,[9,203]]]],[156,[[10,[9,203]]]],[[],[[10,[9,203]]]],0,[200],[[],1],[[],1],[[200,9],16],[15,207],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],[[10,[9,203]]]],[[],[[10,[203]]]],[[],[[10,[203]]]],[208,[[10,[203]]]],[[],[[10,[9,203]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[210,[[0,[3,209]]]]],[[210,[[0,[3,209]]]]]],[[[211,[3]]],[[211,[3]]]],[[[212,[3]]],[[212,[3]]]],[[[213,[3]]],[[213,[3]]]],[214,214],[[]],[[]],[[]],[[]],[[]],[[211,15,15,9],15],[[212,9],[[16,[15]]]],[[211,9,9],15],[[212,9,9],[[16,[15]]]],[[[210,[[0,[5,209]]]],6],7],[[[211,[5]],6],7],[[[212,[5]],6],7],[[[213,[5]],6],7],[[214,6],7],[[]],[[]],[[]],[[]],[[]],[211,15],[[213,9]],[[214,9],9],[[]],[[]],[[]],[[]],[[]],[[[213,[141]]],[[16,[9]]]],[[[16,[209]]],[[210,[209]]]],[15,211],[[],212],[[[16,[141]]],[[213,[141]]]],[[],214],[15,211],[[9,15],212],[209,[[16,[9]]]],[[[210,[209]]],[[16,[9]]]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],215],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[216,[3,3]]],[[216,[3,3]]]],[217,217],[[[218,[3]]],[[218,[3]]]],[[[219,[3,3]]],[[219,[3,3]]]],[220,220],[221,221],[222,222],[223,223],[224,224],[[[225,[3,3]]],[[225,[3,3]]]],[[[226,[3,3]]],[[226,[3,3]]]],[[[227,[3,3]]],[[227,[3,3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[215,215],86],[[216,216],86],[[[218,[141]],218],86],[[[219,[141,141]],219],86],[[],228],[[],[[216,[115,115]]]],[[],217],0,[[215,215],8],[[216,216],8],[[[218,[142]],218],8],[[[219,[142,142]],219],8],[[228,6],7],[[[216,[5,5]],6],7],[[217,6],7],[[[230,[5,[0,[5,[229,[5]]]]]],6],7],[[[218,[5]],6],7],[[[219,[5,5]],6],7],[[220,6],7],[[221,6],7],[[222,6],7],[[223,6],7],[[224,6],7],[[[225,[5,5]],6],7],[[[226,[5,5]],6],7],[[[227,[5,5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[173,1],[173,1],[173,1],[173,1],[[217,229]],[[217,114],8],[[217,229],[[230,[229]]]],[[]],[[]],[[]],[[[218,[145]]]],[[[219,[145,145]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[228,114,114],8],[228,8],0,0,[8,[[10,[203]]]],[[],197],0,[228,228],[[]],[[]],[[]],[[],1],[220,1],[221,1],[222,1],[224,1],[225,1],[[[227,[195]]],1],[[[227,[231]]],1],[[],228],[15,217],[[],219],[9,225],[[],227],[204,1],[[[230,[229]]],1],0,[[215,215],[[1,[86]]]],[[216,216],[[1,[86]]]],[[[218,[155]],218],[[1,[86]]]],[[[219,[155,155]],219],[[1,[86]]]],[217],[[217,15],15],[[218,217]],[[219,217]],0,[217,15],[217,230],[217,230],[217,114],[[217,15,9],[[16,[15]]]],[205,156],[205,156],[[],156],[[],156],[[],156],[[],1],[[],1],[[],1],0,0,[[]],[[]],[[228,114],228],[[228,114],228],[[228,114],228],[[228,9],228],[217],0,0,[[],217],0,0,[[],[[1,[173]]]],[[],[[1,[173]]]],[[],[[1,[173]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[1,[173]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[232,232],[233,233],[234,234],[[[236,[[0,[3,235]]]]],[[236,[[0,[3,235]]]]]],[[[237,[[0,[3,235]]]]],[[237,[[0,[3,235]]]]]],[[[238,[[0,[3,98]],[0,[3,43]]]]],[[238,[[0,[3,98]],[0,[3,43]]]]]],[157,157],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],239],[9,15],[9,15],0,0,0,[[157,157],8],[[232,6],7],[[233,6],7],[[234,6],7],[[[236,[[0,[5,235]]]],6],7],[[[237,[[0,[5,235]]]],6],7],[[[238,[[0,[5,98]],[0,[5,43]]]],6],7],[[157,6],7],[[239,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[234,[[236,[235]]]],[157],[[239,153],15],[[239,153,9,9],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[236,[235]],9,9],9],[[240,9,9],9],[232,9],[233,9],[234,9],[[9,153],232],[153,233],[[9,153],234],[[9,153],240],[153,238],[[],239],[[]],0,0,[[233,9,9,29]],[[233,9,29]],[[233,9,9]],[[234,9,9,29]],[[240,9,9,8,29]],[[240,9,9,8,29,29]],[[[241,[[229,[9]]]],217],153],[[[242,[[229,[9]]]],217],153],[[[243,[[229,[9]]]],217],153],[[[244,[[229,[9]]]],217],153],0,[[[16,[15]]]],[[[16,[15]]]],[[233,9,29]],[[233,9,29]],[[233,9,9]],[[],239],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[240,9,9,8,29]],0,0,0,[[],9],[[],9],[15,239],0,0,0],"p":[[4,"Option"],[3,"RangeChminChmaxAdd"],[8,"Clone"],[3,"RangeSumRangeChminChmaxAdd"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"ConvexHullTrick"],[15,"i64"],[3,"XorBasis"],[15,"u64"],[3,"Vec"],[3,"RhoPath"],[8,"MIntBase"],[3,"IndependentSubSet"],[3,"BitDp"],[3,"Subsets"],[3,"Combinations"],[3,"ImpartialGameAnalyzer"],[3,"PartisanGameAnalyzer"],[3,"ZeroSumGameAnalyzer"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"Iterator"],[8,"FnMut"],[3,"BabyStepGiantStep"],[3,"SqrtDecompositionBuckets"],[8,"IntoIterator"],[3,"ImpartialGamer"],[3,"PartisanGamer"],[3,"ZeroSumGamer"],[3,"SlideMinimum"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"LexicographicalSubsequence"],[3,"LongestIncreasingSubsequence"],[8,"Fn"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"FunctionalAutomaton"],[3,"MappingAutomaton"],[3,"AlphabetMappingAutomaton"],[3,"LexicographicalAutomaton"],[3,"RevLexicographicalAutomaton"],[3,"MonoidalAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BitVector"],[3,"WaveletMatrix"],[3,"Accumulate"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"CompressedBinaryIndexedTree"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"SlopeTrick"],[3,"MergingUnionFind"],[3,"HashMap"],[3,"WeightedUnionFind"],[3,"UnionFind"],[3,"NonNull"],[3,"MemoryPool"],[3,"SegmentTree"],[3,"DequeAggregation"],[3,"BitSet"],[3,"Trie"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"CompressedSegmentTree"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"Automatondp"],[3,"VecCompress"],[3,"HashCompress"],[3,"LineSet"],[4,"Ordering"],[3,"SplaySequence"],[3,"SplayMap"],[3,"Drain"],[3,"Ref"],[3,"RefMut"],[8,"Group"],[3,"Iter"],[3,"Iter"],[3,"Keys"],[3,"IterMut"],[3,"Keys"],[8,"Monoid"],[3,"Static2DTree"],[8,"RankSelectDictionaries"],[3,"Range"],[3,"Range"],[15,"isize"],[3,"Values"],[3,"Values"],[3,"ValuesMut"],[3,"Complex"],[4,"Ccw"],[3,"Line"],[6,"Point"],[3,"LineSegment"],[3,"Approx"],[3,"Circle"],[15,"f64"],[8,"Default"],[3,"TwoSatisfiability"],[3,"ProjectSelectionProblem"],[3,"SparseGraphBuilder"],[3,"AdjacencyListGraph"],[3,"BipartiteMatching"],[3,"DinicBuilder"],[3,"PrimalDualBuilder"],[3,"GridGraph"],[3,"UsizeGraph"],[3,"ClosureGraph"],[3,"SparseGraph"],[3,"Adjacency"],[3,"Iter"],[3,"VIndexWithValue"],[3,"VIndexWithEIndexValue"],[6,"BidirectionalSparseGraph"],[3,"Dinic"],[3,"PrimalDual"],[3,"EdgeListGraph"],[3,"VIndex"],[3,"VIndexWithEIndex"],[4,"DirectedEdge"],[4,"UndirectedEdge"],[4,"BidirectionalEdge"],[3,"StronglyConnectedComponent"],[8,"Ord"],[8,"PartialEq"],[15,"never"],[6,"DirectedSparseGraph"],[8,"Hash"],[8,"IterScan"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraphScanner"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"AdjacencyViewIterFromEindex"],[3,"AdjacencyViewIterFromValue"],[6,"UndirectedSparseGraph"],[3,"LowLink"],[8,"PartialOrd"],[3,"String"],[4,"TreeCenter"],[3,"FormalPowerSeries"],[3,"Matrix"],[3,"Polynomial"],[8,"Zero"],[8,"Add"],[8,"Mul"],[8,"MulAssign"],[3,"BarrettReduction"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"PowPrec"],[3,"EulerPhiTable"],[3,"PrimeList"],[3,"PrimeTable"],[3,"MInt"],[15,"u32"],[15,"u128"],[3,"IterMut"],[8,"One"],[8,"Copy"],[3,"DoubleDouble"],[3,"Float32"],[3,"Float64"],[3,"Saturating"],[15,"i32"],[15,"i128"],[15,"i16"],[15,"i8"],[3,"Wrapping"],[3,"QuadDouble"],[3,"Rational"],[15,"u16"],[15,"u8"],[4,"FpCategory"],[3,"ExtendedGcd"],[3,"Error"],[15,"f32"],[15,"str"],[3,"RangeInclusive"],[3,"LocalKey"],[3,"Bytes"],[3,"Chain"],[3,"Scanner"],[4,"Usize1"],[4,"Chars"],[3,"Error"],[3,"ScannerIter"],[8,"Read"],[3,"BorrowedCursor"],[3,"Take"],[3,"Arguments"],[8,"Eq"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"TotalOrd"],[3,"PartialIgnoredOrd"],[3,"Xorshift"],[3,"NotEmptySegment"],[3,"RandRange"],[3,"CharWithBase"],[3,"CharsWithBase"],[3,"ByteWithBase"],[4,"Bytes"],[3,"BytesWithBase"],[3,"Collect"],[3,"SizedCollect"],[3,"Splitted"],[3,"SimuratedAnnealing"],[8,"RandomSpec"],[3,"RandIter"],[15,"char"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[8,"LcaMonoidDispatch"],[3,"LowestCommonAncestor"],[3,"LcaMonoid"],[3,"ReRooting"],[3,"TreeHasher"],[3,"HeavyLightDecomposition"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[8,"MonoidAction"],[8,"SemiRing"],[4,"Gf2_63"],[4,"Mersenne61"],[8,"Magma"],[3,"EmptyLazy"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"AddMulOperation"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[4,"PermutationOperation"],[3,"FindMajorityOperation"],[8,"Field"],[8,"Invertible"],[8,"Unital"],[8,"Ring"],[8,"BitXorIdentity"],[8,"MoSolver"],[8,"SqrtDecomposition"],[8,"ImpartialGame"],[8,"ZeroSumGame"],[8,"PartisanGame"],[3,"SubsetTransform"],[3,"SupersetTransform"],[8,"SliceSortExt"],[8,"SliceBisectExt"],[8,"Bisect"],[8,"Trisect"],[8,"Automaton"],[8,"Allocator"],[8,"Compressor"],[8,"ToDigitSequence"],[8,"ApproxOrd"],[8,"Adjacencies"],[8,"AdjacenciesWithEindex"],[8,"AdjacenciesWithValue"],[8,"AdjacencyIndexWithValue"],[8,"AdjacencyView"],[8,"EIndexedGraph"],[8,"AdjacencyIndexWithEindex"],[8,"Edges"],[8,"EdgeMap"],[8,"ShortestPathSemiRing"],[8,"GraphBase"],[8,"AdjacencyIndex"],[8,"Vertices"],[8,"VertexMap"],[3,"StandardSp"],[3,"OptionSp"],[3,"PathFoldingSp"],[8,"ShortestPathExt"],[8,"SparseGraphConstruction"],[8,"EdgeSize"],[8,"EdgeView"],[8,"VertexSize"],[8,"VertexView"],[8,"ConvolveSteps"],[4,"ConvolveRealFft"],[3,"Convolve"],[8,"FormalPowerSeriesCoefficientSqrt"],[8,"Float"],[8,"IntBase"],[8,"Unsigned"],[8,"Signed"],[8,"DiscreteSteps"],[8,"BinaryRepr"],[8,"RangeBoundsExt"],[8,"MIntConvert"],[8,"Bounded"],[3,"Modulo2"],[4,"Modulo998244353"],[4,"Modulo1000000007"],[4,"Modulo1000000009"],[4,"DynModuloU32"],[4,"DynModuloU64"],[6,"DynMIntU32"],[6,"DynMIntU64"],[4,"Modulo998244353"],[4,"Modulo2113929217"],[4,"Modulo1811939329"],[4,"Modulo2013265921"],[8,"MontgomeryReduction32"],[8,"Write"],[8,"MarkedIterScan"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[8,"AsTotalOrd"],[8,"PartialOrdExt"],[8,"CharTools"],[8,"IterPrint"],[4,"LcaMonoidDefaultId"],[13,"One"],[13,"Two"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,2,2,2,5,2,5,2,2,2,5,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,5,2,5,2,2,2,5,5,2,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,2,2,5,0,0,0,0,2,2,5,5,2,2,5,2,2,2,2,5,5,2,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,2,2,2,2,2,5,2,5,2,5,2,2,5,5,2,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,2,2,2,5,2,5,2,2,5,2,5,2,5,0,0,5,5,0,0,0,2,5,2,5,2,5],"n":["datastructure","graph","math","sample","string","deque_operate_all_composite","dynamic_sequence_range_affine_range_sum","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_chmin_chmax_add_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","DequeAggregation","LinearOperation","MInt","MInt998244353","deque_operate_all_composite","MInt998244353","RangeSumRangeLinear","SplaySequence","dynamic_sequence_range_affine_range_sum","LineSet","line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","LazySegmentTree","RangeChminChmaxAdd","RangeSumRangeChminChmaxAdd","Saturating","range_chmin_chmax_add_range_sum","WaveletMatrix","range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","UnionFind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","log_of_formal_power_series","min_of_mod_of_linear","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","Convolve","ConvolveSteps","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","PrimeList","enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","factorize","prime_factors_flatten","MInt998244353","berlekamp_massey","find_linear_recurrence","Fps998244353","MInt998244353","inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","Fps998244353","MInt998244353","log_of_formal_power_series","binary_search","floor_sum_range_freq","min_of_mod_of_linear","Fps998244353","MInt998244353","multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","DynMIntU32","sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","floor_sum","sum_of_floor_of_linear","TwoSatisfiability","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","SuffixArray","suffixarray","Zarray","zalgorithm"],"q":["library_checker","","","","","library_checker::datastructure","","","","","","","","","","","","","","library_checker::datastructure::deque_operate_all_composite","","","","","library_checker::datastructure::dynamic_sequence_range_affine_range_sum","","","","library_checker::datastructure::line_add_get_min","","library_checker::datastructure::point_add_range_sum","","","","","library_checker::datastructure::point_set_range_composite","","","","","library_checker::datastructure::queue_operate_all_composite","","","","","library_checker::datastructure::range_affine_range_sum","","","","","","library_checker::datastructure::range_chmin_chmax_add_range_sum","","","","","library_checker::datastructure::range_kth_smallest","","library_checker::datastructure::staticrmq","","","","","library_checker::datastructure::unionfind","","library_checker::datastructure::vertex_add_path_sum","","","","","library_checker::datastructure::vertex_add_subtree_sum","","","","","library_checker::datastructure::vertex_set_path_composite","","","","","","","","library_checker::graph","","","","library_checker::graph::bipartitematching","","","","library_checker::graph::directedmst","","","library_checker::graph::lca","","","","","","library_checker::graph::scc","","","library_checker::math","","","","","","","","","","","","","","","","","","","library_checker::math::convolution_mod","","","","","library_checker::math::convolution_mod_1000000007","","","","","","library_checker::math::discrete_logarithm_mod","","library_checker::math::enumerate_primes","","library_checker::math::exp_of_formal_power_series","","","library_checker::math::factorize","","library_checker::math::find_linear_recurrence","","","library_checker::math::inv_of_formal_power_series","","","library_checker::math::kth_term_of_linearly_recurrent_sequence","","","","library_checker::math::log_of_formal_power_series","","","library_checker::math::min_of_mod_of_linear","","","library_checker::math::multipoint_evaluation","","","library_checker::math::polynomial_taylor_shift","","","","library_checker::math::pow_of_formal_power_series","","","library_checker::math::sharp_p_subset_sum","","","","","","library_checker::math::sqrt_mod","","library_checker::math::sqrt_of_formal_power_series","","","library_checker::math::sum_of_floor_of_linear","","library_checker::math::two_sat","","library_checker::sample","","library_checker::sample::aplusb","library_checker::sample::many_aplusb","library_checker::string","","","library_checker::string::number_of_substrings","","library_checker::string::suffixarray","","library_checker::string::zalgorithm",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","✅  AC  47ms","","","","✅  AC  2796ms","","✅  AC  393ms","","","","✅  AC  78ms","✅  AC  128ms","","","","","✅  AC  182ms","","","","","✅  AC  50ms","","","","","","✅  AC  725ms","","","","","✅  AC  1577ms","","✅  AC  296ms","","","","✅  AC  142ms","✅  AC  132ms","","✅  AC  19ms","","","","","✅  AC  358ms","","","","","✅  AC  151ms","","","","","","","","✅  AC  270ms","","","","","","","✅  AC  97ms","✅  AC  745ms","","","✅  AC  105ms","","","","","✅  AC  694ms","✅  AC  530ms","","","✅  AC  259ms","","","","","","","","","","","","","","","","","","","","","","","","✅  AC  153ms","","","","","","✅  AC  363ms","","✅  AC  3ms","","✅  AC  1425ms","","","✅  AC  560ms","✅  AC  100ms","","","","✅  AC  101ms","","","✅  AC  152ms","","","","✅  AC  1502ms","","","✅  AC  201ms","","","✅  AC  1261ms","","","✅  AC  566ms","","","","✅  AC  137ms","","","✅  AC  625ms","","","","","","✅  AC  609ms","","✅  AC  66ms","","","✅  AC  379ms","","✅  AC  29ms","","✅  AC  205ms","","","✅  AC  0ms","✅  AC  176ms","","","","","✅  AC  679ms","","✅  AC  797ms","","✅  AC  25ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"]],"a":{"verify":[23,27,29,33,34,39,44,50,55,57,61,62,64,69,74,82,89,90,93,98,99,102,126,132,134,136,139,140,144,147,151,154,157,160,164,167,173,175,178,180,182,185,186,191,193,195]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
