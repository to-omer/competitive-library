var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":[0,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,0,5],"n":["dpl","dpl_1_a","dpl_1_a","dpl_1_b","dpl_1_b","dpl_1_c","dpl_1_c","dpl_1_d","dpl_1_d","dpl_1_e","dpl_1_e","dpl_1_f","dpl_1_f","dpl_1_g","dpl_1_g","dpl_1_h","dpl_1_h","dpl_1_i","dpl_1_i","dpl_3_a","dpl_3_a","dpl_3_b","dpl_3_b","dpl_3_c","dpl_3_c","dsl","dsl_1_a","dsl_1_a","dsl_1_b","dsl_1_b","dsl_2_a","dsl_2_a","dsl_2_b","dsl_2_b","dsl_2_c","dsl_2_c","dsl_2_d","dsl_2_d","dsl_2_e","dsl_2_e","dsl_2_f","dsl_2_f","dsl_2_g","dsl_2_g","dsl_2_h","dsl_2_h","dsl_2_i","dsl_2_i","dsl_3_a","dsl_3_a","dsl_3_b","dsl_3_b","dsl_3_c","dsl_3_c","dsl_3_d","dsl_3_d","dsl_4_a","dsl_4_a","dsl_5_a","dsl_5_a","dsl_5_b","dsl_5_b","grl","grl_1_a","grl_1_a","grl_1_b","grl_1_b","grl_1_c","grl_1_c","grl_2_a","grl_2_a","grl_2_b","grl_2_b","grl_3_a","grl_3_a","grl_3_b","grl_3_b","grl_3_c","grl_3_c","grl_4_a","grl_4_a","grl_4_b","grl_4_b","judge_grl_4_b","grl_5_a","grl_5_a","grl_5_b","grl_5_b","grl_5_c","grl_5_c","grl_5_d","grl_5_d","grl_5_e","grl_5_e","grl_6_a","grl_6_a","grl_6_b","grl_6_b","grl_7_a","grl_7_a","itp1","itp1_1_a","itp1_1_a"],"q":["aizu_online_judge","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_1_a","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_1_b","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_1_c","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_1_d","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_1_e","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_1_f","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_1_g","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_1_h","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_1_i","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_3_a","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_3_b","aizu_online_judge::dpl","aizu_online_judge::dpl::dpl_3_c","aizu_online_judge","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_1_a","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_1_b","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_2_a","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_2_b","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_2_c","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_2_d","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_2_e","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_2_f","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_2_g","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_2_h","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_2_i","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_3_a","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_3_b","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_3_c","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_3_d","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_4_a","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_5_a","aizu_online_judge::dsl","aizu_online_judge::dsl::dsl_5_b","aizu_online_judge","aizu_online_judge::grl","aizu_online_judge::grl::grl_1_a","aizu_online_judge::grl","aizu_online_judge::grl::grl_1_b","aizu_online_judge::grl","aizu_online_judge::grl::grl_1_c","aizu_online_judge::grl","aizu_online_judge::grl::grl_2_a","aizu_online_judge::grl","aizu_online_judge::grl::grl_2_b","aizu_online_judge::grl","aizu_online_judge::grl::grl_3_a","aizu_online_judge::grl","aizu_online_judge::grl::grl_3_b","aizu_online_judge::grl","aizu_online_judge::grl::grl_3_c","aizu_online_judge::grl","aizu_online_judge::grl::grl_4_a","aizu_online_judge::grl","aizu_online_judge::grl::grl_4_b","","aizu_online_judge::grl","aizu_online_judge::grl::grl_5_a","aizu_online_judge::grl","aizu_online_judge::grl::grl_5_b","aizu_online_judge::grl","aizu_online_judge::grl::grl_5_c","aizu_online_judge::grl","aizu_online_judge::grl::grl_5_d","aizu_online_judge::grl","aizu_online_judge::grl::grl_5_e","aizu_online_judge::grl","aizu_online_judge::grl::grl_6_a","aizu_online_judge::grl","aizu_online_judge::grl::grl_6_b","aizu_online_judge::grl","aizu_online_judge::grl::grl_7_a","aizu_online_judge","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a"],"d":["Discrete Optimization Problems","Coin Changing Problem","✅  AC  1ms","0-1 Knapsack Problem","✅  AC  1ms","Knapsack Problem","✅  AC  3ms","Longest Increasing Subsequence","✅  AC  8ms","Edit Distance (Levenshtein Distance)","✅  AC  9ms","0-1 Knapsack Problem II","✅  AC  1ms","Knapsack Problem with Limitations","✅  AC  6ms","Huge Knapsack Problem","✅  AC  60ms","Knapsack Problem with Limitations II","✅  AC  4ms","Largest Square","✅  AC  35ms","Largest Rectangle","✅  AC  24ms","Largest Rectangle in a Histogram","✅  AC  5ms","Data Sets and Queries","Disjoint Set: Union Find Tree","✅  AC  7ms","Weighted Union Find Trees","✅  AC  26ms","Range Minimum Query (RMQ)","✅  AC  16ms","Range Sum Query","✅  AC  14ms","Range Search (kD Tree)","✅  AC  524ms","Range Update Query (RUQ)","✅  AC  49ms","Range Add Query (RAQ)","✅  AC  35ms","RMQ and RUQ","✅  AC  60ms","RSQ and RAQ","✅  AC  45ms","RMQ and RAQ","✅  AC  43ms","RSQ and RUQ","✅  AC  43ms","The Smallest Window I","✅  AC  6ms","The Smallest Window II","✅  AC  3ms","The Number of Windows","✅  AC  213ms","Sliding Minimum Element","✅  AC  160ms","Union of Rectangles","✅  AC  89ms","The Maximum Number of Customers","✅  AC  4ms","The Maximum Number of Overlaps","✅  AC  10ms","Graph Algorithms","Single Source Shortest Path","✅  AC  70ms","Single Source Shortest Path (Negative Edges)","✅  AC  6ms","All Pairs Shortest Path","✅  AC  6ms","Minimum Spanning Tree","✅  AC  28ms","Minimum-Cost Arborescence","✅  AC  1ms","Articulation Points","✅  AC  3ms","Bridges","✅  AC  4ms","Strongly Connected Components","✅  AC  9ms","Cycle Detection for a Directed Graph","✅  AC  0ms","Topological Sort","✅  AC  3ms","","Diameter of a Tree","✅  AC  11ms","Height of a Tree","✅  AC  3ms","Lowest Common Ancestor","✅  AC  144ms","Range Query on a Tree","✅  AC  65ms","Range Query on a Tree II","✅  AC  150ms","Maximum Flow","✅  AC  0ms","Minimum Cost Flow","✅  AC  1ms","Bipartite Matching","✅  AC  2ms","Introduction to Programming I","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],[[],["bool",15]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,null,[[]]],"p":[],"a":{"verify":[2,4,6,8,10,12,14,16,18,20,22,24,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,64,66,68,70,72,74,76,78,80,82,85,87,89,91,93,95,97,99,102]}},\
"competitive":{"doc":"github","t":[0,8,16,10,11,11,8,8,8,10,8,11,8,10,11,8,8,8,8,8,8,3,3,3,3,3,3,8,16,16,16,16,10,11,11,11,11,11,3,3,3,3,3,3,3,3,8,10,3,8,10,3,8,10,3,3,3,3,3,3,0,3,12,5,5,5,5,3,3,8,16,10,10,10,11,5,5,3,12,12,8,10,10,5,8,10,10,10,10,8,10,10,5,5,3,3,3,3,3,3,0,3,12,3,12,3,3,5,5,5,5,3,12,0,8,16,16,16,10,10,10,5,3,3,3,3,3,3,3,3,3,3,8,10,10,11,11,11,11,3,3,3,3,3,3,3,12,3,3,3,3,3,3,3,3,3,0,3,5,3,3,5,5,6,17,3,12,4,13,13,13,13,13,11,0,0,3,12,12,3,12,12,12,3,0,3,3,0,3,3,3,0,3,3,3,3,12,12,3,12,12,12,8,10,6,6,6,3,6,6,6,3,3,12,12,12,3,3,3,3,3,12,12,12,12,3,3,3,3,3,12,12,6,6,6,6,3,12,12,12,3,6,6,3,3,0,3,12,12,3,5,5,3,12,6,6,8,8,16,10,3,8,10,5,5,5,5,5,5,5,5,5,5,5,3,12,12,3,8,10,6,5,5,5,5,3,5,5,3,12,3,5,5,5,5,5,5,5,5,3,5,5,0,0,3,6,3,6,3,6,3,6,3,6,3,6,0,3,6,8,10,11,10,10,10,11,8,10,10,3,12,12,3,12,3,8,16,10,10,10,10,10,10,10,10,10,11,8,10,10,10,3,12,8,10,11,8,10,11,0,3,3,3,3,3,0,8,16,10,11,11,11,11,3,3,12,12,12,12,12,12,8,10,10,10,5,3,3,12,3,8,10,11,5,5,5,5,5,8,16,10,8,16,10,3,3,3,12,3,3,12,3,8,16,10,3,12,0,5,5,3,3,3,8,10,11,11,11,11,11,11,11,11,11,11,8,10,11,11,10,11,11,11,11,0,11,11,11,11,11,11,11,0,3,12,12,3,12,3,3,8,10,10,10,3,3,3,12,12,3,12,12,3,12,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["algebra","Magma","T","operate","reverse_operate","operate_assign","Associative","SemiGroup","Unital","unit","Monoid","pow","Invertible","inverse","rinv_operate","Group","Commutative","AbelianMonoid","AbelianGroup","Idempotent","IdempotentMonoid","RangeSumRangeAdd","RangeSumRangeLinear","RangeSumRangeUpdate","RangeMaxRangeUpdate","RangeMinRangeUpdate","RangeMinRangeAdd","MonoidAction","MT","AT","M","A","act","act_assign","munit","aunit","moperate","aoperate","MaxOperation","MinOperation","FirstOperation","LastOperation","AdditiveOperation","MultiplicativeOperation","LinearOperation","BitAndOperation","BitAndIdentity","all_one","BitOrOperation","BitOrIdentity","all_zero","BitXorOperation","BitXorIdentity","xor_zero","CartesianOperation","CountingOperation","ReverseOperation","Top2Operation","Bottom2Operation","PermutationOperation","algorithm","BitDp","0","product","permutations","combinations","combinations_with_replacement","ChtLine","ConvexHullTrick","MoSolver","Answer","insert","remove","answer","mo_solve","run_length_encoding","floor_kernel","RhoPath","f","g","Bisect","halve","section_end","binary_search","SliceBisectExt","find_bisect","rfind_bisect","position_bisect","rposition_bisect","Trisect","next_section","section_end","ternary_search","slide_minimum","SlideMinimum","XorBasis","SubsetTransform","SupersetTransform","DivisorTransform","MultipleTransform","combinatorial_optimization","KnapsackPloblemSmallWeight","dp","KnapsackPloblemSmallValue","dp","ZeroOneKnapsackProblemSmallItems","ZeroOneKnapsackPloblemBranchAndBound","largest_square","largest_rectangle","largest_rectangle_in_grid","levenshtein_distance","LongestIncreasingSubsequence","dp","data_structure","Automaton","Alphabet","State","Effect","initial","next","accept","automaton_dp","IntersectionAutomaton","UnionAutomaton","ProductAutomaton","LessThanAutomaton","GreaterThanAutomaton","ContainAutomaton","ContainCounterAutomaton","AlwaysAcceptingAutomaton","BinaryIndexedTree","BinaryIndexedTree2D","RankSelectDictionaries","bit_length","access","rank1","rank0","select1","select0","BitVector","BitSet","DisjointSparseTable","Static2DTree","LazySegmentTree","LazySegmentTreeMap","RangeArithmeticProgressionAdd","dd","SegmentTree","SegmentTreeMap","DequeAggregation","QueueAggregation","Trie","UnionFind","WeightedUnionFind","MergingUnionFind","WaveletMatrix","geometry","Circle","closest_pair","Line","LineSegment","convex_diameter","convex_hull","Point","EPS","Real","0","Ccw","OnlineFront","Clockwise","OnSegment","CounterClockwise","OnlineBack","ccw","graph","adjacency_list_graph","Adjacency","id","to","AdjacencyListGraph","vsize","esize","graph","AdjacencyListGraphScanner","edge_list_graph","EdgeListGraph","EdgeListGraphScanner","grid_graph","GridGraph","Adjacency4","Adjacency8","sparse_graph","DirectedEdge","UndirectedEdge","BidirectionalEdge","Adjacency","id","to","SparseGraph","start","elist","edges","SparseGraphConstruction","construct_graph","DirectedSparseGraph","UndirectedSparseGraph","BidirectionalSparseGraph","SparseGraphScanner","DirectedGraphScanner","UndirectedGraphScanner","BidirectionalGraphScanner","TreeGraphScanner","AdjacencyListGraph","vsize","esize","graph","AdjacencyListGraphScanner","EdgeListGraph","EdgeListGraphScanner","GridGraph","LowLink","low","ord","articulation","bridge","DinicBuilder","Dinic","PrimalDualBuilder","PrimalDual","Adjacency","id","to","BidirectionalGraphScanner","BidirectionalSparseGraph","DirectedGraphScanner","DirectedSparseGraph","SparseGraph","start","elist","edges","TreeGraphScanner","UndirectedGraphScanner","UndirectedSparseGraph","StronglyConnectedComponent","TwoSatisfiability","math","MemorizedFactorial","fact","inv_fact","SmallModMemorizedFactorial","fast_fourier_transform","convolve_i64","FormalPowerSeries","data","Fps998244353","Fps","FormalPowerSeriesCoefficient","FormalPowerSeriesMultiplier","T","convolve","DefaultFormalPowerSeriesMultiplier","FormalPowerSeriesCoefficientSqrt","sqrt_coefficient","gcd","gcd_binary","lcm","extgcd","extgcd_loop","extgcd_binary","modinv","modinv_loop","modinv_extgcd_binary","lagrange_interpolation","lagrange_interpolation_polynomial","Matrix","shape","data","NumberTheoreticTransform","NttModulus","primitive_root","Ntt998244353","convolve2","convolve3","convolve3_128","binary_exponentiation","BabyStepGiantStep","floor_sum","linear_congruence","Polynomial","data","PrimeTable","prime_factors","divisors","primes","pow","miller_rabin","find_factor","prime_factors_rho","euler_phi","EulerPhiTable","moebius","segmented_sieve_primes","num","mint_basic","Modulo998244353","MInt998244353","Modulo1000000007","MInt1000000007","Modulo1000000009","MInt1000000009","DynModuloU32","DynMIntU32","DynModuloU64","DynMIntU64","Modulo2","MInt2","montgomery","Modulo998244353","MInt998244353","MontgomeryReduction32","get_mod","r","n1","n2","n3","reduce","Bounded","maximum","minimum","Complex","re","im","Saturating","0","MInt","MIntBase","Inner","get_mod","mod_zero","mod_one","mod_add","mod_sub","mod_mul","mod_div","mod_neg","mod_inv","mod_pow","MIntConvert","from","into","mod_into","QuadDouble","0","Zero","zero","is_zero","One","one","is_one","string","KnuthMorrisPratt","MultipleRollingHash","RollingHash","SuffixArray","Zarray","tools","AssociatedValue","T","local_key","get","set","with","modify","Counter","SimuratedAnnealing","iter_count","now","time","temperture","log_table","rand","PartialOrdExt","chmin","chmax","minmax","echo","Xorshift","NotEmptySegment","0","RandIter","RandomSpec","rand","rand_iter","read_stdin_all","read_stdin_all_unchecked","read_stdin_line_unchecked","read_all","read_all_unchecked","IterScan","Output","scan","MarkedIterScan","Output","mscan","Scanner","Usize1","CharWithBase","0","Chars","CharsWithBase","0","Collect","GetDistinctMut","Output","get_distinct_mut","TotalOrd","0","prelude","echo","read_all_unchecked","Chars","Scanner","Usize1","Read","read","read_vectored","is_read_vectored","initializer","read_to_end","read_to_string","read_exact","by_ref","bytes","chain","take","Write","write","write_vectored","is_write_vectored","flush","write_all","write_all_vectored","write_fmt","by_ref","tree","tree_depth","tree_depth","weighted_tree_depth","weighted_tree_depth","tree_size","tree_size","tree_order","impl_lcam","EulerTourForEdge","eidx","par","EulerTourForVertex","vidx","EulerTourForRichVertex","LowestCommonAncestor","LcaMonoidDispatch","vsize","depth","set_depth","LcaMonoidDefaultId","LcaMonoid","HeavyLightDecomposition","par","vidx","ReRooting","dp","ep","TreeRec","n","monoid_fold","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","define_basic_mintbase","define_basic_mint32","impl_assoc_value","comprehension","min","chmin","max","chmax","minmax","capture","prepare_io","rand_value","rand","scan_value","scan","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","into_iter","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","into_iter","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","to_string","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","into_iter","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","from","into","to_owned","clone_into","try_from","borrow","borrow_mut","try_into","type_id","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","inverse","rinv_operate","inverse","rinv_operate","inverse","inverse","inverse","inverse","initial","next","accept","initial","next","accept","initial","next","accept","initial","next","accept","initial","next","accept","initial","next","accept","initial","next","accept","initial","next","accept","bit_length","access","rank1","select1","select0","convolve","sqrt_coefficient","primitive_root","get_mod","r","n1","n2","n3","zero","zero","zero","zero","one","one","one","rand","scan","scan","scan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","act","act","act","act","act","act","construct_graph","construct_graph","construct_graph","get_mod","mod_zero","mod_one","mod_add","mod_sub","mod_mul","mod_div","mod_neg","mod_inv","get_mod","mod_zero","mod_one","mod_add","mod_sub","mod_mul","mod_div","mod_neg","mod_inv","get_mod","mod_zero","mod_one","mod_add","mod_sub","mod_mul","mod_div","mod_neg","mod_inv","get_mod","mod_zero","mod_one","mod_add","mod_sub","mod_mul","mod_div","mod_neg","mod_inv","get_mod","mod_zero","mod_one","mod_add","mod_sub","mod_mul","mod_div","mod_neg","mod_inv","get_mod","mod_zero","mod_one","mod_add","mod_sub","mod_mul","mod_div","mod_neg","mod_inv","mod_pow","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","from","into","mod_into","vsize","depth","set_depth","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","extend","extend","extend","next","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","eq","ne","eq","ne","eq","eq","eq","eq","ne","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","eq","ne","eq","ne","eq","ne","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","div","div","div","div","div","div","div","rem","sub","sub","sub","sub","sub","sub","sub","from_str","from_str","add","add","add","add","add","add","add","add","add","mul","mul","mul","mul","mul","mul","mul","mul","neg","neg","neg","neg","add_assign","add_assign","add_assign","add_assign","sub_assign","sub_assign","sub_assign","sub_assign","mul_assign","mul_assign","mul_assign","mul_assign","div_assign","div_assign","div_assign","div_assign","rem_assign","not","bitand","bitor","bitxor","shl","shl","shr","shr","bitand_assign","bitor_assign","bitxor_assign","shl_assign","shl_assign","shr_assign","shr_assign","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","sum","sum","product","product","from_iter","from_iter","from_iter","from_iter","reverse_operate","operate_assign","pow","rinv_operate","act_assign","munit","aunit","moperate","aoperate","is_element","elements","not_elements","is_subset","subsets","combinations","new","value","check","new","add_line","query","mo_solve","build","build_rho","get","new","next_minimum","new","reduce","insert","find","basis","zeta_transform","mobius_transform","convolve","zeta_transform","mobius_transform","convolve","new","zeta_transform","mobius_transform","convolve","new","zeta_transform","mobius_transform","convolve","new","solve","new","max_weight","insert","extend","insert01","extend01","insert_limitation","extend_limitation","insert_limitation2","extend_limitation2","solve","new","insert","extend","insert01","extend01","insert_limitation","extend_limitation","solve","new","insert","extend","solve","new","longest_length","insert","extend","new","new","new","new","accumulate0","accumulate","update","fold","get","set","lower_bound","new","accumulate0","accumulate","update","fold","get","set","rank1","rank0","select1","select0","new","ones","get","set","count_ones","count_zeros","shl_bitor_assign","shr_bitor_assign","new","height","fold_close","fold","new","range","new","from_vec","update","fold","set","get","fold_all","position_acc","rposition_acc","new","update","fold","set","get","fold_all","position_acc","rposition_acc","new","update","update_isize","build_inplace","new","from_vec","set","update","get","fold","position_acc","rposition_acc","as_slice","fold_all","new","set","update","get","fold","position_acc","rposition_acc","fold_all","new","len","is_empty","fold_all","last","push","pop","new","len","is_empty","fold_all","front","back","push_front","push_back","pop_front","pop_back","reverse","new","insert_at","insert","find_at","find","next_node","count","next_count","new","find","find_root","find_root_mut","unite","size","same","members","roots","all_group_members","new","find","unite","size","same","members","roots","all_group_members","new","find","get_weight","unite","size","is_same","get_difference","members","roots","all_group_members","new","access","rank","select","quantile","rank_lessthan","rank_range","new","cross_circle","contains_point","new","dir","ccw","projection","reflection","distance_point","is_parallel","is_orthogonal","new","dir","ccw","projection","reflection","is_parallel","is_orthogonal","intersect","intersect_point","cross_point","distance_point","distance","new","new","add_edge","add_undirected_edge","vertices","adjacency","new","new","vertices_size","edges_size","vertices","edges","from_edges","new","new","adjacency4","adjacency8","new","new","add_edge","gen_graph","build","maximum_flow_limited","maximum_flow","get_flow","change_edge","new","add_edge","gen_graph","build","minimum_cost_flow_limited","minimum_cost_flow","get_flow","minimum_spanning_tree","minimum_spanning_arborescence","bfs_order","dfs_order","dfs_tree","dijkstra","bellman_ford","warshall_floyd","new","vertices_size","edges_size","vertices","adjacencies","from_edges","new","new","new","gen_cgraph","components","has_loop","size","new","add_inner","add_or","add_nand","set_true","set_false","two_satisfiability","topological_sort","new","combination","permutation","homogeneous_product","inv","new","factorial","combination","from_vec","length","truncate","zeros","resize","prefix","diff","integral","inv","exp","log","pow","sqrt","lagrange_interpolation","new","from_vec","zeros","eye","pow","row_reduction","rank","solve_system_of_linear_equations","inverse","sqrt","convert","ntt","convolve","convolve_it","new","solve","from_vec","length","assign","pow","new","is_prime","for_each","prime_factors","count_divisors","new","get","new","transpose","conjugate","dot","cross","norm","polar","abs","unit","angle","new","inner","new_unchecked","get_mod","pow","inv","set_mod","set_mod","r","reduce","mod_pow","new","renormalize","is_zero","is_sign_negative","sqrt","abs","div2","is_zero","is_one","new","search_all","MOD","mersenne_mod","mersenne_mul","mersenne_mul_mod","new","hash_once","find","concat","new","new_rand","find","concat","new","longest_common_prefix_array","new","search","get","set","with","modify","new","get","add","remove","append","keys","values","iter","IS_MAXIMIZE","START_TEMP","END_TEMP","TEMP_RATIO","TIME_LIMIT","LOG_TABLE_SIZE","UPDATE_INTERVAL","SEED","new","is_accepted","is_end","rand_iter","gen","gen_iter","new","time","rand64","rand","rands","randf","gen_bool","new","scan","mscan","scan_vec","iter","new","new","length","new","length","subtree_vertex_tour","path_vertex_tour","subtree_query","subtree_update","path_query","path_update","new","length","query","gen_lca","lca","new","lca","update","query","query_noncom","new","new","dfs"],"q":["competitive","competitive::algebra","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive","competitive::algorithm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive","competitive::combinatorial_optimization","","","","","","","","","","","","competitive","competitive::data_structure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive","competitive::geometry","","","","","","","","","","","","","","","","","competitive","competitive::graph","competitive::graph::adjacency_list_graph","","","","","","","","competitive::graph","competitive::graph::edge_list_graph","","competitive::graph","competitive::graph::grid_graph","","","competitive::graph","competitive::graph::sparse_graph","","","","","","","","","","","","","","","","","","","","competitive::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive","competitive::math","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive","competitive::num","competitive::num::mint_basic","","","","","","","","","","","","competitive::num","competitive::num::montgomery","","","","","","","","","competitive::num","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive","competitive::string","","","","","competitive","competitive::tools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","competitive","competitive::graph::sparse_graph","competitive::tree::depth","competitive::graph::sparse_graph","competitive::tree::depth","competitive::graph::sparse_graph","competitive::tree::depth","competitive::graph::sparse_graph","competitive::tree","","","","","","","","","","","","","","","","","","","","","","competitive","","","","","","","","","","","","","","","","","","","competitive::algebracompetitive::algorithm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structurecompetitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::adjacency_list_graph","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::edge_list_graph","","","","","","","","","","","","","","","","competitive::graph::grid_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::sparse_graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graph","","","","","","","","","","","","","","","","","","competitive::math","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num","","","","","","","","","","","","","","","","","","competitive::num::mint_basic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num::montgomery","","","","","","","competitive::num","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebra","","","","","","","","","","","","","","","","competitive::tree","competitive::algebra","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::math","competitive::num","competitive::num::mint_basic","competitive::num::montgomery","","","","","competitive::math","","competitive::num","","competitive::math","","competitive::num","competitive::tools","competitive::num","competitive::tools","","competitive::graph::adjacency_list_graph","competitive::graph::edge_list_graph","competitive::graph::sparse_graph","","competitive::tools","","","competitive::algebra","","","","","","competitive::graph::sparse_graph","","","competitive::num::mint_basiccompetitive::num::montgomery","","","","","","","","","competitive::tree","","","competitive::math","","competitive::num","","","","","","","","","","","","","competitive::graph","","competitive::tools","competitive::graph::grid_graph","","competitive::tools","competitive::algebra","","","","","","","","","","","","","","","","competitive::algorithm","","","","competitive::combinatorial_optimization","","competitive::data_structure","","","","","","","","","","","","","","competitive::geometry","","","","","competitive::graph::adjacency_list_graph","","competitive::graph::edge_list_graph","competitive::graph::grid_graph","","","competitive::graph","","","competitive::graph::sparse_graph","","","","","competitive::graph","","competitive::math","","","","","","","","competitive::num","","","","competitive::string","","","","","competitive::tools","","","","","","","","","competitive::tree","","","","","","","competitive::algebra","","","","","","","","","","","","","competitive::algorithm","","","","competitive::combinatorial_optimization","","competitive::data_structure","","","","competitive::graph::adjacency_list_graph","","competitive::graph::sparse_graph","","","","competitive::math","","","competitive::num","","","","competitive::tools","","","competitive::algebra","","","","","","","","","","","","","competitive::data_structure","competitive::geometry","competitive::graph::adjacency_list_graph","competitive::graph::grid_graph","competitive::graph::sparse_graph","","","","competitive::num","competitive::tools","","competitive::algebra","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algorithm","","","","competitive::data_structure","","competitive::geometry","","","","","","","","competitive::graph::adjacency_list_graph","","competitive::graph::grid_graph","","competitive::graph::sparse_graph","","","","","competitive::math","","","","","competitive::num","","","","","","","competitive::tools","","","","competitive::algebra","","","","","","","","","","","","","competitive::data_structure","competitive::geometry","","competitive::graph::adjacency_list_graph","competitive::graph::grid_graph","competitive::graph::sparse_graph","","","","competitive::num","","competitive::tools","","competitive::algebra","","","","","","","","","","","","","","","","competitive::algorithm","","","","","competitive::combinatorial_optimization","","competitive::data_structure","","","","","","","","","","","","","","competitive::geometry","","","","","competitive::graph::adjacency_list_graph","","competitive::graph::edge_list_graph","competitive::graph::grid_graph","","","competitive::graph","","","","competitive::graph::sparse_graph","","","","","competitive::graph","","competitive::math","","","","","","","","competitive::num","","","","competitive::string","","","","","competitive::tools","","","","","","","","","","","competitive::tree","","","","","","","competitive::num","","competitive::math","","competitive::num","","","","","competitive::math","","","competitive::num","","","","","","","competitive::math","","competitive::num","","","","","","","competitive::math","","competitive::num","","","","","","competitive::math","competitive::num","","","competitive::math","","competitive::num","","competitive::math","","competitive::num","","competitive::math","","competitive::num","","competitive::math","","competitive::num","","competitive::math","competitive::data_structure","","","","","competitive::math","competitive::data_structure","competitive::math","competitive::data_structure","","","","competitive::math","competitive::data_structure","competitive::math","competitive::data_structure","competitive::graph::edge_list_graph","competitive::graph","competitive::math","","","","competitive::num","competitive::string","","competitive::math","","","","competitive::algebra","","","","","","","","","","","","","competitive::data_structure","competitive::graph::adjacency_list_graph","competitive::graph::grid_graph","competitive::graph::sparse_graph","","","","competitive::num","","","competitive::tools","competitive::num","","","","competitive::algorithm","competitive::data_structure","competitive::math","competitive::tools","competitive::algebra","","","","","","","","","competitive::algorithm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::geometry","","","","","","","","","","","","","","","","","","","","","","","competitive::graph::adjacency_list_graph","","","","","","","competitive::graph::edge_list_graph","","","","","","","competitive::graph::grid_graph","","","competitive::graph","","","","","","","","","","","","","","","","competitive::graph::edge_list_graph","","competitive::graph::sparse_graph","","","","","","","","","","","","","","competitive::graph","","","","","","","","","","","","competitive::graph::sparse_graph","competitive::math","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::num","competitive::math","","","","","","","","","","","","","","","","","competitive::num","","","","","","","","","","","","","","","","competitive::num::mint_basic","","competitive::num::montgomery","","competitive::num","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","competitive::tools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tree","","","","","","","","","","","","","","","","","","","","","",""],"d":["algebra","binary operaion: $T \\\\circ T \\\\to T$","type of operands: $T$","binary operaion: $\\\\circ$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","associative binary operation","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e …","identity element: $e$","associative binary operation and an identity element","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","$a$ where $a \\\\circ x = e$","","associative binary operation and an identity element and …","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","commutative monoid","commutative group","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","","","","","","","","","","","","","","","","","","binary operation to select larger element","binary operation to select smaller element","retain the first element","retain the last element","$+$","$\\\\times$","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","&","","","|","","","^","","","$(M_1, M_2)$","","","","","","algorithm","","","choose <code>r</code> elements from <code>n</code> independently","choose distinct <code>r</code> elements from <code>n</code> in any order","choose distinct <code>r</code> elements from <code>n</code> in sorted order","choose <code>r</code> elements from <code>n</code> in sorted order","","","","","","","","","return: [(start, length)]","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","","","binary search helper","return between two elements","the end condition of binary search","binary search for monotone segment","binary search for slice","Returns the first element that satisfies a predicate.","Returns the last element that satisfies a predicate.","Returns the first index that satisfies a predicate. if …","Returns the last index+1 that satisfies a predicate. if …","ternary search helper","Divide into 3 sections","the end condition of ternary search","like <code>(left..right).min_by_key(f)</code>","","","Basis of xor operation.","","","","","","","","","","","","","","","","","","data structures","","","","","","","","","","","","","","","","","","","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","","get k-th bit","the number of 1 in [0, k)","the number of 0 in [0, k)","index of k-th 1","index of k-th 0","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a–b–c","a–b-vc","a–c–b","a–b-^c","c–a–b","","graph structures and algorithms","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","mathematical datas","","","","","","","","","","","","","","","","","","","","","","","","","","0 < a < p, gcd(a, p) == 1, p is prime > 2","","","","","","","","","","max(a.len(), b.len()) * max(a) * max(b) < 3.64 * 10^18","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27","max(a.len(), b.len()) * max(a) * max(b) < 1.81 * 10^27","","","Sum of Floor of Linear","return: (y,z)","","","","","","","","","","","","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","m","(-m)^{-1} mod n","n^1 mod m","n^2 mod m","n^3 mod m","n^{-1}x = (x + (xr mod n)m) / n","Trait for max/min bounds","","","","","","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","","","","","string algorithems","","","","","","","Trait for a modifiable value associated with a type.","Type of value.","","","","","","","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","Trait for spec of generating random value.","Return a random value.","Return an iterator that generates random values.","","","","","","","","","","","","","","","","","","","","","","","implement Ord by PartialOrd","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","Pull some bytes from this source into the specified …","Like <code>read</code>, except that it reads into a slice of buffers.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Read</code>er can work with buffers of …","Read all bytes until EOF in this source, placing them …","Read all bytes until EOF in this source, appending them …","Read the exact number of bytes required to fill <code>buf</code>.","Creates a “by reference” adaptor for this instance of …","Transforms this <code>Read</code> instance to an [<code>Iterator</code>] over its …","Creates an adaptor which will chain this stream with …","Creates an adaptor which will read at most <code>limit</code> bytes …","A trait for objects which are byte-oriented sinks.","Write a buffer into this writer, returning how many bytes …","Like <code>write</code>, except that it writes from a slice of buffers.","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Flush this output stream, ensuring that all …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Creates a “by reference” adaptor for this instance of …","tree algorithems","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","dynamic programming on all-rooted trees","dp[v]: result of v-rooted tree","ep[e]: result of e-subtree, if e >= n then …","","","","","","","","","Implement [<code>AssociatedValue</code>].","","","","","","","","","Return a random value using [<code>RandomSpec</code>].","Declare random values using [<code>RandomSpec</codebinary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","k-th add_line(a_k, b_k): a_k >= a_{k+1}","","","build rho path","rho path that index of rho path","get i-th value of rho path","","","Create a empty space.","Return (reduced basis, coordinate). Coordinate means if …","Return true if inserted element cannot be consisted by …","Return coordinate if element can be consisted by current …","Return coordinate if element can be consisted by current …","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","fold [0, k)","fold [0, k]","","","","","","","fold [0, i) x [0, j)","fold [0, i] x [0, j]","","0-indexed [i1, i2) x [j1, j2)","","","the number of 1 in [0, k)","the number of 0 in [0, k)","index of k-th 1","index of k-th 0","","","","","","","","","","","","","","","","","","","","","","Returns the first index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","","","Returns the first index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","add a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","","","","","","","","Returns the first index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","","","","Returns the first index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th value","the number of val in range","index of k-th val","get k-th smallest value in range","the number of value less than val in range","the number of valrange in range","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","Return the number of vertices.","Return the number of edges.","Return an iterator over graph vertices.","","Construct graph from edges.","","","","","","","","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","Return the number of vertices.","Return the number of edges.","Return an iterator over graph vertices.","Return a slice of adjacency vertices.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 <= i <= n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(-m)^{-1} mod n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","","","","","","S [l, r)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator that generates random values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,0,0,0,2,0,3,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,6,0,0,7,0,0,8,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,10,10,10,10,0,0,0,11,11,0,12,12,0,0,13,13,13,13,0,14,14,0,0,0,0,0,0,0,0,0,0,15,0,16,0,0,0,0,0,0,0,17,0,0,18,18,18,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,19,19,19,19,19,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,22,22,22,22,22,22,0,0,0,23,23,0,24,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,25,25,0,26,26,26,0,27,0,0,0,0,0,0,0,0,0,24,24,24,0,0,0,0,0,28,28,28,28,0,0,0,0,0,25,25,0,0,0,0,0,26,26,26,0,0,0,0,0,0,0,29,29,0,0,0,0,30,0,0,0,0,31,31,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,33,33,0,0,34,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,36,36,36,36,36,0,37,37,0,38,38,0,39,0,0,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,0,42,0,43,43,0,44,44,0,0,0,0,0,0,0,0,45,45,45,45,45,45,0,0,46,46,46,46,46,46,0,47,47,47,0,0,0,48,0,0,49,49,0,0,0,0,0,0,50,50,0,51,51,0,0,0,52,0,0,53,0,0,54,54,0,55,0,0,0,0,0,0,0,56,56,56,56,56,56,56,56,56,56,56,0,57,57,57,57,57,57,57,57,0,26,58,26,58,26,58,26,0,0,59,59,0,60,0,0,0,61,61,61,0,0,0,62,62,0,63,63,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,65,65,65,65,65,65,66,66,66,66,66,66,66,67,67,67,67,67,67,67,68,68,68,68,68,68,68,69,69,69,69,69,69,69,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,9,9,9,9,9,9,9,9,9,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,11,11,11,11,11,11,11,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,92,92,92,92,92,92,92,93,93,93,93,93,93,93,94,94,94,94,94,94,94,15,15,15,15,15,15,15,16,16,16,16,16,16,16,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,17,17,17,17,17,17,17,17,17,97,97,97,97,97,97,97,98,98,98,98,98,98,98,99,99,99,99,99,99,99,100,100,100,100,100,100,100,101,101,101,101,101,101,101,102,102,102,102,102,102,102,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,20,20,20,20,20,20,20,20,20,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,130,130,28,28,28,28,28,28,28,131,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,132,133,133,133,133,133,133,133,133,133,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,136,137,137,137,137,137,137,137,137,137,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,138,138,138,138,138,138,138,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,141,141,29,29,29,29,29,29,29,29,29,142,142,142,142,142,142,142,142,142,30,30,30,30,30,30,30,30,30,30,143,143,143,143,143,143,143,33,33,33,33,33,33,33,33,33,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,145,35,35,35,35,35,35,35,35,35,146,146,146,146,146,146,146,146,146,147,147,147,147,147,147,147,147,147,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,148,148,148,148,148,148,148,149,149,149,149,149,149,149,150,150,150,150,150,150,150,151,151,151,151,151,151,151,152,152,152,152,152,152,152,153,153,153,153,153,153,153,154,154,154,154,154,154,154,155,155,155,155,155,155,155,155,155,155,42,42,42,42,42,42,42,42,42,42,156,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,158,158,159,159,159,159,159,159,159,159,159,160,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,161,46,46,46,46,46,46,46,162,162,162,162,162,162,162,162,48,48,48,48,48,48,48,48,48,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,165,165,52,52,52,52,52,52,52,52,52,166,166,166,166,166,166,166,166,166,53,53,53,53,53,53,53,53,53,167,167,167,167,167,167,167,167,167,55,55,55,55,55,55,55,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,168,168,168,168,168,168,168,168,168,169,169,169,169,169,169,169,169,169,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,171,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,171,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,75,75,76,76,80,81,83,86,97,97,97,98,98,98,99,99,99,100,100,100,101,101,101,102,102,102,103,103,103,104,104,104,107,107,107,107,107,143,155,148,154,154,154,154,154,30,35,39,155,30,35,155,48,155,165,166,125,127,138,139,52,53,167,65,66,67,68,69,70,135,136,137,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,153,153,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,154,154,170,170,170,30,30,155,155,155,155,155,155,155,155,155,155,155,155,42,131,133,161,129,130,162,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,9,87,88,90,95,17,104,105,106,108,109,111,112,20,113,114,115,116,118,119,122,123,124,21,22,23,24,126,128,129,130,131,132,133,135,136,137,25,26,140,141,29,142,30,33,145,35,146,147,38,39,155,42,156,157,158,159,160,161,163,48,164,165,52,166,53,167,59,60,168,169,171,63,64,71,72,73,74,75,76,77,78,79,80,84,85,86,9,87,88,90,95,17,104,108,115,116,23,24,135,136,137,25,142,30,35,38,39,155,42,161,46,163,71,72,73,74,75,76,77,78,79,80,84,85,86,108,22,23,128,135,136,137,25,39,48,55,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,84,84,85,85,86,9,9,87,87,108,108,122,122,123,123,124,124,21,22,23,23,128,128,135,136,137,25,25,30,33,33,35,35,38,38,39,39,155,42,42,48,48,55,55,71,72,73,74,75,76,77,78,79,80,84,85,86,108,21,22,23,128,135,136,137,25,39,42,48,55,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,9,87,88,11,90,95,17,104,105,106,108,109,111,112,20,113,114,115,116,118,119,122,123,124,21,22,23,24,126,128,129,130,131,132,133,134,135,136,137,25,26,140,141,29,142,30,33,145,35,146,147,38,39,155,42,156,157,158,159,160,161,46,163,162,48,164,165,52,166,53,167,59,60,168,169,171,63,64,155,42,30,30,38,38,155,155,42,30,30,30,38,38,155,155,42,155,42,30,30,38,38,39,155,155,42,42,30,30,38,38,155,155,42,42,30,38,155,42,30,30,155,155,30,30,155,155,30,30,155,155,30,30,155,155,30,108,108,108,108,108,30,108,30,108,108,108,108,30,108,30,109,126,140,30,33,33,35,42,159,160,30,33,33,35,71,72,73,74,75,76,77,78,79,80,84,85,86,108,23,128,135,136,137,25,38,39,155,48,155,155,155,155,90,107,30,161,1,1,3,4,5,5,5,5,5,9,9,9,9,9,9,87,87,87,88,88,88,10,11,11,11,89,89,90,90,90,90,90,91,91,91,92,92,92,93,93,93,93,94,94,94,94,96,96,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,95,95,95,95,17,17,17,17,100,101,104,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,19,19,19,19,108,108,108,108,108,108,108,108,109,109,109,109,110,110,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,20,20,20,20,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,120,120,120,120,120,120,120,120,120,120,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,121,121,121,121,121,121,121,122,122,122,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,23,24,24,24,24,24,125,126,126,126,126,126,126,127,128,128,128,28,131,131,131,131,132,132,132,132,133,133,133,133,134,134,134,126,126,26,26,26,26,26,26,25,26,26,26,26,26,138,139,140,140,140,140,140,141,141,141,141,141,141,141,26,29,29,29,29,29,142,142,142,30,30,30,30,30,30,30,30,30,30,30,30,30,29,33,33,33,33,33,33,33,33,33,155,144,144,144,144,145,145,35,35,35,35,146,146,146,146,146,147,147,38,38,38,38,38,38,38,38,38,38,155,155,155,155,155,155,151,152,36,36,40,42,42,42,42,42,42,42,43,44,156,156,157,157,157,157,157,157,157,157,158,158,158,158,159,159,160,160,45,45,45,45,161,161,161,161,161,161,161,161,46,46,46,46,46,46,46,46,46,46,46,49,163,163,163,163,163,163,163,163,163,164,164,164,164,164,167,59,59,60,60,60,60,60,60,60,60,168,168,168,168,169,62,62,62,62,62,63,64,64],"f":[null,null,null,[[]],[[]],[[]],null,null,null,[[]],null,[[["usize",15]]],null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],null,null,[[]],null,null,[[]],null,null,null,null,null,null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,null,null,[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[],["vec",3]],[[["usize",15]],[["usize",15],["vec",3]]],null,null,null,null,[[]],[[],["bool",15]],[[]],null,[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],null,[[]],[[],["bool",15]],[[]],[[["usize",15]],[["usize",15],["vec",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15]],["usize",15]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[],["usize",15]],null,null,null,null,null,null,null,[[]],[[],["option",4]],[[],["bool",15]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]],[["usize",15],["option",4]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3],["point",6]],["f64",15]],null,null,[[["vec",3],["point",6]],["f64",15]],[[["vec",3],["point",6]],[["point",6],["vec",3]]],null,null,null,null,null,null,null,null,null,null,[[["point",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",15],["vec",3]],["sparsegraph",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["complex",3],["bool",15],["vec",3]],[["complex",3],["vec",3]]],[[["vec",3],["i64",15]],[["vec",3],["i64",15]]],null,null,null,null,null,null,null,[[["formalpowerseries",3]],["formalpowerseries",3]],null,null,[[],["option",4]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["i64",15]]],[[["i64",15]]],[[["i64",15]]],[[["i64",15]],["i64",15]],[[["i64",15]],["i64",15]],[[["u64",15]],["u64",15]],[[["mint",3],["mintbase",8]],[["mint",3],["mintbase",8]]],[[],[["vec",3],["mint",3]]],null,null,null,null,null,[[],["usize",15]],null,[[["vec",3]],[["vec",3],["u64",15]]],[[["vec",3]],[["vec",3],["mint",3]]],[[["vec",3]],[["vec",3],["u128",15]]],[[["usize",15],["mulassign",8],["clone",8]],[["mulassign",8],["clone",8]]],null,[[["u64",15]],["u64",15]],[[],["option",4]],null,null,null,[[["u32",15]],["vec",3]],[[["u64",15]],[["vec",3],["u64",15]]],[[["usize",15]],[["usize",15],["vec",3]]],[[["u64",15]],["u64",15]],[[["u64",15]],["bool",15]],[[["u64",15]],["u64",15]],[[["u64",15]],[["vec",3],["u64",15]]],[[["usize",15]],["usize",15]],null,[[["usize",15]],[["usize",15],["i64",15],["hashmap",3]]],[[["usize",15]],[["usize",15],["vec",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["u64",15]],["u32",15]],null,[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],null,[[]],[[]],[[]],null,null,null,[[]],[[],["bool",15]],null,[[]],[[],["bool",15]],null,null,null,null,null,null,null,null,null,[[],["localkey",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["result",6]],null,null,null,null,null,[[["xorshift",3]]],[[["xorshift",3]],["randiter",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],null,null,[[],["option",4]],null,null,[[],["option",4]],null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,[[],["result",6]],[[],["string",3]],null,null,null,null,[[],[["usize",15],["result",4],["error",3]]],[[],[["usize",15],["result",4],["error",3]]],[[],["bool",15]],[[],["initializer",3]],[[["vec",3]],[["usize",15],["result",4],["error",3]]],[[["string",3]],[["usize",15],["result",4],["error",3]]],[[],[["error",3],["result",4]]],[[]],[[],["bytes",3]],[[],["chain",3]],[[["u64",15]],["take",3]],null,[[],[["usize",15],["result",4],["error",3]]],[[],[["usize",15],["result",4],["error",3]]],[[],["bool",15]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[],[["error",3],["result",4]]],[[["arguments",3]],[["error",3],["result",4]]],[[]],null,[[["usize",15]],[["vec",3],["u64",15]]],[[["usize",15]],[["vec",3],["u64",15]]],[[["usize",15],["fn",8]],["vec",3]],[[["usize",15],["fn",8]],["vec",3]],[[["usize",15]],[["vec",3],["u64",15]]],[[["usize",15]],[["vec",3],["u64",15]]],[[["usize",15]]],null,null,null,null,null,null,null,null,null,[[],["usize",15]],[[["usize",15]],["u64",15]],[[["vec",3],["u64",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[],["option",4]],[[],["bool",15]],[[]],[[],["option",4]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]],[["usize",15],["option",4]]],[[["formalpowerseries",3]],["formalpowerseries",3]],[[],["option",4]],[[],["usize",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["xorshift",3]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["vec",3]],["sparsegraph",3]],[[["usize",15],["vec",3]],["sparsegraph",3]],[[["usize",15],["vec",3]],["sparsegraph",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["u32",15]]],[[],["u32",15]],[[],["u32",15]],[[["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[["u128",15]]],[[],["u128",15]],[[],["u128",15]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i64",15]]],[[],["i64",15]],[[],["i64",15]],[[["i128",15]]],[[],["i128",15]],[[],["i128",15]],[[["isize",15]]],[[],["isize",15]],[[],["isize",15]],[[["u32",15]]],[[],["u32",15]],[[],["u32",15]],[[["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[["u128",15]]],[[],["u128",15]],[[],["u128",15]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i64",15]]],[[],["i64",15]],[[],["i64",15]],[[["i128",15]]],[[],["i128",15]],[[],["i128",15]],[[["isize",15]]],[[],["isize",15]],[[],["isize",15]],[[["u32",15]]],[[],["u32",15]],[[],["u32",15]],[[["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[["u128",15]]],[[],["u128",15]],[[],["u128",15]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i64",15]]],[[],["i64",15]],[[],["i64",15]],[[["i128",15]]],[[],["i128",15]],[[],["i128",15]],[[["isize",15]]],[[],["isize",15]],[[],["isize",15]],[[["u32",15]]],[[],["u32",15]],[[],["u32",15]],[[["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[["u128",15]]],[[],["u128",15]],[[],["u128",15]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i64",15]]],[[],["i64",15]],[[],["i64",15]],[[["i128",15]]],[[],["i128",15]],[[],["i128",15]],[[["isize",15]]],[[],["isize",15]],[[],["isize",15]],[[["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[["u128",15]]],[[],["u128",15]],[[],["u128",15]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[["i64",15]]],[[],["i64",15]],[[],["i64",15]],[[["i128",15]]],[[],["i128",15]],[[],["i128",15]],[[["isize",15]]],[[],["isize",15]],[[],["isize",15]],[[["u8",15]]],[[],["u8",15]],[[],["u8",15]],[[["u16",15]]],[[],["u16",15]],[[],["u16",15]],[[["u32",15]]],[[],["u32",15]],[[],["u32",15]],[[["u64",15]]],[[],["u64",15]],[[],["u64",15]],[[["u128",15]]],[[],["u128",15]],[[],["u128",15]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[["i8",15]]],[[],["i8",15]],[[],["i8",15]],[[["i16",15]]],[[],["i16",15]],[[],["i16",15]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i64",15]]],[[],["i64",15]],[[],["i64",15]],[[["i128",15]]],[[],["i128",15]],[[],["i128",15]],[[["isize",15]]],[[],["isize",15]],[[],["isize",15]],[[["i32",15]]],[[],["i32",15]],[[],["i32",15]],[[["i64",15]]],[[],["i64",15]],[[],["i64",15]],[[["isize",15]]],[[],["isize",15]],[[],["isize",15]],[[],["usize",15]],[[["usize",15]],["u64",15]],[[["vec",3],["u64",15]]],[[]],[[["vec",3]]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15]]],[[["i8",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["i128",15]]],[[["isize",15]]],[[["f64",15]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["maxoperation",3]],[[],["minoperation",3]],[[],["firstoperation",3]],[[],["lastoperation",3]],[[],["additiveoperation",3]],[[],["multiplicativeoperation",3]],[[],["linearoperation",3]],[[],["bitandoperation",3]],[[],["bitoroperation",3]],[[],["bitxoroperation",3]],[[],["cartesianoperation",3]],[[],["countingoperation",3]],[[],["reverseoperation",3]],[[],["top2operation",3]],[[],["bottom2operation",3]],[[],["permutationoperation",3]],[[],["bitdp",3]],[[],["chtline",3]],[[],["convexhulltrick",3]],[[],["xorbasis",3]],[[],["zerooneknapsackproblemsmallitems",3]],[[],["longestincreasingsubsequence",3]],[[],["alwaysacceptingautomaton",3]],[[],["binaryindexedtree",3]],[[],["binaryindexedtree2d",3]],[[],["bitset",3]],[[],["disjointsparsetable",3]],[[],["lazysegmenttree",3]],[[],["lazysegmenttreemap",3]],[[],["rangearithmeticprogressionadd",3]],[[],["segmenttree",3]],[[],["segmenttreemap",3]],[[],["queueaggregation",3]],[[],["dequeaggregation",3]],[[],["unionfind",3]],[[],["weightedunionfind",3]],[[],["circle",3]],[[],["line",3]],[[],["linesegment",3]],[[],["real",3]],[[],["ccw",4]],[[],["adjacency",3]],[[],["adjacencylistgraph",3]],[[],["edgelistgraph",3]],[[],["gridgraph",3]],[[],["adjacency4",3]],[[],["adjacency8",3]],[[],["dinicbuilder",3]],[[],["dinic",3]],[[],["primaldualbuilder",3]],[[],["directededge",3]],[[],["undirectededge",3]],[[],["bidirectionaledge",3]],[[],["adjacency",3]],[[],["sparsegraph",3]],[[],["stronglyconnectedcomponent",3]],[[],["twosatisfiability",3]],[[],["memorizedfactorial",3]],[[],["smallmodmemorizedfactorial",3]],[[]],[[],["matrix",3]],[[],["babystepgiantstep",3]],[[],["polynomial",3]],[[],["primetable",3]],[[],["eulerphitable",3]],[[],["complex",3]],[[],["saturating",3]],[[]],[[],["quaddouble",3]],[[],["knuthmorrispratt",3]],[[],["rollinghash",3]],[[],["multiplerollinghash",3]],[[],["suffixarray",3]],[[],["zarray",3]],[[],["counter",3]],[[],["xorshift",3]],[[],["notemptysegment",3]],[[],["scanner",3]],[[],["usize1",3]],[[],["charwithbase",3]],[[],["chars",3]],[[],["charswithbase",3]],[[],["collect",3]],[[],["eulertourforedge",3]],[[],["eulertourforvertex",3]],[[],["eulertourforrichvertex",3]],[[],["lowestcommonancestor",3]],[[],["lcamonoid",3]],[[],["rerooting",3]],[[],["treerec",3]],[[],["maxoperation",3]],[[],["minoperation",3]],[[],["firstoperation",3]],[[],["lastoperation",3]],[[],["additiveoperation",3]],[[],["multiplicativeoperation",3]],[[],["linearoperation",3]],[[],["bitandoperation",3]],[[],["bitoroperation",3]],[[],["bitxoroperation",3]],[[],["top2operation",3]],[[],["bottom2operation",3]],[[],["permutationoperation",3]],[[],["bitdp",3]],[[],["chtline",3]],[[],["convexhulltrick",3]],[[]],[[]],[[]],[[]],[[],["bitset",3]],[[]],[[]],[[],["adjacency",3]],[[],["adjacencylistgraph",3]],[[],["directededge",3]],[[],["undirectededge",3]],[[],["bidirectionaledge",3]],[[],["adjacency",3]],[[]],[[],["formalpowerseries",3]],[[],["polynomial",3]],[[],["complex",3]],[[],["saturating",3]],[[]],[[],["quaddouble",3]],[[]],[[]],[[]],[[["maxoperation",3]],["ordering",4]],[[["minoperation",3]],["ordering",4]],[[["firstoperation",3]],["ordering",4]],[[["lastoperation",3]],["ordering",4]],[[["additiveoperation",3]],["ordering",4]],[[["multiplicativeoperation",3]],["ordering",4]],[[["linearoperation",3]],["ordering",4]],[[["bitandoperation",3]],["ordering",4]],[[["bitoroperation",3]],["ordering",4]],[[["bitxoroperation",3]],["ordering",4]],[[["top2operation",3]],["ordering",4]],[[["bottom2operation",3]],["ordering",4]],[[["permutationoperation",3]],["ordering",4]],[[["bitset",3]],["ordering",4]],[[["ccw",4]],["ordering",4]],[[["adjacency",3]],["ordering",4]],[[["gridgraph",3]],["ordering",4]],[[["directededge",3]],["ordering",4]],[[["undirectededge",3]],["ordering",4]],[[["bidirectionaledge",3]],["ordering",4]],[[["adjacency",3]],["ordering",4]],[[["saturating",3]],["ordering",4]],[[["notemptysegment",3]],["ordering",4]],[[["totalord",3]],["ordering",4]],[[["maxoperation",3]],["bool",15]],[[["maxoperation",3]],["bool",15]],[[["minoperation",3]],["bool",15]],[[["minoperation",3]],["bool",15]],[[["firstoperation",3]],["bool",15]],[[["firstoperation",3]],["bool",15]],[[["lastoperation",3]],["bool",15]],[[["lastoperation",3]],["bool",15]],[[["additiveoperation",3]],["bool",15]],[[["additiveoperation",3]],["bool",15]],[[["multiplicativeoperation",3]],["bool",15]],[[["multiplicativeoperation",3]],["bool",15]],[[["linearoperation",3]],["bool",15]],[[["linearoperation",3]],["bool",15]],[[["bitandoperation",3]],["bool",15]],[[["bitandoperation",3]],["bool",15]],[[["bitoroperation",3]],["bool",15]],[[["bitoroperation",3]],["bool",15]],[[["bitxoroperation",3]],["bool",15]],[[["bitxoroperation",3]],["bool",15]],[[["top2operation",3]],["bool",15]],[[["top2operation",3]],["bool",15]],[[["bottom2operation",3]],["bool",15]],[[["bottom2operation",3]],["bool",15]],[[["permutationoperation",3]],["bool",15]],[[["bitdp",3]],["bool",15]],[[["bitdp",3]],["bool",15]],[[["chtline",3]],["bool",15]],[[["chtline",3]],["bool",15]],[[["bitset",3]],["bool",15]],[[["bitset",3]],["bool",15]],[[["circle",3]],["bool",15]],[[["circle",3]],["bool",15]],[[["line",3]],["bool",15]],[[["line",3]],["bool",15]],[[["linesegment",3]],["bool",15]],[[["linesegment",3]],["bool",15]],[[["real",3]],["bool",15]],[[["ccw",4]],["bool",15]],[[["adjacency",3]],["bool",15]],[[["adjacency",3]],["bool",15]],[[["gridgraph",3]],["bool",15]],[[["gridgraph",3]],["bool",15]],[[["directededge",3]],["bool",15]],[[["undirectededge",3]],["bool",15]],[[["bidirectionaledge",3]],["bool",15]],[[["adjacency",3]],["bool",15]],[[["adjacency",3]],["bool",15]],[[],["bool",15]],[[["matrix",3]],["bool",15]],[[["matrix",3]],["bool",15]],[[["polynomial",3]],["bool",15]],[[["polynomial",3]],["bool",15]],[[["complex",3]],["bool",15]],[[["complex",3]],["bool",15]],[[["saturating",3]],["bool",15]],[[["saturating",3]],["bool",15]],[[],["bool",15]],[[["quaddouble",3]],["bool",15]],[[["quaddouble",3]],["bool",15]],[[["notemptysegment",3]],["bool",15]],[[["notemptysegment",3]],["bool",15]],[[["totalord",3]],["bool",15]],[[["totalord",3]],["bool",15]],[[["maxoperation",3]],[["option",4],["ordering",4]]],[[["minoperation",3]],[["option",4],["ordering",4]]],[[["firstoperation",3]],[["option",4],["ordering",4]]],[[["lastoperation",3]],[["option",4],["ordering",4]]],[[["additiveoperation",3]],[["option",4],["ordering",4]]],[[["multiplicativeoperation",3]],[["option",4],["ordering",4]]],[[["linearoperation",3]],[["option",4],["ordering",4]]],[[["bitandoperation",3]],[["option",4],["ordering",4]]],[[["bitoroperation",3]],[["option",4],["ordering",4]]],[[["bitxoroperation",3]],[["option",4],["ordering",4]]],[[["top2operation",3]],[["option",4],["ordering",4]]],[[["bottom2operation",3]],[["option",4],["ordering",4]]],[[["permutationoperation",3]],[["option",4],["ordering",4]]],[[["bitset",3]],[["option",4],["ordering",4]]],[[["real",3]],[["option",4],["ordering",4]]],[[["ccw",4]],[["option",4],["ordering",4]]],[[["adjacency",3]],[["option",4],["ordering",4]]],[[["gridgraph",3]],[["option",4],["ordering",4]]],[[["directededge",3]],[["option",4],["ordering",4]]],[[["undirectededge",3]],[["option",4],["ordering",4]]],[[["bidirectionaledge",3]],[["option",4],["ordering",4]]],[[["adjacency",3]],[["option",4],["ordering",4]]],[[["saturating",3]],[["option",4],["ordering",4]]],[[["quaddouble",3]],[["option",4],["ordering",4]]],[[["notemptysegment",3]],[["option",4],["ordering",4]]],[[["totalord",3]],[["option",4],["ordering",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],[["error",3],["result",4]]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[]],[[]],[[["mint",3]]],[[["mint",3]]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["iterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],["bool",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],["subsets",3]],[[["usize",15]],["combinations",3]],[[["i64",15]]],[[["i64",15]],["i64",15]],[[],["bool",15]],[[]],[[["i64",15]]],[[["i64",15]],["i64",15]],[[["usize",15]]],[[]],[[["usize",15]],[["usize",15],["rhopath",3]]],[[["usize",15]]],[[["usize",15]]],[[],["i64",15]],[[]],[[["u64",15]]],[[["u64",15]],["bool",15]],[[["u64",15]],[["option",4],["u64",15]]],[[["u64",15]],[["vec",3],["option",4]]],[[]],[[]],[[["vec",3]],["vec",3]],[[]],[[]],[[["vec",3]],["vec",3]],[[["usize",15],["vec",3]]],[[]],[[]],[[["vec",3]],["vec",3]],[[["usize",15],["vec",3]]],[[]],[[]],[[["vec",3]],["vec",3]],[[]],[[["u64",15]],["u64",15]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]]],[[["intoiterator",8]]],[[["usize",15]]],[[["intoiterator",8]]],[[["usize",15]]],[[["intoiterator",8]]],[[["usize",15]]],[[["intoiterator",8]]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["intoiterator",8]]],[[["usize",15]]],[[["intoiterator",8]]],[[["usize",15]]],[[["intoiterator",8]]],[[["usize",15]],["usize",15]],[[]],[[["u64",15]]],[[["intoiterator",8]]],[[["u64",15]],["u64",15]],[[]],[[],["usize",15]],[[]],[[["intoiterator",8]]],[[["bool",15]]],[[["bool",15]]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15],["bool",15]]],[[],["u64",15]],[[],["u64",15]],[[["usize",15]]],[[["usize",15]]],[[["vec",3]]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[]],[[["range",3],["range",3]],["vec",3]],[[["usize",15]]],[[["vec",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]]],[[["usize",15],["i64",15]]],[[["usize",15],["isize",15],["i64",15]]],[[]],[[["usize",15]]],[[["vec",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]],[["usize",15],["option",4]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]],[["usize",15],["option",4]]],[[]],[[]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[["usize",15]]],[[["usize",15]],[["usize",15],["vec",3]]],[[],[["usize",15],["vec",3]]],[[["usize",15]],[["usize",15],["result",4]]],[[],[["usize",15],["result",4]]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15],["fn",8]]],[[["usize",15]],["usize",15]],[[["usize",15]],[["ref",3],["rootdata",3]]],[[["usize",15]],[["rootdata",3],["refmut",3]]],[[["usize",15]],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["bool",15]],[[["usize",15]],[["usize",15],["vec",3]]],[[],[["usize",15],["vec",3]]],[[],[["usize",15],["hashmap",3],["vec",3]]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["bool",15]],[[["usize",15]],[["usize",15],["vec",3]]],[[],[["usize",15],["vec",3]]],[[],[["usize",15],["hashmap",3],["vec",3]]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["option",4]],[[["usize",15]],[["usize",15],["vec",3]]],[[],[["usize",15],["vec",3]]],[[],[["usize",15],["hashmap",3],["vec",3]]],[[["vec",3],["usize",15],["clone",8],["rankselectdictionaries",8]]],[[["usize",15]],["usize",15]],[[["usize",15],["range",3]],["usize",15]],[[["usize",15]],[["usize",15],["option",4]]],[[["range",3],["usize",15]],["usize",15]],[[["usize",15],["range",3]],["usize",15]],[[["range",3],["usize",15]],["usize",15]],[[["f64",15],["point",6]]],[[],["option",4]],[[["point",6]],["bool",15]],[[["point",6]]],[[],["point",6]],[[["point",6]],["ccw",4]],[[["point",6]],["point",6]],[[["point",6]],["point",6]],[[["point",6]],["f64",15]],[[],["bool",15]],[[],["bool",15]],[[["point",6]]],[[],["point",6]],[[["point",6]],["ccw",4]],[[["point",6]],["point",6]],[[["point",6]],["point",6]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["point",6]],["bool",15]],[[],[["option",4],["point",6]]],[[["point",6]],["f64",15]],[[],["f64",15]],[[["usize",15]],["adjacency",3]],[[["usize",15]],["adjacencylistgraph",3]],[[["usize",15]]],[[["usize",15]]],[[],[["range",3],["usize",15]]],[[["usize",15]],["vec",3]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],[[],[["range",3],["usize",15]]],[[],["iter",3]],[[["usize",15],["vec",3]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["adjacency4",3]],[[["usize",15]],["adjacency8",3]],[[["undirectedsparsegraph",6]]],[[["usize",15]]],[[["usize",15],["u64",15]]],[[],["bidirectionalsparsegraph",6]],[[["bidirectionalsparsegraph",6]],["dinic",3]],[[["usize",15],["u64",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15],["u64",15]]],[[["usize",15]]],[[["usize",15],["i64",15],["u64",15]]],[[],["bidirectionalsparsegraph",6]],[[["bidirectionalsparsegraph",6]],["primaldual",3]],[[["usize",15],["u64",15]]],[[["usize",15]]],[[["usize",15]],["u64",15]],[[],[["bool",15],["vec",3]]],[[["usize",15]],["option",4]],[[["usize",15]],[["usize",15],["vec",3]]],[[["usize",15]],[["usize",15],["vec",3]]],[[["usize",15]],[["bool",15],["vec",3]]],[[["usize",15]],[["option",4],["vec",3]]],[[["usize",15]]],[[],[["vec",3],["vec",3]]],[[["usize",15]],["adjacency",3]],[[],["usize",15]],[[],["usize",15]],[[],[["range",3],["usize",15]]],[[["usize",15]],[["adjacency",3],["iter",3]]],[[["usize",15],["vec",3]]],[[["usize",15]]],[[["usize",15]]],[[["directedsparsegraph",6]]],[[],["directedsparsegraph",6]],[[],[["vec",3],["vec",3]]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],[["vec",3],["option",4]]],[[],[["usize",15],["vec",3]]],[[["usize",15]]],[[["usize",15]],["mint",3]],[[["usize",15]],["mint",3]],[[["usize",15]],["mint",3]],[[["usize",15]],["mint",3]],[[]],[[["usize",15]]],[[["usize",15]],["mint",3]],[[["vec",3]]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["option",4]],[[["usize",15],["mint",3]],["mint",3]],[[]],[[["vec",3],["vec",3]]],[[]],[[]],[[["usize",15]]],[[]],[[],["usize",15]],[[],[["option",4],["vec",3]]],[[],[["matrix",3],["option",4]]],[[],["option",4]],[[["intoiterator",8]],[["vec",3],["mint",3]]],[[["vec",3],["mint",3],["bool",15]],[["vec",3],["mint",3]]],[[["vec",3],["mint",3]],[["vec",3],["mint",3]]],[[["intoiterator",8]],[["vec",3],["mint",3]]],[[["u64",15]]],[[["u64",15]],[["option",4],["u64",15]]],[[["vec",3]]],[[],["usize",15]],[[]],[[["usize",15]]],[[["u32",15]]],[[["u32",15]],["bool",15]],[[["u32",15]]],[[["u32",15]],["vec",3]],[[["u32",15]],["u32",15]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[["f64",15]]],[[],["f64",15]],[[]],[[],["f64",15]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[["u32",15]]],[[["u64",15]]],[[],["u32",15]],[[["u64",15]],["u32",15]],[[["usize",15]]],[[["f64",15]]],[[["f64",15]]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[["f64",15]]],[[],["bool",15]],[[],["bool",15]],[[["vec",3]]],[[],[["usize",15],["vec",3]]],null,[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]]],[[],["u64",15]],[[["usize",15]],["u64",15]],[[["usize",15],["u64",15]],["u64",15]],[[]],[[["usize",15]]],[[["usize",15]],[["vec",3],["u64",15]]],[[["usize",15]],[["vec",3],["u64",15]]],[[["vec",3]]],[[],[["usize",15],["vec",3]]],[[]],[[["eq",8]],[["usize",15],["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[]],[[],[["usize",15],["keys",3]]],[[],[["usize",15],["values",3]]],[[],[["usize",15],["iter",3]]],null,null,null,null,null,null,null,null,[[]],[[["f64",15]],["bool",15]],[[],["bool",15]],[[["xorshift",3]],["randiter",3]],[[["randomspec",8]]],[[["randomspec",8]],[["randomspec",8],["randiter",3]]],[[["u64",15]]],[[]],[[],["u64",15]],[[["u64",15]],["u64",15]],[[["usize",15],["u64",15]],[["vec",3],["u64",15]]],[[],["f64",15]],[[["f64",15]],["bool",15]],[[["str",15]]],[[]],[[["markediterscan",8]]],[[["usize",15]],["vec",3]],[[],[["scanneriter",3],["iterscan",8]]],[[["usize",15]]],[[["usize",15],["undirectedsparsegraph",6]]],[[],["usize",15]],[[["undirectedsparsegraph",6]]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["fnmut",8]]],[[["usize",15],["fnmut",8]]],[[["usize",15],["fnmut",8]]],[[["usize",15],["fnmut",8]]],[[["usize",15],["undirectedsparsegraph",6]]],[[],["usize",15]],[[["usize",15],["fnmut",8]]],[[],[["lowestcommonancestor",3],["lcamonoiddispatch",8]]],[[["usize",15]],["usize",15]],[[["usize",15],["undirectedsparsegraph",6]]],[[["usize",15]],["usize",15]],[[["usize",15],["bool",15],["fnmut",8]]],[[["usize",15],["bool",15],["fnmut",8]]],[[["usize",15],["bool",15],["fnmut",8]]],[[["undirectedsparsegraph",6]]],[[["usize",15]]],[[["usize",15],["undirectedsparsegraph",6]]]],"p":[[8,"Magma"],[8,"Unital"],[8,"Monoid"],[8,"Invertible"],[8,"MonoidAction"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[8,"BitXorIdentity"],[3,"BitDp"],[8,"MoSolver"],[3,"RhoPath"],[8,"Bisect"],[8,"SliceBisectExt"],[8,"Trisect"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"LongestIncreasingSubsequence"],[8,"Automaton"],[8,"RankSelectDictionaries"],[3,"RangeArithmeticProgressionAdd"],[3,"Real"],[4,"Ccw"],[3,"Adjacency"],[3,"AdjacencyListGraph"],[3,"Adjacency"],[3,"SparseGraph"],[8,"SparseGraphConstruction"],[3,"LowLink"],[3,"MemorizedFactorial"],[3,"FormalPowerSeries"],[8,"FormalPowerSeriesMultiplier"],[8,"FormalPowerSeriesCoefficientSqrt"],[3,"Matrix"],[8,"NttModulus"],[3,"Polynomial"],[8,"MontgomeryReduction32"],[8,"Bounded"],[3,"Complex"],[3,"Saturating"],[8,"MIntBase"],[8,"MIntConvert"],[3,"QuadDouble"],[8,"Zero"],[8,"One"],[8,"AssociatedValue"],[3,"SimuratedAnnealing"],[8,"PartialOrdExt"],[3,"NotEmptySegment"],[8,"RandomSpec"],[8,"IterScan"],[8,"MarkedIterScan"],[3,"CharWithBase"],[3,"CharsWithBase"],[8,"GetDistinctMut"],[3,"TotalOrd"],[8,"Read"],[8,"Write"],[6,"UndirectedSparseGraph"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[8,"LcaMonoidDispatch"],[3,"HeavyLightDecomposition"],[3,"ReRooting"],[3,"TreeRec"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CartesianOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[3,"PermutationOperation"],[3,"ChtLine"],[3,"ConvexHullTrick"],[3,"SlideMinimum"],[3,"XorBasis"],[3,"SubsetTransform"],[3,"SupersetTransform"],[3,"DivisorTransform"],[3,"MultipleTransform"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"LessThanAutomaton"],[3,"GreaterThanAutomaton"],[3,"ContainAutomaton"],[3,"ContainCounterAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"BitVector"],[3,"BitSet"],[3,"DisjointSparseTable"],[3,"Static2DTree"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"SegmentTree"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"DequeAggregation"],[3,"Trie"],[3,"UnionFind"],[3,"WeightedUnionFind"],[3,"MergingUnionFind"],[3,"WaveletMatrix"],[3,"Circle"],[3,"Line"],[3,"LineSegment"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraph"],[3,"EdgeListGraphScanner"],[3,"GridGraph"],[3,"Adjacency4"],[3,"Adjacency8"],[3,"DinicBuilder"],[3,"Dinic"],[3,"PrimalDualBuilder"],[3,"PrimalDual"],[3,"DirectedEdge"],[3,"UndirectedEdge"],[3,"BidirectionalEdge"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"StronglyConnectedComponent"],[3,"TwoSatisfiability"],[3,"SmallModMemorizedFactorial"],[3,"DefaultFormalPowerSeriesMultiplier"],[3,"NumberTheoreticTransform"],[3,"BabyStepGiantStep"],[3,"PrimeTable"],[3,"EulerPhiTable"],[3,"Modulo998244353"],[3,"Modulo1000000007"],[3,"Modulo1000000009"],[3,"DynModuloU32"],[3,"DynModuloU64"],[3,"Modulo2"],[3,"Modulo998244353"],[3,"MInt"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"Counter"],[3,"RandIter"],[3,"Xorshift"],[3,"Scanner"],[3,"Usize1"],[3,"Chars"],[3,"Collect"],[3,"EulerTourForRichVertex"],[3,"LowestCommonAncestor"],[3,"LcaMonoidDefaultId"],[3,"LcaMonoid"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":[0,0,5,5,0,5,0,5,0,5,0,5,0,5,5,0,5,0,5,0,5,0,5,0,0,5,0,5,0,5,5,0,5,0,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,5,0,0,5,0,5,0,0,5,0,5,0,5],"n":["datastructure","point_add_range_sum","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","point_set_range_composite","point_set_range_composite","queue_operate_all_composite","queue_operate_all_composite","range_affine_range_sum","range_affine_range_sum","range_kth_smallest","range_kth_smallest","staticrmq","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","unionfind","unionfind","vertex_add_path_sum","vertex_add_path_sum","vertex_add_subtree_sum","vertex_add_subtree_sum","vertex_set_path_composite","vertex_set_path_composite","graph","bipartitematching","bipartitematching","directedmst","directedmst","lca","lca_euler_tour","lca_hld","scc","scc","math","convolution_mod","convolution_mod","convolution_mod_1000000007","convolution_mod_1000000007","enumerate_primes","enumerate_primes","exp_of_formal_power_series","exp_of_formal_power_series","factorize","factorize","inv_of_formal_power_series","inv_of_formal_power_series","log_of_formal_power_series","log_of_formal_power_series","pow_of_formal_power_series","pow_of_formal_power_series","sqrt_mod","sqrt_mod","sqrt_of_formal_power_series","sqrt_of_formal_power_series","sum_of_floor_of_linear","sum_of_floor_of_linear","two_sat","two_sat","sample","aplusb","aplusb","many_aplusb","many_aplusb","string","number_of_substrings","number_of_substrings","suffixarray","suffixarray","zalgorithm","zalgorithm"],"q":["library_checker","library_checker::datastructure","library_checker::datastructure::point_add_range_sum","","library_checker::datastructure","library_checker::datastructure::point_set_range_composite","library_checker::datastructure","library_checker::datastructure::queue_operate_all_composite","library_checker::datastructure","library_checker::datastructure::range_affine_range_sum","library_checker::datastructure","library_checker::datastructure::range_kth_smallest","library_checker::datastructure","library_checker::datastructure::staticrmq","","library_checker::datastructure","library_checker::datastructure::unionfind","library_checker::datastructure","library_checker::datastructure::vertex_add_path_sum","library_checker::datastructure","library_checker::datastructure::vertex_add_subtree_sum","library_checker::datastructure","library_checker::datastructure::vertex_set_path_composite","library_checker","library_checker::graph","library_checker::graph::bipartitematching","library_checker::graph","library_checker::graph::directedmst","library_checker::graph","library_checker::graph::lca","","library_checker::graph","library_checker::graph::scc","library_checker","library_checker::math","library_checker::math::convolution_mod","library_checker::math","library_checker::math::convolution_mod_1000000007","library_checker::math","library_checker::math::enumerate_primes","library_checker::math","library_checker::math::exp_of_formal_power_series","library_checker::math","library_checker::math::factorize","library_checker::math","library_checker::math::inv_of_formal_power_series","library_checker::math","library_checker::math::log_of_formal_power_series","library_checker::math","library_checker::math::pow_of_formal_power_series","library_checker::math","library_checker::math::sqrt_mod","library_checker::math","library_checker::math::sqrt_of_formal_power_series","library_checker::math","library_checker::math::sum_of_floor_of_linear","library_checker::math","library_checker::math::two_sat","library_checker","library_checker::sample","library_checker::sample::aplusb","library_checker::sample","library_checker::sample::many_aplusb","library_checker","library_checker::string","library_checker::string::number_of_substrings","library_checker::string","library_checker::string::suffixarray","library_checker::string","library_checker::string::zalgorithm"],"d":["","","✅  AC  110ms","✅  AC  126ms","","✅  AC  205ms","","✅  AC  52ms","","✅  AC  621ms","","✅  AC  351ms","","✅  AC  151ms","✅  AC  151ms","","✅  AC  19ms","","✅  AC  785ms","","✅  AC  224ms","","✅  AC  291ms","","","✅  AC  175ms","","✅  AC  163ms","","✅  AC  750ms","✅  AC  478ms","","✅  AC  226ms","","","✅  AC  353ms","","✅  AC  1549ms","","✅  AC  2879ms","","✅  AC  1995ms","","✅  AC  1890ms","","✅  AC  578ms","","✅  AC  1047ms","","✅  AC  3534ms","","✅  AC  185ms","","✅  AC  1648ms","","✅  AC  73ms","","✅  AC  340ms","","","✅  AC  0ms","","✅  AC  168ms","","","✅  AC  1072ms","","✅  AC  980ms","","✅  AC  41ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,[[]],[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],[[]],null,[[]],null,null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,[[]],null,null,[[]],null,[[]],null,null,[[]],null,[[]],null,[[]]],"p":[],"a":{"verify":[2,3,5,7,9,11,13,14,16,18,20,22,25,27,29,30,32,35,37,39,41,43,45,47,49,51,53,55,57,60,62,65,67,69]}}\
}');
initSearch(searchIndex);