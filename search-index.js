var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,5,2,5,2,5,5,2,2,5,2,5,2,5,2,5,5,2,5,2,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,2,5,2,2,5,2,2,5,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,5,5,2,2,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,5,5,2,2,2,2,5,2,2,2,2,2,5,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,5,2,5,5,2,2,5,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,2,2,5,2,2,5,2,2,5,2,2,5,0,5],"n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","dpl_1_e","levenshtein_distance","KnapsackPloblemSmallValue","dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","dpl_3_a","largest_square","dpl_3_b","largest_rectangle_in_grid","dpl_3_c","largest_rectangle","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","MinOperation","SegmentTree","dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","Static2DTree","dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","dsl_3_b","dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","EdgeListGraphScanner","grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","DirectedGraphScanner","grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","itp1_1_a","itp1_1_a"],"q":["aizu_online_judge","","","","aizu_online_judge::dpl","","","","","","","","","","","","aizu_online_judge::dpl::dpl_1_a","aizu_online_judge::dpl::dpl_1_b","","aizu_online_judge::dpl::dpl_1_c","","aizu_online_judge::dpl::dpl_1_d","","aizu_online_judge::dpl::dpl_1_e","","aizu_online_judge::dpl::dpl_1_f","","aizu_online_judge::dpl::dpl_1_g","","aizu_online_judge::dpl::dpl_1_h","","aizu_online_judge::dpl::dpl_1_i","","aizu_online_judge::dpl::dpl_3_a","","aizu_online_judge::dpl::dpl_3_b","","aizu_online_judge::dpl::dpl_3_c","","aizu_online_judge::dsl","","","","","","","","","","","","","","","","","","aizu_online_judge::dsl::dsl_1_a","","aizu_online_judge::dsl::dsl_1_b","","","aizu_online_judge::dsl::dsl_2_a","","","aizu_online_judge::dsl::dsl_2_b","","","aizu_online_judge::dsl::dsl_2_c","","aizu_online_judge::dsl::dsl_2_d","","","aizu_online_judge::dsl::dsl_2_e","","","aizu_online_judge::dsl::dsl_2_f","","","aizu_online_judge::dsl::dsl_2_g","","","aizu_online_judge::dsl::dsl_2_h","","","aizu_online_judge::dsl::dsl_2_i","","","aizu_online_judge::dsl::dsl_3_a","","","aizu_online_judge::dsl::dsl_3_b","aizu_online_judge::dsl::dsl_3_c","aizu_online_judge::dsl::dsl_3_d","","","aizu_online_judge::dsl::dsl_4_a","aizu_online_judge::dsl::dsl_5_a","aizu_online_judge::dsl::dsl_5_b","aizu_online_judge::grl","","","","","","","","","","","","","","","","","","aizu_online_judge::grl::grl_1_a","","","","","","","","aizu_online_judge::grl::grl_1_b","","","","","aizu_online_judge::grl::grl_1_c","","","","","","aizu_online_judge::grl::grl_2_a","","aizu_online_judge::grl::grl_2_b","","","","aizu_online_judge::grl::grl_3_a","","","aizu_online_judge::grl::grl_3_b","","","aizu_online_judge::grl::grl_3_c","","","aizu_online_judge::grl::grl_4_a","","aizu_online_judge::grl::grl_4_b","","","aizu_online_judge::grl::grl_5_a","","","aizu_online_judge::grl::grl_5_b","","","","aizu_online_judge::grl::grl_5_c","","","","","aizu_online_judge::grl::grl_5_d","","","","","","aizu_online_judge::grl::grl_5_e","","","","","","","aizu_online_judge::grl::grl_6_a","","","aizu_online_judge::grl::grl_6_b","","","aizu_online_judge::grl::grl_7_a","","","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a"],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  2ms","","✅  AC  1ms","","✅  AC  3ms","","✅  AC  7ms","✅  AC  6ms","","","✅  AC  0ms","","✅  AC  9ms","","✅  AC  55ms","","✅  AC  0ms","✅  AC  22ms","","✅  AC  19ms","","✅  AC  2ms","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  7ms","","","✅  AC  19ms","","","✅  AC  15ms","","","✅  AC  14ms","","✅  AC  426ms","","","✅  AC  77ms","","","✅  AC  44ms","","","✅  AC  80ms","","","✅  AC  57ms","","","✅  AC  55ms","","","✅  AC  75ms","","","✅  AC  4ms","✅  AC  2ms","✅  AC  266ms","","","✅  AC  85ms","✅  AC  74ms","✅  AC  3ms","✅  AC  7ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  61ms","✅  AC  70ms","","","","","✅  AC  10ms","","","","","","✅  AC  6ms","","✅  AC  24ms","","","","✅  AC  0ms","","","✅  AC  3ms","","","✅  AC  3ms","","","✅  AC  5ms","","✅  AC  0ms","","✅  AC  2ms","","","","✅  AC  8ms","","","","✅  AC  3ms","","","","","✅  AC  87ms","","","","","","✅  AC  43ms","","","","","","","✅  AC  199ms","","","✅  AC  0ms","","","✅  AC  0ms","","","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,[[1,2]],0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,1,1],3],0,0,[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"],[15,"bool"]],"a":{"verify":[16,18,20,22,23,26,28,30,32,33,35,37,58,61,64,67,69,72,75,78,81,84,87,90,91,92,95,96,97,98,123,124,129,135,137,141,144,147,150,152,154,158,162,167,173,180,183,186,189,191]}},\
"competitive":{"doc":"github","t":[14,0,0,14,14,14,14,14,14,0,14,14,0,14,14,14,14,0,0,14,14,14,14,14,0,14,14,14,14,14,14,14,0,0,14,14,14,14,14,14,14,14,0,14,0,0,8,8,16,16,3,16,3,16,16,8,8,3,8,3,8,3,3,8,3,8,3,3,8,8,8,8,16,3,3,8,3,3,8,8,16,3,4,3,3,3,3,3,3,3,3,3,8,8,8,16,16,3,8,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,16,16,3,8,3,3,3,3,3,16,16,8,3,8,3,3,16,3,8,3,8,3,16,3,3,3,16,8,3,11,10,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,12,11,10,5,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,10,11,5,5,10,5,11,11,10,10,10,5,10,10,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,8,16,3,3,8,3,3,3,3,3,3,3,6,6,6,6,3,6,6,6,6,8,3,3,6,6,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,16,3,8,3,3,3,3,3,3,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,14,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,8,4,3,13,13,3,3,13,13,13,6,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,16,16,16,16,16,16,8,8,8,3,8,8,8,3,3,8,3,3,4,6,6,3,3,3,3,4,6,6,16,16,8,16,3,3,8,8,8,8,16,8,3,3,3,3,3,3,3,8,8,3,3,8,3,3,3,16,3,3,4,6,6,3,3,16,16,3,3,3,16,8,8,8,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,12,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,12,11,11,10,11,11,11,12,10,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,12,11,3,6,4,8,3,16,3,8,8,6,6,6,18,18,3,3,3,3,3,3,3,3,3,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,5,11,11,11,5,5,5,11,12,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,11,11,11,5,11,5,5,10,11,11,11,11,11,5,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,8,8,3,18,8,3,18,18,16,3,18,18,18,18,18,18,18,18,18,8,3,3,18,16,8,18,18,18,18,18,18,18,18,18,18,18,18,3,8,8,18,18,8,18,3,18,8,18,3,8,16,18,8,16,3,8,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,10,11,11,10,11,11,11,11,11,0,10,10,10,10,10,10,10,11,11,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,6,6,4,4,6,6,6,6,4,4,3,4,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,6,4,4,4,4,8,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,8,3,4,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,10,5,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,3,18,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,8,8,3,4,3,8,3,4,3,3,8,8,8,18,8,3,16,16,16,3,8,3,3,8,18,3,3,3,3,3,16,3,4,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,10,12,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,10,11,11,11,12,11,11,11,11,11,5,5,5,5,5,10,11,11,14,14,11,11,11,11,11,11,11,12,12,11,12,12,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,3,3,3,3,3,4,8,3,3,13,3,3,3,3,4,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,10,11,11,12,12,12],"n":["add_assign","algebra","algorithm","automaton","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","iter_print","math","max","memorize","min","minmax","mlambda","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","tools","tree","AbelianGroup","AbelianMonoid","Act","ActMonoid","AddMulOperation","Additive","AdditiveOperation","Agg","AggMonoid","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","Field","FindMajorityOperation","FirstOperation","Group","Idempotent","IdempotentMonoid","Invertible","Key","LastOperation","LinearOperation","Magma","MaxOperation","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","Top2Operation","Unital","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_operate","act_operate","act_operate_assign","act_operate_assign","act_unit","act_unit","add","add","add","agg_operate","agg_operate","agg_operate_assign","agg_operate_assign","agg_unit","agg_unit","all_one","all_zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone_into","clone_into","define_monoid","div","div","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","mul","mul","neg","neg","one","one","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","single","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","sub","sub","sum","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","zero","zero","0","Answer","B","BabyStepGiantStep","Bisect","BitDp","Combinations","ConvexHullTrick","DivisorTransform","IndependentSubSet","LIter","M","MoSolver","MultipleTransform","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","SubsetTransform","Subsets","SupersetTransform","T","Trisect","XorBasis","add_line","answer","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","combinations","combinations_with_replacement","convolve","convolve","convolve","convolve","default","default","default","elements","eq","eval","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_bucket","fold_cell","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","halve","ind","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_element","is_subset","k_colorable","middle","mo_solve","mo_solve","mobius_transform","mobius_transform","mobius_transform","mobius_transform","n","new","new","new","new","new","new","new_with_primes","new_with_primes","next","next","next_left","next_left","next_minimum","next_right","next_right","next_section","not_elements","parallel_binary_search","permutations","position_bisect","product","query","reduce","remove","rfind_bisect","rposition_bisect","run_length_encoding","section_end","section_end","slide_minimum","solve","sqrt_decomposition","sqrt_decomposition","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_bucket","update_cell","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","1","1","1","Accumulate","Allocator","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","CompressedBinaryIndexedTree","CompressedBinaryIndexedTree1d","CompressedBinaryIndexedTree2d","CompressedBinaryIndexedTree3d","CompressedBinaryIndexedTree4d","CompressedSegmentTree","CompressedSegmentTree1d","CompressedSegmentTree2d","CompressedSegmentTree3d","CompressedSegmentTree4d","Compressor","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCompress","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MemoryPool","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTreeMap","SlopeTrick","SplayMap","SplaySequence","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","VecCompress","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","allocate","allocate","append","as_slice","automaton","back","bit_length","bit_length","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_failure","build_inplace","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count_ones","count_zeros","dd","deallocate","deallocate","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","drop","drop","drop","edges","eq","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get","get","get_difference","get_key_value","get_key_value_at","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","index_exact","index_exact","index_exact","index_lower_bound","index_lower_bound","index_lower_bound","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert","insert","insert","insert_at","insert_once_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","iter","iter","iter","iter_mut","keys","keys","keys","last","len","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","modify","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next_node","node_size","not","not","ones","partial_cmp","pop","pop_back","pop_front","pop_left_if","pop_left_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","quantile_outer","query_min","range","range","range","range_at","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove","remove","remove_at","remove_count","remove_count","reverse","reverse","roots","roots","roots","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update_isize","valley","values","values","values","values_mut","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","0","Approx","ApproxOrd","Ccw","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","Point","approx_cmp","approx_eq","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","ccw_open","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","default","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","add_assign","add_assign","add_assign","add_assign","add_clause","add_cost1","add_cost2","add_cost2_01","add_cost2_10","add_edge","add_edge","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adj4","adj8","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies_with_eindex","adjacencies_with_eindex","adjacencies_with_value","adjacencies_with_value","adjacencies_with_value","adjacency","articulation","avalue","avalue","avalue","aviews","aviews","aviews","aviews","aviews","aviews","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","build","builder","builder","builder","builder_with_esize","change_edge","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","components","construct_emap","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","construct_vmap","construct_vmap","construct_vmap","construct_vmap","default","default","default","dfs_order","dfs_tree","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","dulmage_mendelsohn_decomposition","edges","edges","edges","edges_size","edges_size","eindex","eindex","eindex","eindex","elist","emap_get","emap_get","emap_get_mut","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","eq","eq","eq","eq","esize","esize","esize","eview","eview","eview","extend","extend","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","hash","hash","hash","height","hopcroft_karp","id","index","index","inf","inf","inf","inf","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","kuhn_multi_start_bfs","low","map","map","maximum_flow","maximum_flow_limited","maximum_independent_set","maximum_matching","minimum_cost_flow","minimum_cost_flow_limited","minimum_cut","minimum_edge_cover","minimum_spanning_arborescence","minimum_spanning_tree","minimum_vertex_cover","move_by_diff","mscan","mscan","mscan","mscan","mul","mul","mul","mul","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_adj4","new_adj8","new_with_esize","next","next","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","solve","source","source","source","source","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices_size","vertices_size","vindex","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_set","vmap_set","vsize","vsize","vsize","vview","vview","vview","vview","vview","vview","vview","warshall_floyd_ap","warshall_floyd_ap","weighted_tree_depth","weighted_tree_depth","width","with_n_values","Convolve","Convolve998244353","ConvolveRealFft","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","MIntConvolve","MOD","MOD","Matrix","MemorizedFactorial","Mersenne127","Mersenne61","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","assign","berlekamp_massey","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","check_primitive_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convolve","convolve","count_divisors","count_divisors","count_multiset_sum","count_subset_sum","data","data","data","default","default","default","default","determinant","diff","discrete_logarithm","discrete_logarithm_prime_mod","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","divisors","divisors","divisors","eq","eq","eq","euler_phi","eval","even","exp","extgcd","extgcd_binary","extgcd_recurse","eye","fact","factorial","floor_sum","floor_sum_i64","floor_sum_range_freq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_loop","get","get_mod","get_mod","highly_composite_number","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","inv","inv","inv","inv_fact","inverse","inverse_transform","inverse_transform","inverse_transform","inverse_transform","is_prime","is_prime","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","length","length","length","length","linear_congruence","log","miller_rabin","miller_rabin_with_br","mod_add","mod_add","mod_div","mod_div","mod_inv","mod_inv","mod_mul","mod_mul","mod_neg","mod_neg","mod_one","mod_one","mod_sub","mod_sub","mod_zero","mod_zero","modinv","modinv_extgcd_binary","modinv_recurse","moebius","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply","multiply","multipoint_evaluation","neg","neg","new","new","new","new","new","new","new","odd","one","one","permutation","pow","pow","pow","pow","powi","prefix","prefix_ref","prime_factors","prime_factors","prime_factors","prime_factors_flatten","primes","primes_lte","primitive_root","product_all","rank","rem","rem","rem","rem","rem","rem_assign","rem_assign","reserve","resize","resized","reversed","row_reduction","shape","shl","shl","shl_assign","shr","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","taylor_shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","transform","trial_division","trial_division","trim_tail_zeros","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zeros","zeros","0","0","0","0","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp_by_arg","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","default","delta","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_rem","div_rem","div_rem","dot","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","get_mod","get_mod","get_mod","hash","hash","hash","hash","hypot","hypot","hypot","i","im","index","inner","into","into","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","is_zero","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","minimum","minimum","minimum","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new_unchecked","norm","not","not","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","primitive_nth_root_of_unity","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","scan","scan","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_mod","set_mod","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","local_key","local_key","local_key","local_key","n1","n1","n1","n1","n1","n2","n2","n2","n2","n2","n3","n3","n3","n3","n3","r","r","r","r","r","r","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Chars","Read","Scanner","Usize1","Write","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","bytes","chain","clone","clone","clone","clone_into","clone_into","clone_into","flush","fmt","fmt","fmt","from","from","from","into","into","into","is_read_vectored","is_write_vectored","iter","iter_print","mscan","new","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","scan","scan","scan","scan_vec","take","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_all","write_all_vectored","write_fmt","write_vectored","KnuthMorrisPratt","MOD","MultipleRollingHash","RollingHash","SuffixArray","Zarray","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","find","find","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash_once","index","index","into","into","into","into","into","longest_common_prefix_array","mersenne_mod","mersenne_mul","mersenne_mul_mod","new","new","new","new","new","new_rand","search","search_all","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","1","AsTotalOrd","AssociatedValue","ByteWithBase","Bytes","BytesWithBase","CharTools","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","LOG_TABLE_SIZE","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandRange","RandomSpec","SEED","Scanner","ScannerIter","SimuratedAnnealing","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","end_temp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_accepted","is_end","is_maximize","iter_count","iter_print","local_key","log_table","minimize","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","new","new","new","new","new","next","next","now","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rand","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","scan","scan","scan","scan","scan_value","set","set","set_end_temp","set_start_temp","set_time_limit","set_update_interval","shuffle","start_temp","temperture","time","time","time_limit","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_upper_alphabetic_number","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_interval","with","with","0","0","0","0","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","TreeRec","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dfs","dp","eidx","ep","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","n","new","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","time_seeded","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vidx","vsize","vsize","with_seed","0","0","1"],"q":["competitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebracompetitive::algorithmcompetitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structurecompetitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graphcompetitive::mathcompetitive::numcompetitive::num::mint_basiccompetitive::num::montgomery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::toolscompetitive::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::tree::TreeCenter","",""],"d":["","algebra","algorithm","build automaton","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","Implement <code>AssociatedValue</code>.","","","","Print expressions with a separator.","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","string algorithems","","","tree algorithems","commutative group","commutative monoid","","","$+,\\\\times$","","$+$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","Find majority(strict) of a sequence.","retain the first element","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","$a$ where $a \\\\circ x = e$","","","","","","","","","","multiplicative operaion: $+$","multiplicative operaion: $+$","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","additive identity: $0$","additive identity: $0$","","","","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","binary search helper","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","ternary search helper","Basis of xor operation.","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","","","choose distinct <code>r</code> elements from <code>n</code> in sorted order","","choose <code>r</code> elements from <code>n</code> in sorted order","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","get i-th value of rho path","return between two elements","","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","middle point of section","","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","","Create a empty space.","","","","","","","","","","Divide into 3 sections","","","choose distinct <code>r</code> elements from <code>n</code> in any order","Returns the first index that satisfies a predicate. if not …","choose <code>r</code> elements from <code>n</code> independently","","Return (reduced basis, coordinate). Coordinate means if …","","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","the end condition of binary search","the end condition of ternary search","","","","","","like <code>(left..=right).min_by_key(f)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return accumlate of [0, k)","fold [0, k]","fold [0, i] x [0, j]","","","","","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of [l, r)","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Create empty","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","get k-th smallest value in range","get k-th smallest value out of range","","","","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-badd a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(p_x = f) | (p_y = g)","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","","","","","","","","","Return a slice of adjacency verticeseturn the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","","Return an iterator over graph vertices.","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e","Sum of Floor of Linear mod 2^64","Sum of Floor of Linear mod 2^64","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","binary gcd","","","","","[(hcn, #divisor)]","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","","return: (y,z)","","","","","","","","","","","","","","","","","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationseturns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","m","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","n^1 mod m","","","","","n^2 mod m","","","","","n^3 mod m","","","","","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","","","","","","","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","","","","","","","Flush this output stream, ensuring that all intermediately …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","","","","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","","","","","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","S [l, r)","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","","Trait for spec of generating random value.","","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","","","","","","","","","","","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","","","","","","","","","","","","","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[[2,[3]]],[[2,[3]]]],[[[4,[3]]],[[4,[3]]]],[[]],[[]],0,[[]],[[]],[[[2,[5]],6],7],[[[4,[5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[12,13,13]],[[]],[[14,15],[[1,[[16,[15]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[],17],[[17,9],[[17,[9]]]],[[[19,[18]]],9],[20,20],[21,21],[22,22],[[[19,[[0,[3,18]]]]],[[19,[[0,[3,18]]]]]],[12,12],[[[23,[3]]],[[23,[3]]]],[14,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[20,9],22],[9],[[16,16],16],[[16,16],16],[[24,16,16],16],[[25,16,16],16],[[],20],[[],12],[[],14],[[20,9],26],[[20,20],8],[23,13],0,[[14,15],[[1,[15]]]],[27,1],[9,[[16,[9]]]],[[[28,[5]],6],7],[[20,6],7],[[21,6],7],[[22,6],7],[[[19,[[0,[5,18]]]],6],7],[[12,6],7],[[[23,[5]],6],7],[[[17,[5]],6],7],[[14,6],7],[[29,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[18]]]],[30,14],0,[[17,9]],[[]],0,[9],[[14,15],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],8],[[9,9],8],[[[19,[18]],9],8],[[]],[9],[9],[[]],[[]],[24],[25],0,[[],31],[9,28],[[],12],[[],23],[9,32],[[],14],[[],24],[[],25],[21,1],[22,1],[[]],[31],[32,13],[[]],[31],[[]],[[20,9],26],[9,16],[9],[27,9],[9],[[12,13],13],[[14,15]],[9],[27,1],[27,9],[[],16],[[],8],[[],8],[9,[[16,[9]]]],[28,[[1,[9]]]],[[9,9],29],[[9,9],29],[9,21],[27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[29,9,9]],[[]],[[]],[[]],[[]],[24],[25],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[34,34],[35,35],[36,36],[37,37],[[[38,[3]]],[[38,[3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],38],0,0,0,[33],[34],[35],[[38,30]],[33],[34],[33],[34],[33],[[33,6],7],[[34,6],7],[[35,6],7],[[36,6],7],[[37,6],7],[[[38,[5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[33,9],[[1,[13]]]],[[34,9],[[1,[13]]]],[[33,13,9]],[[34,9,13]],[[35,13,13]],[38],[[33,13,9]],[[34,9,13]],[[33,13,9,9]],[[34,9,13,9]],[[33,13,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[37,9],[[1,[[16,[9]]]]]],[[],9],[[9,9,39],9],[[9,9,39],9],[[],9],[38,9],[33,9],[9,33],[9,34],[[],35],[[],36],[[],37],[[],38],[33,[[1,[13]]]],[[34,13],[[1,[9]]]],[[35,13],13],[[36,13],13],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[40,8],[41,8],[42,8],[43,8],[44,8],[45,8],[46,8],[47,8],[48,8],[49,8],[9,8],[[50,9],8],[[51,9],9],[[52,9]],[[53,9]],[[54,9,9]],[[[55,[0]]]],[[[55,[[55,[[55,[0]]]]]]]],[[[55,[[55,[[55,[[55,[0]]]]]]]]]],[[[55,[[55,[0]]]]]],[[53,9]],[[54,9,9]],[56],[57],[[58,13]],[[58,13]],[[56,9]],[[57,9]],[[58,13]],[[58,13]],[[[59,[39]]],[[60,[9,[16,[9]]]]]],[61,[[60,[9,[16,[9]]]]]],[62,[[60,[9,[16,[9]]]]]],[[],63],[64,63],[[56,56]],[65],0,[66,1],[[],9],[50,9],[[67,67]],[[67,67]],[[67,67]],[[67,67]],[[67,67]],[[67,67]],[[67,67]],[[67,67]],[[67,67]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[68],[69],[56],[57],[70],[71],[58],[58],[53,53],[54,54],[55,55],[72,72],[73,73],[74,74],[75,75],[65,65],[76,76],[77,77],[66,66],[61,61],[[[78,[3,3]]],[[78,[3,3]]]],[[[40,[3,3]]],[[40,[3,3]]]],[[[41,[3,3]]],[[41,[3,3]]]],[[[42,[3,3]]],[[42,[3,3]]]],[[[43,[3,3,3,3,3]]],[[43,[3,3,3,3,3]]]],[[[44,[3,3,3,3,3]]],[[44,[3,3,3,3,3]]]],[[[45,[3,3,3,3,3,3]]],[[45,[3,3,3,3,3,3]]]],[[[46,[3]]],[[46,[3]]]],[[[47,[3]]],[[47,[3]]]],[[[48,[3]]],[[48,[3]]]],[[[49,[3]]],[[49,[3]]]],[50,50],[67,67],[[[79,[3]]],[[79,[3]]]],[[[80,[3]]],[[80,[3]]]],[[[56,[3]]],[[56,[3]]]],[[[57,[3]]],[[57,[3]]]],[[[81,[3]]],[[81,[3]]]],[69,69],[[[70,[3,3]]],[[70,[3,3]]]],[[[71,[3]]],[[71,[3]]]],[58,58],[68,68],[62,62],[51,51],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[67,67],82],[71,8],[70,8],[67,15],[67,15],0,[63],[[64,63]],[[],55],[[],72],[[],77],[[],66],[[],83],[[],84],[[],64],[[],48],[[],49],[[],67],[[],56],[[],57],[[],81],[[],70],[[],71],[[],58],[[],78],[[],78],0,[56,[[85,[9]]]],[70],[71],[83],[84],[64],[68,16],[[67,67],8],[[56,30]],[[56,30]],[[57,30]],[[57,30]],[[70,30]],[[71,30]],[[[59,[39]],9],9],[[61,9],9],[68,[[10,[9,9]]]],[[62,9],9],[[68,9],[[10,[9,9]]]],[[[59,[39]],9],[[86,[0]]]],[[[59,[39]],9],[[87,[0]]]],[[52,6],7],[[53,6],7],[[54,6],7],[[55,6],7],[[72,6],7],[[73,6],7],[[74,6],7],[[75,6],7],[[65,6],7],[[76,6],7],[[77,6],7],[[66,6],7],[[83,6],7],[[84,6],7],[[61,6],7],[[[64,[5]],6],7],[[78,6],7],[[[40,[5,5]],6],7],[[[41,[5,5]],6],7],[[[42,[5,5]],6],7],[[[43,[5,5,5,5,5]],6],7],[[[44,[5,5,5,5,5]],6],7],[[[45,[5,5,5,5,5,5]],6],7],[[[46,[5]],6],7],[[[47,[5]],6],7],[[[48,[5]],6],7],[[[49,[5]],6],7],[[50,6],7],[[67,6],7],[[[79,[5]],6],7],[[80,6],7],[[56,6],7],[[57,6],7],[[[81,[5]],6],7],[[69,6],7],[[[70,[5,5]],6],7],[[[71,[5]],6],7],[[58,6],7],[[68,6],7],[[62,6],7],[[51,6],7],[[52,9,9]],[[[53,[88]],9,9]],[[54,9,9,9,9]],[[[72,[[72,[[72,[[72,[0]]]]]]]]]],[[[72,[[72,[[72,[0]]]]]]]],[[[72,[[72,[0]]]]]],[[[72,[0]]]],[[73,9,9]],[[74,9,9]],[[75,9,9]],[65],[76],[83],[78],[74],[75],[65],[76],[77],[66],[[73,9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],52],[30,50],[[],79],[[],80],[30,56],[30,56],[30,57],[30,57],[30,70],[30,71],[[],53],[16,74],[16,65],[66,1],[[[53,[88]],9]],[[54,9,9]],[[74,9]],[[75,9]],[[65,9]],[[76,9]],[[83,9],1],[84,1],[[67,9],8],[56,9],[57,9],[70,1],[[61,9,9],1],[84,1],[[84,9],1],[70,1],[71,1],[71,1],[70,1],[70,1],[71,1],[[61,9]],[[],46],[[],47],[[],46],[[],47],[67],[73,9],[[73,9]],[[],[[1,[9]]]],[79,[[1,[9]]]],[80,[[1,[9]]]],[[],9],[79,9],[80,9],[[]],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[[83,9]],[84,1],[81],[70],[71],[68,[[16,[9]]]],[[68,9],[[16,[9]]]],[[68,9,9],9],[70],[71],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[77,8],[66,8],[84,8],[56,8],[57,8],[[61,9,9],8],0,[56,[[89,[9]]]],[57,[[90,[9]]]],[70,90],[71,91],[70,92],[56,[[93,[9]]]],[57,[[91,[9]]]],[70,91],[77,1],[77,9],[66,9],[84,9],[56,9],[57,9],[[],46],[[],47],[[],46],[[],47],[[[53,[94]]],9],[78,60],[[[59,[39]],9],[[16,[9]]]],[[61,9],[[16,[9]]]],[[62,9],[[16,[9]]]],[58],[58,13],[[83,9]],[9,53],[[9,9],54],[[],[[55,[[55,[[55,[0]]]]]]]],[[],[[55,[[55,[[55,[[55,[0]]]]]]]]]],[[],[[55,[0]]]],[[],[[55,[[55,[0]]]]]],[[],[[72,[[72,[0]]]]]],[[],[[72,[0]]]],[[],[[72,[[72,[[72,[0]]]]]]]],[[],[[72,[[72,[[72,[[72,[0]]]]]]]]]],[16,73],[[],95],[9,74],[9,75],[[9,39,39],[[59,[39]]]],[9,65],[9,76],[[],77],[[],66],[[],83],[[],84],[9,61],[[],64],[[],78],[[],43],[[],44],[[],45],[[],48],[[],49],[9,67],[[],56],[[],57],[[],81],[9,69],[[],70],[[],71],[[],58],[9,68],[9,62],[[[16,[[0,[3,96]]]],9],51],[[],1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[[68,9,9],[[1,[9]]]],[68,9],[67],[67],[9,67],[[67,67],[[1,[82]]]],[77,1],[66,1],[66,1],[70,1],[71,1],[70,1],[71,1],[[74,9,9],[[1,[9]]]],[[75,9,9],[[1,[9]]]],[65,[[1,[9]]]],[76,[[1,[9]]]],[77],[66],[66],[[51,[97,[9]],9],9],[[51,[97,[9]],9],9],[81,1],[[95,97,97],16],0,[57,[[98,[9]]]],0,[[51,9,[97,[9]]],9],[9,9],[9,9],[9,9],[9,9],[[50,9],9],[[51,9,[97,[9]]],9],[[51,[97,[9]],[97,[9]]],9],[[83,9],1],[84,1],[56,8],[57,8],[70],[71],[[84,9],1],[[56,9],9],[[57,9],9],[66],[83],[[[59,[39]]],[[16,[9]]]],[61,[[16,[9]]]],[62,[[16,[9]]]],[[74,9,9],[[1,[9]]]],[[75,9,9],[[1,[9]]]],[65,[[1,[9]]]],[76,[[1,[9]]]],[[78,9]],[[78,9]],[[[59,[39]],9,9],8],[[62,9,9],8],[[51,9,9],[[1,[9]]]],[9,[[1,[9]]]],[9,[[1,[9]]]],[[50,9],[[1,[9]]]],[9,[[1,[9]]]],[9,[[1,[9]]]],[[50,9],[[1,[9]]]],[[[53,[88]],9]],[[54,9,9]],[[74,9]],[[75,9]],[[65,9]],[[76,9]],[[67,9,8]],[[58,13]],[[67,9]],[[67,9]],[[67,9]],[[67,9]],[[67,9]],[[67,9]],[[],9],[[[59,[39]],9],9],[[61,9],9],[79,9],[80,9],[[62,9],9],[[58,13,13]],[78],[78],[[],16],[9,16],[[],16],[9,16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[59,[39]],9,9],8],[[61,9,9],8],[[62,9,9],8],[[53,9]],[[54,9,9]],[[[55,[[55,[[55,[0]]]]]]]],[[[55,[[55,[0]]]]]],[[[55,[[55,[[55,[[55,[0]]]]]]]]]],[[[55,[0]]]],[[[72,[[72,[0]]]]]],[[[72,[0]]]],[[[72,[[72,[[72,[0]]]]]]]],[[[72,[[72,[[72,[[72,[0]]]]]]]]]],[[74,9,9]],[[75,9,9]],[[65,9]],[[76,9]],[83],[[69,9,9,13,13]],[[69,99,9,13,13]],[[13,9],58],[56,[[100,[9]]]],[57,[[101,[9]]]],[70,101],[70,102],[9,83],[9,84],[9,64],[9,56],[[9,9],68],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],82],[[],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[103,103,103],104],[[105,106],104],[[107,106],104],[[103,103,103],104],[[[108,[3]]],[[108,[3]]]],[104,104],[109,109],[105,105],[107,107],[[]],[[]],[[]],[[]],[[]],[[[16,[106]]],110],[[108,108],82],[[104,104],82],[[109,106],8],[[[16,[106]]],110],[[[16,[106]]],[[16,[106]]]],[[109,109],1],[[107,107],[[1,[106]]]],[[],[[108,[111]]]],[105,106],[107,106],[[107,107],110],[[105,106],110],[[107,106],110],[[108,108],8],[[104,104],8],[[109,109],8],[[105,105],8],[[107,107],8],[[[108,[5]],6],7],[[104,6],7],[[109,6],7],[[105,6],7],[[107,6],7],[[]],[[]],[[]],[[]],[[]],[104],[[107,107],8],[[107,106],8],[[]],[[]],[[]],[[]],[[]],[[105,105],8],[[107,107],8],[[105,105],8],[[107,107],8],[[106,110],109],[[106,106],105],[[106,106],107],[[108,108],[[1,[82]]]],[[104,104],[[1,[82]]]],[[105,106],106],[[107,106],106],[[105,106],106],[[107,106],106],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[112,9,8,9,8]],[[113,9,9,13]],[[113,9,9]],[[113,9,9,9,9,15]],[[113,9,9,9,9,15]],[[114,9,9]],[[115,9,9]],[[116,9,9]],[[117,9,9,15]],[[118,9,9,15,13]],[[112,9,9]],[[112,9,9]],[[115,9,9]],[[[119,[0]]],[[0,[0]]]],[[[119,[0]]],[[0,[0]]]],[[]],[120],[121],[[[119,[0]]]],[[[119,[0]]]],[122],[[122,9],[[124,[123]]]],[[]],[122],[[]],[120],[121],[[115,9],16],0,[[]],[125],[126],[[]],[120],[121],[[[119,[0]]]],[[[119,[0]]]],[122],[8,1],[8,1],[8,1],[8,1],[[]],[[]],[[]],[[]],[[122,9],[[16,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[114],[[117,127],128],[[118,127],129],[[9,9],117],[[9,9],118],[9,114],[[9,9],114],[[128,9,15,15]],[115,115],[116,116],[130,130],[[[131,[3]]],[[131,[3]]]],[[[132,[3,3]]],[[132,[3,3]]]],[[[125,[3,3]]],[[125,[3,3]]]],[[[126,[3,3,3]]],[[126,[3,3,3]]]],[[[119,[3]]],[[119,[3]]]],[117,117],[128,128],[118,118],[113,113],[133,133],[134,134],[135,135],[123,123],[[[122,[3]]],[[122,[3]]]],[136,136],[112,112],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[131,[137]],131],82],[[[132,[137,137]],132],82],[[[125,[137,137]],125],82],[[[126,[137,137,137]],126],82],[[133,133],82],[[134,134],82],[[135,135],82],[[123,123],82],[136,[[16,[[16,[9]]]]]],[[]],[122],[[9,16],122],[[9,16],[[122,[133]]]],[[9,16],[[122,[134]]]],[[9,16],[[122,[135]]]],[[]],[120],[121],[119],[122],[[],115],[[],113],[[],123],[[122,9],[[16,[9]]]],[[122,9],[[16,[8]]]],[[]],[[]],[[]],[[]],[[9,9],16],[[]],[130,124],0,[130,9],[122,9],[[]],[132],[126],[123],0,[[]],[122],[[]],[122],[[]],[[]],[[[131,[138]],131],8],[[[132,[138,138]],132],8],[[[125,[138,138]],125],8],[[[126,[138,138,138]],126],8],[[133,133],8],[[134,134],8],[[135,135],8],[[123,123],8],[[],9],[122,9],0,[[]],[[122,16]],[122],[[117,30]],[[118,30]],[119,9],[[115,6],7],[[116,6],7],[[130,6],7],[[[131,[5]],6],7],[[[132,[5,5]],6],7],[[[125,[5,5]],6],7],[[[126,[5,5,5]],6],7],[[[119,[5]],6],7],[[117,6],7],[[128,6],7],[[118,6],7],[[129,6],7],[[113,6],7],[[133,6],7],[[134,6],7],[[135,6],7],[[123,6],7],[[[122,[5]],6],7],[[136,6],7],[[112,6],7],[122],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],131],[[]],[139],[[],132],[[]],[[],125],[[]],[[],126],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],116],[[9,16],130],[[9,16],122],[136,140],[117,127],[118,127],[[128,9],15],[[129,9],15],0,[136,8],[[[131,[141]]]],[[[132,[141,141]]]],[[[125,[141,141]]]],[[[126,[141,141,141]]]],[133],[134],[135],[123],0,[116],0,[[130,9]],[[136,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[116],0,[125,125],[126,126],[[128,9,9],15],[[128,9,9,15],15],[116],[116,16],[[129,9,9]],[[129,9,9,15]],[[128,9],[[16,[8]]]],[116,16],[[130,9],1],[[130,39],[[16,[8]]]],[116],[119,1],[[[143,[142,142]]],1],[[[144,[142,142]]],1],[145,1],[146,1],[[]],[[]],[[]],[[]],[[9,9,8],[[143,[142,142]]]],[9,120],[[],121],[[9,9],[[144,[142,142]]]],[[],147],[[],148],[149,150],[9,114],[[9,9],145],[9,146],[9,115],[[9,9],116],[9,130],[[9,9],119],[[9,9],117],[[9,9],118],[[9,9],113],[[9,9],123],[140,136],[9,112],[[9,9],[[119,[0]]]],[[9,9],[[119,[0]]]],[[9,9],114],[147,1],[148,1],0,[[[131,[151]],131],[[1,[82]]]],[[[132,[151,151]],132],[[1,[82]]]],[[[125,[151,151]],125],[[1,[82]]]],[[[126,[151,151,151]],126],[[1,[82]]]],[[133,133],[[1,[82]]]],[[134,134],[[1,[82]]]],[[135,135],[[1,[82]]]],[[123,123],[[1,[82]]]],[[112,9]],[[112,9]],[136,9],[113],[[]],[[]],[[]],[[]],0,0,[140,152],[149,152],[127,152],[[[122,[134]]],152],[[[122,[135]]],152],[[[122,[133]]],152],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[122,[[16,[9]]]],[149,153],[[[122,[134]]],153],[[149,9],[[16,[15]]]],[[[122,[134]],9],[[16,[15]]]],[[149,9]],[[[122,[134]],9]],[[149,9]],[[[122,[134]],9]],[[122,9]],[[149,9],[[16,[15]]]],[[[122,[134]],9],[[16,[15]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[112,[[1,[[16,[8]]]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[119,9]],[[]],[120],[121],[115,[[97,[9]]]],[130,[[97,[9]]]],[119],[122],[122,[[97,[9]]]],[130,9],[122,9],[[]],[131],[132],[125],[126],[123],[[]],[120],[121],[119],[122],[[]],[120],[121],[119],[122],[[]],[[]],[[],9],[122,9],0,[[]],[[120,16]],[120],[121],[[119,16]],[[122,16]],[122],[[]],[[]],[[149,9,39],16],[[[122,[134]],9,39],16],0,[[[16,[9]]],113],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[154,154]],[154],[154],[[154,154]],[[154,154]],[[154,154]],[154],[154],[[155,155]],[[156,156]],[[154,154]],[[154,154]],[154],[154],[[[156,[[0,[3,157,158,159]]]],[0,[3,157,158,159]]],[[0,[3,157,158,159]]]],[[],16],[[[0,[3,160]],9,[0,[3,160]]],[[0,[3,160]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[154,154,9]],[[15,15,161],8],[[[162,[3]]],[[162,[3]]]],[[[163,[3]]],[[163,[3]]]],[[[164,[3]]],[[164,[3]]]],[154,154],[[[155,[3]]],[[155,[3]]]],[[[156,[3]]],[[156,[3]]]],[165,165],[166,166],[167,167],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[162,9,9],168],[[163,9,9],168],[[]],[[]],[[166,15],15],[[167,169],169],[[154,9],154],[[154,9],154],0,0,0,[[],163],[[],[[154,[111,111]]]],[[],[[156,[111]]]],[[],166],[155],[154,154],[[15,15,15],[[1,[15]]]],[[15,15,15],[[1,[15]]]],[[154,154]],[[154,154]],[[154,154]],[[154,154]],[154],[154],[154],[154],[[156,156]],[[154,154]],[[154,154]],[154],[154],[[154,154]],[15,[[16,[15]]]],[[166,15],[[16,[15]]]],[[167,169],[[16,[169]]]],[[154,154],8],[[[155,[138]],155],8],[[[156,[138]],156],8],[9,9],[154],[154,154],[[154,9],154],[[13,13]],[[13,13]],[[13,13]],[[],155],0,[[163,9]],[[15,15,15,15],15],[[13,13,13,13,15],13],[[13,13,13,13,15,[97,[13]]],13],[[[162,[5]],6],7],[[[163,[5]],6],7],[[[164,[5]],6],7],[[[154,[5,5]],6],7],[[[155,[5]],6],7],[[[156,[5]],6],7],[[165,6],7],[[166,6],7],[[167,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],154],[[]],[139],[16,154],[[]],[[]],[[]],[[]],[[]],[30,154],[16,154],[[[16,[16]]],155],[16,156],[[15,15],15],[[15,15],15],[[165,9],9],[[]],[[]],[170,16],[[162,9,9],168],[[154,9]],[155],[[155,9]],[[156,9]],[[154,9]],[155],[[155,9]],[[156,9]],[154,154],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[154],[[162,9],168],[164,168],[[154,9],154],0,[155,[[1,[155]]]],[9],[9],[9],[9],[[166,15],8],[[167,169],8],[154,124],[154,171],[[16,9]],[[154,16,9]],[168,168],[[162,9,168],168],[[],[[16,[168]]]],[[15,15],15],[[],9],[[],9],[[],9],[[],9],[154,9],[156,9],[[],1],[[154,9],154],[15,8],[[15,161],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[15,15],15],[[15,15],15],[[15,15],15],[9,[[60,[9,13]]]],[[154,154]],[154],[[154,154]],[[154,154]],[154],[154],[[154,154]],[154],[[155,155]],[[156,156]],[154],[154],[[154,154]],[[154,154]],[[]],[[]],[[]],[[]],[154,16],[154],[154],[9,162],[[],163],[168,164],[3,[[155,[3]]]],[9,165],[15,166],[169,167],[154,154],[[],154],[[],[[156,[[0,[157,172]]]]]],[[162,9,9],168],[[164,9],168],[[154,9,9],154],[[155,9],155],[[[156,[[0,[173,157,172,158,159]]]],9],[[156,[[0,[173,157,172,158,159]]]]]],[[164,99],168],[[154,9],154],[[154,9],154],[15,16],[[166,15],16],[[167,169],16],[15,[[16,[15]]]],[166],[[166,15]],[15,15],[9,154],[155,9],[[154,154]],[[154,154]],[[154,154]],[[154,154]],[[156,156]],[[154,154]],[[154,154]],[[166,15]],[[154,9]],[[154,9],154],[154,154],[[155,8]],0,[[154,9]],[[154,9]],[[154,9]],[[154,9]],[[154,9]],[[154,9]],[155,[[1,[16]]]],[[154,9],[[1,[154]]]],[[],1],[[154,154]],[[154,154]],[[154,154]],[[154,154]],[154],[154],[154],[154],[[155,155]],[[156,156]],[[154,154]],[154],[154],[[154,154]],[[[154,[168]],168,162],[[154,[168]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[9],[9],0,[[167,169]],[154],[[154,9]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],154],[[],156],[9,154],[[],155],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[103,[110]]],110],[174,174],[175,175],[176,176],[[[178,[177]]],[[178,[177]]]],[[[178,[179]]],[[178,[179]]]],[[[178,[180]]],[[178,[180]]]],[[[178,[99]]],[[178,[99]]]],[[[178,[13]]],[[178,[13]]]],[[[178,[181]]],[[178,[181]]]],[[[182,[99]]],[[182,[99]]]],[[[182,[179]]],[[182,[179]]]],[[[182,[13]]],[[182,[13]]]],[[[182,[180]]],[[182,[180]]]],[[[182,[181]]],[[182,[181]]]],[[[182,[177]]],[[182,[177]]]],[183,183],[[]],[[]],[[]],[175,175],[176,176],[[]],[175,175],[176,176],[[168,168]],[[168,168]],[[168,168]],[[168,168]],[103],[[103,103]],[103],[[103,103]],[[103,103]],[103],[103],[[103,103]],[[174,110]],[[174,174]],[[175,175]],[[176,176]],[[[178,[179]],[178,[179]]]],[[[178,[184]],[178,[184]]]],[[[178,[170]],[178,[170]]]],[[[178,[181]],[178,[181]]]],[[[178,[177]],[178,[177]]]],[[[178,[13]],[178,[13]]]],[[[178,[169]],[178,[169]]]],[[[178,[15]],[178,[15]]]],[[[178,[185]],[178,[185]]]],[[[178,[180]],[178,[180]]]],[[[178,[99]],[178,[99]]]],[[[178,[9]],[178,[9]]]],[[[182,[184]],[182,[184]]]],[[[182,[180]],[182,[180]]]],[[[182,[13]],[182,[13]]]],[[[182,[181]],[182,[181]]]],[[[182,[177]],[182,[177]]]],[[[182,[170]],[182,[170]]]],[[[182,[169]],[182,[169]]]],[[[182,[185]],[182,[185]]]],[[[182,[15]],[182,[15]]]],[[[182,[9]],[182,[9]]]],[[[182,[179]],[182,[179]]]],[[[182,[99]],[182,[99]]]],[[183,110]],[[183,183]],[[168,168]],[[168,168]],[[103,103]],[103],[103],[[103,103]],[[[178,[13]],[178,[13]]]],[[[178,[184]],[178,[184]]]],[[[178,[180]],[178,[180]]]],[[[178,[177]],[178,[177]]]],[[[178,[170]],[178,[170]]]],[[[178,[179]],[178,[179]]]],[[[178,[9]],[178,[9]]]],[[[178,[169]],[178,[169]]]],[[[178,[185]],[178,[185]]]],[[[178,[99]],[178,[99]]]],[[[178,[181]],[178,[181]]]],[[[178,[15]],[178,[15]]]],[[[182,[184]],[182,[184]]]],[[[182,[181]],[182,[181]]]],[[[182,[179]],[182,[179]]]],[[[182,[15]],[182,[15]]]],[[[182,[9]],[182,[9]]]],[[[182,[13]],[182,[13]]]],[[[182,[170]],[182,[170]]]],[[[182,[180]],[182,[180]]]],[[[182,[169]],[182,[169]]]],[[[182,[99]],[182,[99]]]],[[[182,[185]],[182,[185]]]],[[[182,[177]],[182,[177]]]],[[[103,[110]]],110],[[]],[175,175],[176,176],[[]],[175,175],[176,176],[[]],[175,175],[176,176],[[]],[[175,175],175],[[176,176],176],[[]],[175,175],[176,176],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[178,178]],[[182,182]],[[178,178]],[[182,182]],[[178,178]],[[182,182]],[[178,178]],[[182,182]],[[178,178]],[[182,182]],[[178,178]],[[182,182]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[175,175],[176,176],[[]],[175,175],[176,176],[[],186],[175,186],[176,186],[168,168],[[[161,[3]]],[[161,[3]]]],[[[103,[3]]],[[103,[3]]]],[174,174],[175,175],[176,176],[[[178,[3]]],[[178,[3]]]],[[[182,[3]]],[[182,[3]]]],[183,183],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[103,[137]],103],82],[[174,174],82],[[175,175],82],[[176,176],82],[[[178,[137]],178],82],[[[182,[137]],182],82],[[103,103],82],[103,103],[[]],[[175,175],175],[[176,176],176],[[]],[175,175],[176,176],[[]],[175,175],[176,176],[[]],[[[178,[177]]],169],[[[178,[181]]],169],[[[178,[184]]],169],[[[178,[9]]],169],[[[178,[13]]],169],[[[178,[179]]],169],[[[178,[15]]],169],[[[178,[99]]],169],[[[178,[185]]],169],[[[178,[169]]],169],[[[178,[180]]],169],[[[178,[170]]],169],[[[182,[15]]],169],[[[182,[99]]],169],[[[182,[179]]],169],[[[182,[185]]],169],[[[182,[13]]],169],[[[182,[180]]],169],[[[182,[181]]],169],[[[182,[9]]],169],[[[182,[169]]],169],[[[182,[184]]],169],[[[182,[177]]],169],[[[182,[170]]],169],[[]],[[[178,[184]]],169],[[[178,[177]]],169],[[[178,[185]]],169],[[[178,[9]]],169],[[[178,[181]]],169],[[[178,[179]]],169],[[[178,[15]]],169],[[[178,[13]]],169],[[[178,[169]]],169],[[[178,[180]]],169],[[[178,[99]]],169],[[[178,[170]]],169],[[[182,[180]]],169],[[[182,[169]]],169],[[[182,[177]]],169],[[[182,[181]]],169],[[[182,[99]]],169],[[[182,[184]]],169],[[[182,[185]]],169],[[[182,[170]]],169],[[[182,[9]]],169],[[[182,[13]]],169],[[[182,[15]]],169],[[[182,[179]]],169],[[103,103]],[[],168],[[],[[103,[111]]]],[[],174],[[],175],[[],176],[[],[[178,[111]]]],[[],[[182,[111]]]],[[],183],[[]],[[168,168]],[[168,168]],[[168,168]],[[168,168]],[[[161,[169]],169],169],[[[161,[15]],15],15],[[[161,[170]],170],170],[[103,103]],[[103,103]],[103],[103],[103],[[103,103]],[103],[[103,103]],[[174,174]],[[175,175]],[[176,176]],[[178,178]],[[[182,[169]],[182,[169]]]],[[[182,[177]],[182,[177]]]],[[[182,[180]],[182,[180]]]],[[[182,[181]],[182,[181]]]],[[[182,[9]],[182,[9]]]],[[[182,[170]],[182,[170]]]],[[[182,[15]],[182,[15]]]],[[[182,[13]],[182,[13]]]],[[[182,[184]],[182,[184]]]],[[[182,[185]],[182,[185]]]],[[[182,[179]],[182,[179]]]],[[[182,[99]],[182,[99]]]],[[183,183]],[[168,168]],[[168,168]],[[103,103]],[103],[103],[[103,103]],[[178,178]],[[[182,[181]],[182,[181]]]],[[[182,[9]],[182,[9]]]],[[[182,[170]],[182,[170]]]],[[[182,[15]],[182,[15]]]],[[[182,[13]],[182,[13]]]],[[[182,[169]],[182,[169]]]],[[[182,[180]],[182,[180]]]],[[[182,[185]],[182,[185]]]],[[[182,[184]],[182,[184]]]],[[[182,[177]],[182,[177]]]],[[[182,[179]],[182,[179]]]],[[[182,[99]],[182,[99]]]],[[]],[[]],[[175,175],175],[[176,176],176],[[[178,[185]],[178,[185]]],[[178,[185]]]],[[[178,[184]],[178,[184]]],[[178,[184]]]],[[[178,[180]],[178,[180]]],[[178,[180]]]],[[[178,[179]],[178,[179]]],[[178,[179]]]],[[[178,[169]],[178,[169]]],[[178,[169]]]],[[[178,[170]],[178,[170]]],[[178,[170]]]],[[[178,[99]],[178,[99]]],[[178,[99]]]],[[[178,[181]],[178,[181]]],[[178,[181]]]],[[[178,[177]],[178,[177]]],[[178,[177]]]],[[[178,[15]],[178,[15]]],[[178,[15]]]],[[[178,[13]],[178,[13]]],[[178,[13]]]],[[[178,[9]],[178,[9]]],[[178,[9]]]],[[[182,[99]],[182,[99]]],[[182,[99]]]],[[[182,[170]],[182,[170]]],[[182,[170]]]],[[[182,[185]],[182,[185]]],[[182,[185]]]],[[[182,[169]],[182,[169]]],[[182,[169]]]],[[[182,[9]],[182,[9]]],[[182,[9]]]],[[[182,[181]],[182,[181]]],[[182,[181]]]],[[[182,[179]],[182,[179]]],[[182,[179]]]],[[[182,[177]],[182,[177]]],[[182,[177]]]],[[[182,[15]],[182,[15]]],[[182,[15]]]],[[[182,[184]],[182,[184]]],[[182,[184]]]],[[[182,[13]],[182,[13]]],[[182,[13]]]],[[[182,[180]],[182,[180]]],[[182,[180]]]],[[[161,[170]],170]],[[[161,[15]],15]],[[[161,[169]],169]],[[103,103]],[[]],[[],1],[[]],[[],1],[[168,168],8],[[[103,[138]],103],8],[[174,174],8],[[175,175],8],[[176,176],8],[[[178,[138]],178],8],[[[182,[138]],182],8],[[183,183],8],[[]],[175,175],[176,176],[[]],[175,175],[176,176],[[]],[175,175],[176,176],[[],187],[[],187],[[]],[175,175],[176,176],[[168,6],7],[[168,6],[[10,[188]]]],[[[161,[5]],6],7],[[[103,[5]],6],7],[[174,6],7],[[174,6],7],[[175,6],7],[[175,6],7],[[176,6],7],[[176,6],7],[[178,6],7],[[178,6],7],[[182,6],7],[[182,6],7],[[183,6],7],[[183,6],7],[[]],[[]],[[],1],[[]],[[]],[[],1],[[],1],[[]],[175,175],[176,176],[[]],[[]],[185,168],[181,168],[180,168],[9,168],[[]],[170,168],[15,168],[169,168],[179,168],[184,168],[13,168],[177,168],[99,168],[[]],[[]],[[]],[110,174],[189,175],[[]],[110,176],[[]],[184,[[178,[184]]]],[13,[[178,[13]]]],[99,[[178,[99]]]],[9,[[178,[9]]]],[179,[[178,[179]]]],[180,[[178,[180]]]],[170,[[178,[170]]]],[169,[[178,[169]]]],[[]],[177,[[178,[177]]]],[181,[[178,[181]]]],[15,[[178,[15]]]],[185,[[178,[185]]]],[177,[[182,[177]]]],[15,[[182,[15]]]],[9,[[182,[9]]]],[169,[[182,[169]]]],[99,[[182,[99]]]],[13,[[182,[13]]]],[170,[[182,[170]]]],[180,[[182,[180]]]],[181,[[182,[181]]]],[179,[[182,[179]]]],[185,[[182,[185]]]],[184,[[182,[184]]]],[[]],[[]],[110,183],[15],[15,175],[15,176],[190,[[10,[168]]]],[190,[[10,[174]]]],[190,[[10,[175]]]],[190,[[10,[176]]]],[190,[[10,[178]]]],[190,[[10,[182]]]],[190,[[10,[183]]]],[[190,169],10],[[190,169],[[10,[[178,[15]]]]]],[[190,169],[[10,[[178,[13]]]]]],[[190,169],[[10,[[178,[9]]]]]],[[190,169],[[10,[[178,[185]]]]]],[[190,169],[[10,[[178,[180]]]]]],[[190,169],[[10,[[178,[179]]]]]],[[190,169],[[10,[[178,[184]]]]]],[[190,169],[[10,[[178,[181]]]]]],[[190,169],[[10,[[178,[169]]]]]],[[190,169],[[10,[[178,[170]]]]]],[[190,169],[[10,[[178,[177]]]]]],[[190,169],[[10,[[178,[99]]]]]],[[190,169],[[10,[[182,[15]]]]]],[[190,169],[[10,[[182,[9]]]]]],[[190,169],[[10,[[182,[180]]]]]],[[190,169],[[10,[[182,[177]]]]]],[[190,169],[[10,[[182,[185]]]]]],[[190,169],[[10,[[182,[179]]]]]],[[190,169],[[10,[[182,[184]]]]]],[[190,169],[[10,[[182,[181]]]]]],[[190,169],[[10,[[182,[169]]]]]],[[190,169],[[10,[[182,[13]]]]]],[[190,169],[[10,[[182,[170]]]]]],[[190,169],[[10,[[182,[99]]]]]],0,[[]],[[[178,[184]],[178,[184]]],[[178,[184]]]],[[[178,[9]],[178,[9]]],[[178,[9]]]],[[[178,[185]],[178,[185]]],[[178,[185]]]],[[[178,[15]],[178,[15]]],[[178,[15]]]],[[[178,[170]],[178,[170]]],[[178,[170]]]],[[[178,[169]],[178,[169]]],[[178,[169]]]],[[[182,[15]],[182,[15]]],[[182,[15]]]],[[[182,[184]],[182,[184]]],[[182,[184]]]],[[[182,[185]],[182,[185]]],[[182,[185]]]],[[[182,[169]],[182,[169]]],[[182,[169]]]],[[[182,[170]],[182,[170]]],[[182,[170]]]],[[[182,[9]],[182,[9]]],[[182,[9]]]],[[]],[[]],[[[161,[170]]],170],[[[161,[15]]],15],[[[161,[169]]],169],[168],[[[103,[141]]]],[[[178,[141]]]],[[[182,[141]]]],[[]],[[175,175],175],[[176,176],176],[[],103],0,[[183,9]],[168],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[168,168],[[],8],[175,8],[176,8],[[],8],[175,8],[176,8],[[],8],[[],8],[[],8],[[],8],[[],8],[175,8],[176,8],[[],8],[[[178,[179]]],8],[[[178,[99]]],8],[[[178,[177]]],8],[[[178,[181]]],8],[[[178,[13]]],8],[[[178,[180]]],8],[[[182,[181]]],8],[[[182,[13]]],8],[[[182,[179]]],8],[[[182,[180]]],8],[[[182,[177]]],8],[[[182,[99]]],8],[[],8],[175,8],[176,8],[[],8],[[],8],[[],8],[[[178,[179]]],8],[[[178,[177]]],8],[[[178,[99]]],8],[[[178,[181]]],8],[[[178,[180]]],8],[[[178,[13]]],8],[[[182,[177]]],8],[[[182,[181]]],8],[[[182,[99]]],8],[[[182,[179]]],8],[[[182,[13]]],8],[[[182,[180]]],8],[[],8],[175,8],[176,8],[[],8],[175,8],[176,8],[[],8],[[],8],[174,8],[183,8],[[]],[[]],[[]],[[[178,[99]]],169],[[[178,[169]]],169],[[[178,[184]]],169],[[[178,[185]]],169],[[[178,[181]]],169],[[[178,[13]]],169],[[[178,[9]]],169],[[[178,[180]]],169],[[[178,[170]]],169],[[[178,[15]]],169],[[[178,[179]]],169],[[[178,[177]]],169],[[[182,[169]]],169],[[[182,[9]]],169],[[[182,[179]]],169],[[[182,[180]]],169],[[[182,[181]]],169],[[[182,[185]]],169],[[[182,[170]]],169],[[[182,[15]]],169],[[[182,[177]]],169],[[[182,[99]]],169],[[[182,[184]]],169],[[[182,[13]]],169],[[]],[175,175],[176,176],[[]],[175,175],[176,176],[[]],[[175,175],175],[[176,176],176],[[]],[175,175],[176,176],[[]],[175,175],[176,176],[[]],[[175,175],175],[[176,176],176],[[]],[[],174],[[],175],[[],176],[[],178],[[],182],[[]],[[175,175],175],[[176,176],176],[[]],[[],174],[[],175],[[],176],[[],178],[[],182],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[[]],[[]],0,[[168,168]],[[168,168]],[[168,168]],[[168,168]],[103],[[103,103]],[[103,103]],[103],[[103,103]],[103],[103],[[103,103]],[[174,174]],[[174,110]],[[175,175]],[[176,176]],[[[178,[169]],[178,[169]]]],[[[178,[177]],[178,[177]]]],[[[178,[181]],[178,[181]]]],[[[178,[179]],[178,[179]]]],[[[178,[99]],[178,[99]]]],[[[178,[184]],[178,[184]]]],[[[178,[13]],[178,[13]]]],[[[178,[9]],[178,[9]]]],[[[178,[15]],[178,[15]]]],[[[178,[180]],[178,[180]]]],[[[178,[185]],[178,[185]]]],[[[178,[170]],[178,[170]]]],[[[182,[99]],[182,[99]]]],[[[182,[185]],[182,[185]]]],[[[182,[170]],[182,[170]]]],[[[182,[169]],[182,[169]]]],[[[182,[13]],[182,[13]]]],[[[182,[15]],[182,[15]]]],[[[182,[177]],[182,[177]]]],[[[182,[179]],[182,[179]]]],[[[182,[9]],[182,[9]]]],[[[182,[181]],[182,[181]]]],[[[182,[184]],[182,[184]]]],[[[182,[180]],[182,[180]]]],[[183,110]],[[183,183]],[[]],[[175,175,175],175],[[176,176,176],176],[[168,168]],[[168,168]],[[103,103]],[103],[[103,103]],[103],[[[178,[179]],[178,[179]]]],[[[178,[99]],[178,[99]]]],[[[178,[180]],[178,[180]]]],[[[178,[181]],[178,[181]]]],[[[178,[169]],[178,[169]]]],[[[178,[13]],[178,[13]]]],[[[178,[177]],[178,[177]]]],[[[178,[170]],[178,[170]]]],[[[178,[185]],[178,[185]]]],[[[178,[15]],[178,[15]]]],[[[178,[9]],[178,[9]]]],[[[178,[184]],[178,[184]]]],[[[182,[169]],[182,[169]]]],[[[182,[179]],[182,[179]]]],[[[182,[184]],[182,[184]]]],[[[182,[13]],[182,[13]]]],[[[182,[99]],[182,[99]]]],[[[182,[185]],[182,[185]]]],[[[182,[180]],[182,[180]]]],[[[182,[9]],[182,[9]]]],[[[182,[181]],[182,[181]]]],[[[182,[177]],[182,[177]]]],[[[182,[170]],[182,[170]]]],[[[182,[15]],[182,[15]]]],[168],[168],[103],[103],[174],[175],[176],[[[178,[181]]]],[[[178,[179]]]],[[[178,[13]]]],[[[178,[99]]]],[[[178,[177]]]],[[[178,[180]]]],[[[182,[181]]]],[[[182,[99]]]],[[[182,[177]]]],[[[182,[13]]]],[[[182,[180]]]],[[[182,[179]]]],[183],[[],168],[169,[[161,[169]]]],[15,[[161,[15]]]],[170,[[161,[170]]]],[[],103],[[],168],[103],[178],[182],[[]],[[],168],[[],103],[[],175],[[],176],[[],178],[[],182],[[[103,[151]],103],[[1,[82]]]],[[174,174],[[1,[82]]]],[[175,175],[[1,[82]]]],[[176,176],[[1,[82]]]],[[[178,[151]],178],[[1,[82]]]],[[[182,[151]],182],[[1,[82]]]],[[183,183],[[1,[82]]]],[[110,110],[[103,[110]]]],[169],[[168,9],168],[[[178,[180]],169],[[178,[180]]]],[[[178,[181]],169],[[178,[181]]]],[[[178,[184]],169],[[178,[184]]]],[[[178,[99]],169],[[178,[99]]]],[[[178,[177]],169],[[178,[177]]]],[[[178,[169]],169],[[178,[169]]]],[[[178,[170]],169],[[178,[170]]]],[[[178,[185]],169],[[178,[185]]]],[[[178,[13]],169],[[178,[13]]]],[[[178,[179]],169],[[178,[179]]]],[[[178,[15]],169],[[178,[15]]]],[[[178,[9]],169],[[178,[9]]]],[[[182,[185]],169],[[182,[185]]]],[[[182,[184]],169],[[182,[184]]]],[[[182,[9]],169],[[182,[9]]]],[[[182,[181]],169],[[182,[181]]]],[[[182,[99]],169],[[182,[99]]]],[[[182,[177]],169],[[182,[177]]]],[[[182,[15]],169],[[182,[15]]]],[[[182,[169]],169],[[182,[169]]]],[[[182,[170]],169],[[182,[170]]]],[[[182,[13]],169],[[182,[13]]]],[[[182,[179]],169],[[182,[179]]]],[[[182,[180]],169],[[182,[180]]]],[[]],[[175,175],175],[[176,176],176],[179],[[175,179],175],[[176,179],176],[110,[[103,[110]]]],[26,168],[26,168],[26,103],[26,103],0,[[]],[175,175],[176,176],[[[161,[15]],15],15],[[[161,[170]],170],170],[[[161,[169]],169],169],[[175,175]],[[176,176]],[[178,178]],[[[182,[15]],[182,[15]]]],[[[182,[185]],[182,[185]]]],[[[182,[179]],[182,[179]]]],[[[182,[180]],[182,[180]]]],[[[182,[177]],[182,[177]]]],[[[182,[170]],[182,[170]]]],[[[182,[99]],[182,[99]]]],[[[182,[184]],[182,[184]]]],[[[182,[169]],[182,[169]]]],[[[182,[181]],[182,[181]]]],[[[182,[13]],[182,[13]]]],[[[182,[9]],[182,[9]]]],[[178,178]],[[[182,[179]],[182,[179]]]],[[[182,[15]],[182,[15]]]],[[[182,[9]],[182,[9]]]],[[[182,[169]],[182,[169]]]],[[[182,[180]],[182,[180]]]],[[[182,[13]],[182,[13]]]],[[[182,[99]],[182,[99]]]],[[[182,[181]],[182,[181]]]],[[[182,[185]],[182,[185]]]],[[[182,[177]],[182,[177]]]],[[[182,[184]],[182,[184]]]],[[[182,[170]],[182,[170]]]],[[]],[[]],[[175,175],175],[[176,176],176],[[[178,[185]],[178,[185]]],[[178,[185]]]],[[[178,[99]],[178,[99]]],[[178,[99]]]],[[[178,[177]],[178,[177]]],[[178,[177]]]],[[[178,[13]],[178,[13]]],[[178,[13]]]],[[[178,[169]],[178,[169]]],[[178,[169]]]],[[[178,[179]],[178,[179]]],[[178,[179]]]],[[[178,[180]],[178,[180]]],[[178,[180]]]],[[[178,[15]],[178,[15]]],[[178,[15]]]],[[[178,[9]],[178,[9]]],[[178,[9]]]],[[[178,[170]],[178,[170]]],[[178,[170]]]],[[[178,[184]],[178,[184]]],[[178,[184]]]],[[[178,[181]],[178,[181]]],[[178,[181]]]],[[[182,[177]],[182,[177]]],[[182,[177]]]],[[[182,[9]],[182,[9]]],[[182,[9]]]],[[[182,[13]],[182,[13]]],[[182,[13]]]],[[[182,[180]],[182,[180]]],[[182,[180]]]],[[[182,[181]],[182,[181]]],[[182,[181]]]],[[[182,[184]],[182,[184]]],[[182,[184]]]],[[[182,[185]],[182,[185]]],[[182,[185]]]],[[[182,[15]],[182,[15]]],[[182,[15]]]],[[[182,[99]],[182,[99]]],[[182,[99]]]],[[[182,[179]],[182,[179]]],[[182,[179]]]],[[[182,[170]],[182,[170]]],[[182,[170]]]],[[[182,[169]],[182,[169]]],[[182,[169]]]],[[]],[[[178,[99]]],[[178,[99]]]],[[[178,[184]]],[[178,[184]]]],[[[178,[169]]],[[178,[169]]]],[[[178,[177]]],[[178,[177]]]],[[[178,[15]]],[[178,[15]]]],[[[178,[185]]],[[178,[185]]]],[[[178,[170]]],[[178,[170]]]],[[[178,[9]]],[[178,[9]]]],[[[178,[180]]],[[178,[180]]]],[[[178,[13]]],[[178,[13]]]],[[[178,[179]]],[[178,[179]]]],[[[178,[181]]],[[178,[181]]]],[[[182,[181]]],[[182,[181]]]],[[[182,[177]]],[[182,[177]]]],[[[182,[169]]],[[182,[169]]]],[[[182,[15]]],[[182,[15]]]],[[[182,[170]]],[[182,[170]]]],[[[182,[180]]],[[182,[180]]]],[[[182,[9]]],[[182,[9]]]],[[[182,[179]]],[[182,[179]]]],[[[182,[99]]],[[182,[99]]]],[[[182,[184]]],[[182,[184]]]],[[[182,[185]]],[[182,[185]]]],[[[182,[13]]],[[182,[13]]]],[[]],[[[178,[170]],169],[[178,[170]]]],[[[178,[177]],169],[[178,[177]]]],[[[178,[169]],169],[[178,[169]]]],[[[178,[181]],169],[[178,[181]]]],[[[178,[185]],169],[[178,[185]]]],[[[178,[180]],169],[[178,[180]]]],[[[178,[15]],169],[[178,[15]]]],[[[178,[184]],169],[[178,[184]]]],[[[178,[13]],169],[[178,[13]]]],[[[178,[179]],169],[[178,[179]]]],[[[178,[9]],169],[[178,[9]]]],[[[178,[99]],169],[[178,[99]]]],[[[182,[170]],169],[[182,[170]]]],[[[182,[15]],169],[[182,[15]]]],[[[182,[181]],169],[[182,[181]]]],[[[182,[9]],169],[[182,[9]]]],[[[182,[184]],169],[[182,[184]]]],[[[182,[185]],169],[[182,[185]]]],[[[182,[177]],169],[[182,[177]]]],[[[182,[179]],169],[[182,[179]]]],[[[182,[180]],169],[[182,[180]]]],[[[182,[13]],169],[[182,[13]]]],[[[182,[169]],169],[[182,[169]]]],[[[182,[99]],169],[[182,[99]]]],[[]],[[[178,[177]],169],[[178,[177]]]],[[[178,[99]],169],[[178,[99]]]],[[[178,[179]],169],[[178,[179]]]],[[[178,[181]],169],[[178,[181]]]],[[[178,[170]],169],[[178,[170]]]],[[[178,[15]],169],[[178,[15]]]],[[[178,[184]],169],[[178,[184]]]],[[[178,[185]],169],[[178,[185]]]],[[[178,[180]],169],[[178,[180]]]],[[[178,[13]],169],[[178,[13]]]],[[[178,[9]],169],[[178,[9]]]],[[[178,[169]],169],[[178,[169]]]],[[[182,[15]],169],[[182,[15]]]],[[[182,[169]],169],[[182,[169]]]],[[[182,[185]],169],[[182,[185]]]],[[[182,[184]],169],[[182,[184]]]],[[[182,[180]],169],[[182,[180]]]],[[[182,[177]],169],[[182,[177]]]],[[[182,[13]],169],[[182,[13]]]],[[[182,[179]],169],[[182,[179]]]],[[[182,[170]],169],[[182,[170]]]],[[[182,[99]],169],[[182,[99]]]],[[[182,[9]],169],[[182,[9]]]],[[[182,[181]],169],[[182,[181]]]],[[]],[175,175],[176,176],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],[15],[169],[[]],[[]],[[]],[[]],[[[178,[99]],169]],[[[178,[184]],169]],[[[178,[185]],169]],[[[178,[179]],169]],[[[178,[170]],169]],[[[178,[180]],169]],[[[178,[181]],169]],[[[178,[177]],169]],[[[178,[13]],169]],[[[178,[9]],169]],[[[178,[169]],169]],[[[178,[15]],169]],[[[182,[99]],169]],[[[182,[9]],169]],[[[182,[181]],169]],[[[182,[185]],169]],[[[182,[180]],169]],[[[182,[15]],169]],[[[182,[170]],169]],[[[182,[169]],169]],[[[182,[177]],169]],[[[182,[13]],169]],[[[182,[179]],169]],[[[182,[184]],169]],[[[178,[13]],169]],[[[178,[169]],169]],[[[178,[184]],169]],[[[178,[15]],169]],[[[178,[177]],169]],[[[178,[181]],169]],[[[178,[99]],169]],[[[178,[179]],169]],[[[178,[180]],169]],[[[178,[185]],169]],[[[178,[9]],169]],[[[178,[170]],169]],[[[182,[184]],169]],[[[182,[15]],169]],[[[182,[181]],169]],[[[182,[177]],169]],[[[182,[99]],169]],[[[182,[180]],169]],[[[182,[179]],169]],[[[182,[13]],169]],[[[182,[9]],169]],[[[182,[170]],169]],[[[182,[169]],169]],[[[182,[185]],169]],[[[178,[9]],169]],[[[178,[169]],169]],[[[178,[99]],169]],[[[178,[177]],169]],[[[178,[15]],169]],[[[178,[180]],169]],[[[178,[184]],169]],[[[178,[170]],169]],[[[178,[181]],169]],[[[178,[13]],169]],[[[178,[185]],169]],[[[178,[179]],169]],[[[182,[184]],169]],[[[182,[179]],169]],[[[182,[9]],169]],[[[182,[15]],169]],[[[182,[177]],169]],[[[182,[99]],169]],[[[182,[13]],169]],[[[182,[181]],169]],[[[182,[185]],169]],[[[182,[180]],169]],[[[182,[170]],169]],[[[182,[169]],169]],[[[178,[170]],169]],[[[178,[15]],169]],[[[178,[184]],169]],[[[178,[13]],169]],[[[178,[169]],169]],[[[178,[179]],169]],[[[178,[177]],169]],[[[178,[181]],169]],[[[178,[9]],169]],[[[178,[180]],169]],[[[178,[185]],169]],[[[178,[99]],169]],[[[182,[185]],169]],[[[182,[13]],169]],[[[182,[179]],169]],[[[182,[9]],169]],[[[182,[169]],169]],[[[182,[181]],169]],[[[182,[184]],169]],[[[182,[99]],169]],[[[182,[180]],169]],[[[182,[177]],169]],[[[182,[15]],169]],[[[182,[170]],169]],[[]],[[[178,[169]]]],[[[178,[184]]]],[[[178,[170]]]],[[[178,[185]]]],[[[178,[15]]]],[[[178,[9]]]],[[[182,[9]]]],[[[182,[184]]]],[[[182,[15]]]],[[[182,[170]]]],[[[182,[185]]]],[[[182,[169]]]],[[]],[[]],[175,175],[176,176],[[[178,[179]]],[[178,[179]]]],[[[178,[177]]],[[178,[177]]]],[[[178,[181]]],[[178,[181]]]],[[[178,[13]]],[[178,[13]]]],[[[178,[99]]],[[178,[99]]]],[[[178,[180]]],[[178,[180]]]],[[[182,[180]]],[[182,[180]]]],[[[182,[99]]],[[182,[99]]]],[[[182,[179]]],[[182,[179]]]],[[[182,[177]]],[[182,[177]]]],[[[182,[13]]],[[182,[13]]]],[[[182,[181]]],[[182,[181]]]],[[]],[175,175],[176,176],[[]],[175],[176],[[]],[175,175],[176,176],[[]],[168,[[1,[168]]]],[174,174],[175,175],[176,176],[183,183],[168,[[1,[168]]]],[[]],[[],1],[[]],[[],1],[[],1],[[168,168]],[[168,168]],[[168,168]],[[168,168]],[[103,103]],[103],[103],[103],[[103,103]],[[103,103]],[[103,103]],[103],[[174,174]],[[175,175]],[[176,176]],[[[178,[169]],[178,[169]]]],[[[178,[177]],[178,[177]]]],[[[178,[9]],[178,[9]]]],[[[178,[180]],[178,[180]]]],[[[178,[170]],[178,[170]]]],[[[178,[15]],[178,[15]]]],[[[178,[13]],[178,[13]]]],[[[178,[184]],[178,[184]]]],[[[178,[179]],[178,[179]]]],[[[178,[185]],[178,[185]]]],[[[178,[99]],[178,[99]]]],[[[178,[181]],[178,[181]]]],[[[182,[13]],[182,[13]]]],[[[182,[170]],[182,[170]]]],[[[182,[181]],[182,[181]]]],[[[182,[177]],[182,[177]]]],[[[182,[180]],[182,[180]]]],[[[182,[9]],[182,[9]]]],[[[182,[99]],[182,[99]]]],[[[182,[15]],[182,[15]]]],[[[182,[169]],[182,[169]]]],[[[182,[185]],[182,[185]]]],[[[182,[184]],[182,[184]]]],[[[182,[179]],[182,[179]]]],[[183,183]],[[168,168]],[[168,168]],[103],[[103,103]],[103],[[103,103]],[[[178,[99]],[178,[99]]]],[[[178,[179]],[178,[179]]]],[[[178,[170]],[178,[170]]]],[[[178,[177]],[178,[177]]]],[[[178,[169]],[178,[169]]]],[[[178,[15]],[178,[15]]]],[[[178,[184]],[178,[184]]]],[[[178,[9]],[178,[9]]]],[[[178,[181]],[178,[181]]]],[[[178,[180]],[178,[180]]]],[[[178,[185]],[178,[185]]]],[[[178,[13]],[178,[13]]]],[[[182,[179]],[182,[179]]]],[[[182,[177]],[182,[177]]]],[[[182,[184]],[182,[184]]]],[[[182,[169]],[182,[169]]]],[[[182,[99]],[182,[99]]]],[[[182,[180]],[182,[180]]]],[[[182,[9]],[182,[9]]]],[[[182,[170]],[182,[170]]]],[[[182,[15]],[182,[15]]]],[[[182,[181]],[182,[181]]]],[[[182,[13]],[182,[13]]]],[[[182,[185]],[182,[185]]]],[26,168],[26,168],[26,103],[26,103],[[]],[175,175],[176,176],[[]],[175,175],[176,176],[[],15],[175,15],[176,15],[[]],[175,175],[176,176],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[175,175],[176,176],[[],97],[[],97],[[],[[1,[97]]]],[[],[[1,[97]]]],[[],191],[[],191],[[],[[1,[191]]]],[[],[[1,[191]]]],[[],152],[[],152],[[],152],[[],152],[[],152],[[],152],[[],152],[[],82],[[175,175],82],[[176,176],82],[[]],[[[178,[177]]],169],[[[178,[169]]],169],[[[178,[179]]],169],[[[178,[9]]],169],[[[178,[184]]],169],[[[178,[15]]],169],[[[178,[181]]],169],[[[178,[13]]],169],[[[178,[185]]],169],[[[178,[99]]],169],[[[178,[170]]],169],[[[178,[180]]],169],[[[182,[13]]],169],[[[182,[181]]],169],[[[182,[179]]],169],[[[182,[99]]],169],[[[182,[15]]],169],[[[182,[185]]],169],[[[182,[180]]],169],[[[182,[9]]],169],[[[182,[170]]],169],[[[182,[177]]],169],[[[182,[169]]],169],[[[182,[184]]],169],[103,103],[[]],[175,175],[176,176],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[103,[110]]],[[103,[110]]]],[[]],[[[178,[180]]]],[[[178,[177]]]],[[[178,[13]]]],[[[178,[179]]]],[[[178,[181]]]],[[[178,[99]]]],[[[182,[99]]]],[[[182,[179]]]],[[[182,[13]]]],[[[182,[177]]]],[[[182,[180]]]],[[[182,[181]]]],0,0,[[]],[[],168],[[],103],[[],175],[[],176],[[],178],[[],182],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[15],[170],[9],[169],[180],[181],[[]],[185],[179],[184],[13],[177],[99],[177],[169],[15],[170],[9],[179],[[]],[13],[99],[169],[99],[177],[13],[179],[9],[[]],[170],[15],[[]],[99],[9],[15],[169],[170],[179],[13],[177],[177],[15],[99],[169],[9],[170],[179],[[]],[13],[177],[9],[[]],[15],[170],[99],[13],[[]],[[]],[[]],[[]],[[]],[[]],[[],169],[[]],[[],99],[[],15],[[],177],[[],13],[[],170],[[],179],[[],184],[[],9],[[],185],[[],181],[[],180],[[],179],[[],9],[[],170],[[]],[[],15],[[],13],[[],169],[[],99],[[],177],[[],177],[[],99],[[],13],[[],179],[[],9],[[]],[[],170],[[],15],[[],169],[[],179],[[],177],[[]],[[],99],[[],13],[[],170],[[],9],[[],169],[[],15],[[],169],[[],177],[[]],[[],99],[[],13],[[],170],[[],179],[[],15],[[],9],[[],99],[[],177],[[],13],[[],9],[[],170],[[],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],180],[[],99],[[],170],[[],15],[[],169],[[],185],[[],184],[[],181],[[],179],[[],177],[[],13],[[],179],[[],99],[[],177],[[],13],[[],169],[[],15],[[],170],[[],9],[[],169],[[],15],[[],170],[[],9],[[],179],[[],13],[[],177],[[],99],[[],13],[[],99],[[],177],[[],169],[[],15],[[],170],[[],9],[[],179],[[],177],[[],13],[[],15],[[],169],[[],99],[[],179],[[],9],[[],170],[[],15],[[],13],[[],9],[[],170],[[],177],[[],99],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[169],[15],[169],[15],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],169],[[],169],[[],169],[[],169],[[],169],[[]],[[]],[[]],[[]],[[],192],[[],192],[[],192],[[],192],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[[],169],[15,169],[15,169],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],193],[[],194],[195,195],[196,196],[197,197],[[]],[[]],[[]],[[],[[10,[198]]]],[[195,6],7],[[196,6],7],[[197,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[195,199],0,[195],[190,195],[[],[[10,[9,198]]]],[200,152],[201,[[10,[198]]]],[201,[[10,[198]]]],[[],[[10,[198]]]],[16,[[10,[9,198]]]],[152,[[10,[9,198]]]],[[],[[10,[9,198]]]],0,[195],[[],1],[[],1],[[195,9],16],[15,202],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],[[10,[9,198]]]],[[],[[10,[198]]]],[[],[[10,[198]]]],[203,[[10,[198]]]],[[],[[10,[9,198]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[205,[[0,[3,204]]]]],[[205,[[0,[3,204]]]]]],[206,206],[207,207],[[[208,[3]]],[[208,[3]]]],[209,209],[[]],[[]],[[]],[[]],[[]],[[206,15,15,9],15],[[207,9],[[16,[15]]]],[[206,9,9],15],[[207,9,9],[[16,[15]]]],[[[205,[[0,[5,204]]]],6],7],[[206,6],7],[[207,6],7],[[[208,[5]],6],7],[[209,6],7],[[]],[[]],[[]],[[]],[[]],[206,15],[[208,9]],[[209,9],9],[[]],[[]],[[]],[[]],[[]],[[[208,[137]]],[[16,[9]]]],[15,15],[[15,15],15],[[15,15],15],[[[16,[204]]],[[205,[204]]]],[15,206],[[],207],[[[16,[137]]],[[208,[137]]]],[[],209],[9,207],[204,[[16,[9]]]],[[[205,[204]]],[[16,[9]]]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],210],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[211,[3,3]]],[[211,[3,3]]]],[212,212],[[[213,[3]]],[[213,[3]]]],[[[214,[3,3]]],[[214,[3,3]]]],[215,215],[216,216],[217,217],[218,218],[219,219],[[[220,[3,3]]],[[220,[3,3]]]],[[[221,[3,3]]],[[221,[3,3]]]],[[[222,[3,3]]],[[222,[3,3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[210,210],82],[[211,211],82],[[[213,[137]],213],82],[[[214,[137,137]],214],82],[[],223],[[],[[211,[111,111]]]],[[],212],0,[[210,210],8],[[211,211],8],[[[213,[138]],213],8],[[[214,[138,138]],214],8],[[223,6],7],[[[211,[5,5]],6],7],[[212,6],7],[[[225,[5,[0,[5,[224,[5]]]]]],6],7],[[[213,[5]],6],7],[[[214,[5,5]],6],7],[[215,6],7],[[216,6],7],[[217,6],7],[[218,6],7],[[219,6],7],[[[220,[5,5]],6],7],[[[221,[5,5]],6],7],[[[222,[5,5]],6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[169,1],[169,1],[169,1],[169,1],[[212,224]],[[212,110],8],[[212,224],[[225,[224]]]],[[]],[[]],[[]],[[[213,[141]]]],[[[214,[141,141]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[223,110,110],8],[223,8],0,0,[8,[[10,[198]]]],[[],192],0,[223,223],[[]],[[]],[[]],[[],1],[215,1],[216,1],[217,1],[219,1],[220,1],[[[222,[190]]],1],[[[222,[226]]],1],[[],223],[15,212],[[],214],[9,220],[[],222],[199,1],[[[225,[224]]],1],0,[[210,210],[[1,[82]]]],[[211,211],[[1,[82]]]],[[[213,[151]],213],[[1,[82]]]],[[[214,[151,151]],214],[[1,[82]]]],[212],[[212,15],15],[[213,212]],[[214,212]],0,[212,15],[212,225],[212,225],[212,110],[[212,15,9],[[16,[15]]]],[200,152],[200,152],[[],152],[[],152],[[],152],[[],1],[[],1],[[],1],0,0,[[]],[[]],[[223,110],223],[[223,110],223],[[223,110],223],[[223,9],223],[212],0,0,[[],212],0,0,[[],[[1,[169]]]],[[],[[1,[169]]]],[[],[[1,[169]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[1,[169]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[227,227],[228,228],[229,229],[[[231,[[0,[3,230]]]]],[[231,[[0,[3,230]]]]]],[[[232,[[0,[3,230]]]]],[[232,[[0,[3,230]]]]]],[[[233,[[0,[3,94]],[0,[3,39]]]]],[[233,[[0,[3,94]],[0,[3,39]]]]]],[153,153],[234,234],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],235],[9,15],[9,15],[[234,9,9,149]],0,0,0,[[153,153],8],[[227,6],7],[[228,6],7],[[229,6],7],[[[231,[[0,[5,230]]]],6],7],[[[232,[[0,[5,230]]]],6],7],[[[233,[[0,[5,94]],[0,[5,39]]]],6],7],[[153,6],7],[[235,6],7],[[234,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[229,[[231,[230]]]],[153],[[235,149],15],[[235,149,9,9],15],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[231,[230]],9,9],9],[[236,9,9],9],[227,9],[228,9],[229,9],0,[[9,149],227],[149,228],[[9,149],229],[[9,149],236],[149,233],[[],235],[9,234],[[]],0,0,[[228,9,9,27]],[[228,9,27]],[[228,9,9]],[[229,9,9,27]],[[236,9,9,8,27]],[[236,9,9,8,27,27]],[[[237,[[224,[9]]]],212],149],[[[238,[[224,[9]]]],212],149],[[[239,[[224,[9]]]],212],149],[[[240,[[224,[9]]]],212],149],0,[[[16,[15]]]],[[[16,[15]]]],[[228,9,27]],[[228,9,27]],[[228,9,9]],[[],235],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[236,9,9,8,27]],0,0,0,[[],9],[[],9],[15,235],0,0,0],"p":[[4,"Option"],[3,"RangeChminChmaxAdd"],[8,"Clone"],[3,"RangeSumRangeChminChmaxAdd"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"bool"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"ConvexHullTrick"],[15,"i64"],[3,"XorBasis"],[15,"u64"],[3,"Vec"],[3,"RhoPath"],[8,"MIntBase"],[3,"IndependentSubSet"],[3,"BitDp"],[3,"Subsets"],[3,"Combinations"],[3,"PartisanGameAnalyzer"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"Iterator"],[8,"FnMut"],[3,"BabyStepGiantStep"],[3,"SqrtDecompositionBuckets"],[8,"IntoIterator"],[3,"PartisanGamer"],[3,"SlideMinimum"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"LexicographicalSubsequence"],[3,"LongestIncreasingSubsequence"],[8,"Fn"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"FunctionalAutomaton"],[3,"MappingAutomaton"],[3,"AlphabetMappingAutomaton"],[3,"LexicographicalAutomaton"],[3,"RevLexicographicalAutomaton"],[3,"MonoidalAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BitVector"],[3,"WaveletMatrix"],[3,"Accumulate"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"CompressedBinaryIndexedTree"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"SlopeTrick"],[3,"MergingUnionFind"],[3,"HashMap"],[3,"WeightedUnionFind"],[3,"UnionFind"],[3,"NonNull"],[3,"MemoryPool"],[3,"SegmentTree"],[3,"DequeAggregation"],[3,"BitSet"],[3,"Trie"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"CompressedSegmentTree"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"Automatondp"],[3,"VecCompress"],[3,"HashCompress"],[3,"LineSet"],[4,"Ordering"],[3,"SplaySequence"],[3,"SplayMap"],[3,"Drain"],[3,"Ref"],[3,"RefMut"],[8,"Group"],[3,"Iter"],[3,"Iter"],[3,"Keys"],[3,"IterMut"],[3,"Keys"],[8,"Monoid"],[3,"Static2DTree"],[8,"RankSelectDictionaries"],[3,"Range"],[3,"Range"],[15,"isize"],[3,"Values"],[3,"Values"],[3,"ValuesMut"],[3,"Complex"],[4,"Ccw"],[3,"Line"],[6,"Point"],[3,"LineSegment"],[3,"Approx"],[3,"Circle"],[15,"f64"],[8,"Default"],[3,"TwoSatisfiability"],[3,"ProjectSelectionProblem"],[3,"SparseGraphBuilder"],[3,"AdjacencyListGraph"],[3,"BipartiteMatching"],[3,"DinicBuilder"],[3,"PrimalDualBuilder"],[3,"GridGraph"],[3,"UsizeGraph"],[3,"ClosureGraph"],[3,"SparseGraph"],[3,"Adjacency"],[3,"Iter"],[3,"VIndexWithValue"],[3,"VIndexWithEIndexValue"],[6,"BidirectionalSparseGraph"],[3,"Dinic"],[3,"PrimalDual"],[3,"EdgeListGraph"],[3,"VIndex"],[3,"VIndexWithEIndex"],[4,"DirectedEdge"],[4,"UndirectedEdge"],[4,"BidirectionalEdge"],[3,"StronglyConnectedComponent"],[8,"Ord"],[8,"PartialEq"],[15,"never"],[6,"DirectedSparseGraph"],[8,"Hash"],[8,"IterScan"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraphScanner"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"AdjacencyViewIterFromEindex"],[3,"AdjacencyViewIterFromValue"],[6,"UndirectedSparseGraph"],[3,"LowLink"],[8,"PartialOrd"],[3,"String"],[4,"TreeCenter"],[3,"FormalPowerSeries"],[3,"Matrix"],[3,"Polynomial"],[8,"Zero"],[8,"Add"],[8,"Mul"],[8,"MulAssign"],[3,"BarrettReduction"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"PowPrec"],[3,"EulerPhiTable"],[3,"PrimeList"],[3,"PrimeTable"],[3,"MInt"],[15,"u32"],[15,"u128"],[3,"IterMut"],[8,"One"],[8,"Copy"],[3,"DoubleDouble"],[3,"Float32"],[3,"Float64"],[15,"i128"],[3,"Saturating"],[15,"i32"],[15,"i8"],[15,"i16"],[3,"Wrapping"],[3,"QuadDouble"],[15,"u8"],[15,"u16"],[4,"FpCategory"],[3,"ExtendedGcd"],[3,"Error"],[15,"f32"],[15,"str"],[3,"RangeInclusive"],[3,"LocalKey"],[3,"Bytes"],[3,"Chain"],[3,"Scanner"],[4,"Usize1"],[4,"Chars"],[3,"Error"],[3,"ScannerIter"],[8,"Read"],[3,"BorrowedCursor"],[3,"Take"],[3,"Arguments"],[8,"Eq"],[3,"KnuthMorrisPratt"],[3,"RollingHash"],[3,"MultipleRollingHash"],[3,"SuffixArray"],[3,"Zarray"],[3,"TotalOrd"],[3,"PartialIgnoredOrd"],[3,"Xorshift"],[3,"NotEmptySegment"],[3,"RandRange"],[3,"CharWithBase"],[3,"CharsWithBase"],[3,"ByteWithBase"],[4,"Bytes"],[3,"BytesWithBase"],[3,"Collect"],[3,"SizedCollect"],[3,"Splitted"],[3,"SimuratedAnnealing"],[8,"RandomSpec"],[3,"RandIter"],[15,"char"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[8,"LcaMonoidDispatch"],[3,"LowestCommonAncestor"],[3,"LcaMonoid"],[3,"ReRooting"],[3,"TreeRec"],[3,"TreeHasher"],[3,"HeavyLightDecomposition"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[8,"MonoidAction"],[8,"SemiRing"],[8,"Magma"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"AddMulOperation"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[4,"PermutationOperation"],[3,"FindMajorityOperation"],[8,"Field"],[8,"Invertible"],[8,"Unital"],[8,"Ring"],[8,"BitXorIdentity"],[8,"MoSolver"],[8,"SqrtDecomposition"],[8,"PartisanGame"],[3,"SubsetTransform"],[3,"SupersetTransform"],[8,"SliceBisectExt"],[8,"Bisect"],[8,"Trisect"],[8,"Automaton"],[8,"Allocator"],[8,"Compressor"],[8,"ToDigitSequence"],[8,"ApproxOrd"],[8,"Adjacencies"],[8,"AdjacenciesWithEindex"],[8,"AdjacenciesWithValue"],[8,"AdjacencyIndexWithValue"],[8,"AdjacencyView"],[8,"EIndexedGraph"],[8,"AdjacencyIndexWithEindex"],[8,"Edges"],[8,"EdgeMap"],[8,"ShortestPathSemiRing"],[8,"GraphBase"],[8,"AdjacencyIndex"],[8,"Vertices"],[8,"VertexMap"],[3,"StandardSp"],[3,"OptionSp"],[3,"PathFoldingSp"],[8,"ShortestPathExt"],[8,"SparseGraphConstruction"],[8,"EdgeSize"],[8,"EdgeView"],[8,"VertexSize"],[8,"VertexView"],[8,"ConvolveSteps"],[3,"Mersenne61"],[3,"Mersenne127"],[4,"ConvolveRealFft"],[3,"Convolve"],[8,"FormalPowerSeriesCoefficientSqrt"],[8,"Float"],[8,"IntBase"],[8,"Unsigned"],[8,"Signed"],[8,"DiscreteSteps"],[8,"BinaryRepr"],[8,"RangeBoundsExt"],[8,"MIntConvert"],[8,"Bounded"],[3,"Modulo2"],[4,"Modulo998244353"],[4,"Modulo1000000007"],[4,"Modulo1000000009"],[4,"DynModuloU32"],[4,"DynModuloU64"],[6,"DynMIntU32"],[6,"DynMIntU64"],[4,"Modulo998244353"],[4,"Modulo2113929217"],[4,"Modulo1811939329"],[4,"Modulo2013265921"],[8,"MontgomeryReduction32"],[8,"Write"],[8,"MarkedIterScan"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[8,"AsTotalOrd"],[8,"PartialOrdExt"],[8,"CharTools"],[8,"IterPrint"],[4,"LcaMonoidDefaultId"],[13,"One"],[13,"Two"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,5,2,5,2,2,2,5,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,5,2,5,2,2,2,5,5,2,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,2,2,5,0,0,0,0,2,2,5,5,2,2,5,2,2,2,2,5,5,2,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,2,2,2,2,2,5,2,5,2,5,2,2,5,5,2,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,2,2,2,5,2,5,2,2,5,2,5,2,5,0,0,5,5,0,0,0,2,5,2,5,2,5],"n":["datastructure","graph","math","sample","string","dynamic_sequence_range_affine_range_sum","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_chmin_chmax_add_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","MInt998244353","RangeSumRangeLinear","SplaySequence","dynamic_sequence_range_affine_range_sum","LineSet","line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","LazySegmentTree","RangeChminChmaxAdd","RangeSumRangeChminChmaxAdd","Saturating","range_chmin_chmax_add_range_sum","WaveletMatrix","range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","UnionFind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","log_of_formal_power_series","min_of_mod_of_linear","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","Convolve","ConvolveSteps","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","PrimeList","enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","factorize","prime_factors_flatten","MInt998244353","berlekamp_massey","find_linear_recurrence","Fps998244353","MInt998244353","inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","Fps998244353","MInt998244353","log_of_formal_power_series","binary_search","floor_sum_range_freq","min_of_mod_of_linear","Fps998244353","MInt998244353","multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","DynMIntU32","sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","floor_sum","sum_of_floor_of_linear","TwoSatisfiability","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","SuffixArray","suffixarray","Zarray","zalgorithm"],"q":["library_checker","","","","","library_checker::datastructure","","","","","","","","","","","","","library_checker::datastructure::dynamic_sequence_range_affine_range_sum","","","","library_checker::datastructure::line_add_get_min","","library_checker::datastructure::point_add_range_sum","","","","","library_checker::datastructure::point_set_range_composite","","","","","library_checker::datastructure::queue_operate_all_composite","","","","","library_checker::datastructure::range_affine_range_sum","","","","","","library_checker::datastructure::range_chmin_chmax_add_range_sum","","","","","library_checker::datastructure::range_kth_smallest","","library_checker::datastructure::staticrmq","","","","","library_checker::datastructure::unionfind","","library_checker::datastructure::vertex_add_path_sum","","","","","library_checker::datastructure::vertex_add_subtree_sum","","","","","library_checker::datastructure::vertex_set_path_composite","","","","","","","","library_checker::graph","","","","library_checker::graph::bipartitematching","","","","library_checker::graph::directedmst","","","library_checker::graph::lca","","","","","","library_checker::graph::scc","","","library_checker::math","","","","","","","","","","","","","","","","","","","library_checker::math::convolution_mod","","","","","library_checker::math::convolution_mod_1000000007","","","","","","library_checker::math::discrete_logarithm_mod","","library_checker::math::enumerate_primes","","library_checker::math::exp_of_formal_power_series","","","library_checker::math::factorize","","library_checker::math::find_linear_recurrence","","","library_checker::math::inv_of_formal_power_series","","","library_checker::math::kth_term_of_linearly_recurrent_sequence","","","","library_checker::math::log_of_formal_power_series","","","library_checker::math::min_of_mod_of_linear","","","library_checker::math::multipoint_evaluation","","","library_checker::math::polynomial_taylor_shift","","","","library_checker::math::pow_of_formal_power_series","","","library_checker::math::sharp_p_subset_sum","","","","","","library_checker::math::sqrt_mod","","library_checker::math::sqrt_of_formal_power_series","","","library_checker::math::sum_of_floor_of_linear","","library_checker::math::two_sat","","library_checker::sample","","library_checker::sample::aplusb","library_checker::sample::many_aplusb","library_checker::string","","","library_checker::string::number_of_substrings","","library_checker::string::suffixarray","","library_checker::string::zalgorithm",""],"d":["","","","","","","","","","","","","","","","","","","","","","✅  AC  3827ms","","✅  AC  454ms","","","","✅  AC  90ms","✅  AC  119ms","","","","","✅  AC  184ms","","","","","✅  AC  44ms","","","","","","✅  AC  723ms","","","","","✅  AC  1536ms","","✅  AC  282ms","","","","✅  AC  148ms","✅  AC  138ms","","✅  AC  15ms","","","","","✅  AC  596ms","","","","","✅  AC  139ms","","","","","","","","✅  AC  300ms","","","","","","","✅  AC  161ms","✅  AC  1296ms","","","✅  AC  197ms","","","","","✅  AC  697ms","✅  AC  706ms","","","✅  AC  178ms","","","","","","","","","","","","","","","","","","","","","","","","✅  AC  152ms","","","","","","✅  AC  361ms","","✅  AC  3ms","","✅  AC  1515ms","","","✅  AC  456ms","✅  AC  85ms","","","","✅  AC  124ms","","","✅  AC  135ms","","","","✅  AC  1921ms","","","✅  AC  265ms","","","✅  AC  2207ms","","","✅  AC  705ms","","","","✅  AC  118ms","","","✅  AC  596ms","","","","","","✅  AC  490ms","","✅  AC  66ms","","","✅  AC  378ms","","❌  RE  33ms","","✅  AC  154ms","","","✅  AC  0ms","✅  AC  138ms","","","","","✅  AC  865ms","","✅  AC  588ms","","✅  AC  31ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"]],"a":{"verify":[21,23,27,28,33,38,44,49,51,55,56,58,63,68,76,83,84,87,92,93,96,120,126,128,130,133,134,138,141,145,148,151,154,158,161,167,169,172,174,176,179,180,185,187,189]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
