var searchIndex = JSON.parse('{\
"aizu_online_judge":{"doc":"Verification of <code>competitive</code> crate by Aizu Online Judge","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,5,2,5,2,5,5,2,2,5,2,5,2,5,2,5,5,2,5,2,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,2,5,2,2,5,2,2,5,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,2,2,5,5,5,2,2,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,5,5,2,2,2,2,5,2,2,2,2,2,5,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,5,2,5,5,2,2,5,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,2,2,5,2,2,5,2,2,5,2,2,5,0,5],"n":["dpl","dsl","grl","itp1","dpl_1_a","dpl_1_b","dpl_1_c","dpl_1_d","dpl_1_e","dpl_1_f","dpl_1_g","dpl_1_h","dpl_1_i","dpl_3_a","dpl_3_b","dpl_3_c","dpl_1_a","KnapsackPloblemSmallWeight","dpl_1_b","KnapsackPloblemSmallWeight","dpl_1_c","LongestIncreasingSubsequence","dpl_1_d","dpl_1_e","levenshtein_distance","KnapsackPloblemSmallValue","dpl_1_f","KnapsackPloblemSmallWeight","dpl_1_g","ZeroOneKnapsackProblemSmallItems","dpl_1_h","ZeroOneKnapsackPloblemBranchAndBound","dpl_1_i","dpl_3_a","largest_square","dpl_3_b","largest_rectangle_in_grid","dpl_3_c","largest_rectangle","dsl_1_a","dsl_1_b","dsl_2_a","dsl_2_b","dsl_2_c","dsl_2_d","dsl_2_e","dsl_2_f","dsl_2_g","dsl_2_h","dsl_2_i","dsl_3_a","dsl_3_b","dsl_3_c","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","UnionFind","dsl_1_a","AdditiveOperation","WeightedUnionFind","dsl_1_b","MinOperation","SegmentTree","dsl_2_a","AdditiveOperation","SegmentTree","dsl_2_b","Static2DTree","dsl_2_c","LazySegmentTree","RangeMinRangeUpdate","dsl_2_d","LazySegmentTree","RangeSumRangeAdd","dsl_2_e","LazySegmentTree","RangeMinRangeUpdate","dsl_2_f","LazySegmentTree","RangeSumRangeAdd","dsl_2_g","LazySegmentTree","RangeMinRangeAdd","dsl_2_h","LazySegmentTree","RangeSumRangeUpdate","dsl_2_i","AdditiveOperation","QueueAggregation","dsl_3_a","dsl_3_b","dsl_3_c","MinOperation","QueueAggregation","dsl_3_d","dsl_4_a","dsl_5_a","dsl_5_b","grl_1_a","grl_1_b","grl_1_c","grl_2_a","grl_2_b","grl_3_a","grl_3_b","grl_3_c","grl_4_a","grl_4_b","grl_5_a","grl_5_b","grl_5_c","grl_5_d","grl_5_e","grl_6_a","grl_6_b","grl_7_a","AdditiveOperation","Bounded","DirectedGraphScanner","OptionSp","ShortestPathExt","StandardSp","grl_1_a","grl_1_a_option","AdditiveOperation","DirectedGraphScanner","OptionSp","ShortestPathExt","grl_1_b","AdditiveOperation","DirectedGraphScanner","OptionSp","Saturating","ShortestPathExt","grl_1_c","EdgeListGraphScanner","grl_2_a","AdditiveOperation","EdgeListGraph","EdgeListGraphScanner","grl_2_b","LowLink","UndirectedGraphScanner","grl_3_a","LowLink","UndirectedGraphScanner","grl_3_b","DirectedGraphScanner","StronglyConnectedComponent","grl_3_c","DirectedGraphScanner","grl_4_a","DirectedGraphScanner","grl_4_b","judge_grl_4_b","AdditiveOperation","TreeGraphScanner","grl_5_a","MaxOperation","ReRooting","TreeGraphScanner","grl_5_b","EulerTourForRichVertex","LcaMonoidDefaultId","SizedCollect","UndirectedSparseGraph","grl_5_c","AdditiveOperation","BinaryIndexedTree","EulerTourForEdge","SizedCollect","UndirectedSparseGraph","grl_5_d","AdditiveOperation","HeavyLightDecomposition","LazySegmentTree","RangeSumRangeAdd","SizedCollect","UndirectedSparseGraph","grl_5_e","AdditiveOperation","DinicBuilder","grl_6_a","AdditiveOperation","PrimalDualBuilder","grl_6_b","AdditiveOperation","DinicBuilder","grl_7_a","itp1_1_a","itp1_1_a"],"q":["aizu_online_judge","","","","aizu_online_judge::dpl","","","","","","","","","","","","aizu_online_judge::dpl::dpl_1_a","aizu_online_judge::dpl::dpl_1_b","","aizu_online_judge::dpl::dpl_1_c","","aizu_online_judge::dpl::dpl_1_d","","aizu_online_judge::dpl::dpl_1_e","","aizu_online_judge::dpl::dpl_1_f","","aizu_online_judge::dpl::dpl_1_g","","aizu_online_judge::dpl::dpl_1_h","","aizu_online_judge::dpl::dpl_1_i","","aizu_online_judge::dpl::dpl_3_a","","aizu_online_judge::dpl::dpl_3_b","","aizu_online_judge::dpl::dpl_3_c","","aizu_online_judge::dsl","","","","","","","","","","","","","","","","","","aizu_online_judge::dsl::dsl_1_a","","aizu_online_judge::dsl::dsl_1_b","","","aizu_online_judge::dsl::dsl_2_a","","","aizu_online_judge::dsl::dsl_2_b","","","aizu_online_judge::dsl::dsl_2_c","","aizu_online_judge::dsl::dsl_2_d","","","aizu_online_judge::dsl::dsl_2_e","","","aizu_online_judge::dsl::dsl_2_f","","","aizu_online_judge::dsl::dsl_2_g","","","aizu_online_judge::dsl::dsl_2_h","","","aizu_online_judge::dsl::dsl_2_i","","","aizu_online_judge::dsl::dsl_3_a","","","aizu_online_judge::dsl::dsl_3_b","aizu_online_judge::dsl::dsl_3_c","aizu_online_judge::dsl::dsl_3_d","","","aizu_online_judge::dsl::dsl_4_a","aizu_online_judge::dsl::dsl_5_a","aizu_online_judge::dsl::dsl_5_b","aizu_online_judge::grl","","","","","","","","","","","","","","","","","","aizu_online_judge::grl::grl_1_a","","","","","","","","aizu_online_judge::grl::grl_1_b","","","","","aizu_online_judge::grl::grl_1_c","","","","","","aizu_online_judge::grl::grl_2_a","","aizu_online_judge::grl::grl_2_b","","","","aizu_online_judge::grl::grl_3_a","","","aizu_online_judge::grl::grl_3_b","","","aizu_online_judge::grl::grl_3_c","","","aizu_online_judge::grl::grl_4_a","","aizu_online_judge::grl::grl_4_b","","","aizu_online_judge::grl::grl_5_a","","","aizu_online_judge::grl::grl_5_b","","","","aizu_online_judge::grl::grl_5_c","","","","","aizu_online_judge::grl::grl_5_d","","","","","","aizu_online_judge::grl::grl_5_e","","","","","","","aizu_online_judge::grl::grl_6_a","","","aizu_online_judge::grl::grl_6_b","","","aizu_online_judge::grl::grl_7_a","","","aizu_online_judge::itp1","aizu_online_judge::itp1::itp1_1_a"],"d":["Discrete Optimization Problems","Data Sets and Queries","Graph Algorithms","Introduction to Programming I","Coin Changing Problem","0-1 Knapsack Problem","Knapsack Problem","Longest Increasing Subsequence","Edit Distance (Levenshtein Distance)","0-1 Knapsack Problem II","Knapsack Problem with Limitations","Huge Knapsack Problem","Knapsack Problem with Limitations II","Largest Square","Largest Rectangle","Largest Rectangle in a Histogram","✅  AC  1ms","","✅  AC  1ms","","✅  AC  2ms","","✅  AC  9ms","✅  AC  4ms","","","✅  AC  0ms","","✅  AC  6ms","","✅  AC  46ms","","✅  AC  0ms","✅  AC  27ms","","✅  AC  22ms","","✅  AC  2ms","","Disjoint Set: Union Find Tree","Weighted Union Find Trees","Range Minimum Query (RMQ)","Range Sum Query","Range Search (kD Tree)","Range Update Query (RUQ)","Range Add Query (RAQ)","RMQ and RUQ","RSQ and RAQ","RMQ and RAQ","RSQ and RUQ","The Smallest Window I","The Smallest Window II","The Number of Windows","Sliding Minimum Element","Union of Rectangles","The Maximum Number of Customers","The Maximum Number of Overlaps","","✅  AC  6ms","","","✅  AC  23ms","","","✅  AC  14ms","","","✅  AC  14ms","","✅  AC  423ms","","","✅  AC  61ms","","","✅  AC  56ms","","","✅  AC  83ms","","","✅  AC  50ms","","","✅  AC  48ms","","","✅  AC  60ms","","","✅  AC  4ms","✅  AC  2ms","✅  AC  217ms","","","✅  AC  103ms","✅  AC  64ms","✅  AC  4ms","✅  AC  7ms","Single Source Shortest Path","Single Source Shortest Path (Negative Edges)","All Pairs Shortest Path","Minimum Spanning Tree","Minimum-Cost Arborescence","Articulation Points","Bridges","Strongly Connected Components","Cycle Detection for a Directed Graph","Topological Sort","Diameter of a Tree","Height of a Tree","Lowest Common Ancestor","Range Query on a Tree","Range Query on a Tree II","Maximum Flow","Minimum Cost Flow","Bipartite Matching","","","","","","","✅  AC  71ms","✅  AC  73ms","","","","","✅  AC  8ms","","","","","","✅  AC  9ms","","✅  AC  23ms","","","","✅  AC  0ms","","","✅  AC  2ms","","","✅  AC  2ms","","","✅  AC  6ms","","✅  AC  0ms","","✅  AC  2ms","","","","✅  AC  9ms","","","","✅  AC  2ms","","","","","✅  AC  116ms","","","","","","✅  AC  47ms","","","","","","","✅  AC  224ms","","","✅  AC  0ms","","","✅  AC  0ms","","","✅  AC  0ms","Hello World","✅  AC  0ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,2]],0,[[1,2]],0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],0,0,[[1,2]],[[1,2]],[[1,2]],[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],[[1,1,1],3],0,0,[[1,2]],0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,[[1,2]]],"p":[[8,"Read"],[8,"Write"],[15,"bool"]],"a":{"verify":[16,18,20,22,23,26,28,30,32,33,35,37,58,61,64,67,69,72,75,78,81,84,87,90,91,92,95,96,97,98,123,124,129,135,137,141,144,147,150,152,154,158,162,167,173,180,183,186,189,191]}},\
"competitive":{"doc":"github","tn":["add_assign","algebra","algorithm","array","automaton","bitand_assign","bitor_assign","bitxor_assign","chmax","chmin","combinatorial_optimization","comprehension","crecurse","data_structure","define_basic_mint32","define_basic_mintbase","define_monoid","div_assign","geometry","graph","impl_assoc_value","impl_bitand_identity","impl_bitor_identity","impl_bitxor_identity","iter_print","math","max","memorize","min","minmax","mlambda","monoid_fold","mul_assign","num","prelude","prepare","rand","rand_value","rem_assign","scan","scan_value","shl_assign","shr_assign","string","sub_assign","tools","tree","AbelianGroup","AbelianMonoid","Act","ActMonoid","AddMulOperation","Additive","AdditiveOperation","Agg","AggMonoid","Associative","BitAndIdentity","BitAndOperation","BitOrIdentity","BitOrOperation","BitXorIdentity","BitXorOperation","Bottom2Operation","Commutative","CountingOperation","EmptyAction","EmptyLazy","Field","FindMajorityOperation","FirstOperation","Gf2_63","Group","Idempotent","IdempotentMonoid","Invertible","Key","LastOperation","LinearOperation","MOD","MOD","Magma","MaxOperation","Mersenne61","MinOperation","Monoid","MonoidAction","Multiplicative","MultiplicativeOperation","PermutationOperation","RangeChminChmaxAdd","RangeMaxRangeUpdate","RangeMinRangeAdd","RangeMinRangeUpdate","RangeSumRangeAdd","RangeSumRangeChminChmaxAdd","RangeSumRangeLinear","RangeSumRangeUpdate","ReverseOperation","Ring","SemiGroup","SemiRing","T","T","Top2Operation","Unital","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_agg","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_key","act_operate","act_operate","act_operate_assign","act_operate_assign","act_unit","act_unit","add","add","add","agg_operate","agg_operate","agg_operate_assign","agg_operate_assign","agg_unit","agg_unit","all_one","all_zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone_into","clone_into","define_monoid","div","div","eq","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inverse","inverse","inverse","inverse","inverse","inverse","inverse","is_unit","is_unit","monoid_fold","mul","mul","neg","neg","one","one","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate","operate_assign","operate_assign","pow","pow","reverse_operate","reverse_operate","rinv_operate","rinv_operate","rinv_operate","rinv_operate","set_unit","set_unit","single","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","single_agg","sub","sub","sum","to_owned","to_owned","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","unit","xor_zero","zero","zero","Answer","B","BabyStepGiantStep","Bisect","BitDp","Combinations","ConvexHullTrick","DivisorTransform","EsperEstimator","EsperSolver","ImpartialGame","ImpartialGameAnalyzer","ImpartialGamer","IndependentSubSet","Iter","Iter","LIter","M","MoSolver","MultipleTransform","PartisanGame","PartisanGameAnalyzer","PartisanGamer","RIter","RhoPath","SliceBisectExt","SliceCombinationsExt","SliceSortExt","SlideMinimum","SqrtDecomposition","SqrtDecompositionBuckets","State","State","State","SubsetTransform","Subsets","SupersetTransform","T","Trisect","XorBasis","ZeroSumGame","ZeroSumGameAnalyzer","ZeroSumGamer","add_line","answer","basis","binary_search","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bubble_sort","bubble_sort_by","bucket","build","build_rho","chromatic_number","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combinations","convolve","convolve","convolve","convolve","default","default","default","elements","eq","eval","eval","eval","f","find","find_bisect","floor_kernel","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_bucket","fold_cell","for_each_combinations","for_each_combinations_with_replacement","for_each_permutations","for_each_product","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_adj_graph","from_iter","g","get","ind","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_element","is_subset","k_colorable","merge_sort","merge_sort_by","middle","middle_point","mo_solve","mo_solve","mobius_transform","mobius_transform","mobius_transform","mobius_transform","n","new","new","new","new","new","new","new","new","new","new","new","new_with_primes","new_with_primes","next","next","next_combination","next_left","next_left","next_minimum","next_permutation","next_right","next_right","next_section","next_state","next_state","next_state","next_state","not_elements","parallel_binary_search","position_bisect","prev_combination","prev_permutation","push","query","reduce","remove","rfind_bisect","rposition_bisect","run_length_encoding","section_end","slide_minimum","solve","solve","solve","solve_checked","sqrt_decomposition","sqrt_decomposition","subsets","ternary_search","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update_bucket","update_cell","zeta_transform","zeta_transform","zeta_transform","zeta_transform","KnapsackPloblemSmallValue","KnapsackPloblemSmallWeight","LexicographicalSubsequence","LongestIncreasingSubsequence","ZeroOneKnapsackPloblemBranchAndBound","ZeroOneKnapsackProblemSmallItems","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","dp","dp","dp","extend","extend","extend","extend","extend01","extend01","extend_limitation","extend_limitation","extend_limitation2","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","insert","insert","insert","insert","insert01","insert01","insert_limitation","insert_limitation","insert_limitation2","into","into","into","into","into","into","kth_sequence","largest_rectangle","largest_rectangle_in_grid","largest_square","levenshtein_distance","longest_length","max_weight","new","new","new","new","new","new","solve","solve","solve","solve","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Accumulate","Allocator","Alphabet","AlphabetMappingAutomaton","AlwaysAcceptingAutomaton","Automaton","Automatondp","BTreeCounter","BinaryIndexedTree","BinaryIndexedTree2D","BitSet","BitVector","CompressedBinaryIndexedTree","CompressedBinaryIndexedTree1d","CompressedBinaryIndexedTree2d","CompressedBinaryIndexedTree3d","CompressedBinaryIndexedTree4d","CompressedSegmentTree","CompressedSegmentTree1d","CompressedSegmentTree2d","CompressedSegmentTree3d","CompressedSegmentTree4d","Compressor","DequeAggregation","DisjointSparseTable","FibHashMap","FibHashSet","FunctionalAutomaton","HashCompress","HashCounter","IntersectionAutomaton","LazySegmentTree","LazySegmentTreeMap","LexicographicalAutomaton","LineSet","MappingAutomaton","MemoryPool","MergingUnionFind","MonoidalAutomaton","ProductAutomaton","QueueAggregation","RangeArithmeticProgressionAdd","RangeMap","RangeSet","RankSelectDictionaries","RevLexicographicalAutomaton","SegmentTree","SegmentTreeMap","SlopeTrick","SplayMap","SplaySequence","State","Static2DTree","ToDigitSequence","Trie","UnionAutomaton","UnionFind","VecCompress","WaveletMatrix","WeightedUnionFind","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","accept","access","access","access","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate","accumulate0","accumulate0","add","add","add_abs","add_const","add_count","add_count","add_pmar","add_ramp","all_group_members","all_group_members","all_group_members","allocate","allocate","append","as_slice","automaton","back","bit_length","bit_length","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_failure","build_inplace","clear","clear","clear","clear","clear_left","clear_right","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains_key","count_ones","count_zeros","dd","deallocate","deallocate","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dp","dp","dp","drain","drain_with","drain_with","drop","drop","drop","edges","eq","extend","extend","extend","extend","extend","extend","extend","find","find","find","find","find_at","find_root","find_root_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_accept","fold_all","fold_all","fold_all","fold_all","fold_all","fold_all","fold_close","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_slice","from_vec","from_vec","front","get","get","get","get","get","get","get","get","get","get","get","get","get_difference","get_key_value","get_key_value_at","get_left_if","get_left_if","get_range","get_range_value","get_right_if","get_right_if","get_weight","greater_than","greater_than","greater_than_or_equal","greater_than_or_equal","hash","height","index","index_exact","index_exact","index_exact","index_lower_bound","index_lower_bound","index_lower_bound","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","initial","insert","insert","insert","insert","insert","insert","insert_at","insert_once_at","insert_with","insert_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_same","iter","iter","iter","iter","iter","iter_mut","keys","keys","keys","last","len","len","len","len","len","len","less_than","less_than","less_than_or_equal","less_than_or_equal","lower_bound","map_fold_accept","members","members","members","min_range","minimum","modify","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next","next","next","next","next","next","next","next","next","next","next","next_node","node_size","not","not","ones","partial_cmp","pop","pop_back","pop_front","pop_left_if","pop_left_if","pop_right_if","pop_right_if","position_acc","position_acc","position_acc","position_acc","position_acc","push","push_back","push_front","quantile","quantile_outer","query_min","range","range","range","range_at","rank","rank0","rank0","rank1","rank1","rank1","rank_lessthan","rank_range","remove","remove","remove","remove","remove","remove","remove_at","remove_count","remove_count","reverse","roots","roots","roots","rotate_left","rotate_right","rposition_acc","rposition_acc","rposition_acc","rposition_acc","rposition_acc","run","run_effect","same","same","select","select0","select0","select0","select1","select1","select1","set","set","set","set","set","set","set","shift","shl","shl_assign","shl_bitor_assign","shr","shr_assign","shr_bitor_assign","size","size","size","size","size","size","slide_minimum","step","step_effect","to_digit_sequence","to_digit_sequence_len","to_digit_sequence_radix","to_digit_sequence_radix_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unite","unite","unite","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update","update_isize","valley","values","values","values","values_mut","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","Approx","ApproxOrd","Ccw","Ccwable","Circle","Clockwise","CounterClockwise","Line","LineSegment","OnSegment","OnlineBack","OnlineFront","approx_cmp","approx_eq","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ccw","ccw","ccw","ccw_open","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","closest_pair","cmp","cmp","contains_point","convex_diameter","convex_hull","cross_circle","cross_point","default","dir","dir","distance","distance_point","distance_point","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","intersect","intersect_point","into","into","into","into","into","is_orthogonal","is_orthogonal","is_parallel","is_parallel","new","new","new","partial_cmp","partial_cmp","projection","projection","reflection","reflection","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AIndex","AIndex","AIndex","AIter","AIter","AIter","AValue","AViewIter","Adjacencies","AdjacenciesWithEindex","AdjacenciesWithValue","Adjacency","AdjacencyIndex","AdjacencyIndexWithEindex","AdjacencyIndexWithValue","AdjacencyListGraph","AdjacencyListGraphScanner","AdjacencyView","AdjacencyViewIterFromEindex","AdjacencyViewIterFromValue","BidirectionalEdge","BidirectionalGraphScanner","BidirectionalSparseGraph","BipartiteMatching","ClosureGraph","Dinic","DinicBuilder","DirectedEdge","DirectedGraphScanner","DirectedSparseGraph","EIndex","EIndex","EIndexedGraph","EIter","EdgeListGraph","EdgeListGraphScanner","EdgeMap","EdgeSize","EdgeView","Edges","Emap","GraphBase","GridGraph","LowLink","OptionSp","PathFoldingSp","PrimalDual","PrimalDualBuilder","ProjectSelectionProblem","ShortestPathExt","ShortestPathSemiRing","SparseGraph","SparseGraphBuilder","SparseGraphConstruction","SparseGraphScanner","StandardSp","StronglyConnectedComponent","T","TreeGraphScanner","TwoSatisfiability","UndirectedEdge","UndirectedGraphScanner","UndirectedSparseGraph","UsizeGraph","VIndex","VIndex","VIndex","VIndexWithEIndex","VIndexWithEIndexValue","VIndexWithValue","VIter","VertexMap","VertexSize","VertexView","Vertices","Vmap","add_assign","add_assign","add_assign","add_assign","add_clause","add_cost1","add_cost2","add_cost2_01","add_cost2_10","add_edge","add_edge","add_edge","add_edge","add_edge","add_nand","add_or","add_undirected_edge","adj4","adj8","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies","adjacencies_with_eindex","adjacencies_with_eindex","adjacencies_with_value","adjacencies_with_value","adjacencies_with_value","adjacency","articulation","avalue","avalue","avalue","aviews","aviews","aviews","aviews","aviews","aviews","bellman_ford_ms","bellman_ford_ms","bellman_ford_ss","bellman_ford_ss","bfs_distance_ms","bfs_distance_ms","bfs_distance_ss","bfs_distance_ss","bfs_order","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","build","build","build","builder","builder","builder","builder_with_esize","change_edge","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","components","construct_emap","construct_emap","construct_graph","construct_graph","construct_graph","construct_graph","construct_vmap","construct_vmap","construct_vmap","construct_vmap","construct_vmap","default","default","default","dfs_order","dfs_tree","dijkstra_ms","dijkstra_ms","dijkstra_ss","dijkstra_ss","dulmage_mendelsohn_decomposition","edges","edges","edges","edges_size","edges_size","eindex","eindex","eindex","eindex","elist","emap_get","emap_get","emap_get_mut","emap_get_mut","emap_set","emap_set","eq","eq","eq","eq","eq","eq","eq","eq","esize","esize","esize","eview","eview","eview","extend","extend","flat","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_connected_components","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_edges","from_edges","from_edges","gen_cgraph","gen_graph","gen_graph","get_flow","get_flow","graph","has_loop","hash","hash","hash","hash","hash","hash","hash","hash","height","hopcroft_karp","id","index","index","inf","inf","inf","inf","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","kuhn_multi_start_bfs","low","map","map","maximum_flow","maximum_flow_limited","maximum_independent_set","maximum_matching","minimum_cost_flow","minimum_cost_flow_limited","minimum_cut","minimum_edge_cover","minimum_spanning_arborescence","minimum_spanning_tree","minimum_vertex_cover","move_by_diff","mscan","mscan","mscan","mscan","mul","mul","mul","mul","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_adj4","new_adj8","new_with_esize","next","next","ord","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_false","set_true","size","solve","source","source","source","source","start","to","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_graphvis","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","topological_sort","tree_center","tree_center","tree_depth","tree_depth","tree_dp_bottom_up","tree_dp_bottom_up","tree_dp_top_down","tree_dp_top_down","tree_order","tree_size","tree_size","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_satisfiability","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unflat","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices","vertices_size","vertices_size","vindex","vindex","vindex","vindex","vindex","vindex","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_get_mut","vmap_set","vmap_set","vsize","vsize","vsize","vview","vview","vview","vview","vview","vview","vview","warshall_floyd_ap","warshall_floyd_ap","weighted_tree_depth","weighted_tree_depth","width","with_n_values","Convolve","Convolve998244353","ConvolveRealFft","ConvolveSteps","EulerPhiTable","F","FormalPowerSeries","FormalPowerSeriesCoefficient","FormalPowerSeriesCoefficientSqrt","Fps","Fps998244353","MIntConvolve","Matrix","MemorizedFactorial","Polynomial","PowPrec","PrimeList","PrimeTable","SmallModMemorizedFactorial","T","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","assign","berlekamp_massey","binary_exponentiation","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bostan_mori","check_primitive_root","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","combination","combination","convolve","convolve","count_divisors","count_divisors","count_multiset_sum","count_subset_sum","data","data","data","default","default","default","default","determinant","diff","discrete_logarithm","discrete_logarithm_prime_mod","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_rem","divisors","divisors","divisors","eq","eq","eq","euler_phi","eval","even","exp","extgcd","extgcd_binary","extgcd_recurse","eye","fact","factorial","floor_sum","floor_sum_i64","floor_sum_range_freq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_vec","from_vec","from_vec","gcd","gcd_loop","get","highly_composite_number","homogeneous_product","index","index","index","index","index_mut","index_mut","index_mut","index_mut","integral","into","into","into","into","into","into","into","into","into","into","into","into_iter","inv","inv","inv","inv_fact","inverse","inverse_transform","inverse_transform","inverse_transform","inverse_transform","is_prime","is_prime","iter","iter_mut","kth_term","kth_term_of_linearly_recurrence","lagrange_interpolation","lagrange_interpolation","lagrange_interpolation_polynomial","lcm","length","length","length","length","length","length","linear_congruence","log","miller_rabin","miller_rabin_with_br","modinv","modinv_extgcd_binary","modinv_recurse","moebius","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","multiply","multiply","multiply","multiply","multipoint_evaluation","neg","neg","new","new","new","new","new","new","new","odd","one","one","permutation","pow","pow","pow","pow","powi","prefix","prefix_ref","prime_factors","prime_factors","prime_factors","prime_factors_flatten","primes","primes","primes_lte","primitive_root","product_all","rank","rem","rem","rem","rem","rem","rem_assign","rem_assign","reserve","resize","resized","reversed","row_reduction","shape","shl","shl","shl_assign","shr","shr","shr_assign","solve_system_of_linear_equations","sqrt","sqrt_coefficient","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","taylor_shift","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transform","transform","transform","transform","trial_division","trial_division","trim_tail_zeros","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero","zeros","zeros","BarrettReduction","BinaryRepr","Bounded","Complex","DIGITS","DiscreteSteps","DoubleDouble","E","EPSILON","Error","ExtendedGcd","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","Float32","Float64","INFINITY","Inner","IntBase","LN_10","LN_2","LOG10_E","LOG2_E","MANTISSA_DIGITS","MAX","MAX_10_EXP","MAX_EXP","MIN","MIN_10_EXP","MIN_EXP","MIN_POSITIVE","MInt","MIntBase","MIntConvert","NAN","NEG_INFINITY","One","PI","QuadDouble","RADIX","RangeBoundsExt","Rational","SQRT_2","Saturating","Signed","Signed","TAU","Unsigned","Unsigned","Wrapping","Zero","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atan2","atan2","atan2","atanh","atanh","atanh","backward","backward","backward_checked","backward_delta","backward_delta","backward_delta_checked","backward_delta_checked","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","ceil","ceil","ceil","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp_by_arg","conjugate","copysign","copysign","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_ones","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","count_zeros","cross","default","default","default","default","default","default","default","default","delta","den","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_euclid","div_rem","div_rem","div_rem","dot","end_bound_excluded","end_bound_excluded_checked","end_bound_included","end_bound_included_checked","eq","eq","eq","eq","eq","eq","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","extgcd","extgcd","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward","forward","forward_checked","forward_delta","forward_delta","forward_delta_checked","forward_delta_checked","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_str","from_str","from_str","from_str","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","g","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","gcd","get_mod","get_mod","get_mod","get_mod","get_mod","hash","hash","hash","hash","hypot","hypot","hypot","i","im","index","inner","inner","into","into","into","into","into","into","into","into","into","into","into","into","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_maximum","is_maximum","is_minimum","is_minimum","is_nan","is_nan","is_nan","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_negative","is_normal","is_normal","is_normal","is_one","is_one","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_positive","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_zero","is_zero","is_zero","is_zero","lcm","lcm","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","leading_zeros","ln","ln","ln","ln_1p","ln_1p","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","max","max","max","maximum","maximum","maximum","maximum","maximum","maximum","maximum","min","min","min","minimum","minimum","minimum","minimum","minimum","minimum","minimum","mint_basic","mod_add","mod_div","mod_into","mod_inv","mod_mul","mod_neg","mod_one","mod_pow","mod_pow","mod_sub","mod_zero","modinv","modinv","montgomery","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new_unchecked","new_unchecked","norm","not","not","num","one","one","one","one","one","one","one","one","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","polar","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powf","powf","powf","powi","powi","powi","primitive_nth_root_of_unity","product","product","product","product","re","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","rem_euclid","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","reverse_bits","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","round","round","round","scan","scan","scan","scan","set_maximum","set_maximum","set_minimum","set_minimum","set_mod","set_mod","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signed","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt_coefficient","start_bound_excluded","start_bound_excluded_checked","start_bound_included","start_bound_included_checked","steps_between","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_bits","to_bits","to_bits","to_degrees","to_degrees","to_degrees","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_range","to_range","to_range_checked","to_range_checked","to_range_inclusive","to_range_inclusive","to_range_inclusive_checked","to_range_inclusive_checked","to_string","to_string","to_string","to_string","to_string","to_string","to_string","total_cmp","total_cmp","total_cmp","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","trailing_zeros","transpose","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unit","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","unsigned","x","y","zero","zero","zero","zero","zero","zero","zero","zero","DynMIntU32","DynMIntU64","DynModuloU32","DynModuloU64","MInt1000000007","MInt1000000009","MInt2","MInt998244353","Modulo1000000007","Modulo1000000009","Modulo2","Modulo998244353","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","define_basic_mint32","define_basic_mintbase","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","mod_add","mod_add","mod_add","mod_add","mod_add","mod_add","mod_div","mod_div","mod_div","mod_div","mod_div","mod_div","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_into","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_inv","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_mul","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_neg","mod_one","mod_one","mod_one","mod_one","mod_one","mod_one","mod_pow","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_sub","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","mod_zero","set_mod","set_mod","set_mod","set_mod","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","MInt1811939329","MInt2013265921","MInt2113929217","MInt998244353","Modulo1811939329","Modulo2013265921","Modulo2113929217","Modulo998244353","MontgomeryReduction32","__local_key","__local_key","__local_key","__local_key","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","get_mod","get_mod","get_mod","get_mod","get_mod","into","into","into","into","n1","n1","n1","n1","n1","n2","n2","n2","n2","n2","n3","n3","n3","n3","n3","r","r","r","r","r","r","reduce","reduce","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Bytes","Chars","Read","Scanner","Usize1","Write","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","bytes","chain","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","flush","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_read_vectored","is_write_vectored","iter","iter_print","mscan","new","read","read_all_unchecked","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","scan","scan","scan","scan","scan","scan_vec","take","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write_all","write_all_vectored","write_fmt","write_vectored","Gf2_63x1","Gf2_63x2","Gf2_63x3","KnuthMorrisPratt","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHasher","SuffixArray","Zarray","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","index","index","into","into","into","longest_common_prefix_array","new","new","new","rolling_hash","search","search_all","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Gf2_63x1","Gf2_63x2","Gf2_63x3","Hash","Hashed","HashedRange","HashedSequence","Mersenne61x1","Mersenne61x2","Mersenne61x3","RollingHasher","T","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","concat","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","concat_hash","ensure","ensure","ensure","ensure","ensure","ensure","ensure","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash_range","hash_range","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_sequence","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","hash_substr","init","init","init","init","init","init","init","init_with_time","into","into","into","into","into","into","into","into","into","length","length","longest_common_prefix","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","range","range","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AsTotalOrd","AssociatedValue","ByteWithBase","Bytes","BytesWithBase","CharTools","CharWithBase","Chars","CharsWithBase","Collect","GetDistinctMut","IterPrint","IterScan","LOG_TABLE_SIZE","MarkedIterScan","NotEmptySegment","Output","Output","Output","PartialIgnoredOrd","PartialOrdExt","RandIter","RandRange","RandomSpec","SEED","Scanner","ScannerIter","SerdeByteStr","SimuratedAnnealing","SizedCollect","Splitted","T","TotalOrd","Usize1","Xorshift","__local_key","as_total_ord","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chmax","chmin","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","deserialize","deserialize_from_bytes","deserialize_from_bytes","end_temp","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_alphabetic_number","from_lower_alphabetic_number","from_number","from_upper_alphabetic_number","gen","gen_bool","gen_iter","get","get","get_distinct_mut","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_accepted","is_end","is_maximize","iter_count","iter_print","log_table","minimize","minmax","modify","modify","mscan","mscan","mscan","mscan","mscan","mscan","mscan","mscan","new","new","new","new","new","next","next","now","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rand","rand","rand","rand","rand","rand64","rand_iter","rand_iter","randf","rands","read_all","read_all_unchecked","read_stdin_all","read_stdin_all_unchecked","read_stdin_line","replace","replace","scan","scan","scan","scan_value","serialize","serialize_bytestr","serialize_bytestr","set","set","set_end_temp","set_start_temp","set_time_limit","set_update_interval","shuffle","start_temp","temperture","time","time","time_limit","to_alphabetic_number","to_lower_alphabetic_number","to_number","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_upper_alphabetic_number","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unescape","update_interval","with","with","EulerTourForEdge","EulerTourForRichVertex","EulerTourForVertex","HeavyLightDecomposition","LcaMonoid","LcaMonoidDefaultId","LcaMonoidDispatch","LowestCommonAncestor","MixedTree","One","PathTree","PruferSequence","ReRooting","StarTree","TreeCenter","TreeHasher","Two","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","depth","depth","dp","eidx","ep","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gen_lca","hash","hash","hash_rooted","impl_lcam","into","into","into","into","into","into","into","into","into","into","into","into","into","into","lca","lca","length","length","length","new","new","new","new","new","new","operate","par","par","path_query","path_update","path_vertex_tour","query","query","query_noncom","rand","rand","rand","rand","root","set_depth","set_depth","subtree_query","subtree_update","subtree_vertex_tour","time_seeded","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","vidx","vidx","vidx","vsize","vsize","with_seed"],"q":["competitive","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::algebracompetitive::algorithmcompetitive::combinatorial_optimization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::data_structurecompetitive::geometry","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::graphcompetitive::mathcompetitive::numcompetitive::num::mint_basiccompetitive::num::montgomery","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::string::rolling_hashcompetitive::tools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","competitive::treed":["","algebra","algorithm","","build automaton","","","","","","","","Macro that returns a recursive function that …","data structures","","","","","","graph structures and algorithms","Implement <code>AssociatedValue</code>.","","","","Print expressions with a separator.","mathematical datas","","Automatic memorization for recursive functions.","","","Macro that define closure like macro. Unlike closure, this …","","","","","Prepare useful macros.","Declare random values using <code>RandomSpec</code>.","Return a random value using <code>RandomSpec</code>.","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","string algorithems","","","tree algorithems","commutative group","commutative monoid","","","$+,\\\\times$","","$+$","","","$\\\\forall a,\\\\forall b,\\\\forall c \\\\in T, (a \\\\circ b) \\\\circ c …","","&amp;","","|","","^","","$\\\\forall a,\\\\forall b \\\\in T, a \\\\circ b = b \\\\circ a$","","","","","Find majority(strict) of a sequence.","retain the first element","","associative binary operation and an identity element and …","$\\\\forall a \\\\in T, a \\\\circ a = a$","idempotent monoid","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, \\\\exists b,c \\\\in T, b …","","retain the last element","$(a, b) \\\\circ (c, d) = \\\\lambda x. c \\\\times (a \\\\times x + …","","","binary operaion: $T \\\\circ T \\\\to T$","binary operation to select larger element","","binary operation to select smaller element","associative binary operation and an identity element","","","$\\\\times$","","","","","","","","","","","","associative binary operation","","type of operands: $T$","","","$\\\\exists e \\\\in T, \\\\forall a \\\\in T, e \\\\circ a = a \\\\circ e = …","","","","","","","","","","","","","","","","","","","","","","","","","","","additive operaion: $+$","additive operaion: $+$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","multiplicative right inversed operaion: $-$","multiplicative right inversed operaion: $-$","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","multiplicative inverse: $-$","multiplicative inverse: $-$","$a$ where $a \\\\circ x = e$","","","","","","","","","","multiplicative operaion: $+$","multiplicative operaion: $+$","additive inverse: $-$","additive inverse: $-$","multiplicative identity: $1$","multiplicative identity: $1$","binary operaion: $\\\\circ$","","","","","","","","","","","","","","","","","","","","","","","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","binary exponentiation: $x^n = x\\\\circ\\\\ddots\\\\circ x$","","","","","","","","","","","","","","","","","","","","additive right inversed operaion: $-$","additive right inversed operaion: $-$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","identity element: $e$","","","","","","","","","","","","","","","","","","","","","","additive identity: $0$","additive identity: $0$","","","$\\\\min{1\\\\le i \\\\le n | x^i=a}$","binary search helper","","","","","","","","","","","","","","","","","","","","","$P_0 =$ <code>init</code>, $P_{i+1} = next(P_i)$","binary search for slice","","","","","","","","","","","","","ternary search helper","Basis of xor operation.","","","","k-th add_line(a_k, b_k): a_k &gt;= a_{k+1}","","Return coordinate if element can be consisted by current …","binary search for monotone segment","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","build rho path","rho path that index of rho path","The smallest number of colors needed to color a graph.","","","","","","","","","","","","","","","","","","","","","","","","$$h(U) = \\\\sum_{S\\\\cup T=U}f(S)g(T)$$","$$h(U) = \\\\sum_{S\\\\cap T=U}f(S)g(T)$$","$$h(k) = \\\\sum_{\\\\mathrm{lcm}(n, m)=k}f(n)g(m)$$","$$h(k) = \\\\sum_{\\\\gcd(n, m)=k}f(n)g(m)$$","","","","","","","","","","Return coordinate if element can be consisted by current …","Returns the first element that satisfies a predicate.","$y = \\\\left\\\\lfloor\\\\frac{n}{x}\\\\right\\\\rfloor$","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","get i-th value of rho path","","","Return true if inserted element cannot be consisted by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","middle point of section","Return between two elements if search is not end.","","","$$f(T) = \\\\sum_{S\\\\subset T}h(S)$$","$$f(T) = \\\\sum_{S\\\\supset T}h(S)$$","$$f(m) = \\\\sum_{n \\\\mid m}h(n)$$","$$f(m) = \\\\sum_{m \\\\mid n}h(n)$$","","","","","","","","","","","Create a empty space.","","","","","","","","","","","","","Divide into 3 sections","","","","","","","Returns the first index that satisfies a predicate. if not …","","","","","Return (reduced basis, coordinate). Coordinate means if …","","Returns the last element that satisfies a predicate.","Returns the last index+1 that satisfies a predicate. if …","return: [(elem, length)]","the end condition of ternary search","","","","","","","","","like <code>(left..=right).min_by_key(f)</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","$$g(T) = \\\\sum_{S\\\\subset T}f(S)$$","$$g(T) = \\\\sum_{S\\\\supset T}f(S)$$","$$g(m) = \\\\sum_{n \\\\mid m}f(n)$$","$$g(m) = \\\\sum_{m \\\\mid n}f(n)$$","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","empty sequence is included","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumlated data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DFA to accept Less/Greater than (or equal to) the sequence","","","","","","","","","A map to control intervals that have same values.","A set to control intervals.","rank_i(select_i(k)) = k rank_i(select_i(k) + 1) = k + 1","DFA to accept Less/Greater than (or equal to) the reversed …","","","","","","","","","","","","","","","","","","","","","","","","","","get k-th bit","","get k-th value","Return accumlate of [0, k)","fold [0, k]","fold [0, i] x [0, j]","","","","","fold [0, k)","fold [0, i) x [0, j)","","","f(x) += |x-a|","f(x) += a","","","f(x) += max(0, (a-x))","f(x) += max(0, (x-a))","","","","","","","","build automaton","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clears the map, removing all elements.","Clears the set, removing all elements.","right to left accumulated minimum","left to right accumulated minimum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if the set contains a key.","Returns true if the map contains a value for the key.","","","","","","","","","","","","","","","","","","","","","","","","","","Operate and consume range-value pairs in range.","Operate and consume in range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return fold of [l, r)","","0-indexed [i1, i2) x [j1, j2)","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","","","","Get a left neighboring range of <code>[key, key)</code> if the …","Get a left neighboring range of <code>[key, key)</code> if the …","Returns the range corresponding to the key.","Returns the range-value pair corresponding to the key.","Get a right neighboring range of <code>[key, key)</code> if the …","Get a right neighboring range of <code>[key, key)</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts values into the specified range.","Inserts into the specified range.","","","","Insert values and operate old range-value pairs.","Insert and operate old range.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","argmin_x f(x)","min f(x)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new, empty <code>RangeMap</code>.","Makes a new, empty <code>RangeSet</code>.","Create empty","","","","","","","","","","","","","","","","","","","","","","","","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a left neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Pop a right neighboring range of <code>[key, key)</code> if the …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","Returns the first index that satisfies a accumlative …","","","","","get k-th smallest value in range","get k-th smallest value out of range","","","","","","the number of val in range","the number of 0 in [0, k)","the number of 0 in [0, k)","the number of 1 in [0, k)","the number of 1 in [0, k)","","the number of value less than val in range","the number of valrange in range","","","","","Remove values contained in the range.","Remove items contained in the range.","","","","","","","","","","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","Returns the last index that satisfies a accumlative …","","","","","","index of k-th val","index of k-th 0","index of k-th 0","","index of k-th 1","index of k-th 1","","","","","","","","","f’(x) := f(x-a)","","","","","","","","","","","","","f’(x) := min f(y) (x-a &lt;= y &lt;= x-badd a, a+d, …, a+(k-1)d into [l, l + k)","add a, a+d, …, a+(k-1)d into [l, l + k)","Create valley","","","","","","","","","","","","","","","a–b-vc","a–b-^c","","","a–c–b","c–a–b","a–b–c","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return norm","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Graph represented by a list of edges.","","","","","","","","","","","","","","","","","Static Sparse Graph represented as Compressed Sparse Row.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(p_x = f) | (p_y = g)","","cost is monge: cost(v1-1, v2) + cost(v1, v2-1) &gt;= cost(v1, …","x1 &gt;= v1 &amp;&amp; x2 &lt; v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","x1 &lt; v1 &amp;&amp; x2 &gt;= v2 (0 &lt; v1 &lt; nv1, 0 &lt; v2 &lt; nv2)","","","","","","","","","","","","","","","","","Return a slice of adjacency vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return the number of edges.","Return the number of edges.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f: |g, root, ord: [vertex, parent]| {}","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct graph from edges.","Construct graph from edges.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Return (flow, cost).","Return (flow, cost).","","","tarjan","","","","","","","","","","","","","","","","","","","","","","","","Construct empty graph.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tree center","tree center","","","","","","","(order, parents)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over graph vertices.","","Return an iterator over graph vertices.","","Return the number of vertices.","Return the number of vertices.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","a^x ≡ b (mod n)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","n! = a * p^e, c==1","Sum of Floor of Linear mod 2^64","Sum of Floor of Linear mod 2^64","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","binary gcd","","","[(hcn, #divisor)]","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Lagrange interpolation with (i, f(i)) (0 &lt;= i &lt;= n)","","","","","","","","","return: (y,z)","","","","","0 &lt; a &lt; p, gcd(a, p) == 1, p is prime &gt; 2","","g(d) = Sigma mu(d) * f(n/d)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","list primes less than or equal to <code>max_n</code> by segmented sieve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f(x) &lt;- f(x + a)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for operations of integer in binary representation.","Trait for max/min bounds","","","","","","","","extended_gcd(a,b): ax + by = g = gcd(a,b)","","","","","","","","","","","","","","","Trait for basic primitive integer operations.","","","","","","","","","","","","","","","","","","","","ref: https://na-inet.jp/na/qd_ja.pdf","","","","","Wrapper type of arithmetic <code>saturating_*</code> operations.","Trait for signed integer operations.","","","Trait for unsigned integer operations.","","Wrapper type of arithmetic <code>wrapping_*</code> operationseturns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gcd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","m is prime, n = 2^32","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","m","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","n^1 mod m","","","","","n^2 mod m","","","","","n^3 mod m","","","","","(-m)^{-1} mod n","(-m)^{-1} mod n","","","","","n^{-1}x = (x + (xr mod n)m) / n","n^{-1}x = (x + (xr mod n)m) / n","","","","","","","","","","","","","","","The <code>Read</code> trait allows for reading bytes from a source.","","","A trait for objects which are byte-oriented sinks.","","","","","","","","","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","","","","","","","","","Flush this output stream, ensuring that all intermediately …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","Print expressions with a separator.","","","Pull some bytes from this source into the specified …","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","","","","","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait for a modifiable value associated with a type.","","","","","","","","","","","","","","Left-close Right-open No Empty Segment","","","","","","","","Trait for spec of generating random value.","","","","","","","","Type of value.","implement Ord by PartialOrd","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","map <code>0..=25</code> to <code>&#39;a&#39;..=&#39;z&#39;</code>","map <code>0..=9</code> to <code>&#39;0&#39;..=&#39;9&#39;</code>","map <code>0..=25</code> to <code>&#39;A&#39;..=&#39;Z&#39;</code>","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return a random value.","","","","","","Return an iterator that generates random values.","Return an iterator that generates random values.","","","","","","","","","","","","<code>scan!(scanner, $($pat $(: ELEMENT)?),*)</code>","<code>scan_value!(scanner, ELEMENT)</code>ELEMENT :=","","","","","","","","","","","","","","","","map (<code>&#39;A&#39;..=&#39;Z&#39;</code> or <code>&#39;a&#39;..=&#39;z&#39;</code>) to <code>0..=25</code>","map <code>&#39;a&#39;..=&#39;z&#39;</code> to <code>0..=25</code>","map <code>&#39;0&#39;..=&#39;9&#39;</code> to <code>0..=9</code>","","","","","","","","","","","","","map <code>&#39;A&#39;..=&#39;Z&#39;</code> to <code>0..=25</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generate Tree with Prüfer sequence","dynamic programming on all-rooted trees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","dp[v]: result of v-rooted tree","","ep[e]: result of e-subtree, if e &gt;= n then …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,253,0,254,0,253,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,0,0,255,256,0,0,0,0,0,0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,257,254,0,0,253,258,259,260,261,262,263,264,265,4,253,258,259,260,261,262,263,264,265,4,253,253,253,253,253,253,254,254,2,253,253,253,253,253,253,266,267,268,258,259,260,261,262,263,264,265,2,4,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,255,256,268,258,259,260,261,262,263,264,265,2,4,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,255,256,2,2,2,4,2,4,0,285,285,2,4,2,4,268,258,259,260,261,262,263,264,265,2,4,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,255,256,268,258,259,260,261,262,263,264,265,2,4,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,255,256,285,285,286,273,274,275,278,280,283,287,287,0,254,254,288,288,254,254,257,2,4,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,255,256,257,257,101,101,257,257,286,286,273,274,287,287,4,253,258,259,260,261,262,263,264,265,4,288,288,4,2,4,253,253,268,258,259,260,261,262,263,264,265,2,4,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,255,256,268,258,259,260,261,262,263,264,265,2,4,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,255,256,268,258,259,260,261,262,263,264,265,2,4,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,255,256,287,2,4,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,255,256,289,254,254,290,291,0,0,0,0,0,0,0,0,0,0,0,0,292,293,294,291,0,0,0,0,0,294,0,0,0,0,0,0,0,292,294,293,0,0,0,291,0,0,0,0,0,13,290,15,0,36,37,34,38,295,296,29,30,33,21,22,23,20,13,24,25,26,27,18,39,15,28,36,37,34,38,295,296,29,30,33,21,22,23,20,13,24,25,26,27,18,39,15,28,297,297,291,18,18,20,21,22,23,20,13,24,25,26,27,15,28,21,22,23,20,13,24,25,26,27,15,28,21,295,296,29,30,21,13,15,21,21,26,27,28,18,15,298,0,33,21,22,23,20,13,24,25,26,27,18,15,28,34,291,291,299,299,299,299,36,37,34,38,295,296,29,30,33,21,22,23,20,13,24,25,26,27,18,39,15,28,20,15,18,18,20,290,15,36,37,34,38,295,296,29,30,33,21,22,23,20,13,24,25,26,27,18,39,15,28,22,23,21,21,20,297,297,300,301,290,290,295,296,29,30,20,36,37,38,33,13,24,26,27,39,15,28,29,30,22,23,299,294,37,39,299,294,37,300,292,293,36,38,21,0,298,299,299,24,13,15,290,298,298,0,300,0,33,24,25,24,291,291,21,0,21,22,23,20,13,24,25,26,27,15,28,36,37,34,38,295,296,29,30,33,21,22,23,20,13,24,25,26,27,18,39,15,28,36,37,34,38,295,296,29,30,33,21,22,23,20,13,24,25,26,27,18,39,15,28,36,37,34,38,295,296,29,30,33,21,22,23,20,13,24,25,26,27,18,39,15,28,34,291,291,295,296,29,30,0,0,0,0,0,0,40,41,42,43,44,45,40,41,42,43,44,45,40,41,42,43,44,45,40,41,42,43,44,45,42,45,40,41,45,40,41,42,45,40,41,40,41,40,40,41,42,43,44,45,40,41,42,43,44,45,40,41,40,41,42,45,40,41,40,41,40,40,41,42,43,44,45,44,0,0,0,0,45,40,40,41,42,43,44,45,40,41,42,43,40,41,42,43,44,45,40,41,42,43,44,45,40,41,42,43,44,45,40,41,42,43,44,45,0,0,302,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,302,0,0,0,0,0,0,0,0,302,47,48,49,50,51,52,53,54,55,56,103,57,58,59,60,61,62,62,62,62,60,61,63,64,65,65,63,64,65,65,66,68,69,303,71,63,72,0,73,103,57,74,74,74,74,74,74,74,74,74,59,60,61,62,79,80,102,81,82,66,72,83,84,73,90,91,68,71,85,47,48,49,50,51,52,53,54,55,56,57,74,86,87,63,64,88,76,77,78,65,75,69,58,59,60,61,62,79,80,102,81,82,66,72,83,84,73,90,91,68,71,85,47,48,49,50,51,52,53,54,55,56,57,74,86,87,63,64,88,76,77,78,65,75,69,58,75,76,63,64,77,78,65,65,60,61,62,79,80,81,82,72,83,84,73,68,85,47,48,49,50,51,52,53,54,55,56,57,74,86,87,63,64,88,76,77,78,65,75,69,58,60,61,62,79,80,81,82,72,83,84,73,68,85,47,48,49,50,51,52,53,54,55,56,57,74,86,87,63,64,88,76,77,78,65,75,69,58,74,78,77,74,74,76,303,71,62,79,84,73,90,91,71,55,56,74,63,64,88,77,78,65,302,302,85,63,77,78,90,91,71,75,74,90,63,63,64,64,77,78,66,68,75,69,75,66,66,59,60,61,62,79,80,81,82,72,83,84,73,90,91,68,71,85,47,48,49,50,51,52,53,54,55,56,57,74,86,87,63,64,88,76,77,78,65,75,69,58,59,60,61,79,79,79,79,80,81,82,72,83,90,85,81,82,72,83,84,73,80,59,60,61,62,79,80,102,81,82,66,72,83,84,73,90,91,68,71,85,47,48,49,50,51,52,53,54,55,56,57,74,86,87,63,64,88,76,77,78,65,75,69,58,59,57,86,87,63,63,64,64,77,78,60,81,72,73,60,61,81,82,72,83,90,91,74,63,64,77,68,91,91,77,78,78,77,77,78,68,53,54,53,54,74,80,80,304,86,87,304,86,87,302,47,48,49,50,51,52,53,54,55,56,90,91,88,77,78,75,75,75,77,78,59,60,61,62,79,80,102,81,82,66,72,83,84,73,90,91,68,71,85,47,48,49,50,51,52,53,54,55,56,57,74,86,87,63,64,88,76,77,78,65,75,69,58,84,73,90,91,63,64,68,91,63,64,77,78,77,63,64,77,84,84,73,90,91,63,64,53,54,53,54,60,85,66,68,69,65,65,90,60,61,62,62,62,62,79,79,79,79,80,102,81,82,66,72,83,84,73,90,91,68,71,85,50,51,52,55,56,74,63,64,88,76,77,78,65,75,69,58,302,47,48,49,50,51,52,53,54,55,56,75,75,74,74,74,74,84,73,73,77,78,77,78,81,82,72,83,90,84,73,73,58,58,88,102,91,64,91,58,103,103,103,103,57,58,58,90,91,63,64,77,78,91,63,64,90,66,68,69,90,90,81,82,72,83,90,85,85,66,69,58,103,103,57,103,103,57,60,61,81,82,72,83,74,65,74,74,74,74,74,74,304,66,68,86,87,69,65,85,85,305,305,305,305,60,61,62,79,80,81,82,72,83,84,73,68,85,47,48,49,50,51,52,53,54,55,56,57,74,86,87,63,64,88,76,77,78,65,75,69,58,59,60,61,62,79,80,102,81,82,66,72,83,84,73,90,91,68,71,85,47,48,49,50,51,52,53,54,55,56,57,74,86,87,63,64,88,76,77,78,65,75,69,58,59,60,61,62,79,80,102,81,82,66,72,83,84,73,90,91,68,71,85,47,48,49,50,51,52,53,54,55,56,57,74,86,87,63,64,88,76,77,78,65,75,69,58,59,60,61,62,79,80,102,81,82,66,72,83,84,73,90,91,68,71,85,47,48,49,50,51,52,53,54,55,56,57,74,86,87,63,64,88,76,77,78,65,75,69,58,66,68,69,60,61,62,62,62,62,79,79,79,79,81,82,72,83,90,76,76,65,63,64,77,77,90,91,71,63,75,0,0,0,0,0,111,111,0,0,111,111,111,306,306,114,111,115,112,113,114,111,115,112,113,111,112,113,111,114,111,115,112,113,114,111,115,112,113,0,114,111,115,0,0,115,113,114,112,113,113,112,113,114,111,115,112,113,114,111,115,112,113,114,111,115,112,113,111,113,113,114,111,115,112,113,112,113,112,113,115,112,113,114,111,112,113,112,113,114,111,115,112,113,114,111,115,112,113,114,111,115,112,113,114,111,115,112,113,307,308,309,307,308,309,310,311,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,313,0,314,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,316,0,0,0,0,0,0,0,317,318,0,0,0,319,0,0,0,0,320,316,321,322,323,117,118,118,118,118,119,120,121,122,123,117,117,120,124,124,307,125,126,124,124,127,127,308,127,309,125,126,120,154,310,130,131,311,125,126,124,124,127,324,324,324,324,324,324,324,324,127,147,125,126,148,151,152,154,321,322,323,119,149,150,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,147,125,126,148,151,152,154,321,322,323,119,149,150,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,154,119,122,123,133,134,127,127,133,120,121,135,136,137,130,131,124,122,133,123,118,138,139,140,128,127,141,117,120,121,135,136,137,130,131,124,122,133,123,118,138,139,140,128,127,141,117,136,137,130,131,138,139,140,128,141,315,127,325,138,139,140,320,125,126,124,127,120,118,128,127,127,324,324,324,324,0,314,135,127,135,127,313,137,131,128,127,315,127,315,127,315,315,136,137,130,131,138,139,140,128,326,127,120,327,127,127,122,123,124,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,127,147,125,126,148,151,152,154,321,322,323,119,149,150,120,121,135,136,136,136,137,137,130,130,131,131,124,122,133,123,134,118,138,139,140,128,127,141,117,121,135,127,141,122,123,133,134,120,141,136,137,130,131,138,139,140,128,124,121,128,135,141,316,321,322,323,147,125,126,148,151,152,154,321,322,323,119,149,150,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,151,152,121,154,130,131,133,133,121,121,134,134,133,121,135,135,121,124,147,148,149,150,316,321,322,323,147,125,126,148,151,152,154,119,149,150,120,121,135,124,122,123,118,128,141,117,124,124,119,151,152,154,136,137,130,131,138,139,140,128,117,117,141,118,316,321,322,323,127,128,144,153,132,127,127,127,120,121,135,136,137,130,131,124,122,133,123,118,138,139,140,128,127,141,117,127,153,127,153,127,153,127,153,127,127,153,127,147,125,126,148,151,152,154,321,322,323,119,149,150,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,147,125,126,148,151,152,154,321,322,323,119,149,150,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,117,147,125,126,148,151,152,154,321,322,323,119,149,150,120,121,135,136,137,130,131,124,122,133,123,134,118,138,139,140,128,127,141,117,124,319,125,126,120,135,124,127,127,135,127,318,136,137,130,131,128,320,125,126,124,127,320,125,126,124,127,320,320,328,127,120,329,125,125,126,124,127,127,324,324,153,127,124,118,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0,0,330,158,158,158,158,158,158,158,158,159,160,158,158,158,158,160,0,0,331,332,166,167,168,158,159,160,169,170,171,331,332,166,167,168,158,159,160,169,170,171,158,0,166,167,168,158,159,160,169,170,171,166,167,168,158,159,160,169,170,171,166,167,330,330,170,171,158,158,158,159,160,167,158,160,170,159,158,0,0,158,158,158,158,158,158,158,158,160,158,158,158,158,158,0,170,171,158,159,160,0,158,158,158,0,0,0,159,166,167,0,0,0,166,167,168,158,159,160,169,170,171,331,332,166,167,168,158,158,158,158,159,160,169,170,171,158,158,159,160,0,0,169,0,166,158,159,159,160,158,159,159,160,158,331,332,166,167,168,158,159,160,169,170,171,158,166,168,158,166,159,330,331,332,332,170,171,158,158,158,158,0,166,0,0,330,331,332,332,158,160,0,158,0,0,0,0,0,0,158,158,158,158,158,158,158,158,159,160,158,158,158,158,330,331,332,332,158,158,158,166,167,168,159,169,170,171,158,158,160,166,168,158,159,160,168,158,158,0,170,171,0,170,171,170,0,158,159,158,158,158,158,160,158,158,170,158,158,158,159,159,158,158,158,158,158,158,159,158,333,158,158,158,158,158,158,158,158,159,160,158,158,158,158,158,166,167,168,158,159,160,169,170,171,330,331,332,332,170,171,158,158,331,332,166,167,168,158,159,160,169,170,171,331,332,166,167,168,158,159,160,169,170,171,331,332,166,167,168,158,159,160,169,170,171,158,160,158,159,0,0,0,0,334,0,0,334,334,335,0,334,334,334,334,334,334,334,334,334,0,0,0,334,19,0,334,334,334,334,334,334,334,334,334,334,334,334,0,0,0,334,334,0,334,0,334,0,0,334,0,0,336,334,0,337,0,0,334,337,110,179,180,181,182,182,182,182,182,182,187,187,187,187,187,187,188,189,336,336,334,180,181,334,180,181,172,172,172,172,110,110,110,110,110,110,110,110,179,179,180,181,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,188,188,189,172,172,110,110,110,110,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,189,110,334,180,181,334,180,181,334,180,181,334,180,181,334,180,181,338,338,338,338,338,338,338,182,187,182,187,182,187,182,187,182,187,182,187,193,172,165,110,179,180,181,182,187,188,189,193,172,165,110,179,180,181,182,187,188,189,334,180,181,334,180,181,334,180,181,172,165,110,179,180,181,182,187,188,189,172,165,110,179,180,181,182,187,188,189,110,179,180,181,182,187,189,110,110,334,180,181,334,180,181,334,180,181,339,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,339,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,110,172,110,179,180,181,182,187,188,338,189,172,172,172,172,165,165,165,110,110,110,110,110,110,110,110,179,180,181,182,187,187,187,187,187,187,187,187,187,187,187,187,188,189,172,172,110,110,110,110,182,187,187,187,187,187,187,187,187,187,187,187,187,189,334,335,180,181,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,165,165,165,110,340,340,340,340,172,110,179,180,181,182,187,188,189,334,180,181,334,180,181,334,180,181,336,336,334,180,181,172,172,165,110,179,179,180,180,181,181,182,182,187,187,188,188,189,338,338,338,338,338,338,338,334,180,181,341,193,172,172,172,172,172,172,172,172,172,172,172,172,172,165,110,179,179,180,180,181,181,182,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,187,188,188,189,334,180,181,172,179,180,181,182,187,188,335,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,193,336,182,182,182,182,182,182,187,187,187,187,187,187,19,172,165,165,165,172,110,182,187,334,180,181,110,110,188,172,189,341,193,172,165,110,179,180,181,182,187,188,189,172,334,180,181,334,180,181,342,342,342,342,334,180,181,337,182,182,182,182,182,182,187,187,187,187,187,187,334,180,181,177,177,337,182,182,182,182,182,182,187,187,187,187,187,187,334,180,181,334,180,181,161,161,179,188,336,336,339,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,334,180,181,334,180,181,334,180,181,334,180,181,334,180,181,334,180,181,342,179,180,181,182,187,189,334,180,181,342,179,180,181,182,187,189,0,19,19,341,19,19,19,19,19,19,19,19,336,336,0,172,172,172,172,110,110,110,110,110,110,110,110,179,179,180,181,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,188,188,189,334,180,181,172,172,110,110,110,110,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,189,172,172,110,110,179,180,181,182,182,182,182,182,182,187,187,187,187,187,187,188,189,172,165,165,165,110,189,172,189,110,182,187,189,177,172,110,180,181,182,187,189,110,179,180,181,182,187,188,189,110,335,172,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,334,180,181,334,180,181,110,172,172,110,110,110,334,180,181,165,165,165,180,181,182,187,187,187,187,187,187,187,187,187,187,187,187,182,187,187,187,187,187,187,187,187,187,187,187,187,334,335,180,181,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,339,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,339,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,339,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,334,180,181,172,110,182,187,342,342,342,342,172,172,177,177,161,161,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,336,182,182,182,182,182,182,187,187,187,187,187,187,334,337,180,181,182,182,182,182,182,182,187,187,187,187,187,187,334,180,181,334,180,181,334,180,181,334,172,179,180,181,188,172,340,340,340,340,338,172,172,172,172,110,110,110,110,110,110,110,110,179,180,181,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,188,189,172,172,110,110,110,110,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,189,172,172,110,110,334,180,181,334,180,181,334,180,181,334,180,181,172,165,110,179,180,181,182,187,188,189,334,180,181,340,340,340,340,340,340,340,340,172,179,180,181,182,187,188,334,180,181,339,182,182,182,182,182,182,182,182,182,182,182,182,187,187,187,187,187,187,187,187,187,187,187,187,110,334,180,181,193,172,165,110,179,180,181,182,187,188,189,193,172,165,110,179,180,181,182,187,188,189,193,172,165,110,179,180,181,182,187,188,189,110,337,182,182,182,182,182,182,187,187,187,187,187,187,193,193,161,172,110,180,181,182,187,189,0,0,0,0,0,0,0,0,0,0,0,0,343,344,345,346,347,348,343,344,345,346,347,348,0,0,343,343,343,343,343,343,343,343,343,343,343,343,343,344,344,344,344,344,344,344,344,344,345,345,345,345,345,345,345,345,345,346,346,346,346,346,346,346,346,346,347,347,347,347,347,347,347,347,347,348,348,348,348,348,348,348,343,344,345,346,347,348,343,343,343,343,343,343,343,343,343,343,343,343,343,344,344,344,344,344,344,344,344,344,345,345,345,345,345,345,345,345,345,346,346,346,346,346,346,346,346,346,347,347,347,347,347,347,347,347,347,348,348,348,348,348,348,348,343,344,345,346,347,348,343,344,345,346,347,348,343,343,343,343,343,343,343,343,343,343,343,343,344,344,344,344,344,344,344,344,345,345,345,345,345,345,345,345,346,346,346,346,346,346,346,346,347,347,347,347,347,347,347,347,348,348,348,348,348,348,343,344,345,346,347,348,343,344,345,346,347,348,343,344,345,346,347,348,343,344,345,346,347,348,343,343,344,345,346,347,348,343,344,345,346,347,348,349,350,347,348,343,344,345,346,347,348,343,344,345,346,347,348,343,344,345,346,347,348,0,0,0,0,0,0,0,0,0,351,352,353,354,351,352,353,354,351,352,353,354,351,352,353,354,355,351,352,353,354,351,352,353,354,355,351,352,353,354,355,351,352,353,354,355,351,352,353,354,355,355,351,352,353,354,355,355,351,352,353,354,351,352,353,354,351,352,353,354,0,0,0,0,0,0,201,202,203,204,201,202,203,204,207,356,207,207,201,202,203,204,201,202,203,204,356,201,202,203,204,201,202,203,204,201,202,203,204,207,356,201,0,201,201,207,0,207,207,207,207,207,207,201,202,203,204,0,201,207,201,202,203,204,201,202,203,204,201,202,203,204,201,202,203,204,356,356,356,356,356,0,0,0,0,0,0,0,0,0,0,212,213,214,212,213,214,212,213,214,212,213,214,212,213,214,212,213,214,213,214,212,213,214,213,212,213,214,0,214,212,212,213,214,212,213,214,212,213,214,212,213,214,0,0,0,357,0,0,0,0,0,0,0,357,223,215,216,217,218,219,220,221,222,223,215,216,217,218,219,220,221,222,215,216,217,218,219,220,221,222,215,216,217,218,219,220,221,222,215,217,218,219,220,221,222,216,357,217,218,219,220,221,222,357,217,218,219,220,221,222,215,216,217,218,219,220,221,222,223,215,216,217,218,219,220,221,222,223,215,216,217,218,219,220,221,222,215,216,217,218,219,220,221,222,223,215,357,217,218,219,220,221,222,357,217,218,219,220,221,222,357,217,218,219,220,221,222,357,223,215,216,217,218,219,220,221,222,223,215,215,215,217,218,219,220,221,222,223,215,215,216,217,218,219,220,221,222,223,215,216,217,218,219,220,221,222,223,215,216,217,218,219,220,221,222,223,215,216,217,218,219,220,221,222,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0,146,358,359,0,0,0,0,0,236,0,0,0,0,0,0,360,0,0,0,360,361,206,236,226,224,238,227,228,229,230,231,232,233,234,235,225,206,236,226,224,238,227,228,229,230,231,232,233,234,235,225,362,362,226,224,227,228,229,230,231,232,233,234,235,225,226,224,227,228,229,230,231,232,233,234,235,225,226,227,228,225,236,226,224,225,363,363,363,236,226,227,228,225,236,226,224,238,227,228,229,230,231,232,233,234,235,225,206,236,226,224,238,227,228,229,230,231,232,233,234,235,225,364,364,364,364,224,224,224,360,360,359,227,228,225,206,236,226,224,238,227,228,229,230,231,232,233,234,235,225,206,238,236,236,236,236,365,236,236,362,360,360,358,229,230,231,232,233,235,235,236,224,228,233,235,206,238,236,226,227,228,225,237,224,227,228,236,224,237,237,224,224,0,0,0,0,0,360,360,146,234,0,0,363,363,363,360,360,236,236,236,236,224,236,236,224,236,236,364,364,364,226,224,227,228,229,230,231,232,233,234,235,225,364,206,236,226,224,238,227,228,229,230,231,232,233,234,235,225,206,236,226,224,238,227,228,229,230,231,232,233,234,235,225,206,236,226,224,238,227,228,229,230,231,232,233,234,235,225,0,236,360,360,0,0,0,0,0,0,0,0,0,157,0,0,0,0,0,0,157,249,250,251,252,240,241,242,244,366,245,248,246,157,247,249,250,251,252,240,241,242,244,366,245,248,246,157,247,240,241,242,244,245,246,157,240,241,242,244,245,246,157,247,243,366,246,240,246,157,240,241,242,244,245,246,157,247,249,250,251,252,240,241,242,244,366,245,248,246,157,247,242,157,247,247,0,249,250,251,252,240,241,242,244,366,245,248,246,157,247,244,248,240,241,242,240,241,242,248,246,247,245,240,248,241,241,241,242,248,248,249,250,251,252,242,243,366,241,241,241,247,240,241,242,244,245,246,157,249,250,251,252,240,241,242,244,366,245,248,246,157,247,249,250,251,252,240,241,242,244,366,245,248,246,157,247,249,250,251,252,240,241,242,244,366,245,248,246,157,247,248,241,242,248,243,366,247],"fp":[[4,"Option"],[3,"RangeChminChmaxAdd"],[8,"Clone"],[3,"RangeSumRangeChminChmaxAdd"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"ConvexHullTrick"],[15,"i64"],[3,"XorBasis"],[15,"u64"],[3,"Vec"],[3,"RhoPath"],[8,"MIntBase"],[3,"IndependentSubSet"],[3,"BitDp"],[3,"Subsets"],[3,"Combinations"],[3,"EsperEstimator"],[3,"EsperSolver"],[3,"ImpartialGameAnalyzer"],[3,"PartisanGameAnalyzer"],[3,"ZeroSumGameAnalyzer"],[3,"DivisorTransform"],[3,"MultipleTransform"],[8,"Iterator"],[8,"FnMut"],[3,"BabyStepGiantStep"],[3,"SqrtDecompositionBuckets"],[8,"IntoIterator"],[3,"ImpartialGamer"],[3,"PartisanGamer"],[3,"ZeroSumGamer"],[3,"SlideMinimum"],[3,"KnapsackPloblemSmallWeight"],[3,"KnapsackPloblemSmallValue"],[3,"ZeroOneKnapsackProblemSmallItems"],[3,"ZeroOneKnapsackPloblemBranchAndBound"],[3,"LexicographicalSubsequence"],[3,"LongestIncreasingSubsequence"],[8,"Fn"],[3,"IntersectionAutomaton"],[3,"UnionAutomaton"],[3,"ProductAutomaton"],[3,"FunctionalAutomaton"],[3,"MappingAutomaton"],[3,"AlphabetMappingAutomaton"],[3,"LexicographicalAutomaton"],[3,"RevLexicographicalAutomaton"],[3,"MonoidalAutomaton"],[3,"AlwaysAcceptingAutomaton"],[3,"BitVector"],[3,"WaveletMatrix"],[3,"Accumulate"],[3,"BinaryIndexedTree"],[3,"BinaryIndexedTree2D"],[3,"CompressedBinaryIndexedTree"],[3,"HashCounter"],[3,"BTreeCounter"],[3,"SlopeTrick"],[3,"MergingUnionFind"],[3,"HashMap"],[3,"WeightedUnionFind"],[3,"UnionFind"],[3,"NonNull"],[3,"MemoryPool"],[3,"SegmentTree"],[3,"DequeAggregation"],[3,"BitSet"],[3,"Trie"],[3,"RangeArithmeticProgressionAdd"],[3,"RangeMap"],[3,"RangeSet"],[3,"CompressedSegmentTree"],[3,"DisjointSparseTable"],[3,"LazySegmentTree"],[3,"LazySegmentTreeMap"],[3,"SegmentTreeMap"],[3,"QueueAggregation"],[3,"Automatondp"],[3,"VecCompress"],[3,"HashCompress"],[3,"LineSet"],[4,"Ordering"],[3,"SplaySequence"],[3,"SplayMap"],[3,"Drain"],[3,"Ref"],[3,"RefMut"],[8,"Group"],[3,"Iter"],[3,"Iter"],[3,"Keys"],[3,"IterMut"],[3,"Keys"],[8,"Monoid"],[3,"Static2DTree"],[8,"RankSelectDictionaries"],[3,"Range"],[3,"Range"],[15,"isize"],[3,"Values"],[3,"Values"],[3,"ValuesMut"],[3,"Complex"],[4,"Ccw"],[3,"Line"],[3,"LineSegment"],[3,"Approx"],[3,"Circle"],[15,"f64"],[3,"TwoSatisfiability"],[3,"ProjectSelectionProblem"],[3,"SparseGraphBuilder"],[3,"AdjacencyListGraph"],[3,"BipartiteMatching"],[3,"DinicBuilder"],[3,"PrimalDualBuilder"],[3,"GridGraph"],[3,"UsizeGraph"],[3,"ClosureGraph"],[3,"SparseGraph"],[3,"Adjacency"],[3,"Iter"],[3,"VIndexWithValue"],[3,"VIndexWithEIndexValue"],[6,"BidirectionalSparseGraph"],[3,"Dinic"],[3,"PrimalDual"],[3,"EdgeListGraph"],[3,"VIndex"],[3,"VIndexWithEIndex"],[4,"DirectedEdge"],[4,"UndirectedEdge"],[4,"BidirectionalEdge"],[3,"StronglyConnectedComponent"],[8,"Ord"],[15,"never"],[6,"DirectedSparseGraph"],[8,"Hash"],[8,"IterScan"],[3,"AdjacencyListGraphScanner"],[3,"EdgeListGraphScanner"],[3,"SparseGraphScanner"],[3,"TreeGraphScanner"],[3,"AdjacencyViewIterFromEindex"],[3,"AdjacencyViewIterFromValue"],[6,"UndirectedSparseGraph"],[3,"LowLink"],[8,"PartialOrd"],[3,"String"],[4,"TreeCenter"],[3,"FormalPowerSeries"],[3,"Matrix"],[3,"Polynomial"],[8,"Zero"],[8,"Add"],[8,"Mul"],[8,"MulAssign"],[3,"BarrettReduction"],[3,"MemorizedFactorial"],[3,"SmallModMemorizedFactorial"],[3,"PowPrec"],[3,"EulerPhiTable"],[3,"PrimeList"],[3,"PrimeTable"],[3,"MInt"],[15,"u32"],[8,"Default"],[15,"u128"],[3,"IterMut"],[8,"One"],[8,"Copy"],[3,"DoubleDouble"],[3,"Float32"],[3,"Float64"],[3,"Saturating"],[15,"i128"],[15,"i32"],[15,"i16"],[15,"i8"],[3,"Wrapping"],[3,"QuadDouble"],[3,"Rational"],[15,"u8"],[15,"u16"],[4,"FpCategory"],[3,"ExtendedGcd"],[3,"Error"],[15,"f32"],[15,"str"],[3,"RangeInclusive"],[3,"LocalKey"],[3,"Bytes"],[3,"Chain"],[3,"Scanner"],[4,"Usize1"],[4,"Chars"],[4,"Bytes"],[3,"Error"],[3,"ScannerIter"],[8,"Read"],[3,"BorrowedCursor"],[3,"Take"],[3,"Arguments"],[8,"Eq"],[3,"KnuthMorrisPratt"],[3,"SuffixArray"],[3,"Zarray"],[3,"HashedRange"],[3,"Hashed"],[4,"Mersenne61x1"],[4,"Mersenne61x2"],[4,"Mersenne61x3"],[4,"Gf2_63x1"],[4,"Gf2_63x2"],[4,"Gf2_63x3"],[3,"HashedSequence"],[3,"Xorshift"],[3,"TotalOrd"],[3,"PartialIgnoredOrd"],[3,"NotEmptySegment"],[3,"RandRange"],[3,"CharWithBase"],[3,"CharsWithBase"],[3,"ByteWithBase"],[3,"BytesWithBase"],[3,"Collect"],[3,"SizedCollect"],[3,"Splitted"],[3,"SimuratedAnnealing"],[8,"RandomSpec"],[3,"RandIter"],[15,"char"],[3,"EulerTourForEdge"],[3,"EulerTourForVertex"],[3,"EulerTourForRichVertex"],[8,"LcaMonoidDispatch"],[3,"LowestCommonAncestor"],[3,"LcaMonoid"],[3,"ReRooting"],[3,"TreeHasher"],[3,"HeavyLightDecomposition"],[3,"PruferSequence"],[3,"PathTree"],[3,"StarTree"],[3,"MixedTree"],[8,"MonoidAction"],[8,"SemiRing"],[4,"Gf2_63"],[4,"Mersenne61"],[8,"Magma"],[3,"EmptyLazy"],[3,"EmptyAction"],[3,"RangeSumRangeAdd"],[3,"RangeSumRangeLinear"],[3,"RangeSumRangeUpdate"],[3,"RangeMaxRangeUpdate"],[3,"RangeMinRangeUpdate"],[3,"RangeMinRangeAdd"],[8,"BitAndIdentity"],[8,"BitOrIdentity"],[3,"AddMulOperation"],[3,"MaxOperation"],[3,"MinOperation"],[3,"FirstOperation"],[3,"LastOperation"],[3,"AdditiveOperation"],[3,"MultiplicativeOperation"],[3,"LinearOperation"],[3,"BitAndOperation"],[3,"BitOrOperation"],[3,"BitXorOperation"],[3,"CountingOperation"],[3,"ReverseOperation"],[3,"Top2Operation"],[3,"Bottom2Operation"],[4,"PermutationOperation"],[3,"FindMajorityOperation"],[8,"Field"],[8,"Invertible"],[8,"Unital"],[8,"Ring"],[8,"BitXorIdentity"],[8,"MoSolver"],[8,"SqrtDecomposition"],[8,"ImpartialGame"],[8,"ZeroSumGame"],[8,"PartisanGame"],[3,"SubsetTransform"],[3,"SupersetTransform"],[8,"SliceSortExt"],[8,"SliceBisectExt"],[8,"SliceCombinationsExt"],[8,"Trisect"],[8,"Bisect"],[8,"Automaton"],[8,"Allocator"],[8,"Compressor"],[8,"ToDigitSequence"],[8,"ApproxOrd"],[8,"Adjacencies"],[8,"AdjacenciesWithEindex"],[8,"AdjacenciesWithValue"],[8,"AdjacencyIndexWithValue"],[8,"AdjacencyView"],[8,"EIndexedGraph"],[8,"AdjacencyIndexWithEindex"],[8,"Edges"],[8,"EdgeMap"],[8,"ShortestPathSemiRing"],[8,"GraphBase"],[8,"AdjacencyIndex"],[8,"Vertices"],[8,"VertexMap"],[3,"StandardSp"],[3,"OptionSp"],[3,"PathFoldingSp"],[8,"ShortestPathExt"],[8,"SparseGraphConstruction"],[8,"EdgeSize"],[8,"EdgeView"],[8,"VertexSize"],[8,"VertexView"],[8,"ConvolveSteps"],[4,"ConvolveRealFft"],[3,"Convolve"],[8,"FormalPowerSeriesCoefficientSqrt"],[8,"Float"],[8,"IntBase"],[8,"Unsigned"],[8,"Signed"],[8,"DiscreteSteps"],[8,"BinaryRepr"],[8,"RangeBoundsExt"],[8,"MIntConvert"],[8,"Bounded"],[3,"Modulo2"],[4,"Modulo998244353"],[4,"Modulo1000000007"],[4,"Modulo1000000009"],[4,"DynModuloU32"],[4,"DynModuloU64"],[6,"DynMIntU32"],[6,"DynMIntU64"],[4,"Modulo998244353"],[4,"Modulo2113929217"],[4,"Modulo1811939329"],[4,"Modulo2013265921"],[8,"MontgomeryReduction32"],[8,"Write"],[8,"RollingHasher"],[8,"MarkedIterScan"],[8,"GetDistinctMut"],[8,"AssociatedValue"],[8,"AsTotalOrd"],[8,"PartialOrdExt"],[8,"SerdeByteStr"],[8,"CharTools"],[8,"IterPrint"],[4,"LcaMonoidDefaultId"]]},\
"library_checker":{"doc":"Verification of <code>competitive</code> crate by Library-Checker","t":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,2,2,2,5,2,5,2,2,2,5,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,5,2,2,2,2,5,2,5,2,2,2,5,5,2,5,2,2,2,2,5,2,2,2,2,5,2,2,2,2,2,2,2,5,0,0,0,0,2,2,5,5,2,2,5,2,2,2,2,5,5,2,2,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,5,2,2,2,2,2,5,2,5,2,5,2,2,5,5,2,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,5,2,2,5,2,2,2,5,2,2,5,2,2,2,2,2,5,2,5,2,2,5,2,5,2,5,0,0,5,5,0,0,0,2,5,2,5,2,2,2,5,5],"n":["datastructure","graph","math","sample","string","deque_operate_all_composite","dynamic_sequence_range_affine_range_sum","line_add_get_min","point_add_range_sum","point_set_range_composite","queue_operate_all_composite","range_affine_range_sum","range_chmin_chmax_add_range_sum","range_kth_smallest","staticrmq","unionfind","vertex_add_path_sum","vertex_add_subtree_sum","vertex_set_path_composite","DequeAggregation","LinearOperation","MInt","MInt998244353","deque_operate_all_composite","MInt998244353","RangeSumRangeLinear","SplaySequence","dynamic_sequence_range_affine_range_sum","LineSet","line_add_get_min","AdditiveOperation","BinaryIndexedTree","SegmentTree","point_add_range_sum_binary_indexed_tree","point_add_range_sum_segment_tree","LinearOperation","MInt","MInt998244353","SegmentTree","point_set_range_composite","LinearOperation","MInt","MInt998244353","QueueAggregation","queue_operate_all_composite","LazySegmentTree","MInt","MInt998244353","One","RangeSumRangeLinear","range_affine_range_sum","LazySegmentTree","RangeChminChmaxAdd","RangeSumRangeChminChmaxAdd","Saturating","range_chmin_chmax_add_range_sum","WaveletMatrix","range_kth_smallest","DisjointSparseTable","MinOperation","SegmentTree","staticrmq_disjoint_sparse_table","staticrmq_segment_tree","UnionFind","unionfind","AdditiveOperation","BinaryIndexedTree","HeavyLightDecomposition","TreeGraphScanner","vertex_add_path_sum","AdditiveOperation","EulerTourForVertex","SegmentTree","UndirectedSparseGraph","vertex_add_subtree_sum","HeavyLightDecomposition","LinearOperation","MInt","MInt998244353","ReverseOperation","SegmentTree","TreeGraphScanner","vertex_set_path_composite","bipartitematching","directedmst","lca","scc","BipartiteMatching","DinicBuilder","bipartitematching","bipartitematching_dinic","AdditiveOperation","EdgeListGraphScanner","directedmst","EulerTourForRichVertex","HeavyLightDecomposition","LcaMonoidDefaultId","UndirectedSparseGraph","lca_euler_tour","lca_hld","DirectedSparseGraph","StronglyConnectedComponent","scc","convolution_mod","convolution_mod_1000000007","discrete_logarithm_mod","enumerate_primes","exp_of_formal_power_series","factorize","find_linear_recurrence","inv_of_formal_power_series","kth_term_of_linearly_recurrent_sequence","log_of_formal_power_series","min_of_mod_of_linear","multipoint_evaluation","polynomial_taylor_shift","pow_of_formal_power_series","sharp_p_subset_sum","sqrt_mod","sqrt_of_formal_power_series","sum_of_floor_of_linear","two_sat","Convolve998244353","ConvolveSteps","MInt","MInt998244353","convolution_mod","Convolve","ConvolveSteps","MInt1000000007","MIntConvolve","Modulo1000000007","convolution_mod_1000000007","discrete_logarithm","discrete_logarithm_mod","PrimeList","enumerate_primes","Fps998244353","MInt998244353","exp_of_formal_power_series","factorize","prime_factors_flatten","MInt998244353","berlekamp_massey","find_linear_recurrence","Fps998244353","MInt998244353","inv_of_formal_power_series","Fps998244353","MInt998244353","One","kth_term_of_linearly_recurrent_sequence","Fps998244353","MInt998244353","log_of_formal_power_series","binary_search","floor_sum_range_freq","min_of_mod_of_linear","Fps998244353","MInt998244353","multipoint_evaluation","Fps998244353","MInt998244353","MemorizedFactorial","polynomial_taylor_shift","Fps998244353","MInt998244353","pow_of_formal_power_series","Fps998244353","MInt998244353","MemorizedFactorial","One","Zero","sharp_p_subset_sum","DynMIntU32","sqrt_mod","Fps998244353","MInt998244353","sqrt_of_formal_power_series","floor_sum","sum_of_floor_of_linear","TwoSatisfiability","two_sat","aplusb","many_aplusb","aplusb","many_aplusb","number_of_substrings","suffixarray","zalgorithm","SuffixArray","number_of_substrings","SuffixArray","suffixarray","Mersenne61x1","RollingHasher","Zarray","zalgorithm","zalgorithm_rolling_hash"],"q":["library_checker","","","","","library_checker::datastructure","","","","","","","","","","","","","","library_checker::datastructure::deque_operate_all_composite","","","","","library_checker::datastructure::dynamic_sequence_range_affine_range_sum","","","","library_checker::datastructure::line_add_get_min","","library_checker::datastructure::point_add_range_sum","","","","","library_checker::datastructure::point_set_range_composite","","","","","library_checker::datastructure::queue_operate_all_composite","","","","","library_checker::datastructure::range_affine_range_sum","","","","","","library_checker::datastructure::range_chmin_chmax_add_range_sum","","","","","library_checker::datastructure::range_kth_smallest","","library_checker::datastructure::staticrmq","","","","","library_checker::datastructure::unionfind","","library_checker::datastructure::vertex_add_path_sum","","","","","library_checker::datastructure::vertex_add_subtree_sum","","","","","library_checker::datastructure::vertex_set_path_composite","","","","","","","","library_checker::graph","","","","library_checker::graph::bipartitematching","","","","library_checker::graph::directedmst","","","library_checker::graph::lca","","","","","","library_checker::graph::scc","","","library_checker::math","","","","","","","","","","","","","","","","","","","library_checker::math::convolution_mod","","","","","library_checker::math::convolution_mod_1000000007","","","","","","library_checker::math::discrete_logarithm_mod","","library_checker::math::enumerate_primes","","library_checker::math::exp_of_formal_power_series","","","library_checker::math::factorize","","library_checker::math::find_linear_recurrence","","","library_checker::math::inv_of_formal_power_series","","","library_checker::math::kth_term_of_linearly_recurrent_sequence","","","","library_checker::math::log_of_formal_power_series","","","library_checker::math::min_of_mod_of_linear","","","library_checker::math::multipoint_evaluation","","","library_checker::math::polynomial_taylor_shift","","","","library_checker::math::pow_of_formal_power_series","","","library_checker::math::sharp_p_subset_sum","","","","","","library_checker::math::sqrt_mod","","library_checker::math::sqrt_of_formal_power_series","","","library_checker::math::sum_of_floor_of_linear","","library_checker::math::two_sat","","library_checker::sample","","library_checker::sample::aplusb","library_checker::sample::many_aplusb","library_checker::string","","","library_checker::string::number_of_substrings","","library_checker::string::suffixarray","","library_checker::string::zalgorithm","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","✅  AC  49ms","","","","✅  AC  1999ms","","✅  AC  401ms","","","","✅  AC  81ms","✅  AC  118ms","","","","","✅  AC  216ms","","","","","✅  AC  42ms","","","","","","✅  AC  733ms","","","","","✅  AC  1640ms","","✅  AC  295ms","","","","✅  AC  164ms","✅  AC  136ms","","✅  AC  16ms","","","","","✅  AC  439ms","","","","","✅  AC  235ms","","","","","","","","✅  AC  204ms","","","","","","","✅  AC  93ms","✅  AC  819ms","","","✅  AC  133ms","","","","","✅  AC  680ms","✅  AC  653ms","","","✅  AC  170ms","","","","","","","","","","","","","","","","","","","","","","","","✅  AC  169ms","","","","","","✅  AC  391ms","","✅  AC  3ms","","✅  AC  1434ms","","","✅  AC  446ms","✅  AC  85ms","","","","✅  AC  124ms","","","✅  AC  168ms","","","","✅  AC  1591ms","","","✅  AC  220ms","","","✅  AC  1263ms","","","✅  AC  569ms","","","","✅  AC  131ms","","","✅  AC  619ms","","","","","","✅  AC  515ms","","✅  AC  78ms","","","✅  AC  420ms","","✅  AC  34ms","","✅  AC  202ms","","","✅  AC  0ms","✅  AC  171ms","","","","","✅  AC  812ms","","✅  AC  795ms","","","","✅  AC  34ms","✅  AC  131ms"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]],0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,[[1,2]],0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,[[1,2]],[[1,2]],0,0,[[1,2]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,[[1,2]],0,0,0,[[1,2]],0,0,[[1,2]],0,0,0,0,0,[[1,2]],0,[[1,2]],0,0,[[1,2]],0,[[1,2]],0,[[1,2]],0,0,[[1,2]],[[1,2]],0,0,0,0,[[1,2]],0,[[1,2]],0,0,0,[[1,2]],[[1,2]]],"p":[[8,"Read"],[8,"Write"]],"a":{"verify":[23,27,29,33,34,39,44,50,55,57,61,62,64,69,74,82,89,90,93,98,99,102,126,132,134,136,139,140,144,147,151,154,157,160,164,167,173,175,178,180,182,185,186,191,193,197,198]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
